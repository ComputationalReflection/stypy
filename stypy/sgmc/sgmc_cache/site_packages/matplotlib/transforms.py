
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: matplotlib includes a framework for arbitrary geometric
3: transformations that is used determine the final position of all
4: elements drawn on the canvas.
5: 
6: Transforms are composed into trees of :class:`TransformNode` objects
7: whose actual value depends on their children.  When the contents of
8: children change, their parents are automatically invalidated.  The
9: next time an invalidated transform is accessed, it is recomputed to
10: reflect those changes.  This invalidation/caching approach prevents
11: unnecessary recomputations of transforms, and contributes to better
12: interactive performance.
13: 
14: For example, here is a graph of the transform tree used to plot data
15: to the graph:
16: 
17: .. image:: ../_static/transforms.png
18: 
19: The framework can be used for both affine and non-affine
20: transformations.  However, for speed, we want use the backend
21: renderers to perform affine transformations whenever possible.
22: Therefore, it is possible to perform just the affine or non-affine
23: part of a transformation on a set of data.  The affine is always
24: assumed to occur after the non-affine.  For any transform::
25: 
26:   full transform == non-affine part + affine part
27: 
28: The backends are not expected to handle non-affine transformations
29: themselves.
30: '''
31: 
32: # Note: There are a number of places in the code where we use `np.min` or
33: # `np.minimum` instead of the builtin `min`, and likewise for `max`.  This is
34: # done so that `nan`s are propagated, instead of being silently dropped.
35: 
36: from __future__ import (absolute_import, division, print_function,
37:                         unicode_literals)
38: 
39: import six
40: 
41: import numpy as np
42: from matplotlib._path import (affine_transform, count_bboxes_overlapping_bbox,
43:     update_path_extents)
44: from numpy.linalg import inv
45: 
46: import weakref
47: import warnings
48: 
49: from . import cbook
50: from .path import Path
51: 
52: DEBUG = False
53: 
54: 
55: class TransformNode(object):
56:     '''
57:     :class:`TransformNode` is the base class for anything that
58:     participates in the transform tree and needs to invalidate its
59:     parents or be invalidated.  This includes classes that are not
60:     really transforms, such as bounding boxes, since some transforms
61:     depend on bounding boxes to compute their values.
62:     '''
63:     _gid = 0
64: 
65:     # Invalidation may affect only the affine part.  If the
66:     # invalidation was "affine-only", the _invalid member is set to
67:     # INVALID_AFFINE_ONLY
68:     INVALID_NON_AFFINE = 1
69:     INVALID_AFFINE = 2
70:     INVALID = INVALID_NON_AFFINE | INVALID_AFFINE
71: 
72:     # Some metadata about the transform, used to determine whether an
73:     # invalidation is affine-only
74:     is_affine = False
75:     is_bbox = False
76: 
77:     pass_through = False
78:     '''
79:     If pass_through is True, all ancestors will always be
80:     invalidated, even if 'self' is already invalid.
81:     '''
82: 
83:     def __init__(self, shorthand_name=None):
84:         '''
85:         Creates a new :class:`TransformNode`.
86: 
87:         **shorthand_name** - a string representing the "name" of this
88:                              transform. The name carries no significance
89:                              other than to improve the readability of
90:                              ``str(transform)`` when DEBUG=True.
91:         '''
92:         self._parents = {}
93: 
94:         # TransformNodes start out as invalid until their values are
95:         # computed for the first time.
96:         self._invalid = 1
97:         self._shorthand_name = shorthand_name or ''
98: 
99:     if DEBUG:
100:         def __str__(self):
101:             # either just return the name of this TransformNode, or it's repr
102:             return self._shorthand_name or repr(self)
103: 
104:     def __getstate__(self):
105:         d = self.__dict__.copy()
106:         # turn the dictionary with weak values into a normal dictionary
107:         d['_parents'] = dict((k, v()) for (k, v) in
108:                              six.iteritems(self._parents))
109:         return d
110: 
111:     def __setstate__(self, data_dict):
112:         self.__dict__ = data_dict
113:         # turn the normal dictionary back into a dictionary with weak
114:         # values
115:         self._parents = dict((k, weakref.ref(v)) for (k, v) in
116:                              six.iteritems(self._parents) if v is not None)
117: 
118:     def __copy__(self, *args):
119:         raise NotImplementedError(
120:             "TransformNode instances can not be copied. " +
121:             "Consider using frozen() instead.")
122:     __deepcopy__ = __copy__
123: 
124:     def invalidate(self):
125:         '''
126:         Invalidate this :class:`TransformNode` and triggers an
127:         invalidation of its ancestors.  Should be called any
128:         time the transform changes.
129:         '''
130:         value = self.INVALID
131:         if self.is_affine:
132:             value = self.INVALID_AFFINE
133:         return self._invalidate_internal(value, invalidating_node=self)
134: 
135:     def _invalidate_internal(self, value, invalidating_node):
136:         '''
137:         Called by :meth:`invalidate` and subsequently ascends the transform
138:         stack calling each TransformNode's _invalidate_internal method.
139:         '''
140:         # determine if this call will be an extension to the invalidation
141:         # status. If not, then a shortcut means that we needn't invoke an
142:         # invalidation up the transform stack as it will already have been
143:         # invalidated.
144: 
145:         # N.B This makes the invalidation sticky, once a transform has been
146:         # invalidated as NON_AFFINE, then it will always be invalidated as
147:         # NON_AFFINE even when triggered with a AFFINE_ONLY invalidation.
148:         # In most cases this is not a problem (i.e. for interactive panning and
149:         # zooming) and the only side effect will be on performance.
150:         status_changed = self._invalid < value
151: 
152:         if self.pass_through or status_changed:
153:             self._invalid = value
154: 
155:             for parent in list(six.itervalues(self._parents)):
156:                 # Dereference the weak reference
157:                 parent = parent()
158:                 if parent is not None:
159:                     parent._invalidate_internal(
160:                         value=value, invalidating_node=self)
161: 
162:     def set_children(self, *children):
163:         '''
164:         Set the children of the transform, to let the invalidation
165:         system know which transforms can invalidate this transform.
166:         Should be called from the constructor of any transforms that
167:         depend on other transforms.
168:         '''
169:         # Parents are stored as weak references, so that if the
170:         # parents are destroyed, references from the children won't
171:         # keep them alive.
172:         for child in children:
173:             child._parents[id(self)] = weakref.ref(self)
174: 
175:     if DEBUG:
176:         _set_children = set_children
177: 
178:         def set_children(self, *children):
179:             self._set_children(*children)
180:             self._children = children
181:         set_children.__doc__ = _set_children.__doc__
182: 
183:     def frozen(self):
184:         '''
185:         Returns a frozen copy of this transform node.  The frozen copy
186:         will not update when its children change.  Useful for storing
187:         a previously known state of a transform where
188:         ``copy.deepcopy()`` might normally be used.
189:         '''
190:         return self
191: 
192:     if DEBUG:
193:         def write_graphviz(self, fobj, highlight=[]):
194:             '''
195:             For debugging purposes.
196: 
197:             Writes the transform tree rooted at 'self' to a graphviz "dot"
198:             format file.  This file can be run through the "dot" utility
199:             to produce a graph of the transform tree.
200: 
201:             Affine transforms are marked in blue.  Bounding boxes are
202:             marked in yellow.
203: 
204:             *fobj*: A Python file-like object
205: 
206:             Once the "dot" file has been created, it can be turned into a
207:             png easily with::
208: 
209:                 $> dot -Tpng -o $OUTPUT_FILE $DOT_FILE
210: 
211:             '''
212:             seen = set()
213: 
214:             def recurse(root):
215:                 if root in seen:
216:                     return
217:                 seen.add(root)
218:                 props = {}
219:                 label = root.__class__.__name__
220:                 if root._invalid:
221:                     label = '[%s]' % label
222:                 if root in highlight:
223:                     props['style'] = 'bold'
224:                 props['shape'] = 'box'
225:                 props['label'] = '"%s"' % label
226:                 props = ' '.join(['%s=%s' % (key, val)
227:                                   for key, val
228:                                   in six.iteritems(props)])
229: 
230:                 fobj.write('%s [%s];\n' %
231:                            (hash(root), props))
232: 
233:                 if hasattr(root, '_children'):
234:                     for child in root._children:
235:                         name = '?'
236:                         for key, val in six.iteritems(root.__dict__):
237:                             if val is child:
238:                                 name = key
239:                                 break
240:                         fobj.write('"%s" -> "%s" [label="%s", fontsize=10];\n'
241:                                     % (hash(root),
242:                                     hash(child),
243:                                     name))
244:                         recurse(child)
245: 
246:             fobj.write("digraph G {\n")
247:             recurse(self)
248:             fobj.write("}\n")
249: 
250: 
251: class BboxBase(TransformNode):
252:     '''
253:     This is the base class of all bounding boxes, and provides
254:     read-only access to its data.  A mutable bounding box is provided
255:     by the :class:`Bbox` class.
256: 
257:     The canonical representation is as two points, with no
258:     restrictions on their ordering.  Convenience properties are
259:     provided to get the left, bottom, right and top edges and width
260:     and height, but these are not stored explicitly.
261:     '''
262:     is_bbox = True
263:     is_affine = True
264: 
265:     if DEBUG:
266:         def _check(points):
267:             if isinstance(points, np.ma.MaskedArray):
268:                 warnings.warn("Bbox bounds are a masked array.")
269:             points = np.asarray(points)
270:             if (points[1, 0] - points[0, 0] == 0 or
271:                 points[1, 1] - points[0, 1] == 0):
272:                 warnings.warn("Singular Bbox.")
273:         _check = staticmethod(_check)
274: 
275:     def frozen(self):
276:         return Bbox(self.get_points().copy())
277:     frozen.__doc__ = TransformNode.__doc__
278: 
279:     def __array__(self, *args, **kwargs):
280:         return self.get_points()
281: 
282:     def is_unit(self):
283:         '''
284:         Returns True if the :class:`Bbox` is the unit bounding box
285:         from (0, 0) to (1, 1).
286:         '''
287:         return list(self.get_points().flatten()) == [0., 0., 1., 1.]
288: 
289:     @property
290:     def x0(self):
291:         '''
292:         (property) :attr:`x0` is the first of the pair of *x* coordinates that
293:         define the bounding box. :attr:`x0` is not guaranteed to be less than
294:         :attr:`x1`.  If you require that, use :attr:`xmin`.
295:         '''
296:         return self.get_points()[0, 0]
297: 
298:     @property
299:     def y0(self):
300:         '''
301:         (property) :attr:`y0` is the first of the pair of *y* coordinates that
302:         define the bounding box. :attr:`y0` is not guaranteed to be less than
303:         :attr:`y1`.  If you require that, use :attr:`ymin`.
304:         '''
305:         return self.get_points()[0, 1]
306: 
307:     @property
308:     def x1(self):
309:         '''
310:         (property) :attr:`x1` is the second of the pair of *x* coordinates that
311:         define the bounding box. :attr:`x1` is not guaranteed to be greater
312:         than :attr:`x0`.  If you require that, use :attr:`xmax`.
313:         '''
314:         return self.get_points()[1, 0]
315: 
316:     @property
317:     def y1(self):
318:         '''
319:         (property) :attr:`y1` is the second of the pair of *y* coordinates that
320:         define the bounding box. :attr:`y1` is not guaranteed to be greater
321:         than :attr:`y0`.  If you require that, use :attr:`ymax`.
322:         '''
323:         return self.get_points()[1, 1]
324: 
325:     @property
326:     def p0(self):
327:         '''
328:         (property) :attr:`p0` is the first pair of (*x*, *y*) coordinates that
329:         define the bounding box.  It is not guaranteed to be the bottom-left
330:         corner.  For that, use :attr:`min`.
331:         '''
332:         return self.get_points()[0]
333: 
334:     @property
335:     def p1(self):
336:         '''
337:         (property) :attr:`p1` is the second pair of (*x*, *y*) coordinates that
338:         define the bounding box.  It is not guaranteed to be the top-right
339:         corner.  For that, use :attr:`max`.
340:         '''
341:         return self.get_points()[1]
342: 
343:     @property
344:     def xmin(self):
345:         '''
346:         (property) :attr:`xmin` is the left edge of the bounding box.
347:         '''
348:         return np.min(self.get_points()[:, 0])
349: 
350:     @property
351:     def ymin(self):
352:         '''
353:         (property) :attr:`ymin` is the bottom edge of the bounding box.
354:         '''
355:         return np.min(self.get_points()[:, 1])
356: 
357:     @property
358:     def xmax(self):
359:         '''
360:         (property) :attr:`xmax` is the right edge of the bounding box.
361:         '''
362:         return np.max(self.get_points()[:, 0])
363: 
364:     @property
365:     def ymax(self):
366:         '''
367:         (property) :attr:`ymax` is the top edge of the bounding box.
368:         '''
369:         return np.max(self.get_points()[:, 1])
370: 
371:     @property
372:     def min(self):
373:         '''
374:         (property) :attr:`min` is the bottom-left corner of the bounding box.
375:         '''
376:         return np.min(self.get_points(), axis=0)
377: 
378:     @property
379:     def max(self):
380:         '''
381:         (property) :attr:`max` is the top-right corner of the bounding box.
382:         '''
383:         return np.max(self.get_points(), axis=0)
384: 
385:     @property
386:     def intervalx(self):
387:         '''
388:         (property) :attr:`intervalx` is the pair of *x* coordinates that define
389:         the bounding box. It is not guaranteed to be sorted from left to right.
390:         '''
391:         return self.get_points()[:, 0]
392: 
393:     @property
394:     def intervaly(self):
395:         '''
396:         (property) :attr:`intervaly` is the pair of *y* coordinates that define
397:         the bounding box.  It is not guaranteed to be sorted from bottom to
398:         top.
399:         '''
400:         return self.get_points()[:, 1]
401: 
402:     @property
403:     def width(self):
404:         '''
405:         (property) The width of the bounding box.  It may be negative if
406:         :attr:`x1` < :attr:`x0`.
407:         '''
408:         points = self.get_points()
409:         return points[1, 0] - points[0, 0]
410: 
411:     @property
412:     def height(self):
413:         '''
414:         (property) The height of the bounding box.  It may be negative if
415:         :attr:`y1` < :attr:`y0`.
416:         '''
417:         points = self.get_points()
418:         return points[1, 1] - points[0, 1]
419: 
420:     @property
421:     def size(self):
422:         '''
423:         (property) The width and height of the bounding box.  May be negative,
424:         in the same way as :attr:`width` and :attr:`height`.
425:         '''
426:         points = self.get_points()
427:         return points[1] - points[0]
428: 
429:     @property
430:     def bounds(self):
431:         '''
432:         (property) Returns (:attr:`x0`, :attr:`y0`, :attr:`width`,
433:         :attr:`height`).
434:         '''
435:         x0, y0, x1, y1 = self.get_points().flatten()
436:         return (x0, y0, x1 - x0, y1 - y0)
437: 
438:     @property
439:     def extents(self):
440:         '''
441:         (property) Returns (:attr:`x0`, :attr:`y0`, :attr:`x1`,
442:         :attr:`y1`).
443:         '''
444:         return self.get_points().flatten().copy()
445: 
446:     def get_points(self):
447:         raise NotImplementedError
448: 
449:     def containsx(self, x):
450:         '''
451:         Returns whether `x` is in the closed (:attr:`x0`, :attr:`x1`) interval.
452:         '''
453:         x0, x1 = self.intervalx
454:         return x0 <= x <= x1 or x0 >= x >= x1
455: 
456:     def containsy(self, y):
457:         '''
458:         Returns whether `y` is in the closed (:attr:`y0`, :attr:`y1`) interval.
459:         '''
460:         y0, y1 = self.intervaly
461:         return y0 <= y <= y1 or y0 >= y >= y1
462: 
463:     def contains(self, x, y):
464:         '''
465:         Returns whether `x, y` is in the bounding box or on its edge.
466:         '''
467:         return self.containsx(x) and self.containsy(y)
468: 
469:     def overlaps(self, other):
470:         '''
471:         Returns whether this bounding box overlaps with the other bounding box.
472:         '''
473:         ax1, ay1, ax2, ay2 = self.extents
474:         bx1, by1, bx2, by2 = other.extents
475:         if ax2 < ax1:
476:             ax2, ax1 = ax1, ax2
477:         if ay2 < ay1:
478:             ay2, ay1 = ay1, ay2
479:         if bx2 < bx1:
480:             bx2, bx1 = bx1, bx2
481:         if by2 < by1:
482:             by2, by1 = by1, by2
483:         return ax1 <= bx2 and bx1 <= ax2 and ay1 <= by2 and by1 <= ay2
484: 
485:     def fully_containsx(self, x):
486:         '''
487:         Returns whether `x` is in the open (:attr:`x0`, :attr:`x1`) interval.
488:         '''
489:         x0, x1 = self.intervalx
490:         return x0 < x < x1 or x0 > x > x1
491: 
492:     def fully_containsy(self, y):
493:         '''
494:         Returns whether `y` is in the open (:attr:`y0`, :attr:`y1`) interval.
495:         '''
496:         y0, y1 = self.intervaly
497:         return y0 < y < y1 or y0 > y > y1
498: 
499:     def fully_contains(self, x, y):
500:         '''
501:         Returns whether `x, y` is in the bounding box, but not on its edge.
502:         '''
503:         return self.fully_containsx(x) and self.fully_containsy(y)
504: 
505:     def fully_overlaps(self, other):
506:         '''
507:         Returns whether this bounding box overlaps with the other bounding box,
508:         not including the edges.
509:         '''
510:         ax1, ay1, ax2, ay2 = self.extents
511:         bx1, by1, bx2, by2 = other.extents
512:         if ax2 < ax1:
513:             ax2, ax1 = ax1, ax2
514:         if ay2 < ay1:
515:             ay2, ay1 = ay1, ay2
516:         if bx2 < bx1:
517:             bx2, bx1 = bx1, bx2
518:         if by2 < by1:
519:             by2, by1 = by1, by2
520:         return ax1 < bx2 and bx1 < ax2 and ay1 < by2 and by1 < ay2
521: 
522:     def transformed(self, transform):
523:         '''
524:         Return a new :class:`Bbox` object, statically transformed by
525:         the given transform.
526:         '''
527:         pts = self.get_points()
528:         ll, ul, lr = transform.transform(np.array([pts[0],
529:             [pts[0, 0], pts[1, 1]], [pts[1, 0], pts[0, 1]]]))
530:         return Bbox([ll, [lr[0], ul[1]]])
531: 
532:     def inverse_transformed(self, transform):
533:         '''
534:         Return a new :class:`Bbox` object, statically transformed by
535:         the inverse of the given transform.
536:         '''
537:         return self.transformed(transform.inverted())
538: 
539:     coefs = {'C':  (0.5, 0.5),
540:              'SW': (0, 0),
541:              'S':  (0.5, 0),
542:              'SE': (1.0, 0),
543:              'E':  (1.0, 0.5),
544:              'NE': (1.0, 1.0),
545:              'N':  (0.5, 1.0),
546:              'NW': (0, 1.0),
547:              'W':  (0, 0.5)}
548: 
549:     def anchored(self, c, container=None):
550:         '''
551:         Return a copy of the :class:`Bbox`, shifted to position *c*
552:         within a container.
553: 
554:         *c*: may be either:
555: 
556:           * a sequence (*cx*, *cy*) where *cx* and *cy* range from 0
557:             to 1, where 0 is left or bottom and 1 is right or top
558: 
559:           * a string:
560:             - 'C' for centered
561:             - 'S' for bottom-center
562:             - 'SE' for bottom-left
563:             - 'E' for left
564:             - etc.
565: 
566:         Optional argument *container* is the box within which the
567:         :class:`Bbox` is positioned; it defaults to the initial
568:         :class:`Bbox`.
569:         '''
570:         if container is None:
571:             container = self
572:         l, b, w, h = container.bounds
573:         if isinstance(c, six.string_types):
574:             cx, cy = self.coefs[c]
575:         else:
576:             cx, cy = c
577:         L, B, W, H = self.bounds
578:         return Bbox(self._points +
579:                     [(l + cx * (w - W)) - L,
580:                      (b + cy * (h - H)) - B])
581: 
582:     def shrunk(self, mx, my):
583:         '''
584:         Return a copy of the :class:`Bbox`, shrunk by the factor *mx*
585:         in the *x* direction and the factor *my* in the *y* direction.
586:         The lower left corner of the box remains unchanged.  Normally
587:         *mx* and *my* will be less than 1, but this is not enforced.
588:         '''
589:         w, h = self.size
590:         return Bbox([self._points[0],
591:                     self._points[0] + [mx * w, my * h]])
592: 
593:     def shrunk_to_aspect(self, box_aspect, container=None, fig_aspect=1.0):
594:         '''
595:         Return a copy of the :class:`Bbox`, shrunk so that it is as
596:         large as it can be while having the desired aspect ratio,
597:         *box_aspect*.  If the box coordinates are relative---that
598:         is, fractions of a larger box such as a figure---then the
599:         physical aspect ratio of that figure is specified with
600:         *fig_aspect*, so that *box_aspect* can also be given as a
601:         ratio of the absolute dimensions, not the relative dimensions.
602:         '''
603:         if box_aspect <= 0 or fig_aspect <= 0:
604:             raise ValueError("'box_aspect' and 'fig_aspect' must be positive")
605:         if container is None:
606:             container = self
607:         w, h = container.size
608:         H = w * box_aspect / fig_aspect
609:         if H <= h:
610:             W = w
611:         else:
612:             W = h * fig_aspect / box_aspect
613:             H = h
614:         return Bbox([self._points[0],
615:                      self._points[0] + (W, H)])
616: 
617:     def splitx(self, *args):
618:         '''
619:         e.g., ``bbox.splitx(f1, f2, ...)``
620: 
621:         Returns a list of new :class:`Bbox` objects formed by
622:         splitting the original one with vertical lines at fractional
623:         positions *f1*, *f2*, ...
624:         '''
625:         xf = [0] + list(args) + [1]
626:         x0, y0, x1, y1 = self.extents
627:         w = x1 - x0
628:         return [Bbox([[x0 + xf0 * w, y0], [x0 + xf1 * w, y1]])
629:                 for xf0, xf1 in zip(xf[:-1], xf[1:])]
630: 
631:     def splity(self, *args):
632:         '''
633:         e.g., ``bbox.splitx(f1, f2, ...)``
634: 
635:         Returns a list of new :class:`Bbox` objects formed by
636:         splitting the original one with horizontal lines at fractional
637:         positions *f1*, *f2*, ...
638:         '''
639:         yf = [0] + list(args) + [1]
640:         x0, y0, x1, y1 = self.extents
641:         h = y1 - y0
642:         return [Bbox([[x0, y0 + yf0 * h], [x1, y0 + yf1 * h]])
643:                 for yf0, yf1 in zip(yf[:-1], yf[1:])]
644: 
645:     def count_contains(self, vertices):
646:         '''
647:         Count the number of vertices contained in the :class:`Bbox`.
648:         Any vertices with a non-finite x or y value are ignored.
649: 
650:         *vertices* is a Nx2 Numpy array.
651:         '''
652:         if len(vertices) == 0:
653:             return 0
654:         vertices = np.asarray(vertices)
655:         with np.errstate(invalid='ignore'):
656:             return (((self.min < vertices) &
657:                      (vertices < self.max)).all(axis=1).sum())
658: 
659:     def count_overlaps(self, bboxes):
660:         '''
661:         Count the number of bounding boxes that overlap this one.
662: 
663:         bboxes is a sequence of :class:`BboxBase` objects
664:         '''
665:         return count_bboxes_overlapping_bbox(
666:             self, np.atleast_3d([np.array(x) for x in bboxes]))
667: 
668:     def expanded(self, sw, sh):
669:         '''
670:         Return a new :class:`Bbox` which is this :class:`Bbox`
671:         expanded around its center by the given factors *sw* and
672:         *sh*.
673:         '''
674:         width = self.width
675:         height = self.height
676:         deltaw = (sw * width - width) / 2.0
677:         deltah = (sh * height - height) / 2.0
678:         a = np.array([[-deltaw, -deltah], [deltaw, deltah]])
679:         return Bbox(self._points + a)
680: 
681:     def padded(self, p):
682:         '''
683:         Return a new :class:`Bbox` that is padded on all four sides by
684:         the given value.
685:         '''
686:         points = self.get_points()
687:         return Bbox(points + [[-p, -p], [p, p]])
688: 
689:     def translated(self, tx, ty):
690:         '''
691:         Return a copy of the :class:`Bbox`, statically translated by
692:         *tx* and *ty*.
693:         '''
694:         return Bbox(self._points + (tx, ty))
695: 
696:     def corners(self):
697:         '''
698:         Return an array of points which are the four corners of this
699:         rectangle.  For example, if this :class:`Bbox` is defined by
700:         the points (*a*, *b*) and (*c*, *d*), :meth:`corners` returns
701:         (*a*, *b*), (*a*, *d*), (*c*, *b*) and (*c*, *d*).
702:         '''
703:         l, b, r, t = self.get_points().flatten()
704:         return np.array([[l, b], [l, t], [r, b], [r, t]])
705: 
706:     def rotated(self, radians):
707:         '''
708:         Return a new bounding box that bounds a rotated version of
709:         this bounding box by the given radians.  The new bounding box
710:         is still aligned with the axes, of course.
711:         '''
712:         corners = self.corners()
713:         corners_rotated = Affine2D().rotate(radians).transform(corners)
714:         bbox = Bbox.unit()
715:         bbox.update_from_data_xy(corners_rotated, ignore=True)
716:         return bbox
717: 
718:     @staticmethod
719:     def union(bboxes):
720:         '''
721:         Return a :class:`Bbox` that contains all of the given bboxes.
722:         '''
723:         if not len(bboxes):
724:             raise ValueError("'bboxes' cannot be empty")
725:         x0 = np.min([bbox.xmin for bbox in bboxes])
726:         x1 = np.max([bbox.xmax for bbox in bboxes])
727:         y0 = np.min([bbox.ymin for bbox in bboxes])
728:         y1 = np.max([bbox.ymax for bbox in bboxes])
729:         return Bbox([[x0, y0], [x1, y1]])
730: 
731:     @staticmethod
732:     def intersection(bbox1, bbox2):
733:         '''
734:         Return the intersection of the two bboxes or None
735:         if they do not intersect.
736:         '''
737:         x0 = np.maximum(bbox1.xmin, bbox2.xmin)
738:         x1 = np.minimum(bbox1.xmax, bbox2.xmax)
739:         y0 = np.maximum(bbox1.ymin, bbox2.ymin)
740:         y1 = np.minimum(bbox1.ymax, bbox2.ymax)
741:         return Bbox([[x0, y0], [x1, y1]]) if x0 <= x1 and y0 <= y1 else None
742: 
743: 
744: class Bbox(BboxBase):
745:     '''
746:     A mutable bounding box.
747:     '''
748: 
749:     def __init__(self, points, **kwargs):
750:         '''
751:         *points*: a 2x2 numpy array of the form [[x0, y0], [x1, y1]]
752: 
753:         If you need to create a :class:`Bbox` object from another form
754:         of data, consider the static methods :meth:`unit`,
755:         :meth:`from_bounds` and :meth:`from_extents`.
756:         '''
757:         BboxBase.__init__(self, **kwargs)
758:         points = np.asarray(points, float)
759:         if points.shape != (2, 2):
760:             raise ValueError('Bbox points must be of the form '
761:                              '"[[x0, y0], [x1, y1]]".')
762:         self._points = points
763:         self._minpos = np.array([np.inf, np.inf])
764:         self._ignore = True
765:         # it is helpful in some contexts to know if the bbox is a
766:         # default or has been mutated; we store the orig points to
767:         # support the mutated methods
768:         self._points_orig = self._points.copy()
769:     if DEBUG:
770:         ___init__ = __init__
771: 
772:         def __init__(self, points, **kwargs):
773:             self._check(points)
774:             self.___init__(points, **kwargs)
775: 
776:         def invalidate(self):
777:             self._check(self._points)
778:             TransformNode.invalidate(self)
779: 
780:     @staticmethod
781:     def unit():
782:         '''
783:         (staticmethod) Create a new unit :class:`Bbox` from (0, 0) to
784:         (1, 1).
785:         '''
786:         return Bbox(np.array([[0.0, 0.0], [1.0, 1.0]], float))
787: 
788:     @staticmethod
789:     def null():
790:         '''
791:         (staticmethod) Create a new null :class:`Bbox` from (inf, inf) to
792:         (-inf, -inf).
793:         '''
794:         return Bbox(np.array([[np.inf, np.inf], [-np.inf, -np.inf]], float))
795: 
796:     @staticmethod
797:     def from_bounds(x0, y0, width, height):
798:         '''
799:         (staticmethod) Create a new :class:`Bbox` from *x0*, *y0*,
800:         *width* and *height*.
801: 
802:         *width* and *height* may be negative.
803:         '''
804:         return Bbox.from_extents(x0, y0, x0 + width, y0 + height)
805: 
806:     @staticmethod
807:     def from_extents(*args):
808:         '''
809:         (staticmethod) Create a new Bbox from *left*, *bottom*,
810:         *right* and *top*.
811: 
812:         The *y*-axis increases upwards.
813:         '''
814:         points = np.array(args, dtype=float).reshape(2, 2)
815:         return Bbox(points)
816: 
817:     def __format__(self, fmt):
818:         return (
819:             'Bbox(x0={0.x0:{1}}, y0={0.y0:{1}}, x1={0.x1:{1}}, y1={0.y1:{1}})'.
820:             format(self, fmt))
821: 
822:     def __str__(self):
823:         return format(self, '')
824: 
825:     def __repr__(self):
826:         return 'Bbox([[{0.x0}, {0.y0}], [{0.x1}, {0.y1}]])'.format(self)
827: 
828:     def ignore(self, value):
829:         '''
830:         Set whether the existing bounds of the box should be ignored
831:         by subsequent calls to :meth:`update_from_data_xy`.
832: 
833:         *value*:
834: 
835:            - When True, subsequent calls to :meth:`update_from_data_xy`
836:              will ignore the existing bounds of the :class:`Bbox`.
837: 
838:            - When False, subsequent calls to :meth:`update_from_data_xy`
839:              will include the existing bounds of the :class:`Bbox`.
840:         '''
841:         self._ignore = value
842: 
843:     @cbook.deprecated('2.0', alternative='update_from_data_xy')
844:     def update_from_data(self, x, y, ignore=None):
845:         '''
846:         Update the bounds of the :class:`Bbox` based on the passed in
847:         data.  After updating, the bounds will have positive *width*
848:         and *height*; *x0* and *y0* will be the minimal values.
849: 
850:         *x*: a numpy array of *x*-values
851: 
852:         *y*: a numpy array of *y*-values
853: 
854:         *ignore*:
855:            - when True, ignore the existing bounds of the :class:`Bbox`.
856:            - when False, include the existing bounds of the :class:`Bbox`.
857:            - when None, use the last value passed to :meth:`ignore`.
858:         '''
859:         warnings.warn(
860:             "update_from_data requires a memory copy -- please replace with "
861:             "update_from_data_xy")
862: 
863:         xy = np.hstack((x.reshape((len(x), 1)), y.reshape((len(y), 1))))
864:         return self.update_from_data_xy(xy, ignore)
865: 
866:     def update_from_path(self, path, ignore=None, updatex=True, updatey=True):
867:         '''
868:         Update the bounds of the :class:`Bbox` based on the passed in
869:         data.  After updating, the bounds will have positive *width*
870:         and *height*; *x0* and *y0* will be the minimal values.
871: 
872:         *path*: a :class:`~matplotlib.path.Path` instance
873: 
874:         *ignore*:
875:            - when True, ignore the existing bounds of the :class:`Bbox`.
876:            - when False, include the existing bounds of the :class:`Bbox`.
877:            - when None, use the last value passed to :meth:`ignore`.
878: 
879:         *updatex*: when True, update the x values
880: 
881:         *updatey*: when True, update the y values
882: 
883:         '''
884:         if ignore is None:
885:             ignore = self._ignore
886: 
887:         if path.vertices.size == 0:
888:             return
889: 
890:         points, minpos, changed = update_path_extents(
891:             path, None, self._points, self._minpos, ignore)
892: 
893:         if changed:
894:             self.invalidate()
895:             if updatex:
896:                 self._points[:, 0] = points[:, 0]
897:                 self._minpos[0] = minpos[0]
898:             if updatey:
899:                 self._points[:, 1] = points[:, 1]
900:                 self._minpos[1] = minpos[1]
901: 
902:     def update_from_data_xy(self, xy, ignore=None, updatex=True, updatey=True):
903:         '''
904:         Update the bounds of the :class:`Bbox` based on the passed in
905:         data.  After updating, the bounds will have positive *width*
906:         and *height*; *x0* and *y0* will be the minimal values.
907: 
908:         *xy*: a numpy array of 2D points
909: 
910:         *ignore*:
911:            - when True, ignore the existing bounds of the :class:`Bbox`.
912:            - when False, include the existing bounds of the :class:`Bbox`.
913:            - when None, use the last value passed to :meth:`ignore`.
914: 
915:         *updatex*: when True, update the x values
916: 
917:         *updatey*: when True, update the y values
918:         '''
919:         if len(xy) == 0:
920:             return
921: 
922:         path = Path(xy)
923:         self.update_from_path(path, ignore=ignore,
924:                                     updatex=updatex, updatey=updatey)
925: 
926:     @BboxBase.x0.setter
927:     def x0(self, val):
928:         self._points[0, 0] = val
929:         self.invalidate()
930: 
931:     @BboxBase.y0.setter
932:     def y0(self, val):
933:         self._points[0, 1] = val
934:         self.invalidate()
935: 
936:     @BboxBase.x1.setter
937:     def x1(self, val):
938:         self._points[1, 0] = val
939:         self.invalidate()
940: 
941:     @BboxBase.y1.setter
942:     def y1(self, val):
943:         self._points[1, 1] = val
944:         self.invalidate()
945: 
946:     @BboxBase.p0.setter
947:     def p0(self, val):
948:         self._points[0] = val
949:         self.invalidate()
950: 
951:     @BboxBase.p1.setter
952:     def p1(self, val):
953:         self._points[1] = val
954:         self.invalidate()
955: 
956:     @BboxBase.intervalx.setter
957:     def intervalx(self, interval):
958:         self._points[:, 0] = interval
959:         self.invalidate()
960: 
961:     @BboxBase.intervaly.setter
962:     def intervaly(self, interval):
963:         self._points[:, 1] = interval
964:         self.invalidate()
965: 
966:     @BboxBase.bounds.setter
967:     def bounds(self, bounds):
968:         l, b, w, h = bounds
969:         points = np.array([[l, b], [l + w, b + h]], float)
970:         if np.any(self._points != points):
971:             self._points = points
972:             self.invalidate()
973: 
974:     @property
975:     def minpos(self):
976:         return self._minpos
977: 
978:     @property
979:     def minposx(self):
980:         return self._minpos[0]
981: 
982:     @property
983:     def minposy(self):
984:         return self._minpos[1]
985: 
986:     def get_points(self):
987:         '''
988:         Get the points of the bounding box directly as a numpy array
989:         of the form: [[x0, y0], [x1, y1]].
990:         '''
991:         self._invalid = 0
992:         return self._points
993: 
994:     def set_points(self, points):
995:         '''
996:         Set the points of the bounding box directly from a numpy array
997:         of the form: [[x0, y0], [x1, y1]].  No error checking is
998:         performed, as this method is mainly for internal use.
999:         '''
1000:         if np.any(self._points != points):
1001:             self._points = points
1002:             self.invalidate()
1003: 
1004:     def set(self, other):
1005:         '''
1006:         Set this bounding box from the "frozen" bounds of another
1007:         :class:`Bbox`.
1008:         '''
1009:         if np.any(self._points != other.get_points()):
1010:             self._points = other.get_points()
1011:             self.invalidate()
1012: 
1013:     def mutated(self):
1014:         'return whether the bbox has changed since init'
1015:         return self.mutatedx() or self.mutatedy()
1016: 
1017:     def mutatedx(self):
1018:         'return whether the x-limits have changed since init'
1019:         return (self._points[0, 0] != self._points_orig[0, 0] or
1020:                 self._points[1, 0] != self._points_orig[1, 0])
1021: 
1022:     def mutatedy(self):
1023:         'return whether the y-limits have changed since init'
1024:         return (self._points[0, 1] != self._points_orig[0, 1] or
1025:                 self._points[1, 1] != self._points_orig[1, 1])
1026: 
1027: 
1028: class TransformedBbox(BboxBase):
1029:     '''
1030:     A :class:`Bbox` that is automatically transformed by a given
1031:     transform.  When either the child bounding box or transform
1032:     changes, the bounds of this bbox will update accordingly.
1033:     '''
1034:     def __init__(self, bbox, transform, **kwargs):
1035:         '''
1036:         *bbox*: a child :class:`Bbox`
1037: 
1038:         *transform*: a 2D :class:`Transform`
1039:         '''
1040:         if not bbox.is_bbox:
1041:             raise ValueError("'bbox' is not a bbox")
1042:         if not isinstance(transform, Transform):
1043:             msg = ("'transform' must be an instance of"
1044:                    " 'matplotlib.transform.Transform'")
1045:             raise ValueError(msg)
1046:         if transform.input_dims != 2 or transform.output_dims != 2:
1047:             msg = "The input and output dimensions of 'transform' must be 2"
1048:             raise ValueError(msg)
1049: 
1050:         BboxBase.__init__(self, **kwargs)
1051:         self._bbox = bbox
1052:         self._transform = transform
1053:         self.set_children(bbox, transform)
1054:         self._points = None
1055: 
1056:     def __repr__(self):
1057:         return "TransformedBbox(%r, %r)" % (self._bbox, self._transform)
1058: 
1059:     def get_points(self):
1060:         if self._invalid:
1061:             p = self._bbox.get_points()
1062:             # Transform all four points, then make a new bounding box
1063:             # from the result, taking care to make the orientation the
1064:             # same.
1065:             points = self._transform.transform(
1066:                 [[p[0, 0], p[0, 1]],
1067:                  [p[1, 0], p[0, 1]],
1068:                  [p[0, 0], p[1, 1]],
1069:                  [p[1, 0], p[1, 1]]])
1070:             points = np.ma.filled(points, 0.0)
1071: 
1072:             xs = min(points[:, 0]), max(points[:, 0])
1073:             if p[0, 0] > p[1, 0]:
1074:                 xs = xs[::-1]
1075: 
1076:             ys = min(points[:, 1]), max(points[:, 1])
1077:             if p[0, 1] > p[1, 1]:
1078:                 ys = ys[::-1]
1079: 
1080:             self._points = np.array([
1081:                 [xs[0], ys[0]],
1082:                 [xs[1], ys[1]]
1083:             ])
1084: 
1085:             self._invalid = 0
1086:         return self._points
1087:     get_points.__doc__ = Bbox.get_points.__doc__
1088: 
1089:     if DEBUG:
1090:         _get_points = get_points
1091: 
1092:         def get_points(self):
1093:             points = self._get_points()
1094:             self._check(points)
1095:             return points
1096: 
1097: 
1098: class LockableBbox(BboxBase):
1099:     '''
1100:     A :class:`Bbox` where some elements may be locked at certain values.
1101: 
1102:     When the child bounding box changes, the bounds of this bbox will update
1103:     accordingly with the exception of the locked elements.
1104:     '''
1105:     def __init__(self, bbox, x0=None, y0=None, x1=None, y1=None, **kwargs):
1106:         '''
1107:         Parameters
1108:         ----------
1109:         bbox : Bbox
1110:             The child bounding box to wrap.
1111: 
1112:         x0 : float or None
1113:             The locked value for x0, or None to leave unlocked.
1114: 
1115:         y0 : float or None
1116:             The locked value for y0, or None to leave unlocked.
1117: 
1118:         x1 : float or None
1119:             The locked value for x1, or None to leave unlocked.
1120: 
1121:         y1 : float or None
1122:             The locked value for y1, or None to leave unlocked.
1123: 
1124:         '''
1125:         if not bbox.is_bbox:
1126:             raise ValueError("'bbox' is not a bbox")
1127: 
1128:         BboxBase.__init__(self, **kwargs)
1129:         self._bbox = bbox
1130:         self.set_children(bbox)
1131:         self._points = None
1132:         fp = [x0, y0, x1, y1]
1133:         mask = [val is None for val in fp]
1134:         self._locked_points = np.ma.array(fp, np.float_,
1135:                                           mask=mask).reshape((2, 2))
1136: 
1137:     def __repr__(self):
1138:         return "LockableBbox(%r, %r)" % (self._bbox, self._locked_points)
1139: 
1140:     def get_points(self):
1141:         if self._invalid:
1142:             points = self._bbox.get_points()
1143:             self._points = np.where(self._locked_points.mask,
1144:                                     points,
1145:                                     self._locked_points)
1146:             self._invalid = 0
1147:         return self._points
1148:     get_points.__doc__ = Bbox.get_points.__doc__
1149: 
1150:     if DEBUG:
1151:         _get_points = get_points
1152: 
1153:         def get_points(self):
1154:             points = self._get_points()
1155:             self._check(points)
1156:             return points
1157: 
1158:     @property
1159:     def locked_x0(self):
1160:         '''
1161:         float or None: The value used for the locked x0.
1162:         '''
1163:         if self._locked_points.mask[0, 0]:
1164:             return None
1165:         else:
1166:             return self._locked_points[0, 0]
1167: 
1168:     @locked_x0.setter
1169:     def locked_x0(self, x0):
1170:         self._locked_points.mask[0, 0] = x0 is None
1171:         self._locked_points.data[0, 0] = x0
1172:         self.invalidate()
1173: 
1174:     @property
1175:     def locked_y0(self):
1176:         '''
1177:         float or None: The value used for the locked y0.
1178:         '''
1179:         if self._locked_points.mask[0, 1]:
1180:             return None
1181:         else:
1182:             return self._locked_points[0, 1]
1183: 
1184:     @locked_y0.setter
1185:     def locked_y0(self, y0):
1186:         self._locked_points.mask[0, 1] = y0 is None
1187:         self._locked_points.data[0, 1] = y0
1188:         self.invalidate()
1189: 
1190:     @property
1191:     def locked_x1(self):
1192:         '''
1193:         float or None: The value used for the locked x1.
1194:         '''
1195:         if self._locked_points.mask[1, 0]:
1196:             return None
1197:         else:
1198:             return self._locked_points[1, 0]
1199: 
1200:     @locked_x1.setter
1201:     def locked_x1(self, x1):
1202:         self._locked_points.mask[1, 0] = x1 is None
1203:         self._locked_points.data[1, 0] = x1
1204:         self.invalidate()
1205: 
1206:     @property
1207:     def locked_y1(self):
1208:         '''
1209:         float or None: The value used for the locked y1.
1210:         '''
1211:         if self._locked_points.mask[1, 1]:
1212:             return None
1213:         else:
1214:             return self._locked_points[1, 1]
1215: 
1216:     @locked_y1.setter
1217:     def locked_y1(self, y1):
1218:         self._locked_points.mask[1, 1] = y1 is None
1219:         self._locked_points.data[1, 1] = y1
1220:         self.invalidate()
1221: 
1222: 
1223: class Transform(TransformNode):
1224:     '''
1225:     The base class of all :class:`TransformNode` instances that
1226:     actually perform a transformation.
1227: 
1228:     All non-affine transformations should be subclasses of this class.
1229:     New affine transformations should be subclasses of
1230:     :class:`Affine2D`.
1231: 
1232:     Subclasses of this class should override the following members (at
1233:     minimum):
1234: 
1235:       - :attr:`input_dims`
1236:       - :attr:`output_dims`
1237:       - :meth:`transform`
1238:       - :attr:`is_separable`
1239:       - :attr:`has_inverse`
1240:       - :meth:`inverted` (if :attr:`has_inverse` is True)
1241: 
1242:     If the transform needs to do something non-standard with
1243:     :class:`matplotlib.path.Path` objects, such as adding curves
1244:     where there were once line segments, it should override:
1245: 
1246:       - :meth:`transform_path`
1247:     '''
1248:     input_dims = None
1249:     '''
1250:     The number of input dimensions of this transform.
1251:     Must be overridden (with integers) in the subclass.
1252:     '''
1253: 
1254:     output_dims = None
1255:     '''
1256:     The number of output dimensions of this transform.
1257:     Must be overridden (with integers) in the subclass.
1258:     '''
1259: 
1260:     has_inverse = False
1261:     '''True if this transform has a corresponding inverse transform.'''
1262: 
1263:     is_separable = False
1264:     '''True if this transform is separable in the x- and y- dimensions.'''
1265: 
1266:     def __add__(self, other):
1267:         '''
1268:         Composes two transforms together such that *self* is followed
1269:         by *other*.
1270:         '''
1271:         if isinstance(other, Transform):
1272:             return composite_transform_factory(self, other)
1273:         raise TypeError(
1274:             "Can not add Transform to object of type '%s'" % type(other))
1275: 
1276:     def __radd__(self, other):
1277:         '''
1278:         Composes two transforms together such that *self* is followed
1279:         by *other*.
1280:         '''
1281:         if isinstance(other, Transform):
1282:             return composite_transform_factory(other, self)
1283:         raise TypeError(
1284:             "Can not add Transform to object of type '%s'" % type(other))
1285: 
1286:     # Equality is based on object identity for `Transform`s (so we don't
1287:     # override `__eq__`), but some subclasses, such as TransformWrapper &
1288:     # AffineBase, override this behavior.
1289: 
1290:     def _iter_break_from_left_to_right(self):
1291:         '''
1292:         Returns an iterator breaking down this transform stack from left to
1293:         right recursively. If self == ((A, N), A) then the result will be an
1294:         iterator which yields I : ((A, N), A), followed by A : (N, A),
1295:         followed by (A, N) : (A), but not ((A, N), A) : I.
1296: 
1297:         This is equivalent to flattening the stack then yielding
1298:         ``flat_stack[:i], flat_stack[i:]`` where i=0..(n-1).
1299: 
1300:         '''
1301:         yield IdentityTransform(), self
1302: 
1303:     @property
1304:     def depth(self):
1305:         '''
1306:         Returns the number of transforms which have been chained
1307:         together to form this Transform instance.
1308: 
1309:         .. note::
1310: 
1311:             For the special case of a Composite transform, the maximum depth
1312:             of the two is returned.
1313: 
1314:         '''
1315:         return 1
1316: 
1317:     def contains_branch(self, other):
1318:         '''
1319:         Return whether the given transform is a sub-tree of this transform.
1320: 
1321:         This routine uses transform equality to identify sub-trees, therefore
1322:         in many situations it is object id which will be used.
1323: 
1324:         For the case where the given transform represents the whole
1325:         of this transform, returns True.
1326: 
1327:         '''
1328:         if self.depth < other.depth:
1329:             return False
1330: 
1331:         # check that a subtree is equal to other (starting from self)
1332:         for _, sub_tree in self._iter_break_from_left_to_right():
1333:             if sub_tree == other:
1334:                 return True
1335:         return False
1336: 
1337:     def contains_branch_seperately(self, other_transform):
1338:         '''
1339:         Returns whether the given branch is a sub-tree of this transform on
1340:         each seperate dimension.
1341: 
1342:         A common use for this method is to identify if a transform is a blended
1343:         transform containing an axes' data transform. e.g.::
1344: 
1345:             x_isdata, y_isdata = trans.contains_branch_seperately(ax.transData)
1346: 
1347:         '''
1348:         if self.output_dims != 2:
1349:             raise ValueError('contains_branch_seperately only supports '
1350:                              'transforms with 2 output dimensions')
1351:         # for a non-blended transform each seperate dimension is the same, so
1352:         # just return the appropriate shape.
1353:         return [self.contains_branch(other_transform)] * 2
1354: 
1355:     def __sub__(self, other):
1356:         '''
1357:         Returns a transform stack which goes all the way down self's transform
1358:         stack, and then ascends back up other's stack. If it can, this is
1359:         optimised::
1360: 
1361:             # normally
1362:             A - B == a + b.inverted()
1363: 
1364:             # sometimes, when A contains the tree B there is no need to
1365:             # descend all the way down to the base of A (via B), instead we
1366:             # can just stop at B.
1367: 
1368:             (A + B) - (B)^-1 == A
1369: 
1370:             # similarly, when B contains tree A, we can avoid decending A at
1371:             # all, basically:
1372:             A - (A + B) == ((B + A) - A).inverted() or B^-1
1373: 
1374:         For clarity, the result of ``(A + B) - B + B == (A + B)``.
1375: 
1376:         '''
1377:         # we only know how to do this operation if other is a Transform.
1378:         if not isinstance(other, Transform):
1379:             return NotImplemented
1380: 
1381:         for remainder, sub_tree in self._iter_break_from_left_to_right():
1382:             if sub_tree == other:
1383:                 return remainder
1384: 
1385:         for remainder, sub_tree in other._iter_break_from_left_to_right():
1386:             if sub_tree == self:
1387:                 if not remainder.has_inverse:
1388:                     raise ValueError("The shortcut cannot be computed since "
1389:                      "other's transform includes a non-invertable component.")
1390:                 return remainder.inverted()
1391: 
1392:         # if we have got this far, then there was no shortcut possible
1393:         if other.has_inverse:
1394:             return self + other.inverted()
1395:         else:
1396:             raise ValueError('It is not possible to compute transA - transB '
1397:                              'since transB cannot be inverted and there is no '
1398:                              'shortcut possible.')
1399: 
1400:     def __array__(self, *args, **kwargs):
1401:         '''
1402:         Array interface to get at this Transform's affine matrix.
1403:         '''
1404:         return self.get_affine().get_matrix()
1405: 
1406:     def transform(self, values):
1407:         '''
1408:         Performs the transformation on the given array of values.
1409: 
1410:         Accepts a numpy array of shape (N x :attr:`input_dims`) and
1411:         returns a numpy array of shape (N x :attr:`output_dims`).
1412: 
1413:         Alternatively, accepts a numpy array of length :attr:`input_dims`
1414:         and returns a numpy array of length :attr:`output_dims`.
1415:         '''
1416:         # Ensure that values is a 2d array (but remember whether
1417:         # we started with a 1d or 2d array).
1418:         values = np.asanyarray(values)
1419:         ndim = values.ndim
1420:         values = values.reshape((-1, self.input_dims))
1421: 
1422:         # Transform the values
1423:         res = self.transform_affine(self.transform_non_affine(values))
1424: 
1425:         # Convert the result back to the shape of the input values.
1426:         if ndim == 0:
1427:             assert not np.ma.is_masked(res)  # just to be on the safe side
1428:             return res[0, 0]
1429:         if ndim == 1:
1430:             return res.reshape(-1)
1431:         elif ndim == 2:
1432:             return res
1433:         raise ValueError(
1434:             "Input values must have shape (N x {dims}) "
1435:             "or ({dims}).".format(dims=self.input_dims))
1436: 
1437:     def transform_affine(self, values):
1438:         '''
1439:         Performs only the affine part of this transformation on the
1440:         given array of values.
1441: 
1442:         ``transform(values)`` is always equivalent to
1443:         ``transform_affine(transform_non_affine(values))``.
1444: 
1445:         In non-affine transformations, this is generally a no-op.  In
1446:         affine transformations, this is equivalent to
1447:         ``transform(values)``.
1448: 
1449:         Accepts a numpy array of shape (N x :attr:`input_dims`) and
1450:         returns a numpy array of shape (N x :attr:`output_dims`).
1451: 
1452:         Alternatively, accepts a numpy array of length :attr:`input_dims`
1453:         and returns a numpy array of length :attr:`output_dims`.
1454:         '''
1455:         return self.get_affine().transform(values)
1456: 
1457:     def transform_non_affine(self, values):
1458:         '''
1459:         Performs only the non-affine part of the transformation.
1460: 
1461:         ``transform(values)`` is always equivalent to
1462:         ``transform_affine(transform_non_affine(values))``.
1463: 
1464:         In non-affine transformations, this is generally equivalent to
1465:         ``transform(values)``.  In affine transformations, this is
1466:         always a no-op.
1467: 
1468:         Accepts a numpy array of shape (N x :attr:`input_dims`) and
1469:         returns a numpy array of shape (N x :attr:`output_dims`).
1470: 
1471:         Alternatively, accepts a numpy array of length :attr:`input_dims`
1472:         and returns a numpy array of length :attr:`output_dims`.
1473:         '''
1474:         return values
1475: 
1476:     def transform_bbox(self, bbox):
1477:         '''
1478:         Transform the given bounding box.
1479: 
1480:         Note, for smarter transforms including caching (a common
1481:         requirement for matplotlib figures), see :class:`TransformedBbox`.
1482:         '''
1483:         return Bbox(self.transform(bbox.get_points()))
1484: 
1485:     def get_affine(self):
1486:         '''
1487:         Get the affine part of this transform.
1488:         '''
1489:         return IdentityTransform()
1490: 
1491:     def get_matrix(self):
1492:         '''
1493:         Get the Affine transformation array for the affine part
1494:         of this transform.
1495: 
1496:         '''
1497:         return self.get_affine().get_matrix()
1498: 
1499:     def transform_point(self, point):
1500:         '''
1501:         A convenience function that returns the transformed copy of a
1502:         single point.
1503: 
1504:         The point is given as a sequence of length :attr:`input_dims`.
1505:         The transformed point is returned as a sequence of length
1506:         :attr:`output_dims`.
1507:         '''
1508:         if len(point) != self.input_dims:
1509:             msg = "The length of 'point' must be 'self.input_dims'"
1510:             raise ValueError(msg)
1511:         return self.transform(np.asarray([point]))[0]
1512: 
1513:     def transform_path(self, path):
1514:         '''
1515:         Returns a transformed path.
1516: 
1517:         *path*: a :class:`~matplotlib.path.Path` instance.
1518: 
1519:         In some cases, this transform may insert curves into the path
1520:         that began as line segments.
1521:         '''
1522:         return self.transform_path_affine(self.transform_path_non_affine(path))
1523: 
1524:     def transform_path_affine(self, path):
1525:         '''
1526:         Returns a path, transformed only by the affine part of
1527:         this transform.
1528: 
1529:         *path*: a :class:`~matplotlib.path.Path` instance.
1530: 
1531:         ``transform_path(path)`` is equivalent to
1532:         ``transform_path_affine(transform_path_non_affine(values))``.
1533:         '''
1534:         return self.get_affine().transform_path_affine(path)
1535: 
1536:     def transform_path_non_affine(self, path):
1537:         '''
1538:         Returns a path, transformed only by the non-affine
1539:         part of this transform.
1540: 
1541:         *path*: a :class:`~matplotlib.path.Path` instance.
1542: 
1543:         ``transform_path(path)`` is equivalent to
1544:         ``transform_path_affine(transform_path_non_affine(values))``.
1545:         '''
1546:         x = self.transform_non_affine(path.vertices)
1547:         return Path._fast_from_codes_and_verts(x, path.codes,
1548:                 {'interpolation_steps': path._interpolation_steps,
1549:                  'should_simplify': path.should_simplify})
1550: 
1551:     def transform_angles(self, angles, pts, radians=False, pushoff=1e-5):
1552:         '''
1553:         Performs transformation on a set of angles anchored at
1554:         specific locations.
1555: 
1556:         The *angles* must be a column vector (i.e., numpy array).
1557: 
1558:         The *pts* must be a two-column numpy array of x,y positions
1559:         (angle transforms currently only work in 2D).  This array must
1560:         have the same number of rows as *angles*.
1561: 
1562:         *radians* indicates whether or not input angles are given in
1563:          radians (True) or degrees (False; the default).
1564: 
1565:         *pushoff* is the distance to move away from *pts* for
1566:          determining transformed angles (see discussion of method
1567:          below).
1568: 
1569:         The transformed angles are returned in an array with the same
1570:         size as *angles*.
1571: 
1572:         The generic version of this method uses a very generic
1573:         algorithm that transforms *pts*, as well as locations very
1574:         close to *pts*, to find the angle in the transformed system.
1575:         '''
1576:         # Must be 2D
1577:         if self.input_dims != 2 or self.output_dims != 2:
1578:             raise NotImplementedError('Only defined in 2D')
1579: 
1580:         if pts.shape[1] != 2:
1581:             raise ValueError("'pts' must be array with 2 columns for x,y")
1582: 
1583:         if angles.ndim != 1 or angles.shape[0] != pts.shape[0]:
1584:             msg = "'angles' must be a column vector and have same number of"
1585:             msg += " rows as 'pts'"
1586:             raise ValueError(msg)
1587: 
1588:         # Convert to radians if desired
1589:         if not radians:
1590:             angles = angles / 180.0 * np.pi
1591: 
1592:         # Move a short distance away
1593:         pts2 = pts + pushoff * np.c_[np.cos(angles), np.sin(angles)]
1594: 
1595:         # Transform both sets of points
1596:         tpts = self.transform(pts)
1597:         tpts2 = self.transform(pts2)
1598: 
1599:         # Calculate transformed angles
1600:         d = tpts2 - tpts
1601:         a = np.arctan2(d[:, 1], d[:, 0])
1602: 
1603:         # Convert back to degrees if desired
1604:         if not radians:
1605:             a = a * 180.0 / np.pi
1606: 
1607:         return a
1608: 
1609:     def inverted(self):
1610:         '''
1611:         Return the corresponding inverse transformation.
1612: 
1613:         The return value of this method should be treated as
1614:         temporary.  An update to *self* does not cause a corresponding
1615:         update to its inverted copy.
1616: 
1617:         ``x === self.inverted().transform(self.transform(x))``
1618:         '''
1619:         raise NotImplementedError()
1620: 
1621: 
1622: class TransformWrapper(Transform):
1623:     '''
1624:     A helper class that holds a single child transform and acts
1625:     equivalently to it.
1626: 
1627:     This is useful if a node of the transform tree must be replaced at
1628:     run time with a transform of a different type.  This class allows
1629:     that replacement to correctly trigger invalidation.
1630: 
1631:     Note that :class:`TransformWrapper` instances must have the same
1632:     input and output dimensions during their entire lifetime, so the
1633:     child transform may only be replaced with another child transform
1634:     of the same dimensions.
1635:     '''
1636:     pass_through = True
1637: 
1638:     def __init__(self, child):
1639:         '''
1640:         *child*: A class:`Transform` instance.  This child may later
1641:         be replaced with :meth:`set`.
1642:         '''
1643:         if not isinstance(child, Transform):
1644:             msg = ("'child' must be an instance of"
1645:                    " 'matplotlib.transform.Transform'")
1646:             raise ValueError(msg)
1647:         self._init(child)
1648:         self.set_children(child)
1649: 
1650:     def _init(self, child):
1651:         Transform.__init__(self)
1652:         self.input_dims = child.input_dims
1653:         self.output_dims = child.output_dims
1654:         self._set(child)
1655:         self._invalid = 0
1656: 
1657:     def __eq__(self, other):
1658:         return self._child.__eq__(other)
1659: 
1660:     if DEBUG:
1661: 
1662:         def __str__(self):
1663:             return str(self._child)
1664: 
1665:     # NOTE: Transform.__[gs]etstate__ should be sufficient when using only
1666:     # Python 3.4+.
1667:     def __getstate__(self):
1668:         # only store the child information and parents
1669:         return {
1670:             'child': self._child,
1671:             'input_dims': self.input_dims,
1672:             'output_dims': self.output_dims,
1673:             # turn the weak-values dictionary into a normal dictionary
1674:             'parents': dict((k, v()) for (k, v) in
1675:                             six.iteritems(self._parents))
1676:         }
1677: 
1678:     def __setstate__(self, state):
1679:         # re-initialise the TransformWrapper with the state's child
1680:         self._init(state['child'])
1681:         # The child may not be unpickled yet, so restore its information.
1682:         self.input_dims = state['input_dims']
1683:         self.output_dims = state['output_dims']
1684:         # turn the normal dictionary back into a dictionary with weak
1685:         # values
1686:         self._parents = dict((k, weakref.ref(v)) for (k, v) in
1687:                              six.iteritems(state['parents']) if v is not None)
1688: 
1689:     def __repr__(self):
1690:         return "TransformWrapper(%r)" % self._child
1691: 
1692:     def frozen(self):
1693:         return self._child.frozen()
1694:     frozen.__doc__ = Transform.frozen.__doc__
1695: 
1696:     def _set(self, child):
1697:         self._child = child
1698: 
1699:         self.transform = child.transform
1700:         self.transform_affine = child.transform_affine
1701:         self.transform_non_affine = child.transform_non_affine
1702:         self.transform_path = child.transform_path
1703:         self.transform_path_affine = child.transform_path_affine
1704:         self.transform_path_non_affine = child.transform_path_non_affine
1705:         self.get_affine = child.get_affine
1706:         self.inverted = child.inverted
1707:         self.get_matrix = child.get_matrix
1708: 
1709:         # note we do not wrap other properties here since the transform's
1710:         # child can be changed with WrappedTransform.set and so checking
1711:         # is_affine and other such properties may be dangerous.
1712: 
1713:     def set(self, child):
1714:         '''
1715:         Replace the current child of this transform with another one.
1716: 
1717:         The new child must have the same number of input and output
1718:         dimensions as the current child.
1719:         '''
1720:         if (child.input_dims != self.input_dims or
1721:                 child.output_dims != self.output_dims):
1722:             msg = ("The new child must have the same number of input and"
1723:                    " output dimensions as the current child.")
1724:             raise ValueError(msg)
1725: 
1726:         self.set_children(child)
1727:         self._set(child)
1728: 
1729:         self._invalid = 0
1730:         self.invalidate()
1731:         self._invalid = 0
1732: 
1733:     def _get_is_affine(self):
1734:         return self._child.is_affine
1735:     is_affine = property(_get_is_affine)
1736: 
1737:     def _get_is_separable(self):
1738:         return self._child.is_separable
1739:     is_separable = property(_get_is_separable)
1740: 
1741:     def _get_has_inverse(self):
1742:         return self._child.has_inverse
1743:     has_inverse = property(_get_has_inverse)
1744: 
1745: 
1746: class AffineBase(Transform):
1747:     '''
1748:     The base class of all affine transformations of any number of
1749:     dimensions.
1750:     '''
1751:     is_affine = True
1752: 
1753:     def __init__(self, *args, **kwargs):
1754:         Transform.__init__(self, *args, **kwargs)
1755:         self._inverted = None
1756: 
1757:     def __array__(self, *args, **kwargs):
1758:         # optimises the access of the transform matrix vs the superclass
1759:         return self.get_matrix()
1760: 
1761:     @staticmethod
1762:     def _concat(a, b):
1763:         '''
1764:         Concatenates two transformation matrices (represented as numpy
1765:         arrays) together.
1766:         '''
1767:         return np.dot(b, a)
1768: 
1769:     def __eq__(self, other):
1770:         if getattr(other, "is_affine", False):
1771:             return np.all(self.get_matrix() == other.get_matrix())
1772:         return NotImplemented
1773: 
1774:     def transform(self, values):
1775:         return self.transform_affine(values)
1776:     transform.__doc__ = Transform.transform.__doc__
1777: 
1778:     def transform_affine(self, values):
1779:         raise NotImplementedError('Affine subclasses should override this '
1780:                                   'method.')
1781:     transform_affine.__doc__ = Transform.transform_affine.__doc__
1782: 
1783:     def transform_non_affine(self, points):
1784:         return points
1785:     transform_non_affine.__doc__ = Transform.transform_non_affine.__doc__
1786: 
1787:     def transform_path(self, path):
1788:         return self.transform_path_affine(path)
1789:     transform_path.__doc__ = Transform.transform_path.__doc__
1790: 
1791:     def transform_path_affine(self, path):
1792:         return Path(self.transform_affine(path.vertices),
1793:                     path.codes, path._interpolation_steps)
1794:     transform_path_affine.__doc__ = Transform.transform_path_affine.__doc__
1795: 
1796:     def transform_path_non_affine(self, path):
1797:         return path
1798:     transform_path_non_affine.__doc__ = Transform.transform_path_non_affine.__doc__
1799: 
1800:     def get_affine(self):
1801:         return self
1802:     get_affine.__doc__ = Transform.get_affine.__doc__
1803: 
1804: 
1805: class Affine2DBase(AffineBase):
1806:     '''
1807:     The base class of all 2D affine transformations.
1808: 
1809:     2D affine transformations are performed using a 3x3 numpy array::
1810: 
1811:         a c e
1812:         b d f
1813:         0 0 1
1814: 
1815:     This class provides the read-only interface.  For a mutable 2D
1816:     affine transformation, use :class:`Affine2D`.
1817: 
1818:     Subclasses of this class will generally only need to override a
1819:     constructor and :meth:`get_matrix` that generates a custom 3x3 matrix.
1820:     '''
1821:     has_inverse = True
1822: 
1823:     input_dims = 2
1824:     output_dims = 2
1825: 
1826:     def frozen(self):
1827:         return Affine2D(self.get_matrix().copy())
1828:     frozen.__doc__ = AffineBase.frozen.__doc__
1829: 
1830:     def _get_is_separable(self):
1831:         mtx = self.get_matrix()
1832:         return mtx[0, 1] == 0.0 and mtx[1, 0] == 0.0
1833:     is_separable = property(_get_is_separable)
1834: 
1835:     def to_values(self):
1836:         '''
1837:         Return the values of the matrix as a sequence (a,b,c,d,e,f)
1838:         '''
1839:         mtx = self.get_matrix()
1840:         return tuple(mtx[:2].swapaxes(0, 1).flatten())
1841: 
1842:     @staticmethod
1843:     def matrix_from_values(a, b, c, d, e, f):
1844:         '''
1845:         (staticmethod) Create a new transformation matrix as a 3x3
1846:         numpy array of the form::
1847: 
1848:           a c e
1849:           b d f
1850:           0 0 1
1851:         '''
1852:         return np.array([[a, c, e], [b, d, f], [0.0, 0.0, 1.0]], float)
1853: 
1854:     def transform_affine(self, points):
1855:         mtx = self.get_matrix()
1856:         if isinstance(points, np.ma.MaskedArray):
1857:             tpoints = affine_transform(points.data, mtx)
1858:             return np.ma.MaskedArray(tpoints, mask=np.ma.getmask(points))
1859:         return affine_transform(points, mtx)
1860: 
1861:     def transform_point(self, point):
1862:         mtx = self.get_matrix()
1863:         return affine_transform([point], mtx)[0]
1864:     transform_point.__doc__ = AffineBase.transform_point.__doc__
1865: 
1866:     if DEBUG:
1867:         _transform_affine = transform_affine
1868: 
1869:         def transform_affine(self, points):
1870:             # The major speed trap here is just converting to the
1871:             # points to an array in the first place.  If we can use
1872:             # more arrays upstream, that should help here.
1873:             if not isinstance(points, (np.ma.MaskedArray, np.ndarray)):
1874:                 warnings.warn(
1875:                     ('A non-numpy array of type %s was passed in for ' +
1876:                      'transformation.  Please correct this.')
1877:                     % type(points))
1878:             return self._transform_affine(points)
1879:     transform_affine.__doc__ = AffineBase.transform_affine.__doc__
1880: 
1881:     def inverted(self):
1882:         if self._inverted is None or self._invalid:
1883:             mtx = self.get_matrix()
1884:             shorthand_name = None
1885:             if self._shorthand_name:
1886:                 shorthand_name = '(%s)-1' % self._shorthand_name
1887:             self._inverted = Affine2D(inv(mtx), shorthand_name=shorthand_name)
1888:             self._invalid = 0
1889:         return self._inverted
1890:     inverted.__doc__ = AffineBase.inverted.__doc__
1891: 
1892: 
1893: class Affine2D(Affine2DBase):
1894:     '''
1895:     A mutable 2D affine transformation.
1896:     '''
1897: 
1898:     def __init__(self, matrix=None, **kwargs):
1899:         '''
1900:         Initialize an Affine transform from a 3x3 numpy float array::
1901: 
1902:           a c e
1903:           b d f
1904:           0 0 1
1905: 
1906:         If *matrix* is None, initialize with the identity transform.
1907:         '''
1908:         Affine2DBase.__init__(self, **kwargs)
1909:         if matrix is None:
1910:             matrix = np.identity(3)
1911:         elif DEBUG:
1912:             matrix = np.asarray(matrix, float)
1913:             assert matrix.shape == (3, 3)
1914:         self._mtx = matrix
1915:         self._invalid = 0
1916: 
1917:     def __repr__(self):
1918:         return "Affine2D(%s)" % repr(self._mtx)
1919: 
1920:     @staticmethod
1921:     def from_values(a, b, c, d, e, f):
1922:         '''
1923:         (staticmethod) Create a new Affine2D instance from the given
1924:         values::
1925: 
1926:           a c e
1927:           b d f
1928:           0 0 1
1929: 
1930:         .
1931:         '''
1932:         return Affine2D(
1933:             np.array([a, c, e, b, d, f, 0.0, 0.0, 1.0], float).reshape((3, 3)))
1934: 
1935:     def get_matrix(self):
1936:         '''
1937:         Get the underlying transformation matrix as a 3x3 numpy array::
1938: 
1939:           a c e
1940:           b d f
1941:           0 0 1
1942: 
1943:         .
1944:         '''
1945:         self._invalid = 0
1946:         return self._mtx
1947: 
1948:     def set_matrix(self, mtx):
1949:         '''
1950:         Set the underlying transformation matrix from a 3x3 numpy array::
1951: 
1952:           a c e
1953:           b d f
1954:           0 0 1
1955: 
1956:         .
1957:         '''
1958:         self._mtx = mtx
1959:         self.invalidate()
1960: 
1961:     def set(self, other):
1962:         '''
1963:         Set this transformation from the frozen copy of another
1964:         :class:`Affine2DBase` object.
1965:         '''
1966:         if not isinstance(other, Affine2DBase):
1967:             msg = ("'other' must be an instance of"
1968:                    " 'matplotlib.transform.Affine2DBase'")
1969:             raise ValueError(msg)
1970:         self._mtx = other.get_matrix()
1971:         self.invalidate()
1972: 
1973:     @staticmethod
1974:     def identity():
1975:         '''
1976:         (staticmethod) Return a new :class:`Affine2D` object that is
1977:         the identity transform.
1978: 
1979:         Unless this transform will be mutated later on, consider using
1980:         the faster :class:`IdentityTransform` class instead.
1981:         '''
1982:         return Affine2D(np.identity(3))
1983: 
1984:     def clear(self):
1985:         '''
1986:         Reset the underlying matrix to the identity transform.
1987:         '''
1988:         self._mtx = np.identity(3)
1989:         self.invalidate()
1990:         return self
1991: 
1992:     def rotate(self, theta):
1993:         '''
1994:         Add a rotation (in radians) to this transform in place.
1995: 
1996:         Returns *self*, so this method can easily be chained with more
1997:         calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
1998:         and :meth:`scale`.
1999:         '''
2000:         a = np.cos(theta)
2001:         b = np.sin(theta)
2002:         rotate_mtx = np.array([[a, -b, 0.0], [b, a, 0.0], [0.0, 0.0, 1.0]],
2003:                               float)
2004:         self._mtx = np.dot(rotate_mtx, self._mtx)
2005:         self.invalidate()
2006:         return self
2007: 
2008:     def rotate_deg(self, degrees):
2009:         '''
2010:         Add a rotation (in degrees) to this transform in place.
2011: 
2012:         Returns *self*, so this method can easily be chained with more
2013:         calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
2014:         and :meth:`scale`.
2015:         '''
2016:         return self.rotate(degrees * np.pi / 180.)
2017: 
2018:     def rotate_around(self, x, y, theta):
2019:         '''
2020:         Add a rotation (in radians) around the point (x, y) in place.
2021: 
2022:         Returns *self*, so this method can easily be chained with more
2023:         calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
2024:         and :meth:`scale`.
2025:         '''
2026:         return self.translate(-x, -y).rotate(theta).translate(x, y)
2027: 
2028:     def rotate_deg_around(self, x, y, degrees):
2029:         '''
2030:         Add a rotation (in degrees) around the point (x, y) in place.
2031: 
2032:         Returns *self*, so this method can easily be chained with more
2033:         calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
2034:         and :meth:`scale`.
2035:         '''
2036:         # Cast to float to avoid wraparound issues with uint8's
2037:         x, y = float(x), float(y)
2038:         return self.translate(-x, -y).rotate_deg(degrees).translate(x, y)
2039: 
2040:     def translate(self, tx, ty):
2041:         '''
2042:         Adds a translation in place.
2043: 
2044:         Returns *self*, so this method can easily be chained with more
2045:         calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
2046:         and :meth:`scale`.
2047:         '''
2048:         translate_mtx = np.array(
2049:             [[1.0, 0.0, tx], [0.0, 1.0, ty], [0.0, 0.0, 1.0]], float)
2050:         self._mtx = np.dot(translate_mtx, self._mtx)
2051:         self.invalidate()
2052:         return self
2053: 
2054:     def scale(self, sx, sy=None):
2055:         '''
2056:         Adds a scale in place.
2057: 
2058:         If *sy* is None, the same scale is applied in both the *x*- and
2059:         *y*-directions.
2060: 
2061:         Returns *self*, so this method can easily be chained with more
2062:         calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
2063:         and :meth:`scale`.
2064:         '''
2065:         if sy is None:
2066:             sy = sx
2067:         scale_mtx = np.array(
2068:             [[sx, 0.0, 0.0], [0.0, sy, 0.0], [0.0, 0.0, 1.0]], float)
2069:         self._mtx = np.dot(scale_mtx, self._mtx)
2070:         self.invalidate()
2071:         return self
2072: 
2073:     def skew(self, xShear, yShear):
2074:         '''
2075:         Adds a skew in place.
2076: 
2077:         *xShear* and *yShear* are the shear angles along the *x*- and
2078:         *y*-axes, respectively, in radians.
2079: 
2080:         Returns *self*, so this method can easily be chained with more
2081:         calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
2082:         and :meth:`scale`.
2083:         '''
2084:         rotX = np.tan(xShear)
2085:         rotY = np.tan(yShear)
2086:         skew_mtx = np.array(
2087:             [[1.0, rotX, 0.0], [rotY, 1.0, 0.0], [0.0, 0.0, 1.0]], float)
2088:         self._mtx = np.dot(skew_mtx, self._mtx)
2089:         self.invalidate()
2090:         return self
2091: 
2092:     def skew_deg(self, xShear, yShear):
2093:         '''
2094:         Adds a skew in place.
2095: 
2096:         *xShear* and *yShear* are the shear angles along the *x*- and
2097:         *y*-axes, respectively, in degrees.
2098: 
2099:         Returns *self*, so this method can easily be chained with more
2100:         calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
2101:         and :meth:`scale`.
2102:         '''
2103:         return self.skew(np.deg2rad(xShear), np.deg2rad(yShear))
2104: 
2105:     def _get_is_separable(self):
2106:         mtx = self.get_matrix()
2107:         return mtx[0, 1] == 0.0 and mtx[1, 0] == 0.0
2108:     is_separable = property(_get_is_separable)
2109: 
2110: 
2111: class IdentityTransform(Affine2DBase):
2112:     '''
2113:     A special class that does one thing, the identity transform, in a
2114:     fast way.
2115:     '''
2116:     _mtx = np.identity(3)
2117: 
2118:     def frozen(self):
2119:         return self
2120:     frozen.__doc__ = Affine2DBase.frozen.__doc__
2121: 
2122:     def __repr__(self):
2123:         return "IdentityTransform()"
2124: 
2125:     def get_matrix(self):
2126:         return self._mtx
2127:     get_matrix.__doc__ = Affine2DBase.get_matrix.__doc__
2128: 
2129:     def transform(self, points):
2130:         return np.asanyarray(points)
2131:     transform.__doc__ = Affine2DBase.transform.__doc__
2132: 
2133:     transform_affine = transform
2134:     transform_affine.__doc__ = Affine2DBase.transform_affine.__doc__
2135: 
2136:     transform_non_affine = transform
2137:     transform_non_affine.__doc__ = Affine2DBase.transform_non_affine.__doc__
2138: 
2139:     def transform_path(self, path):
2140:         return path
2141:     transform_path.__doc__ = Affine2DBase.transform_path.__doc__
2142: 
2143:     transform_path_affine = transform_path
2144:     transform_path_affine.__doc__ = Affine2DBase.transform_path_affine.__doc__
2145: 
2146:     transform_path_non_affine = transform_path
2147:     transform_path_non_affine.__doc__ = Affine2DBase.transform_path_non_affine.__doc__
2148: 
2149:     def get_affine(self):
2150:         return self
2151:     get_affine.__doc__ = Affine2DBase.get_affine.__doc__
2152: 
2153:     inverted = get_affine
2154:     inverted.__doc__ = Affine2DBase.inverted.__doc__
2155: 
2156: 
2157: class BlendedGenericTransform(Transform):
2158:     '''
2159:     A "blended" transform uses one transform for the *x*-direction, and
2160:     another transform for the *y*-direction.
2161: 
2162:     This "generic" version can handle any given child transform in the
2163:     *x*- and *y*-directions.
2164:     '''
2165:     input_dims = 2
2166:     output_dims = 2
2167:     is_separable = True
2168:     pass_through = True
2169: 
2170:     def __init__(self, x_transform, y_transform, **kwargs):
2171:         '''
2172:         Create a new "blended" transform using *x_transform* to
2173:         transform the *x*-axis and *y_transform* to transform the
2174:         *y*-axis.
2175: 
2176:         You will generally not call this constructor directly but use
2177:         the :func:`blended_transform_factory` function instead, which
2178:         can determine automatically which kind of blended transform to
2179:         create.
2180:         '''
2181:         # Here we ask: "Does it blend?"
2182: 
2183:         Transform.__init__(self, **kwargs)
2184:         self._x = x_transform
2185:         self._y = y_transform
2186:         self.set_children(x_transform, y_transform)
2187:         self._affine = None
2188: 
2189:     def __eq__(self, other):
2190:         # Note, this is an exact copy of BlendedAffine2D.__eq__
2191:         if isinstance(other, (BlendedAffine2D, BlendedGenericTransform)):
2192:             return (self._x == other._x) and (self._y == other._y)
2193:         elif self._x == self._y:
2194:             return self._x == other
2195:         else:
2196:             return NotImplemented
2197: 
2198:     def contains_branch_seperately(self, transform):
2199:         # Note, this is an exact copy of BlendedAffine2D.contains_branch_seperately
2200:         return self._x.contains_branch(transform), self._y.contains_branch(transform)
2201: 
2202:     @property
2203:     def depth(self):
2204:         return max(self._x.depth, self._y.depth)
2205: 
2206:     def contains_branch(self, other):
2207:         # a blended transform cannot possibly contain a branch from two different transforms.
2208:         return False
2209: 
2210:     def _get_is_affine(self):
2211:         return self._x.is_affine and self._y.is_affine
2212:     is_affine = property(_get_is_affine)
2213: 
2214:     def _get_has_inverse(self):
2215:         return self._x.has_inverse and self._y.has_inverse
2216:     has_inverse = property(_get_has_inverse)
2217: 
2218:     def frozen(self):
2219:         return blended_transform_factory(self._x.frozen(), self._y.frozen())
2220:     frozen.__doc__ = Transform.frozen.__doc__
2221: 
2222:     def __repr__(self):
2223:         return "BlendedGenericTransform(%s,%s)" % (self._x, self._y)
2224: 
2225:     def transform_non_affine(self, points):
2226:         if self._x.is_affine and self._y.is_affine:
2227:             return points
2228:         x = self._x
2229:         y = self._y
2230: 
2231:         if x == y and x.input_dims == 2:
2232:             return x.transform_non_affine(points)
2233: 
2234:         if x.input_dims == 2:
2235:             x_points = x.transform_non_affine(points)[:, 0:1]
2236:         else:
2237:             x_points = x.transform_non_affine(points[:, 0])
2238:             x_points = x_points.reshape((len(x_points), 1))
2239: 
2240:         if y.input_dims == 2:
2241:             y_points = y.transform_non_affine(points)[:, 1:]
2242:         else:
2243:             y_points = y.transform_non_affine(points[:, 1])
2244:             y_points = y_points.reshape((len(y_points), 1))
2245: 
2246:         if (isinstance(x_points, np.ma.MaskedArray) or
2247:                 isinstance(y_points, np.ma.MaskedArray)):
2248:             return np.ma.concatenate((x_points, y_points), 1)
2249:         else:
2250:             return np.concatenate((x_points, y_points), 1)
2251:     transform_non_affine.__doc__ = Transform.transform_non_affine.__doc__
2252: 
2253:     def inverted(self):
2254:         return BlendedGenericTransform(self._x.inverted(), self._y.inverted())
2255:     inverted.__doc__ = Transform.inverted.__doc__
2256: 
2257:     def get_affine(self):
2258:         if self._invalid or self._affine is None:
2259:             if self._x == self._y:
2260:                 self._affine = self._x.get_affine()
2261:             else:
2262:                 x_mtx = self._x.get_affine().get_matrix()
2263:                 y_mtx = self._y.get_affine().get_matrix()
2264:                 # This works because we already know the transforms are
2265:                 # separable, though normally one would want to set b and
2266:                 # c to zero.
2267:                 mtx = np.vstack((x_mtx[0], y_mtx[1], [0.0, 0.0, 1.0]))
2268:                 self._affine = Affine2D(mtx)
2269:             self._invalid = 0
2270:         return self._affine
2271:     get_affine.__doc__ = Transform.get_affine.__doc__
2272: 
2273: 
2274: class BlendedAffine2D(Affine2DBase):
2275:     '''
2276:     A "blended" transform uses one transform for the *x*-direction, and
2277:     another transform for the *y*-direction.
2278: 
2279:     This version is an optimization for the case where both child
2280:     transforms are of type :class:`Affine2DBase`.
2281:     '''
2282:     is_separable = True
2283: 
2284:     def __init__(self, x_transform, y_transform, **kwargs):
2285:         '''
2286:         Create a new "blended" transform using *x_transform* to
2287:         transform the *x*-axis and *y_transform* to transform the
2288:         *y*-axis.
2289: 
2290:         Both *x_transform* and *y_transform* must be 2D affine
2291:         transforms.
2292: 
2293:         You will generally not call this constructor directly but use
2294:         the :func:`blended_transform_factory` function instead, which
2295:         can determine automatically which kind of blended transform to
2296:         create.
2297:         '''
2298:         is_affine = x_transform.is_affine and y_transform.is_affine
2299:         is_separable = x_transform.is_separable and y_transform.is_separable
2300:         is_correct = is_affine and is_separable
2301:         if not is_correct:
2302:             msg = ("Both *x_transform* and *y_transform* must be 2D affine"
2303:                    " transforms.")
2304:             raise ValueError(msg)
2305: 
2306:         Transform.__init__(self, **kwargs)
2307:         self._x = x_transform
2308:         self._y = y_transform
2309:         self.set_children(x_transform, y_transform)
2310: 
2311:         Affine2DBase.__init__(self)
2312:         self._mtx = None
2313: 
2314:     def __eq__(self, other):
2315:         # Note, this is an exact copy of BlendedGenericTransform.__eq__
2316:         if isinstance(other, (BlendedAffine2D, BlendedGenericTransform)):
2317:             return (self._x == other._x) and (self._y == other._y)
2318:         elif self._x == self._y:
2319:             return self._x == other
2320:         else:
2321:             return NotImplemented
2322: 
2323:     def contains_branch_seperately(self, transform):
2324:         # Note, this is an exact copy of BlendedTransform.contains_branch_seperately
2325:         return self._x.contains_branch(transform), self._y.contains_branch(transform)
2326: 
2327:     def __repr__(self):
2328:         return "BlendedAffine2D(%s,%s)" % (self._x, self._y)
2329: 
2330:     def get_matrix(self):
2331:         if self._invalid:
2332:             if self._x == self._y:
2333:                 self._mtx = self._x.get_matrix()
2334:             else:
2335:                 x_mtx = self._x.get_matrix()
2336:                 y_mtx = self._y.get_matrix()
2337:                 # This works because we already know the transforms are
2338:                 # separable, though normally one would want to set b and
2339:                 # c to zero.
2340:                 self._mtx = np.vstack((x_mtx[0], y_mtx[1], [0.0, 0.0, 1.0]))
2341:             self._inverted = None
2342:             self._invalid = 0
2343:         return self._mtx
2344:     get_matrix.__doc__ = Affine2DBase.get_matrix.__doc__
2345: 
2346: 
2347: def blended_transform_factory(x_transform, y_transform):
2348:     '''
2349:     Create a new "blended" transform using *x_transform* to transform
2350:     the *x*-axis and *y_transform* to transform the *y*-axis.
2351: 
2352:     A faster version of the blended transform is returned for the case
2353:     where both child transforms are affine.
2354:     '''
2355:     if (isinstance(x_transform, Affine2DBase)
2356:         and isinstance(y_transform, Affine2DBase)):
2357:         return BlendedAffine2D(x_transform, y_transform)
2358:     return BlendedGenericTransform(x_transform, y_transform)
2359: 
2360: 
2361: class CompositeGenericTransform(Transform):
2362:     '''
2363:     A composite transform formed by applying transform *a* then
2364:     transform *b*.
2365: 
2366:     This "generic" version can handle any two arbitrary
2367:     transformations.
2368:     '''
2369:     pass_through = True
2370: 
2371:     def __init__(self, a, b, **kwargs):
2372:         '''
2373:         Create a new composite transform that is the result of
2374:         applying transform *a* then transform *b*.
2375: 
2376:         You will generally not call this constructor directly but use
2377:         the :func:`composite_transform_factory` function instead,
2378:         which can automatically choose the best kind of composite
2379:         transform instance to create.
2380:         '''
2381:         if a.output_dims != b.input_dims:
2382:             msg = ("The output dimension of 'a' must be equal to the input"
2383:                    " dimensions of 'b'")
2384:             raise ValueError(msg)
2385:         self.input_dims = a.input_dims
2386:         self.output_dims = b.output_dims
2387: 
2388:         Transform.__init__(self, **kwargs)
2389:         self._a = a
2390:         self._b = b
2391:         self.set_children(a, b)
2392: 
2393:     is_affine = property(lambda self: self._a.is_affine and self._b.is_affine)
2394: 
2395:     def frozen(self):
2396:         self._invalid = 0
2397:         frozen = composite_transform_factory(self._a.frozen(), self._b.frozen())
2398:         if not isinstance(frozen, CompositeGenericTransform):
2399:             return frozen.frozen()
2400:         return frozen
2401:     frozen.__doc__ = Transform.frozen.__doc__
2402: 
2403:     def _invalidate_internal(self, value, invalidating_node):
2404:         # In some cases for a composite transform, an invalidating call to AFFINE_ONLY needs
2405:         # to be extended to invalidate the NON_AFFINE part too. These cases are when the right
2406:         # hand transform is non-affine and either:
2407:         # (a) the left hand transform is non affine
2408:         # (b) it is the left hand node which has triggered the invalidation
2409:         if value == Transform.INVALID_AFFINE \
2410:             and not self._b.is_affine \
2411:             and (not self._a.is_affine or invalidating_node is self._a):
2412: 
2413:             value = Transform.INVALID
2414: 
2415:         Transform._invalidate_internal(self, value=value,
2416:                                        invalidating_node=invalidating_node)
2417: 
2418:     def __eq__(self, other):
2419:         if isinstance(other, (CompositeGenericTransform, CompositeAffine2D)):
2420:             return self is other or (self._a == other._a and self._b == other._b)
2421:         else:
2422:             return False
2423: 
2424:     def _iter_break_from_left_to_right(self):
2425:         for lh_compliment, rh_compliment in self._a._iter_break_from_left_to_right():
2426:             yield lh_compliment, rh_compliment + self._b
2427:         for lh_compliment, rh_compliment in self._b._iter_break_from_left_to_right():
2428:             yield self._a + lh_compliment, rh_compliment
2429: 
2430:     @property
2431:     def depth(self):
2432:         return self._a.depth + self._b.depth
2433: 
2434:     def _get_is_affine(self):
2435:         return self._a.is_affine and self._b.is_affine
2436:     is_affine = property(_get_is_affine)
2437: 
2438:     def _get_is_separable(self):
2439:         return self._a.is_separable and self._b.is_separable
2440:     is_separable = property(_get_is_separable)
2441: 
2442:     if DEBUG:
2443:         def __str__(self):
2444:             return '(%s, %s)' % (self._a, self._b)
2445: 
2446:     def __repr__(self):
2447:         return "CompositeGenericTransform(%r, %r)" % (self._a, self._b)
2448: 
2449:     def transform_affine(self, points):
2450:         return self.get_affine().transform(points)
2451:     transform_affine.__doc__ = Transform.transform_affine.__doc__
2452: 
2453:     def transform_non_affine(self, points):
2454:         if self._a.is_affine and self._b.is_affine:
2455:             return points
2456:         elif not self._a.is_affine and self._b.is_affine:
2457:             return self._a.transform_non_affine(points)
2458:         else:
2459:             return self._b.transform_non_affine(
2460:                                 self._a.transform(points))
2461:     transform_non_affine.__doc__ = Transform.transform_non_affine.__doc__
2462: 
2463:     def transform_path_non_affine(self, path):
2464:         if self._a.is_affine and self._b.is_affine:
2465:             return path
2466:         elif not self._a.is_affine and self._b.is_affine:
2467:             return self._a.transform_path_non_affine(path)
2468:         else:
2469:             return self._b.transform_path_non_affine(
2470:                                     self._a.transform_path(path))
2471:     transform_path_non_affine.__doc__ = Transform.transform_path_non_affine.__doc__
2472: 
2473:     def get_affine(self):
2474:         if not self._b.is_affine:
2475:             return self._b.get_affine()
2476:         else:
2477:             return Affine2D(np.dot(self._b.get_affine().get_matrix(),
2478:                                 self._a.get_affine().get_matrix()))
2479:     get_affine.__doc__ = Transform.get_affine.__doc__
2480: 
2481:     def inverted(self):
2482:         return CompositeGenericTransform(self._b.inverted(), self._a.inverted())
2483:     inverted.__doc__ = Transform.inverted.__doc__
2484: 
2485:     def _get_has_inverse(self):
2486:         return self._a.has_inverse and self._b.has_inverse
2487:     has_inverse = property(_get_has_inverse)
2488: 
2489: 
2490: class CompositeAffine2D(Affine2DBase):
2491:     '''
2492:     A composite transform formed by applying transform *a* then transform *b*.
2493: 
2494:     This version is an optimization that handles the case where both *a*
2495:     and *b* are 2D affines.
2496:     '''
2497:     def __init__(self, a, b, **kwargs):
2498:         '''
2499:         Create a new composite transform that is the result of
2500:         applying transform *a* then transform *b*.
2501: 
2502:         Both *a* and *b* must be instances of :class:`Affine2DBase`.
2503: 
2504:         You will generally not call this constructor directly but use
2505:         the :func:`composite_transform_factory` function instead,
2506:         which can automatically choose the best kind of composite
2507:         transform instance to create.
2508:         '''
2509:         if not a.is_affine or not b.is_affine:
2510:             raise ValueError("'a' and 'b' must be affine transforms")
2511:         if a.output_dims != b.input_dims:
2512:             msg = ("The output dimension of 'a' must be equal to the input"
2513:                    " dimensions of 'b'")
2514:             raise ValueError(msg)
2515:         self.input_dims = a.input_dims
2516:         self.output_dims = b.output_dims
2517: 
2518:         Affine2DBase.__init__(self, **kwargs)
2519:         self._a = a
2520:         self._b = b
2521:         self.set_children(a, b)
2522:         self._mtx = None
2523: 
2524:     if DEBUG:
2525:         def __str__(self):
2526:             return '(%s, %s)' % (self._a, self._b)
2527: 
2528:     @property
2529:     def depth(self):
2530:         return self._a.depth + self._b.depth
2531: 
2532:     def _iter_break_from_left_to_right(self):
2533:         for lh_compliment, rh_compliment in self._a._iter_break_from_left_to_right():
2534:             yield lh_compliment, rh_compliment + self._b
2535:         for lh_compliment, rh_compliment in self._b._iter_break_from_left_to_right():
2536:             yield self._a + lh_compliment, rh_compliment
2537: 
2538:     def __repr__(self):
2539:         return "CompositeAffine2D(%r, %r)" % (self._a, self._b)
2540: 
2541:     def get_matrix(self):
2542:         if self._invalid:
2543:             self._mtx = np.dot(
2544:                 self._b.get_matrix(),
2545:                 self._a.get_matrix())
2546:             self._inverted = None
2547:             self._invalid = 0
2548:         return self._mtx
2549:     get_matrix.__doc__ = Affine2DBase.get_matrix.__doc__
2550: 
2551: 
2552: def composite_transform_factory(a, b):
2553:     '''
2554:     Create a new composite transform that is the result of applying
2555:     transform a then transform b.
2556: 
2557:     Shortcut versions of the blended transform are provided for the
2558:     case where both child transforms are affine, or one or the other
2559:     is the identity transform.
2560: 
2561:     Composite transforms may also be created using the '+' operator,
2562:     e.g.::
2563: 
2564:       c = a + b
2565:     '''
2566:     # check to see if any of a or b are IdentityTransforms. We use
2567:     # isinstance here to guarantee that the transforms will *always*
2568:     # be IdentityTransforms. Since TransformWrappers are mutable,
2569:     # use of equality here would be wrong.
2570:     if isinstance(a, IdentityTransform):
2571:         return b
2572:     elif isinstance(b, IdentityTransform):
2573:         return a
2574:     elif isinstance(a, Affine2D) and isinstance(b, Affine2D):
2575:         return CompositeAffine2D(a, b)
2576:     return CompositeGenericTransform(a, b)
2577: 
2578: 
2579: class BboxTransform(Affine2DBase):
2580:     '''
2581:     :class:`BboxTransform` linearly transforms points from one
2582:     :class:`Bbox` to another :class:`Bbox`.
2583:     '''
2584:     is_separable = True
2585: 
2586:     def __init__(self, boxin, boxout, **kwargs):
2587:         '''
2588:         Create a new :class:`BboxTransform` that linearly transforms
2589:         points from *boxin* to *boxout*.
2590:         '''
2591:         if not boxin.is_bbox or not boxout.is_bbox:
2592:             msg = "'boxin' and 'boxout' must be bbox"
2593:             raise ValueError(msg)
2594: 
2595:         Affine2DBase.__init__(self, **kwargs)
2596:         self._boxin = boxin
2597:         self._boxout = boxout
2598:         self.set_children(boxin, boxout)
2599:         self._mtx = None
2600:         self._inverted = None
2601: 
2602:     def __repr__(self):
2603:         return "BboxTransform(%r, %r)" % (self._boxin, self._boxout)
2604: 
2605:     def get_matrix(self):
2606:         if self._invalid:
2607:             inl, inb, inw, inh = self._boxin.bounds
2608:             outl, outb, outw, outh = self._boxout.bounds
2609:             x_scale = outw / inw
2610:             y_scale = outh / inh
2611:             if DEBUG and (x_scale == 0 or y_scale == 0):
2612:                 raise ValueError("Transforming from or to a singular bounding box.")
2613:             self._mtx = np.array([[x_scale, 0.0    , (-inl*x_scale+outl)],
2614:                                    [0.0   , y_scale, (-inb*y_scale+outb)],
2615:                                    [0.0   , 0.0    , 1.0        ]],
2616:                                  float)
2617:             self._inverted = None
2618:             self._invalid = 0
2619:         return self._mtx
2620:     get_matrix.__doc__ = Affine2DBase.get_matrix.__doc__
2621: 
2622: 
2623: class BboxTransformTo(Affine2DBase):
2624:     '''
2625:     :class:`BboxTransformTo` is a transformation that linearly
2626:     transforms points from the unit bounding box to a given
2627:     :class:`Bbox`.
2628:     '''
2629:     is_separable = True
2630: 
2631:     def __init__(self, boxout, **kwargs):
2632:         '''
2633:         Create a new :class:`BboxTransformTo` that linearly transforms
2634:         points from the unit bounding box to *boxout*.
2635:         '''
2636:         if not boxout.is_bbox:
2637:             raise ValueError("'boxout' must be bbox")
2638: 
2639:         Affine2DBase.__init__(self, **kwargs)
2640:         self._boxout = boxout
2641:         self.set_children(boxout)
2642:         self._mtx = None
2643:         self._inverted = None
2644: 
2645:     def __repr__(self):
2646:         return "BboxTransformTo(%r)" % (self._boxout)
2647: 
2648:     def get_matrix(self):
2649:         if self._invalid:
2650:             outl, outb, outw, outh = self._boxout.bounds
2651:             if DEBUG and (outw == 0 or outh == 0):
2652:                 raise ValueError("Transforming to a singular bounding box.")
2653:             self._mtx = np.array([[outw,  0.0, outl],
2654:                                   [ 0.0, outh, outb],
2655:                                   [ 0.0,  0.0,  1.0]],
2656:                                   float)
2657:             self._inverted = None
2658:             self._invalid = 0
2659:         return self._mtx
2660:     get_matrix.__doc__ = Affine2DBase.get_matrix.__doc__
2661: 
2662: 
2663: class BboxTransformToMaxOnly(BboxTransformTo):
2664:     '''
2665:     :class:`BboxTransformTo` is a transformation that linearly
2666:     transforms points from the unit bounding box to a given
2667:     :class:`Bbox` with a fixed upper left of (0, 0).
2668:     '''
2669:     def __repr__(self):
2670:         return "BboxTransformToMaxOnly(%r)" % (self._boxout)
2671: 
2672:     def get_matrix(self):
2673:         if self._invalid:
2674:             xmax, ymax = self._boxout.max
2675:             if DEBUG and (xmax == 0 or ymax == 0):
2676:                 raise ValueError("Transforming to a singular bounding box.")
2677:             self._mtx = np.array([[xmax,  0.0, 0.0],
2678:                                   [ 0.0, ymax, 0.0],
2679:                                   [ 0.0,  0.0, 1.0]],
2680:                                  float)
2681:             self._inverted = None
2682:             self._invalid = 0
2683:         return self._mtx
2684:     get_matrix.__doc__ = Affine2DBase.get_matrix.__doc__
2685: 
2686: 
2687: class BboxTransformFrom(Affine2DBase):
2688:     '''
2689:     :class:`BboxTransformFrom` linearly transforms points from a given
2690:     :class:`Bbox` to the unit bounding box.
2691:     '''
2692:     is_separable = True
2693: 
2694:     def __init__(self, boxin, **kwargs):
2695:         if not boxin.is_bbox:
2696:             raise ValueError("'boxin' must be bbox")
2697: 
2698:         Affine2DBase.__init__(self, **kwargs)
2699:         self._boxin = boxin
2700:         self.set_children(boxin)
2701:         self._mtx = None
2702:         self._inverted = None
2703: 
2704:     def __repr__(self):
2705:         return "BboxTransformFrom(%r)" % (self._boxin)
2706: 
2707:     def get_matrix(self):
2708:         if self._invalid:
2709:             inl, inb, inw, inh = self._boxin.bounds
2710:             if DEBUG and (inw == 0 or inh == 0):
2711:                 raise ValueError("Transforming from a singular bounding box.")
2712:             x_scale = 1.0 / inw
2713:             y_scale = 1.0 / inh
2714:             self._mtx = np.array([[x_scale, 0.0    , (-inl*x_scale)],
2715:                                   [0.0    , y_scale, (-inb*y_scale)],
2716:                                   [0.0    , 0.0    , 1.0        ]],
2717:                                  float)
2718:             self._inverted = None
2719:             self._invalid = 0
2720:         return self._mtx
2721:     get_matrix.__doc__ = Affine2DBase.get_matrix.__doc__
2722: 
2723: 
2724: class ScaledTranslation(Affine2DBase):
2725:     '''
2726:     A transformation that translates by *xt* and *yt*, after *xt* and *yt*
2727:     have been transformad by the given transform *scale_trans*.
2728:     '''
2729:     def __init__(self, xt, yt, scale_trans, **kwargs):
2730:         Affine2DBase.__init__(self, **kwargs)
2731:         self._t = (xt, yt)
2732:         self._scale_trans = scale_trans
2733:         self.set_children(scale_trans)
2734:         self._mtx = None
2735:         self._inverted = None
2736: 
2737:     def __repr__(self):
2738:         return "ScaledTranslation(%r)" % (self._t,)
2739: 
2740:     def get_matrix(self):
2741:         if self._invalid:
2742:             xt, yt = self._scale_trans.transform_point(self._t)
2743:             self._mtx = np.array([[1.0, 0.0, xt],
2744:                                   [0.0, 1.0, yt],
2745:                                   [0.0, 0.0, 1.0]],
2746:                                  float)
2747:             self._invalid = 0
2748:             self._inverted = None
2749:         return self._mtx
2750:     get_matrix.__doc__ = Affine2DBase.get_matrix.__doc__
2751: 
2752: 
2753: class TransformedPath(TransformNode):
2754:     '''
2755:     A :class:`TransformedPath` caches a non-affine transformed copy of
2756:     the :class:`~matplotlib.path.Path`.  This cached copy is
2757:     automatically updated when the non-affine part of the transform
2758:     changes.
2759: 
2760:     .. note::
2761: 
2762:         Paths are considered immutable by this class. Any update to the
2763:         path's vertices/codes will not trigger a transform recomputation.
2764: 
2765:     '''
2766:     def __init__(self, path, transform):
2767:         '''
2768:         Create a new :class:`TransformedPath` from the given
2769:         :class:`~matplotlib.path.Path` and :class:`Transform`.
2770:         '''
2771:         if not isinstance(transform, Transform):
2772:             msg = ("'transform' must be an instance of"
2773:                    " 'matplotlib.transform.Transform'")
2774:             raise ValueError(msg)
2775:         TransformNode.__init__(self)
2776: 
2777:         self._path = path
2778:         self._transform = transform
2779:         self.set_children(transform)
2780:         self._transformed_path = None
2781:         self._transformed_points = None
2782: 
2783:     def _revalidate(self):
2784:         # only recompute if the invalidation includes the non_affine part of the transform
2785:         if ((self._invalid & self.INVALID_NON_AFFINE == self.INVALID_NON_AFFINE)
2786:             or self._transformed_path is None):
2787:             self._transformed_path = \
2788:                 self._transform.transform_path_non_affine(self._path)
2789:             self._transformed_points = \
2790:                 Path._fast_from_codes_and_verts(
2791:                     self._transform.transform_non_affine(self._path.vertices),
2792:                     None,
2793:                     {'interpolation_steps': self._path._interpolation_steps,
2794:                      'should_simplify': self._path.should_simplify})
2795:         self._invalid = 0
2796: 
2797:     def get_transformed_points_and_affine(self):
2798:         '''
2799:         Return a copy of the child path, with the non-affine part of
2800:         the transform already applied, along with the affine part of
2801:         the path necessary to complete the transformation.  Unlike
2802:         :meth:`get_transformed_path_and_affine`, no interpolation will
2803:         be performed.
2804:         '''
2805:         self._revalidate()
2806:         return self._transformed_points, self.get_affine()
2807: 
2808:     def get_transformed_path_and_affine(self):
2809:         '''
2810:         Return a copy of the child path, with the non-affine part of
2811:         the transform already applied, along with the affine part of
2812:         the path necessary to complete the transformation.
2813:         '''
2814:         self._revalidate()
2815:         return self._transformed_path, self.get_affine()
2816: 
2817:     def get_fully_transformed_path(self):
2818:         '''
2819:         Return a fully-transformed copy of the child path.
2820:         '''
2821:         self._revalidate()
2822:         return self._transform.transform_path_affine(self._transformed_path)
2823: 
2824:     def get_affine(self):
2825:         return self._transform.get_affine()
2826: 
2827: 
2828: class TransformedPatchPath(TransformedPath):
2829:     '''
2830:     A :class:`TransformedPatchPath` caches a non-affine transformed copy of
2831:     the :class:`~matplotlib.path.Patch`. This cached copy is automatically
2832:     updated when the non-affine part of the transform or the patch changes.
2833:     '''
2834:     def __init__(self, patch):
2835:         '''
2836:         Create a new :class:`TransformedPatchPath` from the given
2837:         :class:`~matplotlib.path.Patch`.
2838:         '''
2839:         TransformNode.__init__(self)
2840: 
2841:         transform = patch.get_transform()
2842:         self._patch = patch
2843:         self._transform = transform
2844:         self.set_children(transform)
2845:         self._path = patch.get_path()
2846:         self._transformed_path = None
2847:         self._transformed_points = None
2848: 
2849:     def _revalidate(self):
2850:         patch_path = self._patch.get_path()
2851:         # Only recompute if the invalidation includes the non_affine part of
2852:         # the transform, or the Patch's Path has changed.
2853:         if (self._transformed_path is None or self._path != patch_path or
2854:                 (self._invalid & self.INVALID_NON_AFFINE ==
2855:                     self.INVALID_NON_AFFINE)):
2856:             self._path = patch_path
2857:             self._transformed_path = \
2858:                 self._transform.transform_path_non_affine(patch_path)
2859:             self._transformed_points = \
2860:                 Path._fast_from_codes_and_verts(
2861:                     self._transform.transform_non_affine(patch_path.vertices),
2862:                     None,
2863:                     {'interpolation_steps': patch_path._interpolation_steps,
2864:                      'should_simplify': patch_path.should_simplify})
2865:         self._invalid = 0
2866: 
2867: 
2868: def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):
2869:     '''
2870:     Modify the endpoints of a range as needed to avoid singularities.
2871: 
2872:     *vmin*, *vmax*
2873:         the initial endpoints.
2874: 
2875:     *tiny*
2876:         threshold for the ratio of the interval to the maximum absolute
2877:         value of its endpoints.  If the interval is smaller than
2878:         this, it will be expanded.  This value should be around
2879:         1e-15 or larger; otherwise the interval will be approaching
2880:         the double precision resolution limit.
2881: 
2882:     *expander*
2883:         fractional amount by which *vmin* and *vmax* are expanded if
2884:         the original interval is too small, based on *tiny*.
2885: 
2886:     *increasing*: [True | False]
2887:         If True (default), swap *vmin*, *vmax* if *vmin* > *vmax*
2888: 
2889:     Returns *vmin*, *vmax*, expanded and/or swapped if necessary.
2890: 
2891:     If either input is inf or NaN, or if both inputs are 0 or very
2892:     close to zero, it returns -*expander*, *expander*.
2893:     '''
2894:     if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):
2895:         return -expander, expander
2896: 
2897:     swapped = False
2898:     if vmax < vmin:
2899:         vmin, vmax = vmax, vmin
2900:         swapped = True
2901: 
2902:     maxabsvalue = max(abs(vmin), abs(vmax))
2903:     if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:
2904:         vmin = -expander
2905:         vmax = expander
2906: 
2907:     elif vmax - vmin <= maxabsvalue * tiny:
2908:         if vmax == 0 and vmin == 0:
2909:             vmin = -expander
2910:             vmax = expander
2911:         else:
2912:             vmin -= expander*abs(vmin)
2913:             vmax += expander*abs(vmax)
2914: 
2915:     if swapped and not increasing:
2916:         vmin, vmax = vmax, vmin
2917:     return vmin, vmax
2918: 
2919: 
2920: def interval_contains(interval, val):
2921:     a, b = interval
2922:     return a <= val <= b or a >= val >= b
2923: 
2924: 
2925: def interval_contains_open(interval, val):
2926:     a, b = interval
2927:     return a < val < b or a > val > b
2928: 
2929: 
2930: def offset_copy(trans, fig=None, x=0.0, y=0.0, units='inches'):
2931:     '''
2932:     Return a new transform with an added offset.
2933:       args:
2934:         trans is any transform
2935:       kwargs:
2936:         fig is the current figure; it can be None if units are 'dots'
2937:         x, y give the offset
2938:         units is 'inches', 'points' or 'dots'
2939:     '''
2940:     if units == 'dots':
2941:         return trans + Affine2D().translate(x, y)
2942:     if fig is None:
2943:         raise ValueError('For units of inches or points a fig kwarg is needed')
2944:     if units == 'points':
2945:         x /= 72.0
2946:         y /= 72.0
2947:     elif not units == 'inches':
2948:         raise ValueError('units must be dots, points, or inches')
2949:     return trans + ScaledTranslation(x, y, fig.dpi_scale_trans)
2950: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_154334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, (-1)), 'unicode', u'\nmatplotlib includes a framework for arbitrary geometric\ntransformations that is used determine the final position of all\nelements drawn on the canvas.\n\nTransforms are composed into trees of :class:`TransformNode` objects\nwhose actual value depends on their children.  When the contents of\nchildren change, their parents are automatically invalidated.  The\nnext time an invalidated transform is accessed, it is recomputed to\nreflect those changes.  This invalidation/caching approach prevents\nunnecessary recomputations of transforms, and contributes to better\ninteractive performance.\n\nFor example, here is a graph of the transform tree used to plot data\nto the graph:\n\n.. image:: ../_static/transforms.png\n\nThe framework can be used for both affine and non-affine\ntransformations.  However, for speed, we want use the backend\nrenderers to perform affine transformations whenever possible.\nTherefore, it is possible to perform just the affine or non-affine\npart of a transformation on a set of data.  The affine is always\nassumed to occur after the non-affine.  For any transform::\n\n  full transform == non-affine part + affine part\n\nThe backends are not expected to handle non-affine transformations\nthemselves.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'import six' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_154335 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'six')

if (type(import_154335) is not StypyTypeError):

    if (import_154335 != 'pyd_module'):
        __import__(import_154335)
        sys_modules_154336 = sys.modules[import_154335]
        import_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'six', sys_modules_154336.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'six', import_154335)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'import numpy' statement (line 41)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_154337 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'numpy')

if (type(import_154337) is not StypyTypeError):

    if (import_154337 != 'pyd_module'):
        __import__(import_154337)
        sys_modules_154338 = sys.modules[import_154337]
        import_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'np', sys_modules_154338.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'numpy', import_154337)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 42, 0))

# 'from matplotlib._path import affine_transform, count_bboxes_overlapping_bbox, update_path_extents' statement (line 42)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_154339 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib._path')

if (type(import_154339) is not StypyTypeError):

    if (import_154339 != 'pyd_module'):
        __import__(import_154339)
        sys_modules_154340 = sys.modules[import_154339]
        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib._path', sys_modules_154340.module_type_store, module_type_store, ['affine_transform', 'count_bboxes_overlapping_bbox', 'update_path_extents'])
        nest_module(stypy.reporting.localization.Localization(__file__, 42, 0), __file__, sys_modules_154340, sys_modules_154340.module_type_store, module_type_store)
    else:
        from matplotlib._path import affine_transform, count_bboxes_overlapping_bbox, update_path_extents

        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib._path', None, module_type_store, ['affine_transform', 'count_bboxes_overlapping_bbox', 'update_path_extents'], [affine_transform, count_bboxes_overlapping_bbox, update_path_extents])

else:
    # Assigning a type to the variable 'matplotlib._path' (line 42)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib._path', import_154339)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 44, 0))

# 'from numpy.linalg import inv' statement (line 44)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_154341 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'numpy.linalg')

if (type(import_154341) is not StypyTypeError):

    if (import_154341 != 'pyd_module'):
        __import__(import_154341)
        sys_modules_154342 = sys.modules[import_154341]
        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'numpy.linalg', sys_modules_154342.module_type_store, module_type_store, ['inv'])
        nest_module(stypy.reporting.localization.Localization(__file__, 44, 0), __file__, sys_modules_154342, sys_modules_154342.module_type_store, module_type_store)
    else:
        from numpy.linalg import inv

        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'numpy.linalg', None, module_type_store, ['inv'], [inv])

else:
    # Assigning a type to the variable 'numpy.linalg' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), 'numpy.linalg', import_154341)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 46, 0))

# 'import weakref' statement (line 46)
import weakref

import_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'weakref', weakref, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 47, 0))

# 'import warnings' statement (line 47)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 49, 0))

# 'from matplotlib import cbook' statement (line 49)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_154343 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib')

if (type(import_154343) is not StypyTypeError):

    if (import_154343 != 'pyd_module'):
        __import__(import_154343)
        sys_modules_154344 = sys.modules[import_154343]
        import_from_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib', sys_modules_154344.module_type_store, module_type_store, ['cbook'])
        nest_module(stypy.reporting.localization.Localization(__file__, 49, 0), __file__, sys_modules_154344, sys_modules_154344.module_type_store, module_type_store)
    else:
        from matplotlib import cbook

        import_from_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib', None, module_type_store, ['cbook'], [cbook])

else:
    # Assigning a type to the variable 'matplotlib' (line 49)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib', import_154343)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 50, 0))

# 'from matplotlib.path import Path' statement (line 50)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_154345 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 50, 0), 'matplotlib.path')

if (type(import_154345) is not StypyTypeError):

    if (import_154345 != 'pyd_module'):
        __import__(import_154345)
        sys_modules_154346 = sys.modules[import_154345]
        import_from_module(stypy.reporting.localization.Localization(__file__, 50, 0), 'matplotlib.path', sys_modules_154346.module_type_store, module_type_store, ['Path'])
        nest_module(stypy.reporting.localization.Localization(__file__, 50, 0), __file__, sys_modules_154346, sys_modules_154346.module_type_store, module_type_store)
    else:
        from matplotlib.path import Path

        import_from_module(stypy.reporting.localization.Localization(__file__, 50, 0), 'matplotlib.path', None, module_type_store, ['Path'], [Path])

else:
    # Assigning a type to the variable 'matplotlib.path' (line 50)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 0), 'matplotlib.path', import_154345)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


# Assigning a Name to a Name (line 52):

# Assigning a Name to a Name (line 52):
# Getting the type of 'False' (line 52)
False_154347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 8), 'False')
# Assigning a type to the variable 'DEBUG' (line 52)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'DEBUG', False_154347)
# Declaration of the 'TransformNode' class

class TransformNode(object, ):
    unicode_154348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, (-1)), 'unicode', u'\n    :class:`TransformNode` is the base class for anything that\n    participates in the transform tree and needs to invalidate its\n    parents or be invalidated.  This includes classes that are not\n    really transforms, such as bounding boxes, since some transforms\n    depend on bounding boxes to compute their values.\n    ')
    
    # Assigning a Num to a Name (line 63):
    
    # Assigning a Num to a Name (line 68):
    
    # Assigning a Num to a Name (line 69):
    
    # Assigning a BinOp to a Name (line 70):
    
    # Assigning a Name to a Name (line 74):
    unicode_154349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, (-1)), 'unicode', u"\n    If pass_through is True, all ancestors will always be\n    invalidated, even if 'self' is already invalid.\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 83)
        None_154350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 38), 'None')
        defaults = [None_154350]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 83, 4, False)
        # Assigning a type to the variable 'self' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformNode.__init__', ['shorthand_name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['shorthand_name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_154351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, (-1)), 'unicode', u'\n        Creates a new :class:`TransformNode`.\n\n        **shorthand_name** - a string representing the "name" of this\n                             transform. The name carries no significance\n                             other than to improve the readability of\n                             ``str(transform)`` when DEBUG=True.\n        ')
        
        # Assigning a Dict to a Attribute (line 92):
        
        # Assigning a Dict to a Attribute (line 92):
        
        # Obtaining an instance of the builtin type 'dict' (line 92)
        dict_154352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 92, 24), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 92)
        
        # Getting the type of 'self' (line 92)
        self_154353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 8), 'self')
        # Setting the type of the member '_parents' of a type (line 92)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 8), self_154353, '_parents', dict_154352)
        
        # Assigning a Num to a Attribute (line 96):
        
        # Assigning a Num to a Attribute (line 96):
        int_154354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 24), 'int')
        # Getting the type of 'self' (line 96)
        self_154355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'self')
        # Setting the type of the member '_invalid' of a type (line 96)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 8), self_154355, '_invalid', int_154354)
        
        # Assigning a BoolOp to a Attribute (line 97):
        
        # Assigning a BoolOp to a Attribute (line 97):
        
        # Evaluating a boolean operation
        # Getting the type of 'shorthand_name' (line 97)
        shorthand_name_154356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 31), 'shorthand_name')
        unicode_154357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 49), 'unicode', u'')
        # Applying the binary operator 'or' (line 97)
        result_or_keyword_154358 = python_operator(stypy.reporting.localization.Localization(__file__, 97, 31), 'or', shorthand_name_154356, unicode_154357)
        
        # Getting the type of 'self' (line 97)
        self_154359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 8), 'self')
        # Setting the type of the member '_shorthand_name' of a type (line 97)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 97, 8), self_154359, '_shorthand_name', result_or_keyword_154358)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 104, 4, False)
        # Assigning a type to the variable 'self' (line 105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformNode.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        TransformNode.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformNode.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformNode.__getstate__.__dict__.__setitem__('stypy_function_name', 'TransformNode.__getstate__')
        TransformNode.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        TransformNode.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformNode.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformNode.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformNode.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformNode.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformNode.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformNode.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Assigning a Call to a Name (line 105):
        
        # Assigning a Call to a Name (line 105):
        
        # Call to copy(...): (line 105)
        # Processing the call keyword arguments (line 105)
        kwargs_154363 = {}
        # Getting the type of 'self' (line 105)
        self_154360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 12), 'self', False)
        # Obtaining the member '__dict__' of a type (line 105)
        dict___154361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 12), self_154360, '__dict__')
        # Obtaining the member 'copy' of a type (line 105)
        copy_154362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 12), dict___154361, 'copy')
        # Calling copy(args, kwargs) (line 105)
        copy_call_result_154364 = invoke(stypy.reporting.localization.Localization(__file__, 105, 12), copy_154362, *[], **kwargs_154363)
        
        # Assigning a type to the variable 'd' (line 105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 8), 'd', copy_call_result_154364)
        
        # Assigning a Call to a Subscript (line 107):
        
        # Assigning a Call to a Subscript (line 107):
        
        # Call to dict(...): (line 107)
        # Processing the call arguments (line 107)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 107, 29, True)
        # Calculating comprehension expression
        
        # Call to iteritems(...): (line 108)
        # Processing the call arguments (line 108)
        # Getting the type of 'self' (line 108)
        self_154373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 43), 'self', False)
        # Obtaining the member '_parents' of a type (line 108)
        _parents_154374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 43), self_154373, '_parents')
        # Processing the call keyword arguments (line 108)
        kwargs_154375 = {}
        # Getting the type of 'six' (line 108)
        six_154371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 29), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 108)
        iteritems_154372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 29), six_154371, 'iteritems')
        # Calling iteritems(args, kwargs) (line 108)
        iteritems_call_result_154376 = invoke(stypy.reporting.localization.Localization(__file__, 108, 29), iteritems_154372, *[_parents_154374], **kwargs_154375)
        
        comprehension_154377 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 107, 29), iteritems_call_result_154376)
        # Assigning a type to the variable 'k' (line 107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 29), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 107, 29), comprehension_154377))
        # Assigning a type to the variable 'v' (line 107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 29), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 107, 29), comprehension_154377))
        
        # Obtaining an instance of the builtin type 'tuple' (line 107)
        tuple_154366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 107)
        # Adding element type (line 107)
        # Getting the type of 'k' (line 107)
        k_154367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 30), 'k', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 107, 30), tuple_154366, k_154367)
        # Adding element type (line 107)
        
        # Call to v(...): (line 107)
        # Processing the call keyword arguments (line 107)
        kwargs_154369 = {}
        # Getting the type of 'v' (line 107)
        v_154368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 33), 'v', False)
        # Calling v(args, kwargs) (line 107)
        v_call_result_154370 = invoke(stypy.reporting.localization.Localization(__file__, 107, 33), v_154368, *[], **kwargs_154369)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 107, 30), tuple_154366, v_call_result_154370)
        
        list_154378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 29), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 107, 29), list_154378, tuple_154366)
        # Processing the call keyword arguments (line 107)
        kwargs_154379 = {}
        # Getting the type of 'dict' (line 107)
        dict_154365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 24), 'dict', False)
        # Calling dict(args, kwargs) (line 107)
        dict_call_result_154380 = invoke(stypy.reporting.localization.Localization(__file__, 107, 24), dict_154365, *[list_154378], **kwargs_154379)
        
        # Getting the type of 'd' (line 107)
        d_154381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 8), 'd')
        unicode_154382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 10), 'unicode', u'_parents')
        # Storing an element on a container (line 107)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 107, 8), d_154381, (unicode_154382, dict_call_result_154380))
        # Getting the type of 'd' (line 109)
        d_154383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 15), 'd')
        # Assigning a type to the variable 'stypy_return_type' (line 109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 8), 'stypy_return_type', d_154383)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 104)
        stypy_return_type_154384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154384)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_154384


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 111, 4, False)
        # Assigning a type to the variable 'self' (line 112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformNode.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        TransformNode.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformNode.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformNode.__setstate__.__dict__.__setitem__('stypy_function_name', 'TransformNode.__setstate__')
        TransformNode.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['data_dict'])
        TransformNode.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformNode.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformNode.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformNode.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformNode.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformNode.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformNode.__setstate__', ['data_dict'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['data_dict'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 112):
        
        # Assigning a Name to a Attribute (line 112):
        # Getting the type of 'data_dict' (line 112)
        data_dict_154385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 24), 'data_dict')
        # Getting the type of 'self' (line 112)
        self_154386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 8), 'self')
        # Setting the type of the member '__dict__' of a type (line 112)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 112, 8), self_154386, '__dict__', data_dict_154385)
        
        # Assigning a Call to a Attribute (line 115):
        
        # Assigning a Call to a Attribute (line 115):
        
        # Call to dict(...): (line 115)
        # Processing the call arguments (line 115)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 115, 29, True)
        # Calculating comprehension expression
        
        # Call to iteritems(...): (line 116)
        # Processing the call arguments (line 116)
        # Getting the type of 'self' (line 116)
        self_154400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 43), 'self', False)
        # Obtaining the member '_parents' of a type (line 116)
        _parents_154401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 43), self_154400, '_parents')
        # Processing the call keyword arguments (line 116)
        kwargs_154402 = {}
        # Getting the type of 'six' (line 116)
        six_154398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 29), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 116)
        iteritems_154399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 29), six_154398, 'iteritems')
        # Calling iteritems(args, kwargs) (line 116)
        iteritems_call_result_154403 = invoke(stypy.reporting.localization.Localization(__file__, 116, 29), iteritems_154399, *[_parents_154401], **kwargs_154402)
        
        comprehension_154404 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 115, 29), iteritems_call_result_154403)
        # Assigning a type to the variable 'k' (line 115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 115, 29), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 115, 29), comprehension_154404))
        # Assigning a type to the variable 'v' (line 115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 115, 29), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 115, 29), comprehension_154404))
        
        # Getting the type of 'v' (line 116)
        v_154395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 61), 'v', False)
        # Getting the type of 'None' (line 116)
        None_154396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 70), 'None', False)
        # Applying the binary operator 'isnot' (line 116)
        result_is_not_154397 = python_operator(stypy.reporting.localization.Localization(__file__, 116, 61), 'isnot', v_154395, None_154396)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 115)
        tuple_154388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 115)
        # Adding element type (line 115)
        # Getting the type of 'k' (line 115)
        k_154389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 30), 'k', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 115, 30), tuple_154388, k_154389)
        # Adding element type (line 115)
        
        # Call to ref(...): (line 115)
        # Processing the call arguments (line 115)
        # Getting the type of 'v' (line 115)
        v_154392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 45), 'v', False)
        # Processing the call keyword arguments (line 115)
        kwargs_154393 = {}
        # Getting the type of 'weakref' (line 115)
        weakref_154390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 33), 'weakref', False)
        # Obtaining the member 'ref' of a type (line 115)
        ref_154391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 115, 33), weakref_154390, 'ref')
        # Calling ref(args, kwargs) (line 115)
        ref_call_result_154394 = invoke(stypy.reporting.localization.Localization(__file__, 115, 33), ref_154391, *[v_154392], **kwargs_154393)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 115, 30), tuple_154388, ref_call_result_154394)
        
        list_154405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 29), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 115, 29), list_154405, tuple_154388)
        # Processing the call keyword arguments (line 115)
        kwargs_154406 = {}
        # Getting the type of 'dict' (line 115)
        dict_154387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 24), 'dict', False)
        # Calling dict(args, kwargs) (line 115)
        dict_call_result_154407 = invoke(stypy.reporting.localization.Localization(__file__, 115, 24), dict_154387, *[list_154405], **kwargs_154406)
        
        # Getting the type of 'self' (line 115)
        self_154408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 8), 'self')
        # Setting the type of the member '_parents' of a type (line 115)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 115, 8), self_154408, '_parents', dict_call_result_154407)
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 111)
        stypy_return_type_154409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154409)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_154409


    @norecursion
    def __copy__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__copy__'
        module_type_store = module_type_store.open_function_context('__copy__', 118, 4, False)
        # Assigning a type to the variable 'self' (line 119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformNode.__copy__.__dict__.__setitem__('stypy_localization', localization)
        TransformNode.__copy__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformNode.__copy__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformNode.__copy__.__dict__.__setitem__('stypy_function_name', 'TransformNode.__copy__')
        TransformNode.__copy__.__dict__.__setitem__('stypy_param_names_list', [])
        TransformNode.__copy__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        TransformNode.__copy__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformNode.__copy__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformNode.__copy__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformNode.__copy__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformNode.__copy__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformNode.__copy__', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__copy__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__copy__(...)' code ##################

        
        # Call to NotImplementedError(...): (line 119)
        # Processing the call arguments (line 119)
        unicode_154411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, 12), 'unicode', u'TransformNode instances can not be copied. ')
        unicode_154412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 12), 'unicode', u'Consider using frozen() instead.')
        # Applying the binary operator '+' (line 120)
        result_add_154413 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 12), '+', unicode_154411, unicode_154412)
        
        # Processing the call keyword arguments (line 119)
        kwargs_154414 = {}
        # Getting the type of 'NotImplementedError' (line 119)
        NotImplementedError_154410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 119)
        NotImplementedError_call_result_154415 = invoke(stypy.reporting.localization.Localization(__file__, 119, 14), NotImplementedError_154410, *[result_add_154413], **kwargs_154414)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 119, 8), NotImplementedError_call_result_154415, 'raise parameter', BaseException)
        
        # ################# End of '__copy__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__copy__' in the type store
        # Getting the type of 'stypy_return_type' (line 118)
        stypy_return_type_154416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154416)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__copy__'
        return stypy_return_type_154416


    @norecursion
    def invalidate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'invalidate'
        module_type_store = module_type_store.open_function_context('invalidate', 124, 4, False)
        # Assigning a type to the variable 'self' (line 125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformNode.invalidate.__dict__.__setitem__('stypy_localization', localization)
        TransformNode.invalidate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformNode.invalidate.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformNode.invalidate.__dict__.__setitem__('stypy_function_name', 'TransformNode.invalidate')
        TransformNode.invalidate.__dict__.__setitem__('stypy_param_names_list', [])
        TransformNode.invalidate.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformNode.invalidate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformNode.invalidate.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformNode.invalidate.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformNode.invalidate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformNode.invalidate.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformNode.invalidate', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'invalidate', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'invalidate(...)' code ##################

        unicode_154417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, (-1)), 'unicode', u'\n        Invalidate this :class:`TransformNode` and triggers an\n        invalidation of its ancestors.  Should be called any\n        time the transform changes.\n        ')
        
        # Assigning a Attribute to a Name (line 130):
        
        # Assigning a Attribute to a Name (line 130):
        # Getting the type of 'self' (line 130)
        self_154418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 16), 'self')
        # Obtaining the member 'INVALID' of a type (line 130)
        INVALID_154419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 16), self_154418, 'INVALID')
        # Assigning a type to the variable 'value' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'value', INVALID_154419)
        
        # Getting the type of 'self' (line 131)
        self_154420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 11), 'self')
        # Obtaining the member 'is_affine' of a type (line 131)
        is_affine_154421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 11), self_154420, 'is_affine')
        # Testing the type of an if condition (line 131)
        if_condition_154422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 131, 8), is_affine_154421)
        # Assigning a type to the variable 'if_condition_154422' (line 131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 8), 'if_condition_154422', if_condition_154422)
        # SSA begins for if statement (line 131)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 132):
        
        # Assigning a Attribute to a Name (line 132):
        # Getting the type of 'self' (line 132)
        self_154423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 20), 'self')
        # Obtaining the member 'INVALID_AFFINE' of a type (line 132)
        INVALID_AFFINE_154424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 20), self_154423, 'INVALID_AFFINE')
        # Assigning a type to the variable 'value' (line 132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 12), 'value', INVALID_AFFINE_154424)
        # SSA join for if statement (line 131)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _invalidate_internal(...): (line 133)
        # Processing the call arguments (line 133)
        # Getting the type of 'value' (line 133)
        value_154427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 41), 'value', False)
        # Processing the call keyword arguments (line 133)
        # Getting the type of 'self' (line 133)
        self_154428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 66), 'self', False)
        keyword_154429 = self_154428
        kwargs_154430 = {'invalidating_node': keyword_154429}
        # Getting the type of 'self' (line 133)
        self_154425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 15), 'self', False)
        # Obtaining the member '_invalidate_internal' of a type (line 133)
        _invalidate_internal_154426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 15), self_154425, '_invalidate_internal')
        # Calling _invalidate_internal(args, kwargs) (line 133)
        _invalidate_internal_call_result_154431 = invoke(stypy.reporting.localization.Localization(__file__, 133, 15), _invalidate_internal_154426, *[value_154427], **kwargs_154430)
        
        # Assigning a type to the variable 'stypy_return_type' (line 133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 8), 'stypy_return_type', _invalidate_internal_call_result_154431)
        
        # ################# End of 'invalidate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'invalidate' in the type store
        # Getting the type of 'stypy_return_type' (line 124)
        stypy_return_type_154432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154432)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'invalidate'
        return stypy_return_type_154432


    @norecursion
    def _invalidate_internal(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_invalidate_internal'
        module_type_store = module_type_store.open_function_context('_invalidate_internal', 135, 4, False)
        # Assigning a type to the variable 'self' (line 136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_localization', localization)
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_function_name', 'TransformNode._invalidate_internal')
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_param_names_list', ['value', 'invalidating_node'])
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformNode._invalidate_internal.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformNode._invalidate_internal', ['value', 'invalidating_node'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_invalidate_internal', localization, ['value', 'invalidating_node'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_invalidate_internal(...)' code ##################

        unicode_154433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, (-1)), 'unicode', u"\n        Called by :meth:`invalidate` and subsequently ascends the transform\n        stack calling each TransformNode's _invalidate_internal method.\n        ")
        
        # Assigning a Compare to a Name (line 150):
        
        # Assigning a Compare to a Name (line 150):
        
        # Getting the type of 'self' (line 150)
        self_154434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 25), 'self')
        # Obtaining the member '_invalid' of a type (line 150)
        _invalid_154435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 25), self_154434, '_invalid')
        # Getting the type of 'value' (line 150)
        value_154436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 41), 'value')
        # Applying the binary operator '<' (line 150)
        result_lt_154437 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 25), '<', _invalid_154435, value_154436)
        
        # Assigning a type to the variable 'status_changed' (line 150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 8), 'status_changed', result_lt_154437)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 152)
        self_154438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 11), 'self')
        # Obtaining the member 'pass_through' of a type (line 152)
        pass_through_154439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 11), self_154438, 'pass_through')
        # Getting the type of 'status_changed' (line 152)
        status_changed_154440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 32), 'status_changed')
        # Applying the binary operator 'or' (line 152)
        result_or_keyword_154441 = python_operator(stypy.reporting.localization.Localization(__file__, 152, 11), 'or', pass_through_154439, status_changed_154440)
        
        # Testing the type of an if condition (line 152)
        if_condition_154442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 152, 8), result_or_keyword_154441)
        # Assigning a type to the variable 'if_condition_154442' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'if_condition_154442', if_condition_154442)
        # SSA begins for if statement (line 152)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 153):
        
        # Assigning a Name to a Attribute (line 153):
        # Getting the type of 'value' (line 153)
        value_154443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 28), 'value')
        # Getting the type of 'self' (line 153)
        self_154444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 153)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 12), self_154444, '_invalid', value_154443)
        
        
        # Call to list(...): (line 155)
        # Processing the call arguments (line 155)
        
        # Call to itervalues(...): (line 155)
        # Processing the call arguments (line 155)
        # Getting the type of 'self' (line 155)
        self_154448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 46), 'self', False)
        # Obtaining the member '_parents' of a type (line 155)
        _parents_154449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 46), self_154448, '_parents')
        # Processing the call keyword arguments (line 155)
        kwargs_154450 = {}
        # Getting the type of 'six' (line 155)
        six_154446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 31), 'six', False)
        # Obtaining the member 'itervalues' of a type (line 155)
        itervalues_154447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 31), six_154446, 'itervalues')
        # Calling itervalues(args, kwargs) (line 155)
        itervalues_call_result_154451 = invoke(stypy.reporting.localization.Localization(__file__, 155, 31), itervalues_154447, *[_parents_154449], **kwargs_154450)
        
        # Processing the call keyword arguments (line 155)
        kwargs_154452 = {}
        # Getting the type of 'list' (line 155)
        list_154445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 26), 'list', False)
        # Calling list(args, kwargs) (line 155)
        list_call_result_154453 = invoke(stypy.reporting.localization.Localization(__file__, 155, 26), list_154445, *[itervalues_call_result_154451], **kwargs_154452)
        
        # Testing the type of a for loop iterable (line 155)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 155, 12), list_call_result_154453)
        # Getting the type of the for loop variable (line 155)
        for_loop_var_154454 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 155, 12), list_call_result_154453)
        # Assigning a type to the variable 'parent' (line 155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 12), 'parent', for_loop_var_154454)
        # SSA begins for a for statement (line 155)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 157):
        
        # Assigning a Call to a Name (line 157):
        
        # Call to parent(...): (line 157)
        # Processing the call keyword arguments (line 157)
        kwargs_154456 = {}
        # Getting the type of 'parent' (line 157)
        parent_154455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 25), 'parent', False)
        # Calling parent(args, kwargs) (line 157)
        parent_call_result_154457 = invoke(stypy.reporting.localization.Localization(__file__, 157, 25), parent_154455, *[], **kwargs_154456)
        
        # Assigning a type to the variable 'parent' (line 157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 16), 'parent', parent_call_result_154457)
        
        # Type idiom detected: calculating its left and rigth part (line 158)
        # Getting the type of 'parent' (line 158)
        parent_154458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 16), 'parent')
        # Getting the type of 'None' (line 158)
        None_154459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 33), 'None')
        
        (may_be_154460, more_types_in_union_154461) = may_not_be_none(parent_154458, None_154459)

        if may_be_154460:

            if more_types_in_union_154461:
                # Runtime conditional SSA (line 158)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _invalidate_internal(...): (line 159)
            # Processing the call keyword arguments (line 159)
            # Getting the type of 'value' (line 160)
            value_154464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 30), 'value', False)
            keyword_154465 = value_154464
            # Getting the type of 'self' (line 160)
            self_154466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 55), 'self', False)
            keyword_154467 = self_154466
            kwargs_154468 = {'invalidating_node': keyword_154467, 'value': keyword_154465}
            # Getting the type of 'parent' (line 159)
            parent_154462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 20), 'parent', False)
            # Obtaining the member '_invalidate_internal' of a type (line 159)
            _invalidate_internal_154463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 20), parent_154462, '_invalidate_internal')
            # Calling _invalidate_internal(args, kwargs) (line 159)
            _invalidate_internal_call_result_154469 = invoke(stypy.reporting.localization.Localization(__file__, 159, 20), _invalidate_internal_154463, *[], **kwargs_154468)
            

            if more_types_in_union_154461:
                # SSA join for if statement (line 158)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 152)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_invalidate_internal(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_invalidate_internal' in the type store
        # Getting the type of 'stypy_return_type' (line 135)
        stypy_return_type_154470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154470)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_invalidate_internal'
        return stypy_return_type_154470


    @norecursion
    def set_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_children'
        module_type_store = module_type_store.open_function_context('set_children', 162, 4, False)
        # Assigning a type to the variable 'self' (line 163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformNode.set_children.__dict__.__setitem__('stypy_localization', localization)
        TransformNode.set_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformNode.set_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformNode.set_children.__dict__.__setitem__('stypy_function_name', 'TransformNode.set_children')
        TransformNode.set_children.__dict__.__setitem__('stypy_param_names_list', [])
        TransformNode.set_children.__dict__.__setitem__('stypy_varargs_param_name', 'children')
        TransformNode.set_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformNode.set_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformNode.set_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformNode.set_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformNode.set_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformNode.set_children', [], 'children', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_children(...)' code ##################

        unicode_154471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, (-1)), 'unicode', u'\n        Set the children of the transform, to let the invalidation\n        system know which transforms can invalidate this transform.\n        Should be called from the constructor of any transforms that\n        depend on other transforms.\n        ')
        
        # Getting the type of 'children' (line 172)
        children_154472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 21), 'children')
        # Testing the type of a for loop iterable (line 172)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 172, 8), children_154472)
        # Getting the type of the for loop variable (line 172)
        for_loop_var_154473 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 172, 8), children_154472)
        # Assigning a type to the variable 'child' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'child', for_loop_var_154473)
        # SSA begins for a for statement (line 172)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 173):
        
        # Assigning a Call to a Subscript (line 173):
        
        # Call to ref(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'self' (line 173)
        self_154476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 51), 'self', False)
        # Processing the call keyword arguments (line 173)
        kwargs_154477 = {}
        # Getting the type of 'weakref' (line 173)
        weakref_154474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 39), 'weakref', False)
        # Obtaining the member 'ref' of a type (line 173)
        ref_154475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 39), weakref_154474, 'ref')
        # Calling ref(args, kwargs) (line 173)
        ref_call_result_154478 = invoke(stypy.reporting.localization.Localization(__file__, 173, 39), ref_154475, *[self_154476], **kwargs_154477)
        
        # Getting the type of 'child' (line 173)
        child_154479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'child')
        # Obtaining the member '_parents' of a type (line 173)
        _parents_154480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 12), child_154479, '_parents')
        
        # Call to id(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'self' (line 173)
        self_154482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 30), 'self', False)
        # Processing the call keyword arguments (line 173)
        kwargs_154483 = {}
        # Getting the type of 'id' (line 173)
        id_154481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 27), 'id', False)
        # Calling id(args, kwargs) (line 173)
        id_call_result_154484 = invoke(stypy.reporting.localization.Localization(__file__, 173, 27), id_154481, *[self_154482], **kwargs_154483)
        
        # Storing an element on a container (line 173)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 173, 12), _parents_154480, (id_call_result_154484, ref_call_result_154478))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_children' in the type store
        # Getting the type of 'stypy_return_type' (line 162)
        stypy_return_type_154485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154485)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_children'
        return stypy_return_type_154485


    @norecursion
    def frozen(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'frozen'
        module_type_store = module_type_store.open_function_context('frozen', 183, 4, False)
        # Assigning a type to the variable 'self' (line 184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformNode.frozen.__dict__.__setitem__('stypy_localization', localization)
        TransformNode.frozen.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformNode.frozen.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformNode.frozen.__dict__.__setitem__('stypy_function_name', 'TransformNode.frozen')
        TransformNode.frozen.__dict__.__setitem__('stypy_param_names_list', [])
        TransformNode.frozen.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformNode.frozen.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformNode.frozen.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformNode.frozen.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformNode.frozen.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformNode.frozen.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformNode.frozen', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'frozen', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'frozen(...)' code ##################

        unicode_154486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, (-1)), 'unicode', u'\n        Returns a frozen copy of this transform node.  The frozen copy\n        will not update when its children change.  Useful for storing\n        a previously known state of a transform where\n        ``copy.deepcopy()`` might normally be used.\n        ')
        # Getting the type of 'self' (line 190)
        self_154487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 8), 'stypy_return_type', self_154487)
        
        # ################# End of 'frozen(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'frozen' in the type store
        # Getting the type of 'stypy_return_type' (line 183)
        stypy_return_type_154488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154488)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'frozen'
        return stypy_return_type_154488


# Assigning a type to the variable 'TransformNode' (line 55)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 0), 'TransformNode', TransformNode)

# Assigning a Num to a Name (line 63):
int_154489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 11), 'int')
# Getting the type of 'TransformNode'
TransformNode_154490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Setting the type of the member '_gid' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154490, '_gid', int_154489)

# Assigning a Num to a Name (line 68):
int_154491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 25), 'int')
# Getting the type of 'TransformNode'
TransformNode_154492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Setting the type of the member 'INVALID_NON_AFFINE' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154492, 'INVALID_NON_AFFINE', int_154491)

# Assigning a Num to a Name (line 69):
int_154493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 21), 'int')
# Getting the type of 'TransformNode'
TransformNode_154494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Setting the type of the member 'INVALID_AFFINE' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154494, 'INVALID_AFFINE', int_154493)

# Assigning a BinOp to a Name (line 70):
# Getting the type of 'TransformNode'
TransformNode_154495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Obtaining the member 'INVALID_NON_AFFINE' of a type
INVALID_NON_AFFINE_154496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154495, 'INVALID_NON_AFFINE')
# Getting the type of 'TransformNode'
TransformNode_154497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Obtaining the member 'INVALID_AFFINE' of a type
INVALID_AFFINE_154498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154497, 'INVALID_AFFINE')
# Applying the binary operator '|' (line 70)
result_or__154499 = python_operator(stypy.reporting.localization.Localization(__file__, 70, 14), '|', INVALID_NON_AFFINE_154496, INVALID_AFFINE_154498)

# Getting the type of 'TransformNode'
TransformNode_154500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Setting the type of the member 'INVALID' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154500, 'INVALID', result_or__154499)

# Assigning a Name to a Name (line 74):
# Getting the type of 'False' (line 74)
False_154501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 16), 'False')
# Getting the type of 'TransformNode'
TransformNode_154502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Setting the type of the member 'is_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154502, 'is_affine', False_154501)

# Assigning a Name to a Name (line 75):
# Getting the type of 'False' (line 75)
False_154503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 14), 'False')
# Getting the type of 'TransformNode'
TransformNode_154504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Setting the type of the member 'is_bbox' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154504, 'is_bbox', False_154503)

# Assigning a Name to a Name (line 77):
# Getting the type of 'False' (line 77)
False_154505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 19), 'False')
# Getting the type of 'TransformNode'
TransformNode_154506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Setting the type of the member 'pass_through' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154506, 'pass_through', False_154505)

# Assigning a Name to a Name (line 77):

# Getting the type of 'DEBUG' (line 99)
DEBUG_154507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 7), 'DEBUG')
# Testing the type of an if condition (line 99)
if_condition_154508 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 99, 4), DEBUG_154507)
# Assigning a type to the variable 'if_condition_154508' (line 99)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 4), 'if_condition_154508', if_condition_154508)
# SSA begins for if statement (line 99)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def stypy__str__(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '__str__'
    module_type_store = module_type_store.open_function_context('__str__', 100, 8, False)
    
    # Passed parameters checking function
    stypy__str__.stypy_localization = localization
    stypy__str__.stypy_type_of_self = None
    stypy__str__.stypy_type_store = module_type_store
    stypy__str__.stypy_function_name = 'stypy__str__'
    stypy__str__.stypy_param_names_list = ['self']
    stypy__str__.stypy_varargs_param_name = None
    stypy__str__.stypy_kwargs_param_name = None
    stypy__str__.stypy_call_defaults = defaults
    stypy__str__.stypy_call_varargs = varargs
    stypy__str__.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'stypy__str__', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '__str__', localization, ['self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '__str__(...)' code ##################

    
    # Evaluating a boolean operation
    # Getting the type of 'self' (line 102)
    self_154509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 19), 'self')
    # Obtaining the member '_shorthand_name' of a type (line 102)
    _shorthand_name_154510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 19), self_154509, '_shorthand_name')
    
    # Call to repr(...): (line 102)
    # Processing the call arguments (line 102)
    # Getting the type of 'self' (line 102)
    self_154512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 48), 'self', False)
    # Processing the call keyword arguments (line 102)
    kwargs_154513 = {}
    # Getting the type of 'repr' (line 102)
    repr_154511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 43), 'repr', False)
    # Calling repr(args, kwargs) (line 102)
    repr_call_result_154514 = invoke(stypy.reporting.localization.Localization(__file__, 102, 43), repr_154511, *[self_154512], **kwargs_154513)
    
    # Applying the binary operator 'or' (line 102)
    result_or_keyword_154515 = python_operator(stypy.reporting.localization.Localization(__file__, 102, 19), 'or', _shorthand_name_154510, repr_call_result_154514)
    
    # Assigning a type to the variable 'stypy_return_type' (line 102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 12), 'stypy_return_type', result_or_keyword_154515)
    
    # ################# End of '__str__(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '__str__' in the type store
    # Getting the type of 'stypy_return_type' (line 100)
    stypy_return_type_154516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154516)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '__str__'
    return stypy_return_type_154516

# Assigning a type to the variable '__str__' (line 100)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 100, 8), '__str__', stypy__str__)
# SSA join for if statement (line 99)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Name to a Name (line 122):
# Getting the type of 'TransformNode'
TransformNode_154517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Obtaining the member '__copy__' of a type
copy___154518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154517, '__copy__')
# Getting the type of 'TransformNode'
TransformNode_154519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Setting the type of the member '__deepcopy__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154519, '__deepcopy__', copy___154518)

# Assigning a Name to a Name (line 122):

# Getting the type of 'DEBUG' (line 175)
DEBUG_154520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 7), 'DEBUG')
# Testing the type of an if condition (line 175)
if_condition_154521 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 175, 4), DEBUG_154520)
# Assigning a type to the variable 'if_condition_154521' (line 175)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 4), 'if_condition_154521', if_condition_154521)
# SSA begins for if statement (line 175)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 176):

# Assigning a Name to a Name (line 176):
# Getting the type of 'TransformNode'
TransformNode_154522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Obtaining the member 'set_children' of a type
set_children_154523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154522, 'set_children')
# Assigning a type to the variable '_set_children' (line 176)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), '_set_children', set_children_154523)

@norecursion
def set_children(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'set_children'
    module_type_store = module_type_store.open_function_context('set_children', 178, 8, False)
    
    # Passed parameters checking function
    set_children.stypy_localization = localization
    set_children.stypy_type_of_self = None
    set_children.stypy_type_store = module_type_store
    set_children.stypy_function_name = 'set_children'
    set_children.stypy_param_names_list = ['self']
    set_children.stypy_varargs_param_name = 'children'
    set_children.stypy_kwargs_param_name = None
    set_children.stypy_call_defaults = defaults
    set_children.stypy_call_varargs = varargs
    set_children.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'set_children', ['self'], 'children', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'set_children', localization, ['self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'set_children(...)' code ##################

    
    # Call to _set_children(...): (line 179)
    # Getting the type of 'children' (line 179)
    children_154526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 32), 'children', False)
    # Processing the call keyword arguments (line 179)
    kwargs_154527 = {}
    # Getting the type of 'self' (line 179)
    self_154524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 12), 'self', False)
    # Obtaining the member '_set_children' of a type (line 179)
    _set_children_154525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 12), self_154524, '_set_children')
    # Calling _set_children(args, kwargs) (line 179)
    _set_children_call_result_154528 = invoke(stypy.reporting.localization.Localization(__file__, 179, 12), _set_children_154525, *[children_154526], **kwargs_154527)
    
    
    # Assigning a Name to a Attribute (line 180):
    
    # Assigning a Name to a Attribute (line 180):
    # Getting the type of 'children' (line 180)
    children_154529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 29), 'children')
    # Getting the type of 'self' (line 180)
    self_154530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 12), 'self')
    # Setting the type of the member '_children' of a type (line 180)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 180, 12), self_154530, '_children', children_154529)
    
    # ################# End of 'set_children(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'set_children' in the type store
    # Getting the type of 'stypy_return_type' (line 178)
    stypy_return_type_154531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154531)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'set_children'
    return stypy_return_type_154531

# Assigning a type to the variable 'set_children' (line 178)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'set_children', set_children)

# Assigning a Attribute to a Attribute (line 181):

# Assigning a Attribute to a Attribute (line 181):
# Getting the type of '_set_children' (line 181)
_set_children_154532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 31), '_set_children')
# Obtaining the member '__doc__' of a type (line 181)
doc___154533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 31), _set_children_154532, '__doc__')
# Getting the type of 'TransformNode'
TransformNode_154534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformNode')
# Obtaining the member 'set_children' of a type
set_children_154535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformNode_154534, 'set_children')
# Setting the type of the member '__doc__' of a type (line 181)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 8), set_children_154535, '__doc__', doc___154533)
# SSA join for if statement (line 175)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Name to a Name (line 75):

# Getting the type of 'DEBUG' (line 192)
DEBUG_154536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 7), 'DEBUG')
# Testing the type of an if condition (line 192)
if_condition_154537 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 192, 4), DEBUG_154536)
# Assigning a type to the variable 'if_condition_154537' (line 192)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 4), 'if_condition_154537', if_condition_154537)
# SSA begins for if statement (line 192)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def write_graphviz(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'list' (line 193)
    list_154538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 49), 'list')
    # Adding type elements to the builtin type 'list' instance (line 193)
    
    defaults = [list_154538]
    # Create a new context for function 'write_graphviz'
    module_type_store = module_type_store.open_function_context('write_graphviz', 193, 8, False)
    
    # Passed parameters checking function
    write_graphviz.stypy_localization = localization
    write_graphviz.stypy_type_of_self = None
    write_graphviz.stypy_type_store = module_type_store
    write_graphviz.stypy_function_name = 'write_graphviz'
    write_graphviz.stypy_param_names_list = ['self', 'fobj', 'highlight']
    write_graphviz.stypy_varargs_param_name = None
    write_graphviz.stypy_kwargs_param_name = None
    write_graphviz.stypy_call_defaults = defaults
    write_graphviz.stypy_call_varargs = varargs
    write_graphviz.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'write_graphviz', ['self', 'fobj', 'highlight'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'write_graphviz', localization, ['self', 'fobj', 'highlight'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'write_graphviz(...)' code ##################

    unicode_154539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, (-1)), 'unicode', u'\n            For debugging purposes.\n\n            Writes the transform tree rooted at \'self\' to a graphviz "dot"\n            format file.  This file can be run through the "dot" utility\n            to produce a graph of the transform tree.\n\n            Affine transforms are marked in blue.  Bounding boxes are\n            marked in yellow.\n\n            *fobj*: A Python file-like object\n\n            Once the "dot" file has been created, it can be turned into a\n            png easily with::\n\n                $> dot -Tpng -o $OUTPUT_FILE $DOT_FILE\n\n            ')
    
    # Assigning a Call to a Name (line 212):
    
    # Assigning a Call to a Name (line 212):
    
    # Call to set(...): (line 212)
    # Processing the call keyword arguments (line 212)
    kwargs_154541 = {}
    # Getting the type of 'set' (line 212)
    set_154540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 19), 'set', False)
    # Calling set(args, kwargs) (line 212)
    set_call_result_154542 = invoke(stypy.reporting.localization.Localization(__file__, 212, 19), set_154540, *[], **kwargs_154541)
    
    # Assigning a type to the variable 'seen' (line 212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 12), 'seen', set_call_result_154542)

    @norecursion
    def recurse(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'recurse'
        module_type_store = module_type_store.open_function_context('recurse', 214, 12, False)
        
        # Passed parameters checking function
        recurse.stypy_localization = localization
        recurse.stypy_type_of_self = None
        recurse.stypy_type_store = module_type_store
        recurse.stypy_function_name = 'recurse'
        recurse.stypy_param_names_list = ['root']
        recurse.stypy_varargs_param_name = None
        recurse.stypy_kwargs_param_name = None
        recurse.stypy_call_defaults = defaults
        recurse.stypy_call_varargs = varargs
        recurse.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'recurse', ['root'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'recurse', localization, ['root'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'recurse(...)' code ##################

        
        
        # Getting the type of 'root' (line 215)
        root_154543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 19), 'root')
        # Getting the type of 'seen' (line 215)
        seen_154544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 27), 'seen')
        # Applying the binary operator 'in' (line 215)
        result_contains_154545 = python_operator(stypy.reporting.localization.Localization(__file__, 215, 19), 'in', root_154543, seen_154544)
        
        # Testing the type of an if condition (line 215)
        if_condition_154546 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 215, 16), result_contains_154545)
        # Assigning a type to the variable 'if_condition_154546' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 16), 'if_condition_154546', if_condition_154546)
        # SSA begins for if statement (line 215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 20), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 215)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to add(...): (line 217)
        # Processing the call arguments (line 217)
        # Getting the type of 'root' (line 217)
        root_154549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 25), 'root', False)
        # Processing the call keyword arguments (line 217)
        kwargs_154550 = {}
        # Getting the type of 'seen' (line 217)
        seen_154547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 16), 'seen', False)
        # Obtaining the member 'add' of a type (line 217)
        add_154548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 16), seen_154547, 'add')
        # Calling add(args, kwargs) (line 217)
        add_call_result_154551 = invoke(stypy.reporting.localization.Localization(__file__, 217, 16), add_154548, *[root_154549], **kwargs_154550)
        
        
        # Assigning a Dict to a Name (line 218):
        
        # Assigning a Dict to a Name (line 218):
        
        # Obtaining an instance of the builtin type 'dict' (line 218)
        dict_154552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 24), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 218)
        
        # Assigning a type to the variable 'props' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 16), 'props', dict_154552)
        
        # Assigning a Attribute to a Name (line 219):
        
        # Assigning a Attribute to a Name (line 219):
        # Getting the type of 'root' (line 219)
        root_154553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 24), 'root')
        # Obtaining the member '__class__' of a type (line 219)
        class___154554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 24), root_154553, '__class__')
        # Obtaining the member '__name__' of a type (line 219)
        name___154555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 24), class___154554, '__name__')
        # Assigning a type to the variable 'label' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 16), 'label', name___154555)
        
        # Getting the type of 'root' (line 220)
        root_154556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 19), 'root')
        # Obtaining the member '_invalid' of a type (line 220)
        _invalid_154557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 19), root_154556, '_invalid')
        # Testing the type of an if condition (line 220)
        if_condition_154558 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 220, 16), _invalid_154557)
        # Assigning a type to the variable 'if_condition_154558' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 16), 'if_condition_154558', if_condition_154558)
        # SSA begins for if statement (line 220)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 221):
        
        # Assigning a BinOp to a Name (line 221):
        unicode_154559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 28), 'unicode', u'[%s]')
        # Getting the type of 'label' (line 221)
        label_154560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 37), 'label')
        # Applying the binary operator '%' (line 221)
        result_mod_154561 = python_operator(stypy.reporting.localization.Localization(__file__, 221, 28), '%', unicode_154559, label_154560)
        
        # Assigning a type to the variable 'label' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 20), 'label', result_mod_154561)
        # SSA join for if statement (line 220)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'root' (line 222)
        root_154562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 19), 'root')
        # Getting the type of 'highlight' (line 222)
        highlight_154563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 27), 'highlight')
        # Applying the binary operator 'in' (line 222)
        result_contains_154564 = python_operator(stypy.reporting.localization.Localization(__file__, 222, 19), 'in', root_154562, highlight_154563)
        
        # Testing the type of an if condition (line 222)
        if_condition_154565 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 222, 16), result_contains_154564)
        # Assigning a type to the variable 'if_condition_154565' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 16), 'if_condition_154565', if_condition_154565)
        # SSA begins for if statement (line 222)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Subscript (line 223):
        
        # Assigning a Str to a Subscript (line 223):
        unicode_154566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 37), 'unicode', u'bold')
        # Getting the type of 'props' (line 223)
        props_154567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 20), 'props')
        unicode_154568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 26), 'unicode', u'style')
        # Storing an element on a container (line 223)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 223, 20), props_154567, (unicode_154568, unicode_154566))
        # SSA join for if statement (line 222)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Subscript (line 224):
        
        # Assigning a Str to a Subscript (line 224):
        unicode_154569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 33), 'unicode', u'box')
        # Getting the type of 'props' (line 224)
        props_154570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 16), 'props')
        unicode_154571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 22), 'unicode', u'shape')
        # Storing an element on a container (line 224)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 224, 16), props_154570, (unicode_154571, unicode_154569))
        
        # Assigning a BinOp to a Subscript (line 225):
        
        # Assigning a BinOp to a Subscript (line 225):
        unicode_154572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 33), 'unicode', u'"%s"')
        # Getting the type of 'label' (line 225)
        label_154573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 42), 'label')
        # Applying the binary operator '%' (line 225)
        result_mod_154574 = python_operator(stypy.reporting.localization.Localization(__file__, 225, 33), '%', unicode_154572, label_154573)
        
        # Getting the type of 'props' (line 225)
        props_154575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 16), 'props')
        unicode_154576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 22), 'unicode', u'label')
        # Storing an element on a container (line 225)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 16), props_154575, (unicode_154576, result_mod_154574))
        
        # Assigning a Call to a Name (line 226):
        
        # Assigning a Call to a Name (line 226):
        
        # Call to join(...): (line 226)
        # Processing the call arguments (line 226)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to iteritems(...): (line 228)
        # Processing the call arguments (line 228)
        # Getting the type of 'props' (line 228)
        props_154586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 51), 'props', False)
        # Processing the call keyword arguments (line 228)
        kwargs_154587 = {}
        # Getting the type of 'six' (line 228)
        six_154584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 37), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 228)
        iteritems_154585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 37), six_154584, 'iteritems')
        # Calling iteritems(args, kwargs) (line 228)
        iteritems_call_result_154588 = invoke(stypy.reporting.localization.Localization(__file__, 228, 37), iteritems_154585, *[props_154586], **kwargs_154587)
        
        comprehension_154589 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 226, 34), iteritems_call_result_154588)
        # Assigning a type to the variable 'key' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 34), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 226, 34), comprehension_154589))
        # Assigning a type to the variable 'val' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 34), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 226, 34), comprehension_154589))
        unicode_154579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 34), 'unicode', u'%s=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 226)
        tuple_154580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 226)
        # Adding element type (line 226)
        # Getting the type of 'key' (line 226)
        key_154581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 45), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 226, 45), tuple_154580, key_154581)
        # Adding element type (line 226)
        # Getting the type of 'val' (line 226)
        val_154582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 50), 'val', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 226, 45), tuple_154580, val_154582)
        
        # Applying the binary operator '%' (line 226)
        result_mod_154583 = python_operator(stypy.reporting.localization.Localization(__file__, 226, 34), '%', unicode_154579, tuple_154580)
        
        list_154590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 34), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 226, 34), list_154590, result_mod_154583)
        # Processing the call keyword arguments (line 226)
        kwargs_154591 = {}
        unicode_154577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 24), 'unicode', u' ')
        # Obtaining the member 'join' of a type (line 226)
        join_154578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 24), unicode_154577, 'join')
        # Calling join(args, kwargs) (line 226)
        join_call_result_154592 = invoke(stypy.reporting.localization.Localization(__file__, 226, 24), join_154578, *[list_154590], **kwargs_154591)
        
        # Assigning a type to the variable 'props' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 16), 'props', join_call_result_154592)
        
        # Call to write(...): (line 230)
        # Processing the call arguments (line 230)
        unicode_154595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 230, 27), 'unicode', u'%s [%s];\n')
        
        # Obtaining an instance of the builtin type 'tuple' (line 231)
        tuple_154596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 231)
        # Adding element type (line 231)
        
        # Call to hash(...): (line 231)
        # Processing the call arguments (line 231)
        # Getting the type of 'root' (line 231)
        root_154598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 33), 'root', False)
        # Processing the call keyword arguments (line 231)
        kwargs_154599 = {}
        # Getting the type of 'hash' (line 231)
        hash_154597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 28), 'hash', False)
        # Calling hash(args, kwargs) (line 231)
        hash_call_result_154600 = invoke(stypy.reporting.localization.Localization(__file__, 231, 28), hash_154597, *[root_154598], **kwargs_154599)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 28), tuple_154596, hash_call_result_154600)
        # Adding element type (line 231)
        # Getting the type of 'props' (line 231)
        props_154601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 40), 'props', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 28), tuple_154596, props_154601)
        
        # Applying the binary operator '%' (line 230)
        result_mod_154602 = python_operator(stypy.reporting.localization.Localization(__file__, 230, 27), '%', unicode_154595, tuple_154596)
        
        # Processing the call keyword arguments (line 230)
        kwargs_154603 = {}
        # Getting the type of 'fobj' (line 230)
        fobj_154593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 16), 'fobj', False)
        # Obtaining the member 'write' of a type (line 230)
        write_154594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 16), fobj_154593, 'write')
        # Calling write(args, kwargs) (line 230)
        write_call_result_154604 = invoke(stypy.reporting.localization.Localization(__file__, 230, 16), write_154594, *[result_mod_154602], **kwargs_154603)
        
        
        # Type idiom detected: calculating its left and rigth part (line 233)
        unicode_154605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, 33), 'unicode', u'_children')
        # Getting the type of 'root' (line 233)
        root_154606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 27), 'root')
        
        (may_be_154607, more_types_in_union_154608) = may_provide_member(unicode_154605, root_154606)

        if may_be_154607:

            if more_types_in_union_154608:
                # Runtime conditional SSA (line 233)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'root' (line 233)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 16), 'root', remove_not_member_provider_from_union(root_154606, u'_children'))
            
            # Getting the type of 'root' (line 234)
            root_154609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 33), 'root')
            # Obtaining the member '_children' of a type (line 234)
            _children_154610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 234, 33), root_154609, '_children')
            # Testing the type of a for loop iterable (line 234)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 234, 20), _children_154610)
            # Getting the type of the for loop variable (line 234)
            for_loop_var_154611 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 234, 20), _children_154610)
            # Assigning a type to the variable 'child' (line 234)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 20), 'child', for_loop_var_154611)
            # SSA begins for a for statement (line 234)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Str to a Name (line 235):
            
            # Assigning a Str to a Name (line 235):
            unicode_154612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 31), 'unicode', u'?')
            # Assigning a type to the variable 'name' (line 235)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 24), 'name', unicode_154612)
            
            
            # Call to iteritems(...): (line 236)
            # Processing the call arguments (line 236)
            # Getting the type of 'root' (line 236)
            root_154615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 54), 'root', False)
            # Obtaining the member '__dict__' of a type (line 236)
            dict___154616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 54), root_154615, '__dict__')
            # Processing the call keyword arguments (line 236)
            kwargs_154617 = {}
            # Getting the type of 'six' (line 236)
            six_154613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 40), 'six', False)
            # Obtaining the member 'iteritems' of a type (line 236)
            iteritems_154614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 40), six_154613, 'iteritems')
            # Calling iteritems(args, kwargs) (line 236)
            iteritems_call_result_154618 = invoke(stypy.reporting.localization.Localization(__file__, 236, 40), iteritems_154614, *[dict___154616], **kwargs_154617)
            
            # Testing the type of a for loop iterable (line 236)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 236, 24), iteritems_call_result_154618)
            # Getting the type of the for loop variable (line 236)
            for_loop_var_154619 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 236, 24), iteritems_call_result_154618)
            # Assigning a type to the variable 'key' (line 236)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 24), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 236, 24), for_loop_var_154619))
            # Assigning a type to the variable 'val' (line 236)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 24), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 236, 24), for_loop_var_154619))
            # SSA begins for a for statement (line 236)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Getting the type of 'val' (line 237)
            val_154620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 31), 'val')
            # Getting the type of 'child' (line 237)
            child_154621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 38), 'child')
            # Applying the binary operator 'is' (line 237)
            result_is__154622 = python_operator(stypy.reporting.localization.Localization(__file__, 237, 31), 'is', val_154620, child_154621)
            
            # Testing the type of an if condition (line 237)
            if_condition_154623 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 237, 28), result_is__154622)
            # Assigning a type to the variable 'if_condition_154623' (line 237)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 28), 'if_condition_154623', if_condition_154623)
            # SSA begins for if statement (line 237)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 238):
            
            # Assigning a Name to a Name (line 238):
            # Getting the type of 'key' (line 238)
            key_154624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 39), 'key')
            # Assigning a type to the variable 'name' (line 238)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 32), 'name', key_154624)
            # SSA join for if statement (line 237)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to write(...): (line 240)
            # Processing the call arguments (line 240)
            unicode_154627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 35), 'unicode', u'"%s" -> "%s" [label="%s", fontsize=10];\n')
            
            # Obtaining an instance of the builtin type 'tuple' (line 241)
            tuple_154628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 39), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 241)
            # Adding element type (line 241)
            
            # Call to hash(...): (line 241)
            # Processing the call arguments (line 241)
            # Getting the type of 'root' (line 241)
            root_154630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 44), 'root', False)
            # Processing the call keyword arguments (line 241)
            kwargs_154631 = {}
            # Getting the type of 'hash' (line 241)
            hash_154629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 39), 'hash', False)
            # Calling hash(args, kwargs) (line 241)
            hash_call_result_154632 = invoke(stypy.reporting.localization.Localization(__file__, 241, 39), hash_154629, *[root_154630], **kwargs_154631)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 241, 39), tuple_154628, hash_call_result_154632)
            # Adding element type (line 241)
            
            # Call to hash(...): (line 242)
            # Processing the call arguments (line 242)
            # Getting the type of 'child' (line 242)
            child_154634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 41), 'child', False)
            # Processing the call keyword arguments (line 242)
            kwargs_154635 = {}
            # Getting the type of 'hash' (line 242)
            hash_154633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 36), 'hash', False)
            # Calling hash(args, kwargs) (line 242)
            hash_call_result_154636 = invoke(stypy.reporting.localization.Localization(__file__, 242, 36), hash_154633, *[child_154634], **kwargs_154635)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 241, 39), tuple_154628, hash_call_result_154636)
            # Adding element type (line 241)
            # Getting the type of 'name' (line 243)
            name_154637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 36), 'name', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 241, 39), tuple_154628, name_154637)
            
            # Applying the binary operator '%' (line 240)
            result_mod_154638 = python_operator(stypy.reporting.localization.Localization(__file__, 240, 35), '%', unicode_154627, tuple_154628)
            
            # Processing the call keyword arguments (line 240)
            kwargs_154639 = {}
            # Getting the type of 'fobj' (line 240)
            fobj_154625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 24), 'fobj', False)
            # Obtaining the member 'write' of a type (line 240)
            write_154626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 24), fobj_154625, 'write')
            # Calling write(args, kwargs) (line 240)
            write_call_result_154640 = invoke(stypy.reporting.localization.Localization(__file__, 240, 24), write_154626, *[result_mod_154638], **kwargs_154639)
            
            
            # Call to recurse(...): (line 244)
            # Processing the call arguments (line 244)
            # Getting the type of 'child' (line 244)
            child_154642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 32), 'child', False)
            # Processing the call keyword arguments (line 244)
            kwargs_154643 = {}
            # Getting the type of 'recurse' (line 244)
            recurse_154641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 24), 'recurse', False)
            # Calling recurse(args, kwargs) (line 244)
            recurse_call_result_154644 = invoke(stypy.reporting.localization.Localization(__file__, 244, 24), recurse_154641, *[child_154642], **kwargs_154643)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_154608:
                # SSA join for if statement (line 233)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'recurse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'recurse' in the type store
        # Getting the type of 'stypy_return_type' (line 214)
        stypy_return_type_154645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154645)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'recurse'
        return stypy_return_type_154645

    # Assigning a type to the variable 'recurse' (line 214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'recurse', recurse)
    
    # Call to write(...): (line 246)
    # Processing the call arguments (line 246)
    unicode_154648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 23), 'unicode', u'digraph G {\n')
    # Processing the call keyword arguments (line 246)
    kwargs_154649 = {}
    # Getting the type of 'fobj' (line 246)
    fobj_154646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 12), 'fobj', False)
    # Obtaining the member 'write' of a type (line 246)
    write_154647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 12), fobj_154646, 'write')
    # Calling write(args, kwargs) (line 246)
    write_call_result_154650 = invoke(stypy.reporting.localization.Localization(__file__, 246, 12), write_154647, *[unicode_154648], **kwargs_154649)
    
    
    # Call to recurse(...): (line 247)
    # Processing the call arguments (line 247)
    # Getting the type of 'self' (line 247)
    self_154652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 20), 'self', False)
    # Processing the call keyword arguments (line 247)
    kwargs_154653 = {}
    # Getting the type of 'recurse' (line 247)
    recurse_154651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'recurse', False)
    # Calling recurse(args, kwargs) (line 247)
    recurse_call_result_154654 = invoke(stypy.reporting.localization.Localization(__file__, 247, 12), recurse_154651, *[self_154652], **kwargs_154653)
    
    
    # Call to write(...): (line 248)
    # Processing the call arguments (line 248)
    unicode_154657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 23), 'unicode', u'}\n')
    # Processing the call keyword arguments (line 248)
    kwargs_154658 = {}
    # Getting the type of 'fobj' (line 248)
    fobj_154655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 12), 'fobj', False)
    # Obtaining the member 'write' of a type (line 248)
    write_154656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 12), fobj_154655, 'write')
    # Calling write(args, kwargs) (line 248)
    write_call_result_154659 = invoke(stypy.reporting.localization.Localization(__file__, 248, 12), write_154656, *[unicode_154657], **kwargs_154658)
    
    
    # ################# End of 'write_graphviz(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'write_graphviz' in the type store
    # Getting the type of 'stypy_return_type' (line 193)
    stypy_return_type_154660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154660)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'write_graphviz'
    return stypy_return_type_154660

# Assigning a type to the variable 'write_graphviz' (line 193)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'write_graphviz', write_graphviz)
# SSA join for if statement (line 192)
module_type_store = module_type_store.join_ssa_context()

# Declaration of the 'BboxBase' class
# Getting the type of 'TransformNode' (line 251)
TransformNode_154661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 15), 'TransformNode')

class BboxBase(TransformNode_154661, ):
    unicode_154662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, (-1)), 'unicode', u'\n    This is the base class of all bounding boxes, and provides\n    read-only access to its data.  A mutable bounding box is provided\n    by the :class:`Bbox` class.\n\n    The canonical representation is as two points, with no\n    restrictions on their ordering.  Convenience properties are\n    provided to get the left, bottom, right and top edges and width\n    and height, but these are not stored explicitly.\n    ')
    
    # Assigning a Name to a Name (line 262):

    @norecursion
    def frozen(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'frozen'
        module_type_store = module_type_store.open_function_context('frozen', 275, 4, False)
        # Assigning a type to the variable 'self' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.frozen.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.frozen.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.frozen.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.frozen.__dict__.__setitem__('stypy_function_name', 'BboxBase.frozen')
        BboxBase.frozen.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.frozen.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.frozen.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.frozen.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.frozen.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.frozen.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.frozen.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.frozen', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'frozen', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'frozen(...)' code ##################

        
        # Call to Bbox(...): (line 276)
        # Processing the call arguments (line 276)
        
        # Call to copy(...): (line 276)
        # Processing the call keyword arguments (line 276)
        kwargs_154669 = {}
        
        # Call to get_points(...): (line 276)
        # Processing the call keyword arguments (line 276)
        kwargs_154666 = {}
        # Getting the type of 'self' (line 276)
        self_154664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 20), 'self', False)
        # Obtaining the member 'get_points' of a type (line 276)
        get_points_154665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 20), self_154664, 'get_points')
        # Calling get_points(args, kwargs) (line 276)
        get_points_call_result_154667 = invoke(stypy.reporting.localization.Localization(__file__, 276, 20), get_points_154665, *[], **kwargs_154666)
        
        # Obtaining the member 'copy' of a type (line 276)
        copy_154668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 20), get_points_call_result_154667, 'copy')
        # Calling copy(args, kwargs) (line 276)
        copy_call_result_154670 = invoke(stypy.reporting.localization.Localization(__file__, 276, 20), copy_154668, *[], **kwargs_154669)
        
        # Processing the call keyword arguments (line 276)
        kwargs_154671 = {}
        # Getting the type of 'Bbox' (line 276)
        Bbox_154663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 276)
        Bbox_call_result_154672 = invoke(stypy.reporting.localization.Localization(__file__, 276, 15), Bbox_154663, *[copy_call_result_154670], **kwargs_154671)
        
        # Assigning a type to the variable 'stypy_return_type' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'stypy_return_type', Bbox_call_result_154672)
        
        # ################# End of 'frozen(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'frozen' in the type store
        # Getting the type of 'stypy_return_type' (line 275)
        stypy_return_type_154673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154673)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'frozen'
        return stypy_return_type_154673

    
    # Assigning a Attribute to a Attribute (line 277):

    @norecursion
    def __array__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__array__'
        module_type_store = module_type_store.open_function_context('__array__', 279, 4, False)
        # Assigning a type to the variable 'self' (line 280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.__array__.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.__array__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.__array__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.__array__.__dict__.__setitem__('stypy_function_name', 'BboxBase.__array__')
        BboxBase.__array__.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.__array__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        BboxBase.__array__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        BboxBase.__array__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.__array__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.__array__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.__array__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.__array__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__array__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__array__(...)' code ##################

        
        # Call to get_points(...): (line 280)
        # Processing the call keyword arguments (line 280)
        kwargs_154676 = {}
        # Getting the type of 'self' (line 280)
        self_154674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 15), 'self', False)
        # Obtaining the member 'get_points' of a type (line 280)
        get_points_154675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 15), self_154674, 'get_points')
        # Calling get_points(args, kwargs) (line 280)
        get_points_call_result_154677 = invoke(stypy.reporting.localization.Localization(__file__, 280, 15), get_points_154675, *[], **kwargs_154676)
        
        # Assigning a type to the variable 'stypy_return_type' (line 280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 8), 'stypy_return_type', get_points_call_result_154677)
        
        # ################# End of '__array__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__array__' in the type store
        # Getting the type of 'stypy_return_type' (line 279)
        stypy_return_type_154678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154678)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__array__'
        return stypy_return_type_154678


    @norecursion
    def is_unit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_unit'
        module_type_store = module_type_store.open_function_context('is_unit', 282, 4, False)
        # Assigning a type to the variable 'self' (line 283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 283, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.is_unit.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.is_unit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.is_unit.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.is_unit.__dict__.__setitem__('stypy_function_name', 'BboxBase.is_unit')
        BboxBase.is_unit.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.is_unit.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.is_unit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.is_unit.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.is_unit.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.is_unit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.is_unit.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.is_unit', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_unit', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_unit(...)' code ##################

        unicode_154679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, (-1)), 'unicode', u'\n        Returns True if the :class:`Bbox` is the unit bounding box\n        from (0, 0) to (1, 1).\n        ')
        
        
        # Call to list(...): (line 287)
        # Processing the call arguments (line 287)
        
        # Call to flatten(...): (line 287)
        # Processing the call keyword arguments (line 287)
        kwargs_154686 = {}
        
        # Call to get_points(...): (line 287)
        # Processing the call keyword arguments (line 287)
        kwargs_154683 = {}
        # Getting the type of 'self' (line 287)
        self_154681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 20), 'self', False)
        # Obtaining the member 'get_points' of a type (line 287)
        get_points_154682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 20), self_154681, 'get_points')
        # Calling get_points(args, kwargs) (line 287)
        get_points_call_result_154684 = invoke(stypy.reporting.localization.Localization(__file__, 287, 20), get_points_154682, *[], **kwargs_154683)
        
        # Obtaining the member 'flatten' of a type (line 287)
        flatten_154685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 20), get_points_call_result_154684, 'flatten')
        # Calling flatten(args, kwargs) (line 287)
        flatten_call_result_154687 = invoke(stypy.reporting.localization.Localization(__file__, 287, 20), flatten_154685, *[], **kwargs_154686)
        
        # Processing the call keyword arguments (line 287)
        kwargs_154688 = {}
        # Getting the type of 'list' (line 287)
        list_154680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 15), 'list', False)
        # Calling list(args, kwargs) (line 287)
        list_call_result_154689 = invoke(stypy.reporting.localization.Localization(__file__, 287, 15), list_154680, *[flatten_call_result_154687], **kwargs_154688)
        
        
        # Obtaining an instance of the builtin type 'list' (line 287)
        list_154690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 52), 'list')
        # Adding type elements to the builtin type 'list' instance (line 287)
        # Adding element type (line 287)
        float_154691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 53), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 52), list_154690, float_154691)
        # Adding element type (line 287)
        float_154692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 57), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 52), list_154690, float_154692)
        # Adding element type (line 287)
        float_154693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 61), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 52), list_154690, float_154693)
        # Adding element type (line 287)
        float_154694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 65), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 52), list_154690, float_154694)
        
        # Applying the binary operator '==' (line 287)
        result_eq_154695 = python_operator(stypy.reporting.localization.Localization(__file__, 287, 15), '==', list_call_result_154689, list_154690)
        
        # Assigning a type to the variable 'stypy_return_type' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 8), 'stypy_return_type', result_eq_154695)
        
        # ################# End of 'is_unit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_unit' in the type store
        # Getting the type of 'stypy_return_type' (line 282)
        stypy_return_type_154696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154696)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_unit'
        return stypy_return_type_154696


    @norecursion
    def x0(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'x0'
        module_type_store = module_type_store.open_function_context('x0', 289, 4, False)
        # Assigning a type to the variable 'self' (line 290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.x0.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.x0.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.x0.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.x0.__dict__.__setitem__('stypy_function_name', 'BboxBase.x0')
        BboxBase.x0.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.x0.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.x0.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.x0.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.x0.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.x0.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.x0.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.x0', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'x0', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'x0(...)' code ##################

        unicode_154697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, (-1)), 'unicode', u'\n        (property) :attr:`x0` is the first of the pair of *x* coordinates that\n        define the bounding box. :attr:`x0` is not guaranteed to be less than\n        :attr:`x1`.  If you require that, use :attr:`xmin`.\n        ')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 296)
        tuple_154698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 296)
        # Adding element type (line 296)
        int_154699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 296, 33), tuple_154698, int_154699)
        # Adding element type (line 296)
        int_154700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 296, 33), tuple_154698, int_154700)
        
        
        # Call to get_points(...): (line 296)
        # Processing the call keyword arguments (line 296)
        kwargs_154703 = {}
        # Getting the type of 'self' (line 296)
        self_154701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 15), 'self', False)
        # Obtaining the member 'get_points' of a type (line 296)
        get_points_154702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 15), self_154701, 'get_points')
        # Calling get_points(args, kwargs) (line 296)
        get_points_call_result_154704 = invoke(stypy.reporting.localization.Localization(__file__, 296, 15), get_points_154702, *[], **kwargs_154703)
        
        # Obtaining the member '__getitem__' of a type (line 296)
        getitem___154705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 15), get_points_call_result_154704, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 296)
        subscript_call_result_154706 = invoke(stypy.reporting.localization.Localization(__file__, 296, 15), getitem___154705, tuple_154698)
        
        # Assigning a type to the variable 'stypy_return_type' (line 296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 8), 'stypy_return_type', subscript_call_result_154706)
        
        # ################# End of 'x0(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'x0' in the type store
        # Getting the type of 'stypy_return_type' (line 289)
        stypy_return_type_154707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154707)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'x0'
        return stypy_return_type_154707


    @norecursion
    def y0(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'y0'
        module_type_store = module_type_store.open_function_context('y0', 298, 4, False)
        # Assigning a type to the variable 'self' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.y0.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.y0.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.y0.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.y0.__dict__.__setitem__('stypy_function_name', 'BboxBase.y0')
        BboxBase.y0.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.y0.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.y0.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.y0.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.y0.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.y0.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.y0.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.y0', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'y0', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'y0(...)' code ##################

        unicode_154708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, (-1)), 'unicode', u'\n        (property) :attr:`y0` is the first of the pair of *y* coordinates that\n        define the bounding box. :attr:`y0` is not guaranteed to be less than\n        :attr:`y1`.  If you require that, use :attr:`ymin`.\n        ')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 305)
        tuple_154709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 305)
        # Adding element type (line 305)
        int_154710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 305, 33), tuple_154709, int_154710)
        # Adding element type (line 305)
        int_154711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 305, 33), tuple_154709, int_154711)
        
        
        # Call to get_points(...): (line 305)
        # Processing the call keyword arguments (line 305)
        kwargs_154714 = {}
        # Getting the type of 'self' (line 305)
        self_154712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 15), 'self', False)
        # Obtaining the member 'get_points' of a type (line 305)
        get_points_154713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 15), self_154712, 'get_points')
        # Calling get_points(args, kwargs) (line 305)
        get_points_call_result_154715 = invoke(stypy.reporting.localization.Localization(__file__, 305, 15), get_points_154713, *[], **kwargs_154714)
        
        # Obtaining the member '__getitem__' of a type (line 305)
        getitem___154716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 15), get_points_call_result_154715, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 305)
        subscript_call_result_154717 = invoke(stypy.reporting.localization.Localization(__file__, 305, 15), getitem___154716, tuple_154709)
        
        # Assigning a type to the variable 'stypy_return_type' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'stypy_return_type', subscript_call_result_154717)
        
        # ################# End of 'y0(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'y0' in the type store
        # Getting the type of 'stypy_return_type' (line 298)
        stypy_return_type_154718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154718)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'y0'
        return stypy_return_type_154718


    @norecursion
    def x1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'x1'
        module_type_store = module_type_store.open_function_context('x1', 307, 4, False)
        # Assigning a type to the variable 'self' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.x1.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.x1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.x1.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.x1.__dict__.__setitem__('stypy_function_name', 'BboxBase.x1')
        BboxBase.x1.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.x1.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.x1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.x1.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.x1.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.x1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.x1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.x1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'x1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'x1(...)' code ##################

        unicode_154719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, (-1)), 'unicode', u'\n        (property) :attr:`x1` is the second of the pair of *x* coordinates that\n        define the bounding box. :attr:`x1` is not guaranteed to be greater\n        than :attr:`x0`.  If you require that, use :attr:`xmax`.\n        ')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 314)
        tuple_154720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 314)
        # Adding element type (line 314)
        int_154721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 314, 33), tuple_154720, int_154721)
        # Adding element type (line 314)
        int_154722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 314, 33), tuple_154720, int_154722)
        
        
        # Call to get_points(...): (line 314)
        # Processing the call keyword arguments (line 314)
        kwargs_154725 = {}
        # Getting the type of 'self' (line 314)
        self_154723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 15), 'self', False)
        # Obtaining the member 'get_points' of a type (line 314)
        get_points_154724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 15), self_154723, 'get_points')
        # Calling get_points(args, kwargs) (line 314)
        get_points_call_result_154726 = invoke(stypy.reporting.localization.Localization(__file__, 314, 15), get_points_154724, *[], **kwargs_154725)
        
        # Obtaining the member '__getitem__' of a type (line 314)
        getitem___154727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 15), get_points_call_result_154726, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 314)
        subscript_call_result_154728 = invoke(stypy.reporting.localization.Localization(__file__, 314, 15), getitem___154727, tuple_154720)
        
        # Assigning a type to the variable 'stypy_return_type' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'stypy_return_type', subscript_call_result_154728)
        
        # ################# End of 'x1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'x1' in the type store
        # Getting the type of 'stypy_return_type' (line 307)
        stypy_return_type_154729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154729)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'x1'
        return stypy_return_type_154729


    @norecursion
    def y1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'y1'
        module_type_store = module_type_store.open_function_context('y1', 316, 4, False)
        # Assigning a type to the variable 'self' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.y1.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.y1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.y1.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.y1.__dict__.__setitem__('stypy_function_name', 'BboxBase.y1')
        BboxBase.y1.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.y1.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.y1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.y1.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.y1.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.y1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.y1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.y1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'y1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'y1(...)' code ##################

        unicode_154730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 322, (-1)), 'unicode', u'\n        (property) :attr:`y1` is the second of the pair of *y* coordinates that\n        define the bounding box. :attr:`y1` is not guaranteed to be greater\n        than :attr:`y0`.  If you require that, use :attr:`ymax`.\n        ')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 323)
        tuple_154731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 323)
        # Adding element type (line 323)
        int_154732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 323, 33), tuple_154731, int_154732)
        # Adding element type (line 323)
        int_154733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 323, 33), tuple_154731, int_154733)
        
        
        # Call to get_points(...): (line 323)
        # Processing the call keyword arguments (line 323)
        kwargs_154736 = {}
        # Getting the type of 'self' (line 323)
        self_154734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 15), 'self', False)
        # Obtaining the member 'get_points' of a type (line 323)
        get_points_154735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 15), self_154734, 'get_points')
        # Calling get_points(args, kwargs) (line 323)
        get_points_call_result_154737 = invoke(stypy.reporting.localization.Localization(__file__, 323, 15), get_points_154735, *[], **kwargs_154736)
        
        # Obtaining the member '__getitem__' of a type (line 323)
        getitem___154738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 15), get_points_call_result_154737, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 323)
        subscript_call_result_154739 = invoke(stypy.reporting.localization.Localization(__file__, 323, 15), getitem___154738, tuple_154731)
        
        # Assigning a type to the variable 'stypy_return_type' (line 323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 8), 'stypy_return_type', subscript_call_result_154739)
        
        # ################# End of 'y1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'y1' in the type store
        # Getting the type of 'stypy_return_type' (line 316)
        stypy_return_type_154740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'y1'
        return stypy_return_type_154740


    @norecursion
    def p0(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'p0'
        module_type_store = module_type_store.open_function_context('p0', 325, 4, False)
        # Assigning a type to the variable 'self' (line 326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.p0.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.p0.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.p0.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.p0.__dict__.__setitem__('stypy_function_name', 'BboxBase.p0')
        BboxBase.p0.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.p0.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.p0.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.p0.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.p0.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.p0.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.p0.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.p0', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'p0', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'p0(...)' code ##################

        unicode_154741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, (-1)), 'unicode', u'\n        (property) :attr:`p0` is the first pair of (*x*, *y*) coordinates that\n        define the bounding box.  It is not guaranteed to be the bottom-left\n        corner.  For that, use :attr:`min`.\n        ')
        
        # Obtaining the type of the subscript
        int_154742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 33), 'int')
        
        # Call to get_points(...): (line 332)
        # Processing the call keyword arguments (line 332)
        kwargs_154745 = {}
        # Getting the type of 'self' (line 332)
        self_154743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 15), 'self', False)
        # Obtaining the member 'get_points' of a type (line 332)
        get_points_154744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 15), self_154743, 'get_points')
        # Calling get_points(args, kwargs) (line 332)
        get_points_call_result_154746 = invoke(stypy.reporting.localization.Localization(__file__, 332, 15), get_points_154744, *[], **kwargs_154745)
        
        # Obtaining the member '__getitem__' of a type (line 332)
        getitem___154747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 15), get_points_call_result_154746, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 332)
        subscript_call_result_154748 = invoke(stypy.reporting.localization.Localization(__file__, 332, 15), getitem___154747, int_154742)
        
        # Assigning a type to the variable 'stypy_return_type' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 8), 'stypy_return_type', subscript_call_result_154748)
        
        # ################# End of 'p0(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'p0' in the type store
        # Getting the type of 'stypy_return_type' (line 325)
        stypy_return_type_154749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154749)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'p0'
        return stypy_return_type_154749


    @norecursion
    def p1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'p1'
        module_type_store = module_type_store.open_function_context('p1', 334, 4, False)
        # Assigning a type to the variable 'self' (line 335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.p1.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.p1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.p1.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.p1.__dict__.__setitem__('stypy_function_name', 'BboxBase.p1')
        BboxBase.p1.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.p1.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.p1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.p1.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.p1.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.p1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.p1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.p1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'p1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'p1(...)' code ##################

        unicode_154750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, (-1)), 'unicode', u'\n        (property) :attr:`p1` is the second pair of (*x*, *y*) coordinates that\n        define the bounding box.  It is not guaranteed to be the top-right\n        corner.  For that, use :attr:`max`.\n        ')
        
        # Obtaining the type of the subscript
        int_154751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 33), 'int')
        
        # Call to get_points(...): (line 341)
        # Processing the call keyword arguments (line 341)
        kwargs_154754 = {}
        # Getting the type of 'self' (line 341)
        self_154752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 15), 'self', False)
        # Obtaining the member 'get_points' of a type (line 341)
        get_points_154753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 15), self_154752, 'get_points')
        # Calling get_points(args, kwargs) (line 341)
        get_points_call_result_154755 = invoke(stypy.reporting.localization.Localization(__file__, 341, 15), get_points_154753, *[], **kwargs_154754)
        
        # Obtaining the member '__getitem__' of a type (line 341)
        getitem___154756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 15), get_points_call_result_154755, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 341)
        subscript_call_result_154757 = invoke(stypy.reporting.localization.Localization(__file__, 341, 15), getitem___154756, int_154751)
        
        # Assigning a type to the variable 'stypy_return_type' (line 341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 8), 'stypy_return_type', subscript_call_result_154757)
        
        # ################# End of 'p1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'p1' in the type store
        # Getting the type of 'stypy_return_type' (line 334)
        stypy_return_type_154758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154758)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'p1'
        return stypy_return_type_154758


    @norecursion
    def xmin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'xmin'
        module_type_store = module_type_store.open_function_context('xmin', 343, 4, False)
        # Assigning a type to the variable 'self' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.xmin.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.xmin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.xmin.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.xmin.__dict__.__setitem__('stypy_function_name', 'BboxBase.xmin')
        BboxBase.xmin.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.xmin.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.xmin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.xmin.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.xmin.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.xmin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.xmin.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.xmin', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'xmin', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'xmin(...)' code ##################

        unicode_154759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, (-1)), 'unicode', u'\n        (property) :attr:`xmin` is the left edge of the bounding box.\n        ')
        
        # Call to min(...): (line 348)
        # Processing the call arguments (line 348)
        
        # Obtaining the type of the subscript
        slice_154762 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 348, 22), None, None, None)
        int_154763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 43), 'int')
        
        # Call to get_points(...): (line 348)
        # Processing the call keyword arguments (line 348)
        kwargs_154766 = {}
        # Getting the type of 'self' (line 348)
        self_154764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 22), 'self', False)
        # Obtaining the member 'get_points' of a type (line 348)
        get_points_154765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 22), self_154764, 'get_points')
        # Calling get_points(args, kwargs) (line 348)
        get_points_call_result_154767 = invoke(stypy.reporting.localization.Localization(__file__, 348, 22), get_points_154765, *[], **kwargs_154766)
        
        # Obtaining the member '__getitem__' of a type (line 348)
        getitem___154768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 22), get_points_call_result_154767, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 348)
        subscript_call_result_154769 = invoke(stypy.reporting.localization.Localization(__file__, 348, 22), getitem___154768, (slice_154762, int_154763))
        
        # Processing the call keyword arguments (line 348)
        kwargs_154770 = {}
        # Getting the type of 'np' (line 348)
        np_154760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 15), 'np', False)
        # Obtaining the member 'min' of a type (line 348)
        min_154761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 15), np_154760, 'min')
        # Calling min(args, kwargs) (line 348)
        min_call_result_154771 = invoke(stypy.reporting.localization.Localization(__file__, 348, 15), min_154761, *[subscript_call_result_154769], **kwargs_154770)
        
        # Assigning a type to the variable 'stypy_return_type' (line 348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 8), 'stypy_return_type', min_call_result_154771)
        
        # ################# End of 'xmin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'xmin' in the type store
        # Getting the type of 'stypy_return_type' (line 343)
        stypy_return_type_154772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154772)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'xmin'
        return stypy_return_type_154772


    @norecursion
    def ymin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ymin'
        module_type_store = module_type_store.open_function_context('ymin', 350, 4, False)
        # Assigning a type to the variable 'self' (line 351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.ymin.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.ymin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.ymin.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.ymin.__dict__.__setitem__('stypy_function_name', 'BboxBase.ymin')
        BboxBase.ymin.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.ymin.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.ymin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.ymin.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.ymin.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.ymin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.ymin.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.ymin', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ymin', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ymin(...)' code ##################

        unicode_154773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, (-1)), 'unicode', u'\n        (property) :attr:`ymin` is the bottom edge of the bounding box.\n        ')
        
        # Call to min(...): (line 355)
        # Processing the call arguments (line 355)
        
        # Obtaining the type of the subscript
        slice_154776 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 355, 22), None, None, None)
        int_154777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 43), 'int')
        
        # Call to get_points(...): (line 355)
        # Processing the call keyword arguments (line 355)
        kwargs_154780 = {}
        # Getting the type of 'self' (line 355)
        self_154778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 22), 'self', False)
        # Obtaining the member 'get_points' of a type (line 355)
        get_points_154779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 22), self_154778, 'get_points')
        # Calling get_points(args, kwargs) (line 355)
        get_points_call_result_154781 = invoke(stypy.reporting.localization.Localization(__file__, 355, 22), get_points_154779, *[], **kwargs_154780)
        
        # Obtaining the member '__getitem__' of a type (line 355)
        getitem___154782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 22), get_points_call_result_154781, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 355)
        subscript_call_result_154783 = invoke(stypy.reporting.localization.Localization(__file__, 355, 22), getitem___154782, (slice_154776, int_154777))
        
        # Processing the call keyword arguments (line 355)
        kwargs_154784 = {}
        # Getting the type of 'np' (line 355)
        np_154774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 15), 'np', False)
        # Obtaining the member 'min' of a type (line 355)
        min_154775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 15), np_154774, 'min')
        # Calling min(args, kwargs) (line 355)
        min_call_result_154785 = invoke(stypy.reporting.localization.Localization(__file__, 355, 15), min_154775, *[subscript_call_result_154783], **kwargs_154784)
        
        # Assigning a type to the variable 'stypy_return_type' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'stypy_return_type', min_call_result_154785)
        
        # ################# End of 'ymin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ymin' in the type store
        # Getting the type of 'stypy_return_type' (line 350)
        stypy_return_type_154786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154786)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ymin'
        return stypy_return_type_154786


    @norecursion
    def xmax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'xmax'
        module_type_store = module_type_store.open_function_context('xmax', 357, 4, False)
        # Assigning a type to the variable 'self' (line 358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.xmax.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.xmax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.xmax.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.xmax.__dict__.__setitem__('stypy_function_name', 'BboxBase.xmax')
        BboxBase.xmax.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.xmax.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.xmax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.xmax.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.xmax.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.xmax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.xmax.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.xmax', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'xmax', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'xmax(...)' code ##################

        unicode_154787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, (-1)), 'unicode', u'\n        (property) :attr:`xmax` is the right edge of the bounding box.\n        ')
        
        # Call to max(...): (line 362)
        # Processing the call arguments (line 362)
        
        # Obtaining the type of the subscript
        slice_154790 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 362, 22), None, None, None)
        int_154791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 43), 'int')
        
        # Call to get_points(...): (line 362)
        # Processing the call keyword arguments (line 362)
        kwargs_154794 = {}
        # Getting the type of 'self' (line 362)
        self_154792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 22), 'self', False)
        # Obtaining the member 'get_points' of a type (line 362)
        get_points_154793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 22), self_154792, 'get_points')
        # Calling get_points(args, kwargs) (line 362)
        get_points_call_result_154795 = invoke(stypy.reporting.localization.Localization(__file__, 362, 22), get_points_154793, *[], **kwargs_154794)
        
        # Obtaining the member '__getitem__' of a type (line 362)
        getitem___154796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 22), get_points_call_result_154795, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 362)
        subscript_call_result_154797 = invoke(stypy.reporting.localization.Localization(__file__, 362, 22), getitem___154796, (slice_154790, int_154791))
        
        # Processing the call keyword arguments (line 362)
        kwargs_154798 = {}
        # Getting the type of 'np' (line 362)
        np_154788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 15), 'np', False)
        # Obtaining the member 'max' of a type (line 362)
        max_154789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 15), np_154788, 'max')
        # Calling max(args, kwargs) (line 362)
        max_call_result_154799 = invoke(stypy.reporting.localization.Localization(__file__, 362, 15), max_154789, *[subscript_call_result_154797], **kwargs_154798)
        
        # Assigning a type to the variable 'stypy_return_type' (line 362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 8), 'stypy_return_type', max_call_result_154799)
        
        # ################# End of 'xmax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'xmax' in the type store
        # Getting the type of 'stypy_return_type' (line 357)
        stypy_return_type_154800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154800)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'xmax'
        return stypy_return_type_154800


    @norecursion
    def ymax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ymax'
        module_type_store = module_type_store.open_function_context('ymax', 364, 4, False)
        # Assigning a type to the variable 'self' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.ymax.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.ymax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.ymax.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.ymax.__dict__.__setitem__('stypy_function_name', 'BboxBase.ymax')
        BboxBase.ymax.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.ymax.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.ymax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.ymax.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.ymax.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.ymax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.ymax.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.ymax', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ymax', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ymax(...)' code ##################

        unicode_154801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 368, (-1)), 'unicode', u'\n        (property) :attr:`ymax` is the top edge of the bounding box.\n        ')
        
        # Call to max(...): (line 369)
        # Processing the call arguments (line 369)
        
        # Obtaining the type of the subscript
        slice_154804 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 369, 22), None, None, None)
        int_154805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 43), 'int')
        
        # Call to get_points(...): (line 369)
        # Processing the call keyword arguments (line 369)
        kwargs_154808 = {}
        # Getting the type of 'self' (line 369)
        self_154806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 22), 'self', False)
        # Obtaining the member 'get_points' of a type (line 369)
        get_points_154807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 22), self_154806, 'get_points')
        # Calling get_points(args, kwargs) (line 369)
        get_points_call_result_154809 = invoke(stypy.reporting.localization.Localization(__file__, 369, 22), get_points_154807, *[], **kwargs_154808)
        
        # Obtaining the member '__getitem__' of a type (line 369)
        getitem___154810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 22), get_points_call_result_154809, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 369)
        subscript_call_result_154811 = invoke(stypy.reporting.localization.Localization(__file__, 369, 22), getitem___154810, (slice_154804, int_154805))
        
        # Processing the call keyword arguments (line 369)
        kwargs_154812 = {}
        # Getting the type of 'np' (line 369)
        np_154802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 15), 'np', False)
        # Obtaining the member 'max' of a type (line 369)
        max_154803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 15), np_154802, 'max')
        # Calling max(args, kwargs) (line 369)
        max_call_result_154813 = invoke(stypy.reporting.localization.Localization(__file__, 369, 15), max_154803, *[subscript_call_result_154811], **kwargs_154812)
        
        # Assigning a type to the variable 'stypy_return_type' (line 369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 8), 'stypy_return_type', max_call_result_154813)
        
        # ################# End of 'ymax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ymax' in the type store
        # Getting the type of 'stypy_return_type' (line 364)
        stypy_return_type_154814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154814)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ymax'
        return stypy_return_type_154814


    @norecursion
    def min(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'min'
        module_type_store = module_type_store.open_function_context('min', 371, 4, False)
        # Assigning a type to the variable 'self' (line 372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.min.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.min.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.min.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.min.__dict__.__setitem__('stypy_function_name', 'BboxBase.min')
        BboxBase.min.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.min.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.min.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.min.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.min.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.min.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.min.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.min', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'min', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'min(...)' code ##################

        unicode_154815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, (-1)), 'unicode', u'\n        (property) :attr:`min` is the bottom-left corner of the bounding box.\n        ')
        
        # Call to min(...): (line 376)
        # Processing the call arguments (line 376)
        
        # Call to get_points(...): (line 376)
        # Processing the call keyword arguments (line 376)
        kwargs_154820 = {}
        # Getting the type of 'self' (line 376)
        self_154818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 22), 'self', False)
        # Obtaining the member 'get_points' of a type (line 376)
        get_points_154819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 22), self_154818, 'get_points')
        # Calling get_points(args, kwargs) (line 376)
        get_points_call_result_154821 = invoke(stypy.reporting.localization.Localization(__file__, 376, 22), get_points_154819, *[], **kwargs_154820)
        
        # Processing the call keyword arguments (line 376)
        int_154822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 46), 'int')
        keyword_154823 = int_154822
        kwargs_154824 = {'axis': keyword_154823}
        # Getting the type of 'np' (line 376)
        np_154816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 15), 'np', False)
        # Obtaining the member 'min' of a type (line 376)
        min_154817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 15), np_154816, 'min')
        # Calling min(args, kwargs) (line 376)
        min_call_result_154825 = invoke(stypy.reporting.localization.Localization(__file__, 376, 15), min_154817, *[get_points_call_result_154821], **kwargs_154824)
        
        # Assigning a type to the variable 'stypy_return_type' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'stypy_return_type', min_call_result_154825)
        
        # ################# End of 'min(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'min' in the type store
        # Getting the type of 'stypy_return_type' (line 371)
        stypy_return_type_154826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154826)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'min'
        return stypy_return_type_154826


    @norecursion
    def max(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'max'
        module_type_store = module_type_store.open_function_context('max', 378, 4, False)
        # Assigning a type to the variable 'self' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.max.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.max.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.max.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.max.__dict__.__setitem__('stypy_function_name', 'BboxBase.max')
        BboxBase.max.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.max.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.max.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.max.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.max.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.max.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.max.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.max', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'max', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'max(...)' code ##################

        unicode_154827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, (-1)), 'unicode', u'\n        (property) :attr:`max` is the top-right corner of the bounding box.\n        ')
        
        # Call to max(...): (line 383)
        # Processing the call arguments (line 383)
        
        # Call to get_points(...): (line 383)
        # Processing the call keyword arguments (line 383)
        kwargs_154832 = {}
        # Getting the type of 'self' (line 383)
        self_154830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 22), 'self', False)
        # Obtaining the member 'get_points' of a type (line 383)
        get_points_154831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 22), self_154830, 'get_points')
        # Calling get_points(args, kwargs) (line 383)
        get_points_call_result_154833 = invoke(stypy.reporting.localization.Localization(__file__, 383, 22), get_points_154831, *[], **kwargs_154832)
        
        # Processing the call keyword arguments (line 383)
        int_154834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 46), 'int')
        keyword_154835 = int_154834
        kwargs_154836 = {'axis': keyword_154835}
        # Getting the type of 'np' (line 383)
        np_154828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 15), 'np', False)
        # Obtaining the member 'max' of a type (line 383)
        max_154829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 15), np_154828, 'max')
        # Calling max(args, kwargs) (line 383)
        max_call_result_154837 = invoke(stypy.reporting.localization.Localization(__file__, 383, 15), max_154829, *[get_points_call_result_154833], **kwargs_154836)
        
        # Assigning a type to the variable 'stypy_return_type' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'stypy_return_type', max_call_result_154837)
        
        # ################# End of 'max(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'max' in the type store
        # Getting the type of 'stypy_return_type' (line 378)
        stypy_return_type_154838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154838)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'max'
        return stypy_return_type_154838


    @norecursion
    def intervalx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'intervalx'
        module_type_store = module_type_store.open_function_context('intervalx', 385, 4, False)
        # Assigning a type to the variable 'self' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.intervalx.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.intervalx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.intervalx.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.intervalx.__dict__.__setitem__('stypy_function_name', 'BboxBase.intervalx')
        BboxBase.intervalx.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.intervalx.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.intervalx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.intervalx.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.intervalx.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.intervalx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.intervalx.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.intervalx', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'intervalx', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'intervalx(...)' code ##################

        unicode_154839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, (-1)), 'unicode', u'\n        (property) :attr:`intervalx` is the pair of *x* coordinates that define\n        the bounding box. It is not guaranteed to be sorted from left to right.\n        ')
        
        # Obtaining the type of the subscript
        slice_154840 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 391, 15), None, None, None)
        int_154841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 36), 'int')
        
        # Call to get_points(...): (line 391)
        # Processing the call keyword arguments (line 391)
        kwargs_154844 = {}
        # Getting the type of 'self' (line 391)
        self_154842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 15), 'self', False)
        # Obtaining the member 'get_points' of a type (line 391)
        get_points_154843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 15), self_154842, 'get_points')
        # Calling get_points(args, kwargs) (line 391)
        get_points_call_result_154845 = invoke(stypy.reporting.localization.Localization(__file__, 391, 15), get_points_154843, *[], **kwargs_154844)
        
        # Obtaining the member '__getitem__' of a type (line 391)
        getitem___154846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 15), get_points_call_result_154845, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 391)
        subscript_call_result_154847 = invoke(stypy.reporting.localization.Localization(__file__, 391, 15), getitem___154846, (slice_154840, int_154841))
        
        # Assigning a type to the variable 'stypy_return_type' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'stypy_return_type', subscript_call_result_154847)
        
        # ################# End of 'intervalx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'intervalx' in the type store
        # Getting the type of 'stypy_return_type' (line 385)
        stypy_return_type_154848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154848)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'intervalx'
        return stypy_return_type_154848


    @norecursion
    def intervaly(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'intervaly'
        module_type_store = module_type_store.open_function_context('intervaly', 393, 4, False)
        # Assigning a type to the variable 'self' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.intervaly.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.intervaly.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.intervaly.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.intervaly.__dict__.__setitem__('stypy_function_name', 'BboxBase.intervaly')
        BboxBase.intervaly.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.intervaly.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.intervaly.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.intervaly.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.intervaly.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.intervaly.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.intervaly.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.intervaly', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'intervaly', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'intervaly(...)' code ##################

        unicode_154849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, (-1)), 'unicode', u'\n        (property) :attr:`intervaly` is the pair of *y* coordinates that define\n        the bounding box.  It is not guaranteed to be sorted from bottom to\n        top.\n        ')
        
        # Obtaining the type of the subscript
        slice_154850 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 400, 15), None, None, None)
        int_154851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 36), 'int')
        
        # Call to get_points(...): (line 400)
        # Processing the call keyword arguments (line 400)
        kwargs_154854 = {}
        # Getting the type of 'self' (line 400)
        self_154852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 15), 'self', False)
        # Obtaining the member 'get_points' of a type (line 400)
        get_points_154853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 15), self_154852, 'get_points')
        # Calling get_points(args, kwargs) (line 400)
        get_points_call_result_154855 = invoke(stypy.reporting.localization.Localization(__file__, 400, 15), get_points_154853, *[], **kwargs_154854)
        
        # Obtaining the member '__getitem__' of a type (line 400)
        getitem___154856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 15), get_points_call_result_154855, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 400)
        subscript_call_result_154857 = invoke(stypy.reporting.localization.Localization(__file__, 400, 15), getitem___154856, (slice_154850, int_154851))
        
        # Assigning a type to the variable 'stypy_return_type' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 8), 'stypy_return_type', subscript_call_result_154857)
        
        # ################# End of 'intervaly(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'intervaly' in the type store
        # Getting the type of 'stypy_return_type' (line 393)
        stypy_return_type_154858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154858)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'intervaly'
        return stypy_return_type_154858


    @norecursion
    def width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'width'
        module_type_store = module_type_store.open_function_context('width', 402, 4, False)
        # Assigning a type to the variable 'self' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.width.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.width.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.width.__dict__.__setitem__('stypy_function_name', 'BboxBase.width')
        BboxBase.width.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.width.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.width.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.width.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.width.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.width', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'width', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'width(...)' code ##################

        unicode_154859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, (-1)), 'unicode', u'\n        (property) The width of the bounding box.  It may be negative if\n        :attr:`x1` < :attr:`x0`.\n        ')
        
        # Assigning a Call to a Name (line 408):
        
        # Assigning a Call to a Name (line 408):
        
        # Call to get_points(...): (line 408)
        # Processing the call keyword arguments (line 408)
        kwargs_154862 = {}
        # Getting the type of 'self' (line 408)
        self_154860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 17), 'self', False)
        # Obtaining the member 'get_points' of a type (line 408)
        get_points_154861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 17), self_154860, 'get_points')
        # Calling get_points(args, kwargs) (line 408)
        get_points_call_result_154863 = invoke(stypy.reporting.localization.Localization(__file__, 408, 17), get_points_154861, *[], **kwargs_154862)
        
        # Assigning a type to the variable 'points' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'points', get_points_call_result_154863)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 409)
        tuple_154864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 409)
        # Adding element type (line 409)
        int_154865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 409, 22), tuple_154864, int_154865)
        # Adding element type (line 409)
        int_154866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 409, 22), tuple_154864, int_154866)
        
        # Getting the type of 'points' (line 409)
        points_154867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 15), 'points')
        # Obtaining the member '__getitem__' of a type (line 409)
        getitem___154868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 15), points_154867, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 409)
        subscript_call_result_154869 = invoke(stypy.reporting.localization.Localization(__file__, 409, 15), getitem___154868, tuple_154864)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 409)
        tuple_154870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 409)
        # Adding element type (line 409)
        int_154871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 409, 37), tuple_154870, int_154871)
        # Adding element type (line 409)
        int_154872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 409, 37), tuple_154870, int_154872)
        
        # Getting the type of 'points' (line 409)
        points_154873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 30), 'points')
        # Obtaining the member '__getitem__' of a type (line 409)
        getitem___154874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 30), points_154873, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 409)
        subscript_call_result_154875 = invoke(stypy.reporting.localization.Localization(__file__, 409, 30), getitem___154874, tuple_154870)
        
        # Applying the binary operator '-' (line 409)
        result_sub_154876 = python_operator(stypy.reporting.localization.Localization(__file__, 409, 15), '-', subscript_call_result_154869, subscript_call_result_154875)
        
        # Assigning a type to the variable 'stypy_return_type' (line 409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'stypy_return_type', result_sub_154876)
        
        # ################# End of 'width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'width' in the type store
        # Getting the type of 'stypy_return_type' (line 402)
        stypy_return_type_154877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154877)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'width'
        return stypy_return_type_154877


    @norecursion
    def height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'height'
        module_type_store = module_type_store.open_function_context('height', 411, 4, False)
        # Assigning a type to the variable 'self' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.height.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.height.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.height.__dict__.__setitem__('stypy_function_name', 'BboxBase.height')
        BboxBase.height.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.height.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.height.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.height.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.height.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.height', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'height', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'height(...)' code ##################

        unicode_154878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, (-1)), 'unicode', u'\n        (property) The height of the bounding box.  It may be negative if\n        :attr:`y1` < :attr:`y0`.\n        ')
        
        # Assigning a Call to a Name (line 417):
        
        # Assigning a Call to a Name (line 417):
        
        # Call to get_points(...): (line 417)
        # Processing the call keyword arguments (line 417)
        kwargs_154881 = {}
        # Getting the type of 'self' (line 417)
        self_154879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 17), 'self', False)
        # Obtaining the member 'get_points' of a type (line 417)
        get_points_154880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 17), self_154879, 'get_points')
        # Calling get_points(args, kwargs) (line 417)
        get_points_call_result_154882 = invoke(stypy.reporting.localization.Localization(__file__, 417, 17), get_points_154880, *[], **kwargs_154881)
        
        # Assigning a type to the variable 'points' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'points', get_points_call_result_154882)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 418)
        tuple_154883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 418)
        # Adding element type (line 418)
        int_154884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 22), tuple_154883, int_154884)
        # Adding element type (line 418)
        int_154885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 22), tuple_154883, int_154885)
        
        # Getting the type of 'points' (line 418)
        points_154886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 15), 'points')
        # Obtaining the member '__getitem__' of a type (line 418)
        getitem___154887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 15), points_154886, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 418)
        subscript_call_result_154888 = invoke(stypy.reporting.localization.Localization(__file__, 418, 15), getitem___154887, tuple_154883)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 418)
        tuple_154889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 418)
        # Adding element type (line 418)
        int_154890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 37), tuple_154889, int_154890)
        # Adding element type (line 418)
        int_154891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 37), tuple_154889, int_154891)
        
        # Getting the type of 'points' (line 418)
        points_154892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 30), 'points')
        # Obtaining the member '__getitem__' of a type (line 418)
        getitem___154893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 30), points_154892, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 418)
        subscript_call_result_154894 = invoke(stypy.reporting.localization.Localization(__file__, 418, 30), getitem___154893, tuple_154889)
        
        # Applying the binary operator '-' (line 418)
        result_sub_154895 = python_operator(stypy.reporting.localization.Localization(__file__, 418, 15), '-', subscript_call_result_154888, subscript_call_result_154894)
        
        # Assigning a type to the variable 'stypy_return_type' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'stypy_return_type', result_sub_154895)
        
        # ################# End of 'height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'height' in the type store
        # Getting the type of 'stypy_return_type' (line 411)
        stypy_return_type_154896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154896)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'height'
        return stypy_return_type_154896


    @norecursion
    def size(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'size'
        module_type_store = module_type_store.open_function_context('size', 420, 4, False)
        # Assigning a type to the variable 'self' (line 421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.size.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.size.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.size.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.size.__dict__.__setitem__('stypy_function_name', 'BboxBase.size')
        BboxBase.size.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.size.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.size.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.size.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.size.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.size.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.size.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.size', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'size', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'size(...)' code ##################

        unicode_154897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 425, (-1)), 'unicode', u'\n        (property) The width and height of the bounding box.  May be negative,\n        in the same way as :attr:`width` and :attr:`height`.\n        ')
        
        # Assigning a Call to a Name (line 426):
        
        # Assigning a Call to a Name (line 426):
        
        # Call to get_points(...): (line 426)
        # Processing the call keyword arguments (line 426)
        kwargs_154900 = {}
        # Getting the type of 'self' (line 426)
        self_154898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 17), 'self', False)
        # Obtaining the member 'get_points' of a type (line 426)
        get_points_154899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 17), self_154898, 'get_points')
        # Calling get_points(args, kwargs) (line 426)
        get_points_call_result_154901 = invoke(stypy.reporting.localization.Localization(__file__, 426, 17), get_points_154899, *[], **kwargs_154900)
        
        # Assigning a type to the variable 'points' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'points', get_points_call_result_154901)
        
        # Obtaining the type of the subscript
        int_154902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 22), 'int')
        # Getting the type of 'points' (line 427)
        points_154903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 15), 'points')
        # Obtaining the member '__getitem__' of a type (line 427)
        getitem___154904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 15), points_154903, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 427)
        subscript_call_result_154905 = invoke(stypy.reporting.localization.Localization(__file__, 427, 15), getitem___154904, int_154902)
        
        
        # Obtaining the type of the subscript
        int_154906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 34), 'int')
        # Getting the type of 'points' (line 427)
        points_154907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 27), 'points')
        # Obtaining the member '__getitem__' of a type (line 427)
        getitem___154908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 27), points_154907, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 427)
        subscript_call_result_154909 = invoke(stypy.reporting.localization.Localization(__file__, 427, 27), getitem___154908, int_154906)
        
        # Applying the binary operator '-' (line 427)
        result_sub_154910 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 15), '-', subscript_call_result_154905, subscript_call_result_154909)
        
        # Assigning a type to the variable 'stypy_return_type' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'stypy_return_type', result_sub_154910)
        
        # ################# End of 'size(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'size' in the type store
        # Getting the type of 'stypy_return_type' (line 420)
        stypy_return_type_154911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154911)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'size'
        return stypy_return_type_154911


    @norecursion
    def bounds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'bounds'
        module_type_store = module_type_store.open_function_context('bounds', 429, 4, False)
        # Assigning a type to the variable 'self' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.bounds.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.bounds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.bounds.__dict__.__setitem__('stypy_function_name', 'BboxBase.bounds')
        BboxBase.bounds.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.bounds.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.bounds.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.bounds', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'bounds', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'bounds(...)' code ##################

        unicode_154912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, (-1)), 'unicode', u'\n        (property) Returns (:attr:`x0`, :attr:`y0`, :attr:`width`,\n        :attr:`height`).\n        ')
        
        # Assigning a Call to a Tuple (line 435):
        
        # Assigning a Call to a Name:
        
        # Call to flatten(...): (line 435)
        # Processing the call keyword arguments (line 435)
        kwargs_154918 = {}
        
        # Call to get_points(...): (line 435)
        # Processing the call keyword arguments (line 435)
        kwargs_154915 = {}
        # Getting the type of 'self' (line 435)
        self_154913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 25), 'self', False)
        # Obtaining the member 'get_points' of a type (line 435)
        get_points_154914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 25), self_154913, 'get_points')
        # Calling get_points(args, kwargs) (line 435)
        get_points_call_result_154916 = invoke(stypy.reporting.localization.Localization(__file__, 435, 25), get_points_154914, *[], **kwargs_154915)
        
        # Obtaining the member 'flatten' of a type (line 435)
        flatten_154917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 25), get_points_call_result_154916, 'flatten')
        # Calling flatten(args, kwargs) (line 435)
        flatten_call_result_154919 = invoke(stypy.reporting.localization.Localization(__file__, 435, 25), flatten_154917, *[], **kwargs_154918)
        
        # Assigning a type to the variable 'call_assignment_154217' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154217', flatten_call_result_154919)
        
        # Assigning a Call to a Name (line 435):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_154922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 8), 'int')
        # Processing the call keyword arguments
        kwargs_154923 = {}
        # Getting the type of 'call_assignment_154217' (line 435)
        call_assignment_154217_154920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154217', False)
        # Obtaining the member '__getitem__' of a type (line 435)
        getitem___154921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 8), call_assignment_154217_154920, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_154924 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___154921, *[int_154922], **kwargs_154923)
        
        # Assigning a type to the variable 'call_assignment_154218' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154218', getitem___call_result_154924)
        
        # Assigning a Name to a Name (line 435):
        # Getting the type of 'call_assignment_154218' (line 435)
        call_assignment_154218_154925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154218')
        # Assigning a type to the variable 'x0' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'x0', call_assignment_154218_154925)
        
        # Assigning a Call to a Name (line 435):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_154928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 8), 'int')
        # Processing the call keyword arguments
        kwargs_154929 = {}
        # Getting the type of 'call_assignment_154217' (line 435)
        call_assignment_154217_154926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154217', False)
        # Obtaining the member '__getitem__' of a type (line 435)
        getitem___154927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 8), call_assignment_154217_154926, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_154930 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___154927, *[int_154928], **kwargs_154929)
        
        # Assigning a type to the variable 'call_assignment_154219' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154219', getitem___call_result_154930)
        
        # Assigning a Name to a Name (line 435):
        # Getting the type of 'call_assignment_154219' (line 435)
        call_assignment_154219_154931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154219')
        # Assigning a type to the variable 'y0' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 12), 'y0', call_assignment_154219_154931)
        
        # Assigning a Call to a Name (line 435):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_154934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 8), 'int')
        # Processing the call keyword arguments
        kwargs_154935 = {}
        # Getting the type of 'call_assignment_154217' (line 435)
        call_assignment_154217_154932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154217', False)
        # Obtaining the member '__getitem__' of a type (line 435)
        getitem___154933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 8), call_assignment_154217_154932, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_154936 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___154933, *[int_154934], **kwargs_154935)
        
        # Assigning a type to the variable 'call_assignment_154220' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154220', getitem___call_result_154936)
        
        # Assigning a Name to a Name (line 435):
        # Getting the type of 'call_assignment_154220' (line 435)
        call_assignment_154220_154937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154220')
        # Assigning a type to the variable 'x1' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 16), 'x1', call_assignment_154220_154937)
        
        # Assigning a Call to a Name (line 435):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_154940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 8), 'int')
        # Processing the call keyword arguments
        kwargs_154941 = {}
        # Getting the type of 'call_assignment_154217' (line 435)
        call_assignment_154217_154938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154217', False)
        # Obtaining the member '__getitem__' of a type (line 435)
        getitem___154939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 8), call_assignment_154217_154938, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_154942 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___154939, *[int_154940], **kwargs_154941)
        
        # Assigning a type to the variable 'call_assignment_154221' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154221', getitem___call_result_154942)
        
        # Assigning a Name to a Name (line 435):
        # Getting the type of 'call_assignment_154221' (line 435)
        call_assignment_154221_154943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_154221')
        # Assigning a type to the variable 'y1' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 20), 'y1', call_assignment_154221_154943)
        
        # Obtaining an instance of the builtin type 'tuple' (line 436)
        tuple_154944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 436)
        # Adding element type (line 436)
        # Getting the type of 'x0' (line 436)
        x0_154945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 16), 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 436, 16), tuple_154944, x0_154945)
        # Adding element type (line 436)
        # Getting the type of 'y0' (line 436)
        y0_154946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 20), 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 436, 16), tuple_154944, y0_154946)
        # Adding element type (line 436)
        # Getting the type of 'x1' (line 436)
        x1_154947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 24), 'x1')
        # Getting the type of 'x0' (line 436)
        x0_154948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 29), 'x0')
        # Applying the binary operator '-' (line 436)
        result_sub_154949 = python_operator(stypy.reporting.localization.Localization(__file__, 436, 24), '-', x1_154947, x0_154948)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 436, 16), tuple_154944, result_sub_154949)
        # Adding element type (line 436)
        # Getting the type of 'y1' (line 436)
        y1_154950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 33), 'y1')
        # Getting the type of 'y0' (line 436)
        y0_154951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 38), 'y0')
        # Applying the binary operator '-' (line 436)
        result_sub_154952 = python_operator(stypy.reporting.localization.Localization(__file__, 436, 33), '-', y1_154950, y0_154951)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 436, 16), tuple_154944, result_sub_154952)
        
        # Assigning a type to the variable 'stypy_return_type' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'stypy_return_type', tuple_154944)
        
        # ################# End of 'bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 429)
        stypy_return_type_154953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154953)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'bounds'
        return stypy_return_type_154953


    @norecursion
    def extents(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'extents'
        module_type_store = module_type_store.open_function_context('extents', 438, 4, False)
        # Assigning a type to the variable 'self' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.extents.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.extents.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.extents.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.extents.__dict__.__setitem__('stypy_function_name', 'BboxBase.extents')
        BboxBase.extents.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.extents.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.extents.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.extents.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.extents.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.extents.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.extents.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.extents', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'extents', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'extents(...)' code ##################

        unicode_154954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, (-1)), 'unicode', u'\n        (property) Returns (:attr:`x0`, :attr:`y0`, :attr:`x1`,\n        :attr:`y1`).\n        ')
        
        # Call to copy(...): (line 444)
        # Processing the call keyword arguments (line 444)
        kwargs_154963 = {}
        
        # Call to flatten(...): (line 444)
        # Processing the call keyword arguments (line 444)
        kwargs_154960 = {}
        
        # Call to get_points(...): (line 444)
        # Processing the call keyword arguments (line 444)
        kwargs_154957 = {}
        # Getting the type of 'self' (line 444)
        self_154955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 15), 'self', False)
        # Obtaining the member 'get_points' of a type (line 444)
        get_points_154956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 15), self_154955, 'get_points')
        # Calling get_points(args, kwargs) (line 444)
        get_points_call_result_154958 = invoke(stypy.reporting.localization.Localization(__file__, 444, 15), get_points_154956, *[], **kwargs_154957)
        
        # Obtaining the member 'flatten' of a type (line 444)
        flatten_154959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 15), get_points_call_result_154958, 'flatten')
        # Calling flatten(args, kwargs) (line 444)
        flatten_call_result_154961 = invoke(stypy.reporting.localization.Localization(__file__, 444, 15), flatten_154959, *[], **kwargs_154960)
        
        # Obtaining the member 'copy' of a type (line 444)
        copy_154962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 15), flatten_call_result_154961, 'copy')
        # Calling copy(args, kwargs) (line 444)
        copy_call_result_154964 = invoke(stypy.reporting.localization.Localization(__file__, 444, 15), copy_154962, *[], **kwargs_154963)
        
        # Assigning a type to the variable 'stypy_return_type' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'stypy_return_type', copy_call_result_154964)
        
        # ################# End of 'extents(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'extents' in the type store
        # Getting the type of 'stypy_return_type' (line 438)
        stypy_return_type_154965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154965)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'extents'
        return stypy_return_type_154965


    @norecursion
    def get_points(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_points'
        module_type_store = module_type_store.open_function_context('get_points', 446, 4, False)
        # Assigning a type to the variable 'self' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.get_points.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.get_points.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.get_points.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.get_points.__dict__.__setitem__('stypy_function_name', 'BboxBase.get_points')
        BboxBase.get_points.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.get_points.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.get_points.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.get_points.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.get_points.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.get_points.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.get_points.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.get_points', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_points', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_points(...)' code ##################

        # Getting the type of 'NotImplementedError' (line 447)
        NotImplementedError_154966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 447, 8), NotImplementedError_154966, 'raise parameter', BaseException)
        
        # ################# End of 'get_points(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_points' in the type store
        # Getting the type of 'stypy_return_type' (line 446)
        stypy_return_type_154967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154967)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_points'
        return stypy_return_type_154967


    @norecursion
    def containsx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'containsx'
        module_type_store = module_type_store.open_function_context('containsx', 449, 4, False)
        # Assigning a type to the variable 'self' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.containsx.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.containsx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.containsx.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.containsx.__dict__.__setitem__('stypy_function_name', 'BboxBase.containsx')
        BboxBase.containsx.__dict__.__setitem__('stypy_param_names_list', ['x'])
        BboxBase.containsx.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.containsx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.containsx.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.containsx.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.containsx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.containsx.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.containsx', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'containsx', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'containsx(...)' code ##################

        unicode_154968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, (-1)), 'unicode', u'\n        Returns whether `x` is in the closed (:attr:`x0`, :attr:`x1`) interval.\n        ')
        
        # Assigning a Attribute to a Tuple (line 453):
        
        # Assigning a Subscript to a Name (line 453):
        
        # Obtaining the type of the subscript
        int_154969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 453, 8), 'int')
        # Getting the type of 'self' (line 453)
        self_154970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 17), 'self')
        # Obtaining the member 'intervalx' of a type (line 453)
        intervalx_154971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 17), self_154970, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 453)
        getitem___154972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 8), intervalx_154971, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 453)
        subscript_call_result_154973 = invoke(stypy.reporting.localization.Localization(__file__, 453, 8), getitem___154972, int_154969)
        
        # Assigning a type to the variable 'tuple_var_assignment_154222' (line 453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'tuple_var_assignment_154222', subscript_call_result_154973)
        
        # Assigning a Subscript to a Name (line 453):
        
        # Obtaining the type of the subscript
        int_154974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 453, 8), 'int')
        # Getting the type of 'self' (line 453)
        self_154975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 17), 'self')
        # Obtaining the member 'intervalx' of a type (line 453)
        intervalx_154976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 17), self_154975, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 453)
        getitem___154977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 8), intervalx_154976, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 453)
        subscript_call_result_154978 = invoke(stypy.reporting.localization.Localization(__file__, 453, 8), getitem___154977, int_154974)
        
        # Assigning a type to the variable 'tuple_var_assignment_154223' (line 453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'tuple_var_assignment_154223', subscript_call_result_154978)
        
        # Assigning a Name to a Name (line 453):
        # Getting the type of 'tuple_var_assignment_154222' (line 453)
        tuple_var_assignment_154222_154979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'tuple_var_assignment_154222')
        # Assigning a type to the variable 'x0' (line 453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'x0', tuple_var_assignment_154222_154979)
        
        # Assigning a Name to a Name (line 453):
        # Getting the type of 'tuple_var_assignment_154223' (line 453)
        tuple_var_assignment_154223_154980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'tuple_var_assignment_154223')
        # Assigning a type to the variable 'x1' (line 453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 12), 'x1', tuple_var_assignment_154223_154980)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x0' (line 454)
        x0_154981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 15), 'x0')
        # Getting the type of 'x' (line 454)
        x_154982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 21), 'x')
        # Applying the binary operator '<=' (line 454)
        result_le_154983 = python_operator(stypy.reporting.localization.Localization(__file__, 454, 15), '<=', x0_154981, x_154982)
        # Getting the type of 'x1' (line 454)
        x1_154984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 26), 'x1')
        # Applying the binary operator '<=' (line 454)
        result_le_154985 = python_operator(stypy.reporting.localization.Localization(__file__, 454, 15), '<=', x_154982, x1_154984)
        # Applying the binary operator '&' (line 454)
        result_and__154986 = python_operator(stypy.reporting.localization.Localization(__file__, 454, 15), '&', result_le_154983, result_le_154985)
        
        
        # Getting the type of 'x0' (line 454)
        x0_154987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 32), 'x0')
        # Getting the type of 'x' (line 454)
        x_154988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 38), 'x')
        # Applying the binary operator '>=' (line 454)
        result_ge_154989 = python_operator(stypy.reporting.localization.Localization(__file__, 454, 32), '>=', x0_154987, x_154988)
        # Getting the type of 'x1' (line 454)
        x1_154990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 43), 'x1')
        # Applying the binary operator '>=' (line 454)
        result_ge_154991 = python_operator(stypy.reporting.localization.Localization(__file__, 454, 32), '>=', x_154988, x1_154990)
        # Applying the binary operator '&' (line 454)
        result_and__154992 = python_operator(stypy.reporting.localization.Localization(__file__, 454, 32), '&', result_ge_154989, result_ge_154991)
        
        # Applying the binary operator 'or' (line 454)
        result_or_keyword_154993 = python_operator(stypy.reporting.localization.Localization(__file__, 454, 15), 'or', result_and__154986, result_and__154992)
        
        # Assigning a type to the variable 'stypy_return_type' (line 454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 8), 'stypy_return_type', result_or_keyword_154993)
        
        # ################# End of 'containsx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'containsx' in the type store
        # Getting the type of 'stypy_return_type' (line 449)
        stypy_return_type_154994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154994)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'containsx'
        return stypy_return_type_154994


    @norecursion
    def containsy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'containsy'
        module_type_store = module_type_store.open_function_context('containsy', 456, 4, False)
        # Assigning a type to the variable 'self' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.containsy.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.containsy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.containsy.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.containsy.__dict__.__setitem__('stypy_function_name', 'BboxBase.containsy')
        BboxBase.containsy.__dict__.__setitem__('stypy_param_names_list', ['y'])
        BboxBase.containsy.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.containsy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.containsy.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.containsy.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.containsy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.containsy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.containsy', ['y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'containsy', localization, ['y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'containsy(...)' code ##################

        unicode_154995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, (-1)), 'unicode', u'\n        Returns whether `y` is in the closed (:attr:`y0`, :attr:`y1`) interval.\n        ')
        
        # Assigning a Attribute to a Tuple (line 460):
        
        # Assigning a Subscript to a Name (line 460):
        
        # Obtaining the type of the subscript
        int_154996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, 8), 'int')
        # Getting the type of 'self' (line 460)
        self_154997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 17), 'self')
        # Obtaining the member 'intervaly' of a type (line 460)
        intervaly_154998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 17), self_154997, 'intervaly')
        # Obtaining the member '__getitem__' of a type (line 460)
        getitem___154999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 8), intervaly_154998, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 460)
        subscript_call_result_155000 = invoke(stypy.reporting.localization.Localization(__file__, 460, 8), getitem___154999, int_154996)
        
        # Assigning a type to the variable 'tuple_var_assignment_154224' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_var_assignment_154224', subscript_call_result_155000)
        
        # Assigning a Subscript to a Name (line 460):
        
        # Obtaining the type of the subscript
        int_155001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, 8), 'int')
        # Getting the type of 'self' (line 460)
        self_155002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 17), 'self')
        # Obtaining the member 'intervaly' of a type (line 460)
        intervaly_155003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 17), self_155002, 'intervaly')
        # Obtaining the member '__getitem__' of a type (line 460)
        getitem___155004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 8), intervaly_155003, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 460)
        subscript_call_result_155005 = invoke(stypy.reporting.localization.Localization(__file__, 460, 8), getitem___155004, int_155001)
        
        # Assigning a type to the variable 'tuple_var_assignment_154225' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_var_assignment_154225', subscript_call_result_155005)
        
        # Assigning a Name to a Name (line 460):
        # Getting the type of 'tuple_var_assignment_154224' (line 460)
        tuple_var_assignment_154224_155006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_var_assignment_154224')
        # Assigning a type to the variable 'y0' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'y0', tuple_var_assignment_154224_155006)
        
        # Assigning a Name to a Name (line 460):
        # Getting the type of 'tuple_var_assignment_154225' (line 460)
        tuple_var_assignment_154225_155007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_var_assignment_154225')
        # Assigning a type to the variable 'y1' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 12), 'y1', tuple_var_assignment_154225_155007)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'y0' (line 461)
        y0_155008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 15), 'y0')
        # Getting the type of 'y' (line 461)
        y_155009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 21), 'y')
        # Applying the binary operator '<=' (line 461)
        result_le_155010 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 15), '<=', y0_155008, y_155009)
        # Getting the type of 'y1' (line 461)
        y1_155011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 26), 'y1')
        # Applying the binary operator '<=' (line 461)
        result_le_155012 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 15), '<=', y_155009, y1_155011)
        # Applying the binary operator '&' (line 461)
        result_and__155013 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 15), '&', result_le_155010, result_le_155012)
        
        
        # Getting the type of 'y0' (line 461)
        y0_155014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 32), 'y0')
        # Getting the type of 'y' (line 461)
        y_155015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 38), 'y')
        # Applying the binary operator '>=' (line 461)
        result_ge_155016 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 32), '>=', y0_155014, y_155015)
        # Getting the type of 'y1' (line 461)
        y1_155017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 43), 'y1')
        # Applying the binary operator '>=' (line 461)
        result_ge_155018 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 32), '>=', y_155015, y1_155017)
        # Applying the binary operator '&' (line 461)
        result_and__155019 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 32), '&', result_ge_155016, result_ge_155018)
        
        # Applying the binary operator 'or' (line 461)
        result_or_keyword_155020 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 15), 'or', result_and__155013, result_and__155019)
        
        # Assigning a type to the variable 'stypy_return_type' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 8), 'stypy_return_type', result_or_keyword_155020)
        
        # ################# End of 'containsy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'containsy' in the type store
        # Getting the type of 'stypy_return_type' (line 456)
        stypy_return_type_155021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155021)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'containsy'
        return stypy_return_type_155021


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 463, 4, False)
        # Assigning a type to the variable 'self' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.contains.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.contains.__dict__.__setitem__('stypy_function_name', 'BboxBase.contains')
        BboxBase.contains.__dict__.__setitem__('stypy_param_names_list', ['x', 'y'])
        BboxBase.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.contains.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.contains', ['x', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['x', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_155022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, (-1)), 'unicode', u'\n        Returns whether `x, y` is in the bounding box or on its edge.\n        ')
        
        # Evaluating a boolean operation
        
        # Call to containsx(...): (line 467)
        # Processing the call arguments (line 467)
        # Getting the type of 'x' (line 467)
        x_155025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 30), 'x', False)
        # Processing the call keyword arguments (line 467)
        kwargs_155026 = {}
        # Getting the type of 'self' (line 467)
        self_155023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 15), 'self', False)
        # Obtaining the member 'containsx' of a type (line 467)
        containsx_155024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 15), self_155023, 'containsx')
        # Calling containsx(args, kwargs) (line 467)
        containsx_call_result_155027 = invoke(stypy.reporting.localization.Localization(__file__, 467, 15), containsx_155024, *[x_155025], **kwargs_155026)
        
        
        # Call to containsy(...): (line 467)
        # Processing the call arguments (line 467)
        # Getting the type of 'y' (line 467)
        y_155030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 52), 'y', False)
        # Processing the call keyword arguments (line 467)
        kwargs_155031 = {}
        # Getting the type of 'self' (line 467)
        self_155028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 37), 'self', False)
        # Obtaining the member 'containsy' of a type (line 467)
        containsy_155029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 37), self_155028, 'containsy')
        # Calling containsy(args, kwargs) (line 467)
        containsy_call_result_155032 = invoke(stypy.reporting.localization.Localization(__file__, 467, 37), containsy_155029, *[y_155030], **kwargs_155031)
        
        # Applying the binary operator 'and' (line 467)
        result_and_keyword_155033 = python_operator(stypy.reporting.localization.Localization(__file__, 467, 15), 'and', containsx_call_result_155027, containsy_call_result_155032)
        
        # Assigning a type to the variable 'stypy_return_type' (line 467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 8), 'stypy_return_type', result_and_keyword_155033)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 463)
        stypy_return_type_155034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155034)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_155034


    @norecursion
    def overlaps(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'overlaps'
        module_type_store = module_type_store.open_function_context('overlaps', 469, 4, False)
        # Assigning a type to the variable 'self' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.overlaps.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.overlaps.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.overlaps.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.overlaps.__dict__.__setitem__('stypy_function_name', 'BboxBase.overlaps')
        BboxBase.overlaps.__dict__.__setitem__('stypy_param_names_list', ['other'])
        BboxBase.overlaps.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.overlaps.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.overlaps.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.overlaps.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.overlaps.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.overlaps.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.overlaps', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'overlaps', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'overlaps(...)' code ##################

        unicode_155035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, (-1)), 'unicode', u'\n        Returns whether this bounding box overlaps with the other bounding box.\n        ')
        
        # Assigning a Attribute to a Tuple (line 473):
        
        # Assigning a Subscript to a Name (line 473):
        
        # Obtaining the type of the subscript
        int_155036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 8), 'int')
        # Getting the type of 'self' (line 473)
        self_155037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 29), 'self')
        # Obtaining the member 'extents' of a type (line 473)
        extents_155038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 29), self_155037, 'extents')
        # Obtaining the member '__getitem__' of a type (line 473)
        getitem___155039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 8), extents_155038, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 473)
        subscript_call_result_155040 = invoke(stypy.reporting.localization.Localization(__file__, 473, 8), getitem___155039, int_155036)
        
        # Assigning a type to the variable 'tuple_var_assignment_154226' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_154226', subscript_call_result_155040)
        
        # Assigning a Subscript to a Name (line 473):
        
        # Obtaining the type of the subscript
        int_155041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 8), 'int')
        # Getting the type of 'self' (line 473)
        self_155042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 29), 'self')
        # Obtaining the member 'extents' of a type (line 473)
        extents_155043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 29), self_155042, 'extents')
        # Obtaining the member '__getitem__' of a type (line 473)
        getitem___155044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 8), extents_155043, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 473)
        subscript_call_result_155045 = invoke(stypy.reporting.localization.Localization(__file__, 473, 8), getitem___155044, int_155041)
        
        # Assigning a type to the variable 'tuple_var_assignment_154227' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_154227', subscript_call_result_155045)
        
        # Assigning a Subscript to a Name (line 473):
        
        # Obtaining the type of the subscript
        int_155046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 8), 'int')
        # Getting the type of 'self' (line 473)
        self_155047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 29), 'self')
        # Obtaining the member 'extents' of a type (line 473)
        extents_155048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 29), self_155047, 'extents')
        # Obtaining the member '__getitem__' of a type (line 473)
        getitem___155049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 8), extents_155048, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 473)
        subscript_call_result_155050 = invoke(stypy.reporting.localization.Localization(__file__, 473, 8), getitem___155049, int_155046)
        
        # Assigning a type to the variable 'tuple_var_assignment_154228' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_154228', subscript_call_result_155050)
        
        # Assigning a Subscript to a Name (line 473):
        
        # Obtaining the type of the subscript
        int_155051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 8), 'int')
        # Getting the type of 'self' (line 473)
        self_155052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 29), 'self')
        # Obtaining the member 'extents' of a type (line 473)
        extents_155053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 29), self_155052, 'extents')
        # Obtaining the member '__getitem__' of a type (line 473)
        getitem___155054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 8), extents_155053, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 473)
        subscript_call_result_155055 = invoke(stypy.reporting.localization.Localization(__file__, 473, 8), getitem___155054, int_155051)
        
        # Assigning a type to the variable 'tuple_var_assignment_154229' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_154229', subscript_call_result_155055)
        
        # Assigning a Name to a Name (line 473):
        # Getting the type of 'tuple_var_assignment_154226' (line 473)
        tuple_var_assignment_154226_155056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_154226')
        # Assigning a type to the variable 'ax1' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'ax1', tuple_var_assignment_154226_155056)
        
        # Assigning a Name to a Name (line 473):
        # Getting the type of 'tuple_var_assignment_154227' (line 473)
        tuple_var_assignment_154227_155057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_154227')
        # Assigning a type to the variable 'ay1' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 13), 'ay1', tuple_var_assignment_154227_155057)
        
        # Assigning a Name to a Name (line 473):
        # Getting the type of 'tuple_var_assignment_154228' (line 473)
        tuple_var_assignment_154228_155058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_154228')
        # Assigning a type to the variable 'ax2' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 18), 'ax2', tuple_var_assignment_154228_155058)
        
        # Assigning a Name to a Name (line 473):
        # Getting the type of 'tuple_var_assignment_154229' (line 473)
        tuple_var_assignment_154229_155059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_154229')
        # Assigning a type to the variable 'ay2' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 23), 'ay2', tuple_var_assignment_154229_155059)
        
        # Assigning a Attribute to a Tuple (line 474):
        
        # Assigning a Subscript to a Name (line 474):
        
        # Obtaining the type of the subscript
        int_155060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 8), 'int')
        # Getting the type of 'other' (line 474)
        other_155061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 29), 'other')
        # Obtaining the member 'extents' of a type (line 474)
        extents_155062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 29), other_155061, 'extents')
        # Obtaining the member '__getitem__' of a type (line 474)
        getitem___155063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), extents_155062, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 474)
        subscript_call_result_155064 = invoke(stypy.reporting.localization.Localization(__file__, 474, 8), getitem___155063, int_155060)
        
        # Assigning a type to the variable 'tuple_var_assignment_154230' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'tuple_var_assignment_154230', subscript_call_result_155064)
        
        # Assigning a Subscript to a Name (line 474):
        
        # Obtaining the type of the subscript
        int_155065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 8), 'int')
        # Getting the type of 'other' (line 474)
        other_155066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 29), 'other')
        # Obtaining the member 'extents' of a type (line 474)
        extents_155067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 29), other_155066, 'extents')
        # Obtaining the member '__getitem__' of a type (line 474)
        getitem___155068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), extents_155067, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 474)
        subscript_call_result_155069 = invoke(stypy.reporting.localization.Localization(__file__, 474, 8), getitem___155068, int_155065)
        
        # Assigning a type to the variable 'tuple_var_assignment_154231' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'tuple_var_assignment_154231', subscript_call_result_155069)
        
        # Assigning a Subscript to a Name (line 474):
        
        # Obtaining the type of the subscript
        int_155070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 8), 'int')
        # Getting the type of 'other' (line 474)
        other_155071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 29), 'other')
        # Obtaining the member 'extents' of a type (line 474)
        extents_155072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 29), other_155071, 'extents')
        # Obtaining the member '__getitem__' of a type (line 474)
        getitem___155073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), extents_155072, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 474)
        subscript_call_result_155074 = invoke(stypy.reporting.localization.Localization(__file__, 474, 8), getitem___155073, int_155070)
        
        # Assigning a type to the variable 'tuple_var_assignment_154232' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'tuple_var_assignment_154232', subscript_call_result_155074)
        
        # Assigning a Subscript to a Name (line 474):
        
        # Obtaining the type of the subscript
        int_155075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 8), 'int')
        # Getting the type of 'other' (line 474)
        other_155076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 29), 'other')
        # Obtaining the member 'extents' of a type (line 474)
        extents_155077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 29), other_155076, 'extents')
        # Obtaining the member '__getitem__' of a type (line 474)
        getitem___155078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), extents_155077, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 474)
        subscript_call_result_155079 = invoke(stypy.reporting.localization.Localization(__file__, 474, 8), getitem___155078, int_155075)
        
        # Assigning a type to the variable 'tuple_var_assignment_154233' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'tuple_var_assignment_154233', subscript_call_result_155079)
        
        # Assigning a Name to a Name (line 474):
        # Getting the type of 'tuple_var_assignment_154230' (line 474)
        tuple_var_assignment_154230_155080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'tuple_var_assignment_154230')
        # Assigning a type to the variable 'bx1' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'bx1', tuple_var_assignment_154230_155080)
        
        # Assigning a Name to a Name (line 474):
        # Getting the type of 'tuple_var_assignment_154231' (line 474)
        tuple_var_assignment_154231_155081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'tuple_var_assignment_154231')
        # Assigning a type to the variable 'by1' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 13), 'by1', tuple_var_assignment_154231_155081)
        
        # Assigning a Name to a Name (line 474):
        # Getting the type of 'tuple_var_assignment_154232' (line 474)
        tuple_var_assignment_154232_155082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'tuple_var_assignment_154232')
        # Assigning a type to the variable 'bx2' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 18), 'bx2', tuple_var_assignment_154232_155082)
        
        # Assigning a Name to a Name (line 474):
        # Getting the type of 'tuple_var_assignment_154233' (line 474)
        tuple_var_assignment_154233_155083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'tuple_var_assignment_154233')
        # Assigning a type to the variable 'by2' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 23), 'by2', tuple_var_assignment_154233_155083)
        
        
        # Getting the type of 'ax2' (line 475)
        ax2_155084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 11), 'ax2')
        # Getting the type of 'ax1' (line 475)
        ax1_155085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 17), 'ax1')
        # Applying the binary operator '<' (line 475)
        result_lt_155086 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 11), '<', ax2_155084, ax1_155085)
        
        # Testing the type of an if condition (line 475)
        if_condition_155087 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 475, 8), result_lt_155086)
        # Assigning a type to the variable 'if_condition_155087' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'if_condition_155087', if_condition_155087)
        # SSA begins for if statement (line 475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 476):
        
        # Assigning a Name to a Name (line 476):
        # Getting the type of 'ax1' (line 476)
        ax1_155088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 23), 'ax1')
        # Assigning a type to the variable 'tuple_assignment_154234' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 12), 'tuple_assignment_154234', ax1_155088)
        
        # Assigning a Name to a Name (line 476):
        # Getting the type of 'ax2' (line 476)
        ax2_155089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 28), 'ax2')
        # Assigning a type to the variable 'tuple_assignment_154235' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 12), 'tuple_assignment_154235', ax2_155089)
        
        # Assigning a Name to a Name (line 476):
        # Getting the type of 'tuple_assignment_154234' (line 476)
        tuple_assignment_154234_155090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 12), 'tuple_assignment_154234')
        # Assigning a type to the variable 'ax2' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 12), 'ax2', tuple_assignment_154234_155090)
        
        # Assigning a Name to a Name (line 476):
        # Getting the type of 'tuple_assignment_154235' (line 476)
        tuple_assignment_154235_155091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 12), 'tuple_assignment_154235')
        # Assigning a type to the variable 'ax1' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 17), 'ax1', tuple_assignment_154235_155091)
        # SSA join for if statement (line 475)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'ay2' (line 477)
        ay2_155092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 11), 'ay2')
        # Getting the type of 'ay1' (line 477)
        ay1_155093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 17), 'ay1')
        # Applying the binary operator '<' (line 477)
        result_lt_155094 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 11), '<', ay2_155092, ay1_155093)
        
        # Testing the type of an if condition (line 477)
        if_condition_155095 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 477, 8), result_lt_155094)
        # Assigning a type to the variable 'if_condition_155095' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'if_condition_155095', if_condition_155095)
        # SSA begins for if statement (line 477)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 478):
        
        # Assigning a Name to a Name (line 478):
        # Getting the type of 'ay1' (line 478)
        ay1_155096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 23), 'ay1')
        # Assigning a type to the variable 'tuple_assignment_154236' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'tuple_assignment_154236', ay1_155096)
        
        # Assigning a Name to a Name (line 478):
        # Getting the type of 'ay2' (line 478)
        ay2_155097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 28), 'ay2')
        # Assigning a type to the variable 'tuple_assignment_154237' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'tuple_assignment_154237', ay2_155097)
        
        # Assigning a Name to a Name (line 478):
        # Getting the type of 'tuple_assignment_154236' (line 478)
        tuple_assignment_154236_155098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'tuple_assignment_154236')
        # Assigning a type to the variable 'ay2' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'ay2', tuple_assignment_154236_155098)
        
        # Assigning a Name to a Name (line 478):
        # Getting the type of 'tuple_assignment_154237' (line 478)
        tuple_assignment_154237_155099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'tuple_assignment_154237')
        # Assigning a type to the variable 'ay1' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 17), 'ay1', tuple_assignment_154237_155099)
        # SSA join for if statement (line 477)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'bx2' (line 479)
        bx2_155100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 11), 'bx2')
        # Getting the type of 'bx1' (line 479)
        bx1_155101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 17), 'bx1')
        # Applying the binary operator '<' (line 479)
        result_lt_155102 = python_operator(stypy.reporting.localization.Localization(__file__, 479, 11), '<', bx2_155100, bx1_155101)
        
        # Testing the type of an if condition (line 479)
        if_condition_155103 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 479, 8), result_lt_155102)
        # Assigning a type to the variable 'if_condition_155103' (line 479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 8), 'if_condition_155103', if_condition_155103)
        # SSA begins for if statement (line 479)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 480):
        
        # Assigning a Name to a Name (line 480):
        # Getting the type of 'bx1' (line 480)
        bx1_155104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 23), 'bx1')
        # Assigning a type to the variable 'tuple_assignment_154238' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 12), 'tuple_assignment_154238', bx1_155104)
        
        # Assigning a Name to a Name (line 480):
        # Getting the type of 'bx2' (line 480)
        bx2_155105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 28), 'bx2')
        # Assigning a type to the variable 'tuple_assignment_154239' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 12), 'tuple_assignment_154239', bx2_155105)
        
        # Assigning a Name to a Name (line 480):
        # Getting the type of 'tuple_assignment_154238' (line 480)
        tuple_assignment_154238_155106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 12), 'tuple_assignment_154238')
        # Assigning a type to the variable 'bx2' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 12), 'bx2', tuple_assignment_154238_155106)
        
        # Assigning a Name to a Name (line 480):
        # Getting the type of 'tuple_assignment_154239' (line 480)
        tuple_assignment_154239_155107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 12), 'tuple_assignment_154239')
        # Assigning a type to the variable 'bx1' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 17), 'bx1', tuple_assignment_154239_155107)
        # SSA join for if statement (line 479)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'by2' (line 481)
        by2_155108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 11), 'by2')
        # Getting the type of 'by1' (line 481)
        by1_155109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 17), 'by1')
        # Applying the binary operator '<' (line 481)
        result_lt_155110 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 11), '<', by2_155108, by1_155109)
        
        # Testing the type of an if condition (line 481)
        if_condition_155111 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 481, 8), result_lt_155110)
        # Assigning a type to the variable 'if_condition_155111' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 'if_condition_155111', if_condition_155111)
        # SSA begins for if statement (line 481)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 482):
        
        # Assigning a Name to a Name (line 482):
        # Getting the type of 'by1' (line 482)
        by1_155112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 23), 'by1')
        # Assigning a type to the variable 'tuple_assignment_154240' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'tuple_assignment_154240', by1_155112)
        
        # Assigning a Name to a Name (line 482):
        # Getting the type of 'by2' (line 482)
        by2_155113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 28), 'by2')
        # Assigning a type to the variable 'tuple_assignment_154241' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'tuple_assignment_154241', by2_155113)
        
        # Assigning a Name to a Name (line 482):
        # Getting the type of 'tuple_assignment_154240' (line 482)
        tuple_assignment_154240_155114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'tuple_assignment_154240')
        # Assigning a type to the variable 'by2' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'by2', tuple_assignment_154240_155114)
        
        # Assigning a Name to a Name (line 482):
        # Getting the type of 'tuple_assignment_154241' (line 482)
        tuple_assignment_154241_155115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'tuple_assignment_154241')
        # Assigning a type to the variable 'by1' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 17), 'by1', tuple_assignment_154241_155115)
        # SSA join for if statement (line 481)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ax1' (line 483)
        ax1_155116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 15), 'ax1')
        # Getting the type of 'bx2' (line 483)
        bx2_155117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 22), 'bx2')
        # Applying the binary operator '<=' (line 483)
        result_le_155118 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 15), '<=', ax1_155116, bx2_155117)
        
        
        # Getting the type of 'bx1' (line 483)
        bx1_155119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 30), 'bx1')
        # Getting the type of 'ax2' (line 483)
        ax2_155120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 37), 'ax2')
        # Applying the binary operator '<=' (line 483)
        result_le_155121 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 30), '<=', bx1_155119, ax2_155120)
        
        # Applying the binary operator 'and' (line 483)
        result_and_keyword_155122 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 15), 'and', result_le_155118, result_le_155121)
        
        # Getting the type of 'ay1' (line 483)
        ay1_155123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 45), 'ay1')
        # Getting the type of 'by2' (line 483)
        by2_155124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 52), 'by2')
        # Applying the binary operator '<=' (line 483)
        result_le_155125 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 45), '<=', ay1_155123, by2_155124)
        
        # Applying the binary operator 'and' (line 483)
        result_and_keyword_155126 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 15), 'and', result_and_keyword_155122, result_le_155125)
        
        # Getting the type of 'by1' (line 483)
        by1_155127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 60), 'by1')
        # Getting the type of 'ay2' (line 483)
        ay2_155128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 67), 'ay2')
        # Applying the binary operator '<=' (line 483)
        result_le_155129 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 60), '<=', by1_155127, ay2_155128)
        
        # Applying the binary operator 'and' (line 483)
        result_and_keyword_155130 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 15), 'and', result_and_keyword_155126, result_le_155129)
        
        # Assigning a type to the variable 'stypy_return_type' (line 483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'stypy_return_type', result_and_keyword_155130)
        
        # ################# End of 'overlaps(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'overlaps' in the type store
        # Getting the type of 'stypy_return_type' (line 469)
        stypy_return_type_155131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155131)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'overlaps'
        return stypy_return_type_155131


    @norecursion
    def fully_containsx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fully_containsx'
        module_type_store = module_type_store.open_function_context('fully_containsx', 485, 4, False)
        # Assigning a type to the variable 'self' (line 486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_function_name', 'BboxBase.fully_containsx')
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_param_names_list', ['x'])
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.fully_containsx.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.fully_containsx', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fully_containsx', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fully_containsx(...)' code ##################

        unicode_155132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, (-1)), 'unicode', u'\n        Returns whether `x` is in the open (:attr:`x0`, :attr:`x1`) interval.\n        ')
        
        # Assigning a Attribute to a Tuple (line 489):
        
        # Assigning a Subscript to a Name (line 489):
        
        # Obtaining the type of the subscript
        int_155133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 8), 'int')
        # Getting the type of 'self' (line 489)
        self_155134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 17), 'self')
        # Obtaining the member 'intervalx' of a type (line 489)
        intervalx_155135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 17), self_155134, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 489)
        getitem___155136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 8), intervalx_155135, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 489)
        subscript_call_result_155137 = invoke(stypy.reporting.localization.Localization(__file__, 489, 8), getitem___155136, int_155133)
        
        # Assigning a type to the variable 'tuple_var_assignment_154242' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'tuple_var_assignment_154242', subscript_call_result_155137)
        
        # Assigning a Subscript to a Name (line 489):
        
        # Obtaining the type of the subscript
        int_155138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 8), 'int')
        # Getting the type of 'self' (line 489)
        self_155139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 17), 'self')
        # Obtaining the member 'intervalx' of a type (line 489)
        intervalx_155140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 17), self_155139, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 489)
        getitem___155141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 8), intervalx_155140, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 489)
        subscript_call_result_155142 = invoke(stypy.reporting.localization.Localization(__file__, 489, 8), getitem___155141, int_155138)
        
        # Assigning a type to the variable 'tuple_var_assignment_154243' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'tuple_var_assignment_154243', subscript_call_result_155142)
        
        # Assigning a Name to a Name (line 489):
        # Getting the type of 'tuple_var_assignment_154242' (line 489)
        tuple_var_assignment_154242_155143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'tuple_var_assignment_154242')
        # Assigning a type to the variable 'x0' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'x0', tuple_var_assignment_154242_155143)
        
        # Assigning a Name to a Name (line 489):
        # Getting the type of 'tuple_var_assignment_154243' (line 489)
        tuple_var_assignment_154243_155144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'tuple_var_assignment_154243')
        # Assigning a type to the variable 'x1' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 12), 'x1', tuple_var_assignment_154243_155144)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x0' (line 490)
        x0_155145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 15), 'x0')
        # Getting the type of 'x' (line 490)
        x_155146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 20), 'x')
        # Applying the binary operator '<' (line 490)
        result_lt_155147 = python_operator(stypy.reporting.localization.Localization(__file__, 490, 15), '<', x0_155145, x_155146)
        # Getting the type of 'x1' (line 490)
        x1_155148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 24), 'x1')
        # Applying the binary operator '<' (line 490)
        result_lt_155149 = python_operator(stypy.reporting.localization.Localization(__file__, 490, 15), '<', x_155146, x1_155148)
        # Applying the binary operator '&' (line 490)
        result_and__155150 = python_operator(stypy.reporting.localization.Localization(__file__, 490, 15), '&', result_lt_155147, result_lt_155149)
        
        
        # Getting the type of 'x0' (line 490)
        x0_155151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 30), 'x0')
        # Getting the type of 'x' (line 490)
        x_155152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 35), 'x')
        # Applying the binary operator '>' (line 490)
        result_gt_155153 = python_operator(stypy.reporting.localization.Localization(__file__, 490, 30), '>', x0_155151, x_155152)
        # Getting the type of 'x1' (line 490)
        x1_155154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 39), 'x1')
        # Applying the binary operator '>' (line 490)
        result_gt_155155 = python_operator(stypy.reporting.localization.Localization(__file__, 490, 30), '>', x_155152, x1_155154)
        # Applying the binary operator '&' (line 490)
        result_and__155156 = python_operator(stypy.reporting.localization.Localization(__file__, 490, 30), '&', result_gt_155153, result_gt_155155)
        
        # Applying the binary operator 'or' (line 490)
        result_or_keyword_155157 = python_operator(stypy.reporting.localization.Localization(__file__, 490, 15), 'or', result_and__155150, result_and__155156)
        
        # Assigning a type to the variable 'stypy_return_type' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 8), 'stypy_return_type', result_or_keyword_155157)
        
        # ################# End of 'fully_containsx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fully_containsx' in the type store
        # Getting the type of 'stypy_return_type' (line 485)
        stypy_return_type_155158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155158)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fully_containsx'
        return stypy_return_type_155158


    @norecursion
    def fully_containsy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fully_containsy'
        module_type_store = module_type_store.open_function_context('fully_containsy', 492, 4, False)
        # Assigning a type to the variable 'self' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_function_name', 'BboxBase.fully_containsy')
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_param_names_list', ['y'])
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.fully_containsy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.fully_containsy', ['y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fully_containsy', localization, ['y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fully_containsy(...)' code ##################

        unicode_155159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, (-1)), 'unicode', u'\n        Returns whether `y` is in the open (:attr:`y0`, :attr:`y1`) interval.\n        ')
        
        # Assigning a Attribute to a Tuple (line 496):
        
        # Assigning a Subscript to a Name (line 496):
        
        # Obtaining the type of the subscript
        int_155160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 496, 8), 'int')
        # Getting the type of 'self' (line 496)
        self_155161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 17), 'self')
        # Obtaining the member 'intervaly' of a type (line 496)
        intervaly_155162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 17), self_155161, 'intervaly')
        # Obtaining the member '__getitem__' of a type (line 496)
        getitem___155163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 8), intervaly_155162, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 496)
        subscript_call_result_155164 = invoke(stypy.reporting.localization.Localization(__file__, 496, 8), getitem___155163, int_155160)
        
        # Assigning a type to the variable 'tuple_var_assignment_154244' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'tuple_var_assignment_154244', subscript_call_result_155164)
        
        # Assigning a Subscript to a Name (line 496):
        
        # Obtaining the type of the subscript
        int_155165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 496, 8), 'int')
        # Getting the type of 'self' (line 496)
        self_155166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 17), 'self')
        # Obtaining the member 'intervaly' of a type (line 496)
        intervaly_155167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 17), self_155166, 'intervaly')
        # Obtaining the member '__getitem__' of a type (line 496)
        getitem___155168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 8), intervaly_155167, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 496)
        subscript_call_result_155169 = invoke(stypy.reporting.localization.Localization(__file__, 496, 8), getitem___155168, int_155165)
        
        # Assigning a type to the variable 'tuple_var_assignment_154245' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'tuple_var_assignment_154245', subscript_call_result_155169)
        
        # Assigning a Name to a Name (line 496):
        # Getting the type of 'tuple_var_assignment_154244' (line 496)
        tuple_var_assignment_154244_155170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'tuple_var_assignment_154244')
        # Assigning a type to the variable 'y0' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'y0', tuple_var_assignment_154244_155170)
        
        # Assigning a Name to a Name (line 496):
        # Getting the type of 'tuple_var_assignment_154245' (line 496)
        tuple_var_assignment_154245_155171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'tuple_var_assignment_154245')
        # Assigning a type to the variable 'y1' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 12), 'y1', tuple_var_assignment_154245_155171)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'y0' (line 497)
        y0_155172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 15), 'y0')
        # Getting the type of 'y' (line 497)
        y_155173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 20), 'y')
        # Applying the binary operator '<' (line 497)
        result_lt_155174 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 15), '<', y0_155172, y_155173)
        # Getting the type of 'y1' (line 497)
        y1_155175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 24), 'y1')
        # Applying the binary operator '<' (line 497)
        result_lt_155176 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 15), '<', y_155173, y1_155175)
        # Applying the binary operator '&' (line 497)
        result_and__155177 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 15), '&', result_lt_155174, result_lt_155176)
        
        
        # Getting the type of 'y0' (line 497)
        y0_155178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 30), 'y0')
        # Getting the type of 'y' (line 497)
        y_155179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 35), 'y')
        # Applying the binary operator '>' (line 497)
        result_gt_155180 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 30), '>', y0_155178, y_155179)
        # Getting the type of 'y1' (line 497)
        y1_155181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 39), 'y1')
        # Applying the binary operator '>' (line 497)
        result_gt_155182 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 30), '>', y_155179, y1_155181)
        # Applying the binary operator '&' (line 497)
        result_and__155183 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 30), '&', result_gt_155180, result_gt_155182)
        
        # Applying the binary operator 'or' (line 497)
        result_or_keyword_155184 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 15), 'or', result_and__155177, result_and__155183)
        
        # Assigning a type to the variable 'stypy_return_type' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'stypy_return_type', result_or_keyword_155184)
        
        # ################# End of 'fully_containsy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fully_containsy' in the type store
        # Getting the type of 'stypy_return_type' (line 492)
        stypy_return_type_155185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155185)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fully_containsy'
        return stypy_return_type_155185


    @norecursion
    def fully_contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fully_contains'
        module_type_store = module_type_store.open_function_context('fully_contains', 499, 4, False)
        # Assigning a type to the variable 'self' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.fully_contains.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.fully_contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.fully_contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.fully_contains.__dict__.__setitem__('stypy_function_name', 'BboxBase.fully_contains')
        BboxBase.fully_contains.__dict__.__setitem__('stypy_param_names_list', ['x', 'y'])
        BboxBase.fully_contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.fully_contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.fully_contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.fully_contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.fully_contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.fully_contains.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.fully_contains', ['x', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fully_contains', localization, ['x', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fully_contains(...)' code ##################

        unicode_155186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, (-1)), 'unicode', u'\n        Returns whether `x, y` is in the bounding box, but not on its edge.\n        ')
        
        # Evaluating a boolean operation
        
        # Call to fully_containsx(...): (line 503)
        # Processing the call arguments (line 503)
        # Getting the type of 'x' (line 503)
        x_155189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 36), 'x', False)
        # Processing the call keyword arguments (line 503)
        kwargs_155190 = {}
        # Getting the type of 'self' (line 503)
        self_155187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 15), 'self', False)
        # Obtaining the member 'fully_containsx' of a type (line 503)
        fully_containsx_155188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 15), self_155187, 'fully_containsx')
        # Calling fully_containsx(args, kwargs) (line 503)
        fully_containsx_call_result_155191 = invoke(stypy.reporting.localization.Localization(__file__, 503, 15), fully_containsx_155188, *[x_155189], **kwargs_155190)
        
        
        # Call to fully_containsy(...): (line 503)
        # Processing the call arguments (line 503)
        # Getting the type of 'y' (line 503)
        y_155194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 64), 'y', False)
        # Processing the call keyword arguments (line 503)
        kwargs_155195 = {}
        # Getting the type of 'self' (line 503)
        self_155192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 43), 'self', False)
        # Obtaining the member 'fully_containsy' of a type (line 503)
        fully_containsy_155193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 43), self_155192, 'fully_containsy')
        # Calling fully_containsy(args, kwargs) (line 503)
        fully_containsy_call_result_155196 = invoke(stypy.reporting.localization.Localization(__file__, 503, 43), fully_containsy_155193, *[y_155194], **kwargs_155195)
        
        # Applying the binary operator 'and' (line 503)
        result_and_keyword_155197 = python_operator(stypy.reporting.localization.Localization(__file__, 503, 15), 'and', fully_containsx_call_result_155191, fully_containsy_call_result_155196)
        
        # Assigning a type to the variable 'stypy_return_type' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 8), 'stypy_return_type', result_and_keyword_155197)
        
        # ################# End of 'fully_contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fully_contains' in the type store
        # Getting the type of 'stypy_return_type' (line 499)
        stypy_return_type_155198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155198)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fully_contains'
        return stypy_return_type_155198


    @norecursion
    def fully_overlaps(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fully_overlaps'
        module_type_store = module_type_store.open_function_context('fully_overlaps', 505, 4, False)
        # Assigning a type to the variable 'self' (line 506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_function_name', 'BboxBase.fully_overlaps')
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_param_names_list', ['other'])
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.fully_overlaps.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.fully_overlaps', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fully_overlaps', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fully_overlaps(...)' code ##################

        unicode_155199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, (-1)), 'unicode', u'\n        Returns whether this bounding box overlaps with the other bounding box,\n        not including the edges.\n        ')
        
        # Assigning a Attribute to a Tuple (line 510):
        
        # Assigning a Subscript to a Name (line 510):
        
        # Obtaining the type of the subscript
        int_155200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 8), 'int')
        # Getting the type of 'self' (line 510)
        self_155201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 29), 'self')
        # Obtaining the member 'extents' of a type (line 510)
        extents_155202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 29), self_155201, 'extents')
        # Obtaining the member '__getitem__' of a type (line 510)
        getitem___155203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 8), extents_155202, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 510)
        subscript_call_result_155204 = invoke(stypy.reporting.localization.Localization(__file__, 510, 8), getitem___155203, int_155200)
        
        # Assigning a type to the variable 'tuple_var_assignment_154246' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_154246', subscript_call_result_155204)
        
        # Assigning a Subscript to a Name (line 510):
        
        # Obtaining the type of the subscript
        int_155205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 8), 'int')
        # Getting the type of 'self' (line 510)
        self_155206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 29), 'self')
        # Obtaining the member 'extents' of a type (line 510)
        extents_155207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 29), self_155206, 'extents')
        # Obtaining the member '__getitem__' of a type (line 510)
        getitem___155208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 8), extents_155207, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 510)
        subscript_call_result_155209 = invoke(stypy.reporting.localization.Localization(__file__, 510, 8), getitem___155208, int_155205)
        
        # Assigning a type to the variable 'tuple_var_assignment_154247' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_154247', subscript_call_result_155209)
        
        # Assigning a Subscript to a Name (line 510):
        
        # Obtaining the type of the subscript
        int_155210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 8), 'int')
        # Getting the type of 'self' (line 510)
        self_155211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 29), 'self')
        # Obtaining the member 'extents' of a type (line 510)
        extents_155212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 29), self_155211, 'extents')
        # Obtaining the member '__getitem__' of a type (line 510)
        getitem___155213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 8), extents_155212, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 510)
        subscript_call_result_155214 = invoke(stypy.reporting.localization.Localization(__file__, 510, 8), getitem___155213, int_155210)
        
        # Assigning a type to the variable 'tuple_var_assignment_154248' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_154248', subscript_call_result_155214)
        
        # Assigning a Subscript to a Name (line 510):
        
        # Obtaining the type of the subscript
        int_155215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 8), 'int')
        # Getting the type of 'self' (line 510)
        self_155216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 29), 'self')
        # Obtaining the member 'extents' of a type (line 510)
        extents_155217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 29), self_155216, 'extents')
        # Obtaining the member '__getitem__' of a type (line 510)
        getitem___155218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 8), extents_155217, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 510)
        subscript_call_result_155219 = invoke(stypy.reporting.localization.Localization(__file__, 510, 8), getitem___155218, int_155215)
        
        # Assigning a type to the variable 'tuple_var_assignment_154249' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_154249', subscript_call_result_155219)
        
        # Assigning a Name to a Name (line 510):
        # Getting the type of 'tuple_var_assignment_154246' (line 510)
        tuple_var_assignment_154246_155220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_154246')
        # Assigning a type to the variable 'ax1' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'ax1', tuple_var_assignment_154246_155220)
        
        # Assigning a Name to a Name (line 510):
        # Getting the type of 'tuple_var_assignment_154247' (line 510)
        tuple_var_assignment_154247_155221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_154247')
        # Assigning a type to the variable 'ay1' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 13), 'ay1', tuple_var_assignment_154247_155221)
        
        # Assigning a Name to a Name (line 510):
        # Getting the type of 'tuple_var_assignment_154248' (line 510)
        tuple_var_assignment_154248_155222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_154248')
        # Assigning a type to the variable 'ax2' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 18), 'ax2', tuple_var_assignment_154248_155222)
        
        # Assigning a Name to a Name (line 510):
        # Getting the type of 'tuple_var_assignment_154249' (line 510)
        tuple_var_assignment_154249_155223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_154249')
        # Assigning a type to the variable 'ay2' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 23), 'ay2', tuple_var_assignment_154249_155223)
        
        # Assigning a Attribute to a Tuple (line 511):
        
        # Assigning a Subscript to a Name (line 511):
        
        # Obtaining the type of the subscript
        int_155224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 8), 'int')
        # Getting the type of 'other' (line 511)
        other_155225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 29), 'other')
        # Obtaining the member 'extents' of a type (line 511)
        extents_155226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 29), other_155225, 'extents')
        # Obtaining the member '__getitem__' of a type (line 511)
        getitem___155227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), extents_155226, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 511)
        subscript_call_result_155228 = invoke(stypy.reporting.localization.Localization(__file__, 511, 8), getitem___155227, int_155224)
        
        # Assigning a type to the variable 'tuple_var_assignment_154250' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'tuple_var_assignment_154250', subscript_call_result_155228)
        
        # Assigning a Subscript to a Name (line 511):
        
        # Obtaining the type of the subscript
        int_155229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 8), 'int')
        # Getting the type of 'other' (line 511)
        other_155230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 29), 'other')
        # Obtaining the member 'extents' of a type (line 511)
        extents_155231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 29), other_155230, 'extents')
        # Obtaining the member '__getitem__' of a type (line 511)
        getitem___155232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), extents_155231, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 511)
        subscript_call_result_155233 = invoke(stypy.reporting.localization.Localization(__file__, 511, 8), getitem___155232, int_155229)
        
        # Assigning a type to the variable 'tuple_var_assignment_154251' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'tuple_var_assignment_154251', subscript_call_result_155233)
        
        # Assigning a Subscript to a Name (line 511):
        
        # Obtaining the type of the subscript
        int_155234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 8), 'int')
        # Getting the type of 'other' (line 511)
        other_155235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 29), 'other')
        # Obtaining the member 'extents' of a type (line 511)
        extents_155236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 29), other_155235, 'extents')
        # Obtaining the member '__getitem__' of a type (line 511)
        getitem___155237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), extents_155236, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 511)
        subscript_call_result_155238 = invoke(stypy.reporting.localization.Localization(__file__, 511, 8), getitem___155237, int_155234)
        
        # Assigning a type to the variable 'tuple_var_assignment_154252' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'tuple_var_assignment_154252', subscript_call_result_155238)
        
        # Assigning a Subscript to a Name (line 511):
        
        # Obtaining the type of the subscript
        int_155239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 8), 'int')
        # Getting the type of 'other' (line 511)
        other_155240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 29), 'other')
        # Obtaining the member 'extents' of a type (line 511)
        extents_155241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 29), other_155240, 'extents')
        # Obtaining the member '__getitem__' of a type (line 511)
        getitem___155242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), extents_155241, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 511)
        subscript_call_result_155243 = invoke(stypy.reporting.localization.Localization(__file__, 511, 8), getitem___155242, int_155239)
        
        # Assigning a type to the variable 'tuple_var_assignment_154253' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'tuple_var_assignment_154253', subscript_call_result_155243)
        
        # Assigning a Name to a Name (line 511):
        # Getting the type of 'tuple_var_assignment_154250' (line 511)
        tuple_var_assignment_154250_155244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'tuple_var_assignment_154250')
        # Assigning a type to the variable 'bx1' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'bx1', tuple_var_assignment_154250_155244)
        
        # Assigning a Name to a Name (line 511):
        # Getting the type of 'tuple_var_assignment_154251' (line 511)
        tuple_var_assignment_154251_155245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'tuple_var_assignment_154251')
        # Assigning a type to the variable 'by1' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 13), 'by1', tuple_var_assignment_154251_155245)
        
        # Assigning a Name to a Name (line 511):
        # Getting the type of 'tuple_var_assignment_154252' (line 511)
        tuple_var_assignment_154252_155246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'tuple_var_assignment_154252')
        # Assigning a type to the variable 'bx2' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 18), 'bx2', tuple_var_assignment_154252_155246)
        
        # Assigning a Name to a Name (line 511):
        # Getting the type of 'tuple_var_assignment_154253' (line 511)
        tuple_var_assignment_154253_155247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'tuple_var_assignment_154253')
        # Assigning a type to the variable 'by2' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 23), 'by2', tuple_var_assignment_154253_155247)
        
        
        # Getting the type of 'ax2' (line 512)
        ax2_155248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 11), 'ax2')
        # Getting the type of 'ax1' (line 512)
        ax1_155249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 17), 'ax1')
        # Applying the binary operator '<' (line 512)
        result_lt_155250 = python_operator(stypy.reporting.localization.Localization(__file__, 512, 11), '<', ax2_155248, ax1_155249)
        
        # Testing the type of an if condition (line 512)
        if_condition_155251 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 512, 8), result_lt_155250)
        # Assigning a type to the variable 'if_condition_155251' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 8), 'if_condition_155251', if_condition_155251)
        # SSA begins for if statement (line 512)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 513):
        
        # Assigning a Name to a Name (line 513):
        # Getting the type of 'ax1' (line 513)
        ax1_155252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 23), 'ax1')
        # Assigning a type to the variable 'tuple_assignment_154254' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 12), 'tuple_assignment_154254', ax1_155252)
        
        # Assigning a Name to a Name (line 513):
        # Getting the type of 'ax2' (line 513)
        ax2_155253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 28), 'ax2')
        # Assigning a type to the variable 'tuple_assignment_154255' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 12), 'tuple_assignment_154255', ax2_155253)
        
        # Assigning a Name to a Name (line 513):
        # Getting the type of 'tuple_assignment_154254' (line 513)
        tuple_assignment_154254_155254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 12), 'tuple_assignment_154254')
        # Assigning a type to the variable 'ax2' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 12), 'ax2', tuple_assignment_154254_155254)
        
        # Assigning a Name to a Name (line 513):
        # Getting the type of 'tuple_assignment_154255' (line 513)
        tuple_assignment_154255_155255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 12), 'tuple_assignment_154255')
        # Assigning a type to the variable 'ax1' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 17), 'ax1', tuple_assignment_154255_155255)
        # SSA join for if statement (line 512)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'ay2' (line 514)
        ay2_155256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 11), 'ay2')
        # Getting the type of 'ay1' (line 514)
        ay1_155257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 17), 'ay1')
        # Applying the binary operator '<' (line 514)
        result_lt_155258 = python_operator(stypy.reporting.localization.Localization(__file__, 514, 11), '<', ay2_155256, ay1_155257)
        
        # Testing the type of an if condition (line 514)
        if_condition_155259 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 514, 8), result_lt_155258)
        # Assigning a type to the variable 'if_condition_155259' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'if_condition_155259', if_condition_155259)
        # SSA begins for if statement (line 514)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 515):
        
        # Assigning a Name to a Name (line 515):
        # Getting the type of 'ay1' (line 515)
        ay1_155260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 23), 'ay1')
        # Assigning a type to the variable 'tuple_assignment_154256' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'tuple_assignment_154256', ay1_155260)
        
        # Assigning a Name to a Name (line 515):
        # Getting the type of 'ay2' (line 515)
        ay2_155261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 28), 'ay2')
        # Assigning a type to the variable 'tuple_assignment_154257' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'tuple_assignment_154257', ay2_155261)
        
        # Assigning a Name to a Name (line 515):
        # Getting the type of 'tuple_assignment_154256' (line 515)
        tuple_assignment_154256_155262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'tuple_assignment_154256')
        # Assigning a type to the variable 'ay2' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'ay2', tuple_assignment_154256_155262)
        
        # Assigning a Name to a Name (line 515):
        # Getting the type of 'tuple_assignment_154257' (line 515)
        tuple_assignment_154257_155263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'tuple_assignment_154257')
        # Assigning a type to the variable 'ay1' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 17), 'ay1', tuple_assignment_154257_155263)
        # SSA join for if statement (line 514)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'bx2' (line 516)
        bx2_155264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 11), 'bx2')
        # Getting the type of 'bx1' (line 516)
        bx1_155265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 17), 'bx1')
        # Applying the binary operator '<' (line 516)
        result_lt_155266 = python_operator(stypy.reporting.localization.Localization(__file__, 516, 11), '<', bx2_155264, bx1_155265)
        
        # Testing the type of an if condition (line 516)
        if_condition_155267 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 516, 8), result_lt_155266)
        # Assigning a type to the variable 'if_condition_155267' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 8), 'if_condition_155267', if_condition_155267)
        # SSA begins for if statement (line 516)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 517):
        
        # Assigning a Name to a Name (line 517):
        # Getting the type of 'bx1' (line 517)
        bx1_155268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 23), 'bx1')
        # Assigning a type to the variable 'tuple_assignment_154258' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'tuple_assignment_154258', bx1_155268)
        
        # Assigning a Name to a Name (line 517):
        # Getting the type of 'bx2' (line 517)
        bx2_155269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 28), 'bx2')
        # Assigning a type to the variable 'tuple_assignment_154259' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'tuple_assignment_154259', bx2_155269)
        
        # Assigning a Name to a Name (line 517):
        # Getting the type of 'tuple_assignment_154258' (line 517)
        tuple_assignment_154258_155270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'tuple_assignment_154258')
        # Assigning a type to the variable 'bx2' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'bx2', tuple_assignment_154258_155270)
        
        # Assigning a Name to a Name (line 517):
        # Getting the type of 'tuple_assignment_154259' (line 517)
        tuple_assignment_154259_155271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'tuple_assignment_154259')
        # Assigning a type to the variable 'bx1' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 17), 'bx1', tuple_assignment_154259_155271)
        # SSA join for if statement (line 516)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'by2' (line 518)
        by2_155272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 11), 'by2')
        # Getting the type of 'by1' (line 518)
        by1_155273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 17), 'by1')
        # Applying the binary operator '<' (line 518)
        result_lt_155274 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 11), '<', by2_155272, by1_155273)
        
        # Testing the type of an if condition (line 518)
        if_condition_155275 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 518, 8), result_lt_155274)
        # Assigning a type to the variable 'if_condition_155275' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 8), 'if_condition_155275', if_condition_155275)
        # SSA begins for if statement (line 518)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 519):
        
        # Assigning a Name to a Name (line 519):
        # Getting the type of 'by1' (line 519)
        by1_155276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 23), 'by1')
        # Assigning a type to the variable 'tuple_assignment_154260' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'tuple_assignment_154260', by1_155276)
        
        # Assigning a Name to a Name (line 519):
        # Getting the type of 'by2' (line 519)
        by2_155277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 28), 'by2')
        # Assigning a type to the variable 'tuple_assignment_154261' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'tuple_assignment_154261', by2_155277)
        
        # Assigning a Name to a Name (line 519):
        # Getting the type of 'tuple_assignment_154260' (line 519)
        tuple_assignment_154260_155278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'tuple_assignment_154260')
        # Assigning a type to the variable 'by2' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'by2', tuple_assignment_154260_155278)
        
        # Assigning a Name to a Name (line 519):
        # Getting the type of 'tuple_assignment_154261' (line 519)
        tuple_assignment_154261_155279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'tuple_assignment_154261')
        # Assigning a type to the variable 'by1' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 17), 'by1', tuple_assignment_154261_155279)
        # SSA join for if statement (line 518)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ax1' (line 520)
        ax1_155280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 15), 'ax1')
        # Getting the type of 'bx2' (line 520)
        bx2_155281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 21), 'bx2')
        # Applying the binary operator '<' (line 520)
        result_lt_155282 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 15), '<', ax1_155280, bx2_155281)
        
        
        # Getting the type of 'bx1' (line 520)
        bx1_155283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 29), 'bx1')
        # Getting the type of 'ax2' (line 520)
        ax2_155284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 35), 'ax2')
        # Applying the binary operator '<' (line 520)
        result_lt_155285 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 29), '<', bx1_155283, ax2_155284)
        
        # Applying the binary operator 'and' (line 520)
        result_and_keyword_155286 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 15), 'and', result_lt_155282, result_lt_155285)
        
        # Getting the type of 'ay1' (line 520)
        ay1_155287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 43), 'ay1')
        # Getting the type of 'by2' (line 520)
        by2_155288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 49), 'by2')
        # Applying the binary operator '<' (line 520)
        result_lt_155289 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 43), '<', ay1_155287, by2_155288)
        
        # Applying the binary operator 'and' (line 520)
        result_and_keyword_155290 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 15), 'and', result_and_keyword_155286, result_lt_155289)
        
        # Getting the type of 'by1' (line 520)
        by1_155291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 57), 'by1')
        # Getting the type of 'ay2' (line 520)
        ay2_155292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 63), 'ay2')
        # Applying the binary operator '<' (line 520)
        result_lt_155293 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 57), '<', by1_155291, ay2_155292)
        
        # Applying the binary operator 'and' (line 520)
        result_and_keyword_155294 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 15), 'and', result_and_keyword_155290, result_lt_155293)
        
        # Assigning a type to the variable 'stypy_return_type' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 8), 'stypy_return_type', result_and_keyword_155294)
        
        # ################# End of 'fully_overlaps(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fully_overlaps' in the type store
        # Getting the type of 'stypy_return_type' (line 505)
        stypy_return_type_155295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155295)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fully_overlaps'
        return stypy_return_type_155295


    @norecursion
    def transformed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transformed'
        module_type_store = module_type_store.open_function_context('transformed', 522, 4, False)
        # Assigning a type to the variable 'self' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.transformed.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.transformed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.transformed.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.transformed.__dict__.__setitem__('stypy_function_name', 'BboxBase.transformed')
        BboxBase.transformed.__dict__.__setitem__('stypy_param_names_list', ['transform'])
        BboxBase.transformed.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.transformed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.transformed.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.transformed.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.transformed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.transformed.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.transformed', ['transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transformed', localization, ['transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transformed(...)' code ##################

        unicode_155296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, (-1)), 'unicode', u'\n        Return a new :class:`Bbox` object, statically transformed by\n        the given transform.\n        ')
        
        # Assigning a Call to a Name (line 527):
        
        # Assigning a Call to a Name (line 527):
        
        # Call to get_points(...): (line 527)
        # Processing the call keyword arguments (line 527)
        kwargs_155299 = {}
        # Getting the type of 'self' (line 527)
        self_155297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 14), 'self', False)
        # Obtaining the member 'get_points' of a type (line 527)
        get_points_155298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 14), self_155297, 'get_points')
        # Calling get_points(args, kwargs) (line 527)
        get_points_call_result_155300 = invoke(stypy.reporting.localization.Localization(__file__, 527, 14), get_points_155298, *[], **kwargs_155299)
        
        # Assigning a type to the variable 'pts' (line 527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 8), 'pts', get_points_call_result_155300)
        
        # Assigning a Call to a Tuple (line 528):
        
        # Assigning a Call to a Name:
        
        # Call to transform(...): (line 528)
        # Processing the call arguments (line 528)
        
        # Call to array(...): (line 528)
        # Processing the call arguments (line 528)
        
        # Obtaining an instance of the builtin type 'list' (line 528)
        list_155305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 50), 'list')
        # Adding type elements to the builtin type 'list' instance (line 528)
        # Adding element type (line 528)
        
        # Obtaining the type of the subscript
        int_155306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 55), 'int')
        # Getting the type of 'pts' (line 528)
        pts_155307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 51), 'pts', False)
        # Obtaining the member '__getitem__' of a type (line 528)
        getitem___155308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 51), pts_155307, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 528)
        subscript_call_result_155309 = invoke(stypy.reporting.localization.Localization(__file__, 528, 51), getitem___155308, int_155306)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 528, 50), list_155305, subscript_call_result_155309)
        # Adding element type (line 528)
        
        # Obtaining an instance of the builtin type 'list' (line 529)
        list_155310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 529)
        # Adding element type (line 529)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 529)
        tuple_155311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 529)
        # Adding element type (line 529)
        int_155312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 17), tuple_155311, int_155312)
        # Adding element type (line 529)
        int_155313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 17), tuple_155311, int_155313)
        
        # Getting the type of 'pts' (line 529)
        pts_155314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 13), 'pts', False)
        # Obtaining the member '__getitem__' of a type (line 529)
        getitem___155315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 13), pts_155314, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 529)
        subscript_call_result_155316 = invoke(stypy.reporting.localization.Localization(__file__, 529, 13), getitem___155315, tuple_155311)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 12), list_155310, subscript_call_result_155316)
        # Adding element type (line 529)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 529)
        tuple_155317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 529)
        # Adding element type (line 529)
        int_155318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 28), tuple_155317, int_155318)
        # Adding element type (line 529)
        int_155319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 28), tuple_155317, int_155319)
        
        # Getting the type of 'pts' (line 529)
        pts_155320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 24), 'pts', False)
        # Obtaining the member '__getitem__' of a type (line 529)
        getitem___155321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 24), pts_155320, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 529)
        subscript_call_result_155322 = invoke(stypy.reporting.localization.Localization(__file__, 529, 24), getitem___155321, tuple_155317)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 12), list_155310, subscript_call_result_155322)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 528, 50), list_155305, list_155310)
        # Adding element type (line 528)
        
        # Obtaining an instance of the builtin type 'list' (line 529)
        list_155323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 529)
        # Adding element type (line 529)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 529)
        tuple_155324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 529)
        # Adding element type (line 529)
        int_155325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 41), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 41), tuple_155324, int_155325)
        # Adding element type (line 529)
        int_155326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 44), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 41), tuple_155324, int_155326)
        
        # Getting the type of 'pts' (line 529)
        pts_155327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 37), 'pts', False)
        # Obtaining the member '__getitem__' of a type (line 529)
        getitem___155328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 37), pts_155327, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 529)
        subscript_call_result_155329 = invoke(stypy.reporting.localization.Localization(__file__, 529, 37), getitem___155328, tuple_155324)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 36), list_155323, subscript_call_result_155329)
        # Adding element type (line 529)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 529)
        tuple_155330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 52), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 529)
        # Adding element type (line 529)
        int_155331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 52), tuple_155330, int_155331)
        # Adding element type (line 529)
        int_155332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 52), tuple_155330, int_155332)
        
        # Getting the type of 'pts' (line 529)
        pts_155333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 48), 'pts', False)
        # Obtaining the member '__getitem__' of a type (line 529)
        getitem___155334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 48), pts_155333, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 529)
        subscript_call_result_155335 = invoke(stypy.reporting.localization.Localization(__file__, 529, 48), getitem___155334, tuple_155330)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 36), list_155323, subscript_call_result_155335)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 528, 50), list_155305, list_155323)
        
        # Processing the call keyword arguments (line 528)
        kwargs_155336 = {}
        # Getting the type of 'np' (line 528)
        np_155303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 41), 'np', False)
        # Obtaining the member 'array' of a type (line 528)
        array_155304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 41), np_155303, 'array')
        # Calling array(args, kwargs) (line 528)
        array_call_result_155337 = invoke(stypy.reporting.localization.Localization(__file__, 528, 41), array_155304, *[list_155305], **kwargs_155336)
        
        # Processing the call keyword arguments (line 528)
        kwargs_155338 = {}
        # Getting the type of 'transform' (line 528)
        transform_155301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 21), 'transform', False)
        # Obtaining the member 'transform' of a type (line 528)
        transform_155302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 21), transform_155301, 'transform')
        # Calling transform(args, kwargs) (line 528)
        transform_call_result_155339 = invoke(stypy.reporting.localization.Localization(__file__, 528, 21), transform_155302, *[array_call_result_155337], **kwargs_155338)
        
        # Assigning a type to the variable 'call_assignment_154262' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'call_assignment_154262', transform_call_result_155339)
        
        # Assigning a Call to a Name (line 528):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_155342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 8), 'int')
        # Processing the call keyword arguments
        kwargs_155343 = {}
        # Getting the type of 'call_assignment_154262' (line 528)
        call_assignment_154262_155340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'call_assignment_154262', False)
        # Obtaining the member '__getitem__' of a type (line 528)
        getitem___155341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 8), call_assignment_154262_155340, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_155344 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___155341, *[int_155342], **kwargs_155343)
        
        # Assigning a type to the variable 'call_assignment_154263' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'call_assignment_154263', getitem___call_result_155344)
        
        # Assigning a Name to a Name (line 528):
        # Getting the type of 'call_assignment_154263' (line 528)
        call_assignment_154263_155345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'call_assignment_154263')
        # Assigning a type to the variable 'll' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'll', call_assignment_154263_155345)
        
        # Assigning a Call to a Name (line 528):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_155348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 8), 'int')
        # Processing the call keyword arguments
        kwargs_155349 = {}
        # Getting the type of 'call_assignment_154262' (line 528)
        call_assignment_154262_155346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'call_assignment_154262', False)
        # Obtaining the member '__getitem__' of a type (line 528)
        getitem___155347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 8), call_assignment_154262_155346, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_155350 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___155347, *[int_155348], **kwargs_155349)
        
        # Assigning a type to the variable 'call_assignment_154264' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'call_assignment_154264', getitem___call_result_155350)
        
        # Assigning a Name to a Name (line 528):
        # Getting the type of 'call_assignment_154264' (line 528)
        call_assignment_154264_155351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'call_assignment_154264')
        # Assigning a type to the variable 'ul' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 12), 'ul', call_assignment_154264_155351)
        
        # Assigning a Call to a Name (line 528):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_155354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 8), 'int')
        # Processing the call keyword arguments
        kwargs_155355 = {}
        # Getting the type of 'call_assignment_154262' (line 528)
        call_assignment_154262_155352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'call_assignment_154262', False)
        # Obtaining the member '__getitem__' of a type (line 528)
        getitem___155353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 8), call_assignment_154262_155352, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_155356 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___155353, *[int_155354], **kwargs_155355)
        
        # Assigning a type to the variable 'call_assignment_154265' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'call_assignment_154265', getitem___call_result_155356)
        
        # Assigning a Name to a Name (line 528):
        # Getting the type of 'call_assignment_154265' (line 528)
        call_assignment_154265_155357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'call_assignment_154265')
        # Assigning a type to the variable 'lr' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 16), 'lr', call_assignment_154265_155357)
        
        # Call to Bbox(...): (line 530)
        # Processing the call arguments (line 530)
        
        # Obtaining an instance of the builtin type 'list' (line 530)
        list_155359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 530)
        # Adding element type (line 530)
        # Getting the type of 'll' (line 530)
        ll_155360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 21), 'll', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 530, 20), list_155359, ll_155360)
        # Adding element type (line 530)
        
        # Obtaining an instance of the builtin type 'list' (line 530)
        list_155361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 530)
        # Adding element type (line 530)
        
        # Obtaining the type of the subscript
        int_155362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 29), 'int')
        # Getting the type of 'lr' (line 530)
        lr_155363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 26), 'lr', False)
        # Obtaining the member '__getitem__' of a type (line 530)
        getitem___155364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 26), lr_155363, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 530)
        subscript_call_result_155365 = invoke(stypy.reporting.localization.Localization(__file__, 530, 26), getitem___155364, int_155362)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 530, 25), list_155361, subscript_call_result_155365)
        # Adding element type (line 530)
        
        # Obtaining the type of the subscript
        int_155366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 36), 'int')
        # Getting the type of 'ul' (line 530)
        ul_155367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 33), 'ul', False)
        # Obtaining the member '__getitem__' of a type (line 530)
        getitem___155368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 33), ul_155367, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 530)
        subscript_call_result_155369 = invoke(stypy.reporting.localization.Localization(__file__, 530, 33), getitem___155368, int_155366)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 530, 25), list_155361, subscript_call_result_155369)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 530, 20), list_155359, list_155361)
        
        # Processing the call keyword arguments (line 530)
        kwargs_155370 = {}
        # Getting the type of 'Bbox' (line 530)
        Bbox_155358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 530)
        Bbox_call_result_155371 = invoke(stypy.reporting.localization.Localization(__file__, 530, 15), Bbox_155358, *[list_155359], **kwargs_155370)
        
        # Assigning a type to the variable 'stypy_return_type' (line 530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'stypy_return_type', Bbox_call_result_155371)
        
        # ################# End of 'transformed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transformed' in the type store
        # Getting the type of 'stypy_return_type' (line 522)
        stypy_return_type_155372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155372)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transformed'
        return stypy_return_type_155372


    @norecursion
    def inverse_transformed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverse_transformed'
        module_type_store = module_type_store.open_function_context('inverse_transformed', 532, 4, False)
        # Assigning a type to the variable 'self' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_function_name', 'BboxBase.inverse_transformed')
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_param_names_list', ['transform'])
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.inverse_transformed.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.inverse_transformed', ['transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverse_transformed', localization, ['transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverse_transformed(...)' code ##################

        unicode_155373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, (-1)), 'unicode', u'\n        Return a new :class:`Bbox` object, statically transformed by\n        the inverse of the given transform.\n        ')
        
        # Call to transformed(...): (line 537)
        # Processing the call arguments (line 537)
        
        # Call to inverted(...): (line 537)
        # Processing the call keyword arguments (line 537)
        kwargs_155378 = {}
        # Getting the type of 'transform' (line 537)
        transform_155376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 32), 'transform', False)
        # Obtaining the member 'inverted' of a type (line 537)
        inverted_155377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 32), transform_155376, 'inverted')
        # Calling inverted(args, kwargs) (line 537)
        inverted_call_result_155379 = invoke(stypy.reporting.localization.Localization(__file__, 537, 32), inverted_155377, *[], **kwargs_155378)
        
        # Processing the call keyword arguments (line 537)
        kwargs_155380 = {}
        # Getting the type of 'self' (line 537)
        self_155374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 15), 'self', False)
        # Obtaining the member 'transformed' of a type (line 537)
        transformed_155375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 15), self_155374, 'transformed')
        # Calling transformed(args, kwargs) (line 537)
        transformed_call_result_155381 = invoke(stypy.reporting.localization.Localization(__file__, 537, 15), transformed_155375, *[inverted_call_result_155379], **kwargs_155380)
        
        # Assigning a type to the variable 'stypy_return_type' (line 537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 8), 'stypy_return_type', transformed_call_result_155381)
        
        # ################# End of 'inverse_transformed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverse_transformed' in the type store
        # Getting the type of 'stypy_return_type' (line 532)
        stypy_return_type_155382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155382)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverse_transformed'
        return stypy_return_type_155382

    
    # Assigning a Dict to a Name (line 539):

    @norecursion
    def anchored(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 549)
        None_155383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 36), 'None')
        defaults = [None_155383]
        # Create a new context for function 'anchored'
        module_type_store = module_type_store.open_function_context('anchored', 549, 4, False)
        # Assigning a type to the variable 'self' (line 550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.anchored.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.anchored.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.anchored.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.anchored.__dict__.__setitem__('stypy_function_name', 'BboxBase.anchored')
        BboxBase.anchored.__dict__.__setitem__('stypy_param_names_list', ['c', 'container'])
        BboxBase.anchored.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.anchored.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.anchored.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.anchored.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.anchored.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.anchored.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.anchored', ['c', 'container'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'anchored', localization, ['c', 'container'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'anchored(...)' code ##################

        unicode_155384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, (-1)), 'unicode', u"\n        Return a copy of the :class:`Bbox`, shifted to position *c*\n        within a container.\n\n        *c*: may be either:\n\n          * a sequence (*cx*, *cy*) where *cx* and *cy* range from 0\n            to 1, where 0 is left or bottom and 1 is right or top\n\n          * a string:\n            - 'C' for centered\n            - 'S' for bottom-center\n            - 'SE' for bottom-left\n            - 'E' for left\n            - etc.\n\n        Optional argument *container* is the box within which the\n        :class:`Bbox` is positioned; it defaults to the initial\n        :class:`Bbox`.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 570)
        # Getting the type of 'container' (line 570)
        container_155385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 11), 'container')
        # Getting the type of 'None' (line 570)
        None_155386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 24), 'None')
        
        (may_be_155387, more_types_in_union_155388) = may_be_none(container_155385, None_155386)

        if may_be_155387:

            if more_types_in_union_155388:
                # Runtime conditional SSA (line 570)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 571):
            
            # Assigning a Name to a Name (line 571):
            # Getting the type of 'self' (line 571)
            self_155389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 24), 'self')
            # Assigning a type to the variable 'container' (line 571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 12), 'container', self_155389)

            if more_types_in_union_155388:
                # SSA join for if statement (line 570)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Tuple (line 572):
        
        # Assigning a Subscript to a Name (line 572):
        
        # Obtaining the type of the subscript
        int_155390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 8), 'int')
        # Getting the type of 'container' (line 572)
        container_155391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 21), 'container')
        # Obtaining the member 'bounds' of a type (line 572)
        bounds_155392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 21), container_155391, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 572)
        getitem___155393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 8), bounds_155392, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 572)
        subscript_call_result_155394 = invoke(stypy.reporting.localization.Localization(__file__, 572, 8), getitem___155393, int_155390)
        
        # Assigning a type to the variable 'tuple_var_assignment_154266' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'tuple_var_assignment_154266', subscript_call_result_155394)
        
        # Assigning a Subscript to a Name (line 572):
        
        # Obtaining the type of the subscript
        int_155395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 8), 'int')
        # Getting the type of 'container' (line 572)
        container_155396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 21), 'container')
        # Obtaining the member 'bounds' of a type (line 572)
        bounds_155397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 21), container_155396, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 572)
        getitem___155398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 8), bounds_155397, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 572)
        subscript_call_result_155399 = invoke(stypy.reporting.localization.Localization(__file__, 572, 8), getitem___155398, int_155395)
        
        # Assigning a type to the variable 'tuple_var_assignment_154267' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'tuple_var_assignment_154267', subscript_call_result_155399)
        
        # Assigning a Subscript to a Name (line 572):
        
        # Obtaining the type of the subscript
        int_155400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 8), 'int')
        # Getting the type of 'container' (line 572)
        container_155401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 21), 'container')
        # Obtaining the member 'bounds' of a type (line 572)
        bounds_155402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 21), container_155401, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 572)
        getitem___155403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 8), bounds_155402, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 572)
        subscript_call_result_155404 = invoke(stypy.reporting.localization.Localization(__file__, 572, 8), getitem___155403, int_155400)
        
        # Assigning a type to the variable 'tuple_var_assignment_154268' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'tuple_var_assignment_154268', subscript_call_result_155404)
        
        # Assigning a Subscript to a Name (line 572):
        
        # Obtaining the type of the subscript
        int_155405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 8), 'int')
        # Getting the type of 'container' (line 572)
        container_155406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 21), 'container')
        # Obtaining the member 'bounds' of a type (line 572)
        bounds_155407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 21), container_155406, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 572)
        getitem___155408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 8), bounds_155407, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 572)
        subscript_call_result_155409 = invoke(stypy.reporting.localization.Localization(__file__, 572, 8), getitem___155408, int_155405)
        
        # Assigning a type to the variable 'tuple_var_assignment_154269' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'tuple_var_assignment_154269', subscript_call_result_155409)
        
        # Assigning a Name to a Name (line 572):
        # Getting the type of 'tuple_var_assignment_154266' (line 572)
        tuple_var_assignment_154266_155410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'tuple_var_assignment_154266')
        # Assigning a type to the variable 'l' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'l', tuple_var_assignment_154266_155410)
        
        # Assigning a Name to a Name (line 572):
        # Getting the type of 'tuple_var_assignment_154267' (line 572)
        tuple_var_assignment_154267_155411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'tuple_var_assignment_154267')
        # Assigning a type to the variable 'b' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 11), 'b', tuple_var_assignment_154267_155411)
        
        # Assigning a Name to a Name (line 572):
        # Getting the type of 'tuple_var_assignment_154268' (line 572)
        tuple_var_assignment_154268_155412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'tuple_var_assignment_154268')
        # Assigning a type to the variable 'w' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 14), 'w', tuple_var_assignment_154268_155412)
        
        # Assigning a Name to a Name (line 572):
        # Getting the type of 'tuple_var_assignment_154269' (line 572)
        tuple_var_assignment_154269_155413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'tuple_var_assignment_154269')
        # Assigning a type to the variable 'h' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 17), 'h', tuple_var_assignment_154269_155413)
        
        
        # Call to isinstance(...): (line 573)
        # Processing the call arguments (line 573)
        # Getting the type of 'c' (line 573)
        c_155415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 22), 'c', False)
        # Getting the type of 'six' (line 573)
        six_155416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 25), 'six', False)
        # Obtaining the member 'string_types' of a type (line 573)
        string_types_155417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 25), six_155416, 'string_types')
        # Processing the call keyword arguments (line 573)
        kwargs_155418 = {}
        # Getting the type of 'isinstance' (line 573)
        isinstance_155414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 573)
        isinstance_call_result_155419 = invoke(stypy.reporting.localization.Localization(__file__, 573, 11), isinstance_155414, *[c_155415, string_types_155417], **kwargs_155418)
        
        # Testing the type of an if condition (line 573)
        if_condition_155420 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 573, 8), isinstance_call_result_155419)
        # Assigning a type to the variable 'if_condition_155420' (line 573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'if_condition_155420', if_condition_155420)
        # SSA begins for if statement (line 573)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 574):
        
        # Assigning a Subscript to a Name (line 574):
        
        # Obtaining the type of the subscript
        int_155421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 574, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'c' (line 574)
        c_155422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 32), 'c')
        # Getting the type of 'self' (line 574)
        self_155423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 21), 'self')
        # Obtaining the member 'coefs' of a type (line 574)
        coefs_155424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 21), self_155423, 'coefs')
        # Obtaining the member '__getitem__' of a type (line 574)
        getitem___155425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 21), coefs_155424, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 574)
        subscript_call_result_155426 = invoke(stypy.reporting.localization.Localization(__file__, 574, 21), getitem___155425, c_155422)
        
        # Obtaining the member '__getitem__' of a type (line 574)
        getitem___155427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 12), subscript_call_result_155426, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 574)
        subscript_call_result_155428 = invoke(stypy.reporting.localization.Localization(__file__, 574, 12), getitem___155427, int_155421)
        
        # Assigning a type to the variable 'tuple_var_assignment_154270' (line 574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 12), 'tuple_var_assignment_154270', subscript_call_result_155428)
        
        # Assigning a Subscript to a Name (line 574):
        
        # Obtaining the type of the subscript
        int_155429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 574, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'c' (line 574)
        c_155430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 32), 'c')
        # Getting the type of 'self' (line 574)
        self_155431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 21), 'self')
        # Obtaining the member 'coefs' of a type (line 574)
        coefs_155432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 21), self_155431, 'coefs')
        # Obtaining the member '__getitem__' of a type (line 574)
        getitem___155433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 21), coefs_155432, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 574)
        subscript_call_result_155434 = invoke(stypy.reporting.localization.Localization(__file__, 574, 21), getitem___155433, c_155430)
        
        # Obtaining the member '__getitem__' of a type (line 574)
        getitem___155435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 12), subscript_call_result_155434, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 574)
        subscript_call_result_155436 = invoke(stypy.reporting.localization.Localization(__file__, 574, 12), getitem___155435, int_155429)
        
        # Assigning a type to the variable 'tuple_var_assignment_154271' (line 574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 12), 'tuple_var_assignment_154271', subscript_call_result_155436)
        
        # Assigning a Name to a Name (line 574):
        # Getting the type of 'tuple_var_assignment_154270' (line 574)
        tuple_var_assignment_154270_155437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 12), 'tuple_var_assignment_154270')
        # Assigning a type to the variable 'cx' (line 574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 12), 'cx', tuple_var_assignment_154270_155437)
        
        # Assigning a Name to a Name (line 574):
        # Getting the type of 'tuple_var_assignment_154271' (line 574)
        tuple_var_assignment_154271_155438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 12), 'tuple_var_assignment_154271')
        # Assigning a type to the variable 'cy' (line 574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 16), 'cy', tuple_var_assignment_154271_155438)
        # SSA branch for the else part of an if statement (line 573)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 576):
        
        # Assigning a Subscript to a Name (line 576):
        
        # Obtaining the type of the subscript
        int_155439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 12), 'int')
        # Getting the type of 'c' (line 576)
        c_155440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 21), 'c')
        # Obtaining the member '__getitem__' of a type (line 576)
        getitem___155441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 12), c_155440, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 576)
        subscript_call_result_155442 = invoke(stypy.reporting.localization.Localization(__file__, 576, 12), getitem___155441, int_155439)
        
        # Assigning a type to the variable 'tuple_var_assignment_154272' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 12), 'tuple_var_assignment_154272', subscript_call_result_155442)
        
        # Assigning a Subscript to a Name (line 576):
        
        # Obtaining the type of the subscript
        int_155443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 12), 'int')
        # Getting the type of 'c' (line 576)
        c_155444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 21), 'c')
        # Obtaining the member '__getitem__' of a type (line 576)
        getitem___155445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 12), c_155444, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 576)
        subscript_call_result_155446 = invoke(stypy.reporting.localization.Localization(__file__, 576, 12), getitem___155445, int_155443)
        
        # Assigning a type to the variable 'tuple_var_assignment_154273' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 12), 'tuple_var_assignment_154273', subscript_call_result_155446)
        
        # Assigning a Name to a Name (line 576):
        # Getting the type of 'tuple_var_assignment_154272' (line 576)
        tuple_var_assignment_154272_155447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 12), 'tuple_var_assignment_154272')
        # Assigning a type to the variable 'cx' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 12), 'cx', tuple_var_assignment_154272_155447)
        
        # Assigning a Name to a Name (line 576):
        # Getting the type of 'tuple_var_assignment_154273' (line 576)
        tuple_var_assignment_154273_155448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 12), 'tuple_var_assignment_154273')
        # Assigning a type to the variable 'cy' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 16), 'cy', tuple_var_assignment_154273_155448)
        # SSA join for if statement (line 573)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 577):
        
        # Assigning a Subscript to a Name (line 577):
        
        # Obtaining the type of the subscript
        int_155449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 8), 'int')
        # Getting the type of 'self' (line 577)
        self_155450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 21), 'self')
        # Obtaining the member 'bounds' of a type (line 577)
        bounds_155451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 21), self_155450, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___155452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 8), bounds_155451, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_155453 = invoke(stypy.reporting.localization.Localization(__file__, 577, 8), getitem___155452, int_155449)
        
        # Assigning a type to the variable 'tuple_var_assignment_154274' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'tuple_var_assignment_154274', subscript_call_result_155453)
        
        # Assigning a Subscript to a Name (line 577):
        
        # Obtaining the type of the subscript
        int_155454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 8), 'int')
        # Getting the type of 'self' (line 577)
        self_155455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 21), 'self')
        # Obtaining the member 'bounds' of a type (line 577)
        bounds_155456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 21), self_155455, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___155457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 8), bounds_155456, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_155458 = invoke(stypy.reporting.localization.Localization(__file__, 577, 8), getitem___155457, int_155454)
        
        # Assigning a type to the variable 'tuple_var_assignment_154275' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'tuple_var_assignment_154275', subscript_call_result_155458)
        
        # Assigning a Subscript to a Name (line 577):
        
        # Obtaining the type of the subscript
        int_155459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 8), 'int')
        # Getting the type of 'self' (line 577)
        self_155460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 21), 'self')
        # Obtaining the member 'bounds' of a type (line 577)
        bounds_155461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 21), self_155460, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___155462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 8), bounds_155461, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_155463 = invoke(stypy.reporting.localization.Localization(__file__, 577, 8), getitem___155462, int_155459)
        
        # Assigning a type to the variable 'tuple_var_assignment_154276' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'tuple_var_assignment_154276', subscript_call_result_155463)
        
        # Assigning a Subscript to a Name (line 577):
        
        # Obtaining the type of the subscript
        int_155464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 8), 'int')
        # Getting the type of 'self' (line 577)
        self_155465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 21), 'self')
        # Obtaining the member 'bounds' of a type (line 577)
        bounds_155466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 21), self_155465, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___155467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 8), bounds_155466, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_155468 = invoke(stypy.reporting.localization.Localization(__file__, 577, 8), getitem___155467, int_155464)
        
        # Assigning a type to the variable 'tuple_var_assignment_154277' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'tuple_var_assignment_154277', subscript_call_result_155468)
        
        # Assigning a Name to a Name (line 577):
        # Getting the type of 'tuple_var_assignment_154274' (line 577)
        tuple_var_assignment_154274_155469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'tuple_var_assignment_154274')
        # Assigning a type to the variable 'L' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'L', tuple_var_assignment_154274_155469)
        
        # Assigning a Name to a Name (line 577):
        # Getting the type of 'tuple_var_assignment_154275' (line 577)
        tuple_var_assignment_154275_155470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'tuple_var_assignment_154275')
        # Assigning a type to the variable 'B' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 11), 'B', tuple_var_assignment_154275_155470)
        
        # Assigning a Name to a Name (line 577):
        # Getting the type of 'tuple_var_assignment_154276' (line 577)
        tuple_var_assignment_154276_155471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'tuple_var_assignment_154276')
        # Assigning a type to the variable 'W' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 14), 'W', tuple_var_assignment_154276_155471)
        
        # Assigning a Name to a Name (line 577):
        # Getting the type of 'tuple_var_assignment_154277' (line 577)
        tuple_var_assignment_154277_155472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'tuple_var_assignment_154277')
        # Assigning a type to the variable 'H' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 17), 'H', tuple_var_assignment_154277_155472)
        
        # Call to Bbox(...): (line 578)
        # Processing the call arguments (line 578)
        # Getting the type of 'self' (line 578)
        self_155474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 20), 'self', False)
        # Obtaining the member '_points' of a type (line 578)
        _points_155475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 20), self_155474, '_points')
        
        # Obtaining an instance of the builtin type 'list' (line 579)
        list_155476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 579)
        # Adding element type (line 579)
        # Getting the type of 'l' (line 579)
        l_155477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 22), 'l', False)
        # Getting the type of 'cx' (line 579)
        cx_155478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 26), 'cx', False)
        # Getting the type of 'w' (line 579)
        w_155479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 32), 'w', False)
        # Getting the type of 'W' (line 579)
        W_155480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 36), 'W', False)
        # Applying the binary operator '-' (line 579)
        result_sub_155481 = python_operator(stypy.reporting.localization.Localization(__file__, 579, 32), '-', w_155479, W_155480)
        
        # Applying the binary operator '*' (line 579)
        result_mul_155482 = python_operator(stypy.reporting.localization.Localization(__file__, 579, 26), '*', cx_155478, result_sub_155481)
        
        # Applying the binary operator '+' (line 579)
        result_add_155483 = python_operator(stypy.reporting.localization.Localization(__file__, 579, 22), '+', l_155477, result_mul_155482)
        
        # Getting the type of 'L' (line 579)
        L_155484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 42), 'L', False)
        # Applying the binary operator '-' (line 579)
        result_sub_155485 = python_operator(stypy.reporting.localization.Localization(__file__, 579, 21), '-', result_add_155483, L_155484)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 579, 20), list_155476, result_sub_155485)
        # Adding element type (line 579)
        # Getting the type of 'b' (line 580)
        b_155486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 22), 'b', False)
        # Getting the type of 'cy' (line 580)
        cy_155487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 26), 'cy', False)
        # Getting the type of 'h' (line 580)
        h_155488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 32), 'h', False)
        # Getting the type of 'H' (line 580)
        H_155489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 36), 'H', False)
        # Applying the binary operator '-' (line 580)
        result_sub_155490 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 32), '-', h_155488, H_155489)
        
        # Applying the binary operator '*' (line 580)
        result_mul_155491 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 26), '*', cy_155487, result_sub_155490)
        
        # Applying the binary operator '+' (line 580)
        result_add_155492 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 22), '+', b_155486, result_mul_155491)
        
        # Getting the type of 'B' (line 580)
        B_155493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 42), 'B', False)
        # Applying the binary operator '-' (line 580)
        result_sub_155494 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 21), '-', result_add_155492, B_155493)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 579, 20), list_155476, result_sub_155494)
        
        # Applying the binary operator '+' (line 578)
        result_add_155495 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 20), '+', _points_155475, list_155476)
        
        # Processing the call keyword arguments (line 578)
        kwargs_155496 = {}
        # Getting the type of 'Bbox' (line 578)
        Bbox_155473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 578)
        Bbox_call_result_155497 = invoke(stypy.reporting.localization.Localization(__file__, 578, 15), Bbox_155473, *[result_add_155495], **kwargs_155496)
        
        # Assigning a type to the variable 'stypy_return_type' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'stypy_return_type', Bbox_call_result_155497)
        
        # ################# End of 'anchored(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'anchored' in the type store
        # Getting the type of 'stypy_return_type' (line 549)
        stypy_return_type_155498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155498)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'anchored'
        return stypy_return_type_155498


    @norecursion
    def shrunk(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'shrunk'
        module_type_store = module_type_store.open_function_context('shrunk', 582, 4, False)
        # Assigning a type to the variable 'self' (line 583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.shrunk.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.shrunk.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.shrunk.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.shrunk.__dict__.__setitem__('stypy_function_name', 'BboxBase.shrunk')
        BboxBase.shrunk.__dict__.__setitem__('stypy_param_names_list', ['mx', 'my'])
        BboxBase.shrunk.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.shrunk.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.shrunk.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.shrunk.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.shrunk.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.shrunk.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.shrunk', ['mx', 'my'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'shrunk', localization, ['mx', 'my'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'shrunk(...)' code ##################

        unicode_155499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, (-1)), 'unicode', u'\n        Return a copy of the :class:`Bbox`, shrunk by the factor *mx*\n        in the *x* direction and the factor *my* in the *y* direction.\n        The lower left corner of the box remains unchanged.  Normally\n        *mx* and *my* will be less than 1, but this is not enforced.\n        ')
        
        # Assigning a Attribute to a Tuple (line 589):
        
        # Assigning a Subscript to a Name (line 589):
        
        # Obtaining the type of the subscript
        int_155500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 589, 8), 'int')
        # Getting the type of 'self' (line 589)
        self_155501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 15), 'self')
        # Obtaining the member 'size' of a type (line 589)
        size_155502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 15), self_155501, 'size')
        # Obtaining the member '__getitem__' of a type (line 589)
        getitem___155503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 8), size_155502, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 589)
        subscript_call_result_155504 = invoke(stypy.reporting.localization.Localization(__file__, 589, 8), getitem___155503, int_155500)
        
        # Assigning a type to the variable 'tuple_var_assignment_154278' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'tuple_var_assignment_154278', subscript_call_result_155504)
        
        # Assigning a Subscript to a Name (line 589):
        
        # Obtaining the type of the subscript
        int_155505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 589, 8), 'int')
        # Getting the type of 'self' (line 589)
        self_155506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 15), 'self')
        # Obtaining the member 'size' of a type (line 589)
        size_155507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 15), self_155506, 'size')
        # Obtaining the member '__getitem__' of a type (line 589)
        getitem___155508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 8), size_155507, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 589)
        subscript_call_result_155509 = invoke(stypy.reporting.localization.Localization(__file__, 589, 8), getitem___155508, int_155505)
        
        # Assigning a type to the variable 'tuple_var_assignment_154279' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'tuple_var_assignment_154279', subscript_call_result_155509)
        
        # Assigning a Name to a Name (line 589):
        # Getting the type of 'tuple_var_assignment_154278' (line 589)
        tuple_var_assignment_154278_155510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'tuple_var_assignment_154278')
        # Assigning a type to the variable 'w' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'w', tuple_var_assignment_154278_155510)
        
        # Assigning a Name to a Name (line 589):
        # Getting the type of 'tuple_var_assignment_154279' (line 589)
        tuple_var_assignment_154279_155511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'tuple_var_assignment_154279')
        # Assigning a type to the variable 'h' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 11), 'h', tuple_var_assignment_154279_155511)
        
        # Call to Bbox(...): (line 590)
        # Processing the call arguments (line 590)
        
        # Obtaining an instance of the builtin type 'list' (line 590)
        list_155513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 590)
        # Adding element type (line 590)
        
        # Obtaining the type of the subscript
        int_155514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 34), 'int')
        # Getting the type of 'self' (line 590)
        self_155515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 21), 'self', False)
        # Obtaining the member '_points' of a type (line 590)
        _points_155516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 21), self_155515, '_points')
        # Obtaining the member '__getitem__' of a type (line 590)
        getitem___155517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 21), _points_155516, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 590)
        subscript_call_result_155518 = invoke(stypy.reporting.localization.Localization(__file__, 590, 21), getitem___155517, int_155514)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 20), list_155513, subscript_call_result_155518)
        # Adding element type (line 590)
        
        # Obtaining the type of the subscript
        int_155519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 33), 'int')
        # Getting the type of 'self' (line 591)
        self_155520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 20), 'self', False)
        # Obtaining the member '_points' of a type (line 591)
        _points_155521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 20), self_155520, '_points')
        # Obtaining the member '__getitem__' of a type (line 591)
        getitem___155522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 20), _points_155521, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 591)
        subscript_call_result_155523 = invoke(stypy.reporting.localization.Localization(__file__, 591, 20), getitem___155522, int_155519)
        
        
        # Obtaining an instance of the builtin type 'list' (line 591)
        list_155524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 591)
        # Adding element type (line 591)
        # Getting the type of 'mx' (line 591)
        mx_155525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 39), 'mx', False)
        # Getting the type of 'w' (line 591)
        w_155526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 44), 'w', False)
        # Applying the binary operator '*' (line 591)
        result_mul_155527 = python_operator(stypy.reporting.localization.Localization(__file__, 591, 39), '*', mx_155525, w_155526)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 38), list_155524, result_mul_155527)
        # Adding element type (line 591)
        # Getting the type of 'my' (line 591)
        my_155528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 47), 'my', False)
        # Getting the type of 'h' (line 591)
        h_155529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 52), 'h', False)
        # Applying the binary operator '*' (line 591)
        result_mul_155530 = python_operator(stypy.reporting.localization.Localization(__file__, 591, 47), '*', my_155528, h_155529)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 38), list_155524, result_mul_155530)
        
        # Applying the binary operator '+' (line 591)
        result_add_155531 = python_operator(stypy.reporting.localization.Localization(__file__, 591, 20), '+', subscript_call_result_155523, list_155524)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 20), list_155513, result_add_155531)
        
        # Processing the call keyword arguments (line 590)
        kwargs_155532 = {}
        # Getting the type of 'Bbox' (line 590)
        Bbox_155512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 590)
        Bbox_call_result_155533 = invoke(stypy.reporting.localization.Localization(__file__, 590, 15), Bbox_155512, *[list_155513], **kwargs_155532)
        
        # Assigning a type to the variable 'stypy_return_type' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'stypy_return_type', Bbox_call_result_155533)
        
        # ################# End of 'shrunk(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'shrunk' in the type store
        # Getting the type of 'stypy_return_type' (line 582)
        stypy_return_type_155534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155534)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'shrunk'
        return stypy_return_type_155534


    @norecursion
    def shrunk_to_aspect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 593)
        None_155535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 53), 'None')
        float_155536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 70), 'float')
        defaults = [None_155535, float_155536]
        # Create a new context for function 'shrunk_to_aspect'
        module_type_store = module_type_store.open_function_context('shrunk_to_aspect', 593, 4, False)
        # Assigning a type to the variable 'self' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_function_name', 'BboxBase.shrunk_to_aspect')
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_param_names_list', ['box_aspect', 'container', 'fig_aspect'])
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.shrunk_to_aspect.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.shrunk_to_aspect', ['box_aspect', 'container', 'fig_aspect'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'shrunk_to_aspect', localization, ['box_aspect', 'container', 'fig_aspect'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'shrunk_to_aspect(...)' code ##################

        unicode_155537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, (-1)), 'unicode', u'\n        Return a copy of the :class:`Bbox`, shrunk so that it is as\n        large as it can be while having the desired aspect ratio,\n        *box_aspect*.  If the box coordinates are relative---that\n        is, fractions of a larger box such as a figure---then the\n        physical aspect ratio of that figure is specified with\n        *fig_aspect*, so that *box_aspect* can also be given as a\n        ratio of the absolute dimensions, not the relative dimensions.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'box_aspect' (line 603)
        box_aspect_155538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 11), 'box_aspect')
        int_155539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 25), 'int')
        # Applying the binary operator '<=' (line 603)
        result_le_155540 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 11), '<=', box_aspect_155538, int_155539)
        
        
        # Getting the type of 'fig_aspect' (line 603)
        fig_aspect_155541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 30), 'fig_aspect')
        int_155542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 44), 'int')
        # Applying the binary operator '<=' (line 603)
        result_le_155543 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 30), '<=', fig_aspect_155541, int_155542)
        
        # Applying the binary operator 'or' (line 603)
        result_or_keyword_155544 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 11), 'or', result_le_155540, result_le_155543)
        
        # Testing the type of an if condition (line 603)
        if_condition_155545 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 603, 8), result_or_keyword_155544)
        # Assigning a type to the variable 'if_condition_155545' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'if_condition_155545', if_condition_155545)
        # SSA begins for if statement (line 603)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 604)
        # Processing the call arguments (line 604)
        unicode_155547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 29), 'unicode', u"'box_aspect' and 'fig_aspect' must be positive")
        # Processing the call keyword arguments (line 604)
        kwargs_155548 = {}
        # Getting the type of 'ValueError' (line 604)
        ValueError_155546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 604)
        ValueError_call_result_155549 = invoke(stypy.reporting.localization.Localization(__file__, 604, 18), ValueError_155546, *[unicode_155547], **kwargs_155548)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 604, 12), ValueError_call_result_155549, 'raise parameter', BaseException)
        # SSA join for if statement (line 603)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 605)
        # Getting the type of 'container' (line 605)
        container_155550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 11), 'container')
        # Getting the type of 'None' (line 605)
        None_155551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 24), 'None')
        
        (may_be_155552, more_types_in_union_155553) = may_be_none(container_155550, None_155551)

        if may_be_155552:

            if more_types_in_union_155553:
                # Runtime conditional SSA (line 605)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 606):
            
            # Assigning a Name to a Name (line 606):
            # Getting the type of 'self' (line 606)
            self_155554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 24), 'self')
            # Assigning a type to the variable 'container' (line 606)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'container', self_155554)

            if more_types_in_union_155553:
                # SSA join for if statement (line 605)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Tuple (line 607):
        
        # Assigning a Subscript to a Name (line 607):
        
        # Obtaining the type of the subscript
        int_155555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 8), 'int')
        # Getting the type of 'container' (line 607)
        container_155556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 15), 'container')
        # Obtaining the member 'size' of a type (line 607)
        size_155557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 15), container_155556, 'size')
        # Obtaining the member '__getitem__' of a type (line 607)
        getitem___155558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 8), size_155557, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 607)
        subscript_call_result_155559 = invoke(stypy.reporting.localization.Localization(__file__, 607, 8), getitem___155558, int_155555)
        
        # Assigning a type to the variable 'tuple_var_assignment_154280' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'tuple_var_assignment_154280', subscript_call_result_155559)
        
        # Assigning a Subscript to a Name (line 607):
        
        # Obtaining the type of the subscript
        int_155560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 8), 'int')
        # Getting the type of 'container' (line 607)
        container_155561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 15), 'container')
        # Obtaining the member 'size' of a type (line 607)
        size_155562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 15), container_155561, 'size')
        # Obtaining the member '__getitem__' of a type (line 607)
        getitem___155563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 8), size_155562, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 607)
        subscript_call_result_155564 = invoke(stypy.reporting.localization.Localization(__file__, 607, 8), getitem___155563, int_155560)
        
        # Assigning a type to the variable 'tuple_var_assignment_154281' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'tuple_var_assignment_154281', subscript_call_result_155564)
        
        # Assigning a Name to a Name (line 607):
        # Getting the type of 'tuple_var_assignment_154280' (line 607)
        tuple_var_assignment_154280_155565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'tuple_var_assignment_154280')
        # Assigning a type to the variable 'w' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'w', tuple_var_assignment_154280_155565)
        
        # Assigning a Name to a Name (line 607):
        # Getting the type of 'tuple_var_assignment_154281' (line 607)
        tuple_var_assignment_154281_155566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'tuple_var_assignment_154281')
        # Assigning a type to the variable 'h' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 11), 'h', tuple_var_assignment_154281_155566)
        
        # Assigning a BinOp to a Name (line 608):
        
        # Assigning a BinOp to a Name (line 608):
        # Getting the type of 'w' (line 608)
        w_155567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 12), 'w')
        # Getting the type of 'box_aspect' (line 608)
        box_aspect_155568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 16), 'box_aspect')
        # Applying the binary operator '*' (line 608)
        result_mul_155569 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 12), '*', w_155567, box_aspect_155568)
        
        # Getting the type of 'fig_aspect' (line 608)
        fig_aspect_155570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 29), 'fig_aspect')
        # Applying the binary operator 'div' (line 608)
        result_div_155571 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 27), 'div', result_mul_155569, fig_aspect_155570)
        
        # Assigning a type to the variable 'H' (line 608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'H', result_div_155571)
        
        
        # Getting the type of 'H' (line 609)
        H_155572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 11), 'H')
        # Getting the type of 'h' (line 609)
        h_155573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 16), 'h')
        # Applying the binary operator '<=' (line 609)
        result_le_155574 = python_operator(stypy.reporting.localization.Localization(__file__, 609, 11), '<=', H_155572, h_155573)
        
        # Testing the type of an if condition (line 609)
        if_condition_155575 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 609, 8), result_le_155574)
        # Assigning a type to the variable 'if_condition_155575' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 8), 'if_condition_155575', if_condition_155575)
        # SSA begins for if statement (line 609)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 610):
        
        # Assigning a Name to a Name (line 610):
        # Getting the type of 'w' (line 610)
        w_155576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 16), 'w')
        # Assigning a type to the variable 'W' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 12), 'W', w_155576)
        # SSA branch for the else part of an if statement (line 609)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 612):
        
        # Assigning a BinOp to a Name (line 612):
        # Getting the type of 'h' (line 612)
        h_155577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 16), 'h')
        # Getting the type of 'fig_aspect' (line 612)
        fig_aspect_155578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 20), 'fig_aspect')
        # Applying the binary operator '*' (line 612)
        result_mul_155579 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 16), '*', h_155577, fig_aspect_155578)
        
        # Getting the type of 'box_aspect' (line 612)
        box_aspect_155580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 33), 'box_aspect')
        # Applying the binary operator 'div' (line 612)
        result_div_155581 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 31), 'div', result_mul_155579, box_aspect_155580)
        
        # Assigning a type to the variable 'W' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 12), 'W', result_div_155581)
        
        # Assigning a Name to a Name (line 613):
        
        # Assigning a Name to a Name (line 613):
        # Getting the type of 'h' (line 613)
        h_155582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 16), 'h')
        # Assigning a type to the variable 'H' (line 613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'H', h_155582)
        # SSA join for if statement (line 609)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to Bbox(...): (line 614)
        # Processing the call arguments (line 614)
        
        # Obtaining an instance of the builtin type 'list' (line 614)
        list_155584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 614)
        # Adding element type (line 614)
        
        # Obtaining the type of the subscript
        int_155585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 34), 'int')
        # Getting the type of 'self' (line 614)
        self_155586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 21), 'self', False)
        # Obtaining the member '_points' of a type (line 614)
        _points_155587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 21), self_155586, '_points')
        # Obtaining the member '__getitem__' of a type (line 614)
        getitem___155588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 21), _points_155587, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 614)
        subscript_call_result_155589 = invoke(stypy.reporting.localization.Localization(__file__, 614, 21), getitem___155588, int_155585)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 614, 20), list_155584, subscript_call_result_155589)
        # Adding element type (line 614)
        
        # Obtaining the type of the subscript
        int_155590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 34), 'int')
        # Getting the type of 'self' (line 615)
        self_155591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 21), 'self', False)
        # Obtaining the member '_points' of a type (line 615)
        _points_155592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 21), self_155591, '_points')
        # Obtaining the member '__getitem__' of a type (line 615)
        getitem___155593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 21), _points_155592, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 615)
        subscript_call_result_155594 = invoke(stypy.reporting.localization.Localization(__file__, 615, 21), getitem___155593, int_155590)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 615)
        tuple_155595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 615)
        # Adding element type (line 615)
        # Getting the type of 'W' (line 615)
        W_155596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 40), 'W', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 40), tuple_155595, W_155596)
        # Adding element type (line 615)
        # Getting the type of 'H' (line 615)
        H_155597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 43), 'H', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 40), tuple_155595, H_155597)
        
        # Applying the binary operator '+' (line 615)
        result_add_155598 = python_operator(stypy.reporting.localization.Localization(__file__, 615, 21), '+', subscript_call_result_155594, tuple_155595)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 614, 20), list_155584, result_add_155598)
        
        # Processing the call keyword arguments (line 614)
        kwargs_155599 = {}
        # Getting the type of 'Bbox' (line 614)
        Bbox_155583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 614)
        Bbox_call_result_155600 = invoke(stypy.reporting.localization.Localization(__file__, 614, 15), Bbox_155583, *[list_155584], **kwargs_155599)
        
        # Assigning a type to the variable 'stypy_return_type' (line 614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 8), 'stypy_return_type', Bbox_call_result_155600)
        
        # ################# End of 'shrunk_to_aspect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'shrunk_to_aspect' in the type store
        # Getting the type of 'stypy_return_type' (line 593)
        stypy_return_type_155601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155601)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'shrunk_to_aspect'
        return stypy_return_type_155601


    @norecursion
    def splitx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'splitx'
        module_type_store = module_type_store.open_function_context('splitx', 617, 4, False)
        # Assigning a type to the variable 'self' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.splitx.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.splitx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.splitx.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.splitx.__dict__.__setitem__('stypy_function_name', 'BboxBase.splitx')
        BboxBase.splitx.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.splitx.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        BboxBase.splitx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.splitx.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.splitx.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.splitx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.splitx.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.splitx', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'splitx', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'splitx(...)' code ##################

        unicode_155602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, (-1)), 'unicode', u'\n        e.g., ``bbox.splitx(f1, f2, ...)``\n\n        Returns a list of new :class:`Bbox` objects formed by\n        splitting the original one with vertical lines at fractional\n        positions *f1*, *f2*, ...\n        ')
        
        # Assigning a BinOp to a Name (line 625):
        
        # Assigning a BinOp to a Name (line 625):
        
        # Obtaining an instance of the builtin type 'list' (line 625)
        list_155603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 625)
        # Adding element type (line 625)
        int_155604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 14), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 625, 13), list_155603, int_155604)
        
        
        # Call to list(...): (line 625)
        # Processing the call arguments (line 625)
        # Getting the type of 'args' (line 625)
        args_155606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 24), 'args', False)
        # Processing the call keyword arguments (line 625)
        kwargs_155607 = {}
        # Getting the type of 'list' (line 625)
        list_155605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 19), 'list', False)
        # Calling list(args, kwargs) (line 625)
        list_call_result_155608 = invoke(stypy.reporting.localization.Localization(__file__, 625, 19), list_155605, *[args_155606], **kwargs_155607)
        
        # Applying the binary operator '+' (line 625)
        result_add_155609 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 13), '+', list_155603, list_call_result_155608)
        
        
        # Obtaining an instance of the builtin type 'list' (line 625)
        list_155610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 625)
        # Adding element type (line 625)
        int_155611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 625, 32), list_155610, int_155611)
        
        # Applying the binary operator '+' (line 625)
        result_add_155612 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 30), '+', result_add_155609, list_155610)
        
        # Assigning a type to the variable 'xf' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'xf', result_add_155612)
        
        # Assigning a Attribute to a Tuple (line 626):
        
        # Assigning a Subscript to a Name (line 626):
        
        # Obtaining the type of the subscript
        int_155613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 8), 'int')
        # Getting the type of 'self' (line 626)
        self_155614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 25), 'self')
        # Obtaining the member 'extents' of a type (line 626)
        extents_155615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 25), self_155614, 'extents')
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___155616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 8), extents_155615, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_155617 = invoke(stypy.reporting.localization.Localization(__file__, 626, 8), getitem___155616, int_155613)
        
        # Assigning a type to the variable 'tuple_var_assignment_154282' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'tuple_var_assignment_154282', subscript_call_result_155617)
        
        # Assigning a Subscript to a Name (line 626):
        
        # Obtaining the type of the subscript
        int_155618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 8), 'int')
        # Getting the type of 'self' (line 626)
        self_155619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 25), 'self')
        # Obtaining the member 'extents' of a type (line 626)
        extents_155620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 25), self_155619, 'extents')
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___155621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 8), extents_155620, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_155622 = invoke(stypy.reporting.localization.Localization(__file__, 626, 8), getitem___155621, int_155618)
        
        # Assigning a type to the variable 'tuple_var_assignment_154283' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'tuple_var_assignment_154283', subscript_call_result_155622)
        
        # Assigning a Subscript to a Name (line 626):
        
        # Obtaining the type of the subscript
        int_155623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 8), 'int')
        # Getting the type of 'self' (line 626)
        self_155624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 25), 'self')
        # Obtaining the member 'extents' of a type (line 626)
        extents_155625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 25), self_155624, 'extents')
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___155626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 8), extents_155625, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_155627 = invoke(stypy.reporting.localization.Localization(__file__, 626, 8), getitem___155626, int_155623)
        
        # Assigning a type to the variable 'tuple_var_assignment_154284' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'tuple_var_assignment_154284', subscript_call_result_155627)
        
        # Assigning a Subscript to a Name (line 626):
        
        # Obtaining the type of the subscript
        int_155628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 8), 'int')
        # Getting the type of 'self' (line 626)
        self_155629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 25), 'self')
        # Obtaining the member 'extents' of a type (line 626)
        extents_155630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 25), self_155629, 'extents')
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___155631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 8), extents_155630, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_155632 = invoke(stypy.reporting.localization.Localization(__file__, 626, 8), getitem___155631, int_155628)
        
        # Assigning a type to the variable 'tuple_var_assignment_154285' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'tuple_var_assignment_154285', subscript_call_result_155632)
        
        # Assigning a Name to a Name (line 626):
        # Getting the type of 'tuple_var_assignment_154282' (line 626)
        tuple_var_assignment_154282_155633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'tuple_var_assignment_154282')
        # Assigning a type to the variable 'x0' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'x0', tuple_var_assignment_154282_155633)
        
        # Assigning a Name to a Name (line 626):
        # Getting the type of 'tuple_var_assignment_154283' (line 626)
        tuple_var_assignment_154283_155634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'tuple_var_assignment_154283')
        # Assigning a type to the variable 'y0' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'y0', tuple_var_assignment_154283_155634)
        
        # Assigning a Name to a Name (line 626):
        # Getting the type of 'tuple_var_assignment_154284' (line 626)
        tuple_var_assignment_154284_155635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'tuple_var_assignment_154284')
        # Assigning a type to the variable 'x1' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 16), 'x1', tuple_var_assignment_154284_155635)
        
        # Assigning a Name to a Name (line 626):
        # Getting the type of 'tuple_var_assignment_154285' (line 626)
        tuple_var_assignment_154285_155636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'tuple_var_assignment_154285')
        # Assigning a type to the variable 'y1' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 20), 'y1', tuple_var_assignment_154285_155636)
        
        # Assigning a BinOp to a Name (line 627):
        
        # Assigning a BinOp to a Name (line 627):
        # Getting the type of 'x1' (line 627)
        x1_155637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'x1')
        # Getting the type of 'x0' (line 627)
        x0_155638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 17), 'x0')
        # Applying the binary operator '-' (line 627)
        result_sub_155639 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 12), '-', x1_155637, x0_155638)
        
        # Assigning a type to the variable 'w' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 8), 'w', result_sub_155639)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to zip(...): (line 629)
        # Processing the call arguments (line 629)
        
        # Obtaining the type of the subscript
        int_155659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 40), 'int')
        slice_155660 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 629, 36), None, int_155659, None)
        # Getting the type of 'xf' (line 629)
        xf_155661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 36), 'xf', False)
        # Obtaining the member '__getitem__' of a type (line 629)
        getitem___155662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 36), xf_155661, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 629)
        subscript_call_result_155663 = invoke(stypy.reporting.localization.Localization(__file__, 629, 36), getitem___155662, slice_155660)
        
        
        # Obtaining the type of the subscript
        int_155664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 48), 'int')
        slice_155665 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 629, 45), int_155664, None, None)
        # Getting the type of 'xf' (line 629)
        xf_155666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 45), 'xf', False)
        # Obtaining the member '__getitem__' of a type (line 629)
        getitem___155667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 45), xf_155666, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 629)
        subscript_call_result_155668 = invoke(stypy.reporting.localization.Localization(__file__, 629, 45), getitem___155667, slice_155665)
        
        # Processing the call keyword arguments (line 629)
        kwargs_155669 = {}
        # Getting the type of 'zip' (line 629)
        zip_155658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 32), 'zip', False)
        # Calling zip(args, kwargs) (line 629)
        zip_call_result_155670 = invoke(stypy.reporting.localization.Localization(__file__, 629, 32), zip_155658, *[subscript_call_result_155663, subscript_call_result_155668], **kwargs_155669)
        
        comprehension_155671 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 16), zip_call_result_155670)
        # Assigning a type to the variable 'xf0' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 16), 'xf0', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 16), comprehension_155671))
        # Assigning a type to the variable 'xf1' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 16), 'xf1', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 16), comprehension_155671))
        
        # Call to Bbox(...): (line 628)
        # Processing the call arguments (line 628)
        
        # Obtaining an instance of the builtin type 'list' (line 628)
        list_155641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 628)
        # Adding element type (line 628)
        
        # Obtaining an instance of the builtin type 'list' (line 628)
        list_155642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 628)
        # Adding element type (line 628)
        # Getting the type of 'x0' (line 628)
        x0_155643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 23), 'x0', False)
        # Getting the type of 'xf0' (line 628)
        xf0_155644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 28), 'xf0', False)
        # Getting the type of 'w' (line 628)
        w_155645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 34), 'w', False)
        # Applying the binary operator '*' (line 628)
        result_mul_155646 = python_operator(stypy.reporting.localization.Localization(__file__, 628, 28), '*', xf0_155644, w_155645)
        
        # Applying the binary operator '+' (line 628)
        result_add_155647 = python_operator(stypy.reporting.localization.Localization(__file__, 628, 23), '+', x0_155643, result_mul_155646)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 22), list_155642, result_add_155647)
        # Adding element type (line 628)
        # Getting the type of 'y0' (line 628)
        y0_155648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 37), 'y0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 22), list_155642, y0_155648)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 21), list_155641, list_155642)
        # Adding element type (line 628)
        
        # Obtaining an instance of the builtin type 'list' (line 628)
        list_155649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 628)
        # Adding element type (line 628)
        # Getting the type of 'x0' (line 628)
        x0_155650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 43), 'x0', False)
        # Getting the type of 'xf1' (line 628)
        xf1_155651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 48), 'xf1', False)
        # Getting the type of 'w' (line 628)
        w_155652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 54), 'w', False)
        # Applying the binary operator '*' (line 628)
        result_mul_155653 = python_operator(stypy.reporting.localization.Localization(__file__, 628, 48), '*', xf1_155651, w_155652)
        
        # Applying the binary operator '+' (line 628)
        result_add_155654 = python_operator(stypy.reporting.localization.Localization(__file__, 628, 43), '+', x0_155650, result_mul_155653)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 42), list_155649, result_add_155654)
        # Adding element type (line 628)
        # Getting the type of 'y1' (line 628)
        y1_155655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 57), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 42), list_155649, y1_155655)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 21), list_155641, list_155649)
        
        # Processing the call keyword arguments (line 628)
        kwargs_155656 = {}
        # Getting the type of 'Bbox' (line 628)
        Bbox_155640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 16), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 628)
        Bbox_call_result_155657 = invoke(stypy.reporting.localization.Localization(__file__, 628, 16), Bbox_155640, *[list_155641], **kwargs_155656)
        
        list_155672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 628, 16), list_155672, Bbox_call_result_155657)
        # Assigning a type to the variable 'stypy_return_type' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'stypy_return_type', list_155672)
        
        # ################# End of 'splitx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'splitx' in the type store
        # Getting the type of 'stypy_return_type' (line 617)
        stypy_return_type_155673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155673)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'splitx'
        return stypy_return_type_155673


    @norecursion
    def splity(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'splity'
        module_type_store = module_type_store.open_function_context('splity', 631, 4, False)
        # Assigning a type to the variable 'self' (line 632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.splity.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.splity.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.splity.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.splity.__dict__.__setitem__('stypy_function_name', 'BboxBase.splity')
        BboxBase.splity.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.splity.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        BboxBase.splity.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.splity.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.splity.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.splity.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.splity.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.splity', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'splity', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'splity(...)' code ##################

        unicode_155674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, (-1)), 'unicode', u'\n        e.g., ``bbox.splitx(f1, f2, ...)``\n\n        Returns a list of new :class:`Bbox` objects formed by\n        splitting the original one with horizontal lines at fractional\n        positions *f1*, *f2*, ...\n        ')
        
        # Assigning a BinOp to a Name (line 639):
        
        # Assigning a BinOp to a Name (line 639):
        
        # Obtaining an instance of the builtin type 'list' (line 639)
        list_155675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 639)
        # Adding element type (line 639)
        int_155676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 14), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 13), list_155675, int_155676)
        
        
        # Call to list(...): (line 639)
        # Processing the call arguments (line 639)
        # Getting the type of 'args' (line 639)
        args_155678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 24), 'args', False)
        # Processing the call keyword arguments (line 639)
        kwargs_155679 = {}
        # Getting the type of 'list' (line 639)
        list_155677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 19), 'list', False)
        # Calling list(args, kwargs) (line 639)
        list_call_result_155680 = invoke(stypy.reporting.localization.Localization(__file__, 639, 19), list_155677, *[args_155678], **kwargs_155679)
        
        # Applying the binary operator '+' (line 639)
        result_add_155681 = python_operator(stypy.reporting.localization.Localization(__file__, 639, 13), '+', list_155675, list_call_result_155680)
        
        
        # Obtaining an instance of the builtin type 'list' (line 639)
        list_155682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 639)
        # Adding element type (line 639)
        int_155683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 32), list_155682, int_155683)
        
        # Applying the binary operator '+' (line 639)
        result_add_155684 = python_operator(stypy.reporting.localization.Localization(__file__, 639, 30), '+', result_add_155681, list_155682)
        
        # Assigning a type to the variable 'yf' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 8), 'yf', result_add_155684)
        
        # Assigning a Attribute to a Tuple (line 640):
        
        # Assigning a Subscript to a Name (line 640):
        
        # Obtaining the type of the subscript
        int_155685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 8), 'int')
        # Getting the type of 'self' (line 640)
        self_155686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 25), 'self')
        # Obtaining the member 'extents' of a type (line 640)
        extents_155687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 25), self_155686, 'extents')
        # Obtaining the member '__getitem__' of a type (line 640)
        getitem___155688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 8), extents_155687, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 640)
        subscript_call_result_155689 = invoke(stypy.reporting.localization.Localization(__file__, 640, 8), getitem___155688, int_155685)
        
        # Assigning a type to the variable 'tuple_var_assignment_154286' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'tuple_var_assignment_154286', subscript_call_result_155689)
        
        # Assigning a Subscript to a Name (line 640):
        
        # Obtaining the type of the subscript
        int_155690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 8), 'int')
        # Getting the type of 'self' (line 640)
        self_155691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 25), 'self')
        # Obtaining the member 'extents' of a type (line 640)
        extents_155692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 25), self_155691, 'extents')
        # Obtaining the member '__getitem__' of a type (line 640)
        getitem___155693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 8), extents_155692, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 640)
        subscript_call_result_155694 = invoke(stypy.reporting.localization.Localization(__file__, 640, 8), getitem___155693, int_155690)
        
        # Assigning a type to the variable 'tuple_var_assignment_154287' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'tuple_var_assignment_154287', subscript_call_result_155694)
        
        # Assigning a Subscript to a Name (line 640):
        
        # Obtaining the type of the subscript
        int_155695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 8), 'int')
        # Getting the type of 'self' (line 640)
        self_155696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 25), 'self')
        # Obtaining the member 'extents' of a type (line 640)
        extents_155697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 25), self_155696, 'extents')
        # Obtaining the member '__getitem__' of a type (line 640)
        getitem___155698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 8), extents_155697, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 640)
        subscript_call_result_155699 = invoke(stypy.reporting.localization.Localization(__file__, 640, 8), getitem___155698, int_155695)
        
        # Assigning a type to the variable 'tuple_var_assignment_154288' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'tuple_var_assignment_154288', subscript_call_result_155699)
        
        # Assigning a Subscript to a Name (line 640):
        
        # Obtaining the type of the subscript
        int_155700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 8), 'int')
        # Getting the type of 'self' (line 640)
        self_155701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 25), 'self')
        # Obtaining the member 'extents' of a type (line 640)
        extents_155702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 25), self_155701, 'extents')
        # Obtaining the member '__getitem__' of a type (line 640)
        getitem___155703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 8), extents_155702, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 640)
        subscript_call_result_155704 = invoke(stypy.reporting.localization.Localization(__file__, 640, 8), getitem___155703, int_155700)
        
        # Assigning a type to the variable 'tuple_var_assignment_154289' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'tuple_var_assignment_154289', subscript_call_result_155704)
        
        # Assigning a Name to a Name (line 640):
        # Getting the type of 'tuple_var_assignment_154286' (line 640)
        tuple_var_assignment_154286_155705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'tuple_var_assignment_154286')
        # Assigning a type to the variable 'x0' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'x0', tuple_var_assignment_154286_155705)
        
        # Assigning a Name to a Name (line 640):
        # Getting the type of 'tuple_var_assignment_154287' (line 640)
        tuple_var_assignment_154287_155706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'tuple_var_assignment_154287')
        # Assigning a type to the variable 'y0' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 12), 'y0', tuple_var_assignment_154287_155706)
        
        # Assigning a Name to a Name (line 640):
        # Getting the type of 'tuple_var_assignment_154288' (line 640)
        tuple_var_assignment_154288_155707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'tuple_var_assignment_154288')
        # Assigning a type to the variable 'x1' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 16), 'x1', tuple_var_assignment_154288_155707)
        
        # Assigning a Name to a Name (line 640):
        # Getting the type of 'tuple_var_assignment_154289' (line 640)
        tuple_var_assignment_154289_155708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'tuple_var_assignment_154289')
        # Assigning a type to the variable 'y1' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 20), 'y1', tuple_var_assignment_154289_155708)
        
        # Assigning a BinOp to a Name (line 641):
        
        # Assigning a BinOp to a Name (line 641):
        # Getting the type of 'y1' (line 641)
        y1_155709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 12), 'y1')
        # Getting the type of 'y0' (line 641)
        y0_155710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 17), 'y0')
        # Applying the binary operator '-' (line 641)
        result_sub_155711 = python_operator(stypy.reporting.localization.Localization(__file__, 641, 12), '-', y1_155709, y0_155710)
        
        # Assigning a type to the variable 'h' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 8), 'h', result_sub_155711)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to zip(...): (line 643)
        # Processing the call arguments (line 643)
        
        # Obtaining the type of the subscript
        int_155731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 643, 40), 'int')
        slice_155732 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 643, 36), None, int_155731, None)
        # Getting the type of 'yf' (line 643)
        yf_155733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 36), 'yf', False)
        # Obtaining the member '__getitem__' of a type (line 643)
        getitem___155734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 36), yf_155733, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 643)
        subscript_call_result_155735 = invoke(stypy.reporting.localization.Localization(__file__, 643, 36), getitem___155734, slice_155732)
        
        
        # Obtaining the type of the subscript
        int_155736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 643, 48), 'int')
        slice_155737 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 643, 45), int_155736, None, None)
        # Getting the type of 'yf' (line 643)
        yf_155738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 45), 'yf', False)
        # Obtaining the member '__getitem__' of a type (line 643)
        getitem___155739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 45), yf_155738, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 643)
        subscript_call_result_155740 = invoke(stypy.reporting.localization.Localization(__file__, 643, 45), getitem___155739, slice_155737)
        
        # Processing the call keyword arguments (line 643)
        kwargs_155741 = {}
        # Getting the type of 'zip' (line 643)
        zip_155730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 32), 'zip', False)
        # Calling zip(args, kwargs) (line 643)
        zip_call_result_155742 = invoke(stypy.reporting.localization.Localization(__file__, 643, 32), zip_155730, *[subscript_call_result_155735, subscript_call_result_155740], **kwargs_155741)
        
        comprehension_155743 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 16), zip_call_result_155742)
        # Assigning a type to the variable 'yf0' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 16), 'yf0', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 16), comprehension_155743))
        # Assigning a type to the variable 'yf1' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 16), 'yf1', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 16), comprehension_155743))
        
        # Call to Bbox(...): (line 642)
        # Processing the call arguments (line 642)
        
        # Obtaining an instance of the builtin type 'list' (line 642)
        list_155713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 642)
        # Adding element type (line 642)
        
        # Obtaining an instance of the builtin type 'list' (line 642)
        list_155714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 642)
        # Adding element type (line 642)
        # Getting the type of 'x0' (line 642)
        x0_155715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 23), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 22), list_155714, x0_155715)
        # Adding element type (line 642)
        # Getting the type of 'y0' (line 642)
        y0_155716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 27), 'y0', False)
        # Getting the type of 'yf0' (line 642)
        yf0_155717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 32), 'yf0', False)
        # Getting the type of 'h' (line 642)
        h_155718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 38), 'h', False)
        # Applying the binary operator '*' (line 642)
        result_mul_155719 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 32), '*', yf0_155717, h_155718)
        
        # Applying the binary operator '+' (line 642)
        result_add_155720 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 27), '+', y0_155716, result_mul_155719)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 22), list_155714, result_add_155720)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 21), list_155713, list_155714)
        # Adding element type (line 642)
        
        # Obtaining an instance of the builtin type 'list' (line 642)
        list_155721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 642)
        # Adding element type (line 642)
        # Getting the type of 'x1' (line 642)
        x1_155722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 43), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 42), list_155721, x1_155722)
        # Adding element type (line 642)
        # Getting the type of 'y0' (line 642)
        y0_155723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 47), 'y0', False)
        # Getting the type of 'yf1' (line 642)
        yf1_155724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 52), 'yf1', False)
        # Getting the type of 'h' (line 642)
        h_155725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 58), 'h', False)
        # Applying the binary operator '*' (line 642)
        result_mul_155726 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 52), '*', yf1_155724, h_155725)
        
        # Applying the binary operator '+' (line 642)
        result_add_155727 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 47), '+', y0_155723, result_mul_155726)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 42), list_155721, result_add_155727)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 21), list_155713, list_155721)
        
        # Processing the call keyword arguments (line 642)
        kwargs_155728 = {}
        # Getting the type of 'Bbox' (line 642)
        Bbox_155712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 16), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 642)
        Bbox_call_result_155729 = invoke(stypy.reporting.localization.Localization(__file__, 642, 16), Bbox_155712, *[list_155713], **kwargs_155728)
        
        list_155744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 16), list_155744, Bbox_call_result_155729)
        # Assigning a type to the variable 'stypy_return_type' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 8), 'stypy_return_type', list_155744)
        
        # ################# End of 'splity(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'splity' in the type store
        # Getting the type of 'stypy_return_type' (line 631)
        stypy_return_type_155745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155745)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'splity'
        return stypy_return_type_155745


    @norecursion
    def count_contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'count_contains'
        module_type_store = module_type_store.open_function_context('count_contains', 645, 4, False)
        # Assigning a type to the variable 'self' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.count_contains.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.count_contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.count_contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.count_contains.__dict__.__setitem__('stypy_function_name', 'BboxBase.count_contains')
        BboxBase.count_contains.__dict__.__setitem__('stypy_param_names_list', ['vertices'])
        BboxBase.count_contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.count_contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.count_contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.count_contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.count_contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.count_contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.count_contains', ['vertices'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'count_contains', localization, ['vertices'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'count_contains(...)' code ##################

        unicode_155746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, (-1)), 'unicode', u'\n        Count the number of vertices contained in the :class:`Bbox`.\n        Any vertices with a non-finite x or y value are ignored.\n\n        *vertices* is a Nx2 Numpy array.\n        ')
        
        
        
        # Call to len(...): (line 652)
        # Processing the call arguments (line 652)
        # Getting the type of 'vertices' (line 652)
        vertices_155748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 15), 'vertices', False)
        # Processing the call keyword arguments (line 652)
        kwargs_155749 = {}
        # Getting the type of 'len' (line 652)
        len_155747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 11), 'len', False)
        # Calling len(args, kwargs) (line 652)
        len_call_result_155750 = invoke(stypy.reporting.localization.Localization(__file__, 652, 11), len_155747, *[vertices_155748], **kwargs_155749)
        
        int_155751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 28), 'int')
        # Applying the binary operator '==' (line 652)
        result_eq_155752 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 11), '==', len_call_result_155750, int_155751)
        
        # Testing the type of an if condition (line 652)
        if_condition_155753 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 652, 8), result_eq_155752)
        # Assigning a type to the variable 'if_condition_155753' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'if_condition_155753', if_condition_155753)
        # SSA begins for if statement (line 652)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        int_155754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 653, 19), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 12), 'stypy_return_type', int_155754)
        # SSA join for if statement (line 652)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 654):
        
        # Assigning a Call to a Name (line 654):
        
        # Call to asarray(...): (line 654)
        # Processing the call arguments (line 654)
        # Getting the type of 'vertices' (line 654)
        vertices_155757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 30), 'vertices', False)
        # Processing the call keyword arguments (line 654)
        kwargs_155758 = {}
        # Getting the type of 'np' (line 654)
        np_155755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 19), 'np', False)
        # Obtaining the member 'asarray' of a type (line 654)
        asarray_155756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 19), np_155755, 'asarray')
        # Calling asarray(args, kwargs) (line 654)
        asarray_call_result_155759 = invoke(stypy.reporting.localization.Localization(__file__, 654, 19), asarray_155756, *[vertices_155757], **kwargs_155758)
        
        # Assigning a type to the variable 'vertices' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 8), 'vertices', asarray_call_result_155759)
        
        # Call to errstate(...): (line 655)
        # Processing the call keyword arguments (line 655)
        unicode_155762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 33), 'unicode', u'ignore')
        keyword_155763 = unicode_155762
        kwargs_155764 = {'invalid': keyword_155763}
        # Getting the type of 'np' (line 655)
        np_155760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 13), 'np', False)
        # Obtaining the member 'errstate' of a type (line 655)
        errstate_155761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 13), np_155760, 'errstate')
        # Calling errstate(args, kwargs) (line 655)
        errstate_call_result_155765 = invoke(stypy.reporting.localization.Localization(__file__, 655, 13), errstate_155761, *[], **kwargs_155764)
        
        with_155766 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 655, 13), errstate_call_result_155765, 'with parameter', '__enter__', '__exit__')

        if with_155766:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 655)
            enter___155767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 13), errstate_call_result_155765, '__enter__')
            with_enter_155768 = invoke(stypy.reporting.localization.Localization(__file__, 655, 13), enter___155767)
            
            # Call to sum(...): (line 656)
            # Processing the call keyword arguments (line 656)
            kwargs_155784 = {}
            
            # Call to all(...): (line 656)
            # Processing the call keyword arguments (line 656)
            int_155779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 53), 'int')
            keyword_155780 = int_155779
            kwargs_155781 = {'axis': keyword_155780}
            
            # Getting the type of 'self' (line 656)
            self_155769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 22), 'self', False)
            # Obtaining the member 'min' of a type (line 656)
            min_155770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 22), self_155769, 'min')
            # Getting the type of 'vertices' (line 656)
            vertices_155771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 33), 'vertices', False)
            # Applying the binary operator '<' (line 656)
            result_lt_155772 = python_operator(stypy.reporting.localization.Localization(__file__, 656, 22), '<', min_155770, vertices_155771)
            
            
            # Getting the type of 'vertices' (line 657)
            vertices_155773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 22), 'vertices', False)
            # Getting the type of 'self' (line 657)
            self_155774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 33), 'self', False)
            # Obtaining the member 'max' of a type (line 657)
            max_155775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 33), self_155774, 'max')
            # Applying the binary operator '<' (line 657)
            result_lt_155776 = python_operator(stypy.reporting.localization.Localization(__file__, 657, 22), '<', vertices_155773, max_155775)
            
            # Applying the binary operator '&' (line 656)
            result_and__155777 = python_operator(stypy.reporting.localization.Localization(__file__, 656, 21), '&', result_lt_155772, result_lt_155776)
            
            # Obtaining the member 'all' of a type (line 656)
            all_155778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 21), result_and__155777, 'all')
            # Calling all(args, kwargs) (line 656)
            all_call_result_155782 = invoke(stypy.reporting.localization.Localization(__file__, 656, 21), all_155778, *[], **kwargs_155781)
            
            # Obtaining the member 'sum' of a type (line 656)
            sum_155783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 21), all_call_result_155782, 'sum')
            # Calling sum(args, kwargs) (line 656)
            sum_call_result_155785 = invoke(stypy.reporting.localization.Localization(__file__, 656, 21), sum_155783, *[], **kwargs_155784)
            
            # Assigning a type to the variable 'stypy_return_type' (line 656)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 12), 'stypy_return_type', sum_call_result_155785)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 655)
            exit___155786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 13), errstate_call_result_155765, '__exit__')
            with_exit_155787 = invoke(stypy.reporting.localization.Localization(__file__, 655, 13), exit___155786, None, None, None)

        
        # ################# End of 'count_contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'count_contains' in the type store
        # Getting the type of 'stypy_return_type' (line 645)
        stypy_return_type_155788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155788)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'count_contains'
        return stypy_return_type_155788


    @norecursion
    def count_overlaps(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'count_overlaps'
        module_type_store = module_type_store.open_function_context('count_overlaps', 659, 4, False)
        # Assigning a type to the variable 'self' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_function_name', 'BboxBase.count_overlaps')
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_param_names_list', ['bboxes'])
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.count_overlaps.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.count_overlaps', ['bboxes'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'count_overlaps', localization, ['bboxes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'count_overlaps(...)' code ##################

        unicode_155789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, (-1)), 'unicode', u'\n        Count the number of bounding boxes that overlap this one.\n\n        bboxes is a sequence of :class:`BboxBase` objects\n        ')
        
        # Call to count_bboxes_overlapping_bbox(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'self' (line 666)
        self_155791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'self', False)
        
        # Call to atleast_3d(...): (line 666)
        # Processing the call arguments (line 666)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'bboxes' (line 666)
        bboxes_155799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 54), 'bboxes', False)
        comprehension_155800 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 666, 33), bboxes_155799)
        # Assigning a type to the variable 'x' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 33), 'x', comprehension_155800)
        
        # Call to array(...): (line 666)
        # Processing the call arguments (line 666)
        # Getting the type of 'x' (line 666)
        x_155796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 42), 'x', False)
        # Processing the call keyword arguments (line 666)
        kwargs_155797 = {}
        # Getting the type of 'np' (line 666)
        np_155794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 33), 'np', False)
        # Obtaining the member 'array' of a type (line 666)
        array_155795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 33), np_155794, 'array')
        # Calling array(args, kwargs) (line 666)
        array_call_result_155798 = invoke(stypy.reporting.localization.Localization(__file__, 666, 33), array_155795, *[x_155796], **kwargs_155797)
        
        list_155801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 33), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 666, 33), list_155801, array_call_result_155798)
        # Processing the call keyword arguments (line 666)
        kwargs_155802 = {}
        # Getting the type of 'np' (line 666)
        np_155792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 18), 'np', False)
        # Obtaining the member 'atleast_3d' of a type (line 666)
        atleast_3d_155793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 18), np_155792, 'atleast_3d')
        # Calling atleast_3d(args, kwargs) (line 666)
        atleast_3d_call_result_155803 = invoke(stypy.reporting.localization.Localization(__file__, 666, 18), atleast_3d_155793, *[list_155801], **kwargs_155802)
        
        # Processing the call keyword arguments (line 665)
        kwargs_155804 = {}
        # Getting the type of 'count_bboxes_overlapping_bbox' (line 665)
        count_bboxes_overlapping_bbox_155790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 15), 'count_bboxes_overlapping_bbox', False)
        # Calling count_bboxes_overlapping_bbox(args, kwargs) (line 665)
        count_bboxes_overlapping_bbox_call_result_155805 = invoke(stypy.reporting.localization.Localization(__file__, 665, 15), count_bboxes_overlapping_bbox_155790, *[self_155791, atleast_3d_call_result_155803], **kwargs_155804)
        
        # Assigning a type to the variable 'stypy_return_type' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'stypy_return_type', count_bboxes_overlapping_bbox_call_result_155805)
        
        # ################# End of 'count_overlaps(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'count_overlaps' in the type store
        # Getting the type of 'stypy_return_type' (line 659)
        stypy_return_type_155806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155806)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'count_overlaps'
        return stypy_return_type_155806


    @norecursion
    def expanded(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'expanded'
        module_type_store = module_type_store.open_function_context('expanded', 668, 4, False)
        # Assigning a type to the variable 'self' (line 669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.expanded.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.expanded.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.expanded.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.expanded.__dict__.__setitem__('stypy_function_name', 'BboxBase.expanded')
        BboxBase.expanded.__dict__.__setitem__('stypy_param_names_list', ['sw', 'sh'])
        BboxBase.expanded.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.expanded.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.expanded.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.expanded.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.expanded.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.expanded.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.expanded', ['sw', 'sh'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'expanded', localization, ['sw', 'sh'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'expanded(...)' code ##################

        unicode_155807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 673, (-1)), 'unicode', u'\n        Return a new :class:`Bbox` which is this :class:`Bbox`\n        expanded around its center by the given factors *sw* and\n        *sh*.\n        ')
        
        # Assigning a Attribute to a Name (line 674):
        
        # Assigning a Attribute to a Name (line 674):
        # Getting the type of 'self' (line 674)
        self_155808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 16), 'self')
        # Obtaining the member 'width' of a type (line 674)
        width_155809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 16), self_155808, 'width')
        # Assigning a type to the variable 'width' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'width', width_155809)
        
        # Assigning a Attribute to a Name (line 675):
        
        # Assigning a Attribute to a Name (line 675):
        # Getting the type of 'self' (line 675)
        self_155810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 17), 'self')
        # Obtaining the member 'height' of a type (line 675)
        height_155811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 17), self_155810, 'height')
        # Assigning a type to the variable 'height' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'height', height_155811)
        
        # Assigning a BinOp to a Name (line 676):
        
        # Assigning a BinOp to a Name (line 676):
        # Getting the type of 'sw' (line 676)
        sw_155812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 18), 'sw')
        # Getting the type of 'width' (line 676)
        width_155813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 23), 'width')
        # Applying the binary operator '*' (line 676)
        result_mul_155814 = python_operator(stypy.reporting.localization.Localization(__file__, 676, 18), '*', sw_155812, width_155813)
        
        # Getting the type of 'width' (line 676)
        width_155815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 31), 'width')
        # Applying the binary operator '-' (line 676)
        result_sub_155816 = python_operator(stypy.reporting.localization.Localization(__file__, 676, 18), '-', result_mul_155814, width_155815)
        
        float_155817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 40), 'float')
        # Applying the binary operator 'div' (line 676)
        result_div_155818 = python_operator(stypy.reporting.localization.Localization(__file__, 676, 17), 'div', result_sub_155816, float_155817)
        
        # Assigning a type to the variable 'deltaw' (line 676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 8), 'deltaw', result_div_155818)
        
        # Assigning a BinOp to a Name (line 677):
        
        # Assigning a BinOp to a Name (line 677):
        # Getting the type of 'sh' (line 677)
        sh_155819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 18), 'sh')
        # Getting the type of 'height' (line 677)
        height_155820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 23), 'height')
        # Applying the binary operator '*' (line 677)
        result_mul_155821 = python_operator(stypy.reporting.localization.Localization(__file__, 677, 18), '*', sh_155819, height_155820)
        
        # Getting the type of 'height' (line 677)
        height_155822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 32), 'height')
        # Applying the binary operator '-' (line 677)
        result_sub_155823 = python_operator(stypy.reporting.localization.Localization(__file__, 677, 18), '-', result_mul_155821, height_155822)
        
        float_155824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 677, 42), 'float')
        # Applying the binary operator 'div' (line 677)
        result_div_155825 = python_operator(stypy.reporting.localization.Localization(__file__, 677, 17), 'div', result_sub_155823, float_155824)
        
        # Assigning a type to the variable 'deltah' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 8), 'deltah', result_div_155825)
        
        # Assigning a Call to a Name (line 678):
        
        # Assigning a Call to a Name (line 678):
        
        # Call to array(...): (line 678)
        # Processing the call arguments (line 678)
        
        # Obtaining an instance of the builtin type 'list' (line 678)
        list_155828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 678)
        # Adding element type (line 678)
        
        # Obtaining an instance of the builtin type 'list' (line 678)
        list_155829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 678)
        # Adding element type (line 678)
        
        # Getting the type of 'deltaw' (line 678)
        deltaw_155830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 24), 'deltaw', False)
        # Applying the 'usub' unary operator (line 678)
        result___neg___155831 = python_operator(stypy.reporting.localization.Localization(__file__, 678, 23), 'usub', deltaw_155830)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 678, 22), list_155829, result___neg___155831)
        # Adding element type (line 678)
        
        # Getting the type of 'deltah' (line 678)
        deltah_155832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 33), 'deltah', False)
        # Applying the 'usub' unary operator (line 678)
        result___neg___155833 = python_operator(stypy.reporting.localization.Localization(__file__, 678, 32), 'usub', deltah_155832)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 678, 22), list_155829, result___neg___155833)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 678, 21), list_155828, list_155829)
        # Adding element type (line 678)
        
        # Obtaining an instance of the builtin type 'list' (line 678)
        list_155834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 678)
        # Adding element type (line 678)
        # Getting the type of 'deltaw' (line 678)
        deltaw_155835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 43), 'deltaw', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 678, 42), list_155834, deltaw_155835)
        # Adding element type (line 678)
        # Getting the type of 'deltah' (line 678)
        deltah_155836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 51), 'deltah', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 678, 42), list_155834, deltah_155836)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 678, 21), list_155828, list_155834)
        
        # Processing the call keyword arguments (line 678)
        kwargs_155837 = {}
        # Getting the type of 'np' (line 678)
        np_155826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 678)
        array_155827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 12), np_155826, 'array')
        # Calling array(args, kwargs) (line 678)
        array_call_result_155838 = invoke(stypy.reporting.localization.Localization(__file__, 678, 12), array_155827, *[list_155828], **kwargs_155837)
        
        # Assigning a type to the variable 'a' (line 678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 8), 'a', array_call_result_155838)
        
        # Call to Bbox(...): (line 679)
        # Processing the call arguments (line 679)
        # Getting the type of 'self' (line 679)
        self_155840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 20), 'self', False)
        # Obtaining the member '_points' of a type (line 679)
        _points_155841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 20), self_155840, '_points')
        # Getting the type of 'a' (line 679)
        a_155842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 35), 'a', False)
        # Applying the binary operator '+' (line 679)
        result_add_155843 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 20), '+', _points_155841, a_155842)
        
        # Processing the call keyword arguments (line 679)
        kwargs_155844 = {}
        # Getting the type of 'Bbox' (line 679)
        Bbox_155839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 679)
        Bbox_call_result_155845 = invoke(stypy.reporting.localization.Localization(__file__, 679, 15), Bbox_155839, *[result_add_155843], **kwargs_155844)
        
        # Assigning a type to the variable 'stypy_return_type' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'stypy_return_type', Bbox_call_result_155845)
        
        # ################# End of 'expanded(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'expanded' in the type store
        # Getting the type of 'stypy_return_type' (line 668)
        stypy_return_type_155846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155846)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'expanded'
        return stypy_return_type_155846


    @norecursion
    def padded(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'padded'
        module_type_store = module_type_store.open_function_context('padded', 681, 4, False)
        # Assigning a type to the variable 'self' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.padded.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.padded.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.padded.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.padded.__dict__.__setitem__('stypy_function_name', 'BboxBase.padded')
        BboxBase.padded.__dict__.__setitem__('stypy_param_names_list', ['p'])
        BboxBase.padded.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.padded.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.padded.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.padded.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.padded.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.padded.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.padded', ['p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'padded', localization, ['p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'padded(...)' code ##################

        unicode_155847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, (-1)), 'unicode', u'\n        Return a new :class:`Bbox` that is padded on all four sides by\n        the given value.\n        ')
        
        # Assigning a Call to a Name (line 686):
        
        # Assigning a Call to a Name (line 686):
        
        # Call to get_points(...): (line 686)
        # Processing the call keyword arguments (line 686)
        kwargs_155850 = {}
        # Getting the type of 'self' (line 686)
        self_155848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 17), 'self', False)
        # Obtaining the member 'get_points' of a type (line 686)
        get_points_155849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 17), self_155848, 'get_points')
        # Calling get_points(args, kwargs) (line 686)
        get_points_call_result_155851 = invoke(stypy.reporting.localization.Localization(__file__, 686, 17), get_points_155849, *[], **kwargs_155850)
        
        # Assigning a type to the variable 'points' (line 686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 8), 'points', get_points_call_result_155851)
        
        # Call to Bbox(...): (line 687)
        # Processing the call arguments (line 687)
        # Getting the type of 'points' (line 687)
        points_155853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 20), 'points', False)
        
        # Obtaining an instance of the builtin type 'list' (line 687)
        list_155854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 687)
        # Adding element type (line 687)
        
        # Obtaining an instance of the builtin type 'list' (line 687)
        list_155855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 687)
        # Adding element type (line 687)
        
        # Getting the type of 'p' (line 687)
        p_155856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 32), 'p', False)
        # Applying the 'usub' unary operator (line 687)
        result___neg___155857 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 31), 'usub', p_155856)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 30), list_155855, result___neg___155857)
        # Adding element type (line 687)
        
        # Getting the type of 'p' (line 687)
        p_155858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 36), 'p', False)
        # Applying the 'usub' unary operator (line 687)
        result___neg___155859 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 35), 'usub', p_155858)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 30), list_155855, result___neg___155859)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 29), list_155854, list_155855)
        # Adding element type (line 687)
        
        # Obtaining an instance of the builtin type 'list' (line 687)
        list_155860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 40), 'list')
        # Adding type elements to the builtin type 'list' instance (line 687)
        # Adding element type (line 687)
        # Getting the type of 'p' (line 687)
        p_155861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 41), 'p', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 40), list_155860, p_155861)
        # Adding element type (line 687)
        # Getting the type of 'p' (line 687)
        p_155862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 44), 'p', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 40), list_155860, p_155862)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 29), list_155854, list_155860)
        
        # Applying the binary operator '+' (line 687)
        result_add_155863 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 20), '+', points_155853, list_155854)
        
        # Processing the call keyword arguments (line 687)
        kwargs_155864 = {}
        # Getting the type of 'Bbox' (line 687)
        Bbox_155852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 687)
        Bbox_call_result_155865 = invoke(stypy.reporting.localization.Localization(__file__, 687, 15), Bbox_155852, *[result_add_155863], **kwargs_155864)
        
        # Assigning a type to the variable 'stypy_return_type' (line 687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'stypy_return_type', Bbox_call_result_155865)
        
        # ################# End of 'padded(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'padded' in the type store
        # Getting the type of 'stypy_return_type' (line 681)
        stypy_return_type_155866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155866)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'padded'
        return stypy_return_type_155866


    @norecursion
    def translated(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'translated'
        module_type_store = module_type_store.open_function_context('translated', 689, 4, False)
        # Assigning a type to the variable 'self' (line 690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.translated.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.translated.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.translated.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.translated.__dict__.__setitem__('stypy_function_name', 'BboxBase.translated')
        BboxBase.translated.__dict__.__setitem__('stypy_param_names_list', ['tx', 'ty'])
        BboxBase.translated.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.translated.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.translated.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.translated.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.translated.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.translated.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.translated', ['tx', 'ty'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'translated', localization, ['tx', 'ty'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'translated(...)' code ##################

        unicode_155867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, (-1)), 'unicode', u'\n        Return a copy of the :class:`Bbox`, statically translated by\n        *tx* and *ty*.\n        ')
        
        # Call to Bbox(...): (line 694)
        # Processing the call arguments (line 694)
        # Getting the type of 'self' (line 694)
        self_155869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 20), 'self', False)
        # Obtaining the member '_points' of a type (line 694)
        _points_155870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 20), self_155869, '_points')
        
        # Obtaining an instance of the builtin type 'tuple' (line 694)
        tuple_155871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 694)
        # Adding element type (line 694)
        # Getting the type of 'tx' (line 694)
        tx_155872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 36), 'tx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 694, 36), tuple_155871, tx_155872)
        # Adding element type (line 694)
        # Getting the type of 'ty' (line 694)
        ty_155873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 40), 'ty', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 694, 36), tuple_155871, ty_155873)
        
        # Applying the binary operator '+' (line 694)
        result_add_155874 = python_operator(stypy.reporting.localization.Localization(__file__, 694, 20), '+', _points_155870, tuple_155871)
        
        # Processing the call keyword arguments (line 694)
        kwargs_155875 = {}
        # Getting the type of 'Bbox' (line 694)
        Bbox_155868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 694)
        Bbox_call_result_155876 = invoke(stypy.reporting.localization.Localization(__file__, 694, 15), Bbox_155868, *[result_add_155874], **kwargs_155875)
        
        # Assigning a type to the variable 'stypy_return_type' (line 694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), 'stypy_return_type', Bbox_call_result_155876)
        
        # ################# End of 'translated(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'translated' in the type store
        # Getting the type of 'stypy_return_type' (line 689)
        stypy_return_type_155877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155877)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'translated'
        return stypy_return_type_155877


    @norecursion
    def corners(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'corners'
        module_type_store = module_type_store.open_function_context('corners', 696, 4, False)
        # Assigning a type to the variable 'self' (line 697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.corners.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.corners.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.corners.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.corners.__dict__.__setitem__('stypy_function_name', 'BboxBase.corners')
        BboxBase.corners.__dict__.__setitem__('stypy_param_names_list', [])
        BboxBase.corners.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.corners.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.corners.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.corners.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.corners.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.corners.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.corners', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'corners', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'corners(...)' code ##################

        unicode_155878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, (-1)), 'unicode', u'\n        Return an array of points which are the four corners of this\n        rectangle.  For example, if this :class:`Bbox` is defined by\n        the points (*a*, *b*) and (*c*, *d*), :meth:`corners` returns\n        (*a*, *b*), (*a*, *d*), (*c*, *b*) and (*c*, *d*).\n        ')
        
        # Assigning a Call to a Tuple (line 703):
        
        # Assigning a Call to a Name:
        
        # Call to flatten(...): (line 703)
        # Processing the call keyword arguments (line 703)
        kwargs_155884 = {}
        
        # Call to get_points(...): (line 703)
        # Processing the call keyword arguments (line 703)
        kwargs_155881 = {}
        # Getting the type of 'self' (line 703)
        self_155879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 21), 'self', False)
        # Obtaining the member 'get_points' of a type (line 703)
        get_points_155880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 21), self_155879, 'get_points')
        # Calling get_points(args, kwargs) (line 703)
        get_points_call_result_155882 = invoke(stypy.reporting.localization.Localization(__file__, 703, 21), get_points_155880, *[], **kwargs_155881)
        
        # Obtaining the member 'flatten' of a type (line 703)
        flatten_155883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 21), get_points_call_result_155882, 'flatten')
        # Calling flatten(args, kwargs) (line 703)
        flatten_call_result_155885 = invoke(stypy.reporting.localization.Localization(__file__, 703, 21), flatten_155883, *[], **kwargs_155884)
        
        # Assigning a type to the variable 'call_assignment_154290' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154290', flatten_call_result_155885)
        
        # Assigning a Call to a Name (line 703):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_155888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 8), 'int')
        # Processing the call keyword arguments
        kwargs_155889 = {}
        # Getting the type of 'call_assignment_154290' (line 703)
        call_assignment_154290_155886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154290', False)
        # Obtaining the member '__getitem__' of a type (line 703)
        getitem___155887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), call_assignment_154290_155886, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_155890 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___155887, *[int_155888], **kwargs_155889)
        
        # Assigning a type to the variable 'call_assignment_154291' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154291', getitem___call_result_155890)
        
        # Assigning a Name to a Name (line 703):
        # Getting the type of 'call_assignment_154291' (line 703)
        call_assignment_154291_155891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154291')
        # Assigning a type to the variable 'l' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'l', call_assignment_154291_155891)
        
        # Assigning a Call to a Name (line 703):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_155894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 8), 'int')
        # Processing the call keyword arguments
        kwargs_155895 = {}
        # Getting the type of 'call_assignment_154290' (line 703)
        call_assignment_154290_155892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154290', False)
        # Obtaining the member '__getitem__' of a type (line 703)
        getitem___155893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), call_assignment_154290_155892, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_155896 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___155893, *[int_155894], **kwargs_155895)
        
        # Assigning a type to the variable 'call_assignment_154292' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154292', getitem___call_result_155896)
        
        # Assigning a Name to a Name (line 703):
        # Getting the type of 'call_assignment_154292' (line 703)
        call_assignment_154292_155897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154292')
        # Assigning a type to the variable 'b' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 11), 'b', call_assignment_154292_155897)
        
        # Assigning a Call to a Name (line 703):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_155900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 8), 'int')
        # Processing the call keyword arguments
        kwargs_155901 = {}
        # Getting the type of 'call_assignment_154290' (line 703)
        call_assignment_154290_155898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154290', False)
        # Obtaining the member '__getitem__' of a type (line 703)
        getitem___155899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), call_assignment_154290_155898, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_155902 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___155899, *[int_155900], **kwargs_155901)
        
        # Assigning a type to the variable 'call_assignment_154293' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154293', getitem___call_result_155902)
        
        # Assigning a Name to a Name (line 703):
        # Getting the type of 'call_assignment_154293' (line 703)
        call_assignment_154293_155903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154293')
        # Assigning a type to the variable 'r' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 14), 'r', call_assignment_154293_155903)
        
        # Assigning a Call to a Name (line 703):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_155906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 8), 'int')
        # Processing the call keyword arguments
        kwargs_155907 = {}
        # Getting the type of 'call_assignment_154290' (line 703)
        call_assignment_154290_155904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154290', False)
        # Obtaining the member '__getitem__' of a type (line 703)
        getitem___155905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), call_assignment_154290_155904, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_155908 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___155905, *[int_155906], **kwargs_155907)
        
        # Assigning a type to the variable 'call_assignment_154294' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154294', getitem___call_result_155908)
        
        # Assigning a Name to a Name (line 703):
        # Getting the type of 'call_assignment_154294' (line 703)
        call_assignment_154294_155909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'call_assignment_154294')
        # Assigning a type to the variable 't' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 17), 't', call_assignment_154294_155909)
        
        # Call to array(...): (line 704)
        # Processing the call arguments (line 704)
        
        # Obtaining an instance of the builtin type 'list' (line 704)
        list_155912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 704)
        # Adding element type (line 704)
        
        # Obtaining an instance of the builtin type 'list' (line 704)
        list_155913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 704)
        # Adding element type (line 704)
        # Getting the type of 'l' (line 704)
        l_155914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 26), 'l', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 25), list_155913, l_155914)
        # Adding element type (line 704)
        # Getting the type of 'b' (line 704)
        b_155915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 29), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 25), list_155913, b_155915)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 24), list_155912, list_155913)
        # Adding element type (line 704)
        
        # Obtaining an instance of the builtin type 'list' (line 704)
        list_155916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 704)
        # Adding element type (line 704)
        # Getting the type of 'l' (line 704)
        l_155917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 34), 'l', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 33), list_155916, l_155917)
        # Adding element type (line 704)
        # Getting the type of 't' (line 704)
        t_155918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 37), 't', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 33), list_155916, t_155918)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 24), list_155912, list_155916)
        # Adding element type (line 704)
        
        # Obtaining an instance of the builtin type 'list' (line 704)
        list_155919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 704)
        # Adding element type (line 704)
        # Getting the type of 'r' (line 704)
        r_155920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 42), 'r', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 41), list_155919, r_155920)
        # Adding element type (line 704)
        # Getting the type of 'b' (line 704)
        b_155921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 45), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 41), list_155919, b_155921)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 24), list_155912, list_155919)
        # Adding element type (line 704)
        
        # Obtaining an instance of the builtin type 'list' (line 704)
        list_155922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 49), 'list')
        # Adding type elements to the builtin type 'list' instance (line 704)
        # Adding element type (line 704)
        # Getting the type of 'r' (line 704)
        r_155923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 50), 'r', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 49), list_155922, r_155923)
        # Adding element type (line 704)
        # Getting the type of 't' (line 704)
        t_155924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 53), 't', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 49), list_155922, t_155924)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 704, 24), list_155912, list_155922)
        
        # Processing the call keyword arguments (line 704)
        kwargs_155925 = {}
        # Getting the type of 'np' (line 704)
        np_155910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 15), 'np', False)
        # Obtaining the member 'array' of a type (line 704)
        array_155911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 15), np_155910, 'array')
        # Calling array(args, kwargs) (line 704)
        array_call_result_155926 = invoke(stypy.reporting.localization.Localization(__file__, 704, 15), array_155911, *[list_155912], **kwargs_155925)
        
        # Assigning a type to the variable 'stypy_return_type' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 8), 'stypy_return_type', array_call_result_155926)
        
        # ################# End of 'corners(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'corners' in the type store
        # Getting the type of 'stypy_return_type' (line 696)
        stypy_return_type_155927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155927)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'corners'
        return stypy_return_type_155927


    @norecursion
    def rotated(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rotated'
        module_type_store = module_type_store.open_function_context('rotated', 706, 4, False)
        # Assigning a type to the variable 'self' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxBase.rotated.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.rotated.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxBase.rotated.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.rotated.__dict__.__setitem__('stypy_function_name', 'BboxBase.rotated')
        BboxBase.rotated.__dict__.__setitem__('stypy_param_names_list', ['radians'])
        BboxBase.rotated.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.rotated.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.rotated.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.rotated.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.rotated.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.rotated.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.rotated', ['radians'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rotated', localization, ['radians'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rotated(...)' code ##################

        unicode_155928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, (-1)), 'unicode', u'\n        Return a new bounding box that bounds a rotated version of\n        this bounding box by the given radians.  The new bounding box\n        is still aligned with the axes, of course.\n        ')
        
        # Assigning a Call to a Name (line 712):
        
        # Assigning a Call to a Name (line 712):
        
        # Call to corners(...): (line 712)
        # Processing the call keyword arguments (line 712)
        kwargs_155931 = {}
        # Getting the type of 'self' (line 712)
        self_155929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 18), 'self', False)
        # Obtaining the member 'corners' of a type (line 712)
        corners_155930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 18), self_155929, 'corners')
        # Calling corners(args, kwargs) (line 712)
        corners_call_result_155932 = invoke(stypy.reporting.localization.Localization(__file__, 712, 18), corners_155930, *[], **kwargs_155931)
        
        # Assigning a type to the variable 'corners' (line 712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 8), 'corners', corners_call_result_155932)
        
        # Assigning a Call to a Name (line 713):
        
        # Assigning a Call to a Name (line 713):
        
        # Call to transform(...): (line 713)
        # Processing the call arguments (line 713)
        # Getting the type of 'corners' (line 713)
        corners_155941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 63), 'corners', False)
        # Processing the call keyword arguments (line 713)
        kwargs_155942 = {}
        
        # Call to rotate(...): (line 713)
        # Processing the call arguments (line 713)
        # Getting the type of 'radians' (line 713)
        radians_155937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 44), 'radians', False)
        # Processing the call keyword arguments (line 713)
        kwargs_155938 = {}
        
        # Call to Affine2D(...): (line 713)
        # Processing the call keyword arguments (line 713)
        kwargs_155934 = {}
        # Getting the type of 'Affine2D' (line 713)
        Affine2D_155933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 26), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 713)
        Affine2D_call_result_155935 = invoke(stypy.reporting.localization.Localization(__file__, 713, 26), Affine2D_155933, *[], **kwargs_155934)
        
        # Obtaining the member 'rotate' of a type (line 713)
        rotate_155936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 26), Affine2D_call_result_155935, 'rotate')
        # Calling rotate(args, kwargs) (line 713)
        rotate_call_result_155939 = invoke(stypy.reporting.localization.Localization(__file__, 713, 26), rotate_155936, *[radians_155937], **kwargs_155938)
        
        # Obtaining the member 'transform' of a type (line 713)
        transform_155940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 26), rotate_call_result_155939, 'transform')
        # Calling transform(args, kwargs) (line 713)
        transform_call_result_155943 = invoke(stypy.reporting.localization.Localization(__file__, 713, 26), transform_155940, *[corners_155941], **kwargs_155942)
        
        # Assigning a type to the variable 'corners_rotated' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'corners_rotated', transform_call_result_155943)
        
        # Assigning a Call to a Name (line 714):
        
        # Assigning a Call to a Name (line 714):
        
        # Call to unit(...): (line 714)
        # Processing the call keyword arguments (line 714)
        kwargs_155946 = {}
        # Getting the type of 'Bbox' (line 714)
        Bbox_155944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 15), 'Bbox', False)
        # Obtaining the member 'unit' of a type (line 714)
        unit_155945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 15), Bbox_155944, 'unit')
        # Calling unit(args, kwargs) (line 714)
        unit_call_result_155947 = invoke(stypy.reporting.localization.Localization(__file__, 714, 15), unit_155945, *[], **kwargs_155946)
        
        # Assigning a type to the variable 'bbox' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'bbox', unit_call_result_155947)
        
        # Call to update_from_data_xy(...): (line 715)
        # Processing the call arguments (line 715)
        # Getting the type of 'corners_rotated' (line 715)
        corners_rotated_155950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 33), 'corners_rotated', False)
        # Processing the call keyword arguments (line 715)
        # Getting the type of 'True' (line 715)
        True_155951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 57), 'True', False)
        keyword_155952 = True_155951
        kwargs_155953 = {'ignore': keyword_155952}
        # Getting the type of 'bbox' (line 715)
        bbox_155948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 8), 'bbox', False)
        # Obtaining the member 'update_from_data_xy' of a type (line 715)
        update_from_data_xy_155949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 8), bbox_155948, 'update_from_data_xy')
        # Calling update_from_data_xy(args, kwargs) (line 715)
        update_from_data_xy_call_result_155954 = invoke(stypy.reporting.localization.Localization(__file__, 715, 8), update_from_data_xy_155949, *[corners_rotated_155950], **kwargs_155953)
        
        # Getting the type of 'bbox' (line 716)
        bbox_155955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 15), 'bbox')
        # Assigning a type to the variable 'stypy_return_type' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'stypy_return_type', bbox_155955)
        
        # ################# End of 'rotated(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rotated' in the type store
        # Getting the type of 'stypy_return_type' (line 706)
        stypy_return_type_155956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155956)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rotated'
        return stypy_return_type_155956


    @staticmethod
    @norecursion
    def union(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'union'
        module_type_store = module_type_store.open_function_context('union', 718, 4, False)
        
        # Passed parameters checking function
        BboxBase.union.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.union.__dict__.__setitem__('stypy_type_of_self', None)
        BboxBase.union.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.union.__dict__.__setitem__('stypy_function_name', 'union')
        BboxBase.union.__dict__.__setitem__('stypy_param_names_list', ['bboxes'])
        BboxBase.union.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.union.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.union.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.union.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.union.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.union.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, 'union', ['bboxes'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'union', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'union(...)' code ##################

        unicode_155957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, (-1)), 'unicode', u'\n        Return a :class:`Bbox` that contains all of the given bboxes.\n        ')
        
        
        
        # Call to len(...): (line 723)
        # Processing the call arguments (line 723)
        # Getting the type of 'bboxes' (line 723)
        bboxes_155959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 19), 'bboxes', False)
        # Processing the call keyword arguments (line 723)
        kwargs_155960 = {}
        # Getting the type of 'len' (line 723)
        len_155958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 15), 'len', False)
        # Calling len(args, kwargs) (line 723)
        len_call_result_155961 = invoke(stypy.reporting.localization.Localization(__file__, 723, 15), len_155958, *[bboxes_155959], **kwargs_155960)
        
        # Applying the 'not' unary operator (line 723)
        result_not__155962 = python_operator(stypy.reporting.localization.Localization(__file__, 723, 11), 'not', len_call_result_155961)
        
        # Testing the type of an if condition (line 723)
        if_condition_155963 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 723, 8), result_not__155962)
        # Assigning a type to the variable 'if_condition_155963' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'if_condition_155963', if_condition_155963)
        # SSA begins for if statement (line 723)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 724)
        # Processing the call arguments (line 724)
        unicode_155965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 29), 'unicode', u"'bboxes' cannot be empty")
        # Processing the call keyword arguments (line 724)
        kwargs_155966 = {}
        # Getting the type of 'ValueError' (line 724)
        ValueError_155964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 724)
        ValueError_call_result_155967 = invoke(stypy.reporting.localization.Localization(__file__, 724, 18), ValueError_155964, *[unicode_155965], **kwargs_155966)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 724, 12), ValueError_call_result_155967, 'raise parameter', BaseException)
        # SSA join for if statement (line 723)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 725):
        
        # Assigning a Call to a Name (line 725):
        
        # Call to min(...): (line 725)
        # Processing the call arguments (line 725)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'bboxes' (line 725)
        bboxes_155972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 43), 'bboxes', False)
        comprehension_155973 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 725, 21), bboxes_155972)
        # Assigning a type to the variable 'bbox' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 21), 'bbox', comprehension_155973)
        # Getting the type of 'bbox' (line 725)
        bbox_155970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 21), 'bbox', False)
        # Obtaining the member 'xmin' of a type (line 725)
        xmin_155971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 21), bbox_155970, 'xmin')
        list_155974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 725, 21), list_155974, xmin_155971)
        # Processing the call keyword arguments (line 725)
        kwargs_155975 = {}
        # Getting the type of 'np' (line 725)
        np_155968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 13), 'np', False)
        # Obtaining the member 'min' of a type (line 725)
        min_155969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 13), np_155968, 'min')
        # Calling min(args, kwargs) (line 725)
        min_call_result_155976 = invoke(stypy.reporting.localization.Localization(__file__, 725, 13), min_155969, *[list_155974], **kwargs_155975)
        
        # Assigning a type to the variable 'x0' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'x0', min_call_result_155976)
        
        # Assigning a Call to a Name (line 726):
        
        # Assigning a Call to a Name (line 726):
        
        # Call to max(...): (line 726)
        # Processing the call arguments (line 726)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'bboxes' (line 726)
        bboxes_155981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 43), 'bboxes', False)
        comprehension_155982 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 726, 21), bboxes_155981)
        # Assigning a type to the variable 'bbox' (line 726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 21), 'bbox', comprehension_155982)
        # Getting the type of 'bbox' (line 726)
        bbox_155979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 21), 'bbox', False)
        # Obtaining the member 'xmax' of a type (line 726)
        xmax_155980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 21), bbox_155979, 'xmax')
        list_155983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 726, 21), list_155983, xmax_155980)
        # Processing the call keyword arguments (line 726)
        kwargs_155984 = {}
        # Getting the type of 'np' (line 726)
        np_155977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 13), 'np', False)
        # Obtaining the member 'max' of a type (line 726)
        max_155978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 13), np_155977, 'max')
        # Calling max(args, kwargs) (line 726)
        max_call_result_155985 = invoke(stypy.reporting.localization.Localization(__file__, 726, 13), max_155978, *[list_155983], **kwargs_155984)
        
        # Assigning a type to the variable 'x1' (line 726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 8), 'x1', max_call_result_155985)
        
        # Assigning a Call to a Name (line 727):
        
        # Assigning a Call to a Name (line 727):
        
        # Call to min(...): (line 727)
        # Processing the call arguments (line 727)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'bboxes' (line 727)
        bboxes_155990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 43), 'bboxes', False)
        comprehension_155991 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 21), bboxes_155990)
        # Assigning a type to the variable 'bbox' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 21), 'bbox', comprehension_155991)
        # Getting the type of 'bbox' (line 727)
        bbox_155988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 21), 'bbox', False)
        # Obtaining the member 'ymin' of a type (line 727)
        ymin_155989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 21), bbox_155988, 'ymin')
        list_155992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 21), list_155992, ymin_155989)
        # Processing the call keyword arguments (line 727)
        kwargs_155993 = {}
        # Getting the type of 'np' (line 727)
        np_155986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 13), 'np', False)
        # Obtaining the member 'min' of a type (line 727)
        min_155987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 13), np_155986, 'min')
        # Calling min(args, kwargs) (line 727)
        min_call_result_155994 = invoke(stypy.reporting.localization.Localization(__file__, 727, 13), min_155987, *[list_155992], **kwargs_155993)
        
        # Assigning a type to the variable 'y0' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'y0', min_call_result_155994)
        
        # Assigning a Call to a Name (line 728):
        
        # Assigning a Call to a Name (line 728):
        
        # Call to max(...): (line 728)
        # Processing the call arguments (line 728)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'bboxes' (line 728)
        bboxes_155999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 43), 'bboxes', False)
        comprehension_156000 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 728, 21), bboxes_155999)
        # Assigning a type to the variable 'bbox' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 21), 'bbox', comprehension_156000)
        # Getting the type of 'bbox' (line 728)
        bbox_155997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 21), 'bbox', False)
        # Obtaining the member 'ymax' of a type (line 728)
        ymax_155998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 21), bbox_155997, 'ymax')
        list_156001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 728, 21), list_156001, ymax_155998)
        # Processing the call keyword arguments (line 728)
        kwargs_156002 = {}
        # Getting the type of 'np' (line 728)
        np_155995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 13), 'np', False)
        # Obtaining the member 'max' of a type (line 728)
        max_155996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 13), np_155995, 'max')
        # Calling max(args, kwargs) (line 728)
        max_call_result_156003 = invoke(stypy.reporting.localization.Localization(__file__, 728, 13), max_155996, *[list_156001], **kwargs_156002)
        
        # Assigning a type to the variable 'y1' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 8), 'y1', max_call_result_156003)
        
        # Call to Bbox(...): (line 729)
        # Processing the call arguments (line 729)
        
        # Obtaining an instance of the builtin type 'list' (line 729)
        list_156005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 729)
        # Adding element type (line 729)
        
        # Obtaining an instance of the builtin type 'list' (line 729)
        list_156006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 729)
        # Adding element type (line 729)
        # Getting the type of 'x0' (line 729)
        x0_156007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 22), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 729, 21), list_156006, x0_156007)
        # Adding element type (line 729)
        # Getting the type of 'y0' (line 729)
        y0_156008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 26), 'y0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 729, 21), list_156006, y0_156008)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 729, 20), list_156005, list_156006)
        # Adding element type (line 729)
        
        # Obtaining an instance of the builtin type 'list' (line 729)
        list_156009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 729)
        # Adding element type (line 729)
        # Getting the type of 'x1' (line 729)
        x1_156010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 32), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 729, 31), list_156009, x1_156010)
        # Adding element type (line 729)
        # Getting the type of 'y1' (line 729)
        y1_156011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 36), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 729, 31), list_156009, y1_156011)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 729, 20), list_156005, list_156009)
        
        # Processing the call keyword arguments (line 729)
        kwargs_156012 = {}
        # Getting the type of 'Bbox' (line 729)
        Bbox_156004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 729)
        Bbox_call_result_156013 = invoke(stypy.reporting.localization.Localization(__file__, 729, 15), Bbox_156004, *[list_156005], **kwargs_156012)
        
        # Assigning a type to the variable 'stypy_return_type' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 8), 'stypy_return_type', Bbox_call_result_156013)
        
        # ################# End of 'union(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'union' in the type store
        # Getting the type of 'stypy_return_type' (line 718)
        stypy_return_type_156014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156014)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'union'
        return stypy_return_type_156014


    @staticmethod
    @norecursion
    def intersection(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'intersection'
        module_type_store = module_type_store.open_function_context('intersection', 731, 4, False)
        
        # Passed parameters checking function
        BboxBase.intersection.__dict__.__setitem__('stypy_localization', localization)
        BboxBase.intersection.__dict__.__setitem__('stypy_type_of_self', None)
        BboxBase.intersection.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxBase.intersection.__dict__.__setitem__('stypy_function_name', 'intersection')
        BboxBase.intersection.__dict__.__setitem__('stypy_param_names_list', ['bbox1', 'bbox2'])
        BboxBase.intersection.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxBase.intersection.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxBase.intersection.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxBase.intersection.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxBase.intersection.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxBase.intersection.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, 'intersection', ['bbox1', 'bbox2'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'intersection', localization, ['bbox2'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'intersection(...)' code ##################

        unicode_156015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, (-1)), 'unicode', u'\n        Return the intersection of the two bboxes or None\n        if they do not intersect.\n        ')
        
        # Assigning a Call to a Name (line 737):
        
        # Assigning a Call to a Name (line 737):
        
        # Call to maximum(...): (line 737)
        # Processing the call arguments (line 737)
        # Getting the type of 'bbox1' (line 737)
        bbox1_156018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 24), 'bbox1', False)
        # Obtaining the member 'xmin' of a type (line 737)
        xmin_156019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 24), bbox1_156018, 'xmin')
        # Getting the type of 'bbox2' (line 737)
        bbox2_156020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 36), 'bbox2', False)
        # Obtaining the member 'xmin' of a type (line 737)
        xmin_156021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 36), bbox2_156020, 'xmin')
        # Processing the call keyword arguments (line 737)
        kwargs_156022 = {}
        # Getting the type of 'np' (line 737)
        np_156016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 13), 'np', False)
        # Obtaining the member 'maximum' of a type (line 737)
        maximum_156017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 13), np_156016, 'maximum')
        # Calling maximum(args, kwargs) (line 737)
        maximum_call_result_156023 = invoke(stypy.reporting.localization.Localization(__file__, 737, 13), maximum_156017, *[xmin_156019, xmin_156021], **kwargs_156022)
        
        # Assigning a type to the variable 'x0' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'x0', maximum_call_result_156023)
        
        # Assigning a Call to a Name (line 738):
        
        # Assigning a Call to a Name (line 738):
        
        # Call to minimum(...): (line 738)
        # Processing the call arguments (line 738)
        # Getting the type of 'bbox1' (line 738)
        bbox1_156026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 24), 'bbox1', False)
        # Obtaining the member 'xmax' of a type (line 738)
        xmax_156027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 24), bbox1_156026, 'xmax')
        # Getting the type of 'bbox2' (line 738)
        bbox2_156028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 36), 'bbox2', False)
        # Obtaining the member 'xmax' of a type (line 738)
        xmax_156029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 36), bbox2_156028, 'xmax')
        # Processing the call keyword arguments (line 738)
        kwargs_156030 = {}
        # Getting the type of 'np' (line 738)
        np_156024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 13), 'np', False)
        # Obtaining the member 'minimum' of a type (line 738)
        minimum_156025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 13), np_156024, 'minimum')
        # Calling minimum(args, kwargs) (line 738)
        minimum_call_result_156031 = invoke(stypy.reporting.localization.Localization(__file__, 738, 13), minimum_156025, *[xmax_156027, xmax_156029], **kwargs_156030)
        
        # Assigning a type to the variable 'x1' (line 738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'x1', minimum_call_result_156031)
        
        # Assigning a Call to a Name (line 739):
        
        # Assigning a Call to a Name (line 739):
        
        # Call to maximum(...): (line 739)
        # Processing the call arguments (line 739)
        # Getting the type of 'bbox1' (line 739)
        bbox1_156034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 24), 'bbox1', False)
        # Obtaining the member 'ymin' of a type (line 739)
        ymin_156035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 24), bbox1_156034, 'ymin')
        # Getting the type of 'bbox2' (line 739)
        bbox2_156036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 36), 'bbox2', False)
        # Obtaining the member 'ymin' of a type (line 739)
        ymin_156037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 36), bbox2_156036, 'ymin')
        # Processing the call keyword arguments (line 739)
        kwargs_156038 = {}
        # Getting the type of 'np' (line 739)
        np_156032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 13), 'np', False)
        # Obtaining the member 'maximum' of a type (line 739)
        maximum_156033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 13), np_156032, 'maximum')
        # Calling maximum(args, kwargs) (line 739)
        maximum_call_result_156039 = invoke(stypy.reporting.localization.Localization(__file__, 739, 13), maximum_156033, *[ymin_156035, ymin_156037], **kwargs_156038)
        
        # Assigning a type to the variable 'y0' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'y0', maximum_call_result_156039)
        
        # Assigning a Call to a Name (line 740):
        
        # Assigning a Call to a Name (line 740):
        
        # Call to minimum(...): (line 740)
        # Processing the call arguments (line 740)
        # Getting the type of 'bbox1' (line 740)
        bbox1_156042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 24), 'bbox1', False)
        # Obtaining the member 'ymax' of a type (line 740)
        ymax_156043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 24), bbox1_156042, 'ymax')
        # Getting the type of 'bbox2' (line 740)
        bbox2_156044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 36), 'bbox2', False)
        # Obtaining the member 'ymax' of a type (line 740)
        ymax_156045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 36), bbox2_156044, 'ymax')
        # Processing the call keyword arguments (line 740)
        kwargs_156046 = {}
        # Getting the type of 'np' (line 740)
        np_156040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 13), 'np', False)
        # Obtaining the member 'minimum' of a type (line 740)
        minimum_156041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 13), np_156040, 'minimum')
        # Calling minimum(args, kwargs) (line 740)
        minimum_call_result_156047 = invoke(stypy.reporting.localization.Localization(__file__, 740, 13), minimum_156041, *[ymax_156043, ymax_156045], **kwargs_156046)
        
        # Assigning a type to the variable 'y1' (line 740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 8), 'y1', minimum_call_result_156047)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x0' (line 741)
        x0_156048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 45), 'x0')
        # Getting the type of 'x1' (line 741)
        x1_156049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 51), 'x1')
        # Applying the binary operator '<=' (line 741)
        result_le_156050 = python_operator(stypy.reporting.localization.Localization(__file__, 741, 45), '<=', x0_156048, x1_156049)
        
        
        # Getting the type of 'y0' (line 741)
        y0_156051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 58), 'y0')
        # Getting the type of 'y1' (line 741)
        y1_156052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 64), 'y1')
        # Applying the binary operator '<=' (line 741)
        result_le_156053 = python_operator(stypy.reporting.localization.Localization(__file__, 741, 58), '<=', y0_156051, y1_156052)
        
        # Applying the binary operator 'and' (line 741)
        result_and_keyword_156054 = python_operator(stypy.reporting.localization.Localization(__file__, 741, 45), 'and', result_le_156050, result_le_156053)
        
        # Testing the type of an if expression (line 741)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 741, 15), result_and_keyword_156054)
        # SSA begins for if expression (line 741)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to Bbox(...): (line 741)
        # Processing the call arguments (line 741)
        
        # Obtaining an instance of the builtin type 'list' (line 741)
        list_156056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 741, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 741)
        # Adding element type (line 741)
        
        # Obtaining an instance of the builtin type 'list' (line 741)
        list_156057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 741, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 741)
        # Adding element type (line 741)
        # Getting the type of 'x0' (line 741)
        x0_156058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 22), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 741, 21), list_156057, x0_156058)
        # Adding element type (line 741)
        # Getting the type of 'y0' (line 741)
        y0_156059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 26), 'y0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 741, 21), list_156057, y0_156059)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 741, 20), list_156056, list_156057)
        # Adding element type (line 741)
        
        # Obtaining an instance of the builtin type 'list' (line 741)
        list_156060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 741, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 741)
        # Adding element type (line 741)
        # Getting the type of 'x1' (line 741)
        x1_156061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 32), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 741, 31), list_156060, x1_156061)
        # Adding element type (line 741)
        # Getting the type of 'y1' (line 741)
        y1_156062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 36), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 741, 31), list_156060, y1_156062)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 741, 20), list_156056, list_156060)
        
        # Processing the call keyword arguments (line 741)
        kwargs_156063 = {}
        # Getting the type of 'Bbox' (line 741)
        Bbox_156055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 741)
        Bbox_call_result_156064 = invoke(stypy.reporting.localization.Localization(__file__, 741, 15), Bbox_156055, *[list_156056], **kwargs_156063)
        
        # SSA branch for the else part of an if expression (line 741)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'None' (line 741)
        None_156065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 72), 'None')
        # SSA join for if expression (line 741)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_156066 = union_type.UnionType.add(Bbox_call_result_156064, None_156065)
        
        # Assigning a type to the variable 'stypy_return_type' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'stypy_return_type', if_exp_156066)
        
        # ################# End of 'intersection(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'intersection' in the type store
        # Getting the type of 'stypy_return_type' (line 731)
        stypy_return_type_156067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156067)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'intersection'
        return stypy_return_type_156067


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 251, 0, False)
        # Assigning a type to the variable 'self' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxBase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'BboxBase' (line 251)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 0), 'BboxBase', BboxBase)

# Assigning a Name to a Name (line 262):
# Getting the type of 'True' (line 262)
True_156068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 14), 'True')
# Getting the type of 'BboxBase'
BboxBase_156069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxBase')
# Setting the type of the member 'is_bbox' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxBase_156069, 'is_bbox', True_156068)

# Assigning a Name to a Name (line 263):
# Getting the type of 'True' (line 263)
True_156070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 16), 'True')
# Getting the type of 'BboxBase'
BboxBase_156071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxBase')
# Setting the type of the member 'is_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxBase_156071, 'is_affine', True_156070)

# Assigning a Name to a Name (line 263):

# Getting the type of 'DEBUG' (line 265)
DEBUG_156072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 7), 'DEBUG')
# Testing the type of an if condition (line 265)
if_condition_156073 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 265, 4), DEBUG_156072)
# Assigning a type to the variable 'if_condition_156073' (line 265)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 4), 'if_condition_156073', if_condition_156073)
# SSA begins for if statement (line 265)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def _check(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_check'
    module_type_store = module_type_store.open_function_context('_check', 266, 8, False)
    
    # Passed parameters checking function
    _check.stypy_localization = localization
    _check.stypy_type_of_self = None
    _check.stypy_type_store = module_type_store
    _check.stypy_function_name = '_check'
    _check.stypy_param_names_list = ['points']
    _check.stypy_varargs_param_name = None
    _check.stypy_kwargs_param_name = None
    _check.stypy_call_defaults = defaults
    _check.stypy_call_varargs = varargs
    _check.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_check', ['points'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_check', localization, ['points'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_check(...)' code ##################

    
    
    # Call to isinstance(...): (line 267)
    # Processing the call arguments (line 267)
    # Getting the type of 'points' (line 267)
    points_156075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 26), 'points', False)
    # Getting the type of 'np' (line 267)
    np_156076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 34), 'np', False)
    # Obtaining the member 'ma' of a type (line 267)
    ma_156077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 34), np_156076, 'ma')
    # Obtaining the member 'MaskedArray' of a type (line 267)
    MaskedArray_156078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 34), ma_156077, 'MaskedArray')
    # Processing the call keyword arguments (line 267)
    kwargs_156079 = {}
    # Getting the type of 'isinstance' (line 267)
    isinstance_156074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 267)
    isinstance_call_result_156080 = invoke(stypy.reporting.localization.Localization(__file__, 267, 15), isinstance_156074, *[points_156075, MaskedArray_156078], **kwargs_156079)
    
    # Testing the type of an if condition (line 267)
    if_condition_156081 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 267, 12), isinstance_call_result_156080)
    # Assigning a type to the variable 'if_condition_156081' (line 267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 12), 'if_condition_156081', if_condition_156081)
    # SSA begins for if statement (line 267)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 268)
    # Processing the call arguments (line 268)
    unicode_156084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 30), 'unicode', u'Bbox bounds are a masked array.')
    # Processing the call keyword arguments (line 268)
    kwargs_156085 = {}
    # Getting the type of 'warnings' (line 268)
    warnings_156082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 16), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 268)
    warn_156083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 16), warnings_156082, 'warn')
    # Calling warn(args, kwargs) (line 268)
    warn_call_result_156086 = invoke(stypy.reporting.localization.Localization(__file__, 268, 16), warn_156083, *[unicode_156084], **kwargs_156085)
    
    # SSA join for if statement (line 267)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 269):
    
    # Assigning a Call to a Name (line 269):
    
    # Call to asarray(...): (line 269)
    # Processing the call arguments (line 269)
    # Getting the type of 'points' (line 269)
    points_156089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 32), 'points', False)
    # Processing the call keyword arguments (line 269)
    kwargs_156090 = {}
    # Getting the type of 'np' (line 269)
    np_156087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 21), 'np', False)
    # Obtaining the member 'asarray' of a type (line 269)
    asarray_156088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 21), np_156087, 'asarray')
    # Calling asarray(args, kwargs) (line 269)
    asarray_call_result_156091 = invoke(stypy.reporting.localization.Localization(__file__, 269, 21), asarray_156088, *[points_156089], **kwargs_156090)
    
    # Assigning a type to the variable 'points' (line 269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 12), 'points', asarray_call_result_156091)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 270)
    tuple_156092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 270)
    # Adding element type (line 270)
    int_156093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 23), tuple_156092, int_156093)
    # Adding element type (line 270)
    int_156094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 26), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 23), tuple_156092, int_156094)
    
    # Getting the type of 'points' (line 270)
    points_156095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 16), 'points')
    # Obtaining the member '__getitem__' of a type (line 270)
    getitem___156096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 270, 16), points_156095, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 270)
    subscript_call_result_156097 = invoke(stypy.reporting.localization.Localization(__file__, 270, 16), getitem___156096, tuple_156092)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 270)
    tuple_156098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 38), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 270)
    # Adding element type (line 270)
    int_156099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 38), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 38), tuple_156098, int_156099)
    # Adding element type (line 270)
    int_156100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 41), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 38), tuple_156098, int_156100)
    
    # Getting the type of 'points' (line 270)
    points_156101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 31), 'points')
    # Obtaining the member '__getitem__' of a type (line 270)
    getitem___156102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 270, 31), points_156101, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 270)
    subscript_call_result_156103 = invoke(stypy.reporting.localization.Localization(__file__, 270, 31), getitem___156102, tuple_156098)
    
    # Applying the binary operator '-' (line 270)
    result_sub_156104 = python_operator(stypy.reporting.localization.Localization(__file__, 270, 16), '-', subscript_call_result_156097, subscript_call_result_156103)
    
    int_156105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 47), 'int')
    # Applying the binary operator '==' (line 270)
    result_eq_156106 = python_operator(stypy.reporting.localization.Localization(__file__, 270, 16), '==', result_sub_156104, int_156105)
    
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 271)
    tuple_156107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 271)
    # Adding element type (line 271)
    int_156108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 23), tuple_156107, int_156108)
    # Adding element type (line 271)
    int_156109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 26), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 23), tuple_156107, int_156109)
    
    # Getting the type of 'points' (line 271)
    points_156110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 16), 'points')
    # Obtaining the member '__getitem__' of a type (line 271)
    getitem___156111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 16), points_156110, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 271)
    subscript_call_result_156112 = invoke(stypy.reporting.localization.Localization(__file__, 271, 16), getitem___156111, tuple_156107)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 271)
    tuple_156113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 38), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 271)
    # Adding element type (line 271)
    int_156114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 38), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 38), tuple_156113, int_156114)
    # Adding element type (line 271)
    int_156115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 41), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 38), tuple_156113, int_156115)
    
    # Getting the type of 'points' (line 271)
    points_156116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 31), 'points')
    # Obtaining the member '__getitem__' of a type (line 271)
    getitem___156117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 31), points_156116, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 271)
    subscript_call_result_156118 = invoke(stypy.reporting.localization.Localization(__file__, 271, 31), getitem___156117, tuple_156113)
    
    # Applying the binary operator '-' (line 271)
    result_sub_156119 = python_operator(stypy.reporting.localization.Localization(__file__, 271, 16), '-', subscript_call_result_156112, subscript_call_result_156118)
    
    int_156120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 47), 'int')
    # Applying the binary operator '==' (line 271)
    result_eq_156121 = python_operator(stypy.reporting.localization.Localization(__file__, 271, 16), '==', result_sub_156119, int_156120)
    
    # Applying the binary operator 'or' (line 270)
    result_or_keyword_156122 = python_operator(stypy.reporting.localization.Localization(__file__, 270, 16), 'or', result_eq_156106, result_eq_156121)
    
    # Testing the type of an if condition (line 270)
    if_condition_156123 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 270, 12), result_or_keyword_156122)
    # Assigning a type to the variable 'if_condition_156123' (line 270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 12), 'if_condition_156123', if_condition_156123)
    # SSA begins for if statement (line 270)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 272)
    # Processing the call arguments (line 272)
    unicode_156126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 30), 'unicode', u'Singular Bbox.')
    # Processing the call keyword arguments (line 272)
    kwargs_156127 = {}
    # Getting the type of 'warnings' (line 272)
    warnings_156124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 16), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 272)
    warn_156125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 16), warnings_156124, 'warn')
    # Calling warn(args, kwargs) (line 272)
    warn_call_result_156128 = invoke(stypy.reporting.localization.Localization(__file__, 272, 16), warn_156125, *[unicode_156126], **kwargs_156127)
    
    # SSA join for if statement (line 270)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_check(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_check' in the type store
    # Getting the type of 'stypy_return_type' (line 266)
    stypy_return_type_156129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_156129)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_check'
    return stypy_return_type_156129

# Assigning a type to the variable '_check' (line 266)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 8), '_check', _check)

# Assigning a Call to a Name (line 273):

# Assigning a Call to a Name (line 273):

# Call to staticmethod(...): (line 273)
# Processing the call arguments (line 273)
# Getting the type of '_check' (line 273)
_check_156131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 30), '_check', False)
# Processing the call keyword arguments (line 273)
kwargs_156132 = {}
# Getting the type of 'staticmethod' (line 273)
staticmethod_156130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 17), 'staticmethod', False)
# Calling staticmethod(args, kwargs) (line 273)
staticmethod_call_result_156133 = invoke(stypy.reporting.localization.Localization(__file__, 273, 17), staticmethod_156130, *[_check_156131], **kwargs_156132)

# Assigning a type to the variable '_check' (line 273)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), '_check', staticmethod_call_result_156133)
# SSA join for if statement (line 265)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Attribute to a Attribute (line 277):
# Getting the type of 'TransformNode' (line 277)
TransformNode_156134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 21), 'TransformNode')
# Obtaining the member '__doc__' of a type (line 277)
doc___156135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 21), TransformNode_156134, '__doc__')
# Getting the type of 'BboxBase'
BboxBase_156136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxBase')
# Obtaining the member 'frozen' of a type
frozen_156137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxBase_156136, 'frozen')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), frozen_156137, '__doc__', doc___156135)

# Assigning a Dict to a Name (line 539):

# Obtaining an instance of the builtin type 'dict' (line 539)
dict_156138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 12), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 539)
# Adding element type (key, value) (line 539)
unicode_156139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 13), 'unicode', u'C')

# Obtaining an instance of the builtin type 'tuple' (line 539)
tuple_156140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 539)
# Adding element type (line 539)
float_156141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 20), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 20), tuple_156140, float_156141)
# Adding element type (line 539)
float_156142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 25), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 20), tuple_156140, float_156142)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 12), dict_156138, (unicode_156139, tuple_156140))
# Adding element type (key, value) (line 539)
unicode_156143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 13), 'unicode', u'SW')

# Obtaining an instance of the builtin type 'tuple' (line 540)
tuple_156144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 540)
# Adding element type (line 540)
int_156145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 20), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 540, 20), tuple_156144, int_156145)
# Adding element type (line 540)
int_156146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 23), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 540, 20), tuple_156144, int_156146)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 12), dict_156138, (unicode_156143, tuple_156144))
# Adding element type (key, value) (line 539)
unicode_156147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 13), 'unicode', u'S')

# Obtaining an instance of the builtin type 'tuple' (line 541)
tuple_156148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 541)
# Adding element type (line 541)
float_156149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 20), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 541, 20), tuple_156148, float_156149)
# Adding element type (line 541)
int_156150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 25), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 541, 20), tuple_156148, int_156150)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 12), dict_156138, (unicode_156147, tuple_156148))
# Adding element type (key, value) (line 539)
unicode_156151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 13), 'unicode', u'SE')

# Obtaining an instance of the builtin type 'tuple' (line 542)
tuple_156152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 542)
# Adding element type (line 542)
float_156153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 20), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 542, 20), tuple_156152, float_156153)
# Adding element type (line 542)
int_156154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 25), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 542, 20), tuple_156152, int_156154)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 12), dict_156138, (unicode_156151, tuple_156152))
# Adding element type (key, value) (line 539)
unicode_156155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 13), 'unicode', u'E')

# Obtaining an instance of the builtin type 'tuple' (line 543)
tuple_156156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 543)
# Adding element type (line 543)
float_156157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 20), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 20), tuple_156156, float_156157)
# Adding element type (line 543)
float_156158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 25), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 20), tuple_156156, float_156158)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 12), dict_156138, (unicode_156155, tuple_156156))
# Adding element type (key, value) (line 539)
unicode_156159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 13), 'unicode', u'NE')

# Obtaining an instance of the builtin type 'tuple' (line 544)
tuple_156160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 544)
# Adding element type (line 544)
float_156161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 20), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 544, 20), tuple_156160, float_156161)
# Adding element type (line 544)
float_156162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 25), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 544, 20), tuple_156160, float_156162)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 12), dict_156138, (unicode_156159, tuple_156160))
# Adding element type (key, value) (line 539)
unicode_156163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 13), 'unicode', u'N')

# Obtaining an instance of the builtin type 'tuple' (line 545)
tuple_156164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 545)
# Adding element type (line 545)
float_156165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 20), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 545, 20), tuple_156164, float_156165)
# Adding element type (line 545)
float_156166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 25), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 545, 20), tuple_156164, float_156166)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 12), dict_156138, (unicode_156163, tuple_156164))
# Adding element type (key, value) (line 539)
unicode_156167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 13), 'unicode', u'NW')

# Obtaining an instance of the builtin type 'tuple' (line 546)
tuple_156168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 546)
# Adding element type (line 546)
int_156169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 20), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 546, 20), tuple_156168, int_156169)
# Adding element type (line 546)
float_156170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 23), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 546, 20), tuple_156168, float_156170)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 12), dict_156138, (unicode_156167, tuple_156168))
# Adding element type (key, value) (line 539)
unicode_156171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 13), 'unicode', u'W')

# Obtaining an instance of the builtin type 'tuple' (line 547)
tuple_156172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 547)
# Adding element type (line 547)
int_156173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 20), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 547, 20), tuple_156172, int_156173)
# Adding element type (line 547)
float_156174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 23), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 547, 20), tuple_156172, float_156174)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 12), dict_156138, (unicode_156171, tuple_156172))

# Getting the type of 'BboxBase'
BboxBase_156175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxBase')
# Setting the type of the member 'coefs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxBase_156175, 'coefs', dict_156138)
# Declaration of the 'Bbox' class
# Getting the type of 'BboxBase' (line 744)
BboxBase_156176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 11), 'BboxBase')

class Bbox(BboxBase_156176, ):
    unicode_156177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 747, (-1)), 'unicode', u'\n    A mutable bounding box.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 749, 4, False)
        # Assigning a type to the variable 'self' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.__init__', ['points'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_156178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, (-1)), 'unicode', u'\n        *points*: a 2x2 numpy array of the form [[x0, y0], [x1, y1]]\n\n        If you need to create a :class:`Bbox` object from another form\n        of data, consider the static methods :meth:`unit`,\n        :meth:`from_bounds` and :meth:`from_extents`.\n        ')
        
        # Call to __init__(...): (line 757)
        # Processing the call arguments (line 757)
        # Getting the type of 'self' (line 757)
        self_156181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 26), 'self', False)
        # Processing the call keyword arguments (line 757)
        # Getting the type of 'kwargs' (line 757)
        kwargs_156182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 34), 'kwargs', False)
        kwargs_156183 = {'kwargs_156182': kwargs_156182}
        # Getting the type of 'BboxBase' (line 757)
        BboxBase_156179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'BboxBase', False)
        # Obtaining the member '__init__' of a type (line 757)
        init___156180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 8), BboxBase_156179, '__init__')
        # Calling __init__(args, kwargs) (line 757)
        init___call_result_156184 = invoke(stypy.reporting.localization.Localization(__file__, 757, 8), init___156180, *[self_156181], **kwargs_156183)
        
        
        # Assigning a Call to a Name (line 758):
        
        # Assigning a Call to a Name (line 758):
        
        # Call to asarray(...): (line 758)
        # Processing the call arguments (line 758)
        # Getting the type of 'points' (line 758)
        points_156187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 28), 'points', False)
        # Getting the type of 'float' (line 758)
        float_156188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 36), 'float', False)
        # Processing the call keyword arguments (line 758)
        kwargs_156189 = {}
        # Getting the type of 'np' (line 758)
        np_156185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 758)
        asarray_156186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 17), np_156185, 'asarray')
        # Calling asarray(args, kwargs) (line 758)
        asarray_call_result_156190 = invoke(stypy.reporting.localization.Localization(__file__, 758, 17), asarray_156186, *[points_156187, float_156188], **kwargs_156189)
        
        # Assigning a type to the variable 'points' (line 758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 8), 'points', asarray_call_result_156190)
        
        
        # Getting the type of 'points' (line 759)
        points_156191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 11), 'points')
        # Obtaining the member 'shape' of a type (line 759)
        shape_156192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 11), points_156191, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 759)
        tuple_156193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 759)
        # Adding element type (line 759)
        int_156194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 28), tuple_156193, int_156194)
        # Adding element type (line 759)
        int_156195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 28), tuple_156193, int_156195)
        
        # Applying the binary operator '!=' (line 759)
        result_ne_156196 = python_operator(stypy.reporting.localization.Localization(__file__, 759, 11), '!=', shape_156192, tuple_156193)
        
        # Testing the type of an if condition (line 759)
        if_condition_156197 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 759, 8), result_ne_156196)
        # Assigning a type to the variable 'if_condition_156197' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 8), 'if_condition_156197', if_condition_156197)
        # SSA begins for if statement (line 759)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 760)
        # Processing the call arguments (line 760)
        unicode_156199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, 29), 'unicode', u'Bbox points must be of the form "[[x0, y0], [x1, y1]]".')
        # Processing the call keyword arguments (line 760)
        kwargs_156200 = {}
        # Getting the type of 'ValueError' (line 760)
        ValueError_156198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 760)
        ValueError_call_result_156201 = invoke(stypy.reporting.localization.Localization(__file__, 760, 18), ValueError_156198, *[unicode_156199], **kwargs_156200)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 760, 12), ValueError_call_result_156201, 'raise parameter', BaseException)
        # SSA join for if statement (line 759)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 762):
        
        # Assigning a Name to a Attribute (line 762):
        # Getting the type of 'points' (line 762)
        points_156202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 23), 'points')
        # Getting the type of 'self' (line 762)
        self_156203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 8), 'self')
        # Setting the type of the member '_points' of a type (line 762)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 8), self_156203, '_points', points_156202)
        
        # Assigning a Call to a Attribute (line 763):
        
        # Assigning a Call to a Attribute (line 763):
        
        # Call to array(...): (line 763)
        # Processing the call arguments (line 763)
        
        # Obtaining an instance of the builtin type 'list' (line 763)
        list_156206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 763)
        # Adding element type (line 763)
        # Getting the type of 'np' (line 763)
        np_156207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 33), 'np', False)
        # Obtaining the member 'inf' of a type (line 763)
        inf_156208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 33), np_156207, 'inf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 763, 32), list_156206, inf_156208)
        # Adding element type (line 763)
        # Getting the type of 'np' (line 763)
        np_156209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 41), 'np', False)
        # Obtaining the member 'inf' of a type (line 763)
        inf_156210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 41), np_156209, 'inf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 763, 32), list_156206, inf_156210)
        
        # Processing the call keyword arguments (line 763)
        kwargs_156211 = {}
        # Getting the type of 'np' (line 763)
        np_156204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 23), 'np', False)
        # Obtaining the member 'array' of a type (line 763)
        array_156205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 23), np_156204, 'array')
        # Calling array(args, kwargs) (line 763)
        array_call_result_156212 = invoke(stypy.reporting.localization.Localization(__file__, 763, 23), array_156205, *[list_156206], **kwargs_156211)
        
        # Getting the type of 'self' (line 763)
        self_156213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'self')
        # Setting the type of the member '_minpos' of a type (line 763)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 8), self_156213, '_minpos', array_call_result_156212)
        
        # Assigning a Name to a Attribute (line 764):
        
        # Assigning a Name to a Attribute (line 764):
        # Getting the type of 'True' (line 764)
        True_156214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 23), 'True')
        # Getting the type of 'self' (line 764)
        self_156215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'self')
        # Setting the type of the member '_ignore' of a type (line 764)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 8), self_156215, '_ignore', True_156214)
        
        # Assigning a Call to a Attribute (line 768):
        
        # Assigning a Call to a Attribute (line 768):
        
        # Call to copy(...): (line 768)
        # Processing the call keyword arguments (line 768)
        kwargs_156219 = {}
        # Getting the type of 'self' (line 768)
        self_156216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 28), 'self', False)
        # Obtaining the member '_points' of a type (line 768)
        _points_156217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 28), self_156216, '_points')
        # Obtaining the member 'copy' of a type (line 768)
        copy_156218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 28), _points_156217, 'copy')
        # Calling copy(args, kwargs) (line 768)
        copy_call_result_156220 = invoke(stypy.reporting.localization.Localization(__file__, 768, 28), copy_156218, *[], **kwargs_156219)
        
        # Getting the type of 'self' (line 768)
        self_156221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'self')
        # Setting the type of the member '_points_orig' of a type (line 768)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 8), self_156221, '_points_orig', copy_call_result_156220)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @staticmethod
    @norecursion
    def unit(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'unit'
        module_type_store = module_type_store.open_function_context('unit', 780, 4, False)
        
        # Passed parameters checking function
        Bbox.unit.__dict__.__setitem__('stypy_localization', localization)
        Bbox.unit.__dict__.__setitem__('stypy_type_of_self', None)
        Bbox.unit.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.unit.__dict__.__setitem__('stypy_function_name', 'unit')
        Bbox.unit.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.unit.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.unit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.unit.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.unit.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.unit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.unit.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, 'unit', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'unit', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'unit(...)' code ##################

        unicode_156222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, (-1)), 'unicode', u'\n        (staticmethod) Create a new unit :class:`Bbox` from (0, 0) to\n        (1, 1).\n        ')
        
        # Call to Bbox(...): (line 786)
        # Processing the call arguments (line 786)
        
        # Call to array(...): (line 786)
        # Processing the call arguments (line 786)
        
        # Obtaining an instance of the builtin type 'list' (line 786)
        list_156226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 786)
        # Adding element type (line 786)
        
        # Obtaining an instance of the builtin type 'list' (line 786)
        list_156227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 786)
        # Adding element type (line 786)
        float_156228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 31), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 786, 30), list_156227, float_156228)
        # Adding element type (line 786)
        float_156229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 786, 30), list_156227, float_156229)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 786, 29), list_156226, list_156227)
        # Adding element type (line 786)
        
        # Obtaining an instance of the builtin type 'list' (line 786)
        list_156230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 786)
        # Adding element type (line 786)
        float_156231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 43), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 786, 42), list_156230, float_156231)
        # Adding element type (line 786)
        float_156232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 48), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 786, 42), list_156230, float_156232)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 786, 29), list_156226, list_156230)
        
        # Getting the type of 'float' (line 786)
        float_156233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 55), 'float', False)
        # Processing the call keyword arguments (line 786)
        kwargs_156234 = {}
        # Getting the type of 'np' (line 786)
        np_156224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 786)
        array_156225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 20), np_156224, 'array')
        # Calling array(args, kwargs) (line 786)
        array_call_result_156235 = invoke(stypy.reporting.localization.Localization(__file__, 786, 20), array_156225, *[list_156226, float_156233], **kwargs_156234)
        
        # Processing the call keyword arguments (line 786)
        kwargs_156236 = {}
        # Getting the type of 'Bbox' (line 786)
        Bbox_156223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 786)
        Bbox_call_result_156237 = invoke(stypy.reporting.localization.Localization(__file__, 786, 15), Bbox_156223, *[array_call_result_156235], **kwargs_156236)
        
        # Assigning a type to the variable 'stypy_return_type' (line 786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 8), 'stypy_return_type', Bbox_call_result_156237)
        
        # ################# End of 'unit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'unit' in the type store
        # Getting the type of 'stypy_return_type' (line 780)
        stypy_return_type_156238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156238)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'unit'
        return stypy_return_type_156238


    @staticmethod
    @norecursion
    def null(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'null'
        module_type_store = module_type_store.open_function_context('null', 788, 4, False)
        
        # Passed parameters checking function
        Bbox.null.__dict__.__setitem__('stypy_localization', localization)
        Bbox.null.__dict__.__setitem__('stypy_type_of_self', None)
        Bbox.null.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.null.__dict__.__setitem__('stypy_function_name', 'null')
        Bbox.null.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.null.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.null.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.null.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.null.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.null.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.null.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, 'null', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'null', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'null(...)' code ##################

        unicode_156239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, (-1)), 'unicode', u'\n        (staticmethod) Create a new null :class:`Bbox` from (inf, inf) to\n        (-inf, -inf).\n        ')
        
        # Call to Bbox(...): (line 794)
        # Processing the call arguments (line 794)
        
        # Call to array(...): (line 794)
        # Processing the call arguments (line 794)
        
        # Obtaining an instance of the builtin type 'list' (line 794)
        list_156243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 794)
        # Adding element type (line 794)
        
        # Obtaining an instance of the builtin type 'list' (line 794)
        list_156244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 794)
        # Adding element type (line 794)
        # Getting the type of 'np' (line 794)
        np_156245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 31), 'np', False)
        # Obtaining the member 'inf' of a type (line 794)
        inf_156246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 31), np_156245, 'inf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 794, 30), list_156244, inf_156246)
        # Adding element type (line 794)
        # Getting the type of 'np' (line 794)
        np_156247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 39), 'np', False)
        # Obtaining the member 'inf' of a type (line 794)
        inf_156248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 39), np_156247, 'inf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 794, 30), list_156244, inf_156248)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 794, 29), list_156243, list_156244)
        # Adding element type (line 794)
        
        # Obtaining an instance of the builtin type 'list' (line 794)
        list_156249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 794)
        # Adding element type (line 794)
        
        # Getting the type of 'np' (line 794)
        np_156250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 50), 'np', False)
        # Obtaining the member 'inf' of a type (line 794)
        inf_156251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 50), np_156250, 'inf')
        # Applying the 'usub' unary operator (line 794)
        result___neg___156252 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 49), 'usub', inf_156251)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 794, 48), list_156249, result___neg___156252)
        # Adding element type (line 794)
        
        # Getting the type of 'np' (line 794)
        np_156253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 59), 'np', False)
        # Obtaining the member 'inf' of a type (line 794)
        inf_156254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 59), np_156253, 'inf')
        # Applying the 'usub' unary operator (line 794)
        result___neg___156255 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 58), 'usub', inf_156254)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 794, 48), list_156249, result___neg___156255)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 794, 29), list_156243, list_156249)
        
        # Getting the type of 'float' (line 794)
        float_156256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 69), 'float', False)
        # Processing the call keyword arguments (line 794)
        kwargs_156257 = {}
        # Getting the type of 'np' (line 794)
        np_156241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 794)
        array_156242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 20), np_156241, 'array')
        # Calling array(args, kwargs) (line 794)
        array_call_result_156258 = invoke(stypy.reporting.localization.Localization(__file__, 794, 20), array_156242, *[list_156243, float_156256], **kwargs_156257)
        
        # Processing the call keyword arguments (line 794)
        kwargs_156259 = {}
        # Getting the type of 'Bbox' (line 794)
        Bbox_156240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 794)
        Bbox_call_result_156260 = invoke(stypy.reporting.localization.Localization(__file__, 794, 15), Bbox_156240, *[array_call_result_156258], **kwargs_156259)
        
        # Assigning a type to the variable 'stypy_return_type' (line 794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'stypy_return_type', Bbox_call_result_156260)
        
        # ################# End of 'null(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'null' in the type store
        # Getting the type of 'stypy_return_type' (line 788)
        stypy_return_type_156261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156261)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'null'
        return stypy_return_type_156261


    @staticmethod
    @norecursion
    def from_bounds(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'from_bounds'
        module_type_store = module_type_store.open_function_context('from_bounds', 796, 4, False)
        
        # Passed parameters checking function
        Bbox.from_bounds.__dict__.__setitem__('stypy_localization', localization)
        Bbox.from_bounds.__dict__.__setitem__('stypy_type_of_self', None)
        Bbox.from_bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.from_bounds.__dict__.__setitem__('stypy_function_name', 'from_bounds')
        Bbox.from_bounds.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'width', 'height'])
        Bbox.from_bounds.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.from_bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.from_bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.from_bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.from_bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.from_bounds.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, None, module_type_store, 'from_bounds', ['x0', 'y0', 'width', 'height'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'from_bounds', localization, ['y0', 'width', 'height'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'from_bounds(...)' code ##################

        unicode_156262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, (-1)), 'unicode', u'\n        (staticmethod) Create a new :class:`Bbox` from *x0*, *y0*,\n        *width* and *height*.\n\n        *width* and *height* may be negative.\n        ')
        
        # Call to from_extents(...): (line 804)
        # Processing the call arguments (line 804)
        # Getting the type of 'x0' (line 804)
        x0_156265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 33), 'x0', False)
        # Getting the type of 'y0' (line 804)
        y0_156266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 37), 'y0', False)
        # Getting the type of 'x0' (line 804)
        x0_156267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 41), 'x0', False)
        # Getting the type of 'width' (line 804)
        width_156268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 46), 'width', False)
        # Applying the binary operator '+' (line 804)
        result_add_156269 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 41), '+', x0_156267, width_156268)
        
        # Getting the type of 'y0' (line 804)
        y0_156270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 53), 'y0', False)
        # Getting the type of 'height' (line 804)
        height_156271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 58), 'height', False)
        # Applying the binary operator '+' (line 804)
        result_add_156272 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 53), '+', y0_156270, height_156271)
        
        # Processing the call keyword arguments (line 804)
        kwargs_156273 = {}
        # Getting the type of 'Bbox' (line 804)
        Bbox_156263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 15), 'Bbox', False)
        # Obtaining the member 'from_extents' of a type (line 804)
        from_extents_156264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 15), Bbox_156263, 'from_extents')
        # Calling from_extents(args, kwargs) (line 804)
        from_extents_call_result_156274 = invoke(stypy.reporting.localization.Localization(__file__, 804, 15), from_extents_156264, *[x0_156265, y0_156266, result_add_156269, result_add_156272], **kwargs_156273)
        
        # Assigning a type to the variable 'stypy_return_type' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 8), 'stypy_return_type', from_extents_call_result_156274)
        
        # ################# End of 'from_bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'from_bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 796)
        stypy_return_type_156275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156275)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'from_bounds'
        return stypy_return_type_156275


    @staticmethod
    @norecursion
    def from_extents(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'from_extents'
        module_type_store = module_type_store.open_function_context('from_extents', 806, 4, False)
        
        # Passed parameters checking function
        Bbox.from_extents.__dict__.__setitem__('stypy_localization', localization)
        Bbox.from_extents.__dict__.__setitem__('stypy_type_of_self', None)
        Bbox.from_extents.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.from_extents.__dict__.__setitem__('stypy_function_name', 'from_extents')
        Bbox.from_extents.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.from_extents.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Bbox.from_extents.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.from_extents.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.from_extents.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.from_extents.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.from_extents.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, 'from_extents', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'from_extents', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'from_extents(...)' code ##################

        unicode_156276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, (-1)), 'unicode', u'\n        (staticmethod) Create a new Bbox from *left*, *bottom*,\n        *right* and *top*.\n\n        The *y*-axis increases upwards.\n        ')
        
        # Assigning a Call to a Name (line 814):
        
        # Assigning a Call to a Name (line 814):
        
        # Call to reshape(...): (line 814)
        # Processing the call arguments (line 814)
        int_156285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 53), 'int')
        int_156286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 56), 'int')
        # Processing the call keyword arguments (line 814)
        kwargs_156287 = {}
        
        # Call to array(...): (line 814)
        # Processing the call arguments (line 814)
        # Getting the type of 'args' (line 814)
        args_156279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 26), 'args', False)
        # Processing the call keyword arguments (line 814)
        # Getting the type of 'float' (line 814)
        float_156280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 38), 'float', False)
        keyword_156281 = float_156280
        kwargs_156282 = {'dtype': keyword_156281}
        # Getting the type of 'np' (line 814)
        np_156277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 17), 'np', False)
        # Obtaining the member 'array' of a type (line 814)
        array_156278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 17), np_156277, 'array')
        # Calling array(args, kwargs) (line 814)
        array_call_result_156283 = invoke(stypy.reporting.localization.Localization(__file__, 814, 17), array_156278, *[args_156279], **kwargs_156282)
        
        # Obtaining the member 'reshape' of a type (line 814)
        reshape_156284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 17), array_call_result_156283, 'reshape')
        # Calling reshape(args, kwargs) (line 814)
        reshape_call_result_156288 = invoke(stypy.reporting.localization.Localization(__file__, 814, 17), reshape_156284, *[int_156285, int_156286], **kwargs_156287)
        
        # Assigning a type to the variable 'points' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), 'points', reshape_call_result_156288)
        
        # Call to Bbox(...): (line 815)
        # Processing the call arguments (line 815)
        # Getting the type of 'points' (line 815)
        points_156290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 20), 'points', False)
        # Processing the call keyword arguments (line 815)
        kwargs_156291 = {}
        # Getting the type of 'Bbox' (line 815)
        Bbox_156289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 815)
        Bbox_call_result_156292 = invoke(stypy.reporting.localization.Localization(__file__, 815, 15), Bbox_156289, *[points_156290], **kwargs_156291)
        
        # Assigning a type to the variable 'stypy_return_type' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'stypy_return_type', Bbox_call_result_156292)
        
        # ################# End of 'from_extents(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'from_extents' in the type store
        # Getting the type of 'stypy_return_type' (line 806)
        stypy_return_type_156293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156293)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'from_extents'
        return stypy_return_type_156293


    @norecursion
    def __format__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__format__'
        module_type_store = module_type_store.open_function_context('__format__', 817, 4, False)
        # Assigning a type to the variable 'self' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.__format__.__dict__.__setitem__('stypy_localization', localization)
        Bbox.__format__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.__format__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.__format__.__dict__.__setitem__('stypy_function_name', 'Bbox.__format__')
        Bbox.__format__.__dict__.__setitem__('stypy_param_names_list', ['fmt'])
        Bbox.__format__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.__format__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.__format__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.__format__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.__format__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.__format__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.__format__', ['fmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__format__', localization, ['fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__format__(...)' code ##################

        
        # Call to format(...): (line 819)
        # Processing the call arguments (line 819)
        # Getting the type of 'self' (line 820)
        self_156296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 19), 'self', False)
        # Getting the type of 'fmt' (line 820)
        fmt_156297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 25), 'fmt', False)
        # Processing the call keyword arguments (line 819)
        kwargs_156298 = {}
        unicode_156294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 12), 'unicode', u'Bbox(x0={0.x0:{1}}, y0={0.y0:{1}}, x1={0.x1:{1}}, y1={0.y1:{1}})')
        # Obtaining the member 'format' of a type (line 819)
        format_156295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 12), unicode_156294, 'format')
        # Calling format(args, kwargs) (line 819)
        format_call_result_156299 = invoke(stypy.reporting.localization.Localization(__file__, 819, 12), format_156295, *[self_156296, fmt_156297], **kwargs_156298)
        
        # Assigning a type to the variable 'stypy_return_type' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'stypy_return_type', format_call_result_156299)
        
        # ################# End of '__format__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__format__' in the type store
        # Getting the type of 'stypy_return_type' (line 817)
        stypy_return_type_156300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156300)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__format__'
        return stypy_return_type_156300


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 822, 4, False)
        # Assigning a type to the variable 'self' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Bbox.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Bbox.stypy__str__')
        Bbox.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Call to format(...): (line 823)
        # Processing the call arguments (line 823)
        # Getting the type of 'self' (line 823)
        self_156302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 22), 'self', False)
        unicode_156303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 28), 'unicode', u'')
        # Processing the call keyword arguments (line 823)
        kwargs_156304 = {}
        # Getting the type of 'format' (line 823)
        format_156301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 15), 'format', False)
        # Calling format(args, kwargs) (line 823)
        format_call_result_156305 = invoke(stypy.reporting.localization.Localization(__file__, 823, 15), format_156301, *[self_156302, unicode_156303], **kwargs_156304)
        
        # Assigning a type to the variable 'stypy_return_type' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'stypy_return_type', format_call_result_156305)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 822)
        stypy_return_type_156306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156306)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_156306


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 825, 4, False)
        # Assigning a type to the variable 'self' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'Bbox.stypy__repr__')
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        
        # Call to format(...): (line 826)
        # Processing the call arguments (line 826)
        # Getting the type of 'self' (line 826)
        self_156309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 67), 'self', False)
        # Processing the call keyword arguments (line 826)
        kwargs_156310 = {}
        unicode_156307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 15), 'unicode', u'Bbox([[{0.x0}, {0.y0}], [{0.x1}, {0.y1}]])')
        # Obtaining the member 'format' of a type (line 826)
        format_156308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 15), unicode_156307, 'format')
        # Calling format(args, kwargs) (line 826)
        format_call_result_156311 = invoke(stypy.reporting.localization.Localization(__file__, 826, 15), format_156308, *[self_156309], **kwargs_156310)
        
        # Assigning a type to the variable 'stypy_return_type' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'stypy_return_type', format_call_result_156311)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 825)
        stypy_return_type_156312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156312)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_156312


    @norecursion
    def ignore(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ignore'
        module_type_store = module_type_store.open_function_context('ignore', 828, 4, False)
        # Assigning a type to the variable 'self' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.ignore.__dict__.__setitem__('stypy_localization', localization)
        Bbox.ignore.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.ignore.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.ignore.__dict__.__setitem__('stypy_function_name', 'Bbox.ignore')
        Bbox.ignore.__dict__.__setitem__('stypy_param_names_list', ['value'])
        Bbox.ignore.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.ignore.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.ignore.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.ignore.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.ignore.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.ignore.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.ignore', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ignore', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ignore(...)' code ##################

        unicode_156313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, (-1)), 'unicode', u'\n        Set whether the existing bounds of the box should be ignored\n        by subsequent calls to :meth:`update_from_data_xy`.\n\n        *value*:\n\n           - When True, subsequent calls to :meth:`update_from_data_xy`\n             will ignore the existing bounds of the :class:`Bbox`.\n\n           - When False, subsequent calls to :meth:`update_from_data_xy`\n             will include the existing bounds of the :class:`Bbox`.\n        ')
        
        # Assigning a Name to a Attribute (line 841):
        
        # Assigning a Name to a Attribute (line 841):
        # Getting the type of 'value' (line 841)
        value_156314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 23), 'value')
        # Getting the type of 'self' (line 841)
        self_156315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 8), 'self')
        # Setting the type of the member '_ignore' of a type (line 841)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 8), self_156315, '_ignore', value_156314)
        
        # ################# End of 'ignore(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ignore' in the type store
        # Getting the type of 'stypy_return_type' (line 828)
        stypy_return_type_156316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156316)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ignore'
        return stypy_return_type_156316


    @norecursion
    def update_from_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 844)
        None_156317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 44), 'None')
        defaults = [None_156317]
        # Create a new context for function 'update_from_data'
        module_type_store = module_type_store.open_function_context('update_from_data', 843, 4, False)
        # Assigning a type to the variable 'self' (line 844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 844, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.update_from_data.__dict__.__setitem__('stypy_localization', localization)
        Bbox.update_from_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.update_from_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.update_from_data.__dict__.__setitem__('stypy_function_name', 'Bbox.update_from_data')
        Bbox.update_from_data.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'ignore'])
        Bbox.update_from_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.update_from_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.update_from_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.update_from_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.update_from_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.update_from_data.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.update_from_data', ['x', 'y', 'ignore'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_from_data', localization, ['x', 'y', 'ignore'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_from_data(...)' code ##################

        unicode_156318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, (-1)), 'unicode', u'\n        Update the bounds of the :class:`Bbox` based on the passed in\n        data.  After updating, the bounds will have positive *width*\n        and *height*; *x0* and *y0* will be the minimal values.\n\n        *x*: a numpy array of *x*-values\n\n        *y*: a numpy array of *y*-values\n\n        *ignore*:\n           - when True, ignore the existing bounds of the :class:`Bbox`.\n           - when False, include the existing bounds of the :class:`Bbox`.\n           - when None, use the last value passed to :meth:`ignore`.\n        ')
        
        # Call to warn(...): (line 859)
        # Processing the call arguments (line 859)
        unicode_156321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 12), 'unicode', u'update_from_data requires a memory copy -- please replace with update_from_data_xy')
        # Processing the call keyword arguments (line 859)
        kwargs_156322 = {}
        # Getting the type of 'warnings' (line 859)
        warnings_156319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 859)
        warn_156320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 8), warnings_156319, 'warn')
        # Calling warn(args, kwargs) (line 859)
        warn_call_result_156323 = invoke(stypy.reporting.localization.Localization(__file__, 859, 8), warn_156320, *[unicode_156321], **kwargs_156322)
        
        
        # Assigning a Call to a Name (line 863):
        
        # Assigning a Call to a Name (line 863):
        
        # Call to hstack(...): (line 863)
        # Processing the call arguments (line 863)
        
        # Obtaining an instance of the builtin type 'tuple' (line 863)
        tuple_156326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 863)
        # Adding element type (line 863)
        
        # Call to reshape(...): (line 863)
        # Processing the call arguments (line 863)
        
        # Obtaining an instance of the builtin type 'tuple' (line 863)
        tuple_156329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 863)
        # Adding element type (line 863)
        
        # Call to len(...): (line 863)
        # Processing the call arguments (line 863)
        # Getting the type of 'x' (line 863)
        x_156331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 39), 'x', False)
        # Processing the call keyword arguments (line 863)
        kwargs_156332 = {}
        # Getting the type of 'len' (line 863)
        len_156330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 35), 'len', False)
        # Calling len(args, kwargs) (line 863)
        len_call_result_156333 = invoke(stypy.reporting.localization.Localization(__file__, 863, 35), len_156330, *[x_156331], **kwargs_156332)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 863, 35), tuple_156329, len_call_result_156333)
        # Adding element type (line 863)
        int_156334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 863, 35), tuple_156329, int_156334)
        
        # Processing the call keyword arguments (line 863)
        kwargs_156335 = {}
        # Getting the type of 'x' (line 863)
        x_156327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 24), 'x', False)
        # Obtaining the member 'reshape' of a type (line 863)
        reshape_156328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 24), x_156327, 'reshape')
        # Calling reshape(args, kwargs) (line 863)
        reshape_call_result_156336 = invoke(stypy.reporting.localization.Localization(__file__, 863, 24), reshape_156328, *[tuple_156329], **kwargs_156335)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 863, 24), tuple_156326, reshape_call_result_156336)
        # Adding element type (line 863)
        
        # Call to reshape(...): (line 863)
        # Processing the call arguments (line 863)
        
        # Obtaining an instance of the builtin type 'tuple' (line 863)
        tuple_156339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 59), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 863)
        # Adding element type (line 863)
        
        # Call to len(...): (line 863)
        # Processing the call arguments (line 863)
        # Getting the type of 'y' (line 863)
        y_156341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 63), 'y', False)
        # Processing the call keyword arguments (line 863)
        kwargs_156342 = {}
        # Getting the type of 'len' (line 863)
        len_156340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 59), 'len', False)
        # Calling len(args, kwargs) (line 863)
        len_call_result_156343 = invoke(stypy.reporting.localization.Localization(__file__, 863, 59), len_156340, *[y_156341], **kwargs_156342)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 863, 59), tuple_156339, len_call_result_156343)
        # Adding element type (line 863)
        int_156344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 67), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 863, 59), tuple_156339, int_156344)
        
        # Processing the call keyword arguments (line 863)
        kwargs_156345 = {}
        # Getting the type of 'y' (line 863)
        y_156337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 48), 'y', False)
        # Obtaining the member 'reshape' of a type (line 863)
        reshape_156338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 48), y_156337, 'reshape')
        # Calling reshape(args, kwargs) (line 863)
        reshape_call_result_156346 = invoke(stypy.reporting.localization.Localization(__file__, 863, 48), reshape_156338, *[tuple_156339], **kwargs_156345)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 863, 24), tuple_156326, reshape_call_result_156346)
        
        # Processing the call keyword arguments (line 863)
        kwargs_156347 = {}
        # Getting the type of 'np' (line 863)
        np_156324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 13), 'np', False)
        # Obtaining the member 'hstack' of a type (line 863)
        hstack_156325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 13), np_156324, 'hstack')
        # Calling hstack(args, kwargs) (line 863)
        hstack_call_result_156348 = invoke(stypy.reporting.localization.Localization(__file__, 863, 13), hstack_156325, *[tuple_156326], **kwargs_156347)
        
        # Assigning a type to the variable 'xy' (line 863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 8), 'xy', hstack_call_result_156348)
        
        # Call to update_from_data_xy(...): (line 864)
        # Processing the call arguments (line 864)
        # Getting the type of 'xy' (line 864)
        xy_156351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 40), 'xy', False)
        # Getting the type of 'ignore' (line 864)
        ignore_156352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 44), 'ignore', False)
        # Processing the call keyword arguments (line 864)
        kwargs_156353 = {}
        # Getting the type of 'self' (line 864)
        self_156349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 15), 'self', False)
        # Obtaining the member 'update_from_data_xy' of a type (line 864)
        update_from_data_xy_156350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 15), self_156349, 'update_from_data_xy')
        # Calling update_from_data_xy(args, kwargs) (line 864)
        update_from_data_xy_call_result_156354 = invoke(stypy.reporting.localization.Localization(__file__, 864, 15), update_from_data_xy_156350, *[xy_156351, ignore_156352], **kwargs_156353)
        
        # Assigning a type to the variable 'stypy_return_type' (line 864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 8), 'stypy_return_type', update_from_data_xy_call_result_156354)
        
        # ################# End of 'update_from_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_from_data' in the type store
        # Getting the type of 'stypy_return_type' (line 843)
        stypy_return_type_156355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156355)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_from_data'
        return stypy_return_type_156355


    @norecursion
    def update_from_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 866)
        None_156356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 44), 'None')
        # Getting the type of 'True' (line 866)
        True_156357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 58), 'True')
        # Getting the type of 'True' (line 866)
        True_156358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 72), 'True')
        defaults = [None_156356, True_156357, True_156358]
        # Create a new context for function 'update_from_path'
        module_type_store = module_type_store.open_function_context('update_from_path', 866, 4, False)
        # Assigning a type to the variable 'self' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.update_from_path.__dict__.__setitem__('stypy_localization', localization)
        Bbox.update_from_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.update_from_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.update_from_path.__dict__.__setitem__('stypy_function_name', 'Bbox.update_from_path')
        Bbox.update_from_path.__dict__.__setitem__('stypy_param_names_list', ['path', 'ignore', 'updatex', 'updatey'])
        Bbox.update_from_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.update_from_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.update_from_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.update_from_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.update_from_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.update_from_path.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.update_from_path', ['path', 'ignore', 'updatex', 'updatey'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_from_path', localization, ['path', 'ignore', 'updatex', 'updatey'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_from_path(...)' code ##################

        unicode_156359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, (-1)), 'unicode', u'\n        Update the bounds of the :class:`Bbox` based on the passed in\n        data.  After updating, the bounds will have positive *width*\n        and *height*; *x0* and *y0* will be the minimal values.\n\n        *path*: a :class:`~matplotlib.path.Path` instance\n\n        *ignore*:\n           - when True, ignore the existing bounds of the :class:`Bbox`.\n           - when False, include the existing bounds of the :class:`Bbox`.\n           - when None, use the last value passed to :meth:`ignore`.\n\n        *updatex*: when True, update the x values\n\n        *updatey*: when True, update the y values\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 884)
        # Getting the type of 'ignore' (line 884)
        ignore_156360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 11), 'ignore')
        # Getting the type of 'None' (line 884)
        None_156361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 21), 'None')
        
        (may_be_156362, more_types_in_union_156363) = may_be_none(ignore_156360, None_156361)

        if may_be_156362:

            if more_types_in_union_156363:
                # Runtime conditional SSA (line 884)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 885):
            
            # Assigning a Attribute to a Name (line 885):
            # Getting the type of 'self' (line 885)
            self_156364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 21), 'self')
            # Obtaining the member '_ignore' of a type (line 885)
            _ignore_156365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 21), self_156364, '_ignore')
            # Assigning a type to the variable 'ignore' (line 885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 12), 'ignore', _ignore_156365)

            if more_types_in_union_156363:
                # SSA join for if statement (line 884)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'path' (line 887)
        path_156366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 11), 'path')
        # Obtaining the member 'vertices' of a type (line 887)
        vertices_156367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 11), path_156366, 'vertices')
        # Obtaining the member 'size' of a type (line 887)
        size_156368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 11), vertices_156367, 'size')
        int_156369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 33), 'int')
        # Applying the binary operator '==' (line 887)
        result_eq_156370 = python_operator(stypy.reporting.localization.Localization(__file__, 887, 11), '==', size_156368, int_156369)
        
        # Testing the type of an if condition (line 887)
        if_condition_156371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 887, 8), result_eq_156370)
        # Assigning a type to the variable 'if_condition_156371' (line 887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 8), 'if_condition_156371', if_condition_156371)
        # SSA begins for if statement (line 887)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 887)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 890):
        
        # Assigning a Call to a Name:
        
        # Call to update_path_extents(...): (line 890)
        # Processing the call arguments (line 890)
        # Getting the type of 'path' (line 891)
        path_156373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 12), 'path', False)
        # Getting the type of 'None' (line 891)
        None_156374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 18), 'None', False)
        # Getting the type of 'self' (line 891)
        self_156375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 24), 'self', False)
        # Obtaining the member '_points' of a type (line 891)
        _points_156376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 24), self_156375, '_points')
        # Getting the type of 'self' (line 891)
        self_156377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 38), 'self', False)
        # Obtaining the member '_minpos' of a type (line 891)
        _minpos_156378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 38), self_156377, '_minpos')
        # Getting the type of 'ignore' (line 891)
        ignore_156379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 52), 'ignore', False)
        # Processing the call keyword arguments (line 890)
        kwargs_156380 = {}
        # Getting the type of 'update_path_extents' (line 890)
        update_path_extents_156372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 34), 'update_path_extents', False)
        # Calling update_path_extents(args, kwargs) (line 890)
        update_path_extents_call_result_156381 = invoke(stypy.reporting.localization.Localization(__file__, 890, 34), update_path_extents_156372, *[path_156373, None_156374, _points_156376, _minpos_156378, ignore_156379], **kwargs_156380)
        
        # Assigning a type to the variable 'call_assignment_154295' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'call_assignment_154295', update_path_extents_call_result_156381)
        
        # Assigning a Call to a Name (line 890):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_156384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 890, 8), 'int')
        # Processing the call keyword arguments
        kwargs_156385 = {}
        # Getting the type of 'call_assignment_154295' (line 890)
        call_assignment_154295_156382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'call_assignment_154295', False)
        # Obtaining the member '__getitem__' of a type (line 890)
        getitem___156383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 8), call_assignment_154295_156382, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_156386 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___156383, *[int_156384], **kwargs_156385)
        
        # Assigning a type to the variable 'call_assignment_154296' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'call_assignment_154296', getitem___call_result_156386)
        
        # Assigning a Name to a Name (line 890):
        # Getting the type of 'call_assignment_154296' (line 890)
        call_assignment_154296_156387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'call_assignment_154296')
        # Assigning a type to the variable 'points' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'points', call_assignment_154296_156387)
        
        # Assigning a Call to a Name (line 890):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_156390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 890, 8), 'int')
        # Processing the call keyword arguments
        kwargs_156391 = {}
        # Getting the type of 'call_assignment_154295' (line 890)
        call_assignment_154295_156388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'call_assignment_154295', False)
        # Obtaining the member '__getitem__' of a type (line 890)
        getitem___156389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 8), call_assignment_154295_156388, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_156392 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___156389, *[int_156390], **kwargs_156391)
        
        # Assigning a type to the variable 'call_assignment_154297' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'call_assignment_154297', getitem___call_result_156392)
        
        # Assigning a Name to a Name (line 890):
        # Getting the type of 'call_assignment_154297' (line 890)
        call_assignment_154297_156393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'call_assignment_154297')
        # Assigning a type to the variable 'minpos' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 16), 'minpos', call_assignment_154297_156393)
        
        # Assigning a Call to a Name (line 890):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_156396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 890, 8), 'int')
        # Processing the call keyword arguments
        kwargs_156397 = {}
        # Getting the type of 'call_assignment_154295' (line 890)
        call_assignment_154295_156394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'call_assignment_154295', False)
        # Obtaining the member '__getitem__' of a type (line 890)
        getitem___156395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 8), call_assignment_154295_156394, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_156398 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___156395, *[int_156396], **kwargs_156397)
        
        # Assigning a type to the variable 'call_assignment_154298' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'call_assignment_154298', getitem___call_result_156398)
        
        # Assigning a Name to a Name (line 890):
        # Getting the type of 'call_assignment_154298' (line 890)
        call_assignment_154298_156399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'call_assignment_154298')
        # Assigning a type to the variable 'changed' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 24), 'changed', call_assignment_154298_156399)
        
        # Getting the type of 'changed' (line 893)
        changed_156400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 11), 'changed')
        # Testing the type of an if condition (line 893)
        if_condition_156401 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 893, 8), changed_156400)
        # Assigning a type to the variable 'if_condition_156401' (line 893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 8), 'if_condition_156401', if_condition_156401)
        # SSA begins for if statement (line 893)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to invalidate(...): (line 894)
        # Processing the call keyword arguments (line 894)
        kwargs_156404 = {}
        # Getting the type of 'self' (line 894)
        self_156402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 12), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 894)
        invalidate_156403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 12), self_156402, 'invalidate')
        # Calling invalidate(args, kwargs) (line 894)
        invalidate_call_result_156405 = invoke(stypy.reporting.localization.Localization(__file__, 894, 12), invalidate_156403, *[], **kwargs_156404)
        
        
        # Getting the type of 'updatex' (line 895)
        updatex_156406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 15), 'updatex')
        # Testing the type of an if condition (line 895)
        if_condition_156407 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 895, 12), updatex_156406)
        # Assigning a type to the variable 'if_condition_156407' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 12), 'if_condition_156407', if_condition_156407)
        # SSA begins for if statement (line 895)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 896):
        
        # Assigning a Subscript to a Subscript (line 896):
        
        # Obtaining the type of the subscript
        slice_156408 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 896, 37), None, None, None)
        int_156409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 47), 'int')
        # Getting the type of 'points' (line 896)
        points_156410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 37), 'points')
        # Obtaining the member '__getitem__' of a type (line 896)
        getitem___156411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 37), points_156410, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 896)
        subscript_call_result_156412 = invoke(stypy.reporting.localization.Localization(__file__, 896, 37), getitem___156411, (slice_156408, int_156409))
        
        # Getting the type of 'self' (line 896)
        self_156413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 16), 'self')
        # Obtaining the member '_points' of a type (line 896)
        _points_156414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 16), self_156413, '_points')
        slice_156415 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 896, 16), None, None, None)
        int_156416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 32), 'int')
        # Storing an element on a container (line 896)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 16), _points_156414, ((slice_156415, int_156416), subscript_call_result_156412))
        
        # Assigning a Subscript to a Subscript (line 897):
        
        # Assigning a Subscript to a Subscript (line 897):
        
        # Obtaining the type of the subscript
        int_156417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 41), 'int')
        # Getting the type of 'minpos' (line 897)
        minpos_156418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 34), 'minpos')
        # Obtaining the member '__getitem__' of a type (line 897)
        getitem___156419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 34), minpos_156418, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 897)
        subscript_call_result_156420 = invoke(stypy.reporting.localization.Localization(__file__, 897, 34), getitem___156419, int_156417)
        
        # Getting the type of 'self' (line 897)
        self_156421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 16), 'self')
        # Obtaining the member '_minpos' of a type (line 897)
        _minpos_156422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 16), self_156421, '_minpos')
        int_156423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 29), 'int')
        # Storing an element on a container (line 897)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 897, 16), _minpos_156422, (int_156423, subscript_call_result_156420))
        # SSA join for if statement (line 895)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'updatey' (line 898)
        updatey_156424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 15), 'updatey')
        # Testing the type of an if condition (line 898)
        if_condition_156425 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 898, 12), updatey_156424)
        # Assigning a type to the variable 'if_condition_156425' (line 898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 12), 'if_condition_156425', if_condition_156425)
        # SSA begins for if statement (line 898)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 899):
        
        # Assigning a Subscript to a Subscript (line 899):
        
        # Obtaining the type of the subscript
        slice_156426 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 899, 37), None, None, None)
        int_156427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 47), 'int')
        # Getting the type of 'points' (line 899)
        points_156428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 37), 'points')
        # Obtaining the member '__getitem__' of a type (line 899)
        getitem___156429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 37), points_156428, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 899)
        subscript_call_result_156430 = invoke(stypy.reporting.localization.Localization(__file__, 899, 37), getitem___156429, (slice_156426, int_156427))
        
        # Getting the type of 'self' (line 899)
        self_156431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 16), 'self')
        # Obtaining the member '_points' of a type (line 899)
        _points_156432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 16), self_156431, '_points')
        slice_156433 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 899, 16), None, None, None)
        int_156434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 32), 'int')
        # Storing an element on a container (line 899)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 899, 16), _points_156432, ((slice_156433, int_156434), subscript_call_result_156430))
        
        # Assigning a Subscript to a Subscript (line 900):
        
        # Assigning a Subscript to a Subscript (line 900):
        
        # Obtaining the type of the subscript
        int_156435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 41), 'int')
        # Getting the type of 'minpos' (line 900)
        minpos_156436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 34), 'minpos')
        # Obtaining the member '__getitem__' of a type (line 900)
        getitem___156437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 34), minpos_156436, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 900)
        subscript_call_result_156438 = invoke(stypy.reporting.localization.Localization(__file__, 900, 34), getitem___156437, int_156435)
        
        # Getting the type of 'self' (line 900)
        self_156439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 16), 'self')
        # Obtaining the member '_minpos' of a type (line 900)
        _minpos_156440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 16), self_156439, '_minpos')
        int_156441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 29), 'int')
        # Storing an element on a container (line 900)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 900, 16), _minpos_156440, (int_156441, subscript_call_result_156438))
        # SSA join for if statement (line 898)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 893)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update_from_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_from_path' in the type store
        # Getting the type of 'stypy_return_type' (line 866)
        stypy_return_type_156442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156442)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_from_path'
        return stypy_return_type_156442


    @norecursion
    def update_from_data_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 902)
        None_156443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 45), 'None')
        # Getting the type of 'True' (line 902)
        True_156444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 59), 'True')
        # Getting the type of 'True' (line 902)
        True_156445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 73), 'True')
        defaults = [None_156443, True_156444, True_156445]
        # Create a new context for function 'update_from_data_xy'
        module_type_store = module_type_store.open_function_context('update_from_data_xy', 902, 4, False)
        # Assigning a type to the variable 'self' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_localization', localization)
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_function_name', 'Bbox.update_from_data_xy')
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_param_names_list', ['xy', 'ignore', 'updatex', 'updatey'])
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.update_from_data_xy.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.update_from_data_xy', ['xy', 'ignore', 'updatex', 'updatey'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_from_data_xy', localization, ['xy', 'ignore', 'updatex', 'updatey'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_from_data_xy(...)' code ##################

        unicode_156446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, (-1)), 'unicode', u'\n        Update the bounds of the :class:`Bbox` based on the passed in\n        data.  After updating, the bounds will have positive *width*\n        and *height*; *x0* and *y0* will be the minimal values.\n\n        *xy*: a numpy array of 2D points\n\n        *ignore*:\n           - when True, ignore the existing bounds of the :class:`Bbox`.\n           - when False, include the existing bounds of the :class:`Bbox`.\n           - when None, use the last value passed to :meth:`ignore`.\n\n        *updatex*: when True, update the x values\n\n        *updatey*: when True, update the y values\n        ')
        
        
        
        # Call to len(...): (line 919)
        # Processing the call arguments (line 919)
        # Getting the type of 'xy' (line 919)
        xy_156448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 15), 'xy', False)
        # Processing the call keyword arguments (line 919)
        kwargs_156449 = {}
        # Getting the type of 'len' (line 919)
        len_156447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 11), 'len', False)
        # Calling len(args, kwargs) (line 919)
        len_call_result_156450 = invoke(stypy.reporting.localization.Localization(__file__, 919, 11), len_156447, *[xy_156448], **kwargs_156449)
        
        int_156451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 22), 'int')
        # Applying the binary operator '==' (line 919)
        result_eq_156452 = python_operator(stypy.reporting.localization.Localization(__file__, 919, 11), '==', len_call_result_156450, int_156451)
        
        # Testing the type of an if condition (line 919)
        if_condition_156453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 919, 8), result_eq_156452)
        # Assigning a type to the variable 'if_condition_156453' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'if_condition_156453', if_condition_156453)
        # SSA begins for if statement (line 919)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 919)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 922):
        
        # Assigning a Call to a Name (line 922):
        
        # Call to Path(...): (line 922)
        # Processing the call arguments (line 922)
        # Getting the type of 'xy' (line 922)
        xy_156455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 20), 'xy', False)
        # Processing the call keyword arguments (line 922)
        kwargs_156456 = {}
        # Getting the type of 'Path' (line 922)
        Path_156454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 15), 'Path', False)
        # Calling Path(args, kwargs) (line 922)
        Path_call_result_156457 = invoke(stypy.reporting.localization.Localization(__file__, 922, 15), Path_156454, *[xy_156455], **kwargs_156456)
        
        # Assigning a type to the variable 'path' (line 922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 8), 'path', Path_call_result_156457)
        
        # Call to update_from_path(...): (line 923)
        # Processing the call arguments (line 923)
        # Getting the type of 'path' (line 923)
        path_156460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 30), 'path', False)
        # Processing the call keyword arguments (line 923)
        # Getting the type of 'ignore' (line 923)
        ignore_156461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 43), 'ignore', False)
        keyword_156462 = ignore_156461
        # Getting the type of 'updatex' (line 924)
        updatex_156463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 44), 'updatex', False)
        keyword_156464 = updatex_156463
        # Getting the type of 'updatey' (line 924)
        updatey_156465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 61), 'updatey', False)
        keyword_156466 = updatey_156465
        kwargs_156467 = {'ignore': keyword_156462, 'updatex': keyword_156464, 'updatey': keyword_156466}
        # Getting the type of 'self' (line 923)
        self_156458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'self', False)
        # Obtaining the member 'update_from_path' of a type (line 923)
        update_from_path_156459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 8), self_156458, 'update_from_path')
        # Calling update_from_path(args, kwargs) (line 923)
        update_from_path_call_result_156468 = invoke(stypy.reporting.localization.Localization(__file__, 923, 8), update_from_path_156459, *[path_156460], **kwargs_156467)
        
        
        # ################# End of 'update_from_data_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_from_data_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 902)
        stypy_return_type_156469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156469)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_from_data_xy'
        return stypy_return_type_156469


    @norecursion
    def x0(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'x0'
        module_type_store = module_type_store.open_function_context('x0', 926, 4, False)
        # Assigning a type to the variable 'self' (line 927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.x0.__dict__.__setitem__('stypy_localization', localization)
        Bbox.x0.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.x0.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.x0.__dict__.__setitem__('stypy_function_name', 'Bbox.x0')
        Bbox.x0.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Bbox.x0.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.x0.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.x0.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.x0.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.x0.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.x0.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.x0', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'x0', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'x0(...)' code ##################

        
        # Assigning a Name to a Subscript (line 928):
        
        # Assigning a Name to a Subscript (line 928):
        # Getting the type of 'val' (line 928)
        val_156470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 29), 'val')
        # Getting the type of 'self' (line 928)
        self_156471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 8), 'self')
        # Obtaining the member '_points' of a type (line 928)
        _points_156472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 8), self_156471, '_points')
        
        # Obtaining an instance of the builtin type 'tuple' (line 928)
        tuple_156473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 928)
        # Adding element type (line 928)
        int_156474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 928, 21), tuple_156473, int_156474)
        # Adding element type (line 928)
        int_156475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 928, 21), tuple_156473, int_156475)
        
        # Storing an element on a container (line 928)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 928, 8), _points_156472, (tuple_156473, val_156470))
        
        # Call to invalidate(...): (line 929)
        # Processing the call keyword arguments (line 929)
        kwargs_156478 = {}
        # Getting the type of 'self' (line 929)
        self_156476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 929)
        invalidate_156477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 8), self_156476, 'invalidate')
        # Calling invalidate(args, kwargs) (line 929)
        invalidate_call_result_156479 = invoke(stypy.reporting.localization.Localization(__file__, 929, 8), invalidate_156477, *[], **kwargs_156478)
        
        
        # ################# End of 'x0(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'x0' in the type store
        # Getting the type of 'stypy_return_type' (line 926)
        stypy_return_type_156480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156480)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'x0'
        return stypy_return_type_156480


    @norecursion
    def y0(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'y0'
        module_type_store = module_type_store.open_function_context('y0', 931, 4, False)
        # Assigning a type to the variable 'self' (line 932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.y0.__dict__.__setitem__('stypy_localization', localization)
        Bbox.y0.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.y0.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.y0.__dict__.__setitem__('stypy_function_name', 'Bbox.y0')
        Bbox.y0.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Bbox.y0.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.y0.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.y0.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.y0.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.y0.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.y0.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.y0', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'y0', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'y0(...)' code ##################

        
        # Assigning a Name to a Subscript (line 933):
        
        # Assigning a Name to a Subscript (line 933):
        # Getting the type of 'val' (line 933)
        val_156481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 29), 'val')
        # Getting the type of 'self' (line 933)
        self_156482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'self')
        # Obtaining the member '_points' of a type (line 933)
        _points_156483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 8), self_156482, '_points')
        
        # Obtaining an instance of the builtin type 'tuple' (line 933)
        tuple_156484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 933)
        # Adding element type (line 933)
        int_156485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 933, 21), tuple_156484, int_156485)
        # Adding element type (line 933)
        int_156486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 933, 21), tuple_156484, int_156486)
        
        # Storing an element on a container (line 933)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 933, 8), _points_156483, (tuple_156484, val_156481))
        
        # Call to invalidate(...): (line 934)
        # Processing the call keyword arguments (line 934)
        kwargs_156489 = {}
        # Getting the type of 'self' (line 934)
        self_156487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 934)
        invalidate_156488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 8), self_156487, 'invalidate')
        # Calling invalidate(args, kwargs) (line 934)
        invalidate_call_result_156490 = invoke(stypy.reporting.localization.Localization(__file__, 934, 8), invalidate_156488, *[], **kwargs_156489)
        
        
        # ################# End of 'y0(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'y0' in the type store
        # Getting the type of 'stypy_return_type' (line 931)
        stypy_return_type_156491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156491)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'y0'
        return stypy_return_type_156491


    @norecursion
    def x1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'x1'
        module_type_store = module_type_store.open_function_context('x1', 936, 4, False)
        # Assigning a type to the variable 'self' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.x1.__dict__.__setitem__('stypy_localization', localization)
        Bbox.x1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.x1.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.x1.__dict__.__setitem__('stypy_function_name', 'Bbox.x1')
        Bbox.x1.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Bbox.x1.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.x1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.x1.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.x1.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.x1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.x1.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.x1', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'x1', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'x1(...)' code ##################

        
        # Assigning a Name to a Subscript (line 938):
        
        # Assigning a Name to a Subscript (line 938):
        # Getting the type of 'val' (line 938)
        val_156492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 29), 'val')
        # Getting the type of 'self' (line 938)
        self_156493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'self')
        # Obtaining the member '_points' of a type (line 938)
        _points_156494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 8), self_156493, '_points')
        
        # Obtaining an instance of the builtin type 'tuple' (line 938)
        tuple_156495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 938)
        # Adding element type (line 938)
        int_156496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 938, 21), tuple_156495, int_156496)
        # Adding element type (line 938)
        int_156497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 938, 21), tuple_156495, int_156497)
        
        # Storing an element on a container (line 938)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 938, 8), _points_156494, (tuple_156495, val_156492))
        
        # Call to invalidate(...): (line 939)
        # Processing the call keyword arguments (line 939)
        kwargs_156500 = {}
        # Getting the type of 'self' (line 939)
        self_156498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 939)
        invalidate_156499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 8), self_156498, 'invalidate')
        # Calling invalidate(args, kwargs) (line 939)
        invalidate_call_result_156501 = invoke(stypy.reporting.localization.Localization(__file__, 939, 8), invalidate_156499, *[], **kwargs_156500)
        
        
        # ################# End of 'x1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'x1' in the type store
        # Getting the type of 'stypy_return_type' (line 936)
        stypy_return_type_156502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156502)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'x1'
        return stypy_return_type_156502


    @norecursion
    def y1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'y1'
        module_type_store = module_type_store.open_function_context('y1', 941, 4, False)
        # Assigning a type to the variable 'self' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.y1.__dict__.__setitem__('stypy_localization', localization)
        Bbox.y1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.y1.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.y1.__dict__.__setitem__('stypy_function_name', 'Bbox.y1')
        Bbox.y1.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Bbox.y1.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.y1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.y1.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.y1.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.y1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.y1.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.y1', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'y1', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'y1(...)' code ##################

        
        # Assigning a Name to a Subscript (line 943):
        
        # Assigning a Name to a Subscript (line 943):
        # Getting the type of 'val' (line 943)
        val_156503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 29), 'val')
        # Getting the type of 'self' (line 943)
        self_156504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'self')
        # Obtaining the member '_points' of a type (line 943)
        _points_156505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 8), self_156504, '_points')
        
        # Obtaining an instance of the builtin type 'tuple' (line 943)
        tuple_156506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 943)
        # Adding element type (line 943)
        int_156507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 943, 21), tuple_156506, int_156507)
        # Adding element type (line 943)
        int_156508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 943, 21), tuple_156506, int_156508)
        
        # Storing an element on a container (line 943)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 943, 8), _points_156505, (tuple_156506, val_156503))
        
        # Call to invalidate(...): (line 944)
        # Processing the call keyword arguments (line 944)
        kwargs_156511 = {}
        # Getting the type of 'self' (line 944)
        self_156509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 944)
        invalidate_156510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 8), self_156509, 'invalidate')
        # Calling invalidate(args, kwargs) (line 944)
        invalidate_call_result_156512 = invoke(stypy.reporting.localization.Localization(__file__, 944, 8), invalidate_156510, *[], **kwargs_156511)
        
        
        # ################# End of 'y1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'y1' in the type store
        # Getting the type of 'stypy_return_type' (line 941)
        stypy_return_type_156513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156513)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'y1'
        return stypy_return_type_156513


    @norecursion
    def p0(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'p0'
        module_type_store = module_type_store.open_function_context('p0', 946, 4, False)
        # Assigning a type to the variable 'self' (line 947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.p0.__dict__.__setitem__('stypy_localization', localization)
        Bbox.p0.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.p0.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.p0.__dict__.__setitem__('stypy_function_name', 'Bbox.p0')
        Bbox.p0.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Bbox.p0.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.p0.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.p0.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.p0.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.p0.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.p0.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.p0', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'p0', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'p0(...)' code ##################

        
        # Assigning a Name to a Subscript (line 948):
        
        # Assigning a Name to a Subscript (line 948):
        # Getting the type of 'val' (line 948)
        val_156514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 26), 'val')
        # Getting the type of 'self' (line 948)
        self_156515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 8), 'self')
        # Obtaining the member '_points' of a type (line 948)
        _points_156516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 8), self_156515, '_points')
        int_156517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 21), 'int')
        # Storing an element on a container (line 948)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 948, 8), _points_156516, (int_156517, val_156514))
        
        # Call to invalidate(...): (line 949)
        # Processing the call keyword arguments (line 949)
        kwargs_156520 = {}
        # Getting the type of 'self' (line 949)
        self_156518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 949)
        invalidate_156519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 8), self_156518, 'invalidate')
        # Calling invalidate(args, kwargs) (line 949)
        invalidate_call_result_156521 = invoke(stypy.reporting.localization.Localization(__file__, 949, 8), invalidate_156519, *[], **kwargs_156520)
        
        
        # ################# End of 'p0(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'p0' in the type store
        # Getting the type of 'stypy_return_type' (line 946)
        stypy_return_type_156522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156522)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'p0'
        return stypy_return_type_156522


    @norecursion
    def p1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'p1'
        module_type_store = module_type_store.open_function_context('p1', 951, 4, False)
        # Assigning a type to the variable 'self' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.p1.__dict__.__setitem__('stypy_localization', localization)
        Bbox.p1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.p1.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.p1.__dict__.__setitem__('stypy_function_name', 'Bbox.p1')
        Bbox.p1.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Bbox.p1.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.p1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.p1.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.p1.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.p1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.p1.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.p1', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'p1', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'p1(...)' code ##################

        
        # Assigning a Name to a Subscript (line 953):
        
        # Assigning a Name to a Subscript (line 953):
        # Getting the type of 'val' (line 953)
        val_156523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 26), 'val')
        # Getting the type of 'self' (line 953)
        self_156524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'self')
        # Obtaining the member '_points' of a type (line 953)
        _points_156525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 8), self_156524, '_points')
        int_156526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, 21), 'int')
        # Storing an element on a container (line 953)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 953, 8), _points_156525, (int_156526, val_156523))
        
        # Call to invalidate(...): (line 954)
        # Processing the call keyword arguments (line 954)
        kwargs_156529 = {}
        # Getting the type of 'self' (line 954)
        self_156527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 954)
        invalidate_156528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 8), self_156527, 'invalidate')
        # Calling invalidate(args, kwargs) (line 954)
        invalidate_call_result_156530 = invoke(stypy.reporting.localization.Localization(__file__, 954, 8), invalidate_156528, *[], **kwargs_156529)
        
        
        # ################# End of 'p1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'p1' in the type store
        # Getting the type of 'stypy_return_type' (line 951)
        stypy_return_type_156531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156531)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'p1'
        return stypy_return_type_156531


    @norecursion
    def intervalx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'intervalx'
        module_type_store = module_type_store.open_function_context('intervalx', 956, 4, False)
        # Assigning a type to the variable 'self' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.intervalx.__dict__.__setitem__('stypy_localization', localization)
        Bbox.intervalx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.intervalx.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.intervalx.__dict__.__setitem__('stypy_function_name', 'Bbox.intervalx')
        Bbox.intervalx.__dict__.__setitem__('stypy_param_names_list', ['interval'])
        Bbox.intervalx.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.intervalx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.intervalx.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.intervalx.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.intervalx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.intervalx.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.intervalx', ['interval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'intervalx', localization, ['interval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'intervalx(...)' code ##################

        
        # Assigning a Name to a Subscript (line 958):
        
        # Assigning a Name to a Subscript (line 958):
        # Getting the type of 'interval' (line 958)
        interval_156532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 29), 'interval')
        # Getting the type of 'self' (line 958)
        self_156533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 8), 'self')
        # Obtaining the member '_points' of a type (line 958)
        _points_156534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 8), self_156533, '_points')
        slice_156535 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 958, 8), None, None, None)
        int_156536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 24), 'int')
        # Storing an element on a container (line 958)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 958, 8), _points_156534, ((slice_156535, int_156536), interval_156532))
        
        # Call to invalidate(...): (line 959)
        # Processing the call keyword arguments (line 959)
        kwargs_156539 = {}
        # Getting the type of 'self' (line 959)
        self_156537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 959)
        invalidate_156538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 8), self_156537, 'invalidate')
        # Calling invalidate(args, kwargs) (line 959)
        invalidate_call_result_156540 = invoke(stypy.reporting.localization.Localization(__file__, 959, 8), invalidate_156538, *[], **kwargs_156539)
        
        
        # ################# End of 'intervalx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'intervalx' in the type store
        # Getting the type of 'stypy_return_type' (line 956)
        stypy_return_type_156541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156541)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'intervalx'
        return stypy_return_type_156541


    @norecursion
    def intervaly(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'intervaly'
        module_type_store = module_type_store.open_function_context('intervaly', 961, 4, False)
        # Assigning a type to the variable 'self' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.intervaly.__dict__.__setitem__('stypy_localization', localization)
        Bbox.intervaly.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.intervaly.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.intervaly.__dict__.__setitem__('stypy_function_name', 'Bbox.intervaly')
        Bbox.intervaly.__dict__.__setitem__('stypy_param_names_list', ['interval'])
        Bbox.intervaly.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.intervaly.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.intervaly.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.intervaly.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.intervaly.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.intervaly.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.intervaly', ['interval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'intervaly', localization, ['interval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'intervaly(...)' code ##################

        
        # Assigning a Name to a Subscript (line 963):
        
        # Assigning a Name to a Subscript (line 963):
        # Getting the type of 'interval' (line 963)
        interval_156542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 29), 'interval')
        # Getting the type of 'self' (line 963)
        self_156543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 8), 'self')
        # Obtaining the member '_points' of a type (line 963)
        _points_156544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 8), self_156543, '_points')
        slice_156545 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 963, 8), None, None, None)
        int_156546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 24), 'int')
        # Storing an element on a container (line 963)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 963, 8), _points_156544, ((slice_156545, int_156546), interval_156542))
        
        # Call to invalidate(...): (line 964)
        # Processing the call keyword arguments (line 964)
        kwargs_156549 = {}
        # Getting the type of 'self' (line 964)
        self_156547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 964)
        invalidate_156548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 8), self_156547, 'invalidate')
        # Calling invalidate(args, kwargs) (line 964)
        invalidate_call_result_156550 = invoke(stypy.reporting.localization.Localization(__file__, 964, 8), invalidate_156548, *[], **kwargs_156549)
        
        
        # ################# End of 'intervaly(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'intervaly' in the type store
        # Getting the type of 'stypy_return_type' (line 961)
        stypy_return_type_156551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156551)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'intervaly'
        return stypy_return_type_156551


    @norecursion
    def bounds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'bounds'
        module_type_store = module_type_store.open_function_context('bounds', 966, 4, False)
        # Assigning a type to the variable 'self' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.bounds.__dict__.__setitem__('stypy_localization', localization)
        Bbox.bounds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.bounds.__dict__.__setitem__('stypy_function_name', 'Bbox.bounds')
        Bbox.bounds.__dict__.__setitem__('stypy_param_names_list', ['bounds'])
        Bbox.bounds.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.bounds.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.bounds', ['bounds'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'bounds', localization, ['bounds'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'bounds(...)' code ##################

        
        # Assigning a Name to a Tuple (line 968):
        
        # Assigning a Subscript to a Name (line 968):
        
        # Obtaining the type of the subscript
        int_156552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 8), 'int')
        # Getting the type of 'bounds' (line 968)
        bounds_156553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 21), 'bounds')
        # Obtaining the member '__getitem__' of a type (line 968)
        getitem___156554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 8), bounds_156553, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 968)
        subscript_call_result_156555 = invoke(stypy.reporting.localization.Localization(__file__, 968, 8), getitem___156554, int_156552)
        
        # Assigning a type to the variable 'tuple_var_assignment_154299' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_var_assignment_154299', subscript_call_result_156555)
        
        # Assigning a Subscript to a Name (line 968):
        
        # Obtaining the type of the subscript
        int_156556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 8), 'int')
        # Getting the type of 'bounds' (line 968)
        bounds_156557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 21), 'bounds')
        # Obtaining the member '__getitem__' of a type (line 968)
        getitem___156558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 8), bounds_156557, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 968)
        subscript_call_result_156559 = invoke(stypy.reporting.localization.Localization(__file__, 968, 8), getitem___156558, int_156556)
        
        # Assigning a type to the variable 'tuple_var_assignment_154300' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_var_assignment_154300', subscript_call_result_156559)
        
        # Assigning a Subscript to a Name (line 968):
        
        # Obtaining the type of the subscript
        int_156560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 8), 'int')
        # Getting the type of 'bounds' (line 968)
        bounds_156561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 21), 'bounds')
        # Obtaining the member '__getitem__' of a type (line 968)
        getitem___156562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 8), bounds_156561, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 968)
        subscript_call_result_156563 = invoke(stypy.reporting.localization.Localization(__file__, 968, 8), getitem___156562, int_156560)
        
        # Assigning a type to the variable 'tuple_var_assignment_154301' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_var_assignment_154301', subscript_call_result_156563)
        
        # Assigning a Subscript to a Name (line 968):
        
        # Obtaining the type of the subscript
        int_156564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 8), 'int')
        # Getting the type of 'bounds' (line 968)
        bounds_156565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 21), 'bounds')
        # Obtaining the member '__getitem__' of a type (line 968)
        getitem___156566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 8), bounds_156565, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 968)
        subscript_call_result_156567 = invoke(stypy.reporting.localization.Localization(__file__, 968, 8), getitem___156566, int_156564)
        
        # Assigning a type to the variable 'tuple_var_assignment_154302' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_var_assignment_154302', subscript_call_result_156567)
        
        # Assigning a Name to a Name (line 968):
        # Getting the type of 'tuple_var_assignment_154299' (line 968)
        tuple_var_assignment_154299_156568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_var_assignment_154299')
        # Assigning a type to the variable 'l' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'l', tuple_var_assignment_154299_156568)
        
        # Assigning a Name to a Name (line 968):
        # Getting the type of 'tuple_var_assignment_154300' (line 968)
        tuple_var_assignment_154300_156569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_var_assignment_154300')
        # Assigning a type to the variable 'b' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 11), 'b', tuple_var_assignment_154300_156569)
        
        # Assigning a Name to a Name (line 968):
        # Getting the type of 'tuple_var_assignment_154301' (line 968)
        tuple_var_assignment_154301_156570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_var_assignment_154301')
        # Assigning a type to the variable 'w' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 14), 'w', tuple_var_assignment_154301_156570)
        
        # Assigning a Name to a Name (line 968):
        # Getting the type of 'tuple_var_assignment_154302' (line 968)
        tuple_var_assignment_154302_156571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_var_assignment_154302')
        # Assigning a type to the variable 'h' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 17), 'h', tuple_var_assignment_154302_156571)
        
        # Assigning a Call to a Name (line 969):
        
        # Assigning a Call to a Name (line 969):
        
        # Call to array(...): (line 969)
        # Processing the call arguments (line 969)
        
        # Obtaining an instance of the builtin type 'list' (line 969)
        list_156574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 969)
        # Adding element type (line 969)
        
        # Obtaining an instance of the builtin type 'list' (line 969)
        list_156575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 969)
        # Adding element type (line 969)
        # Getting the type of 'l' (line 969)
        l_156576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 28), 'l', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 969, 27), list_156575, l_156576)
        # Adding element type (line 969)
        # Getting the type of 'b' (line 969)
        b_156577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 31), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 969, 27), list_156575, b_156577)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 969, 26), list_156574, list_156575)
        # Adding element type (line 969)
        
        # Obtaining an instance of the builtin type 'list' (line 969)
        list_156578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 969)
        # Adding element type (line 969)
        # Getting the type of 'l' (line 969)
        l_156579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 36), 'l', False)
        # Getting the type of 'w' (line 969)
        w_156580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 40), 'w', False)
        # Applying the binary operator '+' (line 969)
        result_add_156581 = python_operator(stypy.reporting.localization.Localization(__file__, 969, 36), '+', l_156579, w_156580)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 969, 35), list_156578, result_add_156581)
        # Adding element type (line 969)
        # Getting the type of 'b' (line 969)
        b_156582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 43), 'b', False)
        # Getting the type of 'h' (line 969)
        h_156583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 47), 'h', False)
        # Applying the binary operator '+' (line 969)
        result_add_156584 = python_operator(stypy.reporting.localization.Localization(__file__, 969, 43), '+', b_156582, h_156583)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 969, 35), list_156578, result_add_156584)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 969, 26), list_156574, list_156578)
        
        # Getting the type of 'float' (line 969)
        float_156585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 52), 'float', False)
        # Processing the call keyword arguments (line 969)
        kwargs_156586 = {}
        # Getting the type of 'np' (line 969)
        np_156572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 17), 'np', False)
        # Obtaining the member 'array' of a type (line 969)
        array_156573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 969, 17), np_156572, 'array')
        # Calling array(args, kwargs) (line 969)
        array_call_result_156587 = invoke(stypy.reporting.localization.Localization(__file__, 969, 17), array_156573, *[list_156574, float_156585], **kwargs_156586)
        
        # Assigning a type to the variable 'points' (line 969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 8), 'points', array_call_result_156587)
        
        
        # Call to any(...): (line 970)
        # Processing the call arguments (line 970)
        
        # Getting the type of 'self' (line 970)
        self_156590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 18), 'self', False)
        # Obtaining the member '_points' of a type (line 970)
        _points_156591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 18), self_156590, '_points')
        # Getting the type of 'points' (line 970)
        points_156592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 34), 'points', False)
        # Applying the binary operator '!=' (line 970)
        result_ne_156593 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 18), '!=', _points_156591, points_156592)
        
        # Processing the call keyword arguments (line 970)
        kwargs_156594 = {}
        # Getting the type of 'np' (line 970)
        np_156588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 11), 'np', False)
        # Obtaining the member 'any' of a type (line 970)
        any_156589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 11), np_156588, 'any')
        # Calling any(args, kwargs) (line 970)
        any_call_result_156595 = invoke(stypy.reporting.localization.Localization(__file__, 970, 11), any_156589, *[result_ne_156593], **kwargs_156594)
        
        # Testing the type of an if condition (line 970)
        if_condition_156596 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 970, 8), any_call_result_156595)
        # Assigning a type to the variable 'if_condition_156596' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'if_condition_156596', if_condition_156596)
        # SSA begins for if statement (line 970)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 971):
        
        # Assigning a Name to a Attribute (line 971):
        # Getting the type of 'points' (line 971)
        points_156597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 27), 'points')
        # Getting the type of 'self' (line 971)
        self_156598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 12), 'self')
        # Setting the type of the member '_points' of a type (line 971)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 12), self_156598, '_points', points_156597)
        
        # Call to invalidate(...): (line 972)
        # Processing the call keyword arguments (line 972)
        kwargs_156601 = {}
        # Getting the type of 'self' (line 972)
        self_156599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 12), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 972)
        invalidate_156600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 12), self_156599, 'invalidate')
        # Calling invalidate(args, kwargs) (line 972)
        invalidate_call_result_156602 = invoke(stypy.reporting.localization.Localization(__file__, 972, 12), invalidate_156600, *[], **kwargs_156601)
        
        # SSA join for if statement (line 970)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 966)
        stypy_return_type_156603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156603)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'bounds'
        return stypy_return_type_156603


    @norecursion
    def minpos(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'minpos'
        module_type_store = module_type_store.open_function_context('minpos', 974, 4, False)
        # Assigning a type to the variable 'self' (line 975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.minpos.__dict__.__setitem__('stypy_localization', localization)
        Bbox.minpos.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.minpos.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.minpos.__dict__.__setitem__('stypy_function_name', 'Bbox.minpos')
        Bbox.minpos.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.minpos.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.minpos.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.minpos.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.minpos.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.minpos.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.minpos.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.minpos', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'minpos', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'minpos(...)' code ##################

        # Getting the type of 'self' (line 976)
        self_156604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 15), 'self')
        # Obtaining the member '_minpos' of a type (line 976)
        _minpos_156605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 15), self_156604, '_minpos')
        # Assigning a type to the variable 'stypy_return_type' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 8), 'stypy_return_type', _minpos_156605)
        
        # ################# End of 'minpos(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'minpos' in the type store
        # Getting the type of 'stypy_return_type' (line 974)
        stypy_return_type_156606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156606)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'minpos'
        return stypy_return_type_156606


    @norecursion
    def minposx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'minposx'
        module_type_store = module_type_store.open_function_context('minposx', 978, 4, False)
        # Assigning a type to the variable 'self' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.minposx.__dict__.__setitem__('stypy_localization', localization)
        Bbox.minposx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.minposx.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.minposx.__dict__.__setitem__('stypy_function_name', 'Bbox.minposx')
        Bbox.minposx.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.minposx.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.minposx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.minposx.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.minposx.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.minposx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.minposx.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.minposx', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'minposx', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'minposx(...)' code ##################

        
        # Obtaining the type of the subscript
        int_156607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 28), 'int')
        # Getting the type of 'self' (line 980)
        self_156608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 15), 'self')
        # Obtaining the member '_minpos' of a type (line 980)
        _minpos_156609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 15), self_156608, '_minpos')
        # Obtaining the member '__getitem__' of a type (line 980)
        getitem___156610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 15), _minpos_156609, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 980)
        subscript_call_result_156611 = invoke(stypy.reporting.localization.Localization(__file__, 980, 15), getitem___156610, int_156607)
        
        # Assigning a type to the variable 'stypy_return_type' (line 980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 980, 8), 'stypy_return_type', subscript_call_result_156611)
        
        # ################# End of 'minposx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'minposx' in the type store
        # Getting the type of 'stypy_return_type' (line 978)
        stypy_return_type_156612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156612)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'minposx'
        return stypy_return_type_156612


    @norecursion
    def minposy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'minposy'
        module_type_store = module_type_store.open_function_context('minposy', 982, 4, False)
        # Assigning a type to the variable 'self' (line 983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.minposy.__dict__.__setitem__('stypy_localization', localization)
        Bbox.minposy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.minposy.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.minposy.__dict__.__setitem__('stypy_function_name', 'Bbox.minposy')
        Bbox.minposy.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.minposy.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.minposy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.minposy.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.minposy.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.minposy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.minposy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.minposy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'minposy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'minposy(...)' code ##################

        
        # Obtaining the type of the subscript
        int_156613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 28), 'int')
        # Getting the type of 'self' (line 984)
        self_156614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 15), 'self')
        # Obtaining the member '_minpos' of a type (line 984)
        _minpos_156615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 15), self_156614, '_minpos')
        # Obtaining the member '__getitem__' of a type (line 984)
        getitem___156616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 15), _minpos_156615, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 984)
        subscript_call_result_156617 = invoke(stypy.reporting.localization.Localization(__file__, 984, 15), getitem___156616, int_156613)
        
        # Assigning a type to the variable 'stypy_return_type' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 8), 'stypy_return_type', subscript_call_result_156617)
        
        # ################# End of 'minposy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'minposy' in the type store
        # Getting the type of 'stypy_return_type' (line 982)
        stypy_return_type_156618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156618)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'minposy'
        return stypy_return_type_156618


    @norecursion
    def get_points(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_points'
        module_type_store = module_type_store.open_function_context('get_points', 986, 4, False)
        # Assigning a type to the variable 'self' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.get_points.__dict__.__setitem__('stypy_localization', localization)
        Bbox.get_points.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.get_points.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.get_points.__dict__.__setitem__('stypy_function_name', 'Bbox.get_points')
        Bbox.get_points.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.get_points.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.get_points.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.get_points.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.get_points.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.get_points.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.get_points.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.get_points', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_points', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_points(...)' code ##################

        unicode_156619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, (-1)), 'unicode', u'\n        Get the points of the bounding box directly as a numpy array\n        of the form: [[x0, y0], [x1, y1]].\n        ')
        
        # Assigning a Num to a Attribute (line 991):
        
        # Assigning a Num to a Attribute (line 991):
        int_156620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 991, 24), 'int')
        # Getting the type of 'self' (line 991)
        self_156621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'self')
        # Setting the type of the member '_invalid' of a type (line 991)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 8), self_156621, '_invalid', int_156620)
        # Getting the type of 'self' (line 992)
        self_156622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 15), 'self')
        # Obtaining the member '_points' of a type (line 992)
        _points_156623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 15), self_156622, '_points')
        # Assigning a type to the variable 'stypy_return_type' (line 992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 8), 'stypy_return_type', _points_156623)
        
        # ################# End of 'get_points(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_points' in the type store
        # Getting the type of 'stypy_return_type' (line 986)
        stypy_return_type_156624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156624)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_points'
        return stypy_return_type_156624


    @norecursion
    def set_points(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_points'
        module_type_store = module_type_store.open_function_context('set_points', 994, 4, False)
        # Assigning a type to the variable 'self' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.set_points.__dict__.__setitem__('stypy_localization', localization)
        Bbox.set_points.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.set_points.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.set_points.__dict__.__setitem__('stypy_function_name', 'Bbox.set_points')
        Bbox.set_points.__dict__.__setitem__('stypy_param_names_list', ['points'])
        Bbox.set_points.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.set_points.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.set_points.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.set_points.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.set_points.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.set_points.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.set_points', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_points', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_points(...)' code ##################

        unicode_156625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, (-1)), 'unicode', u'\n        Set the points of the bounding box directly from a numpy array\n        of the form: [[x0, y0], [x1, y1]].  No error checking is\n        performed, as this method is mainly for internal use.\n        ')
        
        
        # Call to any(...): (line 1000)
        # Processing the call arguments (line 1000)
        
        # Getting the type of 'self' (line 1000)
        self_156628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 18), 'self', False)
        # Obtaining the member '_points' of a type (line 1000)
        _points_156629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 18), self_156628, '_points')
        # Getting the type of 'points' (line 1000)
        points_156630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 34), 'points', False)
        # Applying the binary operator '!=' (line 1000)
        result_ne_156631 = python_operator(stypy.reporting.localization.Localization(__file__, 1000, 18), '!=', _points_156629, points_156630)
        
        # Processing the call keyword arguments (line 1000)
        kwargs_156632 = {}
        # Getting the type of 'np' (line 1000)
        np_156626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 11), 'np', False)
        # Obtaining the member 'any' of a type (line 1000)
        any_156627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 11), np_156626, 'any')
        # Calling any(args, kwargs) (line 1000)
        any_call_result_156633 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 11), any_156627, *[result_ne_156631], **kwargs_156632)
        
        # Testing the type of an if condition (line 1000)
        if_condition_156634 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1000, 8), any_call_result_156633)
        # Assigning a type to the variable 'if_condition_156634' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'if_condition_156634', if_condition_156634)
        # SSA begins for if statement (line 1000)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1001):
        
        # Assigning a Name to a Attribute (line 1001):
        # Getting the type of 'points' (line 1001)
        points_156635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 27), 'points')
        # Getting the type of 'self' (line 1001)
        self_156636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 12), 'self')
        # Setting the type of the member '_points' of a type (line 1001)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 12), self_156636, '_points', points_156635)
        
        # Call to invalidate(...): (line 1002)
        # Processing the call keyword arguments (line 1002)
        kwargs_156639 = {}
        # Getting the type of 'self' (line 1002)
        self_156637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 12), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 1002)
        invalidate_156638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 12), self_156637, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1002)
        invalidate_call_result_156640 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 12), invalidate_156638, *[], **kwargs_156639)
        
        # SSA join for if statement (line 1000)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_points(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_points' in the type store
        # Getting the type of 'stypy_return_type' (line 994)
        stypy_return_type_156641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156641)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_points'
        return stypy_return_type_156641


    @norecursion
    def set(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set'
        module_type_store = module_type_store.open_function_context('set', 1004, 4, False)
        # Assigning a type to the variable 'self' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.set.__dict__.__setitem__('stypy_localization', localization)
        Bbox.set.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.set.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.set.__dict__.__setitem__('stypy_function_name', 'Bbox.set')
        Bbox.set.__dict__.__setitem__('stypy_param_names_list', ['other'])
        Bbox.set.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.set.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.set.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.set.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.set.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.set.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.set', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set(...)' code ##################

        unicode_156642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1008, (-1)), 'unicode', u'\n        Set this bounding box from the "frozen" bounds of another\n        :class:`Bbox`.\n        ')
        
        
        # Call to any(...): (line 1009)
        # Processing the call arguments (line 1009)
        
        # Getting the type of 'self' (line 1009)
        self_156645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 18), 'self', False)
        # Obtaining the member '_points' of a type (line 1009)
        _points_156646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 18), self_156645, '_points')
        
        # Call to get_points(...): (line 1009)
        # Processing the call keyword arguments (line 1009)
        kwargs_156649 = {}
        # Getting the type of 'other' (line 1009)
        other_156647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 34), 'other', False)
        # Obtaining the member 'get_points' of a type (line 1009)
        get_points_156648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 34), other_156647, 'get_points')
        # Calling get_points(args, kwargs) (line 1009)
        get_points_call_result_156650 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 34), get_points_156648, *[], **kwargs_156649)
        
        # Applying the binary operator '!=' (line 1009)
        result_ne_156651 = python_operator(stypy.reporting.localization.Localization(__file__, 1009, 18), '!=', _points_156646, get_points_call_result_156650)
        
        # Processing the call keyword arguments (line 1009)
        kwargs_156652 = {}
        # Getting the type of 'np' (line 1009)
        np_156643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 11), 'np', False)
        # Obtaining the member 'any' of a type (line 1009)
        any_156644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 11), np_156643, 'any')
        # Calling any(args, kwargs) (line 1009)
        any_call_result_156653 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 11), any_156644, *[result_ne_156651], **kwargs_156652)
        
        # Testing the type of an if condition (line 1009)
        if_condition_156654 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1009, 8), any_call_result_156653)
        # Assigning a type to the variable 'if_condition_156654' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 8), 'if_condition_156654', if_condition_156654)
        # SSA begins for if statement (line 1009)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1010):
        
        # Assigning a Call to a Attribute (line 1010):
        
        # Call to get_points(...): (line 1010)
        # Processing the call keyword arguments (line 1010)
        kwargs_156657 = {}
        # Getting the type of 'other' (line 1010)
        other_156655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 27), 'other', False)
        # Obtaining the member 'get_points' of a type (line 1010)
        get_points_156656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 27), other_156655, 'get_points')
        # Calling get_points(args, kwargs) (line 1010)
        get_points_call_result_156658 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 27), get_points_156656, *[], **kwargs_156657)
        
        # Getting the type of 'self' (line 1010)
        self_156659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 12), 'self')
        # Setting the type of the member '_points' of a type (line 1010)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 12), self_156659, '_points', get_points_call_result_156658)
        
        # Call to invalidate(...): (line 1011)
        # Processing the call keyword arguments (line 1011)
        kwargs_156662 = {}
        # Getting the type of 'self' (line 1011)
        self_156660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 12), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 1011)
        invalidate_156661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1011, 12), self_156660, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1011)
        invalidate_call_result_156663 = invoke(stypy.reporting.localization.Localization(__file__, 1011, 12), invalidate_156661, *[], **kwargs_156662)
        
        # SSA join for if statement (line 1009)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set' in the type store
        # Getting the type of 'stypy_return_type' (line 1004)
        stypy_return_type_156664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156664)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set'
        return stypy_return_type_156664


    @norecursion
    def mutated(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mutated'
        module_type_store = module_type_store.open_function_context('mutated', 1013, 4, False)
        # Assigning a type to the variable 'self' (line 1014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.mutated.__dict__.__setitem__('stypy_localization', localization)
        Bbox.mutated.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.mutated.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.mutated.__dict__.__setitem__('stypy_function_name', 'Bbox.mutated')
        Bbox.mutated.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.mutated.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.mutated.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.mutated.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.mutated.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.mutated.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.mutated.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.mutated', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mutated', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mutated(...)' code ##################

        unicode_156665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 8), 'unicode', u'return whether the bbox has changed since init')
        
        # Evaluating a boolean operation
        
        # Call to mutatedx(...): (line 1015)
        # Processing the call keyword arguments (line 1015)
        kwargs_156668 = {}
        # Getting the type of 'self' (line 1015)
        self_156666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 15), 'self', False)
        # Obtaining the member 'mutatedx' of a type (line 1015)
        mutatedx_156667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 15), self_156666, 'mutatedx')
        # Calling mutatedx(args, kwargs) (line 1015)
        mutatedx_call_result_156669 = invoke(stypy.reporting.localization.Localization(__file__, 1015, 15), mutatedx_156667, *[], **kwargs_156668)
        
        
        # Call to mutatedy(...): (line 1015)
        # Processing the call keyword arguments (line 1015)
        kwargs_156672 = {}
        # Getting the type of 'self' (line 1015)
        self_156670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 34), 'self', False)
        # Obtaining the member 'mutatedy' of a type (line 1015)
        mutatedy_156671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 34), self_156670, 'mutatedy')
        # Calling mutatedy(args, kwargs) (line 1015)
        mutatedy_call_result_156673 = invoke(stypy.reporting.localization.Localization(__file__, 1015, 34), mutatedy_156671, *[], **kwargs_156672)
        
        # Applying the binary operator 'or' (line 1015)
        result_or_keyword_156674 = python_operator(stypy.reporting.localization.Localization(__file__, 1015, 15), 'or', mutatedx_call_result_156669, mutatedy_call_result_156673)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1015)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1015, 8), 'stypy_return_type', result_or_keyword_156674)
        
        # ################# End of 'mutated(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mutated' in the type store
        # Getting the type of 'stypy_return_type' (line 1013)
        stypy_return_type_156675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156675)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mutated'
        return stypy_return_type_156675


    @norecursion
    def mutatedx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mutatedx'
        module_type_store = module_type_store.open_function_context('mutatedx', 1017, 4, False)
        # Assigning a type to the variable 'self' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.mutatedx.__dict__.__setitem__('stypy_localization', localization)
        Bbox.mutatedx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.mutatedx.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.mutatedx.__dict__.__setitem__('stypy_function_name', 'Bbox.mutatedx')
        Bbox.mutatedx.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.mutatedx.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.mutatedx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.mutatedx.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.mutatedx.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.mutatedx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.mutatedx.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.mutatedx', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mutatedx', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mutatedx(...)' code ##################

        unicode_156676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 8), 'unicode', u'return whether the x-limits have changed since init')
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1019)
        tuple_156677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1019)
        # Adding element type (line 1019)
        int_156678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1019, 29), tuple_156677, int_156678)
        # Adding element type (line 1019)
        int_156679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1019, 29), tuple_156677, int_156679)
        
        # Getting the type of 'self' (line 1019)
        self_156680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 16), 'self')
        # Obtaining the member '_points' of a type (line 1019)
        _points_156681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1019, 16), self_156680, '_points')
        # Obtaining the member '__getitem__' of a type (line 1019)
        getitem___156682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1019, 16), _points_156681, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1019)
        subscript_call_result_156683 = invoke(stypy.reporting.localization.Localization(__file__, 1019, 16), getitem___156682, tuple_156677)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1019)
        tuple_156684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1019)
        # Adding element type (line 1019)
        int_156685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1019, 56), tuple_156684, int_156685)
        # Adding element type (line 1019)
        int_156686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, 59), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1019, 56), tuple_156684, int_156686)
        
        # Getting the type of 'self' (line 1019)
        self_156687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 38), 'self')
        # Obtaining the member '_points_orig' of a type (line 1019)
        _points_orig_156688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1019, 38), self_156687, '_points_orig')
        # Obtaining the member '__getitem__' of a type (line 1019)
        getitem___156689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1019, 38), _points_orig_156688, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1019)
        subscript_call_result_156690 = invoke(stypy.reporting.localization.Localization(__file__, 1019, 38), getitem___156689, tuple_156684)
        
        # Applying the binary operator '!=' (line 1019)
        result_ne_156691 = python_operator(stypy.reporting.localization.Localization(__file__, 1019, 16), '!=', subscript_call_result_156683, subscript_call_result_156690)
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1020)
        tuple_156692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1020)
        # Adding element type (line 1020)
        int_156693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1020, 29), tuple_156692, int_156693)
        # Adding element type (line 1020)
        int_156694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1020, 29), tuple_156692, int_156694)
        
        # Getting the type of 'self' (line 1020)
        self_156695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 16), 'self')
        # Obtaining the member '_points' of a type (line 1020)
        _points_156696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 16), self_156695, '_points')
        # Obtaining the member '__getitem__' of a type (line 1020)
        getitem___156697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 16), _points_156696, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1020)
        subscript_call_result_156698 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 16), getitem___156697, tuple_156692)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1020)
        tuple_156699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1020)
        # Adding element type (line 1020)
        int_156700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1020, 56), tuple_156699, int_156700)
        # Adding element type (line 1020)
        int_156701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 59), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1020, 56), tuple_156699, int_156701)
        
        # Getting the type of 'self' (line 1020)
        self_156702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 38), 'self')
        # Obtaining the member '_points_orig' of a type (line 1020)
        _points_orig_156703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 38), self_156702, '_points_orig')
        # Obtaining the member '__getitem__' of a type (line 1020)
        getitem___156704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 38), _points_orig_156703, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1020)
        subscript_call_result_156705 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 38), getitem___156704, tuple_156699)
        
        # Applying the binary operator '!=' (line 1020)
        result_ne_156706 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 16), '!=', subscript_call_result_156698, subscript_call_result_156705)
        
        # Applying the binary operator 'or' (line 1019)
        result_or_keyword_156707 = python_operator(stypy.reporting.localization.Localization(__file__, 1019, 16), 'or', result_ne_156691, result_ne_156706)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 8), 'stypy_return_type', result_or_keyword_156707)
        
        # ################# End of 'mutatedx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mutatedx' in the type store
        # Getting the type of 'stypy_return_type' (line 1017)
        stypy_return_type_156708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156708)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mutatedx'
        return stypy_return_type_156708


    @norecursion
    def mutatedy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mutatedy'
        module_type_store = module_type_store.open_function_context('mutatedy', 1022, 4, False)
        # Assigning a type to the variable 'self' (line 1023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Bbox.mutatedy.__dict__.__setitem__('stypy_localization', localization)
        Bbox.mutatedy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Bbox.mutatedy.__dict__.__setitem__('stypy_type_store', module_type_store)
        Bbox.mutatedy.__dict__.__setitem__('stypy_function_name', 'Bbox.mutatedy')
        Bbox.mutatedy.__dict__.__setitem__('stypy_param_names_list', [])
        Bbox.mutatedy.__dict__.__setitem__('stypy_varargs_param_name', None)
        Bbox.mutatedy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Bbox.mutatedy.__dict__.__setitem__('stypy_call_defaults', defaults)
        Bbox.mutatedy.__dict__.__setitem__('stypy_call_varargs', varargs)
        Bbox.mutatedy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Bbox.mutatedy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bbox.mutatedy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mutatedy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mutatedy(...)' code ##################

        unicode_156709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 8), 'unicode', u'return whether the y-limits have changed since init')
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1024)
        tuple_156710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1024)
        # Adding element type (line 1024)
        int_156711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1024, 29), tuple_156710, int_156711)
        # Adding element type (line 1024)
        int_156712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1024, 29), tuple_156710, int_156712)
        
        # Getting the type of 'self' (line 1024)
        self_156713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 16), 'self')
        # Obtaining the member '_points' of a type (line 1024)
        _points_156714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 16), self_156713, '_points')
        # Obtaining the member '__getitem__' of a type (line 1024)
        getitem___156715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 16), _points_156714, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1024)
        subscript_call_result_156716 = invoke(stypy.reporting.localization.Localization(__file__, 1024, 16), getitem___156715, tuple_156710)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1024)
        tuple_156717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1024)
        # Adding element type (line 1024)
        int_156718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1024, 56), tuple_156717, int_156718)
        # Adding element type (line 1024)
        int_156719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 59), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1024, 56), tuple_156717, int_156719)
        
        # Getting the type of 'self' (line 1024)
        self_156720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 38), 'self')
        # Obtaining the member '_points_orig' of a type (line 1024)
        _points_orig_156721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 38), self_156720, '_points_orig')
        # Obtaining the member '__getitem__' of a type (line 1024)
        getitem___156722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 38), _points_orig_156721, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1024)
        subscript_call_result_156723 = invoke(stypy.reporting.localization.Localization(__file__, 1024, 38), getitem___156722, tuple_156717)
        
        # Applying the binary operator '!=' (line 1024)
        result_ne_156724 = python_operator(stypy.reporting.localization.Localization(__file__, 1024, 16), '!=', subscript_call_result_156716, subscript_call_result_156723)
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1025)
        tuple_156725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1025)
        # Adding element type (line 1025)
        int_156726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1025, 29), tuple_156725, int_156726)
        # Adding element type (line 1025)
        int_156727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1025, 29), tuple_156725, int_156727)
        
        # Getting the type of 'self' (line 1025)
        self_156728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 16), 'self')
        # Obtaining the member '_points' of a type (line 1025)
        _points_156729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 16), self_156728, '_points')
        # Obtaining the member '__getitem__' of a type (line 1025)
        getitem___156730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 16), _points_156729, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1025)
        subscript_call_result_156731 = invoke(stypy.reporting.localization.Localization(__file__, 1025, 16), getitem___156730, tuple_156725)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1025)
        tuple_156732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1025)
        # Adding element type (line 1025)
        int_156733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1025, 56), tuple_156732, int_156733)
        # Adding element type (line 1025)
        int_156734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 59), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1025, 56), tuple_156732, int_156734)
        
        # Getting the type of 'self' (line 1025)
        self_156735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 38), 'self')
        # Obtaining the member '_points_orig' of a type (line 1025)
        _points_orig_156736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 38), self_156735, '_points_orig')
        # Obtaining the member '__getitem__' of a type (line 1025)
        getitem___156737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 38), _points_orig_156736, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1025)
        subscript_call_result_156738 = invoke(stypy.reporting.localization.Localization(__file__, 1025, 38), getitem___156737, tuple_156732)
        
        # Applying the binary operator '!=' (line 1025)
        result_ne_156739 = python_operator(stypy.reporting.localization.Localization(__file__, 1025, 16), '!=', subscript_call_result_156731, subscript_call_result_156738)
        
        # Applying the binary operator 'or' (line 1024)
        result_or_keyword_156740 = python_operator(stypy.reporting.localization.Localization(__file__, 1024, 16), 'or', result_ne_156724, result_ne_156739)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 8), 'stypy_return_type', result_or_keyword_156740)
        
        # ################# End of 'mutatedy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mutatedy' in the type store
        # Getting the type of 'stypy_return_type' (line 1022)
        stypy_return_type_156741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156741)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mutatedy'
        return stypy_return_type_156741


# Assigning a type to the variable 'Bbox' (line 744)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 0), 'Bbox', Bbox)

# Getting the type of 'DEBUG' (line 769)
DEBUG_156742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 7), 'DEBUG')
# Testing the type of an if condition (line 769)
if_condition_156743 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 769, 4), DEBUG_156742)
# Assigning a type to the variable 'if_condition_156743' (line 769)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 4), 'if_condition_156743', if_condition_156743)
# SSA begins for if statement (line 769)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 770):

# Assigning a Name to a Name (line 770):
# Getting the type of 'Bbox'
Bbox_156744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Bbox')
# Obtaining the member '__init__' of a type
init___156745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Bbox_156744, '__init__')
# Assigning a type to the variable '___init__' (line 770)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), '___init__', init___156745)

@norecursion
def __init__(type_of_self, localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '__init__'
    module_type_store = module_type_store.open_function_context('__init__', 772, 8, False)
    
    # Passed parameters checking function
    arguments = process_argument_values(localization, None, module_type_store, '__init__', ['self', 'points'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return

    # Initialize method data
    init_call_information(module_type_store, '__init__', localization, ['self', 'points'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '__init__(...)' code ##################

    
    # Call to _check(...): (line 773)
    # Processing the call arguments (line 773)
    # Getting the type of 'points' (line 773)
    points_156748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 24), 'points', False)
    # Processing the call keyword arguments (line 773)
    kwargs_156749 = {}
    # Getting the type of 'self' (line 773)
    self_156746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 12), 'self', False)
    # Obtaining the member '_check' of a type (line 773)
    _check_156747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 12), self_156746, '_check')
    # Calling _check(args, kwargs) (line 773)
    _check_call_result_156750 = invoke(stypy.reporting.localization.Localization(__file__, 773, 12), _check_156747, *[points_156748], **kwargs_156749)
    
    
    # Call to ___init__(...): (line 774)
    # Processing the call arguments (line 774)
    # Getting the type of 'points' (line 774)
    points_156753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 27), 'points', False)
    # Processing the call keyword arguments (line 774)
    # Getting the type of 'kwargs' (line 774)
    kwargs_156754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 37), 'kwargs', False)
    kwargs_156755 = {'kwargs_156754': kwargs_156754}
    # Getting the type of 'self' (line 774)
    self_156751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 12), 'self', False)
    # Obtaining the member '___init__' of a type (line 774)
    _init___156752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 12), self_156751, '___init__')
    # Calling ___init__(args, kwargs) (line 774)
    _init___call_result_156756 = invoke(stypy.reporting.localization.Localization(__file__, 774, 12), _init___156752, *[points_156753], **kwargs_156755)
    
    
    # ################# End of '__init__(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()

# Assigning a type to the variable '__init__' (line 772)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), '__init__', __init__)

@norecursion
def invalidate(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'invalidate'
    module_type_store = module_type_store.open_function_context('invalidate', 776, 8, False)
    
    # Passed parameters checking function
    invalidate.stypy_localization = localization
    invalidate.stypy_type_of_self = None
    invalidate.stypy_type_store = module_type_store
    invalidate.stypy_function_name = 'invalidate'
    invalidate.stypy_param_names_list = ['self']
    invalidate.stypy_varargs_param_name = None
    invalidate.stypy_kwargs_param_name = None
    invalidate.stypy_call_defaults = defaults
    invalidate.stypy_call_varargs = varargs
    invalidate.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'invalidate', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'invalidate', localization, ['self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'invalidate(...)' code ##################

    
    # Call to _check(...): (line 777)
    # Processing the call arguments (line 777)
    # Getting the type of 'self' (line 777)
    self_156759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 24), 'self', False)
    # Obtaining the member '_points' of a type (line 777)
    _points_156760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 24), self_156759, '_points')
    # Processing the call keyword arguments (line 777)
    kwargs_156761 = {}
    # Getting the type of 'self' (line 777)
    self_156757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 12), 'self', False)
    # Obtaining the member '_check' of a type (line 777)
    _check_156758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 12), self_156757, '_check')
    # Calling _check(args, kwargs) (line 777)
    _check_call_result_156762 = invoke(stypy.reporting.localization.Localization(__file__, 777, 12), _check_156758, *[_points_156760], **kwargs_156761)
    
    
    # Call to invalidate(...): (line 778)
    # Processing the call arguments (line 778)
    # Getting the type of 'self' (line 778)
    self_156765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 37), 'self', False)
    # Processing the call keyword arguments (line 778)
    kwargs_156766 = {}
    # Getting the type of 'TransformNode' (line 778)
    TransformNode_156763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 12), 'TransformNode', False)
    # Obtaining the member 'invalidate' of a type (line 778)
    invalidate_156764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 12), TransformNode_156763, 'invalidate')
    # Calling invalidate(args, kwargs) (line 778)
    invalidate_call_result_156767 = invoke(stypy.reporting.localization.Localization(__file__, 778, 12), invalidate_156764, *[self_156765], **kwargs_156766)
    
    
    # ################# End of 'invalidate(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'invalidate' in the type store
    # Getting the type of 'stypy_return_type' (line 776)
    stypy_return_type_156768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_156768)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'invalidate'
    return stypy_return_type_156768

# Assigning a type to the variable 'invalidate' (line 776)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 776, 8), 'invalidate', invalidate)
# SSA join for if statement (line 769)
module_type_store = module_type_store.join_ssa_context()

# Declaration of the 'TransformedBbox' class
# Getting the type of 'BboxBase' (line 1028)
BboxBase_156769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 22), 'BboxBase')

class TransformedBbox(BboxBase_156769, ):
    unicode_156770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1033, (-1)), 'unicode', u'\n    A :class:`Bbox` that is automatically transformed by a given\n    transform.  When either the child bounding box or transform\n    changes, the bounds of this bbox will update accordingly.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1034, 4, False)
        # Assigning a type to the variable 'self' (line 1035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedBbox.__init__', ['bbox', 'transform'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['bbox', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_156771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, (-1)), 'unicode', u'\n        *bbox*: a child :class:`Bbox`\n\n        *transform*: a 2D :class:`Transform`\n        ')
        
        
        # Getting the type of 'bbox' (line 1040)
        bbox_156772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 15), 'bbox')
        # Obtaining the member 'is_bbox' of a type (line 1040)
        is_bbox_156773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 15), bbox_156772, 'is_bbox')
        # Applying the 'not' unary operator (line 1040)
        result_not__156774 = python_operator(stypy.reporting.localization.Localization(__file__, 1040, 11), 'not', is_bbox_156773)
        
        # Testing the type of an if condition (line 1040)
        if_condition_156775 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1040, 8), result_not__156774)
        # Assigning a type to the variable 'if_condition_156775' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 8), 'if_condition_156775', if_condition_156775)
        # SSA begins for if statement (line 1040)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1041)
        # Processing the call arguments (line 1041)
        unicode_156777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 29), 'unicode', u"'bbox' is not a bbox")
        # Processing the call keyword arguments (line 1041)
        kwargs_156778 = {}
        # Getting the type of 'ValueError' (line 1041)
        ValueError_156776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1041)
        ValueError_call_result_156779 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 18), ValueError_156776, *[unicode_156777], **kwargs_156778)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1041, 12), ValueError_call_result_156779, 'raise parameter', BaseException)
        # SSA join for if statement (line 1040)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to isinstance(...): (line 1042)
        # Processing the call arguments (line 1042)
        # Getting the type of 'transform' (line 1042)
        transform_156781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 26), 'transform', False)
        # Getting the type of 'Transform' (line 1042)
        Transform_156782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 37), 'Transform', False)
        # Processing the call keyword arguments (line 1042)
        kwargs_156783 = {}
        # Getting the type of 'isinstance' (line 1042)
        isinstance_156780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1042)
        isinstance_call_result_156784 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 15), isinstance_156780, *[transform_156781, Transform_156782], **kwargs_156783)
        
        # Applying the 'not' unary operator (line 1042)
        result_not__156785 = python_operator(stypy.reporting.localization.Localization(__file__, 1042, 11), 'not', isinstance_call_result_156784)
        
        # Testing the type of an if condition (line 1042)
        if_condition_156786 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1042, 8), result_not__156785)
        # Assigning a type to the variable 'if_condition_156786' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 8), 'if_condition_156786', if_condition_156786)
        # SSA begins for if statement (line 1042)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1043):
        
        # Assigning a Str to a Name (line 1043):
        unicode_156787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 19), 'unicode', u"'transform' must be an instance of 'matplotlib.transform.Transform'")
        # Assigning a type to the variable 'msg' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 12), 'msg', unicode_156787)
        
        # Call to ValueError(...): (line 1045)
        # Processing the call arguments (line 1045)
        # Getting the type of 'msg' (line 1045)
        msg_156789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 29), 'msg', False)
        # Processing the call keyword arguments (line 1045)
        kwargs_156790 = {}
        # Getting the type of 'ValueError' (line 1045)
        ValueError_156788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1045)
        ValueError_call_result_156791 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 18), ValueError_156788, *[msg_156789], **kwargs_156790)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1045, 12), ValueError_call_result_156791, 'raise parameter', BaseException)
        # SSA join for if statement (line 1042)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'transform' (line 1046)
        transform_156792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 11), 'transform')
        # Obtaining the member 'input_dims' of a type (line 1046)
        input_dims_156793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 11), transform_156792, 'input_dims')
        int_156794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 35), 'int')
        # Applying the binary operator '!=' (line 1046)
        result_ne_156795 = python_operator(stypy.reporting.localization.Localization(__file__, 1046, 11), '!=', input_dims_156793, int_156794)
        
        
        # Getting the type of 'transform' (line 1046)
        transform_156796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 40), 'transform')
        # Obtaining the member 'output_dims' of a type (line 1046)
        output_dims_156797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 40), transform_156796, 'output_dims')
        int_156798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 65), 'int')
        # Applying the binary operator '!=' (line 1046)
        result_ne_156799 = python_operator(stypy.reporting.localization.Localization(__file__, 1046, 40), '!=', output_dims_156797, int_156798)
        
        # Applying the binary operator 'or' (line 1046)
        result_or_keyword_156800 = python_operator(stypy.reporting.localization.Localization(__file__, 1046, 11), 'or', result_ne_156795, result_ne_156799)
        
        # Testing the type of an if condition (line 1046)
        if_condition_156801 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1046, 8), result_or_keyword_156800)
        # Assigning a type to the variable 'if_condition_156801' (line 1046)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 8), 'if_condition_156801', if_condition_156801)
        # SSA begins for if statement (line 1046)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1047):
        
        # Assigning a Str to a Name (line 1047):
        unicode_156802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 18), 'unicode', u"The input and output dimensions of 'transform' must be 2")
        # Assigning a type to the variable 'msg' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'msg', unicode_156802)
        
        # Call to ValueError(...): (line 1048)
        # Processing the call arguments (line 1048)
        # Getting the type of 'msg' (line 1048)
        msg_156804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 29), 'msg', False)
        # Processing the call keyword arguments (line 1048)
        kwargs_156805 = {}
        # Getting the type of 'ValueError' (line 1048)
        ValueError_156803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1048)
        ValueError_call_result_156806 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 18), ValueError_156803, *[msg_156804], **kwargs_156805)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1048, 12), ValueError_call_result_156806, 'raise parameter', BaseException)
        # SSA join for if statement (line 1046)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 1050)
        # Processing the call arguments (line 1050)
        # Getting the type of 'self' (line 1050)
        self_156809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 26), 'self', False)
        # Processing the call keyword arguments (line 1050)
        # Getting the type of 'kwargs' (line 1050)
        kwargs_156810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 34), 'kwargs', False)
        kwargs_156811 = {'kwargs_156810': kwargs_156810}
        # Getting the type of 'BboxBase' (line 1050)
        BboxBase_156807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 8), 'BboxBase', False)
        # Obtaining the member '__init__' of a type (line 1050)
        init___156808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 8), BboxBase_156807, '__init__')
        # Calling __init__(args, kwargs) (line 1050)
        init___call_result_156812 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 8), init___156808, *[self_156809], **kwargs_156811)
        
        
        # Assigning a Name to a Attribute (line 1051):
        
        # Assigning a Name to a Attribute (line 1051):
        # Getting the type of 'bbox' (line 1051)
        bbox_156813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 21), 'bbox')
        # Getting the type of 'self' (line 1051)
        self_156814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 8), 'self')
        # Setting the type of the member '_bbox' of a type (line 1051)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 8), self_156814, '_bbox', bbox_156813)
        
        # Assigning a Name to a Attribute (line 1052):
        
        # Assigning a Name to a Attribute (line 1052):
        # Getting the type of 'transform' (line 1052)
        transform_156815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 26), 'transform')
        # Getting the type of 'self' (line 1052)
        self_156816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'self')
        # Setting the type of the member '_transform' of a type (line 1052)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 8), self_156816, '_transform', transform_156815)
        
        # Call to set_children(...): (line 1053)
        # Processing the call arguments (line 1053)
        # Getting the type of 'bbox' (line 1053)
        bbox_156819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 26), 'bbox', False)
        # Getting the type of 'transform' (line 1053)
        transform_156820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 32), 'transform', False)
        # Processing the call keyword arguments (line 1053)
        kwargs_156821 = {}
        # Getting the type of 'self' (line 1053)
        self_156817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 1053)
        set_children_156818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 8), self_156817, 'set_children')
        # Calling set_children(args, kwargs) (line 1053)
        set_children_call_result_156822 = invoke(stypy.reporting.localization.Localization(__file__, 1053, 8), set_children_156818, *[bbox_156819, transform_156820], **kwargs_156821)
        
        
        # Assigning a Name to a Attribute (line 1054):
        
        # Assigning a Name to a Attribute (line 1054):
        # Getting the type of 'None' (line 1054)
        None_156823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 23), 'None')
        # Getting the type of 'self' (line 1054)
        self_156824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 8), 'self')
        # Setting the type of the member '_points' of a type (line 1054)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 8), self_156824, '_points', None_156823)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 1056, 4, False)
        # Assigning a type to the variable 'self' (line 1057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'TransformedBbox.stypy__repr__')
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformedBbox.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedBbox.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_156825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 15), 'unicode', u'TransformedBbox(%r, %r)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1057)
        tuple_156826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1057)
        # Adding element type (line 1057)
        # Getting the type of 'self' (line 1057)
        self_156827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 44), 'self')
        # Obtaining the member '_bbox' of a type (line 1057)
        _bbox_156828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 44), self_156827, '_bbox')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1057, 44), tuple_156826, _bbox_156828)
        # Adding element type (line 1057)
        # Getting the type of 'self' (line 1057)
        self_156829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 56), 'self')
        # Obtaining the member '_transform' of a type (line 1057)
        _transform_156830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 56), self_156829, '_transform')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1057, 44), tuple_156826, _transform_156830)
        
        # Applying the binary operator '%' (line 1057)
        result_mod_156831 = python_operator(stypy.reporting.localization.Localization(__file__, 1057, 15), '%', unicode_156825, tuple_156826)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 8), 'stypy_return_type', result_mod_156831)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 1056)
        stypy_return_type_156832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_156832)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_156832


    @norecursion
    def get_points(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_points'
        module_type_store = module_type_store.open_function_context('get_points', 1059, 4, False)
        # Assigning a type to the variable 'self' (line 1060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformedBbox.get_points.__dict__.__setitem__('stypy_localization', localization)
        TransformedBbox.get_points.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformedBbox.get_points.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformedBbox.get_points.__dict__.__setitem__('stypy_function_name', 'TransformedBbox.get_points')
        TransformedBbox.get_points.__dict__.__setitem__('stypy_param_names_list', [])
        TransformedBbox.get_points.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformedBbox.get_points.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformedBbox.get_points.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformedBbox.get_points.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformedBbox.get_points.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformedBbox.get_points.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedBbox.get_points', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_points', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_points(...)' code ##################

        
        # Getting the type of 'self' (line 1060)
        self_156833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 1060)
        _invalid_156834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 11), self_156833, '_invalid')
        # Testing the type of an if condition (line 1060)
        if_condition_156835 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1060, 8), _invalid_156834)
        # Assigning a type to the variable 'if_condition_156835' (line 1060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'if_condition_156835', if_condition_156835)
        # SSA begins for if statement (line 1060)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1061):
        
        # Assigning a Call to a Name (line 1061):
        
        # Call to get_points(...): (line 1061)
        # Processing the call keyword arguments (line 1061)
        kwargs_156839 = {}
        # Getting the type of 'self' (line 1061)
        self_156836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 16), 'self', False)
        # Obtaining the member '_bbox' of a type (line 1061)
        _bbox_156837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1061, 16), self_156836, '_bbox')
        # Obtaining the member 'get_points' of a type (line 1061)
        get_points_156838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1061, 16), _bbox_156837, 'get_points')
        # Calling get_points(args, kwargs) (line 1061)
        get_points_call_result_156840 = invoke(stypy.reporting.localization.Localization(__file__, 1061, 16), get_points_156838, *[], **kwargs_156839)
        
        # Assigning a type to the variable 'p' (line 1061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 12), 'p', get_points_call_result_156840)
        
        # Assigning a Call to a Name (line 1065):
        
        # Assigning a Call to a Name (line 1065):
        
        # Call to transform(...): (line 1065)
        # Processing the call arguments (line 1065)
        
        # Obtaining an instance of the builtin type 'list' (line 1066)
        list_156844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1066)
        # Adding element type (line 1066)
        
        # Obtaining an instance of the builtin type 'list' (line 1066)
        list_156845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1066)
        # Adding element type (line 1066)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1066)
        tuple_156846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1066)
        # Adding element type (line 1066)
        int_156847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 20), tuple_156846, int_156847)
        # Adding element type (line 1066)
        int_156848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 20), tuple_156846, int_156848)
        
        # Getting the type of 'p' (line 1066)
        p_156849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 18), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 1066)
        getitem___156850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 18), p_156849, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1066)
        subscript_call_result_156851 = invoke(stypy.reporting.localization.Localization(__file__, 1066, 18), getitem___156850, tuple_156846)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 17), list_156845, subscript_call_result_156851)
        # Adding element type (line 1066)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1066)
        tuple_156852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1066)
        # Adding element type (line 1066)
        int_156853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 29), tuple_156852, int_156853)
        # Adding element type (line 1066)
        int_156854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 29), tuple_156852, int_156854)
        
        # Getting the type of 'p' (line 1066)
        p_156855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 27), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 1066)
        getitem___156856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 27), p_156855, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1066)
        subscript_call_result_156857 = invoke(stypy.reporting.localization.Localization(__file__, 1066, 27), getitem___156856, tuple_156852)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 17), list_156845, subscript_call_result_156857)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 16), list_156844, list_156845)
        # Adding element type (line 1066)
        
        # Obtaining an instance of the builtin type 'list' (line 1067)
        list_156858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1067)
        # Adding element type (line 1067)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1067)
        tuple_156859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1067)
        # Adding element type (line 1067)
        int_156860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 20), tuple_156859, int_156860)
        # Adding element type (line 1067)
        int_156861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 20), tuple_156859, int_156861)
        
        # Getting the type of 'p' (line 1067)
        p_156862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 18), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 1067)
        getitem___156863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 18), p_156862, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1067)
        subscript_call_result_156864 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 18), getitem___156863, tuple_156859)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 17), list_156858, subscript_call_result_156864)
        # Adding element type (line 1067)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1067)
        tuple_156865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1067)
        # Adding element type (line 1067)
        int_156866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 29), tuple_156865, int_156866)
        # Adding element type (line 1067)
        int_156867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 29), tuple_156865, int_156867)
        
        # Getting the type of 'p' (line 1067)
        p_156868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 27), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 1067)
        getitem___156869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 27), p_156868, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1067)
        subscript_call_result_156870 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 27), getitem___156869, tuple_156865)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 17), list_156858, subscript_call_result_156870)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 16), list_156844, list_156858)
        # Adding element type (line 1066)
        
        # Obtaining an instance of the builtin type 'list' (line 1068)
        list_156871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1068)
        # Adding element type (line 1068)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1068)
        tuple_156872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1068)
        # Adding element type (line 1068)
        int_156873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1068, 20), tuple_156872, int_156873)
        # Adding element type (line 1068)
        int_156874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1068, 20), tuple_156872, int_156874)
        
        # Getting the type of 'p' (line 1068)
        p_156875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 18), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 1068)
        getitem___156876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 18), p_156875, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1068)
        subscript_call_result_156877 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 18), getitem___156876, tuple_156872)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1068, 17), list_156871, subscript_call_result_156877)
        # Adding element type (line 1068)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1068)
        tuple_156878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1068)
        # Adding element type (line 1068)
        int_156879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1068, 29), tuple_156878, int_156879)
        # Adding element type (line 1068)
        int_156880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1068, 29), tuple_156878, int_156880)
        
        # Getting the type of 'p' (line 1068)
        p_156881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 27), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 1068)
        getitem___156882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 27), p_156881, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1068)
        subscript_call_result_156883 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 27), getitem___156882, tuple_156878)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1068, 17), list_156871, subscript_call_result_156883)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 16), list_156844, list_156871)
        # Adding element type (line 1066)
        
        # Obtaining an instance of the builtin type 'list' (line 1069)
        list_156884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1069)
        # Adding element type (line 1069)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1069)
        tuple_156885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1069)
        # Adding element type (line 1069)
        int_156886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1069, 20), tuple_156885, int_156886)
        # Adding element type (line 1069)
        int_156887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1069, 20), tuple_156885, int_156887)
        
        # Getting the type of 'p' (line 1069)
        p_156888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 18), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 1069)
        getitem___156889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 18), p_156888, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1069)
        subscript_call_result_156890 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 18), getitem___156889, tuple_156885)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1069, 17), list_156884, subscript_call_result_156890)
        # Adding element type (line 1069)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1069)
        tuple_156891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1069)
        # Adding element type (line 1069)
        int_156892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1069, 29), tuple_156891, int_156892)
        # Adding element type (line 1069)
        int_156893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1069, 29), tuple_156891, int_156893)
        
        # Getting the type of 'p' (line 1069)
        p_156894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 27), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 1069)
        getitem___156895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 27), p_156894, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1069)
        subscript_call_result_156896 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 27), getitem___156895, tuple_156891)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1069, 17), list_156884, subscript_call_result_156896)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 16), list_156844, list_156884)
        
        # Processing the call keyword arguments (line 1065)
        kwargs_156897 = {}
        # Getting the type of 'self' (line 1065)
        self_156841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 21), 'self', False)
        # Obtaining the member '_transform' of a type (line 1065)
        _transform_156842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 21), self_156841, '_transform')
        # Obtaining the member 'transform' of a type (line 1065)
        transform_156843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 21), _transform_156842, 'transform')
        # Calling transform(args, kwargs) (line 1065)
        transform_call_result_156898 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 21), transform_156843, *[list_156844], **kwargs_156897)
        
        # Assigning a type to the variable 'points' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 12), 'points', transform_call_result_156898)
        
        # Assigning a Call to a Name (line 1070):
        
        # Assigning a Call to a Name (line 1070):
        
        # Call to filled(...): (line 1070)
        # Processing the call arguments (line 1070)
        # Getting the type of 'points' (line 1070)
        points_156902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 34), 'points', False)
        float_156903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, 42), 'float')
        # Processing the call keyword arguments (line 1070)
        kwargs_156904 = {}
        # Getting the type of 'np' (line 1070)
        np_156899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 21), 'np', False)
        # Obtaining the member 'ma' of a type (line 1070)
        ma_156900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 21), np_156899, 'ma')
        # Obtaining the member 'filled' of a type (line 1070)
        filled_156901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 21), ma_156900, 'filled')
        # Calling filled(args, kwargs) (line 1070)
        filled_call_result_156905 = invoke(stypy.reporting.localization.Localization(__file__, 1070, 21), filled_156901, *[points_156902, float_156903], **kwargs_156904)
        
        # Assigning a type to the variable 'points' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 12), 'points', filled_call_result_156905)
        
        # Assigning a Tuple to a Name (line 1072):
        
        # Assigning a Tuple to a Name (line 1072):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1072)
        tuple_156906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1072, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1072)
        # Adding element type (line 1072)
        
        # Call to min(...): (line 1072)
        # Processing the call arguments (line 1072)
        
        # Obtaining the type of the subscript
        slice_156908 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1072, 21), None, None, None)
        int_156909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1072, 31), 'int')
        # Getting the type of 'points' (line 1072)
        points_156910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 21), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 1072)
        getitem___156911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 21), points_156910, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1072)
        subscript_call_result_156912 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 21), getitem___156911, (slice_156908, int_156909))
        
        # Processing the call keyword arguments (line 1072)
        kwargs_156913 = {}
        # Getting the type of 'min' (line 1072)
        min_156907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 17), 'min', False)
        # Calling min(args, kwargs) (line 1072)
        min_call_result_156914 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 17), min_156907, *[subscript_call_result_156912], **kwargs_156913)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1072, 17), tuple_156906, min_call_result_156914)
        # Adding element type (line 1072)
        
        # Call to max(...): (line 1072)
        # Processing the call arguments (line 1072)
        
        # Obtaining the type of the subscript
        slice_156916 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1072, 40), None, None, None)
        int_156917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1072, 50), 'int')
        # Getting the type of 'points' (line 1072)
        points_156918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 40), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 1072)
        getitem___156919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 40), points_156918, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1072)
        subscript_call_result_156920 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 40), getitem___156919, (slice_156916, int_156917))
        
        # Processing the call keyword arguments (line 1072)
        kwargs_156921 = {}
        # Getting the type of 'max' (line 1072)
        max_156915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 36), 'max', False)
        # Calling max(args, kwargs) (line 1072)
        max_call_result_156922 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 36), max_156915, *[subscript_call_result_156920], **kwargs_156921)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1072, 17), tuple_156906, max_call_result_156922)
        
        # Assigning a type to the variable 'xs' (line 1072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 12), 'xs', tuple_156906)
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1073)
        tuple_156923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1073)
        # Adding element type (line 1073)
        int_156924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1073, 17), tuple_156923, int_156924)
        # Adding element type (line 1073)
        int_156925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1073, 17), tuple_156923, int_156925)
        
        # Getting the type of 'p' (line 1073)
        p_156926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 15), 'p')
        # Obtaining the member '__getitem__' of a type (line 1073)
        getitem___156927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 15), p_156926, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1073)
        subscript_call_result_156928 = invoke(stypy.reporting.localization.Localization(__file__, 1073, 15), getitem___156927, tuple_156923)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1073)
        tuple_156929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1073)
        # Adding element type (line 1073)
        int_156930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1073, 27), tuple_156929, int_156930)
        # Adding element type (line 1073)
        int_156931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1073, 27), tuple_156929, int_156931)
        
        # Getting the type of 'p' (line 1073)
        p_156932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 25), 'p')
        # Obtaining the member '__getitem__' of a type (line 1073)
        getitem___156933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 25), p_156932, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1073)
        subscript_call_result_156934 = invoke(stypy.reporting.localization.Localization(__file__, 1073, 25), getitem___156933, tuple_156929)
        
        # Applying the binary operator '>' (line 1073)
        result_gt_156935 = python_operator(stypy.reporting.localization.Localization(__file__, 1073, 15), '>', subscript_call_result_156928, subscript_call_result_156934)
        
        # Testing the type of an if condition (line 1073)
        if_condition_156936 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1073, 12), result_gt_156935)
        # Assigning a type to the variable 'if_condition_156936' (line 1073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 12), 'if_condition_156936', if_condition_156936)
        # SSA begins for if statement (line 1073)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1074):
        
        # Assigning a Subscript to a Name (line 1074):
        
        # Obtaining the type of the subscript
        int_156937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 26), 'int')
        slice_156938 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1074, 21), None, None, int_156937)
        # Getting the type of 'xs' (line 1074)
        xs_156939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 21), 'xs')
        # Obtaining the member '__getitem__' of a type (line 1074)
        getitem___156940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 21), xs_156939, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1074)
        subscript_call_result_156941 = invoke(stypy.reporting.localization.Localization(__file__, 1074, 21), getitem___156940, slice_156938)
        
        # Assigning a type to the variable 'xs' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 16), 'xs', subscript_call_result_156941)
        # SSA join for if statement (line 1073)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Name (line 1076):
        
        # Assigning a Tuple to a Name (line 1076):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1076)
        tuple_156942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1076, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1076)
        # Adding element type (line 1076)
        
        # Call to min(...): (line 1076)
        # Processing the call arguments (line 1076)
        
        # Obtaining the type of the subscript
        slice_156944 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1076, 21), None, None, None)
        int_156945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1076, 31), 'int')
        # Getting the type of 'points' (line 1076)
        points_156946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 21), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 1076)
        getitem___156947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 21), points_156946, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1076)
        subscript_call_result_156948 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 21), getitem___156947, (slice_156944, int_156945))
        
        # Processing the call keyword arguments (line 1076)
        kwargs_156949 = {}
        # Getting the type of 'min' (line 1076)
        min_156943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 17), 'min', False)
        # Calling min(args, kwargs) (line 1076)
        min_call_result_156950 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 17), min_156943, *[subscript_call_result_156948], **kwargs_156949)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1076, 17), tuple_156942, min_call_result_156950)
        # Adding element type (line 1076)
        
        # Call to max(...): (line 1076)
        # Processing the call arguments (line 1076)
        
        # Obtaining the type of the subscript
        slice_156952 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1076, 40), None, None, None)
        int_156953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1076, 50), 'int')
        # Getting the type of 'points' (line 1076)
        points_156954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 40), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 1076)
        getitem___156955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 40), points_156954, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1076)
        subscript_call_result_156956 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 40), getitem___156955, (slice_156952, int_156953))
        
        # Processing the call keyword arguments (line 1076)
        kwargs_156957 = {}
        # Getting the type of 'max' (line 1076)
        max_156951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 36), 'max', False)
        # Calling max(args, kwargs) (line 1076)
        max_call_result_156958 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 36), max_156951, *[subscript_call_result_156956], **kwargs_156957)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1076, 17), tuple_156942, max_call_result_156958)
        
        # Assigning a type to the variable 'ys' (line 1076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 12), 'ys', tuple_156942)
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1077)
        tuple_156959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1077)
        # Adding element type (line 1077)
        int_156960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1077, 17), tuple_156959, int_156960)
        # Adding element type (line 1077)
        int_156961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1077, 17), tuple_156959, int_156961)
        
        # Getting the type of 'p' (line 1077)
        p_156962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 15), 'p')
        # Obtaining the member '__getitem__' of a type (line 1077)
        getitem___156963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 15), p_156962, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1077)
        subscript_call_result_156964 = invoke(stypy.reporting.localization.Localization(__file__, 1077, 15), getitem___156963, tuple_156959)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1077)
        tuple_156965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1077)
        # Adding element type (line 1077)
        int_156966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1077, 27), tuple_156965, int_156966)
        # Adding element type (line 1077)
        int_156967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1077, 27), tuple_156965, int_156967)
        
        # Getting the type of 'p' (line 1077)
        p_156968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 25), 'p')
        # Obtaining the member '__getitem__' of a type (line 1077)
        getitem___156969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 25), p_156968, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1077)
        subscript_call_result_156970 = invoke(stypy.reporting.localization.Localization(__file__, 1077, 25), getitem___156969, tuple_156965)
        
        # Applying the binary operator '>' (line 1077)
        result_gt_156971 = python_operator(stypy.reporting.localization.Localization(__file__, 1077, 15), '>', subscript_call_result_156964, subscript_call_result_156970)
        
        # Testing the type of an if condition (line 1077)
        if_condition_156972 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1077, 12), result_gt_156971)
        # Assigning a type to the variable 'if_condition_156972' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 12), 'if_condition_156972', if_condition_156972)
        # SSA begins for if statement (line 1077)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1078):
        
        # Assigning a Subscript to a Name (line 1078):
        
        # Obtaining the type of the subscript
        int_156973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 26), 'int')
        slice_156974 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1078, 21), None, None, int_156973)
        # Getting the type of 'ys' (line 1078)
        ys_156975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 21), 'ys')
        # Obtaining the member '__getitem__' of a type (line 1078)
        getitem___156976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 21), ys_156975, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1078)
        subscript_call_result_156977 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 21), getitem___156976, slice_156974)
        
        # Assigning a type to the variable 'ys' (line 1078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 16), 'ys', subscript_call_result_156977)
        # SSA join for if statement (line 1077)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1080):
        
        # Assigning a Call to a Attribute (line 1080):
        
        # Call to array(...): (line 1080)
        # Processing the call arguments (line 1080)
        
        # Obtaining an instance of the builtin type 'list' (line 1080)
        list_156980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1080)
        # Adding element type (line 1080)
        
        # Obtaining an instance of the builtin type 'list' (line 1081)
        list_156981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1081)
        # Adding element type (line 1081)
        
        # Obtaining the type of the subscript
        int_156982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 20), 'int')
        # Getting the type of 'xs' (line 1081)
        xs_156983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 17), 'xs', False)
        # Obtaining the member '__getitem__' of a type (line 1081)
        getitem___156984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 17), xs_156983, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1081)
        subscript_call_result_156985 = invoke(stypy.reporting.localization.Localization(__file__, 1081, 17), getitem___156984, int_156982)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1081, 16), list_156981, subscript_call_result_156985)
        # Adding element type (line 1081)
        
        # Obtaining the type of the subscript
        int_156986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 27), 'int')
        # Getting the type of 'ys' (line 1081)
        ys_156987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 24), 'ys', False)
        # Obtaining the member '__getitem__' of a type (line 1081)
        getitem___156988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 24), ys_156987, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1081)
        subscript_call_result_156989 = invoke(stypy.reporting.localization.Localization(__file__, 1081, 24), getitem___156988, int_156986)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1081, 16), list_156981, subscript_call_result_156989)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 36), list_156980, list_156981)
        # Adding element type (line 1080)
        
        # Obtaining an instance of the builtin type 'list' (line 1082)
        list_156990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1082)
        # Adding element type (line 1082)
        
        # Obtaining the type of the subscript
        int_156991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 20), 'int')
        # Getting the type of 'xs' (line 1082)
        xs_156992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 17), 'xs', False)
        # Obtaining the member '__getitem__' of a type (line 1082)
        getitem___156993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 17), xs_156992, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1082)
        subscript_call_result_156994 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 17), getitem___156993, int_156991)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 16), list_156990, subscript_call_result_156994)
        # Adding element type (line 1082)
        
        # Obtaining the type of the subscript
        int_156995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 27), 'int')
        # Getting the type of 'ys' (line 1082)
        ys_156996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 24), 'ys', False)
        # Obtaining the member '__getitem__' of a type (line 1082)
        getitem___156997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 24), ys_156996, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1082)
        subscript_call_result_156998 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 24), getitem___156997, int_156995)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 16), list_156990, subscript_call_result_156998)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 36), list_156980, list_156990)
        
        # Processing the call keyword arguments (line 1080)
        kwargs_156999 = {}
        # Getting the type of 'np' (line 1080)
        np_156978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 27), 'np', False)
        # Obtaining the member 'array' of a type (line 1080)
        array_156979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 27), np_156978, 'array')
        # Calling array(args, kwargs) (line 1080)
        array_call_result_157000 = invoke(stypy.reporting.localization.Localization(__file__, 1080, 27), array_156979, *[list_156980], **kwargs_156999)
        
        # Getting the type of 'self' (line 1080)
        self_157001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'self')
        # Setting the type of the member '_points' of a type (line 1080)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 12), self_157001, '_points', array_call_result_157000)
        
        # Assigning a Num to a Attribute (line 1085):
        
        # Assigning a Num to a Attribute (line 1085):
        int_157002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1085, 28), 'int')
        # Getting the type of 'self' (line 1085)
        self_157003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 1085)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 12), self_157003, '_invalid', int_157002)
        # SSA join for if statement (line 1060)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 1086)
        self_157004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 15), 'self')
        # Obtaining the member '_points' of a type (line 1086)
        _points_157005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 15), self_157004, '_points')
        # Assigning a type to the variable 'stypy_return_type' (line 1086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 8), 'stypy_return_type', _points_157005)
        
        # ################# End of 'get_points(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_points' in the type store
        # Getting the type of 'stypy_return_type' (line 1059)
        stypy_return_type_157006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157006)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_points'
        return stypy_return_type_157006


# Assigning a type to the variable 'TransformedBbox' (line 1028)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 0), 'TransformedBbox', TransformedBbox)

# Assigning a Attribute to a Attribute (line 1087):
# Getting the type of 'Bbox' (line 1087)
Bbox_157007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 25), 'Bbox')
# Obtaining the member 'get_points' of a type (line 1087)
get_points_157008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 25), Bbox_157007, 'get_points')
# Obtaining the member '__doc__' of a type (line 1087)
doc___157009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 25), get_points_157008, '__doc__')
# Getting the type of 'TransformedBbox'
TransformedBbox_157010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformedBbox')
# Obtaining the member 'get_points' of a type
get_points_157011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformedBbox_157010, 'get_points')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_points_157011, '__doc__', doc___157009)

# Assigning a Attribute to a Attribute (line 1087):

# Getting the type of 'DEBUG' (line 1089)
DEBUG_157012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 7), 'DEBUG')
# Testing the type of an if condition (line 1089)
if_condition_157013 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1089, 4), DEBUG_157012)
# Assigning a type to the variable 'if_condition_157013' (line 1089)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 4), 'if_condition_157013', if_condition_157013)
# SSA begins for if statement (line 1089)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 1090):

# Assigning a Name to a Name (line 1090):
# Getting the type of 'TransformedBbox'
TransformedBbox_157014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformedBbox')
# Obtaining the member 'get_points' of a type
get_points_157015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformedBbox_157014, 'get_points')
# Assigning a type to the variable '_get_points' (line 1090)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), '_get_points', get_points_157015)

@norecursion
def get_points(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_points'
    module_type_store = module_type_store.open_function_context('get_points', 1092, 8, False)
    
    # Passed parameters checking function
    get_points.stypy_localization = localization
    get_points.stypy_type_of_self = None
    get_points.stypy_type_store = module_type_store
    get_points.stypy_function_name = 'get_points'
    get_points.stypy_param_names_list = ['self']
    get_points.stypy_varargs_param_name = None
    get_points.stypy_kwargs_param_name = None
    get_points.stypy_call_defaults = defaults
    get_points.stypy_call_varargs = varargs
    get_points.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_points', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_points', localization, ['self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_points(...)' code ##################

    
    # Assigning a Call to a Name (line 1093):
    
    # Assigning a Call to a Name (line 1093):
    
    # Call to _get_points(...): (line 1093)
    # Processing the call keyword arguments (line 1093)
    kwargs_157018 = {}
    # Getting the type of 'self' (line 1093)
    self_157016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 21), 'self', False)
    # Obtaining the member '_get_points' of a type (line 1093)
    _get_points_157017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 21), self_157016, '_get_points')
    # Calling _get_points(args, kwargs) (line 1093)
    _get_points_call_result_157019 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 21), _get_points_157017, *[], **kwargs_157018)
    
    # Assigning a type to the variable 'points' (line 1093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 12), 'points', _get_points_call_result_157019)
    
    # Call to _check(...): (line 1094)
    # Processing the call arguments (line 1094)
    # Getting the type of 'points' (line 1094)
    points_157022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 24), 'points', False)
    # Processing the call keyword arguments (line 1094)
    kwargs_157023 = {}
    # Getting the type of 'self' (line 1094)
    self_157020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 12), 'self', False)
    # Obtaining the member '_check' of a type (line 1094)
    _check_157021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 12), self_157020, '_check')
    # Calling _check(args, kwargs) (line 1094)
    _check_call_result_157024 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 12), _check_157021, *[points_157022], **kwargs_157023)
    
    # Getting the type of 'points' (line 1095)
    points_157025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 19), 'points')
    # Assigning a type to the variable 'stypy_return_type' (line 1095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 12), 'stypy_return_type', points_157025)
    
    # ################# End of 'get_points(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_points' in the type store
    # Getting the type of 'stypy_return_type' (line 1092)
    stypy_return_type_157026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_157026)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_points'
    return stypy_return_type_157026

# Assigning a type to the variable 'get_points' (line 1092)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'get_points', get_points)
# SSA join for if statement (line 1089)
module_type_store = module_type_store.join_ssa_context()

# Declaration of the 'LockableBbox' class
# Getting the type of 'BboxBase' (line 1098)
BboxBase_157027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 19), 'BboxBase')

class LockableBbox(BboxBase_157027, ):
    unicode_157028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1104, (-1)), 'unicode', u'\n    A :class:`Bbox` where some elements may be locked at certain values.\n\n    When the child bounding box changes, the bounds of this bbox will update\n    accordingly with the exception of the locked elements.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1105)
        None_157029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 32), 'None')
        # Getting the type of 'None' (line 1105)
        None_157030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 41), 'None')
        # Getting the type of 'None' (line 1105)
        None_157031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 50), 'None')
        # Getting the type of 'None' (line 1105)
        None_157032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 59), 'None')
        defaults = [None_157029, None_157030, None_157031, None_157032]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1105, 4, False)
        # Assigning a type to the variable 'self' (line 1106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.__init__', ['bbox', 'x0', 'y0', 'x1', 'y1'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['bbox', 'x0', 'y0', 'x1', 'y1'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_157033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        bbox : Bbox\n            The child bounding box to wrap.\n\n        x0 : float or None\n            The locked value for x0, or None to leave unlocked.\n\n        y0 : float or None\n            The locked value for y0, or None to leave unlocked.\n\n        x1 : float or None\n            The locked value for x1, or None to leave unlocked.\n\n        y1 : float or None\n            The locked value for y1, or None to leave unlocked.\n\n        ')
        
        
        # Getting the type of 'bbox' (line 1125)
        bbox_157034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 15), 'bbox')
        # Obtaining the member 'is_bbox' of a type (line 1125)
        is_bbox_157035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 15), bbox_157034, 'is_bbox')
        # Applying the 'not' unary operator (line 1125)
        result_not__157036 = python_operator(stypy.reporting.localization.Localization(__file__, 1125, 11), 'not', is_bbox_157035)
        
        # Testing the type of an if condition (line 1125)
        if_condition_157037 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1125, 8), result_not__157036)
        # Assigning a type to the variable 'if_condition_157037' (line 1125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1125, 8), 'if_condition_157037', if_condition_157037)
        # SSA begins for if statement (line 1125)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1126)
        # Processing the call arguments (line 1126)
        unicode_157039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 29), 'unicode', u"'bbox' is not a bbox")
        # Processing the call keyword arguments (line 1126)
        kwargs_157040 = {}
        # Getting the type of 'ValueError' (line 1126)
        ValueError_157038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1126)
        ValueError_call_result_157041 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 18), ValueError_157038, *[unicode_157039], **kwargs_157040)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1126, 12), ValueError_call_result_157041, 'raise parameter', BaseException)
        # SSA join for if statement (line 1125)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 1128)
        # Processing the call arguments (line 1128)
        # Getting the type of 'self' (line 1128)
        self_157044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 26), 'self', False)
        # Processing the call keyword arguments (line 1128)
        # Getting the type of 'kwargs' (line 1128)
        kwargs_157045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 34), 'kwargs', False)
        kwargs_157046 = {'kwargs_157045': kwargs_157045}
        # Getting the type of 'BboxBase' (line 1128)
        BboxBase_157042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 8), 'BboxBase', False)
        # Obtaining the member '__init__' of a type (line 1128)
        init___157043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 8), BboxBase_157042, '__init__')
        # Calling __init__(args, kwargs) (line 1128)
        init___call_result_157047 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 8), init___157043, *[self_157044], **kwargs_157046)
        
        
        # Assigning a Name to a Attribute (line 1129):
        
        # Assigning a Name to a Attribute (line 1129):
        # Getting the type of 'bbox' (line 1129)
        bbox_157048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 21), 'bbox')
        # Getting the type of 'self' (line 1129)
        self_157049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'self')
        # Setting the type of the member '_bbox' of a type (line 1129)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 8), self_157049, '_bbox', bbox_157048)
        
        # Call to set_children(...): (line 1130)
        # Processing the call arguments (line 1130)
        # Getting the type of 'bbox' (line 1130)
        bbox_157052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 26), 'bbox', False)
        # Processing the call keyword arguments (line 1130)
        kwargs_157053 = {}
        # Getting the type of 'self' (line 1130)
        self_157050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 1130)
        set_children_157051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 8), self_157050, 'set_children')
        # Calling set_children(args, kwargs) (line 1130)
        set_children_call_result_157054 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 8), set_children_157051, *[bbox_157052], **kwargs_157053)
        
        
        # Assigning a Name to a Attribute (line 1131):
        
        # Assigning a Name to a Attribute (line 1131):
        # Getting the type of 'None' (line 1131)
        None_157055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 23), 'None')
        # Getting the type of 'self' (line 1131)
        self_157056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'self')
        # Setting the type of the member '_points' of a type (line 1131)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 8), self_157056, '_points', None_157055)
        
        # Assigning a List to a Name (line 1132):
        
        # Assigning a List to a Name (line 1132):
        
        # Obtaining an instance of the builtin type 'list' (line 1132)
        list_157057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1132)
        # Adding element type (line 1132)
        # Getting the type of 'x0' (line 1132)
        x0_157058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 14), 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 13), list_157057, x0_157058)
        # Adding element type (line 1132)
        # Getting the type of 'y0' (line 1132)
        y0_157059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 18), 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 13), list_157057, y0_157059)
        # Adding element type (line 1132)
        # Getting the type of 'x1' (line 1132)
        x1_157060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 22), 'x1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 13), list_157057, x1_157060)
        # Adding element type (line 1132)
        # Getting the type of 'y1' (line 1132)
        y1_157061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 26), 'y1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 13), list_157057, y1_157061)
        
        # Assigning a type to the variable 'fp' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'fp', list_157057)
        
        # Assigning a ListComp to a Name (line 1133):
        
        # Assigning a ListComp to a Name (line 1133):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'fp' (line 1133)
        fp_157065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 39), 'fp')
        comprehension_157066 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1133, 16), fp_157065)
        # Assigning a type to the variable 'val' (line 1133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 16), 'val', comprehension_157066)
        
        # Getting the type of 'val' (line 1133)
        val_157062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 16), 'val')
        # Getting the type of 'None' (line 1133)
        None_157063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 23), 'None')
        # Applying the binary operator 'is' (line 1133)
        result_is__157064 = python_operator(stypy.reporting.localization.Localization(__file__, 1133, 16), 'is', val_157062, None_157063)
        
        list_157067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1133, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1133, 16), list_157067, result_is__157064)
        # Assigning a type to the variable 'mask' (line 1133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 8), 'mask', list_157067)
        
        # Assigning a Call to a Attribute (line 1134):
        
        # Assigning a Call to a Attribute (line 1134):
        
        # Call to reshape(...): (line 1134)
        # Processing the call arguments (line 1134)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1135)
        tuple_157079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 62), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1135)
        # Adding element type (line 1135)
        int_157080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 62), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1135, 62), tuple_157079, int_157080)
        # Adding element type (line 1135)
        int_157081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 65), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1135, 62), tuple_157079, int_157081)
        
        # Processing the call keyword arguments (line 1134)
        kwargs_157082 = {}
        
        # Call to array(...): (line 1134)
        # Processing the call arguments (line 1134)
        # Getting the type of 'fp' (line 1134)
        fp_157071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 42), 'fp', False)
        # Getting the type of 'np' (line 1134)
        np_157072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 46), 'np', False)
        # Obtaining the member 'float_' of a type (line 1134)
        float__157073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 46), np_157072, 'float_')
        # Processing the call keyword arguments (line 1134)
        # Getting the type of 'mask' (line 1135)
        mask_157074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 47), 'mask', False)
        keyword_157075 = mask_157074
        kwargs_157076 = {'mask': keyword_157075}
        # Getting the type of 'np' (line 1134)
        np_157068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 30), 'np', False)
        # Obtaining the member 'ma' of a type (line 1134)
        ma_157069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 30), np_157068, 'ma')
        # Obtaining the member 'array' of a type (line 1134)
        array_157070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 30), ma_157069, 'array')
        # Calling array(args, kwargs) (line 1134)
        array_call_result_157077 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 30), array_157070, *[fp_157071, float__157073], **kwargs_157076)
        
        # Obtaining the member 'reshape' of a type (line 1134)
        reshape_157078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 30), array_call_result_157077, 'reshape')
        # Calling reshape(args, kwargs) (line 1134)
        reshape_call_result_157083 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 30), reshape_157078, *[tuple_157079], **kwargs_157082)
        
        # Getting the type of 'self' (line 1134)
        self_157084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'self')
        # Setting the type of the member '_locked_points' of a type (line 1134)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 8), self_157084, '_locked_points', reshape_call_result_157083)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 1137, 4, False)
        # Assigning a type to the variable 'self' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'LockableBbox.stypy__repr__')
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockableBbox.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_157085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 15), 'unicode', u'LockableBbox(%r, %r)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1138)
        tuple_157086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1138)
        # Adding element type (line 1138)
        # Getting the type of 'self' (line 1138)
        self_157087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 41), 'self')
        # Obtaining the member '_bbox' of a type (line 1138)
        _bbox_157088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 41), self_157087, '_bbox')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1138, 41), tuple_157086, _bbox_157088)
        # Adding element type (line 1138)
        # Getting the type of 'self' (line 1138)
        self_157089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 53), 'self')
        # Obtaining the member '_locked_points' of a type (line 1138)
        _locked_points_157090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 53), self_157089, '_locked_points')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1138, 41), tuple_157086, _locked_points_157090)
        
        # Applying the binary operator '%' (line 1138)
        result_mod_157091 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 15), '%', unicode_157085, tuple_157086)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'stypy_return_type', result_mod_157091)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 1137)
        stypy_return_type_157092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157092)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_157092


    @norecursion
    def get_points(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_points'
        module_type_store = module_type_store.open_function_context('get_points', 1140, 4, False)
        # Assigning a type to the variable 'self' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockableBbox.get_points.__dict__.__setitem__('stypy_localization', localization)
        LockableBbox.get_points.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockableBbox.get_points.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockableBbox.get_points.__dict__.__setitem__('stypy_function_name', 'LockableBbox.get_points')
        LockableBbox.get_points.__dict__.__setitem__('stypy_param_names_list', [])
        LockableBbox.get_points.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockableBbox.get_points.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockableBbox.get_points.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockableBbox.get_points.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockableBbox.get_points.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockableBbox.get_points.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.get_points', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_points', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_points(...)' code ##################

        
        # Getting the type of 'self' (line 1141)
        self_157093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 1141)
        _invalid_157094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 11), self_157093, '_invalid')
        # Testing the type of an if condition (line 1141)
        if_condition_157095 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1141, 8), _invalid_157094)
        # Assigning a type to the variable 'if_condition_157095' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 8), 'if_condition_157095', if_condition_157095)
        # SSA begins for if statement (line 1141)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1142):
        
        # Assigning a Call to a Name (line 1142):
        
        # Call to get_points(...): (line 1142)
        # Processing the call keyword arguments (line 1142)
        kwargs_157099 = {}
        # Getting the type of 'self' (line 1142)
        self_157096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 21), 'self', False)
        # Obtaining the member '_bbox' of a type (line 1142)
        _bbox_157097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 21), self_157096, '_bbox')
        # Obtaining the member 'get_points' of a type (line 1142)
        get_points_157098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 21), _bbox_157097, 'get_points')
        # Calling get_points(args, kwargs) (line 1142)
        get_points_call_result_157100 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 21), get_points_157098, *[], **kwargs_157099)
        
        # Assigning a type to the variable 'points' (line 1142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 12), 'points', get_points_call_result_157100)
        
        # Assigning a Call to a Attribute (line 1143):
        
        # Assigning a Call to a Attribute (line 1143):
        
        # Call to where(...): (line 1143)
        # Processing the call arguments (line 1143)
        # Getting the type of 'self' (line 1143)
        self_157103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 36), 'self', False)
        # Obtaining the member '_locked_points' of a type (line 1143)
        _locked_points_157104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 36), self_157103, '_locked_points')
        # Obtaining the member 'mask' of a type (line 1143)
        mask_157105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 36), _locked_points_157104, 'mask')
        # Getting the type of 'points' (line 1144)
        points_157106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 36), 'points', False)
        # Getting the type of 'self' (line 1145)
        self_157107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 36), 'self', False)
        # Obtaining the member '_locked_points' of a type (line 1145)
        _locked_points_157108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 36), self_157107, '_locked_points')
        # Processing the call keyword arguments (line 1143)
        kwargs_157109 = {}
        # Getting the type of 'np' (line 1143)
        np_157101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 27), 'np', False)
        # Obtaining the member 'where' of a type (line 1143)
        where_157102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 27), np_157101, 'where')
        # Calling where(args, kwargs) (line 1143)
        where_call_result_157110 = invoke(stypy.reporting.localization.Localization(__file__, 1143, 27), where_157102, *[mask_157105, points_157106, _locked_points_157108], **kwargs_157109)
        
        # Getting the type of 'self' (line 1143)
        self_157111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 12), 'self')
        # Setting the type of the member '_points' of a type (line 1143)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 12), self_157111, '_points', where_call_result_157110)
        
        # Assigning a Num to a Attribute (line 1146):
        
        # Assigning a Num to a Attribute (line 1146):
        int_157112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 28), 'int')
        # Getting the type of 'self' (line 1146)
        self_157113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 1146)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 12), self_157113, '_invalid', int_157112)
        # SSA join for if statement (line 1141)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 1147)
        self_157114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 15), 'self')
        # Obtaining the member '_points' of a type (line 1147)
        _points_157115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 15), self_157114, '_points')
        # Assigning a type to the variable 'stypy_return_type' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'stypy_return_type', _points_157115)
        
        # ################# End of 'get_points(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_points' in the type store
        # Getting the type of 'stypy_return_type' (line 1140)
        stypy_return_type_157116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157116)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_points'
        return stypy_return_type_157116


    @norecursion
    def locked_x0(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'locked_x0'
        module_type_store = module_type_store.open_function_context('locked_x0', 1158, 4, False)
        # Assigning a type to the variable 'self' (line 1159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_localization', localization)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_function_name', 'LockableBbox.locked_x0')
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_param_names_list', [])
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.locked_x0', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locked_x0', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locked_x0(...)' code ##################

        unicode_157117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1162, (-1)), 'unicode', u'\n        float or None: The value used for the locked x0.\n        ')
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1163)
        tuple_157118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1163)
        # Adding element type (line 1163)
        int_157119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1163, 36), tuple_157118, int_157119)
        # Adding element type (line 1163)
        int_157120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1163, 36), tuple_157118, int_157120)
        
        # Getting the type of 'self' (line 1163)
        self_157121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 11), 'self')
        # Obtaining the member '_locked_points' of a type (line 1163)
        _locked_points_157122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 11), self_157121, '_locked_points')
        # Obtaining the member 'mask' of a type (line 1163)
        mask_157123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 11), _locked_points_157122, 'mask')
        # Obtaining the member '__getitem__' of a type (line 1163)
        getitem___157124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 11), mask_157123, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1163)
        subscript_call_result_157125 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 11), getitem___157124, tuple_157118)
        
        # Testing the type of an if condition (line 1163)
        if_condition_157126 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1163, 8), subscript_call_result_157125)
        # Assigning a type to the variable 'if_condition_157126' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'if_condition_157126', if_condition_157126)
        # SSA begins for if statement (line 1163)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 1164)
        None_157127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 12), 'stypy_return_type', None_157127)
        # SSA branch for the else part of an if statement (line 1163)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1166)
        tuple_157128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1166, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1166)
        # Adding element type (line 1166)
        int_157129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1166, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1166, 39), tuple_157128, int_157129)
        # Adding element type (line 1166)
        int_157130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1166, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1166, 39), tuple_157128, int_157130)
        
        # Getting the type of 'self' (line 1166)
        self_157131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 19), 'self')
        # Obtaining the member '_locked_points' of a type (line 1166)
        _locked_points_157132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 19), self_157131, '_locked_points')
        # Obtaining the member '__getitem__' of a type (line 1166)
        getitem___157133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 19), _locked_points_157132, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1166)
        subscript_call_result_157134 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 19), getitem___157133, tuple_157128)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 12), 'stypy_return_type', subscript_call_result_157134)
        # SSA join for if statement (line 1163)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'locked_x0(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locked_x0' in the type store
        # Getting the type of 'stypy_return_type' (line 1158)
        stypy_return_type_157135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157135)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locked_x0'
        return stypy_return_type_157135


    @norecursion
    def locked_x0(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'locked_x0'
        module_type_store = module_type_store.open_function_context('locked_x0', 1168, 4, False)
        # Assigning a type to the variable 'self' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_localization', localization)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_function_name', 'LockableBbox.locked_x0')
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_param_names_list', ['x0'])
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockableBbox.locked_x0.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.locked_x0', ['x0'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locked_x0', localization, ['x0'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locked_x0(...)' code ##################

        
        # Assigning a Compare to a Subscript (line 1170):
        
        # Assigning a Compare to a Subscript (line 1170):
        
        # Getting the type of 'x0' (line 1170)
        x0_157136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 41), 'x0')
        # Getting the type of 'None' (line 1170)
        None_157137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 47), 'None')
        # Applying the binary operator 'is' (line 1170)
        result_is__157138 = python_operator(stypy.reporting.localization.Localization(__file__, 1170, 41), 'is', x0_157136, None_157137)
        
        # Getting the type of 'self' (line 1170)
        self_157139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 8), 'self')
        # Obtaining the member '_locked_points' of a type (line 1170)
        _locked_points_157140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 8), self_157139, '_locked_points')
        # Obtaining the member 'mask' of a type (line 1170)
        mask_157141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 8), _locked_points_157140, 'mask')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1170)
        tuple_157142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1170, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1170)
        # Adding element type (line 1170)
        int_157143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1170, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1170, 33), tuple_157142, int_157143)
        # Adding element type (line 1170)
        int_157144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1170, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1170, 33), tuple_157142, int_157144)
        
        # Storing an element on a container (line 1170)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1170, 8), mask_157141, (tuple_157142, result_is__157138))
        
        # Assigning a Name to a Subscript (line 1171):
        
        # Assigning a Name to a Subscript (line 1171):
        # Getting the type of 'x0' (line 1171)
        x0_157145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 41), 'x0')
        # Getting the type of 'self' (line 1171)
        self_157146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 8), 'self')
        # Obtaining the member '_locked_points' of a type (line 1171)
        _locked_points_157147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 8), self_157146, '_locked_points')
        # Obtaining the member 'data' of a type (line 1171)
        data_157148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 8), _locked_points_157147, 'data')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1171)
        tuple_157149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1171)
        # Adding element type (line 1171)
        int_157150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1171, 33), tuple_157149, int_157150)
        # Adding element type (line 1171)
        int_157151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1171, 33), tuple_157149, int_157151)
        
        # Storing an element on a container (line 1171)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1171, 8), data_157148, (tuple_157149, x0_157145))
        
        # Call to invalidate(...): (line 1172)
        # Processing the call keyword arguments (line 1172)
        kwargs_157154 = {}
        # Getting the type of 'self' (line 1172)
        self_157152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 1172)
        invalidate_157153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 8), self_157152, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1172)
        invalidate_call_result_157155 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 8), invalidate_157153, *[], **kwargs_157154)
        
        
        # ################# End of 'locked_x0(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locked_x0' in the type store
        # Getting the type of 'stypy_return_type' (line 1168)
        stypy_return_type_157156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157156)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locked_x0'
        return stypy_return_type_157156


    @norecursion
    def locked_y0(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'locked_y0'
        module_type_store = module_type_store.open_function_context('locked_y0', 1174, 4, False)
        # Assigning a type to the variable 'self' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_localization', localization)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_function_name', 'LockableBbox.locked_y0')
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_param_names_list', [])
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.locked_y0', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locked_y0', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locked_y0(...)' code ##################

        unicode_157157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, (-1)), 'unicode', u'\n        float or None: The value used for the locked y0.\n        ')
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1179)
        tuple_157158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1179)
        # Adding element type (line 1179)
        int_157159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1179, 36), tuple_157158, int_157159)
        # Adding element type (line 1179)
        int_157160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1179, 36), tuple_157158, int_157160)
        
        # Getting the type of 'self' (line 1179)
        self_157161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 11), 'self')
        # Obtaining the member '_locked_points' of a type (line 1179)
        _locked_points_157162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 11), self_157161, '_locked_points')
        # Obtaining the member 'mask' of a type (line 1179)
        mask_157163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 11), _locked_points_157162, 'mask')
        # Obtaining the member '__getitem__' of a type (line 1179)
        getitem___157164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 11), mask_157163, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1179)
        subscript_call_result_157165 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 11), getitem___157164, tuple_157158)
        
        # Testing the type of an if condition (line 1179)
        if_condition_157166 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1179, 8), subscript_call_result_157165)
        # Assigning a type to the variable 'if_condition_157166' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'if_condition_157166', if_condition_157166)
        # SSA begins for if statement (line 1179)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 1180)
        None_157167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 12), 'stypy_return_type', None_157167)
        # SSA branch for the else part of an if statement (line 1179)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1182)
        tuple_157168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1182)
        # Adding element type (line 1182)
        int_157169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1182, 39), tuple_157168, int_157169)
        # Adding element type (line 1182)
        int_157170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1182, 39), tuple_157168, int_157170)
        
        # Getting the type of 'self' (line 1182)
        self_157171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 19), 'self')
        # Obtaining the member '_locked_points' of a type (line 1182)
        _locked_points_157172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 19), self_157171, '_locked_points')
        # Obtaining the member '__getitem__' of a type (line 1182)
        getitem___157173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 19), _locked_points_157172, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1182)
        subscript_call_result_157174 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 19), getitem___157173, tuple_157168)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 12), 'stypy_return_type', subscript_call_result_157174)
        # SSA join for if statement (line 1179)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'locked_y0(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locked_y0' in the type store
        # Getting the type of 'stypy_return_type' (line 1174)
        stypy_return_type_157175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157175)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locked_y0'
        return stypy_return_type_157175


    @norecursion
    def locked_y0(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'locked_y0'
        module_type_store = module_type_store.open_function_context('locked_y0', 1184, 4, False)
        # Assigning a type to the variable 'self' (line 1185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_localization', localization)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_function_name', 'LockableBbox.locked_y0')
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_param_names_list', ['y0'])
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockableBbox.locked_y0.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.locked_y0', ['y0'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locked_y0', localization, ['y0'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locked_y0(...)' code ##################

        
        # Assigning a Compare to a Subscript (line 1186):
        
        # Assigning a Compare to a Subscript (line 1186):
        
        # Getting the type of 'y0' (line 1186)
        y0_157176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 41), 'y0')
        # Getting the type of 'None' (line 1186)
        None_157177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 47), 'None')
        # Applying the binary operator 'is' (line 1186)
        result_is__157178 = python_operator(stypy.reporting.localization.Localization(__file__, 1186, 41), 'is', y0_157176, None_157177)
        
        # Getting the type of 'self' (line 1186)
        self_157179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'self')
        # Obtaining the member '_locked_points' of a type (line 1186)
        _locked_points_157180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 8), self_157179, '_locked_points')
        # Obtaining the member 'mask' of a type (line 1186)
        mask_157181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 8), _locked_points_157180, 'mask')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1186)
        tuple_157182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1186)
        # Adding element type (line 1186)
        int_157183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1186, 33), tuple_157182, int_157183)
        # Adding element type (line 1186)
        int_157184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1186, 33), tuple_157182, int_157184)
        
        # Storing an element on a container (line 1186)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1186, 8), mask_157181, (tuple_157182, result_is__157178))
        
        # Assigning a Name to a Subscript (line 1187):
        
        # Assigning a Name to a Subscript (line 1187):
        # Getting the type of 'y0' (line 1187)
        y0_157185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 41), 'y0')
        # Getting the type of 'self' (line 1187)
        self_157186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'self')
        # Obtaining the member '_locked_points' of a type (line 1187)
        _locked_points_157187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 8), self_157186, '_locked_points')
        # Obtaining the member 'data' of a type (line 1187)
        data_157188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 8), _locked_points_157187, 'data')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1187)
        tuple_157189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1187)
        # Adding element type (line 1187)
        int_157190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1187, 33), tuple_157189, int_157190)
        # Adding element type (line 1187)
        int_157191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1187, 33), tuple_157189, int_157191)
        
        # Storing an element on a container (line 1187)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1187, 8), data_157188, (tuple_157189, y0_157185))
        
        # Call to invalidate(...): (line 1188)
        # Processing the call keyword arguments (line 1188)
        kwargs_157194 = {}
        # Getting the type of 'self' (line 1188)
        self_157192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 1188)
        invalidate_157193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 8), self_157192, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1188)
        invalidate_call_result_157195 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 8), invalidate_157193, *[], **kwargs_157194)
        
        
        # ################# End of 'locked_y0(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locked_y0' in the type store
        # Getting the type of 'stypy_return_type' (line 1184)
        stypy_return_type_157196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157196)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locked_y0'
        return stypy_return_type_157196


    @norecursion
    def locked_x1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'locked_x1'
        module_type_store = module_type_store.open_function_context('locked_x1', 1190, 4, False)
        # Assigning a type to the variable 'self' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_localization', localization)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_function_name', 'LockableBbox.locked_x1')
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_param_names_list', [])
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.locked_x1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locked_x1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locked_x1(...)' code ##################

        unicode_157197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, (-1)), 'unicode', u'\n        float or None: The value used for the locked x1.\n        ')
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1195)
        tuple_157198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1195)
        # Adding element type (line 1195)
        int_157199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1195, 36), tuple_157198, int_157199)
        # Adding element type (line 1195)
        int_157200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1195, 36), tuple_157198, int_157200)
        
        # Getting the type of 'self' (line 1195)
        self_157201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 11), 'self')
        # Obtaining the member '_locked_points' of a type (line 1195)
        _locked_points_157202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 11), self_157201, '_locked_points')
        # Obtaining the member 'mask' of a type (line 1195)
        mask_157203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 11), _locked_points_157202, 'mask')
        # Obtaining the member '__getitem__' of a type (line 1195)
        getitem___157204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 11), mask_157203, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1195)
        subscript_call_result_157205 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 11), getitem___157204, tuple_157198)
        
        # Testing the type of an if condition (line 1195)
        if_condition_157206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1195, 8), subscript_call_result_157205)
        # Assigning a type to the variable 'if_condition_157206' (line 1195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'if_condition_157206', if_condition_157206)
        # SSA begins for if statement (line 1195)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 1196)
        None_157207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 12), 'stypy_return_type', None_157207)
        # SSA branch for the else part of an if statement (line 1195)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1198)
        tuple_157208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1198)
        # Adding element type (line 1198)
        int_157209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1198, 39), tuple_157208, int_157209)
        # Adding element type (line 1198)
        int_157210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1198, 39), tuple_157208, int_157210)
        
        # Getting the type of 'self' (line 1198)
        self_157211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 19), 'self')
        # Obtaining the member '_locked_points' of a type (line 1198)
        _locked_points_157212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 19), self_157211, '_locked_points')
        # Obtaining the member '__getitem__' of a type (line 1198)
        getitem___157213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 19), _locked_points_157212, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1198)
        subscript_call_result_157214 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 19), getitem___157213, tuple_157208)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 12), 'stypy_return_type', subscript_call_result_157214)
        # SSA join for if statement (line 1195)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'locked_x1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locked_x1' in the type store
        # Getting the type of 'stypy_return_type' (line 1190)
        stypy_return_type_157215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157215)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locked_x1'
        return stypy_return_type_157215


    @norecursion
    def locked_x1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'locked_x1'
        module_type_store = module_type_store.open_function_context('locked_x1', 1200, 4, False)
        # Assigning a type to the variable 'self' (line 1201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_localization', localization)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_function_name', 'LockableBbox.locked_x1')
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_param_names_list', ['x1'])
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockableBbox.locked_x1.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.locked_x1', ['x1'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locked_x1', localization, ['x1'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locked_x1(...)' code ##################

        
        # Assigning a Compare to a Subscript (line 1202):
        
        # Assigning a Compare to a Subscript (line 1202):
        
        # Getting the type of 'x1' (line 1202)
        x1_157216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 41), 'x1')
        # Getting the type of 'None' (line 1202)
        None_157217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 47), 'None')
        # Applying the binary operator 'is' (line 1202)
        result_is__157218 = python_operator(stypy.reporting.localization.Localization(__file__, 1202, 41), 'is', x1_157216, None_157217)
        
        # Getting the type of 'self' (line 1202)
        self_157219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'self')
        # Obtaining the member '_locked_points' of a type (line 1202)
        _locked_points_157220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), self_157219, '_locked_points')
        # Obtaining the member 'mask' of a type (line 1202)
        mask_157221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), _locked_points_157220, 'mask')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1202)
        tuple_157222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1202)
        # Adding element type (line 1202)
        int_157223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1202, 33), tuple_157222, int_157223)
        # Adding element type (line 1202)
        int_157224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1202, 33), tuple_157222, int_157224)
        
        # Storing an element on a container (line 1202)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1202, 8), mask_157221, (tuple_157222, result_is__157218))
        
        # Assigning a Name to a Subscript (line 1203):
        
        # Assigning a Name to a Subscript (line 1203):
        # Getting the type of 'x1' (line 1203)
        x1_157225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 41), 'x1')
        # Getting the type of 'self' (line 1203)
        self_157226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 8), 'self')
        # Obtaining the member '_locked_points' of a type (line 1203)
        _locked_points_157227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 8), self_157226, '_locked_points')
        # Obtaining the member 'data' of a type (line 1203)
        data_157228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 8), _locked_points_157227, 'data')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1203)
        tuple_157229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1203)
        # Adding element type (line 1203)
        int_157230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1203, 33), tuple_157229, int_157230)
        # Adding element type (line 1203)
        int_157231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1203, 33), tuple_157229, int_157231)
        
        # Storing an element on a container (line 1203)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1203, 8), data_157228, (tuple_157229, x1_157225))
        
        # Call to invalidate(...): (line 1204)
        # Processing the call keyword arguments (line 1204)
        kwargs_157234 = {}
        # Getting the type of 'self' (line 1204)
        self_157232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 1204)
        invalidate_157233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 8), self_157232, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1204)
        invalidate_call_result_157235 = invoke(stypy.reporting.localization.Localization(__file__, 1204, 8), invalidate_157233, *[], **kwargs_157234)
        
        
        # ################# End of 'locked_x1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locked_x1' in the type store
        # Getting the type of 'stypy_return_type' (line 1200)
        stypy_return_type_157236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157236)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locked_x1'
        return stypy_return_type_157236


    @norecursion
    def locked_y1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'locked_y1'
        module_type_store = module_type_store.open_function_context('locked_y1', 1206, 4, False)
        # Assigning a type to the variable 'self' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_localization', localization)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_function_name', 'LockableBbox.locked_y1')
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_param_names_list', [])
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.locked_y1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locked_y1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locked_y1(...)' code ##################

        unicode_157237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, (-1)), 'unicode', u'\n        float or None: The value used for the locked y1.\n        ')
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1211)
        tuple_157238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1211)
        # Adding element type (line 1211)
        int_157239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1211, 36), tuple_157238, int_157239)
        # Adding element type (line 1211)
        int_157240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1211, 36), tuple_157238, int_157240)
        
        # Getting the type of 'self' (line 1211)
        self_157241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 11), 'self')
        # Obtaining the member '_locked_points' of a type (line 1211)
        _locked_points_157242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 11), self_157241, '_locked_points')
        # Obtaining the member 'mask' of a type (line 1211)
        mask_157243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 11), _locked_points_157242, 'mask')
        # Obtaining the member '__getitem__' of a type (line 1211)
        getitem___157244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 11), mask_157243, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1211)
        subscript_call_result_157245 = invoke(stypy.reporting.localization.Localization(__file__, 1211, 11), getitem___157244, tuple_157238)
        
        # Testing the type of an if condition (line 1211)
        if_condition_157246 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1211, 8), subscript_call_result_157245)
        # Assigning a type to the variable 'if_condition_157246' (line 1211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 8), 'if_condition_157246', if_condition_157246)
        # SSA begins for if statement (line 1211)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 1212)
        None_157247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 12), 'stypy_return_type', None_157247)
        # SSA branch for the else part of an if statement (line 1211)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1214)
        tuple_157248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1214)
        # Adding element type (line 1214)
        int_157249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1214, 39), tuple_157248, int_157249)
        # Adding element type (line 1214)
        int_157250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1214, 39), tuple_157248, int_157250)
        
        # Getting the type of 'self' (line 1214)
        self_157251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 19), 'self')
        # Obtaining the member '_locked_points' of a type (line 1214)
        _locked_points_157252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 19), self_157251, '_locked_points')
        # Obtaining the member '__getitem__' of a type (line 1214)
        getitem___157253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 19), _locked_points_157252, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1214)
        subscript_call_result_157254 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 19), getitem___157253, tuple_157248)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'stypy_return_type', subscript_call_result_157254)
        # SSA join for if statement (line 1211)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'locked_y1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locked_y1' in the type store
        # Getting the type of 'stypy_return_type' (line 1206)
        stypy_return_type_157255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157255)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locked_y1'
        return stypy_return_type_157255


    @norecursion
    def locked_y1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'locked_y1'
        module_type_store = module_type_store.open_function_context('locked_y1', 1216, 4, False)
        # Assigning a type to the variable 'self' (line 1217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_localization', localization)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_function_name', 'LockableBbox.locked_y1')
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_param_names_list', ['y1'])
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockableBbox.locked_y1.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockableBbox.locked_y1', ['y1'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locked_y1', localization, ['y1'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locked_y1(...)' code ##################

        
        # Assigning a Compare to a Subscript (line 1218):
        
        # Assigning a Compare to a Subscript (line 1218):
        
        # Getting the type of 'y1' (line 1218)
        y1_157256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 41), 'y1')
        # Getting the type of 'None' (line 1218)
        None_157257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 47), 'None')
        # Applying the binary operator 'is' (line 1218)
        result_is__157258 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 41), 'is', y1_157256, None_157257)
        
        # Getting the type of 'self' (line 1218)
        self_157259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 8), 'self')
        # Obtaining the member '_locked_points' of a type (line 1218)
        _locked_points_157260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 8), self_157259, '_locked_points')
        # Obtaining the member 'mask' of a type (line 1218)
        mask_157261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 8), _locked_points_157260, 'mask')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1218)
        tuple_157262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1218)
        # Adding element type (line 1218)
        int_157263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1218, 33), tuple_157262, int_157263)
        # Adding element type (line 1218)
        int_157264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1218, 33), tuple_157262, int_157264)
        
        # Storing an element on a container (line 1218)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1218, 8), mask_157261, (tuple_157262, result_is__157258))
        
        # Assigning a Name to a Subscript (line 1219):
        
        # Assigning a Name to a Subscript (line 1219):
        # Getting the type of 'y1' (line 1219)
        y1_157265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 41), 'y1')
        # Getting the type of 'self' (line 1219)
        self_157266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 8), 'self')
        # Obtaining the member '_locked_points' of a type (line 1219)
        _locked_points_157267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1219, 8), self_157266, '_locked_points')
        # Obtaining the member 'data' of a type (line 1219)
        data_157268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1219, 8), _locked_points_157267, 'data')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1219)
        tuple_157269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1219, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1219)
        # Adding element type (line 1219)
        int_157270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1219, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1219, 33), tuple_157269, int_157270)
        # Adding element type (line 1219)
        int_157271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1219, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1219, 33), tuple_157269, int_157271)
        
        # Storing an element on a container (line 1219)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1219, 8), data_157268, (tuple_157269, y1_157265))
        
        # Call to invalidate(...): (line 1220)
        # Processing the call keyword arguments (line 1220)
        kwargs_157274 = {}
        # Getting the type of 'self' (line 1220)
        self_157272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 1220)
        invalidate_157273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 8), self_157272, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1220)
        invalidate_call_result_157275 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 8), invalidate_157273, *[], **kwargs_157274)
        
        
        # ################# End of 'locked_y1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locked_y1' in the type store
        # Getting the type of 'stypy_return_type' (line 1216)
        stypy_return_type_157276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157276)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locked_y1'
        return stypy_return_type_157276


# Assigning a type to the variable 'LockableBbox' (line 1098)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 0), 'LockableBbox', LockableBbox)

# Assigning a Attribute to a Attribute (line 1148):
# Getting the type of 'Bbox' (line 1148)
Bbox_157277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 25), 'Bbox')
# Obtaining the member 'get_points' of a type (line 1148)
get_points_157278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1148, 25), Bbox_157277, 'get_points')
# Obtaining the member '__doc__' of a type (line 1148)
doc___157279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1148, 25), get_points_157278, '__doc__')
# Getting the type of 'LockableBbox'
LockableBbox_157280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LockableBbox')
# Obtaining the member 'get_points' of a type
get_points_157281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LockableBbox_157280, 'get_points')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_points_157281, '__doc__', doc___157279)

# Assigning a Attribute to a Attribute (line 1148):

# Getting the type of 'DEBUG' (line 1150)
DEBUG_157282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 7), 'DEBUG')
# Testing the type of an if condition (line 1150)
if_condition_157283 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1150, 4), DEBUG_157282)
# Assigning a type to the variable 'if_condition_157283' (line 1150)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'if_condition_157283', if_condition_157283)
# SSA begins for if statement (line 1150)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 1151):

# Assigning a Name to a Name (line 1151):
# Getting the type of 'LockableBbox'
LockableBbox_157284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LockableBbox')
# Obtaining the member 'get_points' of a type
get_points_157285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LockableBbox_157284, 'get_points')
# Assigning a type to the variable '_get_points' (line 1151)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1151, 8), '_get_points', get_points_157285)

@norecursion
def get_points(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_points'
    module_type_store = module_type_store.open_function_context('get_points', 1153, 8, False)
    
    # Passed parameters checking function
    get_points.stypy_localization = localization
    get_points.stypy_type_of_self = None
    get_points.stypy_type_store = module_type_store
    get_points.stypy_function_name = 'get_points'
    get_points.stypy_param_names_list = ['self']
    get_points.stypy_varargs_param_name = None
    get_points.stypy_kwargs_param_name = None
    get_points.stypy_call_defaults = defaults
    get_points.stypy_call_varargs = varargs
    get_points.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_points', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_points', localization, ['self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_points(...)' code ##################

    
    # Assigning a Call to a Name (line 1154):
    
    # Assigning a Call to a Name (line 1154):
    
    # Call to _get_points(...): (line 1154)
    # Processing the call keyword arguments (line 1154)
    kwargs_157288 = {}
    # Getting the type of 'self' (line 1154)
    self_157286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 21), 'self', False)
    # Obtaining the member '_get_points' of a type (line 1154)
    _get_points_157287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 21), self_157286, '_get_points')
    # Calling _get_points(args, kwargs) (line 1154)
    _get_points_call_result_157289 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 21), _get_points_157287, *[], **kwargs_157288)
    
    # Assigning a type to the variable 'points' (line 1154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 12), 'points', _get_points_call_result_157289)
    
    # Call to _check(...): (line 1155)
    # Processing the call arguments (line 1155)
    # Getting the type of 'points' (line 1155)
    points_157292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 24), 'points', False)
    # Processing the call keyword arguments (line 1155)
    kwargs_157293 = {}
    # Getting the type of 'self' (line 1155)
    self_157290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'self', False)
    # Obtaining the member '_check' of a type (line 1155)
    _check_157291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 12), self_157290, '_check')
    # Calling _check(args, kwargs) (line 1155)
    _check_call_result_157294 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 12), _check_157291, *[points_157292], **kwargs_157293)
    
    # Getting the type of 'points' (line 1156)
    points_157295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 19), 'points')
    # Assigning a type to the variable 'stypy_return_type' (line 1156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1156, 12), 'stypy_return_type', points_157295)
    
    # ################# End of 'get_points(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_points' in the type store
    # Getting the type of 'stypy_return_type' (line 1153)
    stypy_return_type_157296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_157296)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_points'
    return stypy_return_type_157296

# Assigning a type to the variable 'get_points' (line 1153)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 8), 'get_points', get_points)
# SSA join for if statement (line 1150)
module_type_store = module_type_store.join_ssa_context()

# Declaration of the 'Transform' class
# Getting the type of 'TransformNode' (line 1223)
TransformNode_157297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 16), 'TransformNode')

class Transform(TransformNode_157297, ):
    unicode_157298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, (-1)), 'unicode', u'\n    The base class of all :class:`TransformNode` instances that\n    actually perform a transformation.\n\n    All non-affine transformations should be subclasses of this class.\n    New affine transformations should be subclasses of\n    :class:`Affine2D`.\n\n    Subclasses of this class should override the following members (at\n    minimum):\n\n      - :attr:`input_dims`\n      - :attr:`output_dims`\n      - :meth:`transform`\n      - :attr:`is_separable`\n      - :attr:`has_inverse`\n      - :meth:`inverted` (if :attr:`has_inverse` is True)\n\n    If the transform needs to do something non-standard with\n    :class:`matplotlib.path.Path` objects, such as adding curves\n    where there were once line segments, it should override:\n\n      - :meth:`transform_path`\n    ')
    
    # Assigning a Name to a Name (line 1248):
    unicode_157299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, (-1)), 'unicode', u'\n    The number of input dimensions of this transform.\n    Must be overridden (with integers) in the subclass.\n    ')
    
    # Assigning a Name to a Name (line 1254):
    unicode_157300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1258, (-1)), 'unicode', u'\n    The number of output dimensions of this transform.\n    Must be overridden (with integers) in the subclass.\n    ')
    
    # Assigning a Name to a Name (line 1260):
    unicode_157301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 4), 'unicode', u'True if this transform has a corresponding inverse transform.')
    
    # Assigning a Name to a Name (line 1263):
    unicode_157302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1264, 4), 'unicode', u'True if this transform is separable in the x- and y- dimensions.')

    @norecursion
    def __add__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__add__'
        module_type_store = module_type_store.open_function_context('__add__', 1266, 4, False)
        # Assigning a type to the variable 'self' (line 1267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.__add__.__dict__.__setitem__('stypy_localization', localization)
        Transform.__add__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.__add__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.__add__.__dict__.__setitem__('stypy_function_name', 'Transform.__add__')
        Transform.__add__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        Transform.__add__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.__add__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.__add__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.__add__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.__add__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.__add__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.__add__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__add__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__add__(...)' code ##################

        unicode_157303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, (-1)), 'unicode', u'\n        Composes two transforms together such that *self* is followed\n        by *other*.\n        ')
        
        
        # Call to isinstance(...): (line 1271)
        # Processing the call arguments (line 1271)
        # Getting the type of 'other' (line 1271)
        other_157305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 22), 'other', False)
        # Getting the type of 'Transform' (line 1271)
        Transform_157306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 29), 'Transform', False)
        # Processing the call keyword arguments (line 1271)
        kwargs_157307 = {}
        # Getting the type of 'isinstance' (line 1271)
        isinstance_157304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1271)
        isinstance_call_result_157308 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 11), isinstance_157304, *[other_157305, Transform_157306], **kwargs_157307)
        
        # Testing the type of an if condition (line 1271)
        if_condition_157309 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1271, 8), isinstance_call_result_157308)
        # Assigning a type to the variable 'if_condition_157309' (line 1271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 8), 'if_condition_157309', if_condition_157309)
        # SSA begins for if statement (line 1271)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to composite_transform_factory(...): (line 1272)
        # Processing the call arguments (line 1272)
        # Getting the type of 'self' (line 1272)
        self_157311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 47), 'self', False)
        # Getting the type of 'other' (line 1272)
        other_157312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 53), 'other', False)
        # Processing the call keyword arguments (line 1272)
        kwargs_157313 = {}
        # Getting the type of 'composite_transform_factory' (line 1272)
        composite_transform_factory_157310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 19), 'composite_transform_factory', False)
        # Calling composite_transform_factory(args, kwargs) (line 1272)
        composite_transform_factory_call_result_157314 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 19), composite_transform_factory_157310, *[self_157311, other_157312], **kwargs_157313)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 12), 'stypy_return_type', composite_transform_factory_call_result_157314)
        # SSA join for if statement (line 1271)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to TypeError(...): (line 1273)
        # Processing the call arguments (line 1273)
        unicode_157316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1274, 12), 'unicode', u"Can not add Transform to object of type '%s'")
        
        # Call to type(...): (line 1274)
        # Processing the call arguments (line 1274)
        # Getting the type of 'other' (line 1274)
        other_157318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 66), 'other', False)
        # Processing the call keyword arguments (line 1274)
        kwargs_157319 = {}
        # Getting the type of 'type' (line 1274)
        type_157317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 61), 'type', False)
        # Calling type(args, kwargs) (line 1274)
        type_call_result_157320 = invoke(stypy.reporting.localization.Localization(__file__, 1274, 61), type_157317, *[other_157318], **kwargs_157319)
        
        # Applying the binary operator '%' (line 1274)
        result_mod_157321 = python_operator(stypy.reporting.localization.Localization(__file__, 1274, 12), '%', unicode_157316, type_call_result_157320)
        
        # Processing the call keyword arguments (line 1273)
        kwargs_157322 = {}
        # Getting the type of 'TypeError' (line 1273)
        TypeError_157315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 14), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1273)
        TypeError_call_result_157323 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 14), TypeError_157315, *[result_mod_157321], **kwargs_157322)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1273, 8), TypeError_call_result_157323, 'raise parameter', BaseException)
        
        # ################# End of '__add__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__add__' in the type store
        # Getting the type of 'stypy_return_type' (line 1266)
        stypy_return_type_157324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157324)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__add__'
        return stypy_return_type_157324


    @norecursion
    def __radd__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__radd__'
        module_type_store = module_type_store.open_function_context('__radd__', 1276, 4, False)
        # Assigning a type to the variable 'self' (line 1277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.__radd__.__dict__.__setitem__('stypy_localization', localization)
        Transform.__radd__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.__radd__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.__radd__.__dict__.__setitem__('stypy_function_name', 'Transform.__radd__')
        Transform.__radd__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        Transform.__radd__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.__radd__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.__radd__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.__radd__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.__radd__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.__radd__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.__radd__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__radd__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__radd__(...)' code ##################

        unicode_157325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1280, (-1)), 'unicode', u'\n        Composes two transforms together such that *self* is followed\n        by *other*.\n        ')
        
        
        # Call to isinstance(...): (line 1281)
        # Processing the call arguments (line 1281)
        # Getting the type of 'other' (line 1281)
        other_157327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 22), 'other', False)
        # Getting the type of 'Transform' (line 1281)
        Transform_157328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 29), 'Transform', False)
        # Processing the call keyword arguments (line 1281)
        kwargs_157329 = {}
        # Getting the type of 'isinstance' (line 1281)
        isinstance_157326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1281)
        isinstance_call_result_157330 = invoke(stypy.reporting.localization.Localization(__file__, 1281, 11), isinstance_157326, *[other_157327, Transform_157328], **kwargs_157329)
        
        # Testing the type of an if condition (line 1281)
        if_condition_157331 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1281, 8), isinstance_call_result_157330)
        # Assigning a type to the variable 'if_condition_157331' (line 1281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 8), 'if_condition_157331', if_condition_157331)
        # SSA begins for if statement (line 1281)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to composite_transform_factory(...): (line 1282)
        # Processing the call arguments (line 1282)
        # Getting the type of 'other' (line 1282)
        other_157333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 47), 'other', False)
        # Getting the type of 'self' (line 1282)
        self_157334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 54), 'self', False)
        # Processing the call keyword arguments (line 1282)
        kwargs_157335 = {}
        # Getting the type of 'composite_transform_factory' (line 1282)
        composite_transform_factory_157332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 19), 'composite_transform_factory', False)
        # Calling composite_transform_factory(args, kwargs) (line 1282)
        composite_transform_factory_call_result_157336 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 19), composite_transform_factory_157332, *[other_157333, self_157334], **kwargs_157335)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1282, 12), 'stypy_return_type', composite_transform_factory_call_result_157336)
        # SSA join for if statement (line 1281)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to TypeError(...): (line 1283)
        # Processing the call arguments (line 1283)
        unicode_157338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 12), 'unicode', u"Can not add Transform to object of type '%s'")
        
        # Call to type(...): (line 1284)
        # Processing the call arguments (line 1284)
        # Getting the type of 'other' (line 1284)
        other_157340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 66), 'other', False)
        # Processing the call keyword arguments (line 1284)
        kwargs_157341 = {}
        # Getting the type of 'type' (line 1284)
        type_157339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 61), 'type', False)
        # Calling type(args, kwargs) (line 1284)
        type_call_result_157342 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 61), type_157339, *[other_157340], **kwargs_157341)
        
        # Applying the binary operator '%' (line 1284)
        result_mod_157343 = python_operator(stypy.reporting.localization.Localization(__file__, 1284, 12), '%', unicode_157338, type_call_result_157342)
        
        # Processing the call keyword arguments (line 1283)
        kwargs_157344 = {}
        # Getting the type of 'TypeError' (line 1283)
        TypeError_157337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 14), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1283)
        TypeError_call_result_157345 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 14), TypeError_157337, *[result_mod_157343], **kwargs_157344)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1283, 8), TypeError_call_result_157345, 'raise parameter', BaseException)
        
        # ################# End of '__radd__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__radd__' in the type store
        # Getting the type of 'stypy_return_type' (line 1276)
        stypy_return_type_157346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157346)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__radd__'
        return stypy_return_type_157346


    @norecursion
    def _iter_break_from_left_to_right(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_iter_break_from_left_to_right'
        module_type_store = module_type_store.open_function_context('_iter_break_from_left_to_right', 1290, 4, False)
        # Assigning a type to the variable 'self' (line 1291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_localization', localization)
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_function_name', 'Transform._iter_break_from_left_to_right')
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_param_names_list', [])
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform._iter_break_from_left_to_right', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_iter_break_from_left_to_right', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_iter_break_from_left_to_right(...)' code ##################

        unicode_157347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1300, (-1)), 'unicode', u'\n        Returns an iterator breaking down this transform stack from left to\n        right recursively. If self == ((A, N), A) then the result will be an\n        iterator which yields I : ((A, N), A), followed by A : (N, A),\n        followed by (A, N) : (A), but not ((A, N), A) : I.\n\n        This is equivalent to flattening the stack then yielding\n        ``flat_stack[:i], flat_stack[i:]`` where i=0..(n-1).\n\n        ')
        # Creating a generator
        
        # Obtaining an instance of the builtin type 'tuple' (line 1301)
        tuple_157348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1301, 14), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1301)
        # Adding element type (line 1301)
        
        # Call to IdentityTransform(...): (line 1301)
        # Processing the call keyword arguments (line 1301)
        kwargs_157350 = {}
        # Getting the type of 'IdentityTransform' (line 1301)
        IdentityTransform_157349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 14), 'IdentityTransform', False)
        # Calling IdentityTransform(args, kwargs) (line 1301)
        IdentityTransform_call_result_157351 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 14), IdentityTransform_157349, *[], **kwargs_157350)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1301, 14), tuple_157348, IdentityTransform_call_result_157351)
        # Adding element type (line 1301)
        # Getting the type of 'self' (line 1301)
        self_157352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 35), 'self')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1301, 14), tuple_157348, self_157352)
        
        GeneratorType_157353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1301, 8), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1301, 8), GeneratorType_157353, tuple_157348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 8), 'stypy_return_type', GeneratorType_157353)
        
        # ################# End of '_iter_break_from_left_to_right(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_iter_break_from_left_to_right' in the type store
        # Getting the type of 'stypy_return_type' (line 1290)
        stypy_return_type_157354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157354)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_iter_break_from_left_to_right'
        return stypy_return_type_157354


    @norecursion
    def depth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'depth'
        module_type_store = module_type_store.open_function_context('depth', 1303, 4, False)
        # Assigning a type to the variable 'self' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.depth.__dict__.__setitem__('stypy_localization', localization)
        Transform.depth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.depth.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.depth.__dict__.__setitem__('stypy_function_name', 'Transform.depth')
        Transform.depth.__dict__.__setitem__('stypy_param_names_list', [])
        Transform.depth.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.depth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.depth.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.depth.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.depth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.depth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.depth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'depth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'depth(...)' code ##################

        unicode_157355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, (-1)), 'unicode', u'\n        Returns the number of transforms which have been chained\n        together to form this Transform instance.\n\n        .. note::\n\n            For the special case of a Composite transform, the maximum depth\n            of the two is returned.\n\n        ')
        int_157356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 15), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 1315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 8), 'stypy_return_type', int_157356)
        
        # ################# End of 'depth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'depth' in the type store
        # Getting the type of 'stypy_return_type' (line 1303)
        stypy_return_type_157357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157357)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'depth'
        return stypy_return_type_157357


    @norecursion
    def contains_branch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains_branch'
        module_type_store = module_type_store.open_function_context('contains_branch', 1317, 4, False)
        # Assigning a type to the variable 'self' (line 1318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.contains_branch.__dict__.__setitem__('stypy_localization', localization)
        Transform.contains_branch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.contains_branch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.contains_branch.__dict__.__setitem__('stypy_function_name', 'Transform.contains_branch')
        Transform.contains_branch.__dict__.__setitem__('stypy_param_names_list', ['other'])
        Transform.contains_branch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.contains_branch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.contains_branch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.contains_branch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.contains_branch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.contains_branch.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.contains_branch', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains_branch', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains_branch(...)' code ##################

        unicode_157358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, (-1)), 'unicode', u'\n        Return whether the given transform is a sub-tree of this transform.\n\n        This routine uses transform equality to identify sub-trees, therefore\n        in many situations it is object id which will be used.\n\n        For the case where the given transform represents the whole\n        of this transform, returns True.\n\n        ')
        
        
        # Getting the type of 'self' (line 1328)
        self_157359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 11), 'self')
        # Obtaining the member 'depth' of a type (line 1328)
        depth_157360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1328, 11), self_157359, 'depth')
        # Getting the type of 'other' (line 1328)
        other_157361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 24), 'other')
        # Obtaining the member 'depth' of a type (line 1328)
        depth_157362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1328, 24), other_157361, 'depth')
        # Applying the binary operator '<' (line 1328)
        result_lt_157363 = python_operator(stypy.reporting.localization.Localization(__file__, 1328, 11), '<', depth_157360, depth_157362)
        
        # Testing the type of an if condition (line 1328)
        if_condition_157364 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1328, 8), result_lt_157363)
        # Assigning a type to the variable 'if_condition_157364' (line 1328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 8), 'if_condition_157364', if_condition_157364)
        # SSA begins for if statement (line 1328)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 1329)
        False_157365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 12), 'stypy_return_type', False_157365)
        # SSA join for if statement (line 1328)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _iter_break_from_left_to_right(...): (line 1332)
        # Processing the call keyword arguments (line 1332)
        kwargs_157368 = {}
        # Getting the type of 'self' (line 1332)
        self_157366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 27), 'self', False)
        # Obtaining the member '_iter_break_from_left_to_right' of a type (line 1332)
        _iter_break_from_left_to_right_157367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 27), self_157366, '_iter_break_from_left_to_right')
        # Calling _iter_break_from_left_to_right(args, kwargs) (line 1332)
        _iter_break_from_left_to_right_call_result_157369 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 27), _iter_break_from_left_to_right_157367, *[], **kwargs_157368)
        
        # Testing the type of a for loop iterable (line 1332)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1332, 8), _iter_break_from_left_to_right_call_result_157369)
        # Getting the type of the for loop variable (line 1332)
        for_loop_var_157370 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1332, 8), _iter_break_from_left_to_right_call_result_157369)
        # Assigning a type to the variable '_' (line 1332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 8), '_', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1332, 8), for_loop_var_157370))
        # Assigning a type to the variable 'sub_tree' (line 1332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 8), 'sub_tree', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1332, 8), for_loop_var_157370))
        # SSA begins for a for statement (line 1332)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'sub_tree' (line 1333)
        sub_tree_157371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 15), 'sub_tree')
        # Getting the type of 'other' (line 1333)
        other_157372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 27), 'other')
        # Applying the binary operator '==' (line 1333)
        result_eq_157373 = python_operator(stypy.reporting.localization.Localization(__file__, 1333, 15), '==', sub_tree_157371, other_157372)
        
        # Testing the type of an if condition (line 1333)
        if_condition_157374 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1333, 12), result_eq_157373)
        # Assigning a type to the variable 'if_condition_157374' (line 1333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 12), 'if_condition_157374', if_condition_157374)
        # SSA begins for if statement (line 1333)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 1334)
        True_157375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 23), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 16), 'stypy_return_type', True_157375)
        # SSA join for if statement (line 1333)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 1335)
        False_157376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'stypy_return_type', False_157376)
        
        # ################# End of 'contains_branch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains_branch' in the type store
        # Getting the type of 'stypy_return_type' (line 1317)
        stypy_return_type_157377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157377)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains_branch'
        return stypy_return_type_157377


    @norecursion
    def contains_branch_seperately(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains_branch_seperately'
        module_type_store = module_type_store.open_function_context('contains_branch_seperately', 1337, 4, False)
        # Assigning a type to the variable 'self' (line 1338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1338, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_localization', localization)
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_function_name', 'Transform.contains_branch_seperately')
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_param_names_list', ['other_transform'])
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.contains_branch_seperately.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.contains_branch_seperately', ['other_transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains_branch_seperately', localization, ['other_transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains_branch_seperately(...)' code ##################

        unicode_157378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1347, (-1)), 'unicode', u"\n        Returns whether the given branch is a sub-tree of this transform on\n        each seperate dimension.\n\n        A common use for this method is to identify if a transform is a blended\n        transform containing an axes' data transform. e.g.::\n\n            x_isdata, y_isdata = trans.contains_branch_seperately(ax.transData)\n\n        ")
        
        
        # Getting the type of 'self' (line 1348)
        self_157379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 11), 'self')
        # Obtaining the member 'output_dims' of a type (line 1348)
        output_dims_157380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 11), self_157379, 'output_dims')
        int_157381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, 31), 'int')
        # Applying the binary operator '!=' (line 1348)
        result_ne_157382 = python_operator(stypy.reporting.localization.Localization(__file__, 1348, 11), '!=', output_dims_157380, int_157381)
        
        # Testing the type of an if condition (line 1348)
        if_condition_157383 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1348, 8), result_ne_157382)
        # Assigning a type to the variable 'if_condition_157383' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'if_condition_157383', if_condition_157383)
        # SSA begins for if statement (line 1348)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1349)
        # Processing the call arguments (line 1349)
        unicode_157385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1349, 29), 'unicode', u'contains_branch_seperately only supports transforms with 2 output dimensions')
        # Processing the call keyword arguments (line 1349)
        kwargs_157386 = {}
        # Getting the type of 'ValueError' (line 1349)
        ValueError_157384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1349)
        ValueError_call_result_157387 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 18), ValueError_157384, *[unicode_157385], **kwargs_157386)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1349, 12), ValueError_call_result_157387, 'raise parameter', BaseException)
        # SSA join for if statement (line 1348)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'list' (line 1353)
        list_157388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1353)
        # Adding element type (line 1353)
        
        # Call to contains_branch(...): (line 1353)
        # Processing the call arguments (line 1353)
        # Getting the type of 'other_transform' (line 1353)
        other_transform_157391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 37), 'other_transform', False)
        # Processing the call keyword arguments (line 1353)
        kwargs_157392 = {}
        # Getting the type of 'self' (line 1353)
        self_157389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 16), 'self', False)
        # Obtaining the member 'contains_branch' of a type (line 1353)
        contains_branch_157390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 16), self_157389, 'contains_branch')
        # Calling contains_branch(args, kwargs) (line 1353)
        contains_branch_call_result_157393 = invoke(stypy.reporting.localization.Localization(__file__, 1353, 16), contains_branch_157390, *[other_transform_157391], **kwargs_157392)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1353, 15), list_157388, contains_branch_call_result_157393)
        
        int_157394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 57), 'int')
        # Applying the binary operator '*' (line 1353)
        result_mul_157395 = python_operator(stypy.reporting.localization.Localization(__file__, 1353, 15), '*', list_157388, int_157394)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 8), 'stypy_return_type', result_mul_157395)
        
        # ################# End of 'contains_branch_seperately(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains_branch_seperately' in the type store
        # Getting the type of 'stypy_return_type' (line 1337)
        stypy_return_type_157396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157396)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains_branch_seperately'
        return stypy_return_type_157396


    @norecursion
    def __sub__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__sub__'
        module_type_store = module_type_store.open_function_context('__sub__', 1355, 4, False)
        # Assigning a type to the variable 'self' (line 1356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.__sub__.__dict__.__setitem__('stypy_localization', localization)
        Transform.__sub__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.__sub__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.__sub__.__dict__.__setitem__('stypy_function_name', 'Transform.__sub__')
        Transform.__sub__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        Transform.__sub__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.__sub__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.__sub__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.__sub__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.__sub__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.__sub__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.__sub__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__sub__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__sub__(...)' code ##################

        unicode_157397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, (-1)), 'unicode', u"\n        Returns a transform stack which goes all the way down self's transform\n        stack, and then ascends back up other's stack. If it can, this is\n        optimised::\n\n            # normally\n            A - B == a + b.inverted()\n\n            # sometimes, when A contains the tree B there is no need to\n            # descend all the way down to the base of A (via B), instead we\n            # can just stop at B.\n\n            (A + B) - (B)^-1 == A\n\n            # similarly, when B contains tree A, we can avoid decending A at\n            # all, basically:\n            A - (A + B) == ((B + A) - A).inverted() or B^-1\n\n        For clarity, the result of ``(A + B) - B + B == (A + B)``.\n\n        ")
        
        
        
        # Call to isinstance(...): (line 1378)
        # Processing the call arguments (line 1378)
        # Getting the type of 'other' (line 1378)
        other_157399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 26), 'other', False)
        # Getting the type of 'Transform' (line 1378)
        Transform_157400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 33), 'Transform', False)
        # Processing the call keyword arguments (line 1378)
        kwargs_157401 = {}
        # Getting the type of 'isinstance' (line 1378)
        isinstance_157398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1378)
        isinstance_call_result_157402 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 15), isinstance_157398, *[other_157399, Transform_157400], **kwargs_157401)
        
        # Applying the 'not' unary operator (line 1378)
        result_not__157403 = python_operator(stypy.reporting.localization.Localization(__file__, 1378, 11), 'not', isinstance_call_result_157402)
        
        # Testing the type of an if condition (line 1378)
        if_condition_157404 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1378, 8), result_not__157403)
        # Assigning a type to the variable 'if_condition_157404' (line 1378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1378, 8), 'if_condition_157404', if_condition_157404)
        # SSA begins for if statement (line 1378)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 1379)
        NotImplemented_157405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 12), 'stypy_return_type', NotImplemented_157405)
        # SSA join for if statement (line 1378)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _iter_break_from_left_to_right(...): (line 1381)
        # Processing the call keyword arguments (line 1381)
        kwargs_157408 = {}
        # Getting the type of 'self' (line 1381)
        self_157406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 35), 'self', False)
        # Obtaining the member '_iter_break_from_left_to_right' of a type (line 1381)
        _iter_break_from_left_to_right_157407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 35), self_157406, '_iter_break_from_left_to_right')
        # Calling _iter_break_from_left_to_right(args, kwargs) (line 1381)
        _iter_break_from_left_to_right_call_result_157409 = invoke(stypy.reporting.localization.Localization(__file__, 1381, 35), _iter_break_from_left_to_right_157407, *[], **kwargs_157408)
        
        # Testing the type of a for loop iterable (line 1381)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1381, 8), _iter_break_from_left_to_right_call_result_157409)
        # Getting the type of the for loop variable (line 1381)
        for_loop_var_157410 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1381, 8), _iter_break_from_left_to_right_call_result_157409)
        # Assigning a type to the variable 'remainder' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'remainder', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1381, 8), for_loop_var_157410))
        # Assigning a type to the variable 'sub_tree' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'sub_tree', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1381, 8), for_loop_var_157410))
        # SSA begins for a for statement (line 1381)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'sub_tree' (line 1382)
        sub_tree_157411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 15), 'sub_tree')
        # Getting the type of 'other' (line 1382)
        other_157412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 27), 'other')
        # Applying the binary operator '==' (line 1382)
        result_eq_157413 = python_operator(stypy.reporting.localization.Localization(__file__, 1382, 15), '==', sub_tree_157411, other_157412)
        
        # Testing the type of an if condition (line 1382)
        if_condition_157414 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1382, 12), result_eq_157413)
        # Assigning a type to the variable 'if_condition_157414' (line 1382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 12), 'if_condition_157414', if_condition_157414)
        # SSA begins for if statement (line 1382)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'remainder' (line 1383)
        remainder_157415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 23), 'remainder')
        # Assigning a type to the variable 'stypy_return_type' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 16), 'stypy_return_type', remainder_157415)
        # SSA join for if statement (line 1382)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _iter_break_from_left_to_right(...): (line 1385)
        # Processing the call keyword arguments (line 1385)
        kwargs_157418 = {}
        # Getting the type of 'other' (line 1385)
        other_157416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 35), 'other', False)
        # Obtaining the member '_iter_break_from_left_to_right' of a type (line 1385)
        _iter_break_from_left_to_right_157417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 35), other_157416, '_iter_break_from_left_to_right')
        # Calling _iter_break_from_left_to_right(args, kwargs) (line 1385)
        _iter_break_from_left_to_right_call_result_157419 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 35), _iter_break_from_left_to_right_157417, *[], **kwargs_157418)
        
        # Testing the type of a for loop iterable (line 1385)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1385, 8), _iter_break_from_left_to_right_call_result_157419)
        # Getting the type of the for loop variable (line 1385)
        for_loop_var_157420 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1385, 8), _iter_break_from_left_to_right_call_result_157419)
        # Assigning a type to the variable 'remainder' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 8), 'remainder', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 8), for_loop_var_157420))
        # Assigning a type to the variable 'sub_tree' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 8), 'sub_tree', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 8), for_loop_var_157420))
        # SSA begins for a for statement (line 1385)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'sub_tree' (line 1386)
        sub_tree_157421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 15), 'sub_tree')
        # Getting the type of 'self' (line 1386)
        self_157422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 27), 'self')
        # Applying the binary operator '==' (line 1386)
        result_eq_157423 = python_operator(stypy.reporting.localization.Localization(__file__, 1386, 15), '==', sub_tree_157421, self_157422)
        
        # Testing the type of an if condition (line 1386)
        if_condition_157424 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1386, 12), result_eq_157423)
        # Assigning a type to the variable 'if_condition_157424' (line 1386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 12), 'if_condition_157424', if_condition_157424)
        # SSA begins for if statement (line 1386)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'remainder' (line 1387)
        remainder_157425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 23), 'remainder')
        # Obtaining the member 'has_inverse' of a type (line 1387)
        has_inverse_157426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 23), remainder_157425, 'has_inverse')
        # Applying the 'not' unary operator (line 1387)
        result_not__157427 = python_operator(stypy.reporting.localization.Localization(__file__, 1387, 19), 'not', has_inverse_157426)
        
        # Testing the type of an if condition (line 1387)
        if_condition_157428 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1387, 16), result_not__157427)
        # Assigning a type to the variable 'if_condition_157428' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 16), 'if_condition_157428', if_condition_157428)
        # SSA begins for if statement (line 1387)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1388)
        # Processing the call arguments (line 1388)
        unicode_157430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 37), 'unicode', u"The shortcut cannot be computed since other's transform includes a non-invertable component.")
        # Processing the call keyword arguments (line 1388)
        kwargs_157431 = {}
        # Getting the type of 'ValueError' (line 1388)
        ValueError_157429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1388)
        ValueError_call_result_157432 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 26), ValueError_157429, *[unicode_157430], **kwargs_157431)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1388, 20), ValueError_call_result_157432, 'raise parameter', BaseException)
        # SSA join for if statement (line 1387)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to inverted(...): (line 1390)
        # Processing the call keyword arguments (line 1390)
        kwargs_157435 = {}
        # Getting the type of 'remainder' (line 1390)
        remainder_157433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 23), 'remainder', False)
        # Obtaining the member 'inverted' of a type (line 1390)
        inverted_157434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 23), remainder_157433, 'inverted')
        # Calling inverted(args, kwargs) (line 1390)
        inverted_call_result_157436 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 23), inverted_157434, *[], **kwargs_157435)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 16), 'stypy_return_type', inverted_call_result_157436)
        # SSA join for if statement (line 1386)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'other' (line 1393)
        other_157437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 11), 'other')
        # Obtaining the member 'has_inverse' of a type (line 1393)
        has_inverse_157438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1393, 11), other_157437, 'has_inverse')
        # Testing the type of an if condition (line 1393)
        if_condition_157439 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1393, 8), has_inverse_157438)
        # Assigning a type to the variable 'if_condition_157439' (line 1393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 8), 'if_condition_157439', if_condition_157439)
        # SSA begins for if statement (line 1393)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 1394)
        self_157440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 19), 'self')
        
        # Call to inverted(...): (line 1394)
        # Processing the call keyword arguments (line 1394)
        kwargs_157443 = {}
        # Getting the type of 'other' (line 1394)
        other_157441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 26), 'other', False)
        # Obtaining the member 'inverted' of a type (line 1394)
        inverted_157442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1394, 26), other_157441, 'inverted')
        # Calling inverted(args, kwargs) (line 1394)
        inverted_call_result_157444 = invoke(stypy.reporting.localization.Localization(__file__, 1394, 26), inverted_157442, *[], **kwargs_157443)
        
        # Applying the binary operator '+' (line 1394)
        result_add_157445 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 19), '+', self_157440, inverted_call_result_157444)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 12), 'stypy_return_type', result_add_157445)
        # SSA branch for the else part of an if statement (line 1393)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1396)
        # Processing the call arguments (line 1396)
        unicode_157447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1396, 29), 'unicode', u'It is not possible to compute transA - transB since transB cannot be inverted and there is no shortcut possible.')
        # Processing the call keyword arguments (line 1396)
        kwargs_157448 = {}
        # Getting the type of 'ValueError' (line 1396)
        ValueError_157446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1396)
        ValueError_call_result_157449 = invoke(stypy.reporting.localization.Localization(__file__, 1396, 18), ValueError_157446, *[unicode_157447], **kwargs_157448)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1396, 12), ValueError_call_result_157449, 'raise parameter', BaseException)
        # SSA join for if statement (line 1393)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__sub__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__sub__' in the type store
        # Getting the type of 'stypy_return_type' (line 1355)
        stypy_return_type_157450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157450)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__sub__'
        return stypy_return_type_157450


    @norecursion
    def __array__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__array__'
        module_type_store = module_type_store.open_function_context('__array__', 1400, 4, False)
        # Assigning a type to the variable 'self' (line 1401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.__array__.__dict__.__setitem__('stypy_localization', localization)
        Transform.__array__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.__array__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.__array__.__dict__.__setitem__('stypy_function_name', 'Transform.__array__')
        Transform.__array__.__dict__.__setitem__('stypy_param_names_list', [])
        Transform.__array__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Transform.__array__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Transform.__array__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.__array__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.__array__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.__array__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.__array__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__array__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__array__(...)' code ##################

        unicode_157451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1403, (-1)), 'unicode', u"\n        Array interface to get at this Transform's affine matrix.\n        ")
        
        # Call to get_matrix(...): (line 1404)
        # Processing the call keyword arguments (line 1404)
        kwargs_157457 = {}
        
        # Call to get_affine(...): (line 1404)
        # Processing the call keyword arguments (line 1404)
        kwargs_157454 = {}
        # Getting the type of 'self' (line 1404)
        self_157452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 15), 'self', False)
        # Obtaining the member 'get_affine' of a type (line 1404)
        get_affine_157453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 15), self_157452, 'get_affine')
        # Calling get_affine(args, kwargs) (line 1404)
        get_affine_call_result_157455 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 15), get_affine_157453, *[], **kwargs_157454)
        
        # Obtaining the member 'get_matrix' of a type (line 1404)
        get_matrix_157456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 15), get_affine_call_result_157455, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1404)
        get_matrix_call_result_157458 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 15), get_matrix_157456, *[], **kwargs_157457)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 8), 'stypy_return_type', get_matrix_call_result_157458)
        
        # ################# End of '__array__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__array__' in the type store
        # Getting the type of 'stypy_return_type' (line 1400)
        stypy_return_type_157459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157459)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__array__'
        return stypy_return_type_157459


    @norecursion
    def transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform'
        module_type_store = module_type_store.open_function_context('transform', 1406, 4, False)
        # Assigning a type to the variable 'self' (line 1407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.transform.__dict__.__setitem__('stypy_localization', localization)
        Transform.transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.transform.__dict__.__setitem__('stypy_function_name', 'Transform.transform')
        Transform.transform.__dict__.__setitem__('stypy_param_names_list', ['values'])
        Transform.transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.transform', ['values'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform', localization, ['values'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform(...)' code ##################

        unicode_157460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1415, (-1)), 'unicode', u'\n        Performs the transformation on the given array of values.\n\n        Accepts a numpy array of shape (N x :attr:`input_dims`) and\n        returns a numpy array of shape (N x :attr:`output_dims`).\n\n        Alternatively, accepts a numpy array of length :attr:`input_dims`\n        and returns a numpy array of length :attr:`output_dims`.\n        ')
        
        # Assigning a Call to a Name (line 1418):
        
        # Assigning a Call to a Name (line 1418):
        
        # Call to asanyarray(...): (line 1418)
        # Processing the call arguments (line 1418)
        # Getting the type of 'values' (line 1418)
        values_157463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 31), 'values', False)
        # Processing the call keyword arguments (line 1418)
        kwargs_157464 = {}
        # Getting the type of 'np' (line 1418)
        np_157461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 17), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 1418)
        asanyarray_157462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 17), np_157461, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 1418)
        asanyarray_call_result_157465 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 17), asanyarray_157462, *[values_157463], **kwargs_157464)
        
        # Assigning a type to the variable 'values' (line 1418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 8), 'values', asanyarray_call_result_157465)
        
        # Assigning a Attribute to a Name (line 1419):
        
        # Assigning a Attribute to a Name (line 1419):
        # Getting the type of 'values' (line 1419)
        values_157466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 15), 'values')
        # Obtaining the member 'ndim' of a type (line 1419)
        ndim_157467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 15), values_157466, 'ndim')
        # Assigning a type to the variable 'ndim' (line 1419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'ndim', ndim_157467)
        
        # Assigning a Call to a Name (line 1420):
        
        # Assigning a Call to a Name (line 1420):
        
        # Call to reshape(...): (line 1420)
        # Processing the call arguments (line 1420)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1420)
        tuple_157470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1420)
        # Adding element type (line 1420)
        int_157471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1420, 33), tuple_157470, int_157471)
        # Adding element type (line 1420)
        # Getting the type of 'self' (line 1420)
        self_157472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 37), 'self', False)
        # Obtaining the member 'input_dims' of a type (line 1420)
        input_dims_157473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 37), self_157472, 'input_dims')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1420, 33), tuple_157470, input_dims_157473)
        
        # Processing the call keyword arguments (line 1420)
        kwargs_157474 = {}
        # Getting the type of 'values' (line 1420)
        values_157468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 17), 'values', False)
        # Obtaining the member 'reshape' of a type (line 1420)
        reshape_157469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 17), values_157468, 'reshape')
        # Calling reshape(args, kwargs) (line 1420)
        reshape_call_result_157475 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 17), reshape_157469, *[tuple_157470], **kwargs_157474)
        
        # Assigning a type to the variable 'values' (line 1420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 8), 'values', reshape_call_result_157475)
        
        # Assigning a Call to a Name (line 1423):
        
        # Assigning a Call to a Name (line 1423):
        
        # Call to transform_affine(...): (line 1423)
        # Processing the call arguments (line 1423)
        
        # Call to transform_non_affine(...): (line 1423)
        # Processing the call arguments (line 1423)
        # Getting the type of 'values' (line 1423)
        values_157480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 62), 'values', False)
        # Processing the call keyword arguments (line 1423)
        kwargs_157481 = {}
        # Getting the type of 'self' (line 1423)
        self_157478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 36), 'self', False)
        # Obtaining the member 'transform_non_affine' of a type (line 1423)
        transform_non_affine_157479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1423, 36), self_157478, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 1423)
        transform_non_affine_call_result_157482 = invoke(stypy.reporting.localization.Localization(__file__, 1423, 36), transform_non_affine_157479, *[values_157480], **kwargs_157481)
        
        # Processing the call keyword arguments (line 1423)
        kwargs_157483 = {}
        # Getting the type of 'self' (line 1423)
        self_157476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 14), 'self', False)
        # Obtaining the member 'transform_affine' of a type (line 1423)
        transform_affine_157477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1423, 14), self_157476, 'transform_affine')
        # Calling transform_affine(args, kwargs) (line 1423)
        transform_affine_call_result_157484 = invoke(stypy.reporting.localization.Localization(__file__, 1423, 14), transform_affine_157477, *[transform_non_affine_call_result_157482], **kwargs_157483)
        
        # Assigning a type to the variable 'res' (line 1423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1423, 8), 'res', transform_affine_call_result_157484)
        
        
        # Getting the type of 'ndim' (line 1426)
        ndim_157485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 11), 'ndim')
        int_157486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 19), 'int')
        # Applying the binary operator '==' (line 1426)
        result_eq_157487 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 11), '==', ndim_157485, int_157486)
        
        # Testing the type of an if condition (line 1426)
        if_condition_157488 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1426, 8), result_eq_157487)
        # Assigning a type to the variable 'if_condition_157488' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'if_condition_157488', if_condition_157488)
        # SSA begins for if statement (line 1426)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Evaluating assert statement condition
        
        
        # Call to is_masked(...): (line 1427)
        # Processing the call arguments (line 1427)
        # Getting the type of 'res' (line 1427)
        res_157492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 39), 'res', False)
        # Processing the call keyword arguments (line 1427)
        kwargs_157493 = {}
        # Getting the type of 'np' (line 1427)
        np_157489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 23), 'np', False)
        # Obtaining the member 'ma' of a type (line 1427)
        ma_157490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1427, 23), np_157489, 'ma')
        # Obtaining the member 'is_masked' of a type (line 1427)
        is_masked_157491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1427, 23), ma_157490, 'is_masked')
        # Calling is_masked(args, kwargs) (line 1427)
        is_masked_call_result_157494 = invoke(stypy.reporting.localization.Localization(__file__, 1427, 23), is_masked_157491, *[res_157492], **kwargs_157493)
        
        # Applying the 'not' unary operator (line 1427)
        result_not__157495 = python_operator(stypy.reporting.localization.Localization(__file__, 1427, 19), 'not', is_masked_call_result_157494)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1428)
        tuple_157496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1428, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1428)
        # Adding element type (line 1428)
        int_157497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1428, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1428, 23), tuple_157496, int_157497)
        # Adding element type (line 1428)
        int_157498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1428, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1428, 23), tuple_157496, int_157498)
        
        # Getting the type of 'res' (line 1428)
        res_157499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 19), 'res')
        # Obtaining the member '__getitem__' of a type (line 1428)
        getitem___157500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 19), res_157499, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1428)
        subscript_call_result_157501 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 19), getitem___157500, tuple_157496)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 12), 'stypy_return_type', subscript_call_result_157501)
        # SSA join for if statement (line 1426)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'ndim' (line 1429)
        ndim_157502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 11), 'ndim')
        int_157503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 19), 'int')
        # Applying the binary operator '==' (line 1429)
        result_eq_157504 = python_operator(stypy.reporting.localization.Localization(__file__, 1429, 11), '==', ndim_157502, int_157503)
        
        # Testing the type of an if condition (line 1429)
        if_condition_157505 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1429, 8), result_eq_157504)
        # Assigning a type to the variable 'if_condition_157505' (line 1429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1429, 8), 'if_condition_157505', if_condition_157505)
        # SSA begins for if statement (line 1429)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to reshape(...): (line 1430)
        # Processing the call arguments (line 1430)
        int_157508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 31), 'int')
        # Processing the call keyword arguments (line 1430)
        kwargs_157509 = {}
        # Getting the type of 'res' (line 1430)
        res_157506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 19), 'res', False)
        # Obtaining the member 'reshape' of a type (line 1430)
        reshape_157507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1430, 19), res_157506, 'reshape')
        # Calling reshape(args, kwargs) (line 1430)
        reshape_call_result_157510 = invoke(stypy.reporting.localization.Localization(__file__, 1430, 19), reshape_157507, *[int_157508], **kwargs_157509)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 12), 'stypy_return_type', reshape_call_result_157510)
        # SSA branch for the else part of an if statement (line 1429)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'ndim' (line 1431)
        ndim_157511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 13), 'ndim')
        int_157512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 21), 'int')
        # Applying the binary operator '==' (line 1431)
        result_eq_157513 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 13), '==', ndim_157511, int_157512)
        
        # Testing the type of an if condition (line 1431)
        if_condition_157514 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1431, 13), result_eq_157513)
        # Assigning a type to the variable 'if_condition_157514' (line 1431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 13), 'if_condition_157514', if_condition_157514)
        # SSA begins for if statement (line 1431)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'res' (line 1432)
        res_157515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 19), 'res')
        # Assigning a type to the variable 'stypy_return_type' (line 1432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1432, 12), 'stypy_return_type', res_157515)
        # SSA join for if statement (line 1431)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1429)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to ValueError(...): (line 1433)
        # Processing the call arguments (line 1433)
        
        # Call to format(...): (line 1434)
        # Processing the call keyword arguments (line 1434)
        # Getting the type of 'self' (line 1435)
        self_157519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 39), 'self', False)
        # Obtaining the member 'input_dims' of a type (line 1435)
        input_dims_157520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 39), self_157519, 'input_dims')
        keyword_157521 = input_dims_157520
        kwargs_157522 = {'dims': keyword_157521}
        unicode_157517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 12), 'unicode', u'Input values must have shape (N x {dims}) or ({dims}).')
        # Obtaining the member 'format' of a type (line 1434)
        format_157518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 12), unicode_157517, 'format')
        # Calling format(args, kwargs) (line 1434)
        format_call_result_157523 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 12), format_157518, *[], **kwargs_157522)
        
        # Processing the call keyword arguments (line 1433)
        kwargs_157524 = {}
        # Getting the type of 'ValueError' (line 1433)
        ValueError_157516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1433)
        ValueError_call_result_157525 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 14), ValueError_157516, *[format_call_result_157523], **kwargs_157524)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1433, 8), ValueError_call_result_157525, 'raise parameter', BaseException)
        
        # ################# End of 'transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1406)
        stypy_return_type_157526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157526)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform'
        return stypy_return_type_157526


    @norecursion
    def transform_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_affine'
        module_type_store = module_type_store.open_function_context('transform_affine', 1437, 4, False)
        # Assigning a type to the variable 'self' (line 1438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.transform_affine.__dict__.__setitem__('stypy_localization', localization)
        Transform.transform_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.transform_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.transform_affine.__dict__.__setitem__('stypy_function_name', 'Transform.transform_affine')
        Transform.transform_affine.__dict__.__setitem__('stypy_param_names_list', ['values'])
        Transform.transform_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.transform_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.transform_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.transform_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.transform_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.transform_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.transform_affine', ['values'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_affine', localization, ['values'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_affine(...)' code ##################

        unicode_157527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1454, (-1)), 'unicode', u'\n        Performs only the affine part of this transformation on the\n        given array of values.\n\n        ``transform(values)`` is always equivalent to\n        ``transform_affine(transform_non_affine(values))``.\n\n        In non-affine transformations, this is generally a no-op.  In\n        affine transformations, this is equivalent to\n        ``transform(values)``.\n\n        Accepts a numpy array of shape (N x :attr:`input_dims`) and\n        returns a numpy array of shape (N x :attr:`output_dims`).\n\n        Alternatively, accepts a numpy array of length :attr:`input_dims`\n        and returns a numpy array of length :attr:`output_dims`.\n        ')
        
        # Call to transform(...): (line 1455)
        # Processing the call arguments (line 1455)
        # Getting the type of 'values' (line 1455)
        values_157533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 43), 'values', False)
        # Processing the call keyword arguments (line 1455)
        kwargs_157534 = {}
        
        # Call to get_affine(...): (line 1455)
        # Processing the call keyword arguments (line 1455)
        kwargs_157530 = {}
        # Getting the type of 'self' (line 1455)
        self_157528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 15), 'self', False)
        # Obtaining the member 'get_affine' of a type (line 1455)
        get_affine_157529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1455, 15), self_157528, 'get_affine')
        # Calling get_affine(args, kwargs) (line 1455)
        get_affine_call_result_157531 = invoke(stypy.reporting.localization.Localization(__file__, 1455, 15), get_affine_157529, *[], **kwargs_157530)
        
        # Obtaining the member 'transform' of a type (line 1455)
        transform_157532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1455, 15), get_affine_call_result_157531, 'transform')
        # Calling transform(args, kwargs) (line 1455)
        transform_call_result_157535 = invoke(stypy.reporting.localization.Localization(__file__, 1455, 15), transform_157532, *[values_157533], **kwargs_157534)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 8), 'stypy_return_type', transform_call_result_157535)
        
        # ################# End of 'transform_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1437)
        stypy_return_type_157536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157536)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_affine'
        return stypy_return_type_157536


    @norecursion
    def transform_non_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_non_affine'
        module_type_store = module_type_store.open_function_context('transform_non_affine', 1457, 4, False)
        # Assigning a type to the variable 'self' (line 1458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.transform_non_affine.__dict__.__setitem__('stypy_localization', localization)
        Transform.transform_non_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.transform_non_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.transform_non_affine.__dict__.__setitem__('stypy_function_name', 'Transform.transform_non_affine')
        Transform.transform_non_affine.__dict__.__setitem__('stypy_param_names_list', ['values'])
        Transform.transform_non_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.transform_non_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.transform_non_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.transform_non_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.transform_non_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.transform_non_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.transform_non_affine', ['values'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_non_affine', localization, ['values'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_non_affine(...)' code ##################

        unicode_157537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, (-1)), 'unicode', u'\n        Performs only the non-affine part of the transformation.\n\n        ``transform(values)`` is always equivalent to\n        ``transform_affine(transform_non_affine(values))``.\n\n        In non-affine transformations, this is generally equivalent to\n        ``transform(values)``.  In affine transformations, this is\n        always a no-op.\n\n        Accepts a numpy array of shape (N x :attr:`input_dims`) and\n        returns a numpy array of shape (N x :attr:`output_dims`).\n\n        Alternatively, accepts a numpy array of length :attr:`input_dims`\n        and returns a numpy array of length :attr:`output_dims`.\n        ')
        # Getting the type of 'values' (line 1474)
        values_157538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 15), 'values')
        # Assigning a type to the variable 'stypy_return_type' (line 1474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1474, 8), 'stypy_return_type', values_157538)
        
        # ################# End of 'transform_non_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_non_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1457)
        stypy_return_type_157539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157539)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_non_affine'
        return stypy_return_type_157539


    @norecursion
    def transform_bbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_bbox'
        module_type_store = module_type_store.open_function_context('transform_bbox', 1476, 4, False)
        # Assigning a type to the variable 'self' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.transform_bbox.__dict__.__setitem__('stypy_localization', localization)
        Transform.transform_bbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.transform_bbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.transform_bbox.__dict__.__setitem__('stypy_function_name', 'Transform.transform_bbox')
        Transform.transform_bbox.__dict__.__setitem__('stypy_param_names_list', ['bbox'])
        Transform.transform_bbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.transform_bbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.transform_bbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.transform_bbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.transform_bbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.transform_bbox.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.transform_bbox', ['bbox'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_bbox', localization, ['bbox'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_bbox(...)' code ##################

        unicode_157540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, (-1)), 'unicode', u'\n        Transform the given bounding box.\n\n        Note, for smarter transforms including caching (a common\n        requirement for matplotlib figures), see :class:`TransformedBbox`.\n        ')
        
        # Call to Bbox(...): (line 1483)
        # Processing the call arguments (line 1483)
        
        # Call to transform(...): (line 1483)
        # Processing the call arguments (line 1483)
        
        # Call to get_points(...): (line 1483)
        # Processing the call keyword arguments (line 1483)
        kwargs_157546 = {}
        # Getting the type of 'bbox' (line 1483)
        bbox_157544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 35), 'bbox', False)
        # Obtaining the member 'get_points' of a type (line 1483)
        get_points_157545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 35), bbox_157544, 'get_points')
        # Calling get_points(args, kwargs) (line 1483)
        get_points_call_result_157547 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 35), get_points_157545, *[], **kwargs_157546)
        
        # Processing the call keyword arguments (line 1483)
        kwargs_157548 = {}
        # Getting the type of 'self' (line 1483)
        self_157542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 20), 'self', False)
        # Obtaining the member 'transform' of a type (line 1483)
        transform_157543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 20), self_157542, 'transform')
        # Calling transform(args, kwargs) (line 1483)
        transform_call_result_157549 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 20), transform_157543, *[get_points_call_result_157547], **kwargs_157548)
        
        # Processing the call keyword arguments (line 1483)
        kwargs_157550 = {}
        # Getting the type of 'Bbox' (line 1483)
        Bbox_157541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 1483)
        Bbox_call_result_157551 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 15), Bbox_157541, *[transform_call_result_157549], **kwargs_157550)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 8), 'stypy_return_type', Bbox_call_result_157551)
        
        # ################# End of 'transform_bbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_bbox' in the type store
        # Getting the type of 'stypy_return_type' (line 1476)
        stypy_return_type_157552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157552)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_bbox'
        return stypy_return_type_157552


    @norecursion
    def get_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_affine'
        module_type_store = module_type_store.open_function_context('get_affine', 1485, 4, False)
        # Assigning a type to the variable 'self' (line 1486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.get_affine.__dict__.__setitem__('stypy_localization', localization)
        Transform.get_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.get_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.get_affine.__dict__.__setitem__('stypy_function_name', 'Transform.get_affine')
        Transform.get_affine.__dict__.__setitem__('stypy_param_names_list', [])
        Transform.get_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.get_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.get_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.get_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.get_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.get_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.get_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_affine(...)' code ##################

        unicode_157553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1488, (-1)), 'unicode', u'\n        Get the affine part of this transform.\n        ')
        
        # Call to IdentityTransform(...): (line 1489)
        # Processing the call keyword arguments (line 1489)
        kwargs_157555 = {}
        # Getting the type of 'IdentityTransform' (line 1489)
        IdentityTransform_157554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 15), 'IdentityTransform', False)
        # Calling IdentityTransform(args, kwargs) (line 1489)
        IdentityTransform_call_result_157556 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 15), IdentityTransform_157554, *[], **kwargs_157555)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'stypy_return_type', IdentityTransform_call_result_157556)
        
        # ################# End of 'get_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1485)
        stypy_return_type_157557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157557)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_affine'
        return stypy_return_type_157557


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 1491, 4, False)
        # Assigning a type to the variable 'self' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        Transform.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.get_matrix.__dict__.__setitem__('stypy_function_name', 'Transform.get_matrix')
        Transform.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        Transform.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        unicode_157558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1496, (-1)), 'unicode', u'\n        Get the Affine transformation array for the affine part\n        of this transform.\n\n        ')
        
        # Call to get_matrix(...): (line 1497)
        # Processing the call keyword arguments (line 1497)
        kwargs_157564 = {}
        
        # Call to get_affine(...): (line 1497)
        # Processing the call keyword arguments (line 1497)
        kwargs_157561 = {}
        # Getting the type of 'self' (line 1497)
        self_157559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 15), 'self', False)
        # Obtaining the member 'get_affine' of a type (line 1497)
        get_affine_157560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1497, 15), self_157559, 'get_affine')
        # Calling get_affine(args, kwargs) (line 1497)
        get_affine_call_result_157562 = invoke(stypy.reporting.localization.Localization(__file__, 1497, 15), get_affine_157560, *[], **kwargs_157561)
        
        # Obtaining the member 'get_matrix' of a type (line 1497)
        get_matrix_157563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1497, 15), get_affine_call_result_157562, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1497)
        get_matrix_call_result_157565 = invoke(stypy.reporting.localization.Localization(__file__, 1497, 15), get_matrix_157563, *[], **kwargs_157564)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'stypy_return_type', get_matrix_call_result_157565)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 1491)
        stypy_return_type_157566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157566)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_157566


    @norecursion
    def transform_point(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_point'
        module_type_store = module_type_store.open_function_context('transform_point', 1499, 4, False)
        # Assigning a type to the variable 'self' (line 1500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.transform_point.__dict__.__setitem__('stypy_localization', localization)
        Transform.transform_point.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.transform_point.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.transform_point.__dict__.__setitem__('stypy_function_name', 'Transform.transform_point')
        Transform.transform_point.__dict__.__setitem__('stypy_param_names_list', ['point'])
        Transform.transform_point.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.transform_point.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.transform_point.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.transform_point.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.transform_point.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.transform_point.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.transform_point', ['point'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_point', localization, ['point'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_point(...)' code ##################

        unicode_157567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, (-1)), 'unicode', u'\n        A convenience function that returns the transformed copy of a\n        single point.\n\n        The point is given as a sequence of length :attr:`input_dims`.\n        The transformed point is returned as a sequence of length\n        :attr:`output_dims`.\n        ')
        
        
        
        # Call to len(...): (line 1508)
        # Processing the call arguments (line 1508)
        # Getting the type of 'point' (line 1508)
        point_157569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 15), 'point', False)
        # Processing the call keyword arguments (line 1508)
        kwargs_157570 = {}
        # Getting the type of 'len' (line 1508)
        len_157568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 11), 'len', False)
        # Calling len(args, kwargs) (line 1508)
        len_call_result_157571 = invoke(stypy.reporting.localization.Localization(__file__, 1508, 11), len_157568, *[point_157569], **kwargs_157570)
        
        # Getting the type of 'self' (line 1508)
        self_157572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 25), 'self')
        # Obtaining the member 'input_dims' of a type (line 1508)
        input_dims_157573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1508, 25), self_157572, 'input_dims')
        # Applying the binary operator '!=' (line 1508)
        result_ne_157574 = python_operator(stypy.reporting.localization.Localization(__file__, 1508, 11), '!=', len_call_result_157571, input_dims_157573)
        
        # Testing the type of an if condition (line 1508)
        if_condition_157575 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1508, 8), result_ne_157574)
        # Assigning a type to the variable 'if_condition_157575' (line 1508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 8), 'if_condition_157575', if_condition_157575)
        # SSA begins for if statement (line 1508)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1509):
        
        # Assigning a Str to a Name (line 1509):
        unicode_157576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1509, 18), 'unicode', u"The length of 'point' must be 'self.input_dims'")
        # Assigning a type to the variable 'msg' (line 1509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 12), 'msg', unicode_157576)
        
        # Call to ValueError(...): (line 1510)
        # Processing the call arguments (line 1510)
        # Getting the type of 'msg' (line 1510)
        msg_157578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 29), 'msg', False)
        # Processing the call keyword arguments (line 1510)
        kwargs_157579 = {}
        # Getting the type of 'ValueError' (line 1510)
        ValueError_157577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1510)
        ValueError_call_result_157580 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 18), ValueError_157577, *[msg_157578], **kwargs_157579)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1510, 12), ValueError_call_result_157580, 'raise parameter', BaseException)
        # SSA join for if statement (line 1508)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining the type of the subscript
        int_157581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1511, 51), 'int')
        
        # Call to transform(...): (line 1511)
        # Processing the call arguments (line 1511)
        
        # Call to asarray(...): (line 1511)
        # Processing the call arguments (line 1511)
        
        # Obtaining an instance of the builtin type 'list' (line 1511)
        list_157586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1511, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1511)
        # Adding element type (line 1511)
        # Getting the type of 'point' (line 1511)
        point_157587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 42), 'point', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1511, 41), list_157586, point_157587)
        
        # Processing the call keyword arguments (line 1511)
        kwargs_157588 = {}
        # Getting the type of 'np' (line 1511)
        np_157584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 30), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1511)
        asarray_157585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 30), np_157584, 'asarray')
        # Calling asarray(args, kwargs) (line 1511)
        asarray_call_result_157589 = invoke(stypy.reporting.localization.Localization(__file__, 1511, 30), asarray_157585, *[list_157586], **kwargs_157588)
        
        # Processing the call keyword arguments (line 1511)
        kwargs_157590 = {}
        # Getting the type of 'self' (line 1511)
        self_157582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 15), 'self', False)
        # Obtaining the member 'transform' of a type (line 1511)
        transform_157583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 15), self_157582, 'transform')
        # Calling transform(args, kwargs) (line 1511)
        transform_call_result_157591 = invoke(stypy.reporting.localization.Localization(__file__, 1511, 15), transform_157583, *[asarray_call_result_157589], **kwargs_157590)
        
        # Obtaining the member '__getitem__' of a type (line 1511)
        getitem___157592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 15), transform_call_result_157591, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1511)
        subscript_call_result_157593 = invoke(stypy.reporting.localization.Localization(__file__, 1511, 15), getitem___157592, int_157581)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1511, 8), 'stypy_return_type', subscript_call_result_157593)
        
        # ################# End of 'transform_point(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_point' in the type store
        # Getting the type of 'stypy_return_type' (line 1499)
        stypy_return_type_157594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157594)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_point'
        return stypy_return_type_157594


    @norecursion
    def transform_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_path'
        module_type_store = module_type_store.open_function_context('transform_path', 1513, 4, False)
        # Assigning a type to the variable 'self' (line 1514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.transform_path.__dict__.__setitem__('stypy_localization', localization)
        Transform.transform_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.transform_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.transform_path.__dict__.__setitem__('stypy_function_name', 'Transform.transform_path')
        Transform.transform_path.__dict__.__setitem__('stypy_param_names_list', ['path'])
        Transform.transform_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.transform_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.transform_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.transform_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.transform_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.transform_path.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.transform_path', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_path', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_path(...)' code ##################

        unicode_157595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1521, (-1)), 'unicode', u'\n        Returns a transformed path.\n\n        *path*: a :class:`~matplotlib.path.Path` instance.\n\n        In some cases, this transform may insert curves into the path\n        that began as line segments.\n        ')
        
        # Call to transform_path_affine(...): (line 1522)
        # Processing the call arguments (line 1522)
        
        # Call to transform_path_non_affine(...): (line 1522)
        # Processing the call arguments (line 1522)
        # Getting the type of 'path' (line 1522)
        path_157600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 73), 'path', False)
        # Processing the call keyword arguments (line 1522)
        kwargs_157601 = {}
        # Getting the type of 'self' (line 1522)
        self_157598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 42), 'self', False)
        # Obtaining the member 'transform_path_non_affine' of a type (line 1522)
        transform_path_non_affine_157599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 42), self_157598, 'transform_path_non_affine')
        # Calling transform_path_non_affine(args, kwargs) (line 1522)
        transform_path_non_affine_call_result_157602 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 42), transform_path_non_affine_157599, *[path_157600], **kwargs_157601)
        
        # Processing the call keyword arguments (line 1522)
        kwargs_157603 = {}
        # Getting the type of 'self' (line 1522)
        self_157596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 15), 'self', False)
        # Obtaining the member 'transform_path_affine' of a type (line 1522)
        transform_path_affine_157597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 15), self_157596, 'transform_path_affine')
        # Calling transform_path_affine(args, kwargs) (line 1522)
        transform_path_affine_call_result_157604 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 15), transform_path_affine_157597, *[transform_path_non_affine_call_result_157602], **kwargs_157603)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1522, 8), 'stypy_return_type', transform_path_affine_call_result_157604)
        
        # ################# End of 'transform_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_path' in the type store
        # Getting the type of 'stypy_return_type' (line 1513)
        stypy_return_type_157605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157605)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_path'
        return stypy_return_type_157605


    @norecursion
    def transform_path_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_path_affine'
        module_type_store = module_type_store.open_function_context('transform_path_affine', 1524, 4, False)
        # Assigning a type to the variable 'self' (line 1525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.transform_path_affine.__dict__.__setitem__('stypy_localization', localization)
        Transform.transform_path_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.transform_path_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.transform_path_affine.__dict__.__setitem__('stypy_function_name', 'Transform.transform_path_affine')
        Transform.transform_path_affine.__dict__.__setitem__('stypy_param_names_list', ['path'])
        Transform.transform_path_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.transform_path_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.transform_path_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.transform_path_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.transform_path_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.transform_path_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.transform_path_affine', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_path_affine', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_path_affine(...)' code ##################

        unicode_157606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1533, (-1)), 'unicode', u'\n        Returns a path, transformed only by the affine part of\n        this transform.\n\n        *path*: a :class:`~matplotlib.path.Path` instance.\n\n        ``transform_path(path)`` is equivalent to\n        ``transform_path_affine(transform_path_non_affine(values))``.\n        ')
        
        # Call to transform_path_affine(...): (line 1534)
        # Processing the call arguments (line 1534)
        # Getting the type of 'path' (line 1534)
        path_157612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 55), 'path', False)
        # Processing the call keyword arguments (line 1534)
        kwargs_157613 = {}
        
        # Call to get_affine(...): (line 1534)
        # Processing the call keyword arguments (line 1534)
        kwargs_157609 = {}
        # Getting the type of 'self' (line 1534)
        self_157607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 15), 'self', False)
        # Obtaining the member 'get_affine' of a type (line 1534)
        get_affine_157608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 15), self_157607, 'get_affine')
        # Calling get_affine(args, kwargs) (line 1534)
        get_affine_call_result_157610 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 15), get_affine_157608, *[], **kwargs_157609)
        
        # Obtaining the member 'transform_path_affine' of a type (line 1534)
        transform_path_affine_157611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 15), get_affine_call_result_157610, 'transform_path_affine')
        # Calling transform_path_affine(args, kwargs) (line 1534)
        transform_path_affine_call_result_157614 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 15), transform_path_affine_157611, *[path_157612], **kwargs_157613)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 8), 'stypy_return_type', transform_path_affine_call_result_157614)
        
        # ################# End of 'transform_path_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_path_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1524)
        stypy_return_type_157615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157615)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_path_affine'
        return stypy_return_type_157615


    @norecursion
    def transform_path_non_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_path_non_affine'
        module_type_store = module_type_store.open_function_context('transform_path_non_affine', 1536, 4, False)
        # Assigning a type to the variable 'self' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_localization', localization)
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_function_name', 'Transform.transform_path_non_affine')
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_param_names_list', ['path'])
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.transform_path_non_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.transform_path_non_affine', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_path_non_affine', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_path_non_affine(...)' code ##################

        unicode_157616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, (-1)), 'unicode', u'\n        Returns a path, transformed only by the non-affine\n        part of this transform.\n\n        *path*: a :class:`~matplotlib.path.Path` instance.\n\n        ``transform_path(path)`` is equivalent to\n        ``transform_path_affine(transform_path_non_affine(values))``.\n        ')
        
        # Assigning a Call to a Name (line 1546):
        
        # Assigning a Call to a Name (line 1546):
        
        # Call to transform_non_affine(...): (line 1546)
        # Processing the call arguments (line 1546)
        # Getting the type of 'path' (line 1546)
        path_157619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 38), 'path', False)
        # Obtaining the member 'vertices' of a type (line 1546)
        vertices_157620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 38), path_157619, 'vertices')
        # Processing the call keyword arguments (line 1546)
        kwargs_157621 = {}
        # Getting the type of 'self' (line 1546)
        self_157617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 12), 'self', False)
        # Obtaining the member 'transform_non_affine' of a type (line 1546)
        transform_non_affine_157618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 12), self_157617, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 1546)
        transform_non_affine_call_result_157622 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 12), transform_non_affine_157618, *[vertices_157620], **kwargs_157621)
        
        # Assigning a type to the variable 'x' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 8), 'x', transform_non_affine_call_result_157622)
        
        # Call to _fast_from_codes_and_verts(...): (line 1547)
        # Processing the call arguments (line 1547)
        # Getting the type of 'x' (line 1547)
        x_157625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 47), 'x', False)
        # Getting the type of 'path' (line 1547)
        path_157626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 50), 'path', False)
        # Obtaining the member 'codes' of a type (line 1547)
        codes_157627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1547, 50), path_157626, 'codes')
        
        # Obtaining an instance of the builtin type 'dict' (line 1548)
        dict_157628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 16), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1548)
        # Adding element type (key, value) (line 1548)
        unicode_157629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 17), 'unicode', u'interpolation_steps')
        # Getting the type of 'path' (line 1548)
        path_157630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 40), 'path', False)
        # Obtaining the member '_interpolation_steps' of a type (line 1548)
        _interpolation_steps_157631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 40), path_157630, '_interpolation_steps')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1548, 16), dict_157628, (unicode_157629, _interpolation_steps_157631))
        # Adding element type (key, value) (line 1548)
        unicode_157632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1549, 17), 'unicode', u'should_simplify')
        # Getting the type of 'path' (line 1549)
        path_157633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 36), 'path', False)
        # Obtaining the member 'should_simplify' of a type (line 1549)
        should_simplify_157634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 36), path_157633, 'should_simplify')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1548, 16), dict_157628, (unicode_157632, should_simplify_157634))
        
        # Processing the call keyword arguments (line 1547)
        kwargs_157635 = {}
        # Getting the type of 'Path' (line 1547)
        Path_157623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 15), 'Path', False)
        # Obtaining the member '_fast_from_codes_and_verts' of a type (line 1547)
        _fast_from_codes_and_verts_157624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1547, 15), Path_157623, '_fast_from_codes_and_verts')
        # Calling _fast_from_codes_and_verts(args, kwargs) (line 1547)
        _fast_from_codes_and_verts_call_result_157636 = invoke(stypy.reporting.localization.Localization(__file__, 1547, 15), _fast_from_codes_and_verts_157624, *[x_157625, codes_157627, dict_157628], **kwargs_157635)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 8), 'stypy_return_type', _fast_from_codes_and_verts_call_result_157636)
        
        # ################# End of 'transform_path_non_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_path_non_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1536)
        stypy_return_type_157637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157637)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_path_non_affine'
        return stypy_return_type_157637


    @norecursion
    def transform_angles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1551)
        False_157638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 52), 'False')
        float_157639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 67), 'float')
        defaults = [False_157638, float_157639]
        # Create a new context for function 'transform_angles'
        module_type_store = module_type_store.open_function_context('transform_angles', 1551, 4, False)
        # Assigning a type to the variable 'self' (line 1552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.transform_angles.__dict__.__setitem__('stypy_localization', localization)
        Transform.transform_angles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.transform_angles.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.transform_angles.__dict__.__setitem__('stypy_function_name', 'Transform.transform_angles')
        Transform.transform_angles.__dict__.__setitem__('stypy_param_names_list', ['angles', 'pts', 'radians', 'pushoff'])
        Transform.transform_angles.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.transform_angles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.transform_angles.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.transform_angles.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.transform_angles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.transform_angles.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.transform_angles', ['angles', 'pts', 'radians', 'pushoff'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_angles', localization, ['angles', 'pts', 'radians', 'pushoff'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_angles(...)' code ##################

        unicode_157640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, (-1)), 'unicode', u'\n        Performs transformation on a set of angles anchored at\n        specific locations.\n\n        The *angles* must be a column vector (i.e., numpy array).\n\n        The *pts* must be a two-column numpy array of x,y positions\n        (angle transforms currently only work in 2D).  This array must\n        have the same number of rows as *angles*.\n\n        *radians* indicates whether or not input angles are given in\n         radians (True) or degrees (False; the default).\n\n        *pushoff* is the distance to move away from *pts* for\n         determining transformed angles (see discussion of method\n         below).\n\n        The transformed angles are returned in an array with the same\n        size as *angles*.\n\n        The generic version of this method uses a very generic\n        algorithm that transforms *pts*, as well as locations very\n        close to *pts*, to find the angle in the transformed system.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1577)
        self_157641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 11), 'self')
        # Obtaining the member 'input_dims' of a type (line 1577)
        input_dims_157642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 11), self_157641, 'input_dims')
        int_157643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 30), 'int')
        # Applying the binary operator '!=' (line 1577)
        result_ne_157644 = python_operator(stypy.reporting.localization.Localization(__file__, 1577, 11), '!=', input_dims_157642, int_157643)
        
        
        # Getting the type of 'self' (line 1577)
        self_157645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 35), 'self')
        # Obtaining the member 'output_dims' of a type (line 1577)
        output_dims_157646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 35), self_157645, 'output_dims')
        int_157647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 55), 'int')
        # Applying the binary operator '!=' (line 1577)
        result_ne_157648 = python_operator(stypy.reporting.localization.Localization(__file__, 1577, 35), '!=', output_dims_157646, int_157647)
        
        # Applying the binary operator 'or' (line 1577)
        result_or_keyword_157649 = python_operator(stypy.reporting.localization.Localization(__file__, 1577, 11), 'or', result_ne_157644, result_ne_157648)
        
        # Testing the type of an if condition (line 1577)
        if_condition_157650 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1577, 8), result_or_keyword_157649)
        # Assigning a type to the variable 'if_condition_157650' (line 1577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'if_condition_157650', if_condition_157650)
        # SSA begins for if statement (line 1577)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to NotImplementedError(...): (line 1578)
        # Processing the call arguments (line 1578)
        unicode_157652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1578, 38), 'unicode', u'Only defined in 2D')
        # Processing the call keyword arguments (line 1578)
        kwargs_157653 = {}
        # Getting the type of 'NotImplementedError' (line 1578)
        NotImplementedError_157651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 18), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1578)
        NotImplementedError_call_result_157654 = invoke(stypy.reporting.localization.Localization(__file__, 1578, 18), NotImplementedError_157651, *[unicode_157652], **kwargs_157653)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1578, 12), NotImplementedError_call_result_157654, 'raise parameter', BaseException)
        # SSA join for if statement (line 1577)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_157655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 21), 'int')
        # Getting the type of 'pts' (line 1580)
        pts_157656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 11), 'pts')
        # Obtaining the member 'shape' of a type (line 1580)
        shape_157657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 11), pts_157656, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1580)
        getitem___157658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 11), shape_157657, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1580)
        subscript_call_result_157659 = invoke(stypy.reporting.localization.Localization(__file__, 1580, 11), getitem___157658, int_157655)
        
        int_157660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 27), 'int')
        # Applying the binary operator '!=' (line 1580)
        result_ne_157661 = python_operator(stypy.reporting.localization.Localization(__file__, 1580, 11), '!=', subscript_call_result_157659, int_157660)
        
        # Testing the type of an if condition (line 1580)
        if_condition_157662 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1580, 8), result_ne_157661)
        # Assigning a type to the variable 'if_condition_157662' (line 1580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1580, 8), 'if_condition_157662', if_condition_157662)
        # SSA begins for if statement (line 1580)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1581)
        # Processing the call arguments (line 1581)
        unicode_157664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 29), 'unicode', u"'pts' must be array with 2 columns for x,y")
        # Processing the call keyword arguments (line 1581)
        kwargs_157665 = {}
        # Getting the type of 'ValueError' (line 1581)
        ValueError_157663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1581)
        ValueError_call_result_157666 = invoke(stypy.reporting.localization.Localization(__file__, 1581, 18), ValueError_157663, *[unicode_157664], **kwargs_157665)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1581, 12), ValueError_call_result_157666, 'raise parameter', BaseException)
        # SSA join for if statement (line 1580)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'angles' (line 1583)
        angles_157667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 11), 'angles')
        # Obtaining the member 'ndim' of a type (line 1583)
        ndim_157668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 11), angles_157667, 'ndim')
        int_157669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 26), 'int')
        # Applying the binary operator '!=' (line 1583)
        result_ne_157670 = python_operator(stypy.reporting.localization.Localization(__file__, 1583, 11), '!=', ndim_157668, int_157669)
        
        
        
        # Obtaining the type of the subscript
        int_157671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 44), 'int')
        # Getting the type of 'angles' (line 1583)
        angles_157672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 31), 'angles')
        # Obtaining the member 'shape' of a type (line 1583)
        shape_157673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 31), angles_157672, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1583)
        getitem___157674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 31), shape_157673, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1583)
        subscript_call_result_157675 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 31), getitem___157674, int_157671)
        
        
        # Obtaining the type of the subscript
        int_157676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 60), 'int')
        # Getting the type of 'pts' (line 1583)
        pts_157677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 50), 'pts')
        # Obtaining the member 'shape' of a type (line 1583)
        shape_157678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 50), pts_157677, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1583)
        getitem___157679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 50), shape_157678, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1583)
        subscript_call_result_157680 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 50), getitem___157679, int_157676)
        
        # Applying the binary operator '!=' (line 1583)
        result_ne_157681 = python_operator(stypy.reporting.localization.Localization(__file__, 1583, 31), '!=', subscript_call_result_157675, subscript_call_result_157680)
        
        # Applying the binary operator 'or' (line 1583)
        result_or_keyword_157682 = python_operator(stypy.reporting.localization.Localization(__file__, 1583, 11), 'or', result_ne_157670, result_ne_157681)
        
        # Testing the type of an if condition (line 1583)
        if_condition_157683 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1583, 8), result_or_keyword_157682)
        # Assigning a type to the variable 'if_condition_157683' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 8), 'if_condition_157683', if_condition_157683)
        # SSA begins for if statement (line 1583)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1584):
        
        # Assigning a Str to a Name (line 1584):
        unicode_157684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1584, 18), 'unicode', u"'angles' must be a column vector and have same number of")
        # Assigning a type to the variable 'msg' (line 1584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 12), 'msg', unicode_157684)
        
        # Getting the type of 'msg' (line 1585)
        msg_157685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 12), 'msg')
        unicode_157686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1585, 19), 'unicode', u" rows as 'pts'")
        # Applying the binary operator '+=' (line 1585)
        result_iadd_157687 = python_operator(stypy.reporting.localization.Localization(__file__, 1585, 12), '+=', msg_157685, unicode_157686)
        # Assigning a type to the variable 'msg' (line 1585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 12), 'msg', result_iadd_157687)
        
        
        # Call to ValueError(...): (line 1586)
        # Processing the call arguments (line 1586)
        # Getting the type of 'msg' (line 1586)
        msg_157689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 29), 'msg', False)
        # Processing the call keyword arguments (line 1586)
        kwargs_157690 = {}
        # Getting the type of 'ValueError' (line 1586)
        ValueError_157688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1586)
        ValueError_call_result_157691 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 18), ValueError_157688, *[msg_157689], **kwargs_157690)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1586, 12), ValueError_call_result_157691, 'raise parameter', BaseException)
        # SSA join for if statement (line 1583)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'radians' (line 1589)
        radians_157692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 15), 'radians')
        # Applying the 'not' unary operator (line 1589)
        result_not__157693 = python_operator(stypy.reporting.localization.Localization(__file__, 1589, 11), 'not', radians_157692)
        
        # Testing the type of an if condition (line 1589)
        if_condition_157694 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1589, 8), result_not__157693)
        # Assigning a type to the variable 'if_condition_157694' (line 1589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 8), 'if_condition_157694', if_condition_157694)
        # SSA begins for if statement (line 1589)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1590):
        
        # Assigning a BinOp to a Name (line 1590):
        # Getting the type of 'angles' (line 1590)
        angles_157695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 21), 'angles')
        float_157696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1590, 30), 'float')
        # Applying the binary operator 'div' (line 1590)
        result_div_157697 = python_operator(stypy.reporting.localization.Localization(__file__, 1590, 21), 'div', angles_157695, float_157696)
        
        # Getting the type of 'np' (line 1590)
        np_157698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 38), 'np')
        # Obtaining the member 'pi' of a type (line 1590)
        pi_157699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 38), np_157698, 'pi')
        # Applying the binary operator '*' (line 1590)
        result_mul_157700 = python_operator(stypy.reporting.localization.Localization(__file__, 1590, 36), '*', result_div_157697, pi_157699)
        
        # Assigning a type to the variable 'angles' (line 1590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 12), 'angles', result_mul_157700)
        # SSA join for if statement (line 1589)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1593):
        
        # Assigning a BinOp to a Name (line 1593):
        # Getting the type of 'pts' (line 1593)
        pts_157701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 15), 'pts')
        # Getting the type of 'pushoff' (line 1593)
        pushoff_157702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 21), 'pushoff')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1593)
        tuple_157703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1593)
        # Adding element type (line 1593)
        
        # Call to cos(...): (line 1593)
        # Processing the call arguments (line 1593)
        # Getting the type of 'angles' (line 1593)
        angles_157706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 44), 'angles', False)
        # Processing the call keyword arguments (line 1593)
        kwargs_157707 = {}
        # Getting the type of 'np' (line 1593)
        np_157704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 37), 'np', False)
        # Obtaining the member 'cos' of a type (line 1593)
        cos_157705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 37), np_157704, 'cos')
        # Calling cos(args, kwargs) (line 1593)
        cos_call_result_157708 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 37), cos_157705, *[angles_157706], **kwargs_157707)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1593, 37), tuple_157703, cos_call_result_157708)
        # Adding element type (line 1593)
        
        # Call to sin(...): (line 1593)
        # Processing the call arguments (line 1593)
        # Getting the type of 'angles' (line 1593)
        angles_157711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 60), 'angles', False)
        # Processing the call keyword arguments (line 1593)
        kwargs_157712 = {}
        # Getting the type of 'np' (line 1593)
        np_157709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 53), 'np', False)
        # Obtaining the member 'sin' of a type (line 1593)
        sin_157710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 53), np_157709, 'sin')
        # Calling sin(args, kwargs) (line 1593)
        sin_call_result_157713 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 53), sin_157710, *[angles_157711], **kwargs_157712)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1593, 37), tuple_157703, sin_call_result_157713)
        
        # Getting the type of 'np' (line 1593)
        np_157714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 31), 'np')
        # Obtaining the member 'c_' of a type (line 1593)
        c__157715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 31), np_157714, 'c_')
        # Obtaining the member '__getitem__' of a type (line 1593)
        getitem___157716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 31), c__157715, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1593)
        subscript_call_result_157717 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 31), getitem___157716, tuple_157703)
        
        # Applying the binary operator '*' (line 1593)
        result_mul_157718 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 21), '*', pushoff_157702, subscript_call_result_157717)
        
        # Applying the binary operator '+' (line 1593)
        result_add_157719 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 15), '+', pts_157701, result_mul_157718)
        
        # Assigning a type to the variable 'pts2' (line 1593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 8), 'pts2', result_add_157719)
        
        # Assigning a Call to a Name (line 1596):
        
        # Assigning a Call to a Name (line 1596):
        
        # Call to transform(...): (line 1596)
        # Processing the call arguments (line 1596)
        # Getting the type of 'pts' (line 1596)
        pts_157722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 30), 'pts', False)
        # Processing the call keyword arguments (line 1596)
        kwargs_157723 = {}
        # Getting the type of 'self' (line 1596)
        self_157720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 15), 'self', False)
        # Obtaining the member 'transform' of a type (line 1596)
        transform_157721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 15), self_157720, 'transform')
        # Calling transform(args, kwargs) (line 1596)
        transform_call_result_157724 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 15), transform_157721, *[pts_157722], **kwargs_157723)
        
        # Assigning a type to the variable 'tpts' (line 1596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 8), 'tpts', transform_call_result_157724)
        
        # Assigning a Call to a Name (line 1597):
        
        # Assigning a Call to a Name (line 1597):
        
        # Call to transform(...): (line 1597)
        # Processing the call arguments (line 1597)
        # Getting the type of 'pts2' (line 1597)
        pts2_157727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 31), 'pts2', False)
        # Processing the call keyword arguments (line 1597)
        kwargs_157728 = {}
        # Getting the type of 'self' (line 1597)
        self_157725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 16), 'self', False)
        # Obtaining the member 'transform' of a type (line 1597)
        transform_157726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1597, 16), self_157725, 'transform')
        # Calling transform(args, kwargs) (line 1597)
        transform_call_result_157729 = invoke(stypy.reporting.localization.Localization(__file__, 1597, 16), transform_157726, *[pts2_157727], **kwargs_157728)
        
        # Assigning a type to the variable 'tpts2' (line 1597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1597, 8), 'tpts2', transform_call_result_157729)
        
        # Assigning a BinOp to a Name (line 1600):
        
        # Assigning a BinOp to a Name (line 1600):
        # Getting the type of 'tpts2' (line 1600)
        tpts2_157730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 12), 'tpts2')
        # Getting the type of 'tpts' (line 1600)
        tpts_157731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 20), 'tpts')
        # Applying the binary operator '-' (line 1600)
        result_sub_157732 = python_operator(stypy.reporting.localization.Localization(__file__, 1600, 12), '-', tpts2_157730, tpts_157731)
        
        # Assigning a type to the variable 'd' (line 1600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'd', result_sub_157732)
        
        # Assigning a Call to a Name (line 1601):
        
        # Assigning a Call to a Name (line 1601):
        
        # Call to arctan2(...): (line 1601)
        # Processing the call arguments (line 1601)
        
        # Obtaining the type of the subscript
        slice_157735 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1601, 23), None, None, None)
        int_157736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1601, 28), 'int')
        # Getting the type of 'd' (line 1601)
        d_157737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 23), 'd', False)
        # Obtaining the member '__getitem__' of a type (line 1601)
        getitem___157738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 23), d_157737, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1601)
        subscript_call_result_157739 = invoke(stypy.reporting.localization.Localization(__file__, 1601, 23), getitem___157738, (slice_157735, int_157736))
        
        
        # Obtaining the type of the subscript
        slice_157740 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1601, 32), None, None, None)
        int_157741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1601, 37), 'int')
        # Getting the type of 'd' (line 1601)
        d_157742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 32), 'd', False)
        # Obtaining the member '__getitem__' of a type (line 1601)
        getitem___157743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 32), d_157742, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1601)
        subscript_call_result_157744 = invoke(stypy.reporting.localization.Localization(__file__, 1601, 32), getitem___157743, (slice_157740, int_157741))
        
        # Processing the call keyword arguments (line 1601)
        kwargs_157745 = {}
        # Getting the type of 'np' (line 1601)
        np_157733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 12), 'np', False)
        # Obtaining the member 'arctan2' of a type (line 1601)
        arctan2_157734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 12), np_157733, 'arctan2')
        # Calling arctan2(args, kwargs) (line 1601)
        arctan2_call_result_157746 = invoke(stypy.reporting.localization.Localization(__file__, 1601, 12), arctan2_157734, *[subscript_call_result_157739, subscript_call_result_157744], **kwargs_157745)
        
        # Assigning a type to the variable 'a' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 8), 'a', arctan2_call_result_157746)
        
        
        # Getting the type of 'radians' (line 1604)
        radians_157747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 15), 'radians')
        # Applying the 'not' unary operator (line 1604)
        result_not__157748 = python_operator(stypy.reporting.localization.Localization(__file__, 1604, 11), 'not', radians_157747)
        
        # Testing the type of an if condition (line 1604)
        if_condition_157749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1604, 8), result_not__157748)
        # Assigning a type to the variable 'if_condition_157749' (line 1604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1604, 8), 'if_condition_157749', if_condition_157749)
        # SSA begins for if statement (line 1604)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1605):
        
        # Assigning a BinOp to a Name (line 1605):
        # Getting the type of 'a' (line 1605)
        a_157750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 16), 'a')
        float_157751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1605, 20), 'float')
        # Applying the binary operator '*' (line 1605)
        result_mul_157752 = python_operator(stypy.reporting.localization.Localization(__file__, 1605, 16), '*', a_157750, float_157751)
        
        # Getting the type of 'np' (line 1605)
        np_157753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 28), 'np')
        # Obtaining the member 'pi' of a type (line 1605)
        pi_157754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 28), np_157753, 'pi')
        # Applying the binary operator 'div' (line 1605)
        result_div_157755 = python_operator(stypy.reporting.localization.Localization(__file__, 1605, 26), 'div', result_mul_157752, pi_157754)
        
        # Assigning a type to the variable 'a' (line 1605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'a', result_div_157755)
        # SSA join for if statement (line 1604)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'a' (line 1607)
        a_157756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1607, 8), 'stypy_return_type', a_157756)
        
        # ################# End of 'transform_angles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_angles' in the type store
        # Getting the type of 'stypy_return_type' (line 1551)
        stypy_return_type_157757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157757)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_angles'
        return stypy_return_type_157757


    @norecursion
    def inverted(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverted'
        module_type_store = module_type_store.open_function_context('inverted', 1609, 4, False)
        # Assigning a type to the variable 'self' (line 1610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1610, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Transform.inverted.__dict__.__setitem__('stypy_localization', localization)
        Transform.inverted.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Transform.inverted.__dict__.__setitem__('stypy_type_store', module_type_store)
        Transform.inverted.__dict__.__setitem__('stypy_function_name', 'Transform.inverted')
        Transform.inverted.__dict__.__setitem__('stypy_param_names_list', [])
        Transform.inverted.__dict__.__setitem__('stypy_varargs_param_name', None)
        Transform.inverted.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Transform.inverted.__dict__.__setitem__('stypy_call_defaults', defaults)
        Transform.inverted.__dict__.__setitem__('stypy_call_varargs', varargs)
        Transform.inverted.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Transform.inverted.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.inverted', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverted', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverted(...)' code ##################

        unicode_157758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1618, (-1)), 'unicode', u'\n        Return the corresponding inverse transformation.\n\n        The return value of this method should be treated as\n        temporary.  An update to *self* does not cause a corresponding\n        update to its inverted copy.\n\n        ``x === self.inverted().transform(self.transform(x))``\n        ')
        
        # Call to NotImplementedError(...): (line 1619)
        # Processing the call keyword arguments (line 1619)
        kwargs_157760 = {}
        # Getting the type of 'NotImplementedError' (line 1619)
        NotImplementedError_157759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1619)
        NotImplementedError_call_result_157761 = invoke(stypy.reporting.localization.Localization(__file__, 1619, 14), NotImplementedError_157759, *[], **kwargs_157760)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1619, 8), NotImplementedError_call_result_157761, 'raise parameter', BaseException)
        
        # ################# End of 'inverted(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverted' in the type store
        # Getting the type of 'stypy_return_type' (line 1609)
        stypy_return_type_157762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157762)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverted'
        return stypy_return_type_157762


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1223, 0, False)
        # Assigning a type to the variable 'self' (line 1224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1224, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Transform.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Transform' (line 1223)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 0), 'Transform', Transform)

# Assigning a Name to a Name (line 1248):
# Getting the type of 'None' (line 1248)
None_157763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 17), 'None')
# Getting the type of 'Transform'
Transform_157764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Transform')
# Setting the type of the member 'input_dims' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Transform_157764, 'input_dims', None_157763)

# Assigning a Name to a Name (line 1254):
# Getting the type of 'None' (line 1254)
None_157765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 18), 'None')
# Getting the type of 'Transform'
Transform_157766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Transform')
# Setting the type of the member 'output_dims' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Transform_157766, 'output_dims', None_157765)

# Assigning a Name to a Name (line 1260):
# Getting the type of 'False' (line 1260)
False_157767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 18), 'False')
# Getting the type of 'Transform'
Transform_157768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Transform')
# Setting the type of the member 'has_inverse' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Transform_157768, 'has_inverse', False_157767)

# Assigning a Name to a Name (line 1263):
# Getting the type of 'False' (line 1263)
False_157769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 19), 'False')
# Getting the type of 'Transform'
Transform_157770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Transform')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Transform_157770, 'is_separable', False_157769)
# Declaration of the 'TransformWrapper' class
# Getting the type of 'Transform' (line 1622)
Transform_157771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 23), 'Transform')

class TransformWrapper(Transform_157771, ):
    unicode_157772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1635, (-1)), 'unicode', u'\n    A helper class that holds a single child transform and acts\n    equivalently to it.\n\n    This is useful if a node of the transform tree must be replaced at\n    run time with a transform of a different type.  This class allows\n    that replacement to correctly trigger invalidation.\n\n    Note that :class:`TransformWrapper` instances must have the same\n    input and output dimensions during their entire lifetime, so the\n    child transform may only be replaced with another child transform\n    of the same dimensions.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1638, 4, False)
        # Assigning a type to the variable 'self' (line 1639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1639, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper.__init__', ['child'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['child'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_157773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, (-1)), 'unicode', u'\n        *child*: A class:`Transform` instance.  This child may later\n        be replaced with :meth:`set`.\n        ')
        
        
        
        # Call to isinstance(...): (line 1643)
        # Processing the call arguments (line 1643)
        # Getting the type of 'child' (line 1643)
        child_157775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 26), 'child', False)
        # Getting the type of 'Transform' (line 1643)
        Transform_157776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 33), 'Transform', False)
        # Processing the call keyword arguments (line 1643)
        kwargs_157777 = {}
        # Getting the type of 'isinstance' (line 1643)
        isinstance_157774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1643)
        isinstance_call_result_157778 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 15), isinstance_157774, *[child_157775, Transform_157776], **kwargs_157777)
        
        # Applying the 'not' unary operator (line 1643)
        result_not__157779 = python_operator(stypy.reporting.localization.Localization(__file__, 1643, 11), 'not', isinstance_call_result_157778)
        
        # Testing the type of an if condition (line 1643)
        if_condition_157780 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1643, 8), result_not__157779)
        # Assigning a type to the variable 'if_condition_157780' (line 1643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 8), 'if_condition_157780', if_condition_157780)
        # SSA begins for if statement (line 1643)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1644):
        
        # Assigning a Str to a Name (line 1644):
        unicode_157781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1644, 19), 'unicode', u"'child' must be an instance of 'matplotlib.transform.Transform'")
        # Assigning a type to the variable 'msg' (line 1644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 12), 'msg', unicode_157781)
        
        # Call to ValueError(...): (line 1646)
        # Processing the call arguments (line 1646)
        # Getting the type of 'msg' (line 1646)
        msg_157783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 29), 'msg', False)
        # Processing the call keyword arguments (line 1646)
        kwargs_157784 = {}
        # Getting the type of 'ValueError' (line 1646)
        ValueError_157782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1646)
        ValueError_call_result_157785 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 18), ValueError_157782, *[msg_157783], **kwargs_157784)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1646, 12), ValueError_call_result_157785, 'raise parameter', BaseException)
        # SSA join for if statement (line 1643)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _init(...): (line 1647)
        # Processing the call arguments (line 1647)
        # Getting the type of 'child' (line 1647)
        child_157788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 19), 'child', False)
        # Processing the call keyword arguments (line 1647)
        kwargs_157789 = {}
        # Getting the type of 'self' (line 1647)
        self_157786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 8), 'self', False)
        # Obtaining the member '_init' of a type (line 1647)
        _init_157787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 8), self_157786, '_init')
        # Calling _init(args, kwargs) (line 1647)
        _init_call_result_157790 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 8), _init_157787, *[child_157788], **kwargs_157789)
        
        
        # Call to set_children(...): (line 1648)
        # Processing the call arguments (line 1648)
        # Getting the type of 'child' (line 1648)
        child_157793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 26), 'child', False)
        # Processing the call keyword arguments (line 1648)
        kwargs_157794 = {}
        # Getting the type of 'self' (line 1648)
        self_157791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 1648)
        set_children_157792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 8), self_157791, 'set_children')
        # Calling set_children(args, kwargs) (line 1648)
        set_children_call_result_157795 = invoke(stypy.reporting.localization.Localization(__file__, 1648, 8), set_children_157792, *[child_157793], **kwargs_157794)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _init(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init'
        module_type_store = module_type_store.open_function_context('_init', 1650, 4, False)
        # Assigning a type to the variable 'self' (line 1651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper._init.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper._init.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper._init.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper._init.__dict__.__setitem__('stypy_function_name', 'TransformWrapper._init')
        TransformWrapper._init.__dict__.__setitem__('stypy_param_names_list', ['child'])
        TransformWrapper._init.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper._init.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper._init.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper._init.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper._init.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper._init.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper._init', ['child'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init', localization, ['child'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init(...)' code ##################

        
        # Call to __init__(...): (line 1651)
        # Processing the call arguments (line 1651)
        # Getting the type of 'self' (line 1651)
        self_157798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 27), 'self', False)
        # Processing the call keyword arguments (line 1651)
        kwargs_157799 = {}
        # Getting the type of 'Transform' (line 1651)
        Transform_157796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 8), 'Transform', False)
        # Obtaining the member '__init__' of a type (line 1651)
        init___157797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 8), Transform_157796, '__init__')
        # Calling __init__(args, kwargs) (line 1651)
        init___call_result_157800 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 8), init___157797, *[self_157798], **kwargs_157799)
        
        
        # Assigning a Attribute to a Attribute (line 1652):
        
        # Assigning a Attribute to a Attribute (line 1652):
        # Getting the type of 'child' (line 1652)
        child_157801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 26), 'child')
        # Obtaining the member 'input_dims' of a type (line 1652)
        input_dims_157802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 26), child_157801, 'input_dims')
        # Getting the type of 'self' (line 1652)
        self_157803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 8), 'self')
        # Setting the type of the member 'input_dims' of a type (line 1652)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 8), self_157803, 'input_dims', input_dims_157802)
        
        # Assigning a Attribute to a Attribute (line 1653):
        
        # Assigning a Attribute to a Attribute (line 1653):
        # Getting the type of 'child' (line 1653)
        child_157804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 27), 'child')
        # Obtaining the member 'output_dims' of a type (line 1653)
        output_dims_157805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 27), child_157804, 'output_dims')
        # Getting the type of 'self' (line 1653)
        self_157806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'self')
        # Setting the type of the member 'output_dims' of a type (line 1653)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 8), self_157806, 'output_dims', output_dims_157805)
        
        # Call to _set(...): (line 1654)
        # Processing the call arguments (line 1654)
        # Getting the type of 'child' (line 1654)
        child_157809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 18), 'child', False)
        # Processing the call keyword arguments (line 1654)
        kwargs_157810 = {}
        # Getting the type of 'self' (line 1654)
        self_157807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'self', False)
        # Obtaining the member '_set' of a type (line 1654)
        _set_157808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 8), self_157807, '_set')
        # Calling _set(args, kwargs) (line 1654)
        _set_call_result_157811 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 8), _set_157808, *[child_157809], **kwargs_157810)
        
        
        # Assigning a Num to a Attribute (line 1655):
        
        # Assigning a Num to a Attribute (line 1655):
        int_157812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 24), 'int')
        # Getting the type of 'self' (line 1655)
        self_157813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 8), 'self')
        # Setting the type of the member '_invalid' of a type (line 1655)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 8), self_157813, '_invalid', int_157812)
        
        # ################# End of '_init(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init' in the type store
        # Getting the type of 'stypy_return_type' (line 1650)
        stypy_return_type_157814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157814)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init'
        return stypy_return_type_157814


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 1657, 4, False)
        # Assigning a type to the variable 'self' (line 1658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'TransformWrapper.stypy__eq__')
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        # Call to __eq__(...): (line 1658)
        # Processing the call arguments (line 1658)
        # Getting the type of 'other' (line 1658)
        other_157818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 34), 'other', False)
        # Processing the call keyword arguments (line 1658)
        kwargs_157819 = {}
        # Getting the type of 'self' (line 1658)
        self_157815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 15), 'self', False)
        # Obtaining the member '_child' of a type (line 1658)
        _child_157816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 15), self_157815, '_child')
        # Obtaining the member '__eq__' of a type (line 1658)
        eq___157817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 15), _child_157816, '__eq__')
        # Calling __eq__(args, kwargs) (line 1658)
        eq___call_result_157820 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 15), eq___157817, *[other_157818], **kwargs_157819)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 8), 'stypy_return_type', eq___call_result_157820)
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 1657)
        stypy_return_type_157821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157821)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_157821


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 1667, 4, False)
        # Assigning a type to the variable 'self' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_function_name', 'TransformWrapper.__getstate__')
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Obtaining an instance of the builtin type 'dict' (line 1669)
        dict_157822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1669)
        # Adding element type (key, value) (line 1669)
        unicode_157823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 12), 'unicode', u'child')
        # Getting the type of 'self' (line 1670)
        self_157824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 21), 'self')
        # Obtaining the member '_child' of a type (line 1670)
        _child_157825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 21), self_157824, '_child')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1669, 15), dict_157822, (unicode_157823, _child_157825))
        # Adding element type (key, value) (line 1669)
        unicode_157826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 12), 'unicode', u'input_dims')
        # Getting the type of 'self' (line 1671)
        self_157827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 26), 'self')
        # Obtaining the member 'input_dims' of a type (line 1671)
        input_dims_157828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 26), self_157827, 'input_dims')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1669, 15), dict_157822, (unicode_157826, input_dims_157828))
        # Adding element type (key, value) (line 1669)
        unicode_157829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 12), 'unicode', u'output_dims')
        # Getting the type of 'self' (line 1672)
        self_157830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 27), 'self')
        # Obtaining the member 'output_dims' of a type (line 1672)
        output_dims_157831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 27), self_157830, 'output_dims')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1669, 15), dict_157822, (unicode_157829, output_dims_157831))
        # Adding element type (key, value) (line 1669)
        unicode_157832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 12), 'unicode', u'parents')
        
        # Call to dict(...): (line 1674)
        # Processing the call arguments (line 1674)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1674, 28, True)
        # Calculating comprehension expression
        
        # Call to iteritems(...): (line 1675)
        # Processing the call arguments (line 1675)
        # Getting the type of 'self' (line 1675)
        self_157841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 42), 'self', False)
        # Obtaining the member '_parents' of a type (line 1675)
        _parents_157842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 42), self_157841, '_parents')
        # Processing the call keyword arguments (line 1675)
        kwargs_157843 = {}
        # Getting the type of 'six' (line 1675)
        six_157839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 28), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 1675)
        iteritems_157840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 28), six_157839, 'iteritems')
        # Calling iteritems(args, kwargs) (line 1675)
        iteritems_call_result_157844 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 28), iteritems_157840, *[_parents_157842], **kwargs_157843)
        
        comprehension_157845 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 28), iteritems_call_result_157844)
        # Assigning a type to the variable 'k' (line 1674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 28), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 28), comprehension_157845))
        # Assigning a type to the variable 'v' (line 1674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 28), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 28), comprehension_157845))
        
        # Obtaining an instance of the builtin type 'tuple' (line 1674)
        tuple_157834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1674)
        # Adding element type (line 1674)
        # Getting the type of 'k' (line 1674)
        k_157835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 29), 'k', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 29), tuple_157834, k_157835)
        # Adding element type (line 1674)
        
        # Call to v(...): (line 1674)
        # Processing the call keyword arguments (line 1674)
        kwargs_157837 = {}
        # Getting the type of 'v' (line 1674)
        v_157836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 32), 'v', False)
        # Calling v(args, kwargs) (line 1674)
        v_call_result_157838 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 32), v_157836, *[], **kwargs_157837)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 29), tuple_157834, v_call_result_157838)
        
        list_157846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 28), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 28), list_157846, tuple_157834)
        # Processing the call keyword arguments (line 1674)
        kwargs_157847 = {}
        # Getting the type of 'dict' (line 1674)
        dict_157833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 23), 'dict', False)
        # Calling dict(args, kwargs) (line 1674)
        dict_call_result_157848 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 23), dict_157833, *[list_157846], **kwargs_157847)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1669, 15), dict_157822, (unicode_157832, dict_call_result_157848))
        
        # Assigning a type to the variable 'stypy_return_type' (line 1669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 8), 'stypy_return_type', dict_157822)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 1667)
        stypy_return_type_157849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157849)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_157849


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 1678, 4, False)
        # Assigning a type to the variable 'self' (line 1679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_function_name', 'TransformWrapper.__setstate__')
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['state'])
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper.__setstate__', ['state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Call to _init(...): (line 1680)
        # Processing the call arguments (line 1680)
        
        # Obtaining the type of the subscript
        unicode_157852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 25), 'unicode', u'child')
        # Getting the type of 'state' (line 1680)
        state_157853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 19), 'state', False)
        # Obtaining the member '__getitem__' of a type (line 1680)
        getitem___157854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 19), state_157853, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1680)
        subscript_call_result_157855 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 19), getitem___157854, unicode_157852)
        
        # Processing the call keyword arguments (line 1680)
        kwargs_157856 = {}
        # Getting the type of 'self' (line 1680)
        self_157850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 8), 'self', False)
        # Obtaining the member '_init' of a type (line 1680)
        _init_157851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 8), self_157850, '_init')
        # Calling _init(args, kwargs) (line 1680)
        _init_call_result_157857 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 8), _init_157851, *[subscript_call_result_157855], **kwargs_157856)
        
        
        # Assigning a Subscript to a Attribute (line 1682):
        
        # Assigning a Subscript to a Attribute (line 1682):
        
        # Obtaining the type of the subscript
        unicode_157858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1682, 32), 'unicode', u'input_dims')
        # Getting the type of 'state' (line 1682)
        state_157859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 26), 'state')
        # Obtaining the member '__getitem__' of a type (line 1682)
        getitem___157860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 26), state_157859, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1682)
        subscript_call_result_157861 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 26), getitem___157860, unicode_157858)
        
        # Getting the type of 'self' (line 1682)
        self_157862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 8), 'self')
        # Setting the type of the member 'input_dims' of a type (line 1682)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 8), self_157862, 'input_dims', subscript_call_result_157861)
        
        # Assigning a Subscript to a Attribute (line 1683):
        
        # Assigning a Subscript to a Attribute (line 1683):
        
        # Obtaining the type of the subscript
        unicode_157863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1683, 33), 'unicode', u'output_dims')
        # Getting the type of 'state' (line 1683)
        state_157864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 27), 'state')
        # Obtaining the member '__getitem__' of a type (line 1683)
        getitem___157865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 27), state_157864, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1683)
        subscript_call_result_157866 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 27), getitem___157865, unicode_157863)
        
        # Getting the type of 'self' (line 1683)
        self_157867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 8), 'self')
        # Setting the type of the member 'output_dims' of a type (line 1683)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 8), self_157867, 'output_dims', subscript_call_result_157866)
        
        # Assigning a Call to a Attribute (line 1686):
        
        # Assigning a Call to a Attribute (line 1686):
        
        # Call to dict(...): (line 1686)
        # Processing the call arguments (line 1686)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1686, 29, True)
        # Calculating comprehension expression
        
        # Call to iteritems(...): (line 1687)
        # Processing the call arguments (line 1687)
        
        # Obtaining the type of the subscript
        unicode_157881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 49), 'unicode', u'parents')
        # Getting the type of 'state' (line 1687)
        state_157882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 43), 'state', False)
        # Obtaining the member '__getitem__' of a type (line 1687)
        getitem___157883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 43), state_157882, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1687)
        subscript_call_result_157884 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 43), getitem___157883, unicode_157881)
        
        # Processing the call keyword arguments (line 1687)
        kwargs_157885 = {}
        # Getting the type of 'six' (line 1687)
        six_157879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 29), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 1687)
        iteritems_157880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 29), six_157879, 'iteritems')
        # Calling iteritems(args, kwargs) (line 1687)
        iteritems_call_result_157886 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 29), iteritems_157880, *[subscript_call_result_157884], **kwargs_157885)
        
        comprehension_157887 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 29), iteritems_call_result_157886)
        # Assigning a type to the variable 'k' (line 1686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 29), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 29), comprehension_157887))
        # Assigning a type to the variable 'v' (line 1686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 29), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 29), comprehension_157887))
        
        # Getting the type of 'v' (line 1687)
        v_157876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 64), 'v', False)
        # Getting the type of 'None' (line 1687)
        None_157877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 73), 'None', False)
        # Applying the binary operator 'isnot' (line 1687)
        result_is_not_157878 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 64), 'isnot', v_157876, None_157877)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1686)
        tuple_157869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1686)
        # Adding element type (line 1686)
        # Getting the type of 'k' (line 1686)
        k_157870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 30), 'k', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 30), tuple_157869, k_157870)
        # Adding element type (line 1686)
        
        # Call to ref(...): (line 1686)
        # Processing the call arguments (line 1686)
        # Getting the type of 'v' (line 1686)
        v_157873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 45), 'v', False)
        # Processing the call keyword arguments (line 1686)
        kwargs_157874 = {}
        # Getting the type of 'weakref' (line 1686)
        weakref_157871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 33), 'weakref', False)
        # Obtaining the member 'ref' of a type (line 1686)
        ref_157872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 33), weakref_157871, 'ref')
        # Calling ref(args, kwargs) (line 1686)
        ref_call_result_157875 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 33), ref_157872, *[v_157873], **kwargs_157874)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 30), tuple_157869, ref_call_result_157875)
        
        list_157888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 29), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 29), list_157888, tuple_157869)
        # Processing the call keyword arguments (line 1686)
        kwargs_157889 = {}
        # Getting the type of 'dict' (line 1686)
        dict_157868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 24), 'dict', False)
        # Calling dict(args, kwargs) (line 1686)
        dict_call_result_157890 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 24), dict_157868, *[list_157888], **kwargs_157889)
        
        # Getting the type of 'self' (line 1686)
        self_157891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 8), 'self')
        # Setting the type of the member '_parents' of a type (line 1686)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 8), self_157891, '_parents', dict_call_result_157890)
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 1678)
        stypy_return_type_157892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157892)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_157892


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 1689, 4, False)
        # Assigning a type to the variable 'self' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'TransformWrapper.stypy__repr__')
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_157893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 15), 'unicode', u'TransformWrapper(%r)')
        # Getting the type of 'self' (line 1690)
        self_157894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 40), 'self')
        # Obtaining the member '_child' of a type (line 1690)
        _child_157895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 40), self_157894, '_child')
        # Applying the binary operator '%' (line 1690)
        result_mod_157896 = python_operator(stypy.reporting.localization.Localization(__file__, 1690, 15), '%', unicode_157893, _child_157895)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'stypy_return_type', result_mod_157896)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 1689)
        stypy_return_type_157897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157897)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_157897


    @norecursion
    def frozen(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'frozen'
        module_type_store = module_type_store.open_function_context('frozen', 1692, 4, False)
        # Assigning a type to the variable 'self' (line 1693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper.frozen.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper.frozen.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper.frozen.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper.frozen.__dict__.__setitem__('stypy_function_name', 'TransformWrapper.frozen')
        TransformWrapper.frozen.__dict__.__setitem__('stypy_param_names_list', [])
        TransformWrapper.frozen.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper.frozen.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper.frozen.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper.frozen.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper.frozen.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper.frozen.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper.frozen', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'frozen', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'frozen(...)' code ##################

        
        # Call to frozen(...): (line 1693)
        # Processing the call keyword arguments (line 1693)
        kwargs_157901 = {}
        # Getting the type of 'self' (line 1693)
        self_157898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 15), 'self', False)
        # Obtaining the member '_child' of a type (line 1693)
        _child_157899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 15), self_157898, '_child')
        # Obtaining the member 'frozen' of a type (line 1693)
        frozen_157900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 15), _child_157899, 'frozen')
        # Calling frozen(args, kwargs) (line 1693)
        frozen_call_result_157902 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 15), frozen_157900, *[], **kwargs_157901)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 8), 'stypy_return_type', frozen_call_result_157902)
        
        # ################# End of 'frozen(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'frozen' in the type store
        # Getting the type of 'stypy_return_type' (line 1692)
        stypy_return_type_157903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157903)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'frozen'
        return stypy_return_type_157903

    
    # Assigning a Attribute to a Attribute (line 1694):

    @norecursion
    def _set(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set'
        module_type_store = module_type_store.open_function_context('_set', 1696, 4, False)
        # Assigning a type to the variable 'self' (line 1697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper._set.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper._set.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper._set.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper._set.__dict__.__setitem__('stypy_function_name', 'TransformWrapper._set')
        TransformWrapper._set.__dict__.__setitem__('stypy_param_names_list', ['child'])
        TransformWrapper._set.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper._set.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper._set.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper._set.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper._set.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper._set.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper._set', ['child'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set', localization, ['child'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1697):
        
        # Assigning a Name to a Attribute (line 1697):
        # Getting the type of 'child' (line 1697)
        child_157904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 22), 'child')
        # Getting the type of 'self' (line 1697)
        self_157905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 8), 'self')
        # Setting the type of the member '_child' of a type (line 1697)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1697, 8), self_157905, '_child', child_157904)
        
        # Assigning a Attribute to a Attribute (line 1699):
        
        # Assigning a Attribute to a Attribute (line 1699):
        # Getting the type of 'child' (line 1699)
        child_157906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 25), 'child')
        # Obtaining the member 'transform' of a type (line 1699)
        transform_157907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1699, 25), child_157906, 'transform')
        # Getting the type of 'self' (line 1699)
        self_157908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 8), 'self')
        # Setting the type of the member 'transform' of a type (line 1699)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1699, 8), self_157908, 'transform', transform_157907)
        
        # Assigning a Attribute to a Attribute (line 1700):
        
        # Assigning a Attribute to a Attribute (line 1700):
        # Getting the type of 'child' (line 1700)
        child_157909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 32), 'child')
        # Obtaining the member 'transform_affine' of a type (line 1700)
        transform_affine_157910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 32), child_157909, 'transform_affine')
        # Getting the type of 'self' (line 1700)
        self_157911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 8), 'self')
        # Setting the type of the member 'transform_affine' of a type (line 1700)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 8), self_157911, 'transform_affine', transform_affine_157910)
        
        # Assigning a Attribute to a Attribute (line 1701):
        
        # Assigning a Attribute to a Attribute (line 1701):
        # Getting the type of 'child' (line 1701)
        child_157912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 36), 'child')
        # Obtaining the member 'transform_non_affine' of a type (line 1701)
        transform_non_affine_157913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 36), child_157912, 'transform_non_affine')
        # Getting the type of 'self' (line 1701)
        self_157914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'self')
        # Setting the type of the member 'transform_non_affine' of a type (line 1701)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 8), self_157914, 'transform_non_affine', transform_non_affine_157913)
        
        # Assigning a Attribute to a Attribute (line 1702):
        
        # Assigning a Attribute to a Attribute (line 1702):
        # Getting the type of 'child' (line 1702)
        child_157915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 30), 'child')
        # Obtaining the member 'transform_path' of a type (line 1702)
        transform_path_157916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 30), child_157915, 'transform_path')
        # Getting the type of 'self' (line 1702)
        self_157917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 8), 'self')
        # Setting the type of the member 'transform_path' of a type (line 1702)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 8), self_157917, 'transform_path', transform_path_157916)
        
        # Assigning a Attribute to a Attribute (line 1703):
        
        # Assigning a Attribute to a Attribute (line 1703):
        # Getting the type of 'child' (line 1703)
        child_157918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 37), 'child')
        # Obtaining the member 'transform_path_affine' of a type (line 1703)
        transform_path_affine_157919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 37), child_157918, 'transform_path_affine')
        # Getting the type of 'self' (line 1703)
        self_157920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 8), 'self')
        # Setting the type of the member 'transform_path_affine' of a type (line 1703)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 8), self_157920, 'transform_path_affine', transform_path_affine_157919)
        
        # Assigning a Attribute to a Attribute (line 1704):
        
        # Assigning a Attribute to a Attribute (line 1704):
        # Getting the type of 'child' (line 1704)
        child_157921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 41), 'child')
        # Obtaining the member 'transform_path_non_affine' of a type (line 1704)
        transform_path_non_affine_157922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 41), child_157921, 'transform_path_non_affine')
        # Getting the type of 'self' (line 1704)
        self_157923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 8), 'self')
        # Setting the type of the member 'transform_path_non_affine' of a type (line 1704)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 8), self_157923, 'transform_path_non_affine', transform_path_non_affine_157922)
        
        # Assigning a Attribute to a Attribute (line 1705):
        
        # Assigning a Attribute to a Attribute (line 1705):
        # Getting the type of 'child' (line 1705)
        child_157924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 26), 'child')
        # Obtaining the member 'get_affine' of a type (line 1705)
        get_affine_157925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1705, 26), child_157924, 'get_affine')
        # Getting the type of 'self' (line 1705)
        self_157926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 8), 'self')
        # Setting the type of the member 'get_affine' of a type (line 1705)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1705, 8), self_157926, 'get_affine', get_affine_157925)
        
        # Assigning a Attribute to a Attribute (line 1706):
        
        # Assigning a Attribute to a Attribute (line 1706):
        # Getting the type of 'child' (line 1706)
        child_157927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 24), 'child')
        # Obtaining the member 'inverted' of a type (line 1706)
        inverted_157928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 24), child_157927, 'inverted')
        # Getting the type of 'self' (line 1706)
        self_157929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 8), 'self')
        # Setting the type of the member 'inverted' of a type (line 1706)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 8), self_157929, 'inverted', inverted_157928)
        
        # Assigning a Attribute to a Attribute (line 1707):
        
        # Assigning a Attribute to a Attribute (line 1707):
        # Getting the type of 'child' (line 1707)
        child_157930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 26), 'child')
        # Obtaining the member 'get_matrix' of a type (line 1707)
        get_matrix_157931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 26), child_157930, 'get_matrix')
        # Getting the type of 'self' (line 1707)
        self_157932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 8), 'self')
        # Setting the type of the member 'get_matrix' of a type (line 1707)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 8), self_157932, 'get_matrix', get_matrix_157931)
        
        # ################# End of '_set(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set' in the type store
        # Getting the type of 'stypy_return_type' (line 1696)
        stypy_return_type_157933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157933)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set'
        return stypy_return_type_157933


    @norecursion
    def set(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set'
        module_type_store = module_type_store.open_function_context('set', 1713, 4, False)
        # Assigning a type to the variable 'self' (line 1714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper.set.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper.set.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper.set.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper.set.__dict__.__setitem__('stypy_function_name', 'TransformWrapper.set')
        TransformWrapper.set.__dict__.__setitem__('stypy_param_names_list', ['child'])
        TransformWrapper.set.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper.set.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper.set.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper.set.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper.set.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper.set.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper.set', ['child'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set', localization, ['child'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set(...)' code ##################

        unicode_157934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, (-1)), 'unicode', u'\n        Replace the current child of this transform with another one.\n\n        The new child must have the same number of input and output\n        dimensions as the current child.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'child' (line 1720)
        child_157935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 12), 'child')
        # Obtaining the member 'input_dims' of a type (line 1720)
        input_dims_157936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 12), child_157935, 'input_dims')
        # Getting the type of 'self' (line 1720)
        self_157937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 32), 'self')
        # Obtaining the member 'input_dims' of a type (line 1720)
        input_dims_157938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 32), self_157937, 'input_dims')
        # Applying the binary operator '!=' (line 1720)
        result_ne_157939 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 12), '!=', input_dims_157936, input_dims_157938)
        
        
        # Getting the type of 'child' (line 1721)
        child_157940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 16), 'child')
        # Obtaining the member 'output_dims' of a type (line 1721)
        output_dims_157941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 16), child_157940, 'output_dims')
        # Getting the type of 'self' (line 1721)
        self_157942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 37), 'self')
        # Obtaining the member 'output_dims' of a type (line 1721)
        output_dims_157943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 37), self_157942, 'output_dims')
        # Applying the binary operator '!=' (line 1721)
        result_ne_157944 = python_operator(stypy.reporting.localization.Localization(__file__, 1721, 16), '!=', output_dims_157941, output_dims_157943)
        
        # Applying the binary operator 'or' (line 1720)
        result_or_keyword_157945 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 12), 'or', result_ne_157939, result_ne_157944)
        
        # Testing the type of an if condition (line 1720)
        if_condition_157946 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1720, 8), result_or_keyword_157945)
        # Assigning a type to the variable 'if_condition_157946' (line 1720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 8), 'if_condition_157946', if_condition_157946)
        # SSA begins for if statement (line 1720)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1722):
        
        # Assigning a Str to a Name (line 1722):
        unicode_157947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 19), 'unicode', u'The new child must have the same number of input and output dimensions as the current child.')
        # Assigning a type to the variable 'msg' (line 1722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 12), 'msg', unicode_157947)
        
        # Call to ValueError(...): (line 1724)
        # Processing the call arguments (line 1724)
        # Getting the type of 'msg' (line 1724)
        msg_157949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 29), 'msg', False)
        # Processing the call keyword arguments (line 1724)
        kwargs_157950 = {}
        # Getting the type of 'ValueError' (line 1724)
        ValueError_157948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1724)
        ValueError_call_result_157951 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 18), ValueError_157948, *[msg_157949], **kwargs_157950)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1724, 12), ValueError_call_result_157951, 'raise parameter', BaseException)
        # SSA join for if statement (line 1720)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_children(...): (line 1726)
        # Processing the call arguments (line 1726)
        # Getting the type of 'child' (line 1726)
        child_157954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 26), 'child', False)
        # Processing the call keyword arguments (line 1726)
        kwargs_157955 = {}
        # Getting the type of 'self' (line 1726)
        self_157952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 1726)
        set_children_157953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 8), self_157952, 'set_children')
        # Calling set_children(args, kwargs) (line 1726)
        set_children_call_result_157956 = invoke(stypy.reporting.localization.Localization(__file__, 1726, 8), set_children_157953, *[child_157954], **kwargs_157955)
        
        
        # Call to _set(...): (line 1727)
        # Processing the call arguments (line 1727)
        # Getting the type of 'child' (line 1727)
        child_157959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 18), 'child', False)
        # Processing the call keyword arguments (line 1727)
        kwargs_157960 = {}
        # Getting the type of 'self' (line 1727)
        self_157957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 8), 'self', False)
        # Obtaining the member '_set' of a type (line 1727)
        _set_157958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 8), self_157957, '_set')
        # Calling _set(args, kwargs) (line 1727)
        _set_call_result_157961 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 8), _set_157958, *[child_157959], **kwargs_157960)
        
        
        # Assigning a Num to a Attribute (line 1729):
        
        # Assigning a Num to a Attribute (line 1729):
        int_157962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1729, 24), 'int')
        # Getting the type of 'self' (line 1729)
        self_157963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 8), 'self')
        # Setting the type of the member '_invalid' of a type (line 1729)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1729, 8), self_157963, '_invalid', int_157962)
        
        # Call to invalidate(...): (line 1730)
        # Processing the call keyword arguments (line 1730)
        kwargs_157966 = {}
        # Getting the type of 'self' (line 1730)
        self_157964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 1730)
        invalidate_157965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 8), self_157964, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1730)
        invalidate_call_result_157967 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 8), invalidate_157965, *[], **kwargs_157966)
        
        
        # Assigning a Num to a Attribute (line 1731):
        
        # Assigning a Num to a Attribute (line 1731):
        int_157968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1731, 24), 'int')
        # Getting the type of 'self' (line 1731)
        self_157969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 8), 'self')
        # Setting the type of the member '_invalid' of a type (line 1731)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1731, 8), self_157969, '_invalid', int_157968)
        
        # ################# End of 'set(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set' in the type store
        # Getting the type of 'stypy_return_type' (line 1713)
        stypy_return_type_157970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157970)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set'
        return stypy_return_type_157970


    @norecursion
    def _get_is_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_is_affine'
        module_type_store = module_type_store.open_function_context('_get_is_affine', 1733, 4, False)
        # Assigning a type to the variable 'self' (line 1734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_function_name', 'TransformWrapper._get_is_affine')
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_param_names_list', [])
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper._get_is_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper._get_is_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_is_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_is_affine(...)' code ##################

        # Getting the type of 'self' (line 1734)
        self_157971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 15), 'self')
        # Obtaining the member '_child' of a type (line 1734)
        _child_157972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1734, 15), self_157971, '_child')
        # Obtaining the member 'is_affine' of a type (line 1734)
        is_affine_157973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1734, 15), _child_157972, 'is_affine')
        # Assigning a type to the variable 'stypy_return_type' (line 1734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 8), 'stypy_return_type', is_affine_157973)
        
        # ################# End of '_get_is_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_is_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1733)
        stypy_return_type_157974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157974)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_is_affine'
        return stypy_return_type_157974

    
    # Assigning a Call to a Name (line 1735):

    @norecursion
    def _get_is_separable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_is_separable'
        module_type_store = module_type_store.open_function_context('_get_is_separable', 1737, 4, False)
        # Assigning a type to the variable 'self' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_function_name', 'TransformWrapper._get_is_separable')
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_param_names_list', [])
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper._get_is_separable.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper._get_is_separable', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_is_separable', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_is_separable(...)' code ##################

        # Getting the type of 'self' (line 1738)
        self_157975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 15), 'self')
        # Obtaining the member '_child' of a type (line 1738)
        _child_157976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1738, 15), self_157975, '_child')
        # Obtaining the member 'is_separable' of a type (line 1738)
        is_separable_157977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1738, 15), _child_157976, 'is_separable')
        # Assigning a type to the variable 'stypy_return_type' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 8), 'stypy_return_type', is_separable_157977)
        
        # ################# End of '_get_is_separable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_is_separable' in the type store
        # Getting the type of 'stypy_return_type' (line 1737)
        stypy_return_type_157978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157978)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_is_separable'
        return stypy_return_type_157978

    
    # Assigning a Call to a Name (line 1739):

    @norecursion
    def _get_has_inverse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_has_inverse'
        module_type_store = module_type_store.open_function_context('_get_has_inverse', 1741, 4, False)
        # Assigning a type to the variable 'self' (line 1742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_localization', localization)
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_function_name', 'TransformWrapper._get_has_inverse')
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_param_names_list', [])
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformWrapper._get_has_inverse.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformWrapper._get_has_inverse', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_has_inverse', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_has_inverse(...)' code ##################

        # Getting the type of 'self' (line 1742)
        self_157979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 15), 'self')
        # Obtaining the member '_child' of a type (line 1742)
        _child_157980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1742, 15), self_157979, '_child')
        # Obtaining the member 'has_inverse' of a type (line 1742)
        has_inverse_157981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1742, 15), _child_157980, 'has_inverse')
        # Assigning a type to the variable 'stypy_return_type' (line 1742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 8), 'stypy_return_type', has_inverse_157981)
        
        # ################# End of '_get_has_inverse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_has_inverse' in the type store
        # Getting the type of 'stypy_return_type' (line 1741)
        stypy_return_type_157982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_157982)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_has_inverse'
        return stypy_return_type_157982

    
    # Assigning a Call to a Name (line 1743):

# Assigning a type to the variable 'TransformWrapper' (line 1622)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 0), 'TransformWrapper', TransformWrapper)

# Assigning a Name to a Name (line 1636):
# Getting the type of 'True' (line 1636)
True_157983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 19), 'True')
# Getting the type of 'TransformWrapper'
TransformWrapper_157984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformWrapper')
# Setting the type of the member 'pass_through' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformWrapper_157984, 'pass_through', True_157983)

# Assigning a Name to a Name (line 1636):

# Getting the type of 'DEBUG' (line 1660)
DEBUG_157985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 7), 'DEBUG')
# Testing the type of an if condition (line 1660)
if_condition_157986 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1660, 4), DEBUG_157985)
# Assigning a type to the variable 'if_condition_157986' (line 1660)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1660, 4), 'if_condition_157986', if_condition_157986)
# SSA begins for if statement (line 1660)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def stypy__str__(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '__str__'
    module_type_store = module_type_store.open_function_context('__str__', 1662, 8, False)
    
    # Passed parameters checking function
    stypy__str__.stypy_localization = localization
    stypy__str__.stypy_type_of_self = None
    stypy__str__.stypy_type_store = module_type_store
    stypy__str__.stypy_function_name = 'stypy__str__'
    stypy__str__.stypy_param_names_list = ['self']
    stypy__str__.stypy_varargs_param_name = None
    stypy__str__.stypy_kwargs_param_name = None
    stypy__str__.stypy_call_defaults = defaults
    stypy__str__.stypy_call_varargs = varargs
    stypy__str__.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'stypy__str__', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '__str__', localization, ['self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '__str__(...)' code ##################

    
    # Call to str(...): (line 1663)
    # Processing the call arguments (line 1663)
    # Getting the type of 'self' (line 1663)
    self_157988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 23), 'self', False)
    # Obtaining the member '_child' of a type (line 1663)
    _child_157989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 23), self_157988, '_child')
    # Processing the call keyword arguments (line 1663)
    kwargs_157990 = {}
    # Getting the type of 'str' (line 1663)
    str_157987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 19), 'str', False)
    # Calling str(args, kwargs) (line 1663)
    str_call_result_157991 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 19), str_157987, *[_child_157989], **kwargs_157990)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1663, 12), 'stypy_return_type', str_call_result_157991)
    
    # ################# End of '__str__(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '__str__' in the type store
    # Getting the type of 'stypy_return_type' (line 1662)
    stypy_return_type_157992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_157992)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '__str__'
    return stypy_return_type_157992

# Assigning a type to the variable '__str__' (line 1662)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 8), '__str__', stypy__str__)
# SSA join for if statement (line 1660)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Attribute to a Attribute (line 1694):
# Getting the type of 'Transform' (line 1694)
Transform_157993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 21), 'Transform')
# Obtaining the member 'frozen' of a type (line 1694)
frozen_157994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 21), Transform_157993, 'frozen')
# Obtaining the member '__doc__' of a type (line 1694)
doc___157995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 21), frozen_157994, '__doc__')
# Getting the type of 'TransformWrapper'
TransformWrapper_157996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformWrapper')
# Obtaining the member 'frozen' of a type
frozen_157997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformWrapper_157996, 'frozen')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), frozen_157997, '__doc__', doc___157995)

# Assigning a Call to a Name (line 1735):

# Call to property(...): (line 1735)
# Processing the call arguments (line 1735)
# Getting the type of 'TransformWrapper'
TransformWrapper_157999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformWrapper', False)
# Obtaining the member '_get_is_affine' of a type
_get_is_affine_158000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformWrapper_157999, '_get_is_affine')
# Processing the call keyword arguments (line 1735)
kwargs_158001 = {}
# Getting the type of 'property' (line 1735)
property_157998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 16), 'property', False)
# Calling property(args, kwargs) (line 1735)
property_call_result_158002 = invoke(stypy.reporting.localization.Localization(__file__, 1735, 16), property_157998, *[_get_is_affine_158000], **kwargs_158001)

# Getting the type of 'TransformWrapper'
TransformWrapper_158003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformWrapper')
# Setting the type of the member 'is_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformWrapper_158003, 'is_affine', property_call_result_158002)

# Assigning a Call to a Name (line 1739):

# Call to property(...): (line 1739)
# Processing the call arguments (line 1739)
# Getting the type of 'TransformWrapper'
TransformWrapper_158005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformWrapper', False)
# Obtaining the member '_get_is_separable' of a type
_get_is_separable_158006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformWrapper_158005, '_get_is_separable')
# Processing the call keyword arguments (line 1739)
kwargs_158007 = {}
# Getting the type of 'property' (line 1739)
property_158004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 19), 'property', False)
# Calling property(args, kwargs) (line 1739)
property_call_result_158008 = invoke(stypy.reporting.localization.Localization(__file__, 1739, 19), property_158004, *[_get_is_separable_158006], **kwargs_158007)

# Getting the type of 'TransformWrapper'
TransformWrapper_158009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformWrapper')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformWrapper_158009, 'is_separable', property_call_result_158008)

# Assigning a Call to a Name (line 1743):

# Call to property(...): (line 1743)
# Processing the call arguments (line 1743)
# Getting the type of 'TransformWrapper'
TransformWrapper_158011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformWrapper', False)
# Obtaining the member '_get_has_inverse' of a type
_get_has_inverse_158012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformWrapper_158011, '_get_has_inverse')
# Processing the call keyword arguments (line 1743)
kwargs_158013 = {}
# Getting the type of 'property' (line 1743)
property_158010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 18), 'property', False)
# Calling property(args, kwargs) (line 1743)
property_call_result_158014 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 18), property_158010, *[_get_has_inverse_158012], **kwargs_158013)

# Getting the type of 'TransformWrapper'
TransformWrapper_158015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TransformWrapper')
# Setting the type of the member 'has_inverse' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TransformWrapper_158015, 'has_inverse', property_call_result_158014)
# Declaration of the 'AffineBase' class
# Getting the type of 'Transform' (line 1746)
Transform_158016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 17), 'Transform')

class AffineBase(Transform_158016, ):
    unicode_158017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1750, (-1)), 'unicode', u'\n    The base class of all affine transformations of any number of\n    dimensions.\n    ')
    
    # Assigning a Name to a Name (line 1751):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1753, 4, False)
        # Assigning a type to the variable 'self' (line 1754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AffineBase.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1754)
        # Processing the call arguments (line 1754)
        # Getting the type of 'self' (line 1754)
        self_158020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 27), 'self', False)
        # Getting the type of 'args' (line 1754)
        args_158021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 34), 'args', False)
        # Processing the call keyword arguments (line 1754)
        # Getting the type of 'kwargs' (line 1754)
        kwargs_158022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 42), 'kwargs', False)
        kwargs_158023 = {'kwargs_158022': kwargs_158022}
        # Getting the type of 'Transform' (line 1754)
        Transform_158018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 8), 'Transform', False)
        # Obtaining the member '__init__' of a type (line 1754)
        init___158019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1754, 8), Transform_158018, '__init__')
        # Calling __init__(args, kwargs) (line 1754)
        init___call_result_158024 = invoke(stypy.reporting.localization.Localization(__file__, 1754, 8), init___158019, *[self_158020, args_158021], **kwargs_158023)
        
        
        # Assigning a Name to a Attribute (line 1755):
        
        # Assigning a Name to a Attribute (line 1755):
        # Getting the type of 'None' (line 1755)
        None_158025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 25), 'None')
        # Getting the type of 'self' (line 1755)
        self_158026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 8), 'self')
        # Setting the type of the member '_inverted' of a type (line 1755)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 8), self_158026, '_inverted', None_158025)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __array__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__array__'
        module_type_store = module_type_store.open_function_context('__array__', 1757, 4, False)
        # Assigning a type to the variable 'self' (line 1758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1758, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AffineBase.__array__.__dict__.__setitem__('stypy_localization', localization)
        AffineBase.__array__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AffineBase.__array__.__dict__.__setitem__('stypy_type_store', module_type_store)
        AffineBase.__array__.__dict__.__setitem__('stypy_function_name', 'AffineBase.__array__')
        AffineBase.__array__.__dict__.__setitem__('stypy_param_names_list', [])
        AffineBase.__array__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        AffineBase.__array__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        AffineBase.__array__.__dict__.__setitem__('stypy_call_defaults', defaults)
        AffineBase.__array__.__dict__.__setitem__('stypy_call_varargs', varargs)
        AffineBase.__array__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AffineBase.__array__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AffineBase.__array__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__array__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__array__(...)' code ##################

        
        # Call to get_matrix(...): (line 1759)
        # Processing the call keyword arguments (line 1759)
        kwargs_158029 = {}
        # Getting the type of 'self' (line 1759)
        self_158027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 15), 'self', False)
        # Obtaining the member 'get_matrix' of a type (line 1759)
        get_matrix_158028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 15), self_158027, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1759)
        get_matrix_call_result_158030 = invoke(stypy.reporting.localization.Localization(__file__, 1759, 15), get_matrix_158028, *[], **kwargs_158029)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1759, 8), 'stypy_return_type', get_matrix_call_result_158030)
        
        # ################# End of '__array__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__array__' in the type store
        # Getting the type of 'stypy_return_type' (line 1757)
        stypy_return_type_158031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158031)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__array__'
        return stypy_return_type_158031


    @staticmethod
    @norecursion
    def _concat(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_concat'
        module_type_store = module_type_store.open_function_context('_concat', 1761, 4, False)
        
        # Passed parameters checking function
        AffineBase._concat.__dict__.__setitem__('stypy_localization', localization)
        AffineBase._concat.__dict__.__setitem__('stypy_type_of_self', None)
        AffineBase._concat.__dict__.__setitem__('stypy_type_store', module_type_store)
        AffineBase._concat.__dict__.__setitem__('stypy_function_name', '_concat')
        AffineBase._concat.__dict__.__setitem__('stypy_param_names_list', ['a', 'b'])
        AffineBase._concat.__dict__.__setitem__('stypy_varargs_param_name', None)
        AffineBase._concat.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AffineBase._concat.__dict__.__setitem__('stypy_call_defaults', defaults)
        AffineBase._concat.__dict__.__setitem__('stypy_call_varargs', varargs)
        AffineBase._concat.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AffineBase._concat.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, '_concat', ['a', 'b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_concat', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_concat(...)' code ##################

        unicode_158032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, (-1)), 'unicode', u'\n        Concatenates two transformation matrices (represented as numpy\n        arrays) together.\n        ')
        
        # Call to dot(...): (line 1767)
        # Processing the call arguments (line 1767)
        # Getting the type of 'b' (line 1767)
        b_158035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 22), 'b', False)
        # Getting the type of 'a' (line 1767)
        a_158036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 25), 'a', False)
        # Processing the call keyword arguments (line 1767)
        kwargs_158037 = {}
        # Getting the type of 'np' (line 1767)
        np_158033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 15), 'np', False)
        # Obtaining the member 'dot' of a type (line 1767)
        dot_158034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 15), np_158033, 'dot')
        # Calling dot(args, kwargs) (line 1767)
        dot_call_result_158038 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 15), dot_158034, *[b_158035, a_158036], **kwargs_158037)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 8), 'stypy_return_type', dot_call_result_158038)
        
        # ################# End of '_concat(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_concat' in the type store
        # Getting the type of 'stypy_return_type' (line 1761)
        stypy_return_type_158039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158039)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_concat'
        return stypy_return_type_158039


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 1769, 4, False)
        # Assigning a type to the variable 'self' (line 1770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'AffineBase.stypy__eq__')
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AffineBase.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AffineBase.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        # Call to getattr(...): (line 1770)
        # Processing the call arguments (line 1770)
        # Getting the type of 'other' (line 1770)
        other_158041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 19), 'other', False)
        unicode_158042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1770, 26), 'unicode', u'is_affine')
        # Getting the type of 'False' (line 1770)
        False_158043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 39), 'False', False)
        # Processing the call keyword arguments (line 1770)
        kwargs_158044 = {}
        # Getting the type of 'getattr' (line 1770)
        getattr_158040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 11), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1770)
        getattr_call_result_158045 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 11), getattr_158040, *[other_158041, unicode_158042, False_158043], **kwargs_158044)
        
        # Testing the type of an if condition (line 1770)
        if_condition_158046 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1770, 8), getattr_call_result_158045)
        # Assigning a type to the variable 'if_condition_158046' (line 1770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 8), 'if_condition_158046', if_condition_158046)
        # SSA begins for if statement (line 1770)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to all(...): (line 1771)
        # Processing the call arguments (line 1771)
        
        
        # Call to get_matrix(...): (line 1771)
        # Processing the call keyword arguments (line 1771)
        kwargs_158051 = {}
        # Getting the type of 'self' (line 1771)
        self_158049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 26), 'self', False)
        # Obtaining the member 'get_matrix' of a type (line 1771)
        get_matrix_158050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 26), self_158049, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1771)
        get_matrix_call_result_158052 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 26), get_matrix_158050, *[], **kwargs_158051)
        
        
        # Call to get_matrix(...): (line 1771)
        # Processing the call keyword arguments (line 1771)
        kwargs_158055 = {}
        # Getting the type of 'other' (line 1771)
        other_158053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 47), 'other', False)
        # Obtaining the member 'get_matrix' of a type (line 1771)
        get_matrix_158054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 47), other_158053, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1771)
        get_matrix_call_result_158056 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 47), get_matrix_158054, *[], **kwargs_158055)
        
        # Applying the binary operator '==' (line 1771)
        result_eq_158057 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 26), '==', get_matrix_call_result_158052, get_matrix_call_result_158056)
        
        # Processing the call keyword arguments (line 1771)
        kwargs_158058 = {}
        # Getting the type of 'np' (line 1771)
        np_158047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 19), 'np', False)
        # Obtaining the member 'all' of a type (line 1771)
        all_158048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 19), np_158047, 'all')
        # Calling all(args, kwargs) (line 1771)
        all_call_result_158059 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 19), all_158048, *[result_eq_158057], **kwargs_158058)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 12), 'stypy_return_type', all_call_result_158059)
        # SSA join for if statement (line 1770)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'NotImplemented' (line 1772)
        NotImplemented_158060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 15), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 1772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1772, 8), 'stypy_return_type', NotImplemented_158060)
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 1769)
        stypy_return_type_158061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158061)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_158061


    @norecursion
    def transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform'
        module_type_store = module_type_store.open_function_context('transform', 1774, 4, False)
        # Assigning a type to the variable 'self' (line 1775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AffineBase.transform.__dict__.__setitem__('stypy_localization', localization)
        AffineBase.transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AffineBase.transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        AffineBase.transform.__dict__.__setitem__('stypy_function_name', 'AffineBase.transform')
        AffineBase.transform.__dict__.__setitem__('stypy_param_names_list', ['values'])
        AffineBase.transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        AffineBase.transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AffineBase.transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        AffineBase.transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        AffineBase.transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AffineBase.transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AffineBase.transform', ['values'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform', localization, ['values'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform(...)' code ##################

        
        # Call to transform_affine(...): (line 1775)
        # Processing the call arguments (line 1775)
        # Getting the type of 'values' (line 1775)
        values_158064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 37), 'values', False)
        # Processing the call keyword arguments (line 1775)
        kwargs_158065 = {}
        # Getting the type of 'self' (line 1775)
        self_158062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 15), 'self', False)
        # Obtaining the member 'transform_affine' of a type (line 1775)
        transform_affine_158063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1775, 15), self_158062, 'transform_affine')
        # Calling transform_affine(args, kwargs) (line 1775)
        transform_affine_call_result_158066 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 15), transform_affine_158063, *[values_158064], **kwargs_158065)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 8), 'stypy_return_type', transform_affine_call_result_158066)
        
        # ################# End of 'transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1774)
        stypy_return_type_158067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158067)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform'
        return stypy_return_type_158067

    
    # Assigning a Attribute to a Attribute (line 1776):

    @norecursion
    def transform_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_affine'
        module_type_store = module_type_store.open_function_context('transform_affine', 1778, 4, False)
        # Assigning a type to the variable 'self' (line 1779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AffineBase.transform_affine.__dict__.__setitem__('stypy_localization', localization)
        AffineBase.transform_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AffineBase.transform_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        AffineBase.transform_affine.__dict__.__setitem__('stypy_function_name', 'AffineBase.transform_affine')
        AffineBase.transform_affine.__dict__.__setitem__('stypy_param_names_list', ['values'])
        AffineBase.transform_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        AffineBase.transform_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AffineBase.transform_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        AffineBase.transform_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        AffineBase.transform_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AffineBase.transform_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AffineBase.transform_affine', ['values'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_affine', localization, ['values'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_affine(...)' code ##################

        
        # Call to NotImplementedError(...): (line 1779)
        # Processing the call arguments (line 1779)
        unicode_158069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 34), 'unicode', u'Affine subclasses should override this method.')
        # Processing the call keyword arguments (line 1779)
        kwargs_158070 = {}
        # Getting the type of 'NotImplementedError' (line 1779)
        NotImplementedError_158068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1779)
        NotImplementedError_call_result_158071 = invoke(stypy.reporting.localization.Localization(__file__, 1779, 14), NotImplementedError_158068, *[unicode_158069], **kwargs_158070)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1779, 8), NotImplementedError_call_result_158071, 'raise parameter', BaseException)
        
        # ################# End of 'transform_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1778)
        stypy_return_type_158072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158072)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_affine'
        return stypy_return_type_158072

    
    # Assigning a Attribute to a Attribute (line 1781):

    @norecursion
    def transform_non_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_non_affine'
        module_type_store = module_type_store.open_function_context('transform_non_affine', 1783, 4, False)
        # Assigning a type to the variable 'self' (line 1784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_localization', localization)
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_function_name', 'AffineBase.transform_non_affine')
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_param_names_list', ['points'])
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AffineBase.transform_non_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AffineBase.transform_non_affine', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_non_affine', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_non_affine(...)' code ##################

        # Getting the type of 'points' (line 1784)
        points_158073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 15), 'points')
        # Assigning a type to the variable 'stypy_return_type' (line 1784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 8), 'stypy_return_type', points_158073)
        
        # ################# End of 'transform_non_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_non_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1783)
        stypy_return_type_158074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158074)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_non_affine'
        return stypy_return_type_158074

    
    # Assigning a Attribute to a Attribute (line 1785):

    @norecursion
    def transform_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_path'
        module_type_store = module_type_store.open_function_context('transform_path', 1787, 4, False)
        # Assigning a type to the variable 'self' (line 1788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AffineBase.transform_path.__dict__.__setitem__('stypy_localization', localization)
        AffineBase.transform_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AffineBase.transform_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        AffineBase.transform_path.__dict__.__setitem__('stypy_function_name', 'AffineBase.transform_path')
        AffineBase.transform_path.__dict__.__setitem__('stypy_param_names_list', ['path'])
        AffineBase.transform_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        AffineBase.transform_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AffineBase.transform_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        AffineBase.transform_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        AffineBase.transform_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AffineBase.transform_path.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AffineBase.transform_path', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_path', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_path(...)' code ##################

        
        # Call to transform_path_affine(...): (line 1788)
        # Processing the call arguments (line 1788)
        # Getting the type of 'path' (line 1788)
        path_158077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 42), 'path', False)
        # Processing the call keyword arguments (line 1788)
        kwargs_158078 = {}
        # Getting the type of 'self' (line 1788)
        self_158075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 15), 'self', False)
        # Obtaining the member 'transform_path_affine' of a type (line 1788)
        transform_path_affine_158076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 15), self_158075, 'transform_path_affine')
        # Calling transform_path_affine(args, kwargs) (line 1788)
        transform_path_affine_call_result_158079 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 15), transform_path_affine_158076, *[path_158077], **kwargs_158078)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 8), 'stypy_return_type', transform_path_affine_call_result_158079)
        
        # ################# End of 'transform_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_path' in the type store
        # Getting the type of 'stypy_return_type' (line 1787)
        stypy_return_type_158080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158080)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_path'
        return stypy_return_type_158080

    
    # Assigning a Attribute to a Attribute (line 1789):

    @norecursion
    def transform_path_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_path_affine'
        module_type_store = module_type_store.open_function_context('transform_path_affine', 1791, 4, False)
        # Assigning a type to the variable 'self' (line 1792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_localization', localization)
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_function_name', 'AffineBase.transform_path_affine')
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_param_names_list', ['path'])
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AffineBase.transform_path_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AffineBase.transform_path_affine', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_path_affine', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_path_affine(...)' code ##################

        
        # Call to Path(...): (line 1792)
        # Processing the call arguments (line 1792)
        
        # Call to transform_affine(...): (line 1792)
        # Processing the call arguments (line 1792)
        # Getting the type of 'path' (line 1792)
        path_158084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 42), 'path', False)
        # Obtaining the member 'vertices' of a type (line 1792)
        vertices_158085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 42), path_158084, 'vertices')
        # Processing the call keyword arguments (line 1792)
        kwargs_158086 = {}
        # Getting the type of 'self' (line 1792)
        self_158082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 20), 'self', False)
        # Obtaining the member 'transform_affine' of a type (line 1792)
        transform_affine_158083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 20), self_158082, 'transform_affine')
        # Calling transform_affine(args, kwargs) (line 1792)
        transform_affine_call_result_158087 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 20), transform_affine_158083, *[vertices_158085], **kwargs_158086)
        
        # Getting the type of 'path' (line 1793)
        path_158088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 20), 'path', False)
        # Obtaining the member 'codes' of a type (line 1793)
        codes_158089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 20), path_158088, 'codes')
        # Getting the type of 'path' (line 1793)
        path_158090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 32), 'path', False)
        # Obtaining the member '_interpolation_steps' of a type (line 1793)
        _interpolation_steps_158091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 32), path_158090, '_interpolation_steps')
        # Processing the call keyword arguments (line 1792)
        kwargs_158092 = {}
        # Getting the type of 'Path' (line 1792)
        Path_158081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 15), 'Path', False)
        # Calling Path(args, kwargs) (line 1792)
        Path_call_result_158093 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 15), Path_158081, *[transform_affine_call_result_158087, codes_158089, _interpolation_steps_158091], **kwargs_158092)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 8), 'stypy_return_type', Path_call_result_158093)
        
        # ################# End of 'transform_path_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_path_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1791)
        stypy_return_type_158094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158094)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_path_affine'
        return stypy_return_type_158094

    
    # Assigning a Attribute to a Attribute (line 1794):

    @norecursion
    def transform_path_non_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_path_non_affine'
        module_type_store = module_type_store.open_function_context('transform_path_non_affine', 1796, 4, False)
        # Assigning a type to the variable 'self' (line 1797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_localization', localization)
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_function_name', 'AffineBase.transform_path_non_affine')
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_param_names_list', ['path'])
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AffineBase.transform_path_non_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AffineBase.transform_path_non_affine', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_path_non_affine', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_path_non_affine(...)' code ##################

        # Getting the type of 'path' (line 1797)
        path_158095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 15), 'path')
        # Assigning a type to the variable 'stypy_return_type' (line 1797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 8), 'stypy_return_type', path_158095)
        
        # ################# End of 'transform_path_non_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_path_non_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1796)
        stypy_return_type_158096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158096)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_path_non_affine'
        return stypy_return_type_158096

    
    # Assigning a Attribute to a Attribute (line 1798):

    @norecursion
    def get_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_affine'
        module_type_store = module_type_store.open_function_context('get_affine', 1800, 4, False)
        # Assigning a type to the variable 'self' (line 1801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AffineBase.get_affine.__dict__.__setitem__('stypy_localization', localization)
        AffineBase.get_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AffineBase.get_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        AffineBase.get_affine.__dict__.__setitem__('stypy_function_name', 'AffineBase.get_affine')
        AffineBase.get_affine.__dict__.__setitem__('stypy_param_names_list', [])
        AffineBase.get_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        AffineBase.get_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AffineBase.get_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        AffineBase.get_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        AffineBase.get_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AffineBase.get_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AffineBase.get_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_affine(...)' code ##################

        # Getting the type of 'self' (line 1801)
        self_158097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 1801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 8), 'stypy_return_type', self_158097)
        
        # ################# End of 'get_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1800)
        stypy_return_type_158098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158098)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_affine'
        return stypy_return_type_158098

    
    # Assigning a Attribute to a Attribute (line 1802):

# Assigning a type to the variable 'AffineBase' (line 1746)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 0), 'AffineBase', AffineBase)

# Assigning a Name to a Name (line 1751):
# Getting the type of 'True' (line 1751)
True_158099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 16), 'True')
# Getting the type of 'AffineBase'
AffineBase_158100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AffineBase')
# Setting the type of the member 'is_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AffineBase_158100, 'is_affine', True_158099)

# Assigning a Attribute to a Attribute (line 1776):
# Getting the type of 'Transform' (line 1776)
Transform_158101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 24), 'Transform')
# Obtaining the member 'transform' of a type (line 1776)
transform_158102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 24), Transform_158101, 'transform')
# Obtaining the member '__doc__' of a type (line 1776)
doc___158103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 24), transform_158102, '__doc__')
# Getting the type of 'AffineBase'
AffineBase_158104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AffineBase')
# Obtaining the member 'transform' of a type
transform_158105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AffineBase_158104, 'transform')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_158105, '__doc__', doc___158103)

# Assigning a Attribute to a Attribute (line 1781):
# Getting the type of 'Transform' (line 1781)
Transform_158106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 31), 'Transform')
# Obtaining the member 'transform_affine' of a type (line 1781)
transform_affine_158107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 31), Transform_158106, 'transform_affine')
# Obtaining the member '__doc__' of a type (line 1781)
doc___158108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 31), transform_affine_158107, '__doc__')
# Getting the type of 'AffineBase'
AffineBase_158109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AffineBase')
# Obtaining the member 'transform_affine' of a type
transform_affine_158110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AffineBase_158109, 'transform_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_affine_158110, '__doc__', doc___158108)

# Assigning a Attribute to a Attribute (line 1785):
# Getting the type of 'Transform' (line 1785)
Transform_158111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 35), 'Transform')
# Obtaining the member 'transform_non_affine' of a type (line 1785)
transform_non_affine_158112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1785, 35), Transform_158111, 'transform_non_affine')
# Obtaining the member '__doc__' of a type (line 1785)
doc___158113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1785, 35), transform_non_affine_158112, '__doc__')
# Getting the type of 'AffineBase'
AffineBase_158114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AffineBase')
# Obtaining the member 'transform_non_affine' of a type
transform_non_affine_158115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AffineBase_158114, 'transform_non_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_non_affine_158115, '__doc__', doc___158113)

# Assigning a Attribute to a Attribute (line 1789):
# Getting the type of 'Transform' (line 1789)
Transform_158116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 29), 'Transform')
# Obtaining the member 'transform_path' of a type (line 1789)
transform_path_158117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 29), Transform_158116, 'transform_path')
# Obtaining the member '__doc__' of a type (line 1789)
doc___158118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 29), transform_path_158117, '__doc__')
# Getting the type of 'AffineBase'
AffineBase_158119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AffineBase')
# Obtaining the member 'transform_path' of a type
transform_path_158120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AffineBase_158119, 'transform_path')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_path_158120, '__doc__', doc___158118)

# Assigning a Attribute to a Attribute (line 1794):
# Getting the type of 'Transform' (line 1794)
Transform_158121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 36), 'Transform')
# Obtaining the member 'transform_path_affine' of a type (line 1794)
transform_path_affine_158122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 36), Transform_158121, 'transform_path_affine')
# Obtaining the member '__doc__' of a type (line 1794)
doc___158123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 36), transform_path_affine_158122, '__doc__')
# Getting the type of 'AffineBase'
AffineBase_158124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AffineBase')
# Obtaining the member 'transform_path_affine' of a type
transform_path_affine_158125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AffineBase_158124, 'transform_path_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_path_affine_158125, '__doc__', doc___158123)

# Assigning a Attribute to a Attribute (line 1798):
# Getting the type of 'Transform' (line 1798)
Transform_158126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 40), 'Transform')
# Obtaining the member 'transform_path_non_affine' of a type (line 1798)
transform_path_non_affine_158127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 40), Transform_158126, 'transform_path_non_affine')
# Obtaining the member '__doc__' of a type (line 1798)
doc___158128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 40), transform_path_non_affine_158127, '__doc__')
# Getting the type of 'AffineBase'
AffineBase_158129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AffineBase')
# Obtaining the member 'transform_path_non_affine' of a type
transform_path_non_affine_158130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AffineBase_158129, 'transform_path_non_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_path_non_affine_158130, '__doc__', doc___158128)

# Assigning a Attribute to a Attribute (line 1802):
# Getting the type of 'Transform' (line 1802)
Transform_158131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 25), 'Transform')
# Obtaining the member 'get_affine' of a type (line 1802)
get_affine_158132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 25), Transform_158131, 'get_affine')
# Obtaining the member '__doc__' of a type (line 1802)
doc___158133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 25), get_affine_158132, '__doc__')
# Getting the type of 'AffineBase'
AffineBase_158134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AffineBase')
# Obtaining the member 'get_affine' of a type
get_affine_158135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AffineBase_158134, 'get_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_affine_158135, '__doc__', doc___158133)
# Declaration of the 'Affine2DBase' class
# Getting the type of 'AffineBase' (line 1805)
AffineBase_158136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 19), 'AffineBase')

class Affine2DBase(AffineBase_158136, ):
    unicode_158137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1820, (-1)), 'unicode', u'\n    The base class of all 2D affine transformations.\n\n    2D affine transformations are performed using a 3x3 numpy array::\n\n        a c e\n        b d f\n        0 0 1\n\n    This class provides the read-only interface.  For a mutable 2D\n    affine transformation, use :class:`Affine2D`.\n\n    Subclasses of this class will generally only need to override a\n    constructor and :meth:`get_matrix` that generates a custom 3x3 matrix.\n    ')
    
    # Assigning a Name to a Name (line 1821):
    
    # Assigning a Num to a Name (line 1823):
    
    # Assigning a Num to a Name (line 1824):

    @norecursion
    def frozen(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'frozen'
        module_type_store = module_type_store.open_function_context('frozen', 1826, 4, False)
        # Assigning a type to the variable 'self' (line 1827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2DBase.frozen.__dict__.__setitem__('stypy_localization', localization)
        Affine2DBase.frozen.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2DBase.frozen.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2DBase.frozen.__dict__.__setitem__('stypy_function_name', 'Affine2DBase.frozen')
        Affine2DBase.frozen.__dict__.__setitem__('stypy_param_names_list', [])
        Affine2DBase.frozen.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2DBase.frozen.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2DBase.frozen.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2DBase.frozen.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2DBase.frozen.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2DBase.frozen.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2DBase.frozen', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'frozen', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'frozen(...)' code ##################

        
        # Call to Affine2D(...): (line 1827)
        # Processing the call arguments (line 1827)
        
        # Call to copy(...): (line 1827)
        # Processing the call keyword arguments (line 1827)
        kwargs_158144 = {}
        
        # Call to get_matrix(...): (line 1827)
        # Processing the call keyword arguments (line 1827)
        kwargs_158141 = {}
        # Getting the type of 'self' (line 1827)
        self_158139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 24), 'self', False)
        # Obtaining the member 'get_matrix' of a type (line 1827)
        get_matrix_158140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 24), self_158139, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1827)
        get_matrix_call_result_158142 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 24), get_matrix_158140, *[], **kwargs_158141)
        
        # Obtaining the member 'copy' of a type (line 1827)
        copy_158143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 24), get_matrix_call_result_158142, 'copy')
        # Calling copy(args, kwargs) (line 1827)
        copy_call_result_158145 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 24), copy_158143, *[], **kwargs_158144)
        
        # Processing the call keyword arguments (line 1827)
        kwargs_158146 = {}
        # Getting the type of 'Affine2D' (line 1827)
        Affine2D_158138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 15), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 1827)
        Affine2D_call_result_158147 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 15), Affine2D_158138, *[copy_call_result_158145], **kwargs_158146)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 8), 'stypy_return_type', Affine2D_call_result_158147)
        
        # ################# End of 'frozen(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'frozen' in the type store
        # Getting the type of 'stypy_return_type' (line 1826)
        stypy_return_type_158148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158148)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'frozen'
        return stypy_return_type_158148

    
    # Assigning a Attribute to a Attribute (line 1828):

    @norecursion
    def _get_is_separable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_is_separable'
        module_type_store = module_type_store.open_function_context('_get_is_separable', 1830, 4, False)
        # Assigning a type to the variable 'self' (line 1831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_localization', localization)
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_function_name', 'Affine2DBase._get_is_separable')
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_param_names_list', [])
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2DBase._get_is_separable.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2DBase._get_is_separable', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_is_separable', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_is_separable(...)' code ##################

        
        # Assigning a Call to a Name (line 1831):
        
        # Assigning a Call to a Name (line 1831):
        
        # Call to get_matrix(...): (line 1831)
        # Processing the call keyword arguments (line 1831)
        kwargs_158151 = {}
        # Getting the type of 'self' (line 1831)
        self_158149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 14), 'self', False)
        # Obtaining the member 'get_matrix' of a type (line 1831)
        get_matrix_158150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1831, 14), self_158149, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1831)
        get_matrix_call_result_158152 = invoke(stypy.reporting.localization.Localization(__file__, 1831, 14), get_matrix_158150, *[], **kwargs_158151)
        
        # Assigning a type to the variable 'mtx' (line 1831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 8), 'mtx', get_matrix_call_result_158152)
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1832)
        tuple_158153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1832)
        # Adding element type (line 1832)
        int_158154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1832, 19), tuple_158153, int_158154)
        # Adding element type (line 1832)
        int_158155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1832, 19), tuple_158153, int_158155)
        
        # Getting the type of 'mtx' (line 1832)
        mtx_158156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 15), 'mtx')
        # Obtaining the member '__getitem__' of a type (line 1832)
        getitem___158157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 15), mtx_158156, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1832)
        subscript_call_result_158158 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 15), getitem___158157, tuple_158153)
        
        float_158159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 28), 'float')
        # Applying the binary operator '==' (line 1832)
        result_eq_158160 = python_operator(stypy.reporting.localization.Localization(__file__, 1832, 15), '==', subscript_call_result_158158, float_158159)
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1832)
        tuple_158161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1832)
        # Adding element type (line 1832)
        int_158162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1832, 40), tuple_158161, int_158162)
        # Adding element type (line 1832)
        int_158163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1832, 40), tuple_158161, int_158163)
        
        # Getting the type of 'mtx' (line 1832)
        mtx_158164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 36), 'mtx')
        # Obtaining the member '__getitem__' of a type (line 1832)
        getitem___158165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 36), mtx_158164, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1832)
        subscript_call_result_158166 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 36), getitem___158165, tuple_158161)
        
        float_158167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 49), 'float')
        # Applying the binary operator '==' (line 1832)
        result_eq_158168 = python_operator(stypy.reporting.localization.Localization(__file__, 1832, 36), '==', subscript_call_result_158166, float_158167)
        
        # Applying the binary operator 'and' (line 1832)
        result_and_keyword_158169 = python_operator(stypy.reporting.localization.Localization(__file__, 1832, 15), 'and', result_eq_158160, result_eq_158168)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'stypy_return_type', result_and_keyword_158169)
        
        # ################# End of '_get_is_separable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_is_separable' in the type store
        # Getting the type of 'stypy_return_type' (line 1830)
        stypy_return_type_158170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158170)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_is_separable'
        return stypy_return_type_158170

    
    # Assigning a Call to a Name (line 1833):

    @norecursion
    def to_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_values'
        module_type_store = module_type_store.open_function_context('to_values', 1835, 4, False)
        # Assigning a type to the variable 'self' (line 1836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2DBase.to_values.__dict__.__setitem__('stypy_localization', localization)
        Affine2DBase.to_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2DBase.to_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2DBase.to_values.__dict__.__setitem__('stypy_function_name', 'Affine2DBase.to_values')
        Affine2DBase.to_values.__dict__.__setitem__('stypy_param_names_list', [])
        Affine2DBase.to_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2DBase.to_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2DBase.to_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2DBase.to_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2DBase.to_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2DBase.to_values.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2DBase.to_values', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_values', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_values(...)' code ##################

        unicode_158171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1838, (-1)), 'unicode', u'\n        Return the values of the matrix as a sequence (a,b,c,d,e,f)\n        ')
        
        # Assigning a Call to a Name (line 1839):
        
        # Assigning a Call to a Name (line 1839):
        
        # Call to get_matrix(...): (line 1839)
        # Processing the call keyword arguments (line 1839)
        kwargs_158174 = {}
        # Getting the type of 'self' (line 1839)
        self_158172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 14), 'self', False)
        # Obtaining the member 'get_matrix' of a type (line 1839)
        get_matrix_158173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1839, 14), self_158172, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1839)
        get_matrix_call_result_158175 = invoke(stypy.reporting.localization.Localization(__file__, 1839, 14), get_matrix_158173, *[], **kwargs_158174)
        
        # Assigning a type to the variable 'mtx' (line 1839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 8), 'mtx', get_matrix_call_result_158175)
        
        # Call to tuple(...): (line 1840)
        # Processing the call arguments (line 1840)
        
        # Call to flatten(...): (line 1840)
        # Processing the call keyword arguments (line 1840)
        kwargs_158188 = {}
        
        # Call to swapaxes(...): (line 1840)
        # Processing the call arguments (line 1840)
        int_158183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 38), 'int')
        int_158184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 41), 'int')
        # Processing the call keyword arguments (line 1840)
        kwargs_158185 = {}
        
        # Obtaining the type of the subscript
        int_158177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 26), 'int')
        slice_158178 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1840, 21), None, int_158177, None)
        # Getting the type of 'mtx' (line 1840)
        mtx_158179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 21), 'mtx', False)
        # Obtaining the member '__getitem__' of a type (line 1840)
        getitem___158180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 21), mtx_158179, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1840)
        subscript_call_result_158181 = invoke(stypy.reporting.localization.Localization(__file__, 1840, 21), getitem___158180, slice_158178)
        
        # Obtaining the member 'swapaxes' of a type (line 1840)
        swapaxes_158182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 21), subscript_call_result_158181, 'swapaxes')
        # Calling swapaxes(args, kwargs) (line 1840)
        swapaxes_call_result_158186 = invoke(stypy.reporting.localization.Localization(__file__, 1840, 21), swapaxes_158182, *[int_158183, int_158184], **kwargs_158185)
        
        # Obtaining the member 'flatten' of a type (line 1840)
        flatten_158187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 21), swapaxes_call_result_158186, 'flatten')
        # Calling flatten(args, kwargs) (line 1840)
        flatten_call_result_158189 = invoke(stypy.reporting.localization.Localization(__file__, 1840, 21), flatten_158187, *[], **kwargs_158188)
        
        # Processing the call keyword arguments (line 1840)
        kwargs_158190 = {}
        # Getting the type of 'tuple' (line 1840)
        tuple_158176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 15), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1840)
        tuple_call_result_158191 = invoke(stypy.reporting.localization.Localization(__file__, 1840, 15), tuple_158176, *[flatten_call_result_158189], **kwargs_158190)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 8), 'stypy_return_type', tuple_call_result_158191)
        
        # ################# End of 'to_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1835)
        stypy_return_type_158192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158192)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_values'
        return stypy_return_type_158192


    @staticmethod
    @norecursion
    def matrix_from_values(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'matrix_from_values'
        module_type_store = module_type_store.open_function_context('matrix_from_values', 1842, 4, False)
        
        # Passed parameters checking function
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_localization', localization)
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_type_of_self', None)
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_function_name', 'matrix_from_values')
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_param_names_list', ['a', 'b', 'c', 'd', 'e', 'f'])
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2DBase.matrix_from_values.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, None, module_type_store, 'matrix_from_values', ['a', 'b', 'c', 'd', 'e', 'f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'matrix_from_values', localization, ['b', 'c', 'd', 'e', 'f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'matrix_from_values(...)' code ##################

        unicode_158193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, (-1)), 'unicode', u'\n        (staticmethod) Create a new transformation matrix as a 3x3\n        numpy array of the form::\n\n          a c e\n          b d f\n          0 0 1\n        ')
        
        # Call to array(...): (line 1852)
        # Processing the call arguments (line 1852)
        
        # Obtaining an instance of the builtin type 'list' (line 1852)
        list_158196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1852)
        # Adding element type (line 1852)
        
        # Obtaining an instance of the builtin type 'list' (line 1852)
        list_158197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1852)
        # Adding element type (line 1852)
        # Getting the type of 'a' (line 1852)
        a_158198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 26), 'a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 25), list_158197, a_158198)
        # Adding element type (line 1852)
        # Getting the type of 'c' (line 1852)
        c_158199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 29), 'c', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 25), list_158197, c_158199)
        # Adding element type (line 1852)
        # Getting the type of 'e' (line 1852)
        e_158200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 32), 'e', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 25), list_158197, e_158200)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 24), list_158196, list_158197)
        # Adding element type (line 1852)
        
        # Obtaining an instance of the builtin type 'list' (line 1852)
        list_158201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1852)
        # Adding element type (line 1852)
        # Getting the type of 'b' (line 1852)
        b_158202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 37), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 36), list_158201, b_158202)
        # Adding element type (line 1852)
        # Getting the type of 'd' (line 1852)
        d_158203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 40), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 36), list_158201, d_158203)
        # Adding element type (line 1852)
        # Getting the type of 'f' (line 1852)
        f_158204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 43), 'f', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 36), list_158201, f_158204)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 24), list_158196, list_158201)
        # Adding element type (line 1852)
        
        # Obtaining an instance of the builtin type 'list' (line 1852)
        list_158205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, 47), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1852)
        # Adding element type (line 1852)
        float_158206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, 48), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 47), list_158205, float_158206)
        # Adding element type (line 1852)
        float_158207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, 53), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 47), list_158205, float_158207)
        # Adding element type (line 1852)
        float_158208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, 58), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 47), list_158205, float_158208)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 24), list_158196, list_158205)
        
        # Getting the type of 'float' (line 1852)
        float_158209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 65), 'float', False)
        # Processing the call keyword arguments (line 1852)
        kwargs_158210 = {}
        # Getting the type of 'np' (line 1852)
        np_158194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 15), 'np', False)
        # Obtaining the member 'array' of a type (line 1852)
        array_158195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 15), np_158194, 'array')
        # Calling array(args, kwargs) (line 1852)
        array_call_result_158211 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 15), array_158195, *[list_158196, float_158209], **kwargs_158210)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 8), 'stypy_return_type', array_call_result_158211)
        
        # ################# End of 'matrix_from_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'matrix_from_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1842)
        stypy_return_type_158212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158212)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'matrix_from_values'
        return stypy_return_type_158212


    @norecursion
    def transform_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_affine'
        module_type_store = module_type_store.open_function_context('transform_affine', 1854, 4, False)
        # Assigning a type to the variable 'self' (line 1855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_localization', localization)
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_function_name', 'Affine2DBase.transform_affine')
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_param_names_list', ['points'])
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2DBase.transform_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2DBase.transform_affine', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_affine', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_affine(...)' code ##################

        
        # Assigning a Call to a Name (line 1855):
        
        # Assigning a Call to a Name (line 1855):
        
        # Call to get_matrix(...): (line 1855)
        # Processing the call keyword arguments (line 1855)
        kwargs_158215 = {}
        # Getting the type of 'self' (line 1855)
        self_158213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 14), 'self', False)
        # Obtaining the member 'get_matrix' of a type (line 1855)
        get_matrix_158214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 14), self_158213, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1855)
        get_matrix_call_result_158216 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 14), get_matrix_158214, *[], **kwargs_158215)
        
        # Assigning a type to the variable 'mtx' (line 1855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 8), 'mtx', get_matrix_call_result_158216)
        
        
        # Call to isinstance(...): (line 1856)
        # Processing the call arguments (line 1856)
        # Getting the type of 'points' (line 1856)
        points_158218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 22), 'points', False)
        # Getting the type of 'np' (line 1856)
        np_158219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 30), 'np', False)
        # Obtaining the member 'ma' of a type (line 1856)
        ma_158220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 30), np_158219, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 1856)
        MaskedArray_158221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 30), ma_158220, 'MaskedArray')
        # Processing the call keyword arguments (line 1856)
        kwargs_158222 = {}
        # Getting the type of 'isinstance' (line 1856)
        isinstance_158217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1856)
        isinstance_call_result_158223 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 11), isinstance_158217, *[points_158218, MaskedArray_158221], **kwargs_158222)
        
        # Testing the type of an if condition (line 1856)
        if_condition_158224 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1856, 8), isinstance_call_result_158223)
        # Assigning a type to the variable 'if_condition_158224' (line 1856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 8), 'if_condition_158224', if_condition_158224)
        # SSA begins for if statement (line 1856)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1857):
        
        # Assigning a Call to a Name (line 1857):
        
        # Call to affine_transform(...): (line 1857)
        # Processing the call arguments (line 1857)
        # Getting the type of 'points' (line 1857)
        points_158226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 39), 'points', False)
        # Obtaining the member 'data' of a type (line 1857)
        data_158227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1857, 39), points_158226, 'data')
        # Getting the type of 'mtx' (line 1857)
        mtx_158228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 52), 'mtx', False)
        # Processing the call keyword arguments (line 1857)
        kwargs_158229 = {}
        # Getting the type of 'affine_transform' (line 1857)
        affine_transform_158225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 22), 'affine_transform', False)
        # Calling affine_transform(args, kwargs) (line 1857)
        affine_transform_call_result_158230 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 22), affine_transform_158225, *[data_158227, mtx_158228], **kwargs_158229)
        
        # Assigning a type to the variable 'tpoints' (line 1857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1857, 12), 'tpoints', affine_transform_call_result_158230)
        
        # Call to MaskedArray(...): (line 1858)
        # Processing the call arguments (line 1858)
        # Getting the type of 'tpoints' (line 1858)
        tpoints_158234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 37), 'tpoints', False)
        # Processing the call keyword arguments (line 1858)
        
        # Call to getmask(...): (line 1858)
        # Processing the call arguments (line 1858)
        # Getting the type of 'points' (line 1858)
        points_158238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 65), 'points', False)
        # Processing the call keyword arguments (line 1858)
        kwargs_158239 = {}
        # Getting the type of 'np' (line 1858)
        np_158235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 51), 'np', False)
        # Obtaining the member 'ma' of a type (line 1858)
        ma_158236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 51), np_158235, 'ma')
        # Obtaining the member 'getmask' of a type (line 1858)
        getmask_158237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 51), ma_158236, 'getmask')
        # Calling getmask(args, kwargs) (line 1858)
        getmask_call_result_158240 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 51), getmask_158237, *[points_158238], **kwargs_158239)
        
        keyword_158241 = getmask_call_result_158240
        kwargs_158242 = {'mask': keyword_158241}
        # Getting the type of 'np' (line 1858)
        np_158231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 19), 'np', False)
        # Obtaining the member 'ma' of a type (line 1858)
        ma_158232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 19), np_158231, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 1858)
        MaskedArray_158233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 19), ma_158232, 'MaskedArray')
        # Calling MaskedArray(args, kwargs) (line 1858)
        MaskedArray_call_result_158243 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 19), MaskedArray_158233, *[tpoints_158234], **kwargs_158242)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 12), 'stypy_return_type', MaskedArray_call_result_158243)
        # SSA join for if statement (line 1856)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to affine_transform(...): (line 1859)
        # Processing the call arguments (line 1859)
        # Getting the type of 'points' (line 1859)
        points_158245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 32), 'points', False)
        # Getting the type of 'mtx' (line 1859)
        mtx_158246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 40), 'mtx', False)
        # Processing the call keyword arguments (line 1859)
        kwargs_158247 = {}
        # Getting the type of 'affine_transform' (line 1859)
        affine_transform_158244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 15), 'affine_transform', False)
        # Calling affine_transform(args, kwargs) (line 1859)
        affine_transform_call_result_158248 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 15), affine_transform_158244, *[points_158245, mtx_158246], **kwargs_158247)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1859, 8), 'stypy_return_type', affine_transform_call_result_158248)
        
        # ################# End of 'transform_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 1854)
        stypy_return_type_158249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158249)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_affine'
        return stypy_return_type_158249


    @norecursion
    def transform_point(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_point'
        module_type_store = module_type_store.open_function_context('transform_point', 1861, 4, False)
        # Assigning a type to the variable 'self' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_localization', localization)
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_function_name', 'Affine2DBase.transform_point')
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_param_names_list', ['point'])
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2DBase.transform_point.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2DBase.transform_point', ['point'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_point', localization, ['point'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_point(...)' code ##################

        
        # Assigning a Call to a Name (line 1862):
        
        # Assigning a Call to a Name (line 1862):
        
        # Call to get_matrix(...): (line 1862)
        # Processing the call keyword arguments (line 1862)
        kwargs_158252 = {}
        # Getting the type of 'self' (line 1862)
        self_158250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 14), 'self', False)
        # Obtaining the member 'get_matrix' of a type (line 1862)
        get_matrix_158251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 14), self_158250, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1862)
        get_matrix_call_result_158253 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 14), get_matrix_158251, *[], **kwargs_158252)
        
        # Assigning a type to the variable 'mtx' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 8), 'mtx', get_matrix_call_result_158253)
        
        # Obtaining the type of the subscript
        int_158254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1863, 46), 'int')
        
        # Call to affine_transform(...): (line 1863)
        # Processing the call arguments (line 1863)
        
        # Obtaining an instance of the builtin type 'list' (line 1863)
        list_158256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1863, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1863)
        # Adding element type (line 1863)
        # Getting the type of 'point' (line 1863)
        point_158257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 33), 'point', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1863, 32), list_158256, point_158257)
        
        # Getting the type of 'mtx' (line 1863)
        mtx_158258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 41), 'mtx', False)
        # Processing the call keyword arguments (line 1863)
        kwargs_158259 = {}
        # Getting the type of 'affine_transform' (line 1863)
        affine_transform_158255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 15), 'affine_transform', False)
        # Calling affine_transform(args, kwargs) (line 1863)
        affine_transform_call_result_158260 = invoke(stypy.reporting.localization.Localization(__file__, 1863, 15), affine_transform_158255, *[list_158256, mtx_158258], **kwargs_158259)
        
        # Obtaining the member '__getitem__' of a type (line 1863)
        getitem___158261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1863, 15), affine_transform_call_result_158260, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1863)
        subscript_call_result_158262 = invoke(stypy.reporting.localization.Localization(__file__, 1863, 15), getitem___158261, int_158254)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1863, 8), 'stypy_return_type', subscript_call_result_158262)
        
        # ################# End of 'transform_point(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_point' in the type store
        # Getting the type of 'stypy_return_type' (line 1861)
        stypy_return_type_158263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158263)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_point'
        return stypy_return_type_158263

    
    # Assigning a Attribute to a Attribute (line 1879):

    @norecursion
    def inverted(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverted'
        module_type_store = module_type_store.open_function_context('inverted', 1881, 4, False)
        # Assigning a type to the variable 'self' (line 1882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1882, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2DBase.inverted.__dict__.__setitem__('stypy_localization', localization)
        Affine2DBase.inverted.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2DBase.inverted.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2DBase.inverted.__dict__.__setitem__('stypy_function_name', 'Affine2DBase.inverted')
        Affine2DBase.inverted.__dict__.__setitem__('stypy_param_names_list', [])
        Affine2DBase.inverted.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2DBase.inverted.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2DBase.inverted.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2DBase.inverted.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2DBase.inverted.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2DBase.inverted.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2DBase.inverted', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverted', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverted(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1882)
        self_158264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 11), 'self')
        # Obtaining the member '_inverted' of a type (line 1882)
        _inverted_158265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1882, 11), self_158264, '_inverted')
        # Getting the type of 'None' (line 1882)
        None_158266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 29), 'None')
        # Applying the binary operator 'is' (line 1882)
        result_is__158267 = python_operator(stypy.reporting.localization.Localization(__file__, 1882, 11), 'is', _inverted_158265, None_158266)
        
        # Getting the type of 'self' (line 1882)
        self_158268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 37), 'self')
        # Obtaining the member '_invalid' of a type (line 1882)
        _invalid_158269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1882, 37), self_158268, '_invalid')
        # Applying the binary operator 'or' (line 1882)
        result_or_keyword_158270 = python_operator(stypy.reporting.localization.Localization(__file__, 1882, 11), 'or', result_is__158267, _invalid_158269)
        
        # Testing the type of an if condition (line 1882)
        if_condition_158271 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1882, 8), result_or_keyword_158270)
        # Assigning a type to the variable 'if_condition_158271' (line 1882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1882, 8), 'if_condition_158271', if_condition_158271)
        # SSA begins for if statement (line 1882)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1883):
        
        # Assigning a Call to a Name (line 1883):
        
        # Call to get_matrix(...): (line 1883)
        # Processing the call keyword arguments (line 1883)
        kwargs_158274 = {}
        # Getting the type of 'self' (line 1883)
        self_158272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 18), 'self', False)
        # Obtaining the member 'get_matrix' of a type (line 1883)
        get_matrix_158273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1883, 18), self_158272, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1883)
        get_matrix_call_result_158275 = invoke(stypy.reporting.localization.Localization(__file__, 1883, 18), get_matrix_158273, *[], **kwargs_158274)
        
        # Assigning a type to the variable 'mtx' (line 1883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1883, 12), 'mtx', get_matrix_call_result_158275)
        
        # Assigning a Name to a Name (line 1884):
        
        # Assigning a Name to a Name (line 1884):
        # Getting the type of 'None' (line 1884)
        None_158276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 29), 'None')
        # Assigning a type to the variable 'shorthand_name' (line 1884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1884, 12), 'shorthand_name', None_158276)
        
        # Getting the type of 'self' (line 1885)
        self_158277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 15), 'self')
        # Obtaining the member '_shorthand_name' of a type (line 1885)
        _shorthand_name_158278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 15), self_158277, '_shorthand_name')
        # Testing the type of an if condition (line 1885)
        if_condition_158279 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1885, 12), _shorthand_name_158278)
        # Assigning a type to the variable 'if_condition_158279' (line 1885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1885, 12), 'if_condition_158279', if_condition_158279)
        # SSA begins for if statement (line 1885)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1886):
        
        # Assigning a BinOp to a Name (line 1886):
        unicode_158280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 33), 'unicode', u'(%s)-1')
        # Getting the type of 'self' (line 1886)
        self_158281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 44), 'self')
        # Obtaining the member '_shorthand_name' of a type (line 1886)
        _shorthand_name_158282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 44), self_158281, '_shorthand_name')
        # Applying the binary operator '%' (line 1886)
        result_mod_158283 = python_operator(stypy.reporting.localization.Localization(__file__, 1886, 33), '%', unicode_158280, _shorthand_name_158282)
        
        # Assigning a type to the variable 'shorthand_name' (line 1886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 16), 'shorthand_name', result_mod_158283)
        # SSA join for if statement (line 1885)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1887):
        
        # Assigning a Call to a Attribute (line 1887):
        
        # Call to Affine2D(...): (line 1887)
        # Processing the call arguments (line 1887)
        
        # Call to inv(...): (line 1887)
        # Processing the call arguments (line 1887)
        # Getting the type of 'mtx' (line 1887)
        mtx_158286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 42), 'mtx', False)
        # Processing the call keyword arguments (line 1887)
        kwargs_158287 = {}
        # Getting the type of 'inv' (line 1887)
        inv_158285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 38), 'inv', False)
        # Calling inv(args, kwargs) (line 1887)
        inv_call_result_158288 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 38), inv_158285, *[mtx_158286], **kwargs_158287)
        
        # Processing the call keyword arguments (line 1887)
        # Getting the type of 'shorthand_name' (line 1887)
        shorthand_name_158289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 63), 'shorthand_name', False)
        keyword_158290 = shorthand_name_158289
        kwargs_158291 = {'shorthand_name': keyword_158290}
        # Getting the type of 'Affine2D' (line 1887)
        Affine2D_158284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 29), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 1887)
        Affine2D_call_result_158292 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 29), Affine2D_158284, *[inv_call_result_158288], **kwargs_158291)
        
        # Getting the type of 'self' (line 1887)
        self_158293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 12), 'self')
        # Setting the type of the member '_inverted' of a type (line 1887)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 12), self_158293, '_inverted', Affine2D_call_result_158292)
        
        # Assigning a Num to a Attribute (line 1888):
        
        # Assigning a Num to a Attribute (line 1888):
        int_158294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1888, 28), 'int')
        # Getting the type of 'self' (line 1888)
        self_158295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 1888)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1888, 12), self_158295, '_invalid', int_158294)
        # SSA join for if statement (line 1882)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 1889)
        self_158296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 15), 'self')
        # Obtaining the member '_inverted' of a type (line 1889)
        _inverted_158297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 15), self_158296, '_inverted')
        # Assigning a type to the variable 'stypy_return_type' (line 1889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 8), 'stypy_return_type', _inverted_158297)
        
        # ################# End of 'inverted(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverted' in the type store
        # Getting the type of 'stypy_return_type' (line 1881)
        stypy_return_type_158298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158298)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverted'
        return stypy_return_type_158298

    
    # Assigning a Attribute to a Attribute (line 1890):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1805, 0, False)
        # Assigning a type to the variable 'self' (line 1806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2DBase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Affine2DBase' (line 1805)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 0), 'Affine2DBase', Affine2DBase)

# Assigning a Name to a Name (line 1821):
# Getting the type of 'True' (line 1821)
True_158299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 18), 'True')
# Getting the type of 'Affine2DBase'
Affine2DBase_158300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2DBase')
# Setting the type of the member 'has_inverse' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2DBase_158300, 'has_inverse', True_158299)

# Assigning a Num to a Name (line 1823):
int_158301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1823, 17), 'int')
# Getting the type of 'Affine2DBase'
Affine2DBase_158302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2DBase')
# Setting the type of the member 'input_dims' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2DBase_158302, 'input_dims', int_158301)

# Assigning a Num to a Name (line 1824):
int_158303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1824, 18), 'int')
# Getting the type of 'Affine2DBase'
Affine2DBase_158304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2DBase')
# Setting the type of the member 'output_dims' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2DBase_158304, 'output_dims', int_158303)

# Assigning a Attribute to a Attribute (line 1828):
# Getting the type of 'AffineBase' (line 1828)
AffineBase_158305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 21), 'AffineBase')
# Obtaining the member 'frozen' of a type (line 1828)
frozen_158306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 21), AffineBase_158305, 'frozen')
# Obtaining the member '__doc__' of a type (line 1828)
doc___158307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 21), frozen_158306, '__doc__')
# Getting the type of 'Affine2DBase'
Affine2DBase_158308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2DBase')
# Obtaining the member 'frozen' of a type
frozen_158309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2DBase_158308, 'frozen')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), frozen_158309, '__doc__', doc___158307)

# Assigning a Call to a Name (line 1833):

# Call to property(...): (line 1833)
# Processing the call arguments (line 1833)
# Getting the type of 'Affine2DBase'
Affine2DBase_158311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2DBase', False)
# Obtaining the member '_get_is_separable' of a type
_get_is_separable_158312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2DBase_158311, '_get_is_separable')
# Processing the call keyword arguments (line 1833)
kwargs_158313 = {}
# Getting the type of 'property' (line 1833)
property_158310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 19), 'property', False)
# Calling property(args, kwargs) (line 1833)
property_call_result_158314 = invoke(stypy.reporting.localization.Localization(__file__, 1833, 19), property_158310, *[_get_is_separable_158312], **kwargs_158313)

# Getting the type of 'Affine2DBase'
Affine2DBase_158315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2DBase')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2DBase_158315, 'is_separable', property_call_result_158314)

# Assigning a Attribute to a Attribute (line 1864):
# Getting the type of 'AffineBase' (line 1864)
AffineBase_158316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 30), 'AffineBase')
# Obtaining the member 'transform_point' of a type (line 1864)
transform_point_158317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 30), AffineBase_158316, 'transform_point')
# Obtaining the member '__doc__' of a type (line 1864)
doc___158318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 30), transform_point_158317, '__doc__')
# Getting the type of 'Affine2DBase'
Affine2DBase_158319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2DBase')
# Obtaining the member 'transform_point' of a type
transform_point_158320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2DBase_158319, 'transform_point')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_point_158320, '__doc__', doc___158318)

# Assigning a Attribute to a Attribute (line 1864):

# Getting the type of 'DEBUG' (line 1866)
DEBUG_158321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 7), 'DEBUG')
# Testing the type of an if condition (line 1866)
if_condition_158322 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1866, 4), DEBUG_158321)
# Assigning a type to the variable 'if_condition_158322' (line 1866)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 4), 'if_condition_158322', if_condition_158322)
# SSA begins for if statement (line 1866)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 1867):

# Assigning a Name to a Name (line 1867):
# Getting the type of 'Affine2DBase'
Affine2DBase_158323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2DBase')
# Obtaining the member 'transform_affine' of a type
transform_affine_158324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2DBase_158323, 'transform_affine')
# Assigning a type to the variable '_transform_affine' (line 1867)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 8), '_transform_affine', transform_affine_158324)

@norecursion
def transform_affine(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'transform_affine'
    module_type_store = module_type_store.open_function_context('transform_affine', 1869, 8, False)
    
    # Passed parameters checking function
    transform_affine.stypy_localization = localization
    transform_affine.stypy_type_of_self = None
    transform_affine.stypy_type_store = module_type_store
    transform_affine.stypy_function_name = 'transform_affine'
    transform_affine.stypy_param_names_list = ['self', 'points']
    transform_affine.stypy_varargs_param_name = None
    transform_affine.stypy_kwargs_param_name = None
    transform_affine.stypy_call_defaults = defaults
    transform_affine.stypy_call_varargs = varargs
    transform_affine.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'transform_affine', ['self', 'points'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'transform_affine', localization, ['self', 'points'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'transform_affine(...)' code ##################

    
    
    
    # Call to isinstance(...): (line 1873)
    # Processing the call arguments (line 1873)
    # Getting the type of 'points' (line 1873)
    points_158326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 30), 'points', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1873)
    tuple_158327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1873, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1873)
    # Adding element type (line 1873)
    # Getting the type of 'np' (line 1873)
    np_158328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 39), 'np', False)
    # Obtaining the member 'ma' of a type (line 1873)
    ma_158329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 39), np_158328, 'ma')
    # Obtaining the member 'MaskedArray' of a type (line 1873)
    MaskedArray_158330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 39), ma_158329, 'MaskedArray')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1873, 39), tuple_158327, MaskedArray_158330)
    # Adding element type (line 1873)
    # Getting the type of 'np' (line 1873)
    np_158331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 58), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 1873)
    ndarray_158332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 58), np_158331, 'ndarray')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1873, 39), tuple_158327, ndarray_158332)
    
    # Processing the call keyword arguments (line 1873)
    kwargs_158333 = {}
    # Getting the type of 'isinstance' (line 1873)
    isinstance_158325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 19), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1873)
    isinstance_call_result_158334 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 19), isinstance_158325, *[points_158326, tuple_158327], **kwargs_158333)
    
    # Applying the 'not' unary operator (line 1873)
    result_not__158335 = python_operator(stypy.reporting.localization.Localization(__file__, 1873, 15), 'not', isinstance_call_result_158334)
    
    # Testing the type of an if condition (line 1873)
    if_condition_158336 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1873, 12), result_not__158335)
    # Assigning a type to the variable 'if_condition_158336' (line 1873)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 12), 'if_condition_158336', if_condition_158336)
    # SSA begins for if statement (line 1873)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1874)
    # Processing the call arguments (line 1874)
    unicode_158339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1875, 21), 'unicode', u'A non-numpy array of type %s was passed in for ')
    unicode_158340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 21), 'unicode', u'transformation.  Please correct this.')
    # Applying the binary operator '+' (line 1875)
    result_add_158341 = python_operator(stypy.reporting.localization.Localization(__file__, 1875, 21), '+', unicode_158339, unicode_158340)
    
    
    # Call to type(...): (line 1877)
    # Processing the call arguments (line 1877)
    # Getting the type of 'points' (line 1877)
    points_158343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 27), 'points', False)
    # Processing the call keyword arguments (line 1877)
    kwargs_158344 = {}
    # Getting the type of 'type' (line 1877)
    type_158342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 22), 'type', False)
    # Calling type(args, kwargs) (line 1877)
    type_call_result_158345 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 22), type_158342, *[points_158343], **kwargs_158344)
    
    # Applying the binary operator '%' (line 1875)
    result_mod_158346 = python_operator(stypy.reporting.localization.Localization(__file__, 1875, 20), '%', result_add_158341, type_call_result_158345)
    
    # Processing the call keyword arguments (line 1874)
    kwargs_158347 = {}
    # Getting the type of 'warnings' (line 1874)
    warnings_158337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 16), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1874)
    warn_158338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1874, 16), warnings_158337, 'warn')
    # Calling warn(args, kwargs) (line 1874)
    warn_call_result_158348 = invoke(stypy.reporting.localization.Localization(__file__, 1874, 16), warn_158338, *[result_mod_158346], **kwargs_158347)
    
    # SSA join for if statement (line 1873)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _transform_affine(...): (line 1878)
    # Processing the call arguments (line 1878)
    # Getting the type of 'points' (line 1878)
    points_158351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 42), 'points', False)
    # Processing the call keyword arguments (line 1878)
    kwargs_158352 = {}
    # Getting the type of 'self' (line 1878)
    self_158349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 19), 'self', False)
    # Obtaining the member '_transform_affine' of a type (line 1878)
    _transform_affine_158350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 19), self_158349, '_transform_affine')
    # Calling _transform_affine(args, kwargs) (line 1878)
    _transform_affine_call_result_158353 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 19), _transform_affine_158350, *[points_158351], **kwargs_158352)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'stypy_return_type', _transform_affine_call_result_158353)
    
    # ################# End of 'transform_affine(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'transform_affine' in the type store
    # Getting the type of 'stypy_return_type' (line 1869)
    stypy_return_type_158354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_158354)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'transform_affine'
    return stypy_return_type_158354

# Assigning a type to the variable 'transform_affine' (line 1869)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 8), 'transform_affine', transform_affine)
# SSA join for if statement (line 1866)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Attribute to a Attribute (line 1879):
# Getting the type of 'AffineBase' (line 1879)
AffineBase_158355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 31), 'AffineBase')
# Obtaining the member 'transform_affine' of a type (line 1879)
transform_affine_158356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 31), AffineBase_158355, 'transform_affine')
# Obtaining the member '__doc__' of a type (line 1879)
doc___158357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 31), transform_affine_158356, '__doc__')
# Getting the type of 'Affine2DBase'
Affine2DBase_158358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2DBase')
# Obtaining the member 'transform_affine' of a type
transform_affine_158359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2DBase_158358, 'transform_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_affine_158359, '__doc__', doc___158357)

# Assigning a Attribute to a Attribute (line 1890):
# Getting the type of 'AffineBase' (line 1890)
AffineBase_158360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 23), 'AffineBase')
# Obtaining the member 'inverted' of a type (line 1890)
inverted_158361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1890, 23), AffineBase_158360, 'inverted')
# Obtaining the member '__doc__' of a type (line 1890)
doc___158362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1890, 23), inverted_158361, '__doc__')
# Getting the type of 'Affine2DBase'
Affine2DBase_158363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2DBase')
# Obtaining the member 'inverted' of a type
inverted_158364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2DBase_158363, 'inverted')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), inverted_158364, '__doc__', doc___158362)
# Declaration of the 'Affine2D' class
# Getting the type of 'Affine2DBase' (line 1893)
Affine2DBase_158365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 15), 'Affine2DBase')

class Affine2D(Affine2DBase_158365, ):
    unicode_158366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1896, (-1)), 'unicode', u'\n    A mutable 2D affine transformation.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1898)
        None_158367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 30), 'None')
        defaults = [None_158367]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1898, 4, False)
        # Assigning a type to the variable 'self' (line 1899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1899, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.__init__', ['matrix'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['matrix'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_158368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, (-1)), 'unicode', u'\n        Initialize an Affine transform from a 3x3 numpy float array::\n\n          a c e\n          b d f\n          0 0 1\n\n        If *matrix* is None, initialize with the identity transform.\n        ')
        
        # Call to __init__(...): (line 1908)
        # Processing the call arguments (line 1908)
        # Getting the type of 'self' (line 1908)
        self_158371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 30), 'self', False)
        # Processing the call keyword arguments (line 1908)
        # Getting the type of 'kwargs' (line 1908)
        kwargs_158372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 38), 'kwargs', False)
        kwargs_158373 = {'kwargs_158372': kwargs_158372}
        # Getting the type of 'Affine2DBase' (line 1908)
        Affine2DBase_158369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 8), 'Affine2DBase', False)
        # Obtaining the member '__init__' of a type (line 1908)
        init___158370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1908, 8), Affine2DBase_158369, '__init__')
        # Calling __init__(args, kwargs) (line 1908)
        init___call_result_158374 = invoke(stypy.reporting.localization.Localization(__file__, 1908, 8), init___158370, *[self_158371], **kwargs_158373)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1909)
        # Getting the type of 'matrix' (line 1909)
        matrix_158375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 11), 'matrix')
        # Getting the type of 'None' (line 1909)
        None_158376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 21), 'None')
        
        (may_be_158377, more_types_in_union_158378) = may_be_none(matrix_158375, None_158376)

        if may_be_158377:

            if more_types_in_union_158378:
                # Runtime conditional SSA (line 1909)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1910):
            
            # Assigning a Call to a Name (line 1910):
            
            # Call to identity(...): (line 1910)
            # Processing the call arguments (line 1910)
            int_158381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1910, 33), 'int')
            # Processing the call keyword arguments (line 1910)
            kwargs_158382 = {}
            # Getting the type of 'np' (line 1910)
            np_158379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 21), 'np', False)
            # Obtaining the member 'identity' of a type (line 1910)
            identity_158380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1910, 21), np_158379, 'identity')
            # Calling identity(args, kwargs) (line 1910)
            identity_call_result_158383 = invoke(stypy.reporting.localization.Localization(__file__, 1910, 21), identity_158380, *[int_158381], **kwargs_158382)
            
            # Assigning a type to the variable 'matrix' (line 1910)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1910, 12), 'matrix', identity_call_result_158383)

            if more_types_in_union_158378:
                # Runtime conditional SSA for else branch (line 1909)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_158377) or more_types_in_union_158378):
            
            # Getting the type of 'DEBUG' (line 1911)
            DEBUG_158384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 13), 'DEBUG')
            # Testing the type of an if condition (line 1911)
            if_condition_158385 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1911, 13), DEBUG_158384)
            # Assigning a type to the variable 'if_condition_158385' (line 1911)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1911, 13), 'if_condition_158385', if_condition_158385)
            # SSA begins for if statement (line 1911)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1912):
            
            # Assigning a Call to a Name (line 1912):
            
            # Call to asarray(...): (line 1912)
            # Processing the call arguments (line 1912)
            # Getting the type of 'matrix' (line 1912)
            matrix_158388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 32), 'matrix', False)
            # Getting the type of 'float' (line 1912)
            float_158389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 40), 'float', False)
            # Processing the call keyword arguments (line 1912)
            kwargs_158390 = {}
            # Getting the type of 'np' (line 1912)
            np_158386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 21), 'np', False)
            # Obtaining the member 'asarray' of a type (line 1912)
            asarray_158387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 21), np_158386, 'asarray')
            # Calling asarray(args, kwargs) (line 1912)
            asarray_call_result_158391 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 21), asarray_158387, *[matrix_158388, float_158389], **kwargs_158390)
            
            # Assigning a type to the variable 'matrix' (line 1912)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 12), 'matrix', asarray_call_result_158391)
            # Evaluating assert statement condition
            
            # Getting the type of 'matrix' (line 1913)
            matrix_158392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 19), 'matrix')
            # Obtaining the member 'shape' of a type (line 1913)
            shape_158393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 19), matrix_158392, 'shape')
            
            # Obtaining an instance of the builtin type 'tuple' (line 1913)
            tuple_158394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1913, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1913)
            # Adding element type (line 1913)
            int_158395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1913, 36), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1913, 36), tuple_158394, int_158395)
            # Adding element type (line 1913)
            int_158396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1913, 39), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1913, 36), tuple_158394, int_158396)
            
            # Applying the binary operator '==' (line 1913)
            result_eq_158397 = python_operator(stypy.reporting.localization.Localization(__file__, 1913, 19), '==', shape_158393, tuple_158394)
            
            # SSA join for if statement (line 1911)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_158377 and more_types_in_union_158378):
                # SSA join for if statement (line 1909)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1914):
        
        # Assigning a Name to a Attribute (line 1914):
        # Getting the type of 'matrix' (line 1914)
        matrix_158398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 20), 'matrix')
        # Getting the type of 'self' (line 1914)
        self_158399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 1914)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1914, 8), self_158399, '_mtx', matrix_158398)
        
        # Assigning a Num to a Attribute (line 1915):
        
        # Assigning a Num to a Attribute (line 1915):
        int_158400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 24), 'int')
        # Getting the type of 'self' (line 1915)
        self_158401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 8), 'self')
        # Setting the type of the member '_invalid' of a type (line 1915)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1915, 8), self_158401, '_invalid', int_158400)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 1917, 4, False)
        # Assigning a type to the variable 'self' (line 1918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1918, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'Affine2D.stypy__repr__')
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_158402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1918, 15), 'unicode', u'Affine2D(%s)')
        
        # Call to repr(...): (line 1918)
        # Processing the call arguments (line 1918)
        # Getting the type of 'self' (line 1918)
        self_158404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 37), 'self', False)
        # Obtaining the member '_mtx' of a type (line 1918)
        _mtx_158405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1918, 37), self_158404, '_mtx')
        # Processing the call keyword arguments (line 1918)
        kwargs_158406 = {}
        # Getting the type of 'repr' (line 1918)
        repr_158403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 32), 'repr', False)
        # Calling repr(args, kwargs) (line 1918)
        repr_call_result_158407 = invoke(stypy.reporting.localization.Localization(__file__, 1918, 32), repr_158403, *[_mtx_158405], **kwargs_158406)
        
        # Applying the binary operator '%' (line 1918)
        result_mod_158408 = python_operator(stypy.reporting.localization.Localization(__file__, 1918, 15), '%', unicode_158402, repr_call_result_158407)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1918, 8), 'stypy_return_type', result_mod_158408)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 1917)
        stypy_return_type_158409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158409)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_158409


    @staticmethod
    @norecursion
    def from_values(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'from_values'
        module_type_store = module_type_store.open_function_context('from_values', 1920, 4, False)
        
        # Passed parameters checking function
        Affine2D.from_values.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.from_values.__dict__.__setitem__('stypy_type_of_self', None)
        Affine2D.from_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.from_values.__dict__.__setitem__('stypy_function_name', 'from_values')
        Affine2D.from_values.__dict__.__setitem__('stypy_param_names_list', ['a', 'b', 'c', 'd', 'e', 'f'])
        Affine2D.from_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.from_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.from_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.from_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.from_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.from_values.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, None, module_type_store, 'from_values', ['a', 'b', 'c', 'd', 'e', 'f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'from_values', localization, ['b', 'c', 'd', 'e', 'f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'from_values(...)' code ##################

        unicode_158410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, (-1)), 'unicode', u'\n        (staticmethod) Create a new Affine2D instance from the given\n        values::\n\n          a c e\n          b d f\n          0 0 1\n\n        .\n        ')
        
        # Call to Affine2D(...): (line 1932)
        # Processing the call arguments (line 1932)
        
        # Call to reshape(...): (line 1933)
        # Processing the call arguments (line 1933)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1933)
        tuple_158428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, 72), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1933)
        # Adding element type (line 1933)
        int_158429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, 72), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 72), tuple_158428, int_158429)
        # Adding element type (line 1933)
        int_158430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, 75), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 72), tuple_158428, int_158430)
        
        # Processing the call keyword arguments (line 1933)
        kwargs_158431 = {}
        
        # Call to array(...): (line 1933)
        # Processing the call arguments (line 1933)
        
        # Obtaining an instance of the builtin type 'list' (line 1933)
        list_158414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1933)
        # Adding element type (line 1933)
        # Getting the type of 'a' (line 1933)
        a_158415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 22), 'a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 21), list_158414, a_158415)
        # Adding element type (line 1933)
        # Getting the type of 'c' (line 1933)
        c_158416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 25), 'c', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 21), list_158414, c_158416)
        # Adding element type (line 1933)
        # Getting the type of 'e' (line 1933)
        e_158417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 28), 'e', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 21), list_158414, e_158417)
        # Adding element type (line 1933)
        # Getting the type of 'b' (line 1933)
        b_158418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 31), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 21), list_158414, b_158418)
        # Adding element type (line 1933)
        # Getting the type of 'd' (line 1933)
        d_158419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 34), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 21), list_158414, d_158419)
        # Adding element type (line 1933)
        # Getting the type of 'f' (line 1933)
        f_158420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 37), 'f', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 21), list_158414, f_158420)
        # Adding element type (line 1933)
        float_158421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 21), list_158414, float_158421)
        # Adding element type (line 1933)
        float_158422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 21), list_158414, float_158422)
        # Adding element type (line 1933)
        float_158423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, 50), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 21), list_158414, float_158423)
        
        # Getting the type of 'float' (line 1933)
        float_158424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 56), 'float', False)
        # Processing the call keyword arguments (line 1933)
        kwargs_158425 = {}
        # Getting the type of 'np' (line 1933)
        np_158412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 1933)
        array_158413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 12), np_158412, 'array')
        # Calling array(args, kwargs) (line 1933)
        array_call_result_158426 = invoke(stypy.reporting.localization.Localization(__file__, 1933, 12), array_158413, *[list_158414, float_158424], **kwargs_158425)
        
        # Obtaining the member 'reshape' of a type (line 1933)
        reshape_158427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 12), array_call_result_158426, 'reshape')
        # Calling reshape(args, kwargs) (line 1933)
        reshape_call_result_158432 = invoke(stypy.reporting.localization.Localization(__file__, 1933, 12), reshape_158427, *[tuple_158428], **kwargs_158431)
        
        # Processing the call keyword arguments (line 1932)
        kwargs_158433 = {}
        # Getting the type of 'Affine2D' (line 1932)
        Affine2D_158411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 15), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 1932)
        Affine2D_call_result_158434 = invoke(stypy.reporting.localization.Localization(__file__, 1932, 15), Affine2D_158411, *[reshape_call_result_158432], **kwargs_158433)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1932, 8), 'stypy_return_type', Affine2D_call_result_158434)
        
        # ################# End of 'from_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'from_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1920)
        stypy_return_type_158435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158435)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'from_values'
        return stypy_return_type_158435


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 1935, 4, False)
        # Assigning a type to the variable 'self' (line 1936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.get_matrix.__dict__.__setitem__('stypy_function_name', 'Affine2D.get_matrix')
        Affine2D.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        Affine2D.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        unicode_158436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1944, (-1)), 'unicode', u'\n        Get the underlying transformation matrix as a 3x3 numpy array::\n\n          a c e\n          b d f\n          0 0 1\n\n        .\n        ')
        
        # Assigning a Num to a Attribute (line 1945):
        
        # Assigning a Num to a Attribute (line 1945):
        int_158437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1945, 24), 'int')
        # Getting the type of 'self' (line 1945)
        self_158438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 8), 'self')
        # Setting the type of the member '_invalid' of a type (line 1945)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1945, 8), self_158438, '_invalid', int_158437)
        # Getting the type of 'self' (line 1946)
        self_158439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 15), 'self')
        # Obtaining the member '_mtx' of a type (line 1946)
        _mtx_158440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1946, 15), self_158439, '_mtx')
        # Assigning a type to the variable 'stypy_return_type' (line 1946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 8), 'stypy_return_type', _mtx_158440)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 1935)
        stypy_return_type_158441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158441)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_158441


    @norecursion
    def set_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_matrix'
        module_type_store = module_type_store.open_function_context('set_matrix', 1948, 4, False)
        # Assigning a type to the variable 'self' (line 1949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1949, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.set_matrix.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.set_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.set_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.set_matrix.__dict__.__setitem__('stypy_function_name', 'Affine2D.set_matrix')
        Affine2D.set_matrix.__dict__.__setitem__('stypy_param_names_list', ['mtx'])
        Affine2D.set_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.set_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.set_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.set_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.set_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.set_matrix.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.set_matrix', ['mtx'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_matrix', localization, ['mtx'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_matrix(...)' code ##################

        unicode_158442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1957, (-1)), 'unicode', u'\n        Set the underlying transformation matrix from a 3x3 numpy array::\n\n          a c e\n          b d f\n          0 0 1\n\n        .\n        ')
        
        # Assigning a Name to a Attribute (line 1958):
        
        # Assigning a Name to a Attribute (line 1958):
        # Getting the type of 'mtx' (line 1958)
        mtx_158443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 20), 'mtx')
        # Getting the type of 'self' (line 1958)
        self_158444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 1958)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 8), self_158444, '_mtx', mtx_158443)
        
        # Call to invalidate(...): (line 1959)
        # Processing the call keyword arguments (line 1959)
        kwargs_158447 = {}
        # Getting the type of 'self' (line 1959)
        self_158445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 1959)
        invalidate_158446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1959, 8), self_158445, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1959)
        invalidate_call_result_158448 = invoke(stypy.reporting.localization.Localization(__file__, 1959, 8), invalidate_158446, *[], **kwargs_158447)
        
        
        # ################# End of 'set_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 1948)
        stypy_return_type_158449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158449)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_matrix'
        return stypy_return_type_158449


    @norecursion
    def set(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set'
        module_type_store = module_type_store.open_function_context('set', 1961, 4, False)
        # Assigning a type to the variable 'self' (line 1962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.set.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.set.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.set.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.set.__dict__.__setitem__('stypy_function_name', 'Affine2D.set')
        Affine2D.set.__dict__.__setitem__('stypy_param_names_list', ['other'])
        Affine2D.set.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.set.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.set.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.set.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.set.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.set.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.set', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set(...)' code ##################

        unicode_158450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1965, (-1)), 'unicode', u'\n        Set this transformation from the frozen copy of another\n        :class:`Affine2DBase` object.\n        ')
        
        
        
        # Call to isinstance(...): (line 1966)
        # Processing the call arguments (line 1966)
        # Getting the type of 'other' (line 1966)
        other_158452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 26), 'other', False)
        # Getting the type of 'Affine2DBase' (line 1966)
        Affine2DBase_158453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 33), 'Affine2DBase', False)
        # Processing the call keyword arguments (line 1966)
        kwargs_158454 = {}
        # Getting the type of 'isinstance' (line 1966)
        isinstance_158451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1966)
        isinstance_call_result_158455 = invoke(stypy.reporting.localization.Localization(__file__, 1966, 15), isinstance_158451, *[other_158452, Affine2DBase_158453], **kwargs_158454)
        
        # Applying the 'not' unary operator (line 1966)
        result_not__158456 = python_operator(stypy.reporting.localization.Localization(__file__, 1966, 11), 'not', isinstance_call_result_158455)
        
        # Testing the type of an if condition (line 1966)
        if_condition_158457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1966, 8), result_not__158456)
        # Assigning a type to the variable 'if_condition_158457' (line 1966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1966, 8), 'if_condition_158457', if_condition_158457)
        # SSA begins for if statement (line 1966)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1967):
        
        # Assigning a Str to a Name (line 1967):
        unicode_158458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1967, 19), 'unicode', u"'other' must be an instance of 'matplotlib.transform.Affine2DBase'")
        # Assigning a type to the variable 'msg' (line 1967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 12), 'msg', unicode_158458)
        
        # Call to ValueError(...): (line 1969)
        # Processing the call arguments (line 1969)
        # Getting the type of 'msg' (line 1969)
        msg_158460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 29), 'msg', False)
        # Processing the call keyword arguments (line 1969)
        kwargs_158461 = {}
        # Getting the type of 'ValueError' (line 1969)
        ValueError_158459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1969)
        ValueError_call_result_158462 = invoke(stypy.reporting.localization.Localization(__file__, 1969, 18), ValueError_158459, *[msg_158460], **kwargs_158461)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1969, 12), ValueError_call_result_158462, 'raise parameter', BaseException)
        # SSA join for if statement (line 1966)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1970):
        
        # Assigning a Call to a Attribute (line 1970):
        
        # Call to get_matrix(...): (line 1970)
        # Processing the call keyword arguments (line 1970)
        kwargs_158465 = {}
        # Getting the type of 'other' (line 1970)
        other_158463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 20), 'other', False)
        # Obtaining the member 'get_matrix' of a type (line 1970)
        get_matrix_158464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1970, 20), other_158463, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1970)
        get_matrix_call_result_158466 = invoke(stypy.reporting.localization.Localization(__file__, 1970, 20), get_matrix_158464, *[], **kwargs_158465)
        
        # Getting the type of 'self' (line 1970)
        self_158467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 1970)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1970, 8), self_158467, '_mtx', get_matrix_call_result_158466)
        
        # Call to invalidate(...): (line 1971)
        # Processing the call keyword arguments (line 1971)
        kwargs_158470 = {}
        # Getting the type of 'self' (line 1971)
        self_158468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 1971)
        invalidate_158469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 8), self_158468, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1971)
        invalidate_call_result_158471 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 8), invalidate_158469, *[], **kwargs_158470)
        
        
        # ################# End of 'set(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set' in the type store
        # Getting the type of 'stypy_return_type' (line 1961)
        stypy_return_type_158472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158472)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set'
        return stypy_return_type_158472


    @staticmethod
    @norecursion
    def identity(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'identity'
        module_type_store = module_type_store.open_function_context('identity', 1973, 4, False)
        
        # Passed parameters checking function
        Affine2D.identity.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.identity.__dict__.__setitem__('stypy_type_of_self', None)
        Affine2D.identity.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.identity.__dict__.__setitem__('stypy_function_name', 'identity')
        Affine2D.identity.__dict__.__setitem__('stypy_param_names_list', [])
        Affine2D.identity.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.identity.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.identity.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.identity.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.identity.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.identity.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, 'identity', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'identity', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'identity(...)' code ##################

        unicode_158473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, (-1)), 'unicode', u'\n        (staticmethod) Return a new :class:`Affine2D` object that is\n        the identity transform.\n\n        Unless this transform will be mutated later on, consider using\n        the faster :class:`IdentityTransform` class instead.\n        ')
        
        # Call to Affine2D(...): (line 1982)
        # Processing the call arguments (line 1982)
        
        # Call to identity(...): (line 1982)
        # Processing the call arguments (line 1982)
        int_158477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1982, 36), 'int')
        # Processing the call keyword arguments (line 1982)
        kwargs_158478 = {}
        # Getting the type of 'np' (line 1982)
        np_158475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 24), 'np', False)
        # Obtaining the member 'identity' of a type (line 1982)
        identity_158476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1982, 24), np_158475, 'identity')
        # Calling identity(args, kwargs) (line 1982)
        identity_call_result_158479 = invoke(stypy.reporting.localization.Localization(__file__, 1982, 24), identity_158476, *[int_158477], **kwargs_158478)
        
        # Processing the call keyword arguments (line 1982)
        kwargs_158480 = {}
        # Getting the type of 'Affine2D' (line 1982)
        Affine2D_158474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 15), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 1982)
        Affine2D_call_result_158481 = invoke(stypy.reporting.localization.Localization(__file__, 1982, 15), Affine2D_158474, *[identity_call_result_158479], **kwargs_158480)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1982, 8), 'stypy_return_type', Affine2D_call_result_158481)
        
        # ################# End of 'identity(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'identity' in the type store
        # Getting the type of 'stypy_return_type' (line 1973)
        stypy_return_type_158482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158482)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'identity'
        return stypy_return_type_158482


    @norecursion
    def clear(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'clear'
        module_type_store = module_type_store.open_function_context('clear', 1984, 4, False)
        # Assigning a type to the variable 'self' (line 1985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.clear.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.clear.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.clear.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.clear.__dict__.__setitem__('stypy_function_name', 'Affine2D.clear')
        Affine2D.clear.__dict__.__setitem__('stypy_param_names_list', [])
        Affine2D.clear.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.clear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.clear.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.clear.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.clear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.clear.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.clear', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clear', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clear(...)' code ##################

        unicode_158483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1987, (-1)), 'unicode', u'\n        Reset the underlying matrix to the identity transform.\n        ')
        
        # Assigning a Call to a Attribute (line 1988):
        
        # Assigning a Call to a Attribute (line 1988):
        
        # Call to identity(...): (line 1988)
        # Processing the call arguments (line 1988)
        int_158486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1988, 32), 'int')
        # Processing the call keyword arguments (line 1988)
        kwargs_158487 = {}
        # Getting the type of 'np' (line 1988)
        np_158484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 20), 'np', False)
        # Obtaining the member 'identity' of a type (line 1988)
        identity_158485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 20), np_158484, 'identity')
        # Calling identity(args, kwargs) (line 1988)
        identity_call_result_158488 = invoke(stypy.reporting.localization.Localization(__file__, 1988, 20), identity_158485, *[int_158486], **kwargs_158487)
        
        # Getting the type of 'self' (line 1988)
        self_158489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 1988)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 8), self_158489, '_mtx', identity_call_result_158488)
        
        # Call to invalidate(...): (line 1989)
        # Processing the call keyword arguments (line 1989)
        kwargs_158492 = {}
        # Getting the type of 'self' (line 1989)
        self_158490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 1989)
        invalidate_158491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1989, 8), self_158490, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1989)
        invalidate_call_result_158493 = invoke(stypy.reporting.localization.Localization(__file__, 1989, 8), invalidate_158491, *[], **kwargs_158492)
        
        # Getting the type of 'self' (line 1990)
        self_158494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 1990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 8), 'stypy_return_type', self_158494)
        
        # ################# End of 'clear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clear' in the type store
        # Getting the type of 'stypy_return_type' (line 1984)
        stypy_return_type_158495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158495)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clear'
        return stypy_return_type_158495


    @norecursion
    def rotate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rotate'
        module_type_store = module_type_store.open_function_context('rotate', 1992, 4, False)
        # Assigning a type to the variable 'self' (line 1993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1993, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.rotate.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.rotate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.rotate.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.rotate.__dict__.__setitem__('stypy_function_name', 'Affine2D.rotate')
        Affine2D.rotate.__dict__.__setitem__('stypy_param_names_list', ['theta'])
        Affine2D.rotate.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.rotate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.rotate.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.rotate.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.rotate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.rotate.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.rotate', ['theta'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rotate', localization, ['theta'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rotate(...)' code ##################

        unicode_158496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1999, (-1)), 'unicode', u'\n        Add a rotation (in radians) to this transform in place.\n\n        Returns *self*, so this method can easily be chained with more\n        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n        and :meth:`scale`.\n        ')
        
        # Assigning a Call to a Name (line 2000):
        
        # Assigning a Call to a Name (line 2000):
        
        # Call to cos(...): (line 2000)
        # Processing the call arguments (line 2000)
        # Getting the type of 'theta' (line 2000)
        theta_158499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 19), 'theta', False)
        # Processing the call keyword arguments (line 2000)
        kwargs_158500 = {}
        # Getting the type of 'np' (line 2000)
        np_158497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 12), 'np', False)
        # Obtaining the member 'cos' of a type (line 2000)
        cos_158498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2000, 12), np_158497, 'cos')
        # Calling cos(args, kwargs) (line 2000)
        cos_call_result_158501 = invoke(stypy.reporting.localization.Localization(__file__, 2000, 12), cos_158498, *[theta_158499], **kwargs_158500)
        
        # Assigning a type to the variable 'a' (line 2000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2000, 8), 'a', cos_call_result_158501)
        
        # Assigning a Call to a Name (line 2001):
        
        # Assigning a Call to a Name (line 2001):
        
        # Call to sin(...): (line 2001)
        # Processing the call arguments (line 2001)
        # Getting the type of 'theta' (line 2001)
        theta_158504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 19), 'theta', False)
        # Processing the call keyword arguments (line 2001)
        kwargs_158505 = {}
        # Getting the type of 'np' (line 2001)
        np_158502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 12), 'np', False)
        # Obtaining the member 'sin' of a type (line 2001)
        sin_158503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2001, 12), np_158502, 'sin')
        # Calling sin(args, kwargs) (line 2001)
        sin_call_result_158506 = invoke(stypy.reporting.localization.Localization(__file__, 2001, 12), sin_158503, *[theta_158504], **kwargs_158505)
        
        # Assigning a type to the variable 'b' (line 2001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2001, 8), 'b', sin_call_result_158506)
        
        # Assigning a Call to a Name (line 2002):
        
        # Assigning a Call to a Name (line 2002):
        
        # Call to array(...): (line 2002)
        # Processing the call arguments (line 2002)
        
        # Obtaining an instance of the builtin type 'list' (line 2002)
        list_158509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2002, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2002)
        # Adding element type (line 2002)
        
        # Obtaining an instance of the builtin type 'list' (line 2002)
        list_158510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2002, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2002)
        # Adding element type (line 2002)
        # Getting the type of 'a' (line 2002)
        a_158511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 32), 'a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 31), list_158510, a_158511)
        # Adding element type (line 2002)
        
        # Getting the type of 'b' (line 2002)
        b_158512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 36), 'b', False)
        # Applying the 'usub' unary operator (line 2002)
        result___neg___158513 = python_operator(stypy.reporting.localization.Localization(__file__, 2002, 35), 'usub', b_158512)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 31), list_158510, result___neg___158513)
        # Adding element type (line 2002)
        float_158514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2002, 39), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 31), list_158510, float_158514)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 30), list_158509, list_158510)
        # Adding element type (line 2002)
        
        # Obtaining an instance of the builtin type 'list' (line 2002)
        list_158515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2002, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2002)
        # Adding element type (line 2002)
        # Getting the type of 'b' (line 2002)
        b_158516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 46), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 45), list_158515, b_158516)
        # Adding element type (line 2002)
        # Getting the type of 'a' (line 2002)
        a_158517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 49), 'a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 45), list_158515, a_158517)
        # Adding element type (line 2002)
        float_158518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2002, 52), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 45), list_158515, float_158518)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 30), list_158509, list_158515)
        # Adding element type (line 2002)
        
        # Obtaining an instance of the builtin type 'list' (line 2002)
        list_158519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2002, 58), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2002)
        # Adding element type (line 2002)
        float_158520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2002, 59), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 58), list_158519, float_158520)
        # Adding element type (line 2002)
        float_158521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2002, 64), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 58), list_158519, float_158521)
        # Adding element type (line 2002)
        float_158522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2002, 69), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 58), list_158519, float_158522)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2002, 30), list_158509, list_158519)
        
        # Getting the type of 'float' (line 2003)
        float_158523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 30), 'float', False)
        # Processing the call keyword arguments (line 2002)
        kwargs_158524 = {}
        # Getting the type of 'np' (line 2002)
        np_158507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 21), 'np', False)
        # Obtaining the member 'array' of a type (line 2002)
        array_158508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2002, 21), np_158507, 'array')
        # Calling array(args, kwargs) (line 2002)
        array_call_result_158525 = invoke(stypy.reporting.localization.Localization(__file__, 2002, 21), array_158508, *[list_158509, float_158523], **kwargs_158524)
        
        # Assigning a type to the variable 'rotate_mtx' (line 2002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2002, 8), 'rotate_mtx', array_call_result_158525)
        
        # Assigning a Call to a Attribute (line 2004):
        
        # Assigning a Call to a Attribute (line 2004):
        
        # Call to dot(...): (line 2004)
        # Processing the call arguments (line 2004)
        # Getting the type of 'rotate_mtx' (line 2004)
        rotate_mtx_158528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 27), 'rotate_mtx', False)
        # Getting the type of 'self' (line 2004)
        self_158529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 39), 'self', False)
        # Obtaining the member '_mtx' of a type (line 2004)
        _mtx_158530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 39), self_158529, '_mtx')
        # Processing the call keyword arguments (line 2004)
        kwargs_158531 = {}
        # Getting the type of 'np' (line 2004)
        np_158526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 20), 'np', False)
        # Obtaining the member 'dot' of a type (line 2004)
        dot_158527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 20), np_158526, 'dot')
        # Calling dot(args, kwargs) (line 2004)
        dot_call_result_158532 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 20), dot_158527, *[rotate_mtx_158528, _mtx_158530], **kwargs_158531)
        
        # Getting the type of 'self' (line 2004)
        self_158533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 2004)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 8), self_158533, '_mtx', dot_call_result_158532)
        
        # Call to invalidate(...): (line 2005)
        # Processing the call keyword arguments (line 2005)
        kwargs_158536 = {}
        # Getting the type of 'self' (line 2005)
        self_158534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 2005)
        invalidate_158535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2005, 8), self_158534, 'invalidate')
        # Calling invalidate(args, kwargs) (line 2005)
        invalidate_call_result_158537 = invoke(stypy.reporting.localization.Localization(__file__, 2005, 8), invalidate_158535, *[], **kwargs_158536)
        
        # Getting the type of 'self' (line 2006)
        self_158538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 2006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2006, 8), 'stypy_return_type', self_158538)
        
        # ################# End of 'rotate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rotate' in the type store
        # Getting the type of 'stypy_return_type' (line 1992)
        stypy_return_type_158539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158539)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rotate'
        return stypy_return_type_158539


    @norecursion
    def rotate_deg(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rotate_deg'
        module_type_store = module_type_store.open_function_context('rotate_deg', 2008, 4, False)
        # Assigning a type to the variable 'self' (line 2009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2009, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_function_name', 'Affine2D.rotate_deg')
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_param_names_list', ['degrees'])
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.rotate_deg.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.rotate_deg', ['degrees'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rotate_deg', localization, ['degrees'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rotate_deg(...)' code ##################

        unicode_158540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, (-1)), 'unicode', u'\n        Add a rotation (in degrees) to this transform in place.\n\n        Returns *self*, so this method can easily be chained with more\n        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n        and :meth:`scale`.\n        ')
        
        # Call to rotate(...): (line 2016)
        # Processing the call arguments (line 2016)
        # Getting the type of 'degrees' (line 2016)
        degrees_158543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 27), 'degrees', False)
        # Getting the type of 'np' (line 2016)
        np_158544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 37), 'np', False)
        # Obtaining the member 'pi' of a type (line 2016)
        pi_158545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2016, 37), np_158544, 'pi')
        # Applying the binary operator '*' (line 2016)
        result_mul_158546 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 27), '*', degrees_158543, pi_158545)
        
        float_158547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2016, 45), 'float')
        # Applying the binary operator 'div' (line 2016)
        result_div_158548 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 43), 'div', result_mul_158546, float_158547)
        
        # Processing the call keyword arguments (line 2016)
        kwargs_158549 = {}
        # Getting the type of 'self' (line 2016)
        self_158541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 15), 'self', False)
        # Obtaining the member 'rotate' of a type (line 2016)
        rotate_158542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2016, 15), self_158541, 'rotate')
        # Calling rotate(args, kwargs) (line 2016)
        rotate_call_result_158550 = invoke(stypy.reporting.localization.Localization(__file__, 2016, 15), rotate_158542, *[result_div_158548], **kwargs_158549)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2016, 8), 'stypy_return_type', rotate_call_result_158550)
        
        # ################# End of 'rotate_deg(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rotate_deg' in the type store
        # Getting the type of 'stypy_return_type' (line 2008)
        stypy_return_type_158551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158551)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rotate_deg'
        return stypy_return_type_158551


    @norecursion
    def rotate_around(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rotate_around'
        module_type_store = module_type_store.open_function_context('rotate_around', 2018, 4, False)
        # Assigning a type to the variable 'self' (line 2019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2019, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.rotate_around.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.rotate_around.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.rotate_around.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.rotate_around.__dict__.__setitem__('stypy_function_name', 'Affine2D.rotate_around')
        Affine2D.rotate_around.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'theta'])
        Affine2D.rotate_around.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.rotate_around.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.rotate_around.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.rotate_around.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.rotate_around.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.rotate_around.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.rotate_around', ['x', 'y', 'theta'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rotate_around', localization, ['x', 'y', 'theta'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rotate_around(...)' code ##################

        unicode_158552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2025, (-1)), 'unicode', u'\n        Add a rotation (in radians) around the point (x, y) in place.\n\n        Returns *self*, so this method can easily be chained with more\n        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n        and :meth:`scale`.\n        ')
        
        # Call to translate(...): (line 2026)
        # Processing the call arguments (line 2026)
        # Getting the type of 'x' (line 2026)
        x_158566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 62), 'x', False)
        # Getting the type of 'y' (line 2026)
        y_158567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 65), 'y', False)
        # Processing the call keyword arguments (line 2026)
        kwargs_158568 = {}
        
        # Call to rotate(...): (line 2026)
        # Processing the call arguments (line 2026)
        # Getting the type of 'theta' (line 2026)
        theta_158562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 45), 'theta', False)
        # Processing the call keyword arguments (line 2026)
        kwargs_158563 = {}
        
        # Call to translate(...): (line 2026)
        # Processing the call arguments (line 2026)
        
        # Getting the type of 'x' (line 2026)
        x_158555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 31), 'x', False)
        # Applying the 'usub' unary operator (line 2026)
        result___neg___158556 = python_operator(stypy.reporting.localization.Localization(__file__, 2026, 30), 'usub', x_158555)
        
        
        # Getting the type of 'y' (line 2026)
        y_158557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 35), 'y', False)
        # Applying the 'usub' unary operator (line 2026)
        result___neg___158558 = python_operator(stypy.reporting.localization.Localization(__file__, 2026, 34), 'usub', y_158557)
        
        # Processing the call keyword arguments (line 2026)
        kwargs_158559 = {}
        # Getting the type of 'self' (line 2026)
        self_158553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 15), 'self', False)
        # Obtaining the member 'translate' of a type (line 2026)
        translate_158554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2026, 15), self_158553, 'translate')
        # Calling translate(args, kwargs) (line 2026)
        translate_call_result_158560 = invoke(stypy.reporting.localization.Localization(__file__, 2026, 15), translate_158554, *[result___neg___158556, result___neg___158558], **kwargs_158559)
        
        # Obtaining the member 'rotate' of a type (line 2026)
        rotate_158561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2026, 15), translate_call_result_158560, 'rotate')
        # Calling rotate(args, kwargs) (line 2026)
        rotate_call_result_158564 = invoke(stypy.reporting.localization.Localization(__file__, 2026, 15), rotate_158561, *[theta_158562], **kwargs_158563)
        
        # Obtaining the member 'translate' of a type (line 2026)
        translate_158565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2026, 15), rotate_call_result_158564, 'translate')
        # Calling translate(args, kwargs) (line 2026)
        translate_call_result_158569 = invoke(stypy.reporting.localization.Localization(__file__, 2026, 15), translate_158565, *[x_158566, y_158567], **kwargs_158568)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2026)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2026, 8), 'stypy_return_type', translate_call_result_158569)
        
        # ################# End of 'rotate_around(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rotate_around' in the type store
        # Getting the type of 'stypy_return_type' (line 2018)
        stypy_return_type_158570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158570)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rotate_around'
        return stypy_return_type_158570


    @norecursion
    def rotate_deg_around(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rotate_deg_around'
        module_type_store = module_type_store.open_function_context('rotate_deg_around', 2028, 4, False)
        # Assigning a type to the variable 'self' (line 2029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2029, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_function_name', 'Affine2D.rotate_deg_around')
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'degrees'])
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.rotate_deg_around.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.rotate_deg_around', ['x', 'y', 'degrees'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rotate_deg_around', localization, ['x', 'y', 'degrees'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rotate_deg_around(...)' code ##################

        unicode_158571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2035, (-1)), 'unicode', u'\n        Add a rotation (in degrees) around the point (x, y) in place.\n\n        Returns *self*, so this method can easily be chained with more\n        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n        and :meth:`scale`.\n        ')
        
        # Assigning a Tuple to a Tuple (line 2037):
        
        # Assigning a Call to a Name (line 2037):
        
        # Call to float(...): (line 2037)
        # Processing the call arguments (line 2037)
        # Getting the type of 'x' (line 2037)
        x_158573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 21), 'x', False)
        # Processing the call keyword arguments (line 2037)
        kwargs_158574 = {}
        # Getting the type of 'float' (line 2037)
        float_158572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 15), 'float', False)
        # Calling float(args, kwargs) (line 2037)
        float_call_result_158575 = invoke(stypy.reporting.localization.Localization(__file__, 2037, 15), float_158572, *[x_158573], **kwargs_158574)
        
        # Assigning a type to the variable 'tuple_assignment_154303' (line 2037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 8), 'tuple_assignment_154303', float_call_result_158575)
        
        # Assigning a Call to a Name (line 2037):
        
        # Call to float(...): (line 2037)
        # Processing the call arguments (line 2037)
        # Getting the type of 'y' (line 2037)
        y_158577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 31), 'y', False)
        # Processing the call keyword arguments (line 2037)
        kwargs_158578 = {}
        # Getting the type of 'float' (line 2037)
        float_158576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 25), 'float', False)
        # Calling float(args, kwargs) (line 2037)
        float_call_result_158579 = invoke(stypy.reporting.localization.Localization(__file__, 2037, 25), float_158576, *[y_158577], **kwargs_158578)
        
        # Assigning a type to the variable 'tuple_assignment_154304' (line 2037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 8), 'tuple_assignment_154304', float_call_result_158579)
        
        # Assigning a Name to a Name (line 2037):
        # Getting the type of 'tuple_assignment_154303' (line 2037)
        tuple_assignment_154303_158580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 8), 'tuple_assignment_154303')
        # Assigning a type to the variable 'x' (line 2037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 8), 'x', tuple_assignment_154303_158580)
        
        # Assigning a Name to a Name (line 2037):
        # Getting the type of 'tuple_assignment_154304' (line 2037)
        tuple_assignment_154304_158581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 8), 'tuple_assignment_154304')
        # Assigning a type to the variable 'y' (line 2037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 11), 'y', tuple_assignment_154304_158581)
        
        # Call to translate(...): (line 2038)
        # Processing the call arguments (line 2038)
        # Getting the type of 'x' (line 2038)
        x_158595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 68), 'x', False)
        # Getting the type of 'y' (line 2038)
        y_158596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 71), 'y', False)
        # Processing the call keyword arguments (line 2038)
        kwargs_158597 = {}
        
        # Call to rotate_deg(...): (line 2038)
        # Processing the call arguments (line 2038)
        # Getting the type of 'degrees' (line 2038)
        degrees_158591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 49), 'degrees', False)
        # Processing the call keyword arguments (line 2038)
        kwargs_158592 = {}
        
        # Call to translate(...): (line 2038)
        # Processing the call arguments (line 2038)
        
        # Getting the type of 'x' (line 2038)
        x_158584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 31), 'x', False)
        # Applying the 'usub' unary operator (line 2038)
        result___neg___158585 = python_operator(stypy.reporting.localization.Localization(__file__, 2038, 30), 'usub', x_158584)
        
        
        # Getting the type of 'y' (line 2038)
        y_158586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 35), 'y', False)
        # Applying the 'usub' unary operator (line 2038)
        result___neg___158587 = python_operator(stypy.reporting.localization.Localization(__file__, 2038, 34), 'usub', y_158586)
        
        # Processing the call keyword arguments (line 2038)
        kwargs_158588 = {}
        # Getting the type of 'self' (line 2038)
        self_158582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 15), 'self', False)
        # Obtaining the member 'translate' of a type (line 2038)
        translate_158583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 15), self_158582, 'translate')
        # Calling translate(args, kwargs) (line 2038)
        translate_call_result_158589 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 15), translate_158583, *[result___neg___158585, result___neg___158587], **kwargs_158588)
        
        # Obtaining the member 'rotate_deg' of a type (line 2038)
        rotate_deg_158590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 15), translate_call_result_158589, 'rotate_deg')
        # Calling rotate_deg(args, kwargs) (line 2038)
        rotate_deg_call_result_158593 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 15), rotate_deg_158590, *[degrees_158591], **kwargs_158592)
        
        # Obtaining the member 'translate' of a type (line 2038)
        translate_158594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 15), rotate_deg_call_result_158593, 'translate')
        # Calling translate(args, kwargs) (line 2038)
        translate_call_result_158598 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 15), translate_158594, *[x_158595, y_158596], **kwargs_158597)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2038, 8), 'stypy_return_type', translate_call_result_158598)
        
        # ################# End of 'rotate_deg_around(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rotate_deg_around' in the type store
        # Getting the type of 'stypy_return_type' (line 2028)
        stypy_return_type_158599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158599)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rotate_deg_around'
        return stypy_return_type_158599


    @norecursion
    def translate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'translate'
        module_type_store = module_type_store.open_function_context('translate', 2040, 4, False)
        # Assigning a type to the variable 'self' (line 2041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.translate.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.translate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.translate.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.translate.__dict__.__setitem__('stypy_function_name', 'Affine2D.translate')
        Affine2D.translate.__dict__.__setitem__('stypy_param_names_list', ['tx', 'ty'])
        Affine2D.translate.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.translate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.translate.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.translate.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.translate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.translate.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.translate', ['tx', 'ty'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'translate', localization, ['tx', 'ty'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'translate(...)' code ##################

        unicode_158600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2047, (-1)), 'unicode', u'\n        Adds a translation in place.\n\n        Returns *self*, so this method can easily be chained with more\n        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n        and :meth:`scale`.\n        ')
        
        # Assigning a Call to a Name (line 2048):
        
        # Assigning a Call to a Name (line 2048):
        
        # Call to array(...): (line 2048)
        # Processing the call arguments (line 2048)
        
        # Obtaining an instance of the builtin type 'list' (line 2049)
        list_158603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2049)
        # Adding element type (line 2049)
        
        # Obtaining an instance of the builtin type 'list' (line 2049)
        list_158604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2049)
        # Adding element type (line 2049)
        float_158605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 14), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 13), list_158604, float_158605)
        # Adding element type (line 2049)
        float_158606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 19), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 13), list_158604, float_158606)
        # Adding element type (line 2049)
        # Getting the type of 'tx' (line 2049)
        tx_158607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 24), 'tx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 13), list_158604, tx_158607)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 12), list_158603, list_158604)
        # Adding element type (line 2049)
        
        # Obtaining an instance of the builtin type 'list' (line 2049)
        list_158608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2049)
        # Adding element type (line 2049)
        float_158609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 30), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 29), list_158608, float_158609)
        # Adding element type (line 2049)
        float_158610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 35), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 29), list_158608, float_158610)
        # Adding element type (line 2049)
        # Getting the type of 'ty' (line 2049)
        ty_158611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 40), 'ty', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 29), list_158608, ty_158611)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 12), list_158603, list_158608)
        # Adding element type (line 2049)
        
        # Obtaining an instance of the builtin type 'list' (line 2049)
        list_158612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2049)
        # Adding element type (line 2049)
        float_158613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 46), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 45), list_158612, float_158613)
        # Adding element type (line 2049)
        float_158614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 51), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 45), list_158612, float_158614)
        # Adding element type (line 2049)
        float_158615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 56), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 45), list_158612, float_158615)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2049, 12), list_158603, list_158612)
        
        # Getting the type of 'float' (line 2049)
        float_158616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 63), 'float', False)
        # Processing the call keyword arguments (line 2048)
        kwargs_158617 = {}
        # Getting the type of 'np' (line 2048)
        np_158601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 24), 'np', False)
        # Obtaining the member 'array' of a type (line 2048)
        array_158602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2048, 24), np_158601, 'array')
        # Calling array(args, kwargs) (line 2048)
        array_call_result_158618 = invoke(stypy.reporting.localization.Localization(__file__, 2048, 24), array_158602, *[list_158603, float_158616], **kwargs_158617)
        
        # Assigning a type to the variable 'translate_mtx' (line 2048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 8), 'translate_mtx', array_call_result_158618)
        
        # Assigning a Call to a Attribute (line 2050):
        
        # Assigning a Call to a Attribute (line 2050):
        
        # Call to dot(...): (line 2050)
        # Processing the call arguments (line 2050)
        # Getting the type of 'translate_mtx' (line 2050)
        translate_mtx_158621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 27), 'translate_mtx', False)
        # Getting the type of 'self' (line 2050)
        self_158622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 42), 'self', False)
        # Obtaining the member '_mtx' of a type (line 2050)
        _mtx_158623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2050, 42), self_158622, '_mtx')
        # Processing the call keyword arguments (line 2050)
        kwargs_158624 = {}
        # Getting the type of 'np' (line 2050)
        np_158619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 20), 'np', False)
        # Obtaining the member 'dot' of a type (line 2050)
        dot_158620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2050, 20), np_158619, 'dot')
        # Calling dot(args, kwargs) (line 2050)
        dot_call_result_158625 = invoke(stypy.reporting.localization.Localization(__file__, 2050, 20), dot_158620, *[translate_mtx_158621, _mtx_158623], **kwargs_158624)
        
        # Getting the type of 'self' (line 2050)
        self_158626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 2050)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2050, 8), self_158626, '_mtx', dot_call_result_158625)
        
        # Call to invalidate(...): (line 2051)
        # Processing the call keyword arguments (line 2051)
        kwargs_158629 = {}
        # Getting the type of 'self' (line 2051)
        self_158627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 2051)
        invalidate_158628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2051, 8), self_158627, 'invalidate')
        # Calling invalidate(args, kwargs) (line 2051)
        invalidate_call_result_158630 = invoke(stypy.reporting.localization.Localization(__file__, 2051, 8), invalidate_158628, *[], **kwargs_158629)
        
        # Getting the type of 'self' (line 2052)
        self_158631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 2052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2052, 8), 'stypy_return_type', self_158631)
        
        # ################# End of 'translate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'translate' in the type store
        # Getting the type of 'stypy_return_type' (line 2040)
        stypy_return_type_158632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158632)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'translate'
        return stypy_return_type_158632


    @norecursion
    def scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2054)
        None_158633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 27), 'None')
        defaults = [None_158633]
        # Create a new context for function 'scale'
        module_type_store = module_type_store.open_function_context('scale', 2054, 4, False)
        # Assigning a type to the variable 'self' (line 2055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.scale.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.scale.__dict__.__setitem__('stypy_function_name', 'Affine2D.scale')
        Affine2D.scale.__dict__.__setitem__('stypy_param_names_list', ['sx', 'sy'])
        Affine2D.scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.scale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.scale.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.scale', ['sx', 'sy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'scale', localization, ['sx', 'sy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'scale(...)' code ##################

        unicode_158634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2064, (-1)), 'unicode', u'\n        Adds a scale in place.\n\n        If *sy* is None, the same scale is applied in both the *x*- and\n        *y*-directions.\n\n        Returns *self*, so this method can easily be chained with more\n        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n        and :meth:`scale`.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2065)
        # Getting the type of 'sy' (line 2065)
        sy_158635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2065, 11), 'sy')
        # Getting the type of 'None' (line 2065)
        None_158636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2065, 17), 'None')
        
        (may_be_158637, more_types_in_union_158638) = may_be_none(sy_158635, None_158636)

        if may_be_158637:

            if more_types_in_union_158638:
                # Runtime conditional SSA (line 2065)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 2066):
            
            # Assigning a Name to a Name (line 2066):
            # Getting the type of 'sx' (line 2066)
            sx_158639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 17), 'sx')
            # Assigning a type to the variable 'sy' (line 2066)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 12), 'sy', sx_158639)

            if more_types_in_union_158638:
                # SSA join for if statement (line 2065)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2067):
        
        # Assigning a Call to a Name (line 2067):
        
        # Call to array(...): (line 2067)
        # Processing the call arguments (line 2067)
        
        # Obtaining an instance of the builtin type 'list' (line 2068)
        list_158642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2068)
        # Adding element type (line 2068)
        
        # Obtaining an instance of the builtin type 'list' (line 2068)
        list_158643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2068)
        # Adding element type (line 2068)
        # Getting the type of 'sx' (line 2068)
        sx_158644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 14), 'sx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 13), list_158643, sx_158644)
        # Adding element type (line 2068)
        float_158645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 18), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 13), list_158643, float_158645)
        # Adding element type (line 2068)
        float_158646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 23), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 13), list_158643, float_158646)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 12), list_158642, list_158643)
        # Adding element type (line 2068)
        
        # Obtaining an instance of the builtin type 'list' (line 2068)
        list_158647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2068)
        # Adding element type (line 2068)
        float_158648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 30), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 29), list_158647, float_158648)
        # Adding element type (line 2068)
        # Getting the type of 'sy' (line 2068)
        sy_158649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 35), 'sy', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 29), list_158647, sy_158649)
        # Adding element type (line 2068)
        float_158650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 39), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 29), list_158647, float_158650)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 12), list_158642, list_158647)
        # Adding element type (line 2068)
        
        # Obtaining an instance of the builtin type 'list' (line 2068)
        list_158651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2068)
        # Adding element type (line 2068)
        float_158652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 46), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 45), list_158651, float_158652)
        # Adding element type (line 2068)
        float_158653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 51), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 45), list_158651, float_158653)
        # Adding element type (line 2068)
        float_158654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 56), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 45), list_158651, float_158654)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 12), list_158642, list_158651)
        
        # Getting the type of 'float' (line 2068)
        float_158655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 63), 'float', False)
        # Processing the call keyword arguments (line 2067)
        kwargs_158656 = {}
        # Getting the type of 'np' (line 2067)
        np_158640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 2067)
        array_158641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 20), np_158640, 'array')
        # Calling array(args, kwargs) (line 2067)
        array_call_result_158657 = invoke(stypy.reporting.localization.Localization(__file__, 2067, 20), array_158641, *[list_158642, float_158655], **kwargs_158656)
        
        # Assigning a type to the variable 'scale_mtx' (line 2067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'scale_mtx', array_call_result_158657)
        
        # Assigning a Call to a Attribute (line 2069):
        
        # Assigning a Call to a Attribute (line 2069):
        
        # Call to dot(...): (line 2069)
        # Processing the call arguments (line 2069)
        # Getting the type of 'scale_mtx' (line 2069)
        scale_mtx_158660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 27), 'scale_mtx', False)
        # Getting the type of 'self' (line 2069)
        self_158661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 38), 'self', False)
        # Obtaining the member '_mtx' of a type (line 2069)
        _mtx_158662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2069, 38), self_158661, '_mtx')
        # Processing the call keyword arguments (line 2069)
        kwargs_158663 = {}
        # Getting the type of 'np' (line 2069)
        np_158658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 20), 'np', False)
        # Obtaining the member 'dot' of a type (line 2069)
        dot_158659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2069, 20), np_158658, 'dot')
        # Calling dot(args, kwargs) (line 2069)
        dot_call_result_158664 = invoke(stypy.reporting.localization.Localization(__file__, 2069, 20), dot_158659, *[scale_mtx_158660, _mtx_158662], **kwargs_158663)
        
        # Getting the type of 'self' (line 2069)
        self_158665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 2069)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2069, 8), self_158665, '_mtx', dot_call_result_158664)
        
        # Call to invalidate(...): (line 2070)
        # Processing the call keyword arguments (line 2070)
        kwargs_158668 = {}
        # Getting the type of 'self' (line 2070)
        self_158666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 2070)
        invalidate_158667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2070, 8), self_158666, 'invalidate')
        # Calling invalidate(args, kwargs) (line 2070)
        invalidate_call_result_158669 = invoke(stypy.reporting.localization.Localization(__file__, 2070, 8), invalidate_158667, *[], **kwargs_158668)
        
        # Getting the type of 'self' (line 2071)
        self_158670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 2071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2071, 8), 'stypy_return_type', self_158670)
        
        # ################# End of 'scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'scale' in the type store
        # Getting the type of 'stypy_return_type' (line 2054)
        stypy_return_type_158671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158671)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'scale'
        return stypy_return_type_158671


    @norecursion
    def skew(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'skew'
        module_type_store = module_type_store.open_function_context('skew', 2073, 4, False)
        # Assigning a type to the variable 'self' (line 2074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2074, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.skew.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.skew.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.skew.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.skew.__dict__.__setitem__('stypy_function_name', 'Affine2D.skew')
        Affine2D.skew.__dict__.__setitem__('stypy_param_names_list', ['xShear', 'yShear'])
        Affine2D.skew.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.skew.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.skew.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.skew.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.skew.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.skew.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.skew', ['xShear', 'yShear'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'skew', localization, ['xShear', 'yShear'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'skew(...)' code ##################

        unicode_158672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, (-1)), 'unicode', u'\n        Adds a skew in place.\n\n        *xShear* and *yShear* are the shear angles along the *x*- and\n        *y*-axes, respectively, in radians.\n\n        Returns *self*, so this method can easily be chained with more\n        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n        and :meth:`scale`.\n        ')
        
        # Assigning a Call to a Name (line 2084):
        
        # Assigning a Call to a Name (line 2084):
        
        # Call to tan(...): (line 2084)
        # Processing the call arguments (line 2084)
        # Getting the type of 'xShear' (line 2084)
        xShear_158675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 22), 'xShear', False)
        # Processing the call keyword arguments (line 2084)
        kwargs_158676 = {}
        # Getting the type of 'np' (line 2084)
        np_158673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 15), 'np', False)
        # Obtaining the member 'tan' of a type (line 2084)
        tan_158674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2084, 15), np_158673, 'tan')
        # Calling tan(args, kwargs) (line 2084)
        tan_call_result_158677 = invoke(stypy.reporting.localization.Localization(__file__, 2084, 15), tan_158674, *[xShear_158675], **kwargs_158676)
        
        # Assigning a type to the variable 'rotX' (line 2084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2084, 8), 'rotX', tan_call_result_158677)
        
        # Assigning a Call to a Name (line 2085):
        
        # Assigning a Call to a Name (line 2085):
        
        # Call to tan(...): (line 2085)
        # Processing the call arguments (line 2085)
        # Getting the type of 'yShear' (line 2085)
        yShear_158680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 22), 'yShear', False)
        # Processing the call keyword arguments (line 2085)
        kwargs_158681 = {}
        # Getting the type of 'np' (line 2085)
        np_158678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 15), 'np', False)
        # Obtaining the member 'tan' of a type (line 2085)
        tan_158679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2085, 15), np_158678, 'tan')
        # Calling tan(args, kwargs) (line 2085)
        tan_call_result_158682 = invoke(stypy.reporting.localization.Localization(__file__, 2085, 15), tan_158679, *[yShear_158680], **kwargs_158681)
        
        # Assigning a type to the variable 'rotY' (line 2085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2085, 8), 'rotY', tan_call_result_158682)
        
        # Assigning a Call to a Name (line 2086):
        
        # Assigning a Call to a Name (line 2086):
        
        # Call to array(...): (line 2086)
        # Processing the call arguments (line 2086)
        
        # Obtaining an instance of the builtin type 'list' (line 2087)
        list_158685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2087)
        # Adding element type (line 2087)
        
        # Obtaining an instance of the builtin type 'list' (line 2087)
        list_158686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2087)
        # Adding element type (line 2087)
        float_158687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 14), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 13), list_158686, float_158687)
        # Adding element type (line 2087)
        # Getting the type of 'rotX' (line 2087)
        rotX_158688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 19), 'rotX', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 13), list_158686, rotX_158688)
        # Adding element type (line 2087)
        float_158689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 13), list_158686, float_158689)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 12), list_158685, list_158686)
        # Adding element type (line 2087)
        
        # Obtaining an instance of the builtin type 'list' (line 2087)
        list_158690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2087)
        # Adding element type (line 2087)
        # Getting the type of 'rotY' (line 2087)
        rotY_158691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 32), 'rotY', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 31), list_158690, rotY_158691)
        # Adding element type (line 2087)
        float_158692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 31), list_158690, float_158692)
        # Adding element type (line 2087)
        float_158693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 43), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 31), list_158690, float_158693)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 12), list_158685, list_158690)
        # Adding element type (line 2087)
        
        # Obtaining an instance of the builtin type 'list' (line 2087)
        list_158694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 49), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2087)
        # Adding element type (line 2087)
        float_158695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 50), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 49), list_158694, float_158695)
        # Adding element type (line 2087)
        float_158696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 55), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 49), list_158694, float_158696)
        # Adding element type (line 2087)
        float_158697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 60), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 49), list_158694, float_158697)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2087, 12), list_158685, list_158694)
        
        # Getting the type of 'float' (line 2087)
        float_158698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 67), 'float', False)
        # Processing the call keyword arguments (line 2086)
        kwargs_158699 = {}
        # Getting the type of 'np' (line 2086)
        np_158683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 19), 'np', False)
        # Obtaining the member 'array' of a type (line 2086)
        array_158684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2086, 19), np_158683, 'array')
        # Calling array(args, kwargs) (line 2086)
        array_call_result_158700 = invoke(stypy.reporting.localization.Localization(__file__, 2086, 19), array_158684, *[list_158685, float_158698], **kwargs_158699)
        
        # Assigning a type to the variable 'skew_mtx' (line 2086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2086, 8), 'skew_mtx', array_call_result_158700)
        
        # Assigning a Call to a Attribute (line 2088):
        
        # Assigning a Call to a Attribute (line 2088):
        
        # Call to dot(...): (line 2088)
        # Processing the call arguments (line 2088)
        # Getting the type of 'skew_mtx' (line 2088)
        skew_mtx_158703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 27), 'skew_mtx', False)
        # Getting the type of 'self' (line 2088)
        self_158704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 37), 'self', False)
        # Obtaining the member '_mtx' of a type (line 2088)
        _mtx_158705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2088, 37), self_158704, '_mtx')
        # Processing the call keyword arguments (line 2088)
        kwargs_158706 = {}
        # Getting the type of 'np' (line 2088)
        np_158701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 20), 'np', False)
        # Obtaining the member 'dot' of a type (line 2088)
        dot_158702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2088, 20), np_158701, 'dot')
        # Calling dot(args, kwargs) (line 2088)
        dot_call_result_158707 = invoke(stypy.reporting.localization.Localization(__file__, 2088, 20), dot_158702, *[skew_mtx_158703, _mtx_158705], **kwargs_158706)
        
        # Getting the type of 'self' (line 2088)
        self_158708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 2088)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2088, 8), self_158708, '_mtx', dot_call_result_158707)
        
        # Call to invalidate(...): (line 2089)
        # Processing the call keyword arguments (line 2089)
        kwargs_158711 = {}
        # Getting the type of 'self' (line 2089)
        self_158709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 8), 'self', False)
        # Obtaining the member 'invalidate' of a type (line 2089)
        invalidate_158710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 8), self_158709, 'invalidate')
        # Calling invalidate(args, kwargs) (line 2089)
        invalidate_call_result_158712 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 8), invalidate_158710, *[], **kwargs_158711)
        
        # Getting the type of 'self' (line 2090)
        self_158713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 2090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2090, 8), 'stypy_return_type', self_158713)
        
        # ################# End of 'skew(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'skew' in the type store
        # Getting the type of 'stypy_return_type' (line 2073)
        stypy_return_type_158714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158714)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'skew'
        return stypy_return_type_158714


    @norecursion
    def skew_deg(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'skew_deg'
        module_type_store = module_type_store.open_function_context('skew_deg', 2092, 4, False)
        # Assigning a type to the variable 'self' (line 2093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2093, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D.skew_deg.__dict__.__setitem__('stypy_localization', localization)
        Affine2D.skew_deg.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D.skew_deg.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D.skew_deg.__dict__.__setitem__('stypy_function_name', 'Affine2D.skew_deg')
        Affine2D.skew_deg.__dict__.__setitem__('stypy_param_names_list', ['xShear', 'yShear'])
        Affine2D.skew_deg.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D.skew_deg.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D.skew_deg.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D.skew_deg.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D.skew_deg.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D.skew_deg.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D.skew_deg', ['xShear', 'yShear'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'skew_deg', localization, ['xShear', 'yShear'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'skew_deg(...)' code ##################

        unicode_158715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2102, (-1)), 'unicode', u'\n        Adds a skew in place.\n\n        *xShear* and *yShear* are the shear angles along the *x*- and\n        *y*-axes, respectively, in degrees.\n\n        Returns *self*, so this method can easily be chained with more\n        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`\n        and :meth:`scale`.\n        ')
        
        # Call to skew(...): (line 2103)
        # Processing the call arguments (line 2103)
        
        # Call to deg2rad(...): (line 2103)
        # Processing the call arguments (line 2103)
        # Getting the type of 'xShear' (line 2103)
        xShear_158720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 36), 'xShear', False)
        # Processing the call keyword arguments (line 2103)
        kwargs_158721 = {}
        # Getting the type of 'np' (line 2103)
        np_158718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 25), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 2103)
        deg2rad_158719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2103, 25), np_158718, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 2103)
        deg2rad_call_result_158722 = invoke(stypy.reporting.localization.Localization(__file__, 2103, 25), deg2rad_158719, *[xShear_158720], **kwargs_158721)
        
        
        # Call to deg2rad(...): (line 2103)
        # Processing the call arguments (line 2103)
        # Getting the type of 'yShear' (line 2103)
        yShear_158725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 56), 'yShear', False)
        # Processing the call keyword arguments (line 2103)
        kwargs_158726 = {}
        # Getting the type of 'np' (line 2103)
        np_158723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 45), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 2103)
        deg2rad_158724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2103, 45), np_158723, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 2103)
        deg2rad_call_result_158727 = invoke(stypy.reporting.localization.Localization(__file__, 2103, 45), deg2rad_158724, *[yShear_158725], **kwargs_158726)
        
        # Processing the call keyword arguments (line 2103)
        kwargs_158728 = {}
        # Getting the type of 'self' (line 2103)
        self_158716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 15), 'self', False)
        # Obtaining the member 'skew' of a type (line 2103)
        skew_158717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2103, 15), self_158716, 'skew')
        # Calling skew(args, kwargs) (line 2103)
        skew_call_result_158729 = invoke(stypy.reporting.localization.Localization(__file__, 2103, 15), skew_158717, *[deg2rad_call_result_158722, deg2rad_call_result_158727], **kwargs_158728)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2103, 8), 'stypy_return_type', skew_call_result_158729)
        
        # ################# End of 'skew_deg(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'skew_deg' in the type store
        # Getting the type of 'stypy_return_type' (line 2092)
        stypy_return_type_158730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158730)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'skew_deg'
        return stypy_return_type_158730


    @norecursion
    def _get_is_separable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_is_separable'
        module_type_store = module_type_store.open_function_context('_get_is_separable', 2105, 4, False)
        # Assigning a type to the variable 'self' (line 2106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2106, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_localization', localization)
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_type_store', module_type_store)
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_function_name', 'Affine2D._get_is_separable')
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_param_names_list', [])
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_varargs_param_name', None)
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_call_defaults', defaults)
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_call_varargs', varargs)
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Affine2D._get_is_separable.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Affine2D._get_is_separable', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_is_separable', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_is_separable(...)' code ##################

        
        # Assigning a Call to a Name (line 2106):
        
        # Assigning a Call to a Name (line 2106):
        
        # Call to get_matrix(...): (line 2106)
        # Processing the call keyword arguments (line 2106)
        kwargs_158733 = {}
        # Getting the type of 'self' (line 2106)
        self_158731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 14), 'self', False)
        # Obtaining the member 'get_matrix' of a type (line 2106)
        get_matrix_158732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2106, 14), self_158731, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 2106)
        get_matrix_call_result_158734 = invoke(stypy.reporting.localization.Localization(__file__, 2106, 14), get_matrix_158732, *[], **kwargs_158733)
        
        # Assigning a type to the variable 'mtx' (line 2106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2106, 8), 'mtx', get_matrix_call_result_158734)
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 2107)
        tuple_158735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2107)
        # Adding element type (line 2107)
        int_158736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2107, 19), tuple_158735, int_158736)
        # Adding element type (line 2107)
        int_158737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2107, 19), tuple_158735, int_158737)
        
        # Getting the type of 'mtx' (line 2107)
        mtx_158738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 15), 'mtx')
        # Obtaining the member '__getitem__' of a type (line 2107)
        getitem___158739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2107, 15), mtx_158738, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2107)
        subscript_call_result_158740 = invoke(stypy.reporting.localization.Localization(__file__, 2107, 15), getitem___158739, tuple_158735)
        
        float_158741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 28), 'float')
        # Applying the binary operator '==' (line 2107)
        result_eq_158742 = python_operator(stypy.reporting.localization.Localization(__file__, 2107, 15), '==', subscript_call_result_158740, float_158741)
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 2107)
        tuple_158743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2107)
        # Adding element type (line 2107)
        int_158744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2107, 40), tuple_158743, int_158744)
        # Adding element type (line 2107)
        int_158745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2107, 40), tuple_158743, int_158745)
        
        # Getting the type of 'mtx' (line 2107)
        mtx_158746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 36), 'mtx')
        # Obtaining the member '__getitem__' of a type (line 2107)
        getitem___158747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2107, 36), mtx_158746, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2107)
        subscript_call_result_158748 = invoke(stypy.reporting.localization.Localization(__file__, 2107, 36), getitem___158747, tuple_158743)
        
        float_158749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 49), 'float')
        # Applying the binary operator '==' (line 2107)
        result_eq_158750 = python_operator(stypy.reporting.localization.Localization(__file__, 2107, 36), '==', subscript_call_result_158748, float_158749)
        
        # Applying the binary operator 'and' (line 2107)
        result_and_keyword_158751 = python_operator(stypy.reporting.localization.Localization(__file__, 2107, 15), 'and', result_eq_158742, result_eq_158750)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2107, 8), 'stypy_return_type', result_and_keyword_158751)
        
        # ################# End of '_get_is_separable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_is_separable' in the type store
        # Getting the type of 'stypy_return_type' (line 2105)
        stypy_return_type_158752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158752)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_is_separable'
        return stypy_return_type_158752

    
    # Assigning a Call to a Name (line 2108):

# Assigning a type to the variable 'Affine2D' (line 1893)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1893, 0), 'Affine2D', Affine2D)

# Assigning a Call to a Name (line 2108):

# Call to property(...): (line 2108)
# Processing the call arguments (line 2108)
# Getting the type of 'Affine2D'
Affine2D_158754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2D', False)
# Obtaining the member '_get_is_separable' of a type
_get_is_separable_158755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2D_158754, '_get_is_separable')
# Processing the call keyword arguments (line 2108)
kwargs_158756 = {}
# Getting the type of 'property' (line 2108)
property_158753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 19), 'property', False)
# Calling property(args, kwargs) (line 2108)
property_call_result_158757 = invoke(stypy.reporting.localization.Localization(__file__, 2108, 19), property_158753, *[_get_is_separable_158755], **kwargs_158756)

# Getting the type of 'Affine2D'
Affine2D_158758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Affine2D')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Affine2D_158758, 'is_separable', property_call_result_158757)
# Declaration of the 'IdentityTransform' class
# Getting the type of 'Affine2DBase' (line 2111)
Affine2DBase_158759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 24), 'Affine2DBase')

class IdentityTransform(Affine2DBase_158759, ):
    unicode_158760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2115, (-1)), 'unicode', u'\n    A special class that does one thing, the identity transform, in a\n    fast way.\n    ')
    
    # Assigning a Call to a Name (line 2116):

    @norecursion
    def frozen(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'frozen'
        module_type_store = module_type_store.open_function_context('frozen', 2118, 4, False)
        # Assigning a type to the variable 'self' (line 2119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2119, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IdentityTransform.frozen.__dict__.__setitem__('stypy_localization', localization)
        IdentityTransform.frozen.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IdentityTransform.frozen.__dict__.__setitem__('stypy_type_store', module_type_store)
        IdentityTransform.frozen.__dict__.__setitem__('stypy_function_name', 'IdentityTransform.frozen')
        IdentityTransform.frozen.__dict__.__setitem__('stypy_param_names_list', [])
        IdentityTransform.frozen.__dict__.__setitem__('stypy_varargs_param_name', None)
        IdentityTransform.frozen.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IdentityTransform.frozen.__dict__.__setitem__('stypy_call_defaults', defaults)
        IdentityTransform.frozen.__dict__.__setitem__('stypy_call_varargs', varargs)
        IdentityTransform.frozen.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IdentityTransform.frozen.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IdentityTransform.frozen', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'frozen', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'frozen(...)' code ##################

        # Getting the type of 'self' (line 2119)
        self_158761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 2119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2119, 8), 'stypy_return_type', self_158761)
        
        # ################# End of 'frozen(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'frozen' in the type store
        # Getting the type of 'stypy_return_type' (line 2118)
        stypy_return_type_158762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158762)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'frozen'
        return stypy_return_type_158762

    
    # Assigning a Attribute to a Attribute (line 2120):

    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 2122, 4, False)
        # Assigning a type to the variable 'self' (line 2123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2123, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'IdentityTransform.stypy__repr__')
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IdentityTransform.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IdentityTransform.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_158763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2123, 15), 'unicode', u'IdentityTransform()')
        # Assigning a type to the variable 'stypy_return_type' (line 2123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2123, 8), 'stypy_return_type', unicode_158763)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 2122)
        stypy_return_type_158764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2122, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158764)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_158764


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 2125, 4, False)
        # Assigning a type to the variable 'self' (line 2126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2126, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_function_name', 'IdentityTransform.get_matrix')
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IdentityTransform.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IdentityTransform.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        # Getting the type of 'self' (line 2126)
        self_158765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 15), 'self')
        # Obtaining the member '_mtx' of a type (line 2126)
        _mtx_158766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2126, 15), self_158765, '_mtx')
        # Assigning a type to the variable 'stypy_return_type' (line 2126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2126, 8), 'stypy_return_type', _mtx_158766)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 2125)
        stypy_return_type_158767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158767)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_158767

    
    # Assigning a Attribute to a Attribute (line 2127):

    @norecursion
    def transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform'
        module_type_store = module_type_store.open_function_context('transform', 2129, 4, False)
        # Assigning a type to the variable 'self' (line 2130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2130, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IdentityTransform.transform.__dict__.__setitem__('stypy_localization', localization)
        IdentityTransform.transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IdentityTransform.transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        IdentityTransform.transform.__dict__.__setitem__('stypy_function_name', 'IdentityTransform.transform')
        IdentityTransform.transform.__dict__.__setitem__('stypy_param_names_list', ['points'])
        IdentityTransform.transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        IdentityTransform.transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IdentityTransform.transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        IdentityTransform.transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        IdentityTransform.transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IdentityTransform.transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IdentityTransform.transform', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform(...)' code ##################

        
        # Call to asanyarray(...): (line 2130)
        # Processing the call arguments (line 2130)
        # Getting the type of 'points' (line 2130)
        points_158770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 29), 'points', False)
        # Processing the call keyword arguments (line 2130)
        kwargs_158771 = {}
        # Getting the type of 'np' (line 2130)
        np_158768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 15), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 2130)
        asanyarray_158769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2130, 15), np_158768, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 2130)
        asanyarray_call_result_158772 = invoke(stypy.reporting.localization.Localization(__file__, 2130, 15), asanyarray_158769, *[points_158770], **kwargs_158771)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2130, 8), 'stypy_return_type', asanyarray_call_result_158772)
        
        # ################# End of 'transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform' in the type store
        # Getting the type of 'stypy_return_type' (line 2129)
        stypy_return_type_158773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158773)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform'
        return stypy_return_type_158773

    
    # Assigning a Attribute to a Attribute (line 2131):
    
    # Assigning a Name to a Name (line 2133):
    
    # Assigning a Attribute to a Attribute (line 2134):
    
    # Assigning a Name to a Name (line 2136):
    
    # Assigning a Attribute to a Attribute (line 2137):

    @norecursion
    def transform_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_path'
        module_type_store = module_type_store.open_function_context('transform_path', 2139, 4, False)
        # Assigning a type to the variable 'self' (line 2140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2140, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_localization', localization)
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_function_name', 'IdentityTransform.transform_path')
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_param_names_list', ['path'])
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IdentityTransform.transform_path.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IdentityTransform.transform_path', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_path', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_path(...)' code ##################

        # Getting the type of 'path' (line 2140)
        path_158774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 15), 'path')
        # Assigning a type to the variable 'stypy_return_type' (line 2140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2140, 8), 'stypy_return_type', path_158774)
        
        # ################# End of 'transform_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_path' in the type store
        # Getting the type of 'stypy_return_type' (line 2139)
        stypy_return_type_158775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158775)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_path'
        return stypy_return_type_158775

    
    # Assigning a Attribute to a Attribute (line 2141):
    
    # Assigning a Name to a Name (line 2143):
    
    # Assigning a Attribute to a Attribute (line 2144):
    
    # Assigning a Name to a Name (line 2146):
    
    # Assigning a Attribute to a Attribute (line 2147):

    @norecursion
    def get_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_affine'
        module_type_store = module_type_store.open_function_context('get_affine', 2149, 4, False)
        # Assigning a type to the variable 'self' (line 2150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2150, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_localization', localization)
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_function_name', 'IdentityTransform.get_affine')
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_param_names_list', [])
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IdentityTransform.get_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IdentityTransform.get_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_affine(...)' code ##################

        # Getting the type of 'self' (line 2150)
        self_158776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 2150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2150, 8), 'stypy_return_type', self_158776)
        
        # ################# End of 'get_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2149)
        stypy_return_type_158777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158777)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_affine'
        return stypy_return_type_158777

    
    # Assigning a Attribute to a Attribute (line 2151):
    
    # Assigning a Name to a Name (line 2153):
    
    # Assigning a Attribute to a Attribute (line 2154):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2111, 0, False)
        # Assigning a type to the variable 'self' (line 2112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2112, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IdentityTransform.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'IdentityTransform' (line 2111)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2111, 0), 'IdentityTransform', IdentityTransform)

# Assigning a Call to a Name (line 2116):

# Call to identity(...): (line 2116)
# Processing the call arguments (line 2116)
int_158780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, 23), 'int')
# Processing the call keyword arguments (line 2116)
kwargs_158781 = {}
# Getting the type of 'np' (line 2116)
np_158778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 11), 'np', False)
# Obtaining the member 'identity' of a type (line 2116)
identity_158779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2116, 11), np_158778, 'identity')
# Calling identity(args, kwargs) (line 2116)
identity_call_result_158782 = invoke(stypy.reporting.localization.Localization(__file__, 2116, 11), identity_158779, *[int_158780], **kwargs_158781)

# Getting the type of 'IdentityTransform'
IdentityTransform_158783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Setting the type of the member '_mtx' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158783, '_mtx', identity_call_result_158782)

# Assigning a Attribute to a Attribute (line 2120):
# Getting the type of 'Affine2DBase' (line 2120)
Affine2DBase_158784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 21), 'Affine2DBase')
# Obtaining the member 'frozen' of a type (line 2120)
frozen_158785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2120, 21), Affine2DBase_158784, 'frozen')
# Obtaining the member '__doc__' of a type (line 2120)
doc___158786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2120, 21), frozen_158785, '__doc__')
# Getting the type of 'IdentityTransform'
IdentityTransform_158787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'frozen' of a type
frozen_158788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158787, 'frozen')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), frozen_158788, '__doc__', doc___158786)

# Assigning a Attribute to a Attribute (line 2127):
# Getting the type of 'Affine2DBase' (line 2127)
Affine2DBase_158789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 25), 'Affine2DBase')
# Obtaining the member 'get_matrix' of a type (line 2127)
get_matrix_158790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2127, 25), Affine2DBase_158789, 'get_matrix')
# Obtaining the member '__doc__' of a type (line 2127)
doc___158791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2127, 25), get_matrix_158790, '__doc__')
# Getting the type of 'IdentityTransform'
IdentityTransform_158792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'get_matrix' of a type
get_matrix_158793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158792, 'get_matrix')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_matrix_158793, '__doc__', doc___158791)

# Assigning a Attribute to a Attribute (line 2131):
# Getting the type of 'Affine2DBase' (line 2131)
Affine2DBase_158794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 24), 'Affine2DBase')
# Obtaining the member 'transform' of a type (line 2131)
transform_158795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2131, 24), Affine2DBase_158794, 'transform')
# Obtaining the member '__doc__' of a type (line 2131)
doc___158796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2131, 24), transform_158795, '__doc__')
# Getting the type of 'IdentityTransform'
IdentityTransform_158797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'transform' of a type
transform_158798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158797, 'transform')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_158798, '__doc__', doc___158796)

# Assigning a Name to a Name (line 2133):
# Getting the type of 'IdentityTransform'
IdentityTransform_158799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'transform' of a type
transform_158800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158799, 'transform')
# Getting the type of 'IdentityTransform'
IdentityTransform_158801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Setting the type of the member 'transform_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158801, 'transform_affine', transform_158800)

# Assigning a Attribute to a Attribute (line 2134):
# Getting the type of 'Affine2DBase' (line 2134)
Affine2DBase_158802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 31), 'Affine2DBase')
# Obtaining the member 'transform_affine' of a type (line 2134)
transform_affine_158803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 31), Affine2DBase_158802, 'transform_affine')
# Obtaining the member '__doc__' of a type (line 2134)
doc___158804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 31), transform_affine_158803, '__doc__')
# Getting the type of 'IdentityTransform'
IdentityTransform_158805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'transform_affine' of a type
transform_affine_158806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158805, 'transform_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_affine_158806, '__doc__', doc___158804)

# Assigning a Name to a Name (line 2136):
# Getting the type of 'IdentityTransform'
IdentityTransform_158807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'transform' of a type
transform_158808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158807, 'transform')
# Getting the type of 'IdentityTransform'
IdentityTransform_158809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Setting the type of the member 'transform_non_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158809, 'transform_non_affine', transform_158808)

# Assigning a Attribute to a Attribute (line 2137):
# Getting the type of 'Affine2DBase' (line 2137)
Affine2DBase_158810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 35), 'Affine2DBase')
# Obtaining the member 'transform_non_affine' of a type (line 2137)
transform_non_affine_158811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2137, 35), Affine2DBase_158810, 'transform_non_affine')
# Obtaining the member '__doc__' of a type (line 2137)
doc___158812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2137, 35), transform_non_affine_158811, '__doc__')
# Getting the type of 'IdentityTransform'
IdentityTransform_158813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'transform_non_affine' of a type
transform_non_affine_158814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158813, 'transform_non_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_non_affine_158814, '__doc__', doc___158812)

# Assigning a Attribute to a Attribute (line 2141):
# Getting the type of 'Affine2DBase' (line 2141)
Affine2DBase_158815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 29), 'Affine2DBase')
# Obtaining the member 'transform_path' of a type (line 2141)
transform_path_158816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 29), Affine2DBase_158815, 'transform_path')
# Obtaining the member '__doc__' of a type (line 2141)
doc___158817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 29), transform_path_158816, '__doc__')
# Getting the type of 'IdentityTransform'
IdentityTransform_158818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'transform_path' of a type
transform_path_158819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158818, 'transform_path')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_path_158819, '__doc__', doc___158817)

# Assigning a Name to a Name (line 2143):
# Getting the type of 'IdentityTransform'
IdentityTransform_158820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'transform_path' of a type
transform_path_158821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158820, 'transform_path')
# Getting the type of 'IdentityTransform'
IdentityTransform_158822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Setting the type of the member 'transform_path_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158822, 'transform_path_affine', transform_path_158821)

# Assigning a Attribute to a Attribute (line 2144):
# Getting the type of 'Affine2DBase' (line 2144)
Affine2DBase_158823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 36), 'Affine2DBase')
# Obtaining the member 'transform_path_affine' of a type (line 2144)
transform_path_affine_158824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2144, 36), Affine2DBase_158823, 'transform_path_affine')
# Obtaining the member '__doc__' of a type (line 2144)
doc___158825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2144, 36), transform_path_affine_158824, '__doc__')
# Getting the type of 'IdentityTransform'
IdentityTransform_158826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'transform_path_affine' of a type
transform_path_affine_158827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158826, 'transform_path_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_path_affine_158827, '__doc__', doc___158825)

# Assigning a Name to a Name (line 2146):
# Getting the type of 'IdentityTransform'
IdentityTransform_158828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'transform_path' of a type
transform_path_158829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158828, 'transform_path')
# Getting the type of 'IdentityTransform'
IdentityTransform_158830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Setting the type of the member 'transform_path_non_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158830, 'transform_path_non_affine', transform_path_158829)

# Assigning a Attribute to a Attribute (line 2147):
# Getting the type of 'Affine2DBase' (line 2147)
Affine2DBase_158831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 40), 'Affine2DBase')
# Obtaining the member 'transform_path_non_affine' of a type (line 2147)
transform_path_non_affine_158832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2147, 40), Affine2DBase_158831, 'transform_path_non_affine')
# Obtaining the member '__doc__' of a type (line 2147)
doc___158833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2147, 40), transform_path_non_affine_158832, '__doc__')
# Getting the type of 'IdentityTransform'
IdentityTransform_158834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'transform_path_non_affine' of a type
transform_path_non_affine_158835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158834, 'transform_path_non_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_path_non_affine_158835, '__doc__', doc___158833)

# Assigning a Attribute to a Attribute (line 2151):
# Getting the type of 'Affine2DBase' (line 2151)
Affine2DBase_158836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 25), 'Affine2DBase')
# Obtaining the member 'get_affine' of a type (line 2151)
get_affine_158837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 25), Affine2DBase_158836, 'get_affine')
# Obtaining the member '__doc__' of a type (line 2151)
doc___158838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 25), get_affine_158837, '__doc__')
# Getting the type of 'IdentityTransform'
IdentityTransform_158839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'get_affine' of a type
get_affine_158840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158839, 'get_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_affine_158840, '__doc__', doc___158838)

# Assigning a Name to a Name (line 2153):
# Getting the type of 'IdentityTransform'
IdentityTransform_158841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'get_affine' of a type
get_affine_158842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158841, 'get_affine')
# Getting the type of 'IdentityTransform'
IdentityTransform_158843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Setting the type of the member 'inverted' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158843, 'inverted', get_affine_158842)

# Assigning a Attribute to a Attribute (line 2154):
# Getting the type of 'Affine2DBase' (line 2154)
Affine2DBase_158844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 23), 'Affine2DBase')
# Obtaining the member 'inverted' of a type (line 2154)
inverted_158845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 23), Affine2DBase_158844, 'inverted')
# Obtaining the member '__doc__' of a type (line 2154)
doc___158846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 23), inverted_158845, '__doc__')
# Getting the type of 'IdentityTransform'
IdentityTransform_158847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IdentityTransform')
# Obtaining the member 'inverted' of a type
inverted_158848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IdentityTransform_158847, 'inverted')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), inverted_158848, '__doc__', doc___158846)
# Declaration of the 'BlendedGenericTransform' class
# Getting the type of 'Transform' (line 2157)
Transform_158849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 30), 'Transform')

class BlendedGenericTransform(Transform_158849, ):
    unicode_158850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2164, (-1)), 'unicode', u'\n    A "blended" transform uses one transform for the *x*-direction, and\n    another transform for the *y*-direction.\n\n    This "generic" version can handle any given child transform in the\n    *x*- and *y*-directions.\n    ')
    
    # Assigning a Num to a Name (line 2165):
    
    # Assigning a Num to a Name (line 2166):
    
    # Assigning a Name to a Name (line 2167):
    
    # Assigning a Name to a Name (line 2168):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2170, 4, False)
        # Assigning a type to the variable 'self' (line 2171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2171, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform.__init__', ['x_transform', 'y_transform'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['x_transform', 'y_transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_158851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2180, (-1)), 'unicode', u'\n        Create a new "blended" transform using *x_transform* to\n        transform the *x*-axis and *y_transform* to transform the\n        *y*-axis.\n\n        You will generally not call this constructor directly but use\n        the :func:`blended_transform_factory` function instead, which\n        can determine automatically which kind of blended transform to\n        create.\n        ')
        
        # Call to __init__(...): (line 2183)
        # Processing the call arguments (line 2183)
        # Getting the type of 'self' (line 2183)
        self_158854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 27), 'self', False)
        # Processing the call keyword arguments (line 2183)
        # Getting the type of 'kwargs' (line 2183)
        kwargs_158855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 35), 'kwargs', False)
        kwargs_158856 = {'kwargs_158855': kwargs_158855}
        # Getting the type of 'Transform' (line 2183)
        Transform_158852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 8), 'Transform', False)
        # Obtaining the member '__init__' of a type (line 2183)
        init___158853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2183, 8), Transform_158852, '__init__')
        # Calling __init__(args, kwargs) (line 2183)
        init___call_result_158857 = invoke(stypy.reporting.localization.Localization(__file__, 2183, 8), init___158853, *[self_158854], **kwargs_158856)
        
        
        # Assigning a Name to a Attribute (line 2184):
        
        # Assigning a Name to a Attribute (line 2184):
        # Getting the type of 'x_transform' (line 2184)
        x_transform_158858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 18), 'x_transform')
        # Getting the type of 'self' (line 2184)
        self_158859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 8), 'self')
        # Setting the type of the member '_x' of a type (line 2184)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 8), self_158859, '_x', x_transform_158858)
        
        # Assigning a Name to a Attribute (line 2185):
        
        # Assigning a Name to a Attribute (line 2185):
        # Getting the type of 'y_transform' (line 2185)
        y_transform_158860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 18), 'y_transform')
        # Getting the type of 'self' (line 2185)
        self_158861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 8), 'self')
        # Setting the type of the member '_y' of a type (line 2185)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2185, 8), self_158861, '_y', y_transform_158860)
        
        # Call to set_children(...): (line 2186)
        # Processing the call arguments (line 2186)
        # Getting the type of 'x_transform' (line 2186)
        x_transform_158864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 26), 'x_transform', False)
        # Getting the type of 'y_transform' (line 2186)
        y_transform_158865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 39), 'y_transform', False)
        # Processing the call keyword arguments (line 2186)
        kwargs_158866 = {}
        # Getting the type of 'self' (line 2186)
        self_158862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 2186)
        set_children_158863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 8), self_158862, 'set_children')
        # Calling set_children(args, kwargs) (line 2186)
        set_children_call_result_158867 = invoke(stypy.reporting.localization.Localization(__file__, 2186, 8), set_children_158863, *[x_transform_158864, y_transform_158865], **kwargs_158866)
        
        
        # Assigning a Name to a Attribute (line 2187):
        
        # Assigning a Name to a Attribute (line 2187):
        # Getting the type of 'None' (line 2187)
        None_158868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 23), 'None')
        # Getting the type of 'self' (line 2187)
        self_158869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 8), 'self')
        # Setting the type of the member '_affine' of a type (line 2187)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2187, 8), self_158869, '_affine', None_158868)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 2189, 4, False)
        # Assigning a type to the variable 'self' (line 2190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2190, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform.stypy__eq__')
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        # Call to isinstance(...): (line 2191)
        # Processing the call arguments (line 2191)
        # Getting the type of 'other' (line 2191)
        other_158871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 22), 'other', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2191)
        tuple_158872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2191, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2191)
        # Adding element type (line 2191)
        # Getting the type of 'BlendedAffine2D' (line 2191)
        BlendedAffine2D_158873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 30), 'BlendedAffine2D', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2191, 30), tuple_158872, BlendedAffine2D_158873)
        # Adding element type (line 2191)
        # Getting the type of 'BlendedGenericTransform' (line 2191)
        BlendedGenericTransform_158874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 47), 'BlendedGenericTransform', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2191, 30), tuple_158872, BlendedGenericTransform_158874)
        
        # Processing the call keyword arguments (line 2191)
        kwargs_158875 = {}
        # Getting the type of 'isinstance' (line 2191)
        isinstance_158870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2191)
        isinstance_call_result_158876 = invoke(stypy.reporting.localization.Localization(__file__, 2191, 11), isinstance_158870, *[other_158871, tuple_158872], **kwargs_158875)
        
        # Testing the type of an if condition (line 2191)
        if_condition_158877 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2191, 8), isinstance_call_result_158876)
        # Assigning a type to the variable 'if_condition_158877' (line 2191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2191, 8), 'if_condition_158877', if_condition_158877)
        # SSA begins for if statement (line 2191)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2192)
        self_158878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 20), 'self')
        # Obtaining the member '_x' of a type (line 2192)
        _x_158879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2192, 20), self_158878, '_x')
        # Getting the type of 'other' (line 2192)
        other_158880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 31), 'other')
        # Obtaining the member '_x' of a type (line 2192)
        _x_158881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2192, 31), other_158880, '_x')
        # Applying the binary operator '==' (line 2192)
        result_eq_158882 = python_operator(stypy.reporting.localization.Localization(__file__, 2192, 20), '==', _x_158879, _x_158881)
        
        
        # Getting the type of 'self' (line 2192)
        self_158883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 46), 'self')
        # Obtaining the member '_y' of a type (line 2192)
        _y_158884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2192, 46), self_158883, '_y')
        # Getting the type of 'other' (line 2192)
        other_158885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 57), 'other')
        # Obtaining the member '_y' of a type (line 2192)
        _y_158886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2192, 57), other_158885, '_y')
        # Applying the binary operator '==' (line 2192)
        result_eq_158887 = python_operator(stypy.reporting.localization.Localization(__file__, 2192, 46), '==', _y_158884, _y_158886)
        
        # Applying the binary operator 'and' (line 2192)
        result_and_keyword_158888 = python_operator(stypy.reporting.localization.Localization(__file__, 2192, 19), 'and', result_eq_158882, result_eq_158887)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2192, 12), 'stypy_return_type', result_and_keyword_158888)
        # SSA branch for the else part of an if statement (line 2191)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 2193)
        self_158889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 13), 'self')
        # Obtaining the member '_x' of a type (line 2193)
        _x_158890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2193, 13), self_158889, '_x')
        # Getting the type of 'self' (line 2193)
        self_158891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 24), 'self')
        # Obtaining the member '_y' of a type (line 2193)
        _y_158892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2193, 24), self_158891, '_y')
        # Applying the binary operator '==' (line 2193)
        result_eq_158893 = python_operator(stypy.reporting.localization.Localization(__file__, 2193, 13), '==', _x_158890, _y_158892)
        
        # Testing the type of an if condition (line 2193)
        if_condition_158894 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2193, 13), result_eq_158893)
        # Assigning a type to the variable 'if_condition_158894' (line 2193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2193, 13), 'if_condition_158894', if_condition_158894)
        # SSA begins for if statement (line 2193)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 2194)
        self_158895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 19), 'self')
        # Obtaining the member '_x' of a type (line 2194)
        _x_158896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2194, 19), self_158895, '_x')
        # Getting the type of 'other' (line 2194)
        other_158897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 30), 'other')
        # Applying the binary operator '==' (line 2194)
        result_eq_158898 = python_operator(stypy.reporting.localization.Localization(__file__, 2194, 19), '==', _x_158896, other_158897)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 12), 'stypy_return_type', result_eq_158898)
        # SSA branch for the else part of an if statement (line 2193)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'NotImplemented' (line 2196)
        NotImplemented_158899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 2196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2196, 12), 'stypy_return_type', NotImplemented_158899)
        # SSA join for if statement (line 2193)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2191)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 2189)
        stypy_return_type_158900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158900)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_158900


    @norecursion
    def contains_branch_seperately(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains_branch_seperately'
        module_type_store = module_type_store.open_function_context('contains_branch_seperately', 2198, 4, False)
        # Assigning a type to the variable 'self' (line 2199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2199, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform.contains_branch_seperately')
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_param_names_list', ['transform'])
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform.contains_branch_seperately.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform.contains_branch_seperately', ['transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains_branch_seperately', localization, ['transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains_branch_seperately(...)' code ##################

        
        # Obtaining an instance of the builtin type 'tuple' (line 2200)
        tuple_158901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2200, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2200)
        # Adding element type (line 2200)
        
        # Call to contains_branch(...): (line 2200)
        # Processing the call arguments (line 2200)
        # Getting the type of 'transform' (line 2200)
        transform_158905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 39), 'transform', False)
        # Processing the call keyword arguments (line 2200)
        kwargs_158906 = {}
        # Getting the type of 'self' (line 2200)
        self_158902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 15), 'self', False)
        # Obtaining the member '_x' of a type (line 2200)
        _x_158903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2200, 15), self_158902, '_x')
        # Obtaining the member 'contains_branch' of a type (line 2200)
        contains_branch_158904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2200, 15), _x_158903, 'contains_branch')
        # Calling contains_branch(args, kwargs) (line 2200)
        contains_branch_call_result_158907 = invoke(stypy.reporting.localization.Localization(__file__, 2200, 15), contains_branch_158904, *[transform_158905], **kwargs_158906)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2200, 15), tuple_158901, contains_branch_call_result_158907)
        # Adding element type (line 2200)
        
        # Call to contains_branch(...): (line 2200)
        # Processing the call arguments (line 2200)
        # Getting the type of 'transform' (line 2200)
        transform_158911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 75), 'transform', False)
        # Processing the call keyword arguments (line 2200)
        kwargs_158912 = {}
        # Getting the type of 'self' (line 2200)
        self_158908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 51), 'self', False)
        # Obtaining the member '_y' of a type (line 2200)
        _y_158909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2200, 51), self_158908, '_y')
        # Obtaining the member 'contains_branch' of a type (line 2200)
        contains_branch_158910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2200, 51), _y_158909, 'contains_branch')
        # Calling contains_branch(args, kwargs) (line 2200)
        contains_branch_call_result_158913 = invoke(stypy.reporting.localization.Localization(__file__, 2200, 51), contains_branch_158910, *[transform_158911], **kwargs_158912)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2200, 15), tuple_158901, contains_branch_call_result_158913)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 8), 'stypy_return_type', tuple_158901)
        
        # ################# End of 'contains_branch_seperately(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains_branch_seperately' in the type store
        # Getting the type of 'stypy_return_type' (line 2198)
        stypy_return_type_158914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158914)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains_branch_seperately'
        return stypy_return_type_158914


    @norecursion
    def depth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'depth'
        module_type_store = module_type_store.open_function_context('depth', 2202, 4, False)
        # Assigning a type to the variable 'self' (line 2203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform.depth')
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_param_names_list', [])
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform.depth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform.depth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'depth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'depth(...)' code ##################

        
        # Call to max(...): (line 2204)
        # Processing the call arguments (line 2204)
        # Getting the type of 'self' (line 2204)
        self_158916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 19), 'self', False)
        # Obtaining the member '_x' of a type (line 2204)
        _x_158917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2204, 19), self_158916, '_x')
        # Obtaining the member 'depth' of a type (line 2204)
        depth_158918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2204, 19), _x_158917, 'depth')
        # Getting the type of 'self' (line 2204)
        self_158919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 34), 'self', False)
        # Obtaining the member '_y' of a type (line 2204)
        _y_158920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2204, 34), self_158919, '_y')
        # Obtaining the member 'depth' of a type (line 2204)
        depth_158921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2204, 34), _y_158920, 'depth')
        # Processing the call keyword arguments (line 2204)
        kwargs_158922 = {}
        # Getting the type of 'max' (line 2204)
        max_158915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 15), 'max', False)
        # Calling max(args, kwargs) (line 2204)
        max_call_result_158923 = invoke(stypy.reporting.localization.Localization(__file__, 2204, 15), max_158915, *[depth_158918, depth_158921], **kwargs_158922)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2204, 8), 'stypy_return_type', max_call_result_158923)
        
        # ################# End of 'depth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'depth' in the type store
        # Getting the type of 'stypy_return_type' (line 2202)
        stypy_return_type_158924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158924)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'depth'
        return stypy_return_type_158924


    @norecursion
    def contains_branch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains_branch'
        module_type_store = module_type_store.open_function_context('contains_branch', 2206, 4, False)
        # Assigning a type to the variable 'self' (line 2207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform.contains_branch')
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_param_names_list', ['other'])
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform.contains_branch.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform.contains_branch', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains_branch', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains_branch(...)' code ##################

        # Getting the type of 'False' (line 2208)
        False_158925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 2208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2208, 8), 'stypy_return_type', False_158925)
        
        # ################# End of 'contains_branch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains_branch' in the type store
        # Getting the type of 'stypy_return_type' (line 2206)
        stypy_return_type_158926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158926)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains_branch'
        return stypy_return_type_158926


    @norecursion
    def _get_is_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_is_affine'
        module_type_store = module_type_store.open_function_context('_get_is_affine', 2210, 4, False)
        # Assigning a type to the variable 'self' (line 2211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2211, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform._get_is_affine')
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_param_names_list', [])
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform._get_is_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform._get_is_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_is_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_is_affine(...)' code ##################

        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2211)
        self_158927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 15), 'self')
        # Obtaining the member '_x' of a type (line 2211)
        _x_158928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 15), self_158927, '_x')
        # Obtaining the member 'is_affine' of a type (line 2211)
        is_affine_158929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 15), _x_158928, 'is_affine')
        # Getting the type of 'self' (line 2211)
        self_158930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 37), 'self')
        # Obtaining the member '_y' of a type (line 2211)
        _y_158931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 37), self_158930, '_y')
        # Obtaining the member 'is_affine' of a type (line 2211)
        is_affine_158932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 37), _y_158931, 'is_affine')
        # Applying the binary operator 'and' (line 2211)
        result_and_keyword_158933 = python_operator(stypy.reporting.localization.Localization(__file__, 2211, 15), 'and', is_affine_158929, is_affine_158932)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2211, 8), 'stypy_return_type', result_and_keyword_158933)
        
        # ################# End of '_get_is_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_is_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2210)
        stypy_return_type_158934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158934)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_is_affine'
        return stypy_return_type_158934

    
    # Assigning a Call to a Name (line 2212):

    @norecursion
    def _get_has_inverse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_has_inverse'
        module_type_store = module_type_store.open_function_context('_get_has_inverse', 2214, 4, False)
        # Assigning a type to the variable 'self' (line 2215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2215, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform._get_has_inverse')
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_param_names_list', [])
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform._get_has_inverse', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_has_inverse', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_has_inverse(...)' code ##################

        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2215)
        self_158935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 15), 'self')
        # Obtaining the member '_x' of a type (line 2215)
        _x_158936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2215, 15), self_158935, '_x')
        # Obtaining the member 'has_inverse' of a type (line 2215)
        has_inverse_158937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2215, 15), _x_158936, 'has_inverse')
        # Getting the type of 'self' (line 2215)
        self_158938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 39), 'self')
        # Obtaining the member '_y' of a type (line 2215)
        _y_158939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2215, 39), self_158938, '_y')
        # Obtaining the member 'has_inverse' of a type (line 2215)
        has_inverse_158940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2215, 39), _y_158939, 'has_inverse')
        # Applying the binary operator 'and' (line 2215)
        result_and_keyword_158941 = python_operator(stypy.reporting.localization.Localization(__file__, 2215, 15), 'and', has_inverse_158937, has_inverse_158940)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2215, 8), 'stypy_return_type', result_and_keyword_158941)
        
        # ################# End of '_get_has_inverse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_has_inverse' in the type store
        # Getting the type of 'stypy_return_type' (line 2214)
        stypy_return_type_158942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158942)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_has_inverse'
        return stypy_return_type_158942

    
    # Assigning a Call to a Name (line 2216):

    @norecursion
    def frozen(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'frozen'
        module_type_store = module_type_store.open_function_context('frozen', 2218, 4, False)
        # Assigning a type to the variable 'self' (line 2219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2219, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform.frozen')
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_param_names_list', [])
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform.frozen.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform.frozen', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'frozen', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'frozen(...)' code ##################

        
        # Call to blended_transform_factory(...): (line 2219)
        # Processing the call arguments (line 2219)
        
        # Call to frozen(...): (line 2219)
        # Processing the call keyword arguments (line 2219)
        kwargs_158947 = {}
        # Getting the type of 'self' (line 2219)
        self_158944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 41), 'self', False)
        # Obtaining the member '_x' of a type (line 2219)
        _x_158945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 41), self_158944, '_x')
        # Obtaining the member 'frozen' of a type (line 2219)
        frozen_158946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 41), _x_158945, 'frozen')
        # Calling frozen(args, kwargs) (line 2219)
        frozen_call_result_158948 = invoke(stypy.reporting.localization.Localization(__file__, 2219, 41), frozen_158946, *[], **kwargs_158947)
        
        
        # Call to frozen(...): (line 2219)
        # Processing the call keyword arguments (line 2219)
        kwargs_158952 = {}
        # Getting the type of 'self' (line 2219)
        self_158949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 59), 'self', False)
        # Obtaining the member '_y' of a type (line 2219)
        _y_158950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 59), self_158949, '_y')
        # Obtaining the member 'frozen' of a type (line 2219)
        frozen_158951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 59), _y_158950, 'frozen')
        # Calling frozen(args, kwargs) (line 2219)
        frozen_call_result_158953 = invoke(stypy.reporting.localization.Localization(__file__, 2219, 59), frozen_158951, *[], **kwargs_158952)
        
        # Processing the call keyword arguments (line 2219)
        kwargs_158954 = {}
        # Getting the type of 'blended_transform_factory' (line 2219)
        blended_transform_factory_158943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 15), 'blended_transform_factory', False)
        # Calling blended_transform_factory(args, kwargs) (line 2219)
        blended_transform_factory_call_result_158955 = invoke(stypy.reporting.localization.Localization(__file__, 2219, 15), blended_transform_factory_158943, *[frozen_call_result_158948, frozen_call_result_158953], **kwargs_158954)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2219, 8), 'stypy_return_type', blended_transform_factory_call_result_158955)
        
        # ################# End of 'frozen(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'frozen' in the type store
        # Getting the type of 'stypy_return_type' (line 2218)
        stypy_return_type_158956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158956)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'frozen'
        return stypy_return_type_158956

    
    # Assigning a Attribute to a Attribute (line 2220):

    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 2222, 4, False)
        # Assigning a type to the variable 'self' (line 2223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2223, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform.stypy__repr__')
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_158957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 15), 'unicode', u'BlendedGenericTransform(%s,%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2223)
        tuple_158958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 51), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2223)
        # Adding element type (line 2223)
        # Getting the type of 'self' (line 2223)
        self_158959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 51), 'self')
        # Obtaining the member '_x' of a type (line 2223)
        _x_158960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2223, 51), self_158959, '_x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2223, 51), tuple_158958, _x_158960)
        # Adding element type (line 2223)
        # Getting the type of 'self' (line 2223)
        self_158961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 60), 'self')
        # Obtaining the member '_y' of a type (line 2223)
        _y_158962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2223, 60), self_158961, '_y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2223, 51), tuple_158958, _y_158962)
        
        # Applying the binary operator '%' (line 2223)
        result_mod_158963 = python_operator(stypy.reporting.localization.Localization(__file__, 2223, 15), '%', unicode_158957, tuple_158958)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2223, 8), 'stypy_return_type', result_mod_158963)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 2222)
        stypy_return_type_158964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_158964)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_158964


    @norecursion
    def transform_non_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_non_affine'
        module_type_store = module_type_store.open_function_context('transform_non_affine', 2225, 4, False)
        # Assigning a type to the variable 'self' (line 2226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform.transform_non_affine')
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_param_names_list', ['points'])
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform.transform_non_affine', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_non_affine', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_non_affine(...)' code ##################

        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2226)
        self_158965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 11), 'self')
        # Obtaining the member '_x' of a type (line 2226)
        _x_158966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 11), self_158965, '_x')
        # Obtaining the member 'is_affine' of a type (line 2226)
        is_affine_158967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 11), _x_158966, 'is_affine')
        # Getting the type of 'self' (line 2226)
        self_158968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 33), 'self')
        # Obtaining the member '_y' of a type (line 2226)
        _y_158969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 33), self_158968, '_y')
        # Obtaining the member 'is_affine' of a type (line 2226)
        is_affine_158970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 33), _y_158969, 'is_affine')
        # Applying the binary operator 'and' (line 2226)
        result_and_keyword_158971 = python_operator(stypy.reporting.localization.Localization(__file__, 2226, 11), 'and', is_affine_158967, is_affine_158970)
        
        # Testing the type of an if condition (line 2226)
        if_condition_158972 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2226, 8), result_and_keyword_158971)
        # Assigning a type to the variable 'if_condition_158972' (line 2226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 8), 'if_condition_158972', if_condition_158972)
        # SSA begins for if statement (line 2226)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'points' (line 2227)
        points_158973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 19), 'points')
        # Assigning a type to the variable 'stypy_return_type' (line 2227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 12), 'stypy_return_type', points_158973)
        # SSA join for if statement (line 2226)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 2228):
        
        # Assigning a Attribute to a Name (line 2228):
        # Getting the type of 'self' (line 2228)
        self_158974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 12), 'self')
        # Obtaining the member '_x' of a type (line 2228)
        _x_158975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 12), self_158974, '_x')
        # Assigning a type to the variable 'x' (line 2228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 8), 'x', _x_158975)
        
        # Assigning a Attribute to a Name (line 2229):
        
        # Assigning a Attribute to a Name (line 2229):
        # Getting the type of 'self' (line 2229)
        self_158976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 12), 'self')
        # Obtaining the member '_y' of a type (line 2229)
        _y_158977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 12), self_158976, '_y')
        # Assigning a type to the variable 'y' (line 2229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 8), 'y', _y_158977)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 2231)
        x_158978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 11), 'x')
        # Getting the type of 'y' (line 2231)
        y_158979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 16), 'y')
        # Applying the binary operator '==' (line 2231)
        result_eq_158980 = python_operator(stypy.reporting.localization.Localization(__file__, 2231, 11), '==', x_158978, y_158979)
        
        
        # Getting the type of 'x' (line 2231)
        x_158981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 22), 'x')
        # Obtaining the member 'input_dims' of a type (line 2231)
        input_dims_158982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2231, 22), x_158981, 'input_dims')
        int_158983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2231, 38), 'int')
        # Applying the binary operator '==' (line 2231)
        result_eq_158984 = python_operator(stypy.reporting.localization.Localization(__file__, 2231, 22), '==', input_dims_158982, int_158983)
        
        # Applying the binary operator 'and' (line 2231)
        result_and_keyword_158985 = python_operator(stypy.reporting.localization.Localization(__file__, 2231, 11), 'and', result_eq_158980, result_eq_158984)
        
        # Testing the type of an if condition (line 2231)
        if_condition_158986 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2231, 8), result_and_keyword_158985)
        # Assigning a type to the variable 'if_condition_158986' (line 2231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 8), 'if_condition_158986', if_condition_158986)
        # SSA begins for if statement (line 2231)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to transform_non_affine(...): (line 2232)
        # Processing the call arguments (line 2232)
        # Getting the type of 'points' (line 2232)
        points_158989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 42), 'points', False)
        # Processing the call keyword arguments (line 2232)
        kwargs_158990 = {}
        # Getting the type of 'x' (line 2232)
        x_158987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 19), 'x', False)
        # Obtaining the member 'transform_non_affine' of a type (line 2232)
        transform_non_affine_158988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 19), x_158987, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 2232)
        transform_non_affine_call_result_158991 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 19), transform_non_affine_158988, *[points_158989], **kwargs_158990)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'stypy_return_type', transform_non_affine_call_result_158991)
        # SSA join for if statement (line 2231)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x' (line 2234)
        x_158992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 11), 'x')
        # Obtaining the member 'input_dims' of a type (line 2234)
        input_dims_158993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2234, 11), x_158992, 'input_dims')
        int_158994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2234, 27), 'int')
        # Applying the binary operator '==' (line 2234)
        result_eq_158995 = python_operator(stypy.reporting.localization.Localization(__file__, 2234, 11), '==', input_dims_158993, int_158994)
        
        # Testing the type of an if condition (line 2234)
        if_condition_158996 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2234, 8), result_eq_158995)
        # Assigning a type to the variable 'if_condition_158996' (line 2234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'if_condition_158996', if_condition_158996)
        # SSA begins for if statement (line 2234)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 2235):
        
        # Assigning a Subscript to a Name (line 2235):
        
        # Obtaining the type of the subscript
        slice_158997 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2235, 23), None, None, None)
        int_158998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, 57), 'int')
        int_158999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, 59), 'int')
        slice_159000 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2235, 23), int_158998, int_158999, None)
        
        # Call to transform_non_affine(...): (line 2235)
        # Processing the call arguments (line 2235)
        # Getting the type of 'points' (line 2235)
        points_159003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 46), 'points', False)
        # Processing the call keyword arguments (line 2235)
        kwargs_159004 = {}
        # Getting the type of 'x' (line 2235)
        x_159001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 23), 'x', False)
        # Obtaining the member 'transform_non_affine' of a type (line 2235)
        transform_non_affine_159002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 23), x_159001, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 2235)
        transform_non_affine_call_result_159005 = invoke(stypy.reporting.localization.Localization(__file__, 2235, 23), transform_non_affine_159002, *[points_159003], **kwargs_159004)
        
        # Obtaining the member '__getitem__' of a type (line 2235)
        getitem___159006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 23), transform_non_affine_call_result_159005, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2235)
        subscript_call_result_159007 = invoke(stypy.reporting.localization.Localization(__file__, 2235, 23), getitem___159006, (slice_158997, slice_159000))
        
        # Assigning a type to the variable 'x_points' (line 2235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'x_points', subscript_call_result_159007)
        # SSA branch for the else part of an if statement (line 2234)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2237):
        
        # Assigning a Call to a Name (line 2237):
        
        # Call to transform_non_affine(...): (line 2237)
        # Processing the call arguments (line 2237)
        
        # Obtaining the type of the subscript
        slice_159010 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2237, 46), None, None, None)
        int_159011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2237, 56), 'int')
        # Getting the type of 'points' (line 2237)
        points_159012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 46), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 2237)
        getitem___159013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2237, 46), points_159012, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2237)
        subscript_call_result_159014 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 46), getitem___159013, (slice_159010, int_159011))
        
        # Processing the call keyword arguments (line 2237)
        kwargs_159015 = {}
        # Getting the type of 'x' (line 2237)
        x_159008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 23), 'x', False)
        # Obtaining the member 'transform_non_affine' of a type (line 2237)
        transform_non_affine_159009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2237, 23), x_159008, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 2237)
        transform_non_affine_call_result_159016 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 23), transform_non_affine_159009, *[subscript_call_result_159014], **kwargs_159015)
        
        # Assigning a type to the variable 'x_points' (line 2237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2237, 12), 'x_points', transform_non_affine_call_result_159016)
        
        # Assigning a Call to a Name (line 2238):
        
        # Assigning a Call to a Name (line 2238):
        
        # Call to reshape(...): (line 2238)
        # Processing the call arguments (line 2238)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2238)
        tuple_159019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2238, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2238)
        # Adding element type (line 2238)
        
        # Call to len(...): (line 2238)
        # Processing the call arguments (line 2238)
        # Getting the type of 'x_points' (line 2238)
        x_points_159021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 45), 'x_points', False)
        # Processing the call keyword arguments (line 2238)
        kwargs_159022 = {}
        # Getting the type of 'len' (line 2238)
        len_159020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 41), 'len', False)
        # Calling len(args, kwargs) (line 2238)
        len_call_result_159023 = invoke(stypy.reporting.localization.Localization(__file__, 2238, 41), len_159020, *[x_points_159021], **kwargs_159022)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2238, 41), tuple_159019, len_call_result_159023)
        # Adding element type (line 2238)
        int_159024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2238, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2238, 41), tuple_159019, int_159024)
        
        # Processing the call keyword arguments (line 2238)
        kwargs_159025 = {}
        # Getting the type of 'x_points' (line 2238)
        x_points_159017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 23), 'x_points', False)
        # Obtaining the member 'reshape' of a type (line 2238)
        reshape_159018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2238, 23), x_points_159017, 'reshape')
        # Calling reshape(args, kwargs) (line 2238)
        reshape_call_result_159026 = invoke(stypy.reporting.localization.Localization(__file__, 2238, 23), reshape_159018, *[tuple_159019], **kwargs_159025)
        
        # Assigning a type to the variable 'x_points' (line 2238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2238, 12), 'x_points', reshape_call_result_159026)
        # SSA join for if statement (line 2234)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y' (line 2240)
        y_159027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 11), 'y')
        # Obtaining the member 'input_dims' of a type (line 2240)
        input_dims_159028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2240, 11), y_159027, 'input_dims')
        int_159029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2240, 27), 'int')
        # Applying the binary operator '==' (line 2240)
        result_eq_159030 = python_operator(stypy.reporting.localization.Localization(__file__, 2240, 11), '==', input_dims_159028, int_159029)
        
        # Testing the type of an if condition (line 2240)
        if_condition_159031 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2240, 8), result_eq_159030)
        # Assigning a type to the variable 'if_condition_159031' (line 2240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2240, 8), 'if_condition_159031', if_condition_159031)
        # SSA begins for if statement (line 2240)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 2241):
        
        # Assigning a Subscript to a Name (line 2241):
        
        # Obtaining the type of the subscript
        slice_159032 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2241, 23), None, None, None)
        int_159033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, 57), 'int')
        slice_159034 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2241, 23), int_159033, None, None)
        
        # Call to transform_non_affine(...): (line 2241)
        # Processing the call arguments (line 2241)
        # Getting the type of 'points' (line 2241)
        points_159037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 46), 'points', False)
        # Processing the call keyword arguments (line 2241)
        kwargs_159038 = {}
        # Getting the type of 'y' (line 2241)
        y_159035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 23), 'y', False)
        # Obtaining the member 'transform_non_affine' of a type (line 2241)
        transform_non_affine_159036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2241, 23), y_159035, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 2241)
        transform_non_affine_call_result_159039 = invoke(stypy.reporting.localization.Localization(__file__, 2241, 23), transform_non_affine_159036, *[points_159037], **kwargs_159038)
        
        # Obtaining the member '__getitem__' of a type (line 2241)
        getitem___159040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2241, 23), transform_non_affine_call_result_159039, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2241)
        subscript_call_result_159041 = invoke(stypy.reporting.localization.Localization(__file__, 2241, 23), getitem___159040, (slice_159032, slice_159034))
        
        # Assigning a type to the variable 'y_points' (line 2241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 12), 'y_points', subscript_call_result_159041)
        # SSA branch for the else part of an if statement (line 2240)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2243):
        
        # Assigning a Call to a Name (line 2243):
        
        # Call to transform_non_affine(...): (line 2243)
        # Processing the call arguments (line 2243)
        
        # Obtaining the type of the subscript
        slice_159044 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2243, 46), None, None, None)
        int_159045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 56), 'int')
        # Getting the type of 'points' (line 2243)
        points_159046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 46), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 2243)
        getitem___159047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 46), points_159046, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2243)
        subscript_call_result_159048 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 46), getitem___159047, (slice_159044, int_159045))
        
        # Processing the call keyword arguments (line 2243)
        kwargs_159049 = {}
        # Getting the type of 'y' (line 2243)
        y_159042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 23), 'y', False)
        # Obtaining the member 'transform_non_affine' of a type (line 2243)
        transform_non_affine_159043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 23), y_159042, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 2243)
        transform_non_affine_call_result_159050 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 23), transform_non_affine_159043, *[subscript_call_result_159048], **kwargs_159049)
        
        # Assigning a type to the variable 'y_points' (line 2243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 12), 'y_points', transform_non_affine_call_result_159050)
        
        # Assigning a Call to a Name (line 2244):
        
        # Assigning a Call to a Name (line 2244):
        
        # Call to reshape(...): (line 2244)
        # Processing the call arguments (line 2244)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2244)
        tuple_159053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2244)
        # Adding element type (line 2244)
        
        # Call to len(...): (line 2244)
        # Processing the call arguments (line 2244)
        # Getting the type of 'y_points' (line 2244)
        y_points_159055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 45), 'y_points', False)
        # Processing the call keyword arguments (line 2244)
        kwargs_159056 = {}
        # Getting the type of 'len' (line 2244)
        len_159054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 41), 'len', False)
        # Calling len(args, kwargs) (line 2244)
        len_call_result_159057 = invoke(stypy.reporting.localization.Localization(__file__, 2244, 41), len_159054, *[y_points_159055], **kwargs_159056)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 41), tuple_159053, len_call_result_159057)
        # Adding element type (line 2244)
        int_159058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 41), tuple_159053, int_159058)
        
        # Processing the call keyword arguments (line 2244)
        kwargs_159059 = {}
        # Getting the type of 'y_points' (line 2244)
        y_points_159051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 23), 'y_points', False)
        # Obtaining the member 'reshape' of a type (line 2244)
        reshape_159052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 23), y_points_159051, 'reshape')
        # Calling reshape(args, kwargs) (line 2244)
        reshape_call_result_159060 = invoke(stypy.reporting.localization.Localization(__file__, 2244, 23), reshape_159052, *[tuple_159053], **kwargs_159059)
        
        # Assigning a type to the variable 'y_points' (line 2244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 12), 'y_points', reshape_call_result_159060)
        # SSA join for if statement (line 2240)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 2246)
        # Processing the call arguments (line 2246)
        # Getting the type of 'x_points' (line 2246)
        x_points_159062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 23), 'x_points', False)
        # Getting the type of 'np' (line 2246)
        np_159063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 33), 'np', False)
        # Obtaining the member 'ma' of a type (line 2246)
        ma_159064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2246, 33), np_159063, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 2246)
        MaskedArray_159065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2246, 33), ma_159064, 'MaskedArray')
        # Processing the call keyword arguments (line 2246)
        kwargs_159066 = {}
        # Getting the type of 'isinstance' (line 2246)
        isinstance_159061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 12), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2246)
        isinstance_call_result_159067 = invoke(stypy.reporting.localization.Localization(__file__, 2246, 12), isinstance_159061, *[x_points_159062, MaskedArray_159065], **kwargs_159066)
        
        
        # Call to isinstance(...): (line 2247)
        # Processing the call arguments (line 2247)
        # Getting the type of 'y_points' (line 2247)
        y_points_159069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 27), 'y_points', False)
        # Getting the type of 'np' (line 2247)
        np_159070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 37), 'np', False)
        # Obtaining the member 'ma' of a type (line 2247)
        ma_159071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2247, 37), np_159070, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 2247)
        MaskedArray_159072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2247, 37), ma_159071, 'MaskedArray')
        # Processing the call keyword arguments (line 2247)
        kwargs_159073 = {}
        # Getting the type of 'isinstance' (line 2247)
        isinstance_159068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 16), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2247)
        isinstance_call_result_159074 = invoke(stypy.reporting.localization.Localization(__file__, 2247, 16), isinstance_159068, *[y_points_159069, MaskedArray_159072], **kwargs_159073)
        
        # Applying the binary operator 'or' (line 2246)
        result_or_keyword_159075 = python_operator(stypy.reporting.localization.Localization(__file__, 2246, 12), 'or', isinstance_call_result_159067, isinstance_call_result_159074)
        
        # Testing the type of an if condition (line 2246)
        if_condition_159076 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2246, 8), result_or_keyword_159075)
        # Assigning a type to the variable 'if_condition_159076' (line 2246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2246, 8), 'if_condition_159076', if_condition_159076)
        # SSA begins for if statement (line 2246)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to concatenate(...): (line 2248)
        # Processing the call arguments (line 2248)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2248)
        tuple_159080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2248, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2248)
        # Adding element type (line 2248)
        # Getting the type of 'x_points' (line 2248)
        x_points_159081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 38), 'x_points', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2248, 38), tuple_159080, x_points_159081)
        # Adding element type (line 2248)
        # Getting the type of 'y_points' (line 2248)
        y_points_159082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 48), 'y_points', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2248, 38), tuple_159080, y_points_159082)
        
        int_159083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2248, 59), 'int')
        # Processing the call keyword arguments (line 2248)
        kwargs_159084 = {}
        # Getting the type of 'np' (line 2248)
        np_159077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 19), 'np', False)
        # Obtaining the member 'ma' of a type (line 2248)
        ma_159078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2248, 19), np_159077, 'ma')
        # Obtaining the member 'concatenate' of a type (line 2248)
        concatenate_159079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2248, 19), ma_159078, 'concatenate')
        # Calling concatenate(args, kwargs) (line 2248)
        concatenate_call_result_159085 = invoke(stypy.reporting.localization.Localization(__file__, 2248, 19), concatenate_159079, *[tuple_159080, int_159083], **kwargs_159084)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2248, 12), 'stypy_return_type', concatenate_call_result_159085)
        # SSA branch for the else part of an if statement (line 2246)
        module_type_store.open_ssa_branch('else')
        
        # Call to concatenate(...): (line 2250)
        # Processing the call arguments (line 2250)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2250)
        tuple_159088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2250)
        # Adding element type (line 2250)
        # Getting the type of 'x_points' (line 2250)
        x_points_159089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 35), 'x_points', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2250, 35), tuple_159088, x_points_159089)
        # Adding element type (line 2250)
        # Getting the type of 'y_points' (line 2250)
        y_points_159090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 45), 'y_points', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2250, 35), tuple_159088, y_points_159090)
        
        int_159091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 56), 'int')
        # Processing the call keyword arguments (line 2250)
        kwargs_159092 = {}
        # Getting the type of 'np' (line 2250)
        np_159086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 19), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 2250)
        concatenate_159087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2250, 19), np_159086, 'concatenate')
        # Calling concatenate(args, kwargs) (line 2250)
        concatenate_call_result_159093 = invoke(stypy.reporting.localization.Localization(__file__, 2250, 19), concatenate_159087, *[tuple_159088, int_159091], **kwargs_159092)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2250, 12), 'stypy_return_type', concatenate_call_result_159093)
        # SSA join for if statement (line 2246)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'transform_non_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_non_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2225)
        stypy_return_type_159094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159094)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_non_affine'
        return stypy_return_type_159094

    
    # Assigning a Attribute to a Attribute (line 2251):

    @norecursion
    def inverted(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverted'
        module_type_store = module_type_store.open_function_context('inverted', 2253, 4, False)
        # Assigning a type to the variable 'self' (line 2254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2254, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform.inverted')
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_param_names_list', [])
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform.inverted.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform.inverted', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverted', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverted(...)' code ##################

        
        # Call to BlendedGenericTransform(...): (line 2254)
        # Processing the call arguments (line 2254)
        
        # Call to inverted(...): (line 2254)
        # Processing the call keyword arguments (line 2254)
        kwargs_159099 = {}
        # Getting the type of 'self' (line 2254)
        self_159096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 39), 'self', False)
        # Obtaining the member '_x' of a type (line 2254)
        _x_159097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2254, 39), self_159096, '_x')
        # Obtaining the member 'inverted' of a type (line 2254)
        inverted_159098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2254, 39), _x_159097, 'inverted')
        # Calling inverted(args, kwargs) (line 2254)
        inverted_call_result_159100 = invoke(stypy.reporting.localization.Localization(__file__, 2254, 39), inverted_159098, *[], **kwargs_159099)
        
        
        # Call to inverted(...): (line 2254)
        # Processing the call keyword arguments (line 2254)
        kwargs_159104 = {}
        # Getting the type of 'self' (line 2254)
        self_159101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 59), 'self', False)
        # Obtaining the member '_y' of a type (line 2254)
        _y_159102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2254, 59), self_159101, '_y')
        # Obtaining the member 'inverted' of a type (line 2254)
        inverted_159103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2254, 59), _y_159102, 'inverted')
        # Calling inverted(args, kwargs) (line 2254)
        inverted_call_result_159105 = invoke(stypy.reporting.localization.Localization(__file__, 2254, 59), inverted_159103, *[], **kwargs_159104)
        
        # Processing the call keyword arguments (line 2254)
        kwargs_159106 = {}
        # Getting the type of 'BlendedGenericTransform' (line 2254)
        BlendedGenericTransform_159095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 15), 'BlendedGenericTransform', False)
        # Calling BlendedGenericTransform(args, kwargs) (line 2254)
        BlendedGenericTransform_call_result_159107 = invoke(stypy.reporting.localization.Localization(__file__, 2254, 15), BlendedGenericTransform_159095, *[inverted_call_result_159100, inverted_call_result_159105], **kwargs_159106)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2254, 8), 'stypy_return_type', BlendedGenericTransform_call_result_159107)
        
        # ################# End of 'inverted(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverted' in the type store
        # Getting the type of 'stypy_return_type' (line 2253)
        stypy_return_type_159108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159108)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverted'
        return stypy_return_type_159108

    
    # Assigning a Attribute to a Attribute (line 2255):

    @norecursion
    def get_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_affine'
        module_type_store = module_type_store.open_function_context('get_affine', 2257, 4, False)
        # Assigning a type to the variable 'self' (line 2258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2258, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_localization', localization)
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_function_name', 'BlendedGenericTransform.get_affine')
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_param_names_list', [])
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedGenericTransform.get_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedGenericTransform.get_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_affine(...)' code ##################

        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2258)
        self_159109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 2258)
        _invalid_159110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 11), self_159109, '_invalid')
        
        # Getting the type of 'self' (line 2258)
        self_159111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 28), 'self')
        # Obtaining the member '_affine' of a type (line 2258)
        _affine_159112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 28), self_159111, '_affine')
        # Getting the type of 'None' (line 2258)
        None_159113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 44), 'None')
        # Applying the binary operator 'is' (line 2258)
        result_is__159114 = python_operator(stypy.reporting.localization.Localization(__file__, 2258, 28), 'is', _affine_159112, None_159113)
        
        # Applying the binary operator 'or' (line 2258)
        result_or_keyword_159115 = python_operator(stypy.reporting.localization.Localization(__file__, 2258, 11), 'or', _invalid_159110, result_is__159114)
        
        # Testing the type of an if condition (line 2258)
        if_condition_159116 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2258, 8), result_or_keyword_159115)
        # Assigning a type to the variable 'if_condition_159116' (line 2258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2258, 8), 'if_condition_159116', if_condition_159116)
        # SSA begins for if statement (line 2258)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 2259)
        self_159117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 15), 'self')
        # Obtaining the member '_x' of a type (line 2259)
        _x_159118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 15), self_159117, '_x')
        # Getting the type of 'self' (line 2259)
        self_159119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 26), 'self')
        # Obtaining the member '_y' of a type (line 2259)
        _y_159120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 26), self_159119, '_y')
        # Applying the binary operator '==' (line 2259)
        result_eq_159121 = python_operator(stypy.reporting.localization.Localization(__file__, 2259, 15), '==', _x_159118, _y_159120)
        
        # Testing the type of an if condition (line 2259)
        if_condition_159122 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2259, 12), result_eq_159121)
        # Assigning a type to the variable 'if_condition_159122' (line 2259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 12), 'if_condition_159122', if_condition_159122)
        # SSA begins for if statement (line 2259)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2260):
        
        # Assigning a Call to a Attribute (line 2260):
        
        # Call to get_affine(...): (line 2260)
        # Processing the call keyword arguments (line 2260)
        kwargs_159126 = {}
        # Getting the type of 'self' (line 2260)
        self_159123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 31), 'self', False)
        # Obtaining the member '_x' of a type (line 2260)
        _x_159124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2260, 31), self_159123, '_x')
        # Obtaining the member 'get_affine' of a type (line 2260)
        get_affine_159125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2260, 31), _x_159124, 'get_affine')
        # Calling get_affine(args, kwargs) (line 2260)
        get_affine_call_result_159127 = invoke(stypy.reporting.localization.Localization(__file__, 2260, 31), get_affine_159125, *[], **kwargs_159126)
        
        # Getting the type of 'self' (line 2260)
        self_159128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 16), 'self')
        # Setting the type of the member '_affine' of a type (line 2260)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2260, 16), self_159128, '_affine', get_affine_call_result_159127)
        # SSA branch for the else part of an if statement (line 2259)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2262):
        
        # Assigning a Call to a Name (line 2262):
        
        # Call to get_matrix(...): (line 2262)
        # Processing the call keyword arguments (line 2262)
        kwargs_159135 = {}
        
        # Call to get_affine(...): (line 2262)
        # Processing the call keyword arguments (line 2262)
        kwargs_159132 = {}
        # Getting the type of 'self' (line 2262)
        self_159129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 24), 'self', False)
        # Obtaining the member '_x' of a type (line 2262)
        _x_159130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2262, 24), self_159129, '_x')
        # Obtaining the member 'get_affine' of a type (line 2262)
        get_affine_159131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2262, 24), _x_159130, 'get_affine')
        # Calling get_affine(args, kwargs) (line 2262)
        get_affine_call_result_159133 = invoke(stypy.reporting.localization.Localization(__file__, 2262, 24), get_affine_159131, *[], **kwargs_159132)
        
        # Obtaining the member 'get_matrix' of a type (line 2262)
        get_matrix_159134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2262, 24), get_affine_call_result_159133, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 2262)
        get_matrix_call_result_159136 = invoke(stypy.reporting.localization.Localization(__file__, 2262, 24), get_matrix_159134, *[], **kwargs_159135)
        
        # Assigning a type to the variable 'x_mtx' (line 2262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2262, 16), 'x_mtx', get_matrix_call_result_159136)
        
        # Assigning a Call to a Name (line 2263):
        
        # Assigning a Call to a Name (line 2263):
        
        # Call to get_matrix(...): (line 2263)
        # Processing the call keyword arguments (line 2263)
        kwargs_159143 = {}
        
        # Call to get_affine(...): (line 2263)
        # Processing the call keyword arguments (line 2263)
        kwargs_159140 = {}
        # Getting the type of 'self' (line 2263)
        self_159137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 24), 'self', False)
        # Obtaining the member '_y' of a type (line 2263)
        _y_159138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2263, 24), self_159137, '_y')
        # Obtaining the member 'get_affine' of a type (line 2263)
        get_affine_159139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2263, 24), _y_159138, 'get_affine')
        # Calling get_affine(args, kwargs) (line 2263)
        get_affine_call_result_159141 = invoke(stypy.reporting.localization.Localization(__file__, 2263, 24), get_affine_159139, *[], **kwargs_159140)
        
        # Obtaining the member 'get_matrix' of a type (line 2263)
        get_matrix_159142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2263, 24), get_affine_call_result_159141, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 2263)
        get_matrix_call_result_159144 = invoke(stypy.reporting.localization.Localization(__file__, 2263, 24), get_matrix_159142, *[], **kwargs_159143)
        
        # Assigning a type to the variable 'y_mtx' (line 2263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 16), 'y_mtx', get_matrix_call_result_159144)
        
        # Assigning a Call to a Name (line 2267):
        
        # Assigning a Call to a Name (line 2267):
        
        # Call to vstack(...): (line 2267)
        # Processing the call arguments (line 2267)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2267)
        tuple_159147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2267)
        # Adding element type (line 2267)
        
        # Obtaining the type of the subscript
        int_159148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 39), 'int')
        # Getting the type of 'x_mtx' (line 2267)
        x_mtx_159149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 33), 'x_mtx', False)
        # Obtaining the member '__getitem__' of a type (line 2267)
        getitem___159150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 33), x_mtx_159149, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2267)
        subscript_call_result_159151 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 33), getitem___159150, int_159148)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 33), tuple_159147, subscript_call_result_159151)
        # Adding element type (line 2267)
        
        # Obtaining the type of the subscript
        int_159152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 49), 'int')
        # Getting the type of 'y_mtx' (line 2267)
        y_mtx_159153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 43), 'y_mtx', False)
        # Obtaining the member '__getitem__' of a type (line 2267)
        getitem___159154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 43), y_mtx_159153, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2267)
        subscript_call_result_159155 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 43), getitem___159154, int_159152)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 33), tuple_159147, subscript_call_result_159155)
        # Adding element type (line 2267)
        
        # Obtaining an instance of the builtin type 'list' (line 2267)
        list_159156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 53), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2267)
        # Adding element type (line 2267)
        float_159157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 54), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 53), list_159156, float_159157)
        # Adding element type (line 2267)
        float_159158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 59), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 53), list_159156, float_159158)
        # Adding element type (line 2267)
        float_159159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 64), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 53), list_159156, float_159159)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2267, 33), tuple_159147, list_159156)
        
        # Processing the call keyword arguments (line 2267)
        kwargs_159160 = {}
        # Getting the type of 'np' (line 2267)
        np_159145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 22), 'np', False)
        # Obtaining the member 'vstack' of a type (line 2267)
        vstack_159146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 22), np_159145, 'vstack')
        # Calling vstack(args, kwargs) (line 2267)
        vstack_call_result_159161 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 22), vstack_159146, *[tuple_159147], **kwargs_159160)
        
        # Assigning a type to the variable 'mtx' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 16), 'mtx', vstack_call_result_159161)
        
        # Assigning a Call to a Attribute (line 2268):
        
        # Assigning a Call to a Attribute (line 2268):
        
        # Call to Affine2D(...): (line 2268)
        # Processing the call arguments (line 2268)
        # Getting the type of 'mtx' (line 2268)
        mtx_159163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 40), 'mtx', False)
        # Processing the call keyword arguments (line 2268)
        kwargs_159164 = {}
        # Getting the type of 'Affine2D' (line 2268)
        Affine2D_159162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 31), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 2268)
        Affine2D_call_result_159165 = invoke(stypy.reporting.localization.Localization(__file__, 2268, 31), Affine2D_159162, *[mtx_159163], **kwargs_159164)
        
        # Getting the type of 'self' (line 2268)
        self_159166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 16), 'self')
        # Setting the type of the member '_affine' of a type (line 2268)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2268, 16), self_159166, '_affine', Affine2D_call_result_159165)
        # SSA join for if statement (line 2259)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Attribute (line 2269):
        
        # Assigning a Num to a Attribute (line 2269):
        int_159167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 28), 'int')
        # Getting the type of 'self' (line 2269)
        self_159168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 2269)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 12), self_159168, '_invalid', int_159167)
        # SSA join for if statement (line 2258)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 2270)
        self_159169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 15), 'self')
        # Obtaining the member '_affine' of a type (line 2270)
        _affine_159170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 15), self_159169, '_affine')
        # Assigning a type to the variable 'stypy_return_type' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 8), 'stypy_return_type', _affine_159170)
        
        # ################# End of 'get_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2257)
        stypy_return_type_159171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159171)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_affine'
        return stypy_return_type_159171

    
    # Assigning a Attribute to a Attribute (line 2271):

# Assigning a type to the variable 'BlendedGenericTransform' (line 2157)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2157, 0), 'BlendedGenericTransform', BlendedGenericTransform)

# Assigning a Num to a Name (line 2165):
int_159172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2165, 17), 'int')
# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform')
# Setting the type of the member 'input_dims' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159173, 'input_dims', int_159172)

# Assigning a Num to a Name (line 2166):
int_159174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2166, 18), 'int')
# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform')
# Setting the type of the member 'output_dims' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159175, 'output_dims', int_159174)

# Assigning a Name to a Name (line 2167):
# Getting the type of 'True' (line 2167)
True_159176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 19), 'True')
# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159177, 'is_separable', True_159176)

# Assigning a Name to a Name (line 2168):
# Getting the type of 'True' (line 2168)
True_159178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 19), 'True')
# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform')
# Setting the type of the member 'pass_through' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159179, 'pass_through', True_159178)

# Assigning a Call to a Name (line 2212):

# Call to property(...): (line 2212)
# Processing the call arguments (line 2212)
# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform', False)
# Obtaining the member '_get_is_affine' of a type
_get_is_affine_159182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159181, '_get_is_affine')
# Processing the call keyword arguments (line 2212)
kwargs_159183 = {}
# Getting the type of 'property' (line 2212)
property_159180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 16), 'property', False)
# Calling property(args, kwargs) (line 2212)
property_call_result_159184 = invoke(stypy.reporting.localization.Localization(__file__, 2212, 16), property_159180, *[_get_is_affine_159182], **kwargs_159183)

# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform')
# Setting the type of the member 'is_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159185, 'is_affine', property_call_result_159184)

# Assigning a Call to a Name (line 2216):

# Call to property(...): (line 2216)
# Processing the call arguments (line 2216)
# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform', False)
# Obtaining the member '_get_has_inverse' of a type
_get_has_inverse_159188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159187, '_get_has_inverse')
# Processing the call keyword arguments (line 2216)
kwargs_159189 = {}
# Getting the type of 'property' (line 2216)
property_159186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 18), 'property', False)
# Calling property(args, kwargs) (line 2216)
property_call_result_159190 = invoke(stypy.reporting.localization.Localization(__file__, 2216, 18), property_159186, *[_get_has_inverse_159188], **kwargs_159189)

# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform')
# Setting the type of the member 'has_inverse' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159191, 'has_inverse', property_call_result_159190)

# Assigning a Attribute to a Attribute (line 2220):
# Getting the type of 'Transform' (line 2220)
Transform_159192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 21), 'Transform')
# Obtaining the member 'frozen' of a type (line 2220)
frozen_159193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2220, 21), Transform_159192, 'frozen')
# Obtaining the member '__doc__' of a type (line 2220)
doc___159194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2220, 21), frozen_159193, '__doc__')
# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform')
# Obtaining the member 'frozen' of a type
frozen_159196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159195, 'frozen')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), frozen_159196, '__doc__', doc___159194)

# Assigning a Attribute to a Attribute (line 2251):
# Getting the type of 'Transform' (line 2251)
Transform_159197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 35), 'Transform')
# Obtaining the member 'transform_non_affine' of a type (line 2251)
transform_non_affine_159198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 35), Transform_159197, 'transform_non_affine')
# Obtaining the member '__doc__' of a type (line 2251)
doc___159199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 35), transform_non_affine_159198, '__doc__')
# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform')
# Obtaining the member 'transform_non_affine' of a type
transform_non_affine_159201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159200, 'transform_non_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_non_affine_159201, '__doc__', doc___159199)

# Assigning a Attribute to a Attribute (line 2255):
# Getting the type of 'Transform' (line 2255)
Transform_159202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 23), 'Transform')
# Obtaining the member 'inverted' of a type (line 2255)
inverted_159203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2255, 23), Transform_159202, 'inverted')
# Obtaining the member '__doc__' of a type (line 2255)
doc___159204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2255, 23), inverted_159203, '__doc__')
# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform')
# Obtaining the member 'inverted' of a type
inverted_159206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159205, 'inverted')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), inverted_159206, '__doc__', doc___159204)

# Assigning a Attribute to a Attribute (line 2271):
# Getting the type of 'Transform' (line 2271)
Transform_159207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2271, 25), 'Transform')
# Obtaining the member 'get_affine' of a type (line 2271)
get_affine_159208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 25), Transform_159207, 'get_affine')
# Obtaining the member '__doc__' of a type (line 2271)
doc___159209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 25), get_affine_159208, '__doc__')
# Getting the type of 'BlendedGenericTransform'
BlendedGenericTransform_159210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedGenericTransform')
# Obtaining the member 'get_affine' of a type
get_affine_159211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedGenericTransform_159210, 'get_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_affine_159211, '__doc__', doc___159209)
# Declaration of the 'BlendedAffine2D' class
# Getting the type of 'Affine2DBase' (line 2274)
Affine2DBase_159212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 22), 'Affine2DBase')

class BlendedAffine2D(Affine2DBase_159212, ):
    unicode_159213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2281, (-1)), 'unicode', u'\n    A "blended" transform uses one transform for the *x*-direction, and\n    another transform for the *y*-direction.\n\n    This version is an optimization for the case where both child\n    transforms are of type :class:`Affine2DBase`.\n    ')
    
    # Assigning a Name to a Name (line 2282):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2284, 4, False)
        # Assigning a type to the variable 'self' (line 2285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedAffine2D.__init__', ['x_transform', 'y_transform'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['x_transform', 'y_transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_159214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2297, (-1)), 'unicode', u'\n        Create a new "blended" transform using *x_transform* to\n        transform the *x*-axis and *y_transform* to transform the\n        *y*-axis.\n\n        Both *x_transform* and *y_transform* must be 2D affine\n        transforms.\n\n        You will generally not call this constructor directly but use\n        the :func:`blended_transform_factory` function instead, which\n        can determine automatically which kind of blended transform to\n        create.\n        ')
        
        # Assigning a BoolOp to a Name (line 2298):
        
        # Assigning a BoolOp to a Name (line 2298):
        
        # Evaluating a boolean operation
        # Getting the type of 'x_transform' (line 2298)
        x_transform_159215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 20), 'x_transform')
        # Obtaining the member 'is_affine' of a type (line 2298)
        is_affine_159216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 20), x_transform_159215, 'is_affine')
        # Getting the type of 'y_transform' (line 2298)
        y_transform_159217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 46), 'y_transform')
        # Obtaining the member 'is_affine' of a type (line 2298)
        is_affine_159218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 46), y_transform_159217, 'is_affine')
        # Applying the binary operator 'and' (line 2298)
        result_and_keyword_159219 = python_operator(stypy.reporting.localization.Localization(__file__, 2298, 20), 'and', is_affine_159216, is_affine_159218)
        
        # Assigning a type to the variable 'is_affine' (line 2298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 8), 'is_affine', result_and_keyword_159219)
        
        # Assigning a BoolOp to a Name (line 2299):
        
        # Assigning a BoolOp to a Name (line 2299):
        
        # Evaluating a boolean operation
        # Getting the type of 'x_transform' (line 2299)
        x_transform_159220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 23), 'x_transform')
        # Obtaining the member 'is_separable' of a type (line 2299)
        is_separable_159221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 23), x_transform_159220, 'is_separable')
        # Getting the type of 'y_transform' (line 2299)
        y_transform_159222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 52), 'y_transform')
        # Obtaining the member 'is_separable' of a type (line 2299)
        is_separable_159223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 52), y_transform_159222, 'is_separable')
        # Applying the binary operator 'and' (line 2299)
        result_and_keyword_159224 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 23), 'and', is_separable_159221, is_separable_159223)
        
        # Assigning a type to the variable 'is_separable' (line 2299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2299, 8), 'is_separable', result_and_keyword_159224)
        
        # Assigning a BoolOp to a Name (line 2300):
        
        # Assigning a BoolOp to a Name (line 2300):
        
        # Evaluating a boolean operation
        # Getting the type of 'is_affine' (line 2300)
        is_affine_159225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 21), 'is_affine')
        # Getting the type of 'is_separable' (line 2300)
        is_separable_159226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 35), 'is_separable')
        # Applying the binary operator 'and' (line 2300)
        result_and_keyword_159227 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 21), 'and', is_affine_159225, is_separable_159226)
        
        # Assigning a type to the variable 'is_correct' (line 2300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2300, 8), 'is_correct', result_and_keyword_159227)
        
        
        # Getting the type of 'is_correct' (line 2301)
        is_correct_159228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 15), 'is_correct')
        # Applying the 'not' unary operator (line 2301)
        result_not__159229 = python_operator(stypy.reporting.localization.Localization(__file__, 2301, 11), 'not', is_correct_159228)
        
        # Testing the type of an if condition (line 2301)
        if_condition_159230 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2301, 8), result_not__159229)
        # Assigning a type to the variable 'if_condition_159230' (line 2301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 8), 'if_condition_159230', if_condition_159230)
        # SSA begins for if statement (line 2301)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 2302):
        
        # Assigning a Str to a Name (line 2302):
        unicode_159231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2302, 19), 'unicode', u'Both *x_transform* and *y_transform* must be 2D affine transforms.')
        # Assigning a type to the variable 'msg' (line 2302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2302, 12), 'msg', unicode_159231)
        
        # Call to ValueError(...): (line 2304)
        # Processing the call arguments (line 2304)
        # Getting the type of 'msg' (line 2304)
        msg_159233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 29), 'msg', False)
        # Processing the call keyword arguments (line 2304)
        kwargs_159234 = {}
        # Getting the type of 'ValueError' (line 2304)
        ValueError_159232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2304)
        ValueError_call_result_159235 = invoke(stypy.reporting.localization.Localization(__file__, 2304, 18), ValueError_159232, *[msg_159233], **kwargs_159234)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2304, 12), ValueError_call_result_159235, 'raise parameter', BaseException)
        # SSA join for if statement (line 2301)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 2306)
        # Processing the call arguments (line 2306)
        # Getting the type of 'self' (line 2306)
        self_159238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 27), 'self', False)
        # Processing the call keyword arguments (line 2306)
        # Getting the type of 'kwargs' (line 2306)
        kwargs_159239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 35), 'kwargs', False)
        kwargs_159240 = {'kwargs_159239': kwargs_159239}
        # Getting the type of 'Transform' (line 2306)
        Transform_159236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 8), 'Transform', False)
        # Obtaining the member '__init__' of a type (line 2306)
        init___159237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2306, 8), Transform_159236, '__init__')
        # Calling __init__(args, kwargs) (line 2306)
        init___call_result_159241 = invoke(stypy.reporting.localization.Localization(__file__, 2306, 8), init___159237, *[self_159238], **kwargs_159240)
        
        
        # Assigning a Name to a Attribute (line 2307):
        
        # Assigning a Name to a Attribute (line 2307):
        # Getting the type of 'x_transform' (line 2307)
        x_transform_159242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 18), 'x_transform')
        # Getting the type of 'self' (line 2307)
        self_159243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'self')
        # Setting the type of the member '_x' of a type (line 2307)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 8), self_159243, '_x', x_transform_159242)
        
        # Assigning a Name to a Attribute (line 2308):
        
        # Assigning a Name to a Attribute (line 2308):
        # Getting the type of 'y_transform' (line 2308)
        y_transform_159244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 18), 'y_transform')
        # Getting the type of 'self' (line 2308)
        self_159245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'self')
        # Setting the type of the member '_y' of a type (line 2308)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 8), self_159245, '_y', y_transform_159244)
        
        # Call to set_children(...): (line 2309)
        # Processing the call arguments (line 2309)
        # Getting the type of 'x_transform' (line 2309)
        x_transform_159248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 26), 'x_transform', False)
        # Getting the type of 'y_transform' (line 2309)
        y_transform_159249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 39), 'y_transform', False)
        # Processing the call keyword arguments (line 2309)
        kwargs_159250 = {}
        # Getting the type of 'self' (line 2309)
        self_159246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 2309)
        set_children_159247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2309, 8), self_159246, 'set_children')
        # Calling set_children(args, kwargs) (line 2309)
        set_children_call_result_159251 = invoke(stypy.reporting.localization.Localization(__file__, 2309, 8), set_children_159247, *[x_transform_159248, y_transform_159249], **kwargs_159250)
        
        
        # Call to __init__(...): (line 2311)
        # Processing the call arguments (line 2311)
        # Getting the type of 'self' (line 2311)
        self_159254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 30), 'self', False)
        # Processing the call keyword arguments (line 2311)
        kwargs_159255 = {}
        # Getting the type of 'Affine2DBase' (line 2311)
        Affine2DBase_159252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 8), 'Affine2DBase', False)
        # Obtaining the member '__init__' of a type (line 2311)
        init___159253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2311, 8), Affine2DBase_159252, '__init__')
        # Calling __init__(args, kwargs) (line 2311)
        init___call_result_159256 = invoke(stypy.reporting.localization.Localization(__file__, 2311, 8), init___159253, *[self_159254], **kwargs_159255)
        
        
        # Assigning a Name to a Attribute (line 2312):
        
        # Assigning a Name to a Attribute (line 2312):
        # Getting the type of 'None' (line 2312)
        None_159257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 20), 'None')
        # Getting the type of 'self' (line 2312)
        self_159258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 2312)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 8), self_159258, '_mtx', None_159257)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 2314, 4, False)
        # Assigning a type to the variable 'self' (line 2315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'BlendedAffine2D.stypy__eq__')
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedAffine2D.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedAffine2D.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        # Call to isinstance(...): (line 2316)
        # Processing the call arguments (line 2316)
        # Getting the type of 'other' (line 2316)
        other_159260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 22), 'other', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2316)
        tuple_159261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2316, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2316)
        # Adding element type (line 2316)
        # Getting the type of 'BlendedAffine2D' (line 2316)
        BlendedAffine2D_159262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 30), 'BlendedAffine2D', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2316, 30), tuple_159261, BlendedAffine2D_159262)
        # Adding element type (line 2316)
        # Getting the type of 'BlendedGenericTransform' (line 2316)
        BlendedGenericTransform_159263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 47), 'BlendedGenericTransform', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2316, 30), tuple_159261, BlendedGenericTransform_159263)
        
        # Processing the call keyword arguments (line 2316)
        kwargs_159264 = {}
        # Getting the type of 'isinstance' (line 2316)
        isinstance_159259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2316)
        isinstance_call_result_159265 = invoke(stypy.reporting.localization.Localization(__file__, 2316, 11), isinstance_159259, *[other_159260, tuple_159261], **kwargs_159264)
        
        # Testing the type of an if condition (line 2316)
        if_condition_159266 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2316, 8), isinstance_call_result_159265)
        # Assigning a type to the variable 'if_condition_159266' (line 2316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 8), 'if_condition_159266', if_condition_159266)
        # SSA begins for if statement (line 2316)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2317)
        self_159267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 20), 'self')
        # Obtaining the member '_x' of a type (line 2317)
        _x_159268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2317, 20), self_159267, '_x')
        # Getting the type of 'other' (line 2317)
        other_159269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 31), 'other')
        # Obtaining the member '_x' of a type (line 2317)
        _x_159270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2317, 31), other_159269, '_x')
        # Applying the binary operator '==' (line 2317)
        result_eq_159271 = python_operator(stypy.reporting.localization.Localization(__file__, 2317, 20), '==', _x_159268, _x_159270)
        
        
        # Getting the type of 'self' (line 2317)
        self_159272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 46), 'self')
        # Obtaining the member '_y' of a type (line 2317)
        _y_159273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2317, 46), self_159272, '_y')
        # Getting the type of 'other' (line 2317)
        other_159274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 57), 'other')
        # Obtaining the member '_y' of a type (line 2317)
        _y_159275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2317, 57), other_159274, '_y')
        # Applying the binary operator '==' (line 2317)
        result_eq_159276 = python_operator(stypy.reporting.localization.Localization(__file__, 2317, 46), '==', _y_159273, _y_159275)
        
        # Applying the binary operator 'and' (line 2317)
        result_and_keyword_159277 = python_operator(stypy.reporting.localization.Localization(__file__, 2317, 19), 'and', result_eq_159271, result_eq_159276)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2317, 12), 'stypy_return_type', result_and_keyword_159277)
        # SSA branch for the else part of an if statement (line 2316)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 2318)
        self_159278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 13), 'self')
        # Obtaining the member '_x' of a type (line 2318)
        _x_159279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2318, 13), self_159278, '_x')
        # Getting the type of 'self' (line 2318)
        self_159280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 24), 'self')
        # Obtaining the member '_y' of a type (line 2318)
        _y_159281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2318, 24), self_159280, '_y')
        # Applying the binary operator '==' (line 2318)
        result_eq_159282 = python_operator(stypy.reporting.localization.Localization(__file__, 2318, 13), '==', _x_159279, _y_159281)
        
        # Testing the type of an if condition (line 2318)
        if_condition_159283 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2318, 13), result_eq_159282)
        # Assigning a type to the variable 'if_condition_159283' (line 2318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2318, 13), 'if_condition_159283', if_condition_159283)
        # SSA begins for if statement (line 2318)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 2319)
        self_159284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 19), 'self')
        # Obtaining the member '_x' of a type (line 2319)
        _x_159285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2319, 19), self_159284, '_x')
        # Getting the type of 'other' (line 2319)
        other_159286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 30), 'other')
        # Applying the binary operator '==' (line 2319)
        result_eq_159287 = python_operator(stypy.reporting.localization.Localization(__file__, 2319, 19), '==', _x_159285, other_159286)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2319, 12), 'stypy_return_type', result_eq_159287)
        # SSA branch for the else part of an if statement (line 2318)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'NotImplemented' (line 2321)
        NotImplemented_159288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 2321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2321, 12), 'stypy_return_type', NotImplemented_159288)
        # SSA join for if statement (line 2318)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2316)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 2314)
        stypy_return_type_159289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159289)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_159289


    @norecursion
    def contains_branch_seperately(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains_branch_seperately'
        module_type_store = module_type_store.open_function_context('contains_branch_seperately', 2323, 4, False)
        # Assigning a type to the variable 'self' (line 2324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2324, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_localization', localization)
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_function_name', 'BlendedAffine2D.contains_branch_seperately')
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_param_names_list', ['transform'])
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedAffine2D.contains_branch_seperately.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedAffine2D.contains_branch_seperately', ['transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains_branch_seperately', localization, ['transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains_branch_seperately(...)' code ##################

        
        # Obtaining an instance of the builtin type 'tuple' (line 2325)
        tuple_159290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2325, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2325)
        # Adding element type (line 2325)
        
        # Call to contains_branch(...): (line 2325)
        # Processing the call arguments (line 2325)
        # Getting the type of 'transform' (line 2325)
        transform_159294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 39), 'transform', False)
        # Processing the call keyword arguments (line 2325)
        kwargs_159295 = {}
        # Getting the type of 'self' (line 2325)
        self_159291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 15), 'self', False)
        # Obtaining the member '_x' of a type (line 2325)
        _x_159292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2325, 15), self_159291, '_x')
        # Obtaining the member 'contains_branch' of a type (line 2325)
        contains_branch_159293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2325, 15), _x_159292, 'contains_branch')
        # Calling contains_branch(args, kwargs) (line 2325)
        contains_branch_call_result_159296 = invoke(stypy.reporting.localization.Localization(__file__, 2325, 15), contains_branch_159293, *[transform_159294], **kwargs_159295)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2325, 15), tuple_159290, contains_branch_call_result_159296)
        # Adding element type (line 2325)
        
        # Call to contains_branch(...): (line 2325)
        # Processing the call arguments (line 2325)
        # Getting the type of 'transform' (line 2325)
        transform_159300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 75), 'transform', False)
        # Processing the call keyword arguments (line 2325)
        kwargs_159301 = {}
        # Getting the type of 'self' (line 2325)
        self_159297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 51), 'self', False)
        # Obtaining the member '_y' of a type (line 2325)
        _y_159298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2325, 51), self_159297, '_y')
        # Obtaining the member 'contains_branch' of a type (line 2325)
        contains_branch_159299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2325, 51), _y_159298, 'contains_branch')
        # Calling contains_branch(args, kwargs) (line 2325)
        contains_branch_call_result_159302 = invoke(stypy.reporting.localization.Localization(__file__, 2325, 51), contains_branch_159299, *[transform_159300], **kwargs_159301)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2325, 15), tuple_159290, contains_branch_call_result_159302)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2325, 8), 'stypy_return_type', tuple_159290)
        
        # ################# End of 'contains_branch_seperately(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains_branch_seperately' in the type store
        # Getting the type of 'stypy_return_type' (line 2323)
        stypy_return_type_159303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159303)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains_branch_seperately'
        return stypy_return_type_159303


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 2327, 4, False)
        # Assigning a type to the variable 'self' (line 2328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2328, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'BlendedAffine2D.stypy__repr__')
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedAffine2D.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedAffine2D.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_159304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2328, 15), 'unicode', u'BlendedAffine2D(%s,%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2328)
        tuple_159305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2328, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2328)
        # Adding element type (line 2328)
        # Getting the type of 'self' (line 2328)
        self_159306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 43), 'self')
        # Obtaining the member '_x' of a type (line 2328)
        _x_159307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2328, 43), self_159306, '_x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2328, 43), tuple_159305, _x_159307)
        # Adding element type (line 2328)
        # Getting the type of 'self' (line 2328)
        self_159308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 52), 'self')
        # Obtaining the member '_y' of a type (line 2328)
        _y_159309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2328, 52), self_159308, '_y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2328, 43), tuple_159305, _y_159309)
        
        # Applying the binary operator '%' (line 2328)
        result_mod_159310 = python_operator(stypy.reporting.localization.Localization(__file__, 2328, 15), '%', unicode_159304, tuple_159305)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2328, 8), 'stypy_return_type', result_mod_159310)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 2327)
        stypy_return_type_159311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159311)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_159311


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 2330, 4, False)
        # Assigning a type to the variable 'self' (line 2331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2331, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_function_name', 'BlendedAffine2D.get_matrix')
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BlendedAffine2D.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlendedAffine2D.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        
        # Getting the type of 'self' (line 2331)
        self_159312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 2331)
        _invalid_159313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2331, 11), self_159312, '_invalid')
        # Testing the type of an if condition (line 2331)
        if_condition_159314 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2331, 8), _invalid_159313)
        # Assigning a type to the variable 'if_condition_159314' (line 2331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2331, 8), 'if_condition_159314', if_condition_159314)
        # SSA begins for if statement (line 2331)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 2332)
        self_159315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 15), 'self')
        # Obtaining the member '_x' of a type (line 2332)
        _x_159316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 15), self_159315, '_x')
        # Getting the type of 'self' (line 2332)
        self_159317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 26), 'self')
        # Obtaining the member '_y' of a type (line 2332)
        _y_159318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 26), self_159317, '_y')
        # Applying the binary operator '==' (line 2332)
        result_eq_159319 = python_operator(stypy.reporting.localization.Localization(__file__, 2332, 15), '==', _x_159316, _y_159318)
        
        # Testing the type of an if condition (line 2332)
        if_condition_159320 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2332, 12), result_eq_159319)
        # Assigning a type to the variable 'if_condition_159320' (line 2332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 12), 'if_condition_159320', if_condition_159320)
        # SSA begins for if statement (line 2332)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2333):
        
        # Assigning a Call to a Attribute (line 2333):
        
        # Call to get_matrix(...): (line 2333)
        # Processing the call keyword arguments (line 2333)
        kwargs_159324 = {}
        # Getting the type of 'self' (line 2333)
        self_159321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 28), 'self', False)
        # Obtaining the member '_x' of a type (line 2333)
        _x_159322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 28), self_159321, '_x')
        # Obtaining the member 'get_matrix' of a type (line 2333)
        get_matrix_159323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 28), _x_159322, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 2333)
        get_matrix_call_result_159325 = invoke(stypy.reporting.localization.Localization(__file__, 2333, 28), get_matrix_159323, *[], **kwargs_159324)
        
        # Getting the type of 'self' (line 2333)
        self_159326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 16), 'self')
        # Setting the type of the member '_mtx' of a type (line 2333)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 16), self_159326, '_mtx', get_matrix_call_result_159325)
        # SSA branch for the else part of an if statement (line 2332)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2335):
        
        # Assigning a Call to a Name (line 2335):
        
        # Call to get_matrix(...): (line 2335)
        # Processing the call keyword arguments (line 2335)
        kwargs_159330 = {}
        # Getting the type of 'self' (line 2335)
        self_159327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 24), 'self', False)
        # Obtaining the member '_x' of a type (line 2335)
        _x_159328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2335, 24), self_159327, '_x')
        # Obtaining the member 'get_matrix' of a type (line 2335)
        get_matrix_159329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2335, 24), _x_159328, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 2335)
        get_matrix_call_result_159331 = invoke(stypy.reporting.localization.Localization(__file__, 2335, 24), get_matrix_159329, *[], **kwargs_159330)
        
        # Assigning a type to the variable 'x_mtx' (line 2335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2335, 16), 'x_mtx', get_matrix_call_result_159331)
        
        # Assigning a Call to a Name (line 2336):
        
        # Assigning a Call to a Name (line 2336):
        
        # Call to get_matrix(...): (line 2336)
        # Processing the call keyword arguments (line 2336)
        kwargs_159335 = {}
        # Getting the type of 'self' (line 2336)
        self_159332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 24), 'self', False)
        # Obtaining the member '_y' of a type (line 2336)
        _y_159333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2336, 24), self_159332, '_y')
        # Obtaining the member 'get_matrix' of a type (line 2336)
        get_matrix_159334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2336, 24), _y_159333, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 2336)
        get_matrix_call_result_159336 = invoke(stypy.reporting.localization.Localization(__file__, 2336, 24), get_matrix_159334, *[], **kwargs_159335)
        
        # Assigning a type to the variable 'y_mtx' (line 2336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2336, 16), 'y_mtx', get_matrix_call_result_159336)
        
        # Assigning a Call to a Attribute (line 2340):
        
        # Assigning a Call to a Attribute (line 2340):
        
        # Call to vstack(...): (line 2340)
        # Processing the call arguments (line 2340)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2340)
        tuple_159339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2340)
        # Adding element type (line 2340)
        
        # Obtaining the type of the subscript
        int_159340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 45), 'int')
        # Getting the type of 'x_mtx' (line 2340)
        x_mtx_159341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 39), 'x_mtx', False)
        # Obtaining the member '__getitem__' of a type (line 2340)
        getitem___159342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 39), x_mtx_159341, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2340)
        subscript_call_result_159343 = invoke(stypy.reporting.localization.Localization(__file__, 2340, 39), getitem___159342, int_159340)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2340, 39), tuple_159339, subscript_call_result_159343)
        # Adding element type (line 2340)
        
        # Obtaining the type of the subscript
        int_159344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 55), 'int')
        # Getting the type of 'y_mtx' (line 2340)
        y_mtx_159345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 49), 'y_mtx', False)
        # Obtaining the member '__getitem__' of a type (line 2340)
        getitem___159346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 49), y_mtx_159345, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2340)
        subscript_call_result_159347 = invoke(stypy.reporting.localization.Localization(__file__, 2340, 49), getitem___159346, int_159344)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2340, 39), tuple_159339, subscript_call_result_159347)
        # Adding element type (line 2340)
        
        # Obtaining an instance of the builtin type 'list' (line 2340)
        list_159348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 59), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2340)
        # Adding element type (line 2340)
        float_159349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 60), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2340, 59), list_159348, float_159349)
        # Adding element type (line 2340)
        float_159350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 65), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2340, 59), list_159348, float_159350)
        # Adding element type (line 2340)
        float_159351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 70), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2340, 59), list_159348, float_159351)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2340, 39), tuple_159339, list_159348)
        
        # Processing the call keyword arguments (line 2340)
        kwargs_159352 = {}
        # Getting the type of 'np' (line 2340)
        np_159337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 28), 'np', False)
        # Obtaining the member 'vstack' of a type (line 2340)
        vstack_159338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 28), np_159337, 'vstack')
        # Calling vstack(args, kwargs) (line 2340)
        vstack_call_result_159353 = invoke(stypy.reporting.localization.Localization(__file__, 2340, 28), vstack_159338, *[tuple_159339], **kwargs_159352)
        
        # Getting the type of 'self' (line 2340)
        self_159354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 16), 'self')
        # Setting the type of the member '_mtx' of a type (line 2340)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 16), self_159354, '_mtx', vstack_call_result_159353)
        # SSA join for if statement (line 2332)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2341):
        
        # Assigning a Name to a Attribute (line 2341):
        # Getting the type of 'None' (line 2341)
        None_159355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 29), 'None')
        # Getting the type of 'self' (line 2341)
        self_159356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 12), 'self')
        # Setting the type of the member '_inverted' of a type (line 2341)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 12), self_159356, '_inverted', None_159355)
        
        # Assigning a Num to a Attribute (line 2342):
        
        # Assigning a Num to a Attribute (line 2342):
        int_159357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2342, 28), 'int')
        # Getting the type of 'self' (line 2342)
        self_159358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 2342)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2342, 12), self_159358, '_invalid', int_159357)
        # SSA join for if statement (line 2331)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 2343)
        self_159359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2343, 15), 'self')
        # Obtaining the member '_mtx' of a type (line 2343)
        _mtx_159360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2343, 15), self_159359, '_mtx')
        # Assigning a type to the variable 'stypy_return_type' (line 2343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2343, 8), 'stypy_return_type', _mtx_159360)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 2330)
        stypy_return_type_159361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159361)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_159361

    
    # Assigning a Attribute to a Attribute (line 2344):

# Assigning a type to the variable 'BlendedAffine2D' (line 2274)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2274, 0), 'BlendedAffine2D', BlendedAffine2D)

# Assigning a Name to a Name (line 2282):
# Getting the type of 'True' (line 2282)
True_159362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 19), 'True')
# Getting the type of 'BlendedAffine2D'
BlendedAffine2D_159363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedAffine2D')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedAffine2D_159363, 'is_separable', True_159362)

# Assigning a Attribute to a Attribute (line 2344):
# Getting the type of 'Affine2DBase' (line 2344)
Affine2DBase_159364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 25), 'Affine2DBase')
# Obtaining the member 'get_matrix' of a type (line 2344)
get_matrix_159365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 25), Affine2DBase_159364, 'get_matrix')
# Obtaining the member '__doc__' of a type (line 2344)
doc___159366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 25), get_matrix_159365, '__doc__')
# Getting the type of 'BlendedAffine2D'
BlendedAffine2D_159367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BlendedAffine2D')
# Obtaining the member 'get_matrix' of a type
get_matrix_159368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BlendedAffine2D_159367, 'get_matrix')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_matrix_159368, '__doc__', doc___159366)

@norecursion
def blended_transform_factory(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'blended_transform_factory'
    module_type_store = module_type_store.open_function_context('blended_transform_factory', 2347, 0, False)
    
    # Passed parameters checking function
    blended_transform_factory.stypy_localization = localization
    blended_transform_factory.stypy_type_of_self = None
    blended_transform_factory.stypy_type_store = module_type_store
    blended_transform_factory.stypy_function_name = 'blended_transform_factory'
    blended_transform_factory.stypy_param_names_list = ['x_transform', 'y_transform']
    blended_transform_factory.stypy_varargs_param_name = None
    blended_transform_factory.stypy_kwargs_param_name = None
    blended_transform_factory.stypy_call_defaults = defaults
    blended_transform_factory.stypy_call_varargs = varargs
    blended_transform_factory.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'blended_transform_factory', ['x_transform', 'y_transform'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'blended_transform_factory', localization, ['x_transform', 'y_transform'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'blended_transform_factory(...)' code ##################

    unicode_159369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2354, (-1)), 'unicode', u'\n    Create a new "blended" transform using *x_transform* to transform\n    the *x*-axis and *y_transform* to transform the *y*-axis.\n\n    A faster version of the blended transform is returned for the case\n    where both child transforms are affine.\n    ')
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 2355)
    # Processing the call arguments (line 2355)
    # Getting the type of 'x_transform' (line 2355)
    x_transform_159371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 19), 'x_transform', False)
    # Getting the type of 'Affine2DBase' (line 2355)
    Affine2DBase_159372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 32), 'Affine2DBase', False)
    # Processing the call keyword arguments (line 2355)
    kwargs_159373 = {}
    # Getting the type of 'isinstance' (line 2355)
    isinstance_159370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 8), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2355)
    isinstance_call_result_159374 = invoke(stypy.reporting.localization.Localization(__file__, 2355, 8), isinstance_159370, *[x_transform_159371, Affine2DBase_159372], **kwargs_159373)
    
    
    # Call to isinstance(...): (line 2356)
    # Processing the call arguments (line 2356)
    # Getting the type of 'y_transform' (line 2356)
    y_transform_159376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 23), 'y_transform', False)
    # Getting the type of 'Affine2DBase' (line 2356)
    Affine2DBase_159377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 36), 'Affine2DBase', False)
    # Processing the call keyword arguments (line 2356)
    kwargs_159378 = {}
    # Getting the type of 'isinstance' (line 2356)
    isinstance_159375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 12), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2356)
    isinstance_call_result_159379 = invoke(stypy.reporting.localization.Localization(__file__, 2356, 12), isinstance_159375, *[y_transform_159376, Affine2DBase_159377], **kwargs_159378)
    
    # Applying the binary operator 'and' (line 2355)
    result_and_keyword_159380 = python_operator(stypy.reporting.localization.Localization(__file__, 2355, 8), 'and', isinstance_call_result_159374, isinstance_call_result_159379)
    
    # Testing the type of an if condition (line 2355)
    if_condition_159381 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2355, 4), result_and_keyword_159380)
    # Assigning a type to the variable 'if_condition_159381' (line 2355)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2355, 4), 'if_condition_159381', if_condition_159381)
    # SSA begins for if statement (line 2355)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to BlendedAffine2D(...): (line 2357)
    # Processing the call arguments (line 2357)
    # Getting the type of 'x_transform' (line 2357)
    x_transform_159383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 31), 'x_transform', False)
    # Getting the type of 'y_transform' (line 2357)
    y_transform_159384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 44), 'y_transform', False)
    # Processing the call keyword arguments (line 2357)
    kwargs_159385 = {}
    # Getting the type of 'BlendedAffine2D' (line 2357)
    BlendedAffine2D_159382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 15), 'BlendedAffine2D', False)
    # Calling BlendedAffine2D(args, kwargs) (line 2357)
    BlendedAffine2D_call_result_159386 = invoke(stypy.reporting.localization.Localization(__file__, 2357, 15), BlendedAffine2D_159382, *[x_transform_159383, y_transform_159384], **kwargs_159385)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'stypy_return_type', BlendedAffine2D_call_result_159386)
    # SSA join for if statement (line 2355)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to BlendedGenericTransform(...): (line 2358)
    # Processing the call arguments (line 2358)
    # Getting the type of 'x_transform' (line 2358)
    x_transform_159388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 35), 'x_transform', False)
    # Getting the type of 'y_transform' (line 2358)
    y_transform_159389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 48), 'y_transform', False)
    # Processing the call keyword arguments (line 2358)
    kwargs_159390 = {}
    # Getting the type of 'BlendedGenericTransform' (line 2358)
    BlendedGenericTransform_159387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 11), 'BlendedGenericTransform', False)
    # Calling BlendedGenericTransform(args, kwargs) (line 2358)
    BlendedGenericTransform_call_result_159391 = invoke(stypy.reporting.localization.Localization(__file__, 2358, 11), BlendedGenericTransform_159387, *[x_transform_159388, y_transform_159389], **kwargs_159390)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2358)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2358, 4), 'stypy_return_type', BlendedGenericTransform_call_result_159391)
    
    # ################# End of 'blended_transform_factory(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'blended_transform_factory' in the type store
    # Getting the type of 'stypy_return_type' (line 2347)
    stypy_return_type_159392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_159392)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'blended_transform_factory'
    return stypy_return_type_159392

# Assigning a type to the variable 'blended_transform_factory' (line 2347)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2347, 0), 'blended_transform_factory', blended_transform_factory)
# Declaration of the 'CompositeGenericTransform' class
# Getting the type of 'Transform' (line 2361)
Transform_159393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 32), 'Transform')

class CompositeGenericTransform(Transform_159393, ):
    unicode_159394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2368, (-1)), 'unicode', u'\n    A composite transform formed by applying transform *a* then\n    transform *b*.\n\n    This "generic" version can handle any two arbitrary\n    transformations.\n    ')
    
    # Assigning a Name to a Name (line 2369):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2371, 4, False)
        # Assigning a type to the variable 'self' (line 2372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform.__init__', ['a', 'b'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['a', 'b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_159395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2380, (-1)), 'unicode', u'\n        Create a new composite transform that is the result of\n        applying transform *a* then transform *b*.\n\n        You will generally not call this constructor directly but use\n        the :func:`composite_transform_factory` function instead,\n        which can automatically choose the best kind of composite\n        transform instance to create.\n        ')
        
        
        # Getting the type of 'a' (line 2381)
        a_159396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 11), 'a')
        # Obtaining the member 'output_dims' of a type (line 2381)
        output_dims_159397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2381, 11), a_159396, 'output_dims')
        # Getting the type of 'b' (line 2381)
        b_159398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 28), 'b')
        # Obtaining the member 'input_dims' of a type (line 2381)
        input_dims_159399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2381, 28), b_159398, 'input_dims')
        # Applying the binary operator '!=' (line 2381)
        result_ne_159400 = python_operator(stypy.reporting.localization.Localization(__file__, 2381, 11), '!=', output_dims_159397, input_dims_159399)
        
        # Testing the type of an if condition (line 2381)
        if_condition_159401 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2381, 8), result_ne_159400)
        # Assigning a type to the variable 'if_condition_159401' (line 2381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2381, 8), 'if_condition_159401', if_condition_159401)
        # SSA begins for if statement (line 2381)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 2382):
        
        # Assigning a Str to a Name (line 2382):
        unicode_159402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 19), 'unicode', u"The output dimension of 'a' must be equal to the input dimensions of 'b'")
        # Assigning a type to the variable 'msg' (line 2382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 12), 'msg', unicode_159402)
        
        # Call to ValueError(...): (line 2384)
        # Processing the call arguments (line 2384)
        # Getting the type of 'msg' (line 2384)
        msg_159404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 29), 'msg', False)
        # Processing the call keyword arguments (line 2384)
        kwargs_159405 = {}
        # Getting the type of 'ValueError' (line 2384)
        ValueError_159403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2384)
        ValueError_call_result_159406 = invoke(stypy.reporting.localization.Localization(__file__, 2384, 18), ValueError_159403, *[msg_159404], **kwargs_159405)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2384, 12), ValueError_call_result_159406, 'raise parameter', BaseException)
        # SSA join for if statement (line 2381)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Attribute (line 2385):
        
        # Assigning a Attribute to a Attribute (line 2385):
        # Getting the type of 'a' (line 2385)
        a_159407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 26), 'a')
        # Obtaining the member 'input_dims' of a type (line 2385)
        input_dims_159408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2385, 26), a_159407, 'input_dims')
        # Getting the type of 'self' (line 2385)
        self_159409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 8), 'self')
        # Setting the type of the member 'input_dims' of a type (line 2385)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2385, 8), self_159409, 'input_dims', input_dims_159408)
        
        # Assigning a Attribute to a Attribute (line 2386):
        
        # Assigning a Attribute to a Attribute (line 2386):
        # Getting the type of 'b' (line 2386)
        b_159410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 27), 'b')
        # Obtaining the member 'output_dims' of a type (line 2386)
        output_dims_159411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2386, 27), b_159410, 'output_dims')
        # Getting the type of 'self' (line 2386)
        self_159412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 8), 'self')
        # Setting the type of the member 'output_dims' of a type (line 2386)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2386, 8), self_159412, 'output_dims', output_dims_159411)
        
        # Call to __init__(...): (line 2388)
        # Processing the call arguments (line 2388)
        # Getting the type of 'self' (line 2388)
        self_159415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 27), 'self', False)
        # Processing the call keyword arguments (line 2388)
        # Getting the type of 'kwargs' (line 2388)
        kwargs_159416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 35), 'kwargs', False)
        kwargs_159417 = {'kwargs_159416': kwargs_159416}
        # Getting the type of 'Transform' (line 2388)
        Transform_159413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 8), 'Transform', False)
        # Obtaining the member '__init__' of a type (line 2388)
        init___159414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2388, 8), Transform_159413, '__init__')
        # Calling __init__(args, kwargs) (line 2388)
        init___call_result_159418 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 8), init___159414, *[self_159415], **kwargs_159417)
        
        
        # Assigning a Name to a Attribute (line 2389):
        
        # Assigning a Name to a Attribute (line 2389):
        # Getting the type of 'a' (line 2389)
        a_159419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 18), 'a')
        # Getting the type of 'self' (line 2389)
        self_159420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 8), 'self')
        # Setting the type of the member '_a' of a type (line 2389)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2389, 8), self_159420, '_a', a_159419)
        
        # Assigning a Name to a Attribute (line 2390):
        
        # Assigning a Name to a Attribute (line 2390):
        # Getting the type of 'b' (line 2390)
        b_159421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 18), 'b')
        # Getting the type of 'self' (line 2390)
        self_159422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 8), 'self')
        # Setting the type of the member '_b' of a type (line 2390)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2390, 8), self_159422, '_b', b_159421)
        
        # Call to set_children(...): (line 2391)
        # Processing the call arguments (line 2391)
        # Getting the type of 'a' (line 2391)
        a_159425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 26), 'a', False)
        # Getting the type of 'b' (line 2391)
        b_159426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 29), 'b', False)
        # Processing the call keyword arguments (line 2391)
        kwargs_159427 = {}
        # Getting the type of 'self' (line 2391)
        self_159423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 2391)
        set_children_159424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2391, 8), self_159423, 'set_children')
        # Calling set_children(args, kwargs) (line 2391)
        set_children_call_result_159428 = invoke(stypy.reporting.localization.Localization(__file__, 2391, 8), set_children_159424, *[a_159425, b_159426], **kwargs_159427)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()

    
    # Assigning a Call to a Name (line 2393):

    @norecursion
    def frozen(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'frozen'
        module_type_store = module_type_store.open_function_context('frozen', 2395, 4, False)
        # Assigning a type to the variable 'self' (line 2396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2396, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform.frozen')
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform.frozen.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform.frozen', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'frozen', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'frozen(...)' code ##################

        
        # Assigning a Num to a Attribute (line 2396):
        
        # Assigning a Num to a Attribute (line 2396):
        int_159429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2396, 24), 'int')
        # Getting the type of 'self' (line 2396)
        self_159430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 8), 'self')
        # Setting the type of the member '_invalid' of a type (line 2396)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2396, 8), self_159430, '_invalid', int_159429)
        
        # Assigning a Call to a Name (line 2397):
        
        # Assigning a Call to a Name (line 2397):
        
        # Call to composite_transform_factory(...): (line 2397)
        # Processing the call arguments (line 2397)
        
        # Call to frozen(...): (line 2397)
        # Processing the call keyword arguments (line 2397)
        kwargs_159435 = {}
        # Getting the type of 'self' (line 2397)
        self_159432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 45), 'self', False)
        # Obtaining the member '_a' of a type (line 2397)
        _a_159433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2397, 45), self_159432, '_a')
        # Obtaining the member 'frozen' of a type (line 2397)
        frozen_159434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2397, 45), _a_159433, 'frozen')
        # Calling frozen(args, kwargs) (line 2397)
        frozen_call_result_159436 = invoke(stypy.reporting.localization.Localization(__file__, 2397, 45), frozen_159434, *[], **kwargs_159435)
        
        
        # Call to frozen(...): (line 2397)
        # Processing the call keyword arguments (line 2397)
        kwargs_159440 = {}
        # Getting the type of 'self' (line 2397)
        self_159437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 63), 'self', False)
        # Obtaining the member '_b' of a type (line 2397)
        _b_159438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2397, 63), self_159437, '_b')
        # Obtaining the member 'frozen' of a type (line 2397)
        frozen_159439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2397, 63), _b_159438, 'frozen')
        # Calling frozen(args, kwargs) (line 2397)
        frozen_call_result_159441 = invoke(stypy.reporting.localization.Localization(__file__, 2397, 63), frozen_159439, *[], **kwargs_159440)
        
        # Processing the call keyword arguments (line 2397)
        kwargs_159442 = {}
        # Getting the type of 'composite_transform_factory' (line 2397)
        composite_transform_factory_159431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 17), 'composite_transform_factory', False)
        # Calling composite_transform_factory(args, kwargs) (line 2397)
        composite_transform_factory_call_result_159443 = invoke(stypy.reporting.localization.Localization(__file__, 2397, 17), composite_transform_factory_159431, *[frozen_call_result_159436, frozen_call_result_159441], **kwargs_159442)
        
        # Assigning a type to the variable 'frozen' (line 2397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2397, 8), 'frozen', composite_transform_factory_call_result_159443)
        
        
        
        # Call to isinstance(...): (line 2398)
        # Processing the call arguments (line 2398)
        # Getting the type of 'frozen' (line 2398)
        frozen_159445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 26), 'frozen', False)
        # Getting the type of 'CompositeGenericTransform' (line 2398)
        CompositeGenericTransform_159446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 34), 'CompositeGenericTransform', False)
        # Processing the call keyword arguments (line 2398)
        kwargs_159447 = {}
        # Getting the type of 'isinstance' (line 2398)
        isinstance_159444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2398)
        isinstance_call_result_159448 = invoke(stypy.reporting.localization.Localization(__file__, 2398, 15), isinstance_159444, *[frozen_159445, CompositeGenericTransform_159446], **kwargs_159447)
        
        # Applying the 'not' unary operator (line 2398)
        result_not__159449 = python_operator(stypy.reporting.localization.Localization(__file__, 2398, 11), 'not', isinstance_call_result_159448)
        
        # Testing the type of an if condition (line 2398)
        if_condition_159450 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2398, 8), result_not__159449)
        # Assigning a type to the variable 'if_condition_159450' (line 2398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2398, 8), 'if_condition_159450', if_condition_159450)
        # SSA begins for if statement (line 2398)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to frozen(...): (line 2399)
        # Processing the call keyword arguments (line 2399)
        kwargs_159453 = {}
        # Getting the type of 'frozen' (line 2399)
        frozen_159451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 19), 'frozen', False)
        # Obtaining the member 'frozen' of a type (line 2399)
        frozen_159452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2399, 19), frozen_159451, 'frozen')
        # Calling frozen(args, kwargs) (line 2399)
        frozen_call_result_159454 = invoke(stypy.reporting.localization.Localization(__file__, 2399, 19), frozen_159452, *[], **kwargs_159453)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2399, 12), 'stypy_return_type', frozen_call_result_159454)
        # SSA join for if statement (line 2398)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'frozen' (line 2400)
        frozen_159455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 15), 'frozen')
        # Assigning a type to the variable 'stypy_return_type' (line 2400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2400, 8), 'stypy_return_type', frozen_159455)
        
        # ################# End of 'frozen(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'frozen' in the type store
        # Getting the type of 'stypy_return_type' (line 2395)
        stypy_return_type_159456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159456)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'frozen'
        return stypy_return_type_159456

    
    # Assigning a Attribute to a Attribute (line 2401):

    @norecursion
    def _invalidate_internal(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_invalidate_internal'
        module_type_store = module_type_store.open_function_context('_invalidate_internal', 2403, 4, False)
        # Assigning a type to the variable 'self' (line 2404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2404, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform._invalidate_internal')
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_param_names_list', ['value', 'invalidating_node'])
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform._invalidate_internal.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform._invalidate_internal', ['value', 'invalidating_node'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_invalidate_internal', localization, ['value', 'invalidating_node'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_invalidate_internal(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'value' (line 2409)
        value_159457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 11), 'value')
        # Getting the type of 'Transform' (line 2409)
        Transform_159458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 20), 'Transform')
        # Obtaining the member 'INVALID_AFFINE' of a type (line 2409)
        INVALID_AFFINE_159459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2409, 20), Transform_159458, 'INVALID_AFFINE')
        # Applying the binary operator '==' (line 2409)
        result_eq_159460 = python_operator(stypy.reporting.localization.Localization(__file__, 2409, 11), '==', value_159457, INVALID_AFFINE_159459)
        
        
        # Getting the type of 'self' (line 2410)
        self_159461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 20), 'self')
        # Obtaining the member '_b' of a type (line 2410)
        _b_159462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2410, 20), self_159461, '_b')
        # Obtaining the member 'is_affine' of a type (line 2410)
        is_affine_159463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2410, 20), _b_159462, 'is_affine')
        # Applying the 'not' unary operator (line 2410)
        result_not__159464 = python_operator(stypy.reporting.localization.Localization(__file__, 2410, 16), 'not', is_affine_159463)
        
        # Applying the binary operator 'and' (line 2409)
        result_and_keyword_159465 = python_operator(stypy.reporting.localization.Localization(__file__, 2409, 11), 'and', result_eq_159460, result_not__159464)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2411)
        self_159466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 21), 'self')
        # Obtaining the member '_a' of a type (line 2411)
        _a_159467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2411, 21), self_159466, '_a')
        # Obtaining the member 'is_affine' of a type (line 2411)
        is_affine_159468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2411, 21), _a_159467, 'is_affine')
        # Applying the 'not' unary operator (line 2411)
        result_not__159469 = python_operator(stypy.reporting.localization.Localization(__file__, 2411, 17), 'not', is_affine_159468)
        
        
        # Getting the type of 'invalidating_node' (line 2411)
        invalidating_node_159470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 42), 'invalidating_node')
        # Getting the type of 'self' (line 2411)
        self_159471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 63), 'self')
        # Obtaining the member '_a' of a type (line 2411)
        _a_159472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2411, 63), self_159471, '_a')
        # Applying the binary operator 'is' (line 2411)
        result_is__159473 = python_operator(stypy.reporting.localization.Localization(__file__, 2411, 42), 'is', invalidating_node_159470, _a_159472)
        
        # Applying the binary operator 'or' (line 2411)
        result_or_keyword_159474 = python_operator(stypy.reporting.localization.Localization(__file__, 2411, 17), 'or', result_not__159469, result_is__159473)
        
        # Applying the binary operator 'and' (line 2409)
        result_and_keyword_159475 = python_operator(stypy.reporting.localization.Localization(__file__, 2409, 11), 'and', result_and_keyword_159465, result_or_keyword_159474)
        
        # Testing the type of an if condition (line 2409)
        if_condition_159476 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2409, 8), result_and_keyword_159475)
        # Assigning a type to the variable 'if_condition_159476' (line 2409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2409, 8), 'if_condition_159476', if_condition_159476)
        # SSA begins for if statement (line 2409)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 2413):
        
        # Assigning a Attribute to a Name (line 2413):
        # Getting the type of 'Transform' (line 2413)
        Transform_159477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 20), 'Transform')
        # Obtaining the member 'INVALID' of a type (line 2413)
        INVALID_159478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 20), Transform_159477, 'INVALID')
        # Assigning a type to the variable 'value' (line 2413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 12), 'value', INVALID_159478)
        # SSA join for if statement (line 2409)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _invalidate_internal(...): (line 2415)
        # Processing the call arguments (line 2415)
        # Getting the type of 'self' (line 2415)
        self_159481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 39), 'self', False)
        # Processing the call keyword arguments (line 2415)
        # Getting the type of 'value' (line 2415)
        value_159482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 51), 'value', False)
        keyword_159483 = value_159482
        # Getting the type of 'invalidating_node' (line 2416)
        invalidating_node_159484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 57), 'invalidating_node', False)
        keyword_159485 = invalidating_node_159484
        kwargs_159486 = {'invalidating_node': keyword_159485, 'value': keyword_159483}
        # Getting the type of 'Transform' (line 2415)
        Transform_159479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 8), 'Transform', False)
        # Obtaining the member '_invalidate_internal' of a type (line 2415)
        _invalidate_internal_159480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2415, 8), Transform_159479, '_invalidate_internal')
        # Calling _invalidate_internal(args, kwargs) (line 2415)
        _invalidate_internal_call_result_159487 = invoke(stypy.reporting.localization.Localization(__file__, 2415, 8), _invalidate_internal_159480, *[self_159481], **kwargs_159486)
        
        
        # ################# End of '_invalidate_internal(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_invalidate_internal' in the type store
        # Getting the type of 'stypy_return_type' (line 2403)
        stypy_return_type_159488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159488)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_invalidate_internal'
        return stypy_return_type_159488


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 2418, 4, False)
        # Assigning a type to the variable 'self' (line 2419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform.stypy__eq__')
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        # Call to isinstance(...): (line 2419)
        # Processing the call arguments (line 2419)
        # Getting the type of 'other' (line 2419)
        other_159490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 22), 'other', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2419)
        tuple_159491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2419, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2419)
        # Adding element type (line 2419)
        # Getting the type of 'CompositeGenericTransform' (line 2419)
        CompositeGenericTransform_159492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 30), 'CompositeGenericTransform', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2419, 30), tuple_159491, CompositeGenericTransform_159492)
        # Adding element type (line 2419)
        # Getting the type of 'CompositeAffine2D' (line 2419)
        CompositeAffine2D_159493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 57), 'CompositeAffine2D', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2419, 30), tuple_159491, CompositeAffine2D_159493)
        
        # Processing the call keyword arguments (line 2419)
        kwargs_159494 = {}
        # Getting the type of 'isinstance' (line 2419)
        isinstance_159489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2419)
        isinstance_call_result_159495 = invoke(stypy.reporting.localization.Localization(__file__, 2419, 11), isinstance_159489, *[other_159490, tuple_159491], **kwargs_159494)
        
        # Testing the type of an if condition (line 2419)
        if_condition_159496 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2419, 8), isinstance_call_result_159495)
        # Assigning a type to the variable 'if_condition_159496' (line 2419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 8), 'if_condition_159496', if_condition_159496)
        # SSA begins for if statement (line 2419)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2420)
        self_159497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 19), 'self')
        # Getting the type of 'other' (line 2420)
        other_159498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 27), 'other')
        # Applying the binary operator 'is' (line 2420)
        result_is__159499 = python_operator(stypy.reporting.localization.Localization(__file__, 2420, 19), 'is', self_159497, other_159498)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2420)
        self_159500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 37), 'self')
        # Obtaining the member '_a' of a type (line 2420)
        _a_159501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2420, 37), self_159500, '_a')
        # Getting the type of 'other' (line 2420)
        other_159502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 48), 'other')
        # Obtaining the member '_a' of a type (line 2420)
        _a_159503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2420, 48), other_159502, '_a')
        # Applying the binary operator '==' (line 2420)
        result_eq_159504 = python_operator(stypy.reporting.localization.Localization(__file__, 2420, 37), '==', _a_159501, _a_159503)
        
        
        # Getting the type of 'self' (line 2420)
        self_159505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 61), 'self')
        # Obtaining the member '_b' of a type (line 2420)
        _b_159506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2420, 61), self_159505, '_b')
        # Getting the type of 'other' (line 2420)
        other_159507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 72), 'other')
        # Obtaining the member '_b' of a type (line 2420)
        _b_159508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2420, 72), other_159507, '_b')
        # Applying the binary operator '==' (line 2420)
        result_eq_159509 = python_operator(stypy.reporting.localization.Localization(__file__, 2420, 61), '==', _b_159506, _b_159508)
        
        # Applying the binary operator 'and' (line 2420)
        result_and_keyword_159510 = python_operator(stypy.reporting.localization.Localization(__file__, 2420, 37), 'and', result_eq_159504, result_eq_159509)
        
        # Applying the binary operator 'or' (line 2420)
        result_or_keyword_159511 = python_operator(stypy.reporting.localization.Localization(__file__, 2420, 19), 'or', result_is__159499, result_and_keyword_159510)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2420, 12), 'stypy_return_type', result_or_keyword_159511)
        # SSA branch for the else part of an if statement (line 2419)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'False' (line 2422)
        False_159512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2422, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 2422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2422, 12), 'stypy_return_type', False_159512)
        # SSA join for if statement (line 2419)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 2418)
        stypy_return_type_159513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159513)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_159513


    @norecursion
    def _iter_break_from_left_to_right(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_iter_break_from_left_to_right'
        module_type_store = module_type_store.open_function_context('_iter_break_from_left_to_right', 2424, 4, False)
        # Assigning a type to the variable 'self' (line 2425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2425, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform._iter_break_from_left_to_right')
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform._iter_break_from_left_to_right.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform._iter_break_from_left_to_right', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_iter_break_from_left_to_right', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_iter_break_from_left_to_right(...)' code ##################

        
        
        # Call to _iter_break_from_left_to_right(...): (line 2425)
        # Processing the call keyword arguments (line 2425)
        kwargs_159517 = {}
        # Getting the type of 'self' (line 2425)
        self_159514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2425, 44), 'self', False)
        # Obtaining the member '_a' of a type (line 2425)
        _a_159515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2425, 44), self_159514, '_a')
        # Obtaining the member '_iter_break_from_left_to_right' of a type (line 2425)
        _iter_break_from_left_to_right_159516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2425, 44), _a_159515, '_iter_break_from_left_to_right')
        # Calling _iter_break_from_left_to_right(args, kwargs) (line 2425)
        _iter_break_from_left_to_right_call_result_159518 = invoke(stypy.reporting.localization.Localization(__file__, 2425, 44), _iter_break_from_left_to_right_159516, *[], **kwargs_159517)
        
        # Testing the type of a for loop iterable (line 2425)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2425, 8), _iter_break_from_left_to_right_call_result_159518)
        # Getting the type of the for loop variable (line 2425)
        for_loop_var_159519 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2425, 8), _iter_break_from_left_to_right_call_result_159518)
        # Assigning a type to the variable 'lh_compliment' (line 2425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2425, 8), 'lh_compliment', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2425, 8), for_loop_var_159519))
        # Assigning a type to the variable 'rh_compliment' (line 2425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2425, 8), 'rh_compliment', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2425, 8), for_loop_var_159519))
        # SSA begins for a for statement (line 2425)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Creating a generator
        
        # Obtaining an instance of the builtin type 'tuple' (line 2426)
        tuple_159520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2426, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2426)
        # Adding element type (line 2426)
        # Getting the type of 'lh_compliment' (line 2426)
        lh_compliment_159521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 18), 'lh_compliment')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2426, 18), tuple_159520, lh_compliment_159521)
        # Adding element type (line 2426)
        # Getting the type of 'rh_compliment' (line 2426)
        rh_compliment_159522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 33), 'rh_compliment')
        # Getting the type of 'self' (line 2426)
        self_159523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 49), 'self')
        # Obtaining the member '_b' of a type (line 2426)
        _b_159524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2426, 49), self_159523, '_b')
        # Applying the binary operator '+' (line 2426)
        result_add_159525 = python_operator(stypy.reporting.localization.Localization(__file__, 2426, 33), '+', rh_compliment_159522, _b_159524)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2426, 18), tuple_159520, result_add_159525)
        
        GeneratorType_159526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2426, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2426, 12), GeneratorType_159526, tuple_159520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2426, 12), 'stypy_return_type', GeneratorType_159526)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _iter_break_from_left_to_right(...): (line 2427)
        # Processing the call keyword arguments (line 2427)
        kwargs_159530 = {}
        # Getting the type of 'self' (line 2427)
        self_159527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 44), 'self', False)
        # Obtaining the member '_b' of a type (line 2427)
        _b_159528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2427, 44), self_159527, '_b')
        # Obtaining the member '_iter_break_from_left_to_right' of a type (line 2427)
        _iter_break_from_left_to_right_159529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2427, 44), _b_159528, '_iter_break_from_left_to_right')
        # Calling _iter_break_from_left_to_right(args, kwargs) (line 2427)
        _iter_break_from_left_to_right_call_result_159531 = invoke(stypy.reporting.localization.Localization(__file__, 2427, 44), _iter_break_from_left_to_right_159529, *[], **kwargs_159530)
        
        # Testing the type of a for loop iterable (line 2427)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2427, 8), _iter_break_from_left_to_right_call_result_159531)
        # Getting the type of the for loop variable (line 2427)
        for_loop_var_159532 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2427, 8), _iter_break_from_left_to_right_call_result_159531)
        # Assigning a type to the variable 'lh_compliment' (line 2427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2427, 8), 'lh_compliment', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2427, 8), for_loop_var_159532))
        # Assigning a type to the variable 'rh_compliment' (line 2427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2427, 8), 'rh_compliment', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2427, 8), for_loop_var_159532))
        # SSA begins for a for statement (line 2427)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Creating a generator
        
        # Obtaining an instance of the builtin type 'tuple' (line 2428)
        tuple_159533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2428, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2428)
        # Adding element type (line 2428)
        # Getting the type of 'self' (line 2428)
        self_159534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2428, 18), 'self')
        # Obtaining the member '_a' of a type (line 2428)
        _a_159535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2428, 18), self_159534, '_a')
        # Getting the type of 'lh_compliment' (line 2428)
        lh_compliment_159536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2428, 28), 'lh_compliment')
        # Applying the binary operator '+' (line 2428)
        result_add_159537 = python_operator(stypy.reporting.localization.Localization(__file__, 2428, 18), '+', _a_159535, lh_compliment_159536)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2428, 18), tuple_159533, result_add_159537)
        # Adding element type (line 2428)
        # Getting the type of 'rh_compliment' (line 2428)
        rh_compliment_159538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2428, 43), 'rh_compliment')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2428, 18), tuple_159533, rh_compliment_159538)
        
        GeneratorType_159539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2428, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2428, 12), GeneratorType_159539, tuple_159533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2428, 12), 'stypy_return_type', GeneratorType_159539)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_iter_break_from_left_to_right(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_iter_break_from_left_to_right' in the type store
        # Getting the type of 'stypy_return_type' (line 2424)
        stypy_return_type_159540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2424, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159540)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_iter_break_from_left_to_right'
        return stypy_return_type_159540


    @norecursion
    def depth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'depth'
        module_type_store = module_type_store.open_function_context('depth', 2430, 4, False)
        # Assigning a type to the variable 'self' (line 2431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2431, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform.depth')
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform.depth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform.depth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'depth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'depth(...)' code ##################

        # Getting the type of 'self' (line 2432)
        self_159541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 15), 'self')
        # Obtaining the member '_a' of a type (line 2432)
        _a_159542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 15), self_159541, '_a')
        # Obtaining the member 'depth' of a type (line 2432)
        depth_159543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 15), _a_159542, 'depth')
        # Getting the type of 'self' (line 2432)
        self_159544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 31), 'self')
        # Obtaining the member '_b' of a type (line 2432)
        _b_159545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 31), self_159544, '_b')
        # Obtaining the member 'depth' of a type (line 2432)
        depth_159546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 31), _b_159545, 'depth')
        # Applying the binary operator '+' (line 2432)
        result_add_159547 = python_operator(stypy.reporting.localization.Localization(__file__, 2432, 15), '+', depth_159543, depth_159546)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2432, 8), 'stypy_return_type', result_add_159547)
        
        # ################# End of 'depth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'depth' in the type store
        # Getting the type of 'stypy_return_type' (line 2430)
        stypy_return_type_159548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159548)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'depth'
        return stypy_return_type_159548


    @norecursion
    def _get_is_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_is_affine'
        module_type_store = module_type_store.open_function_context('_get_is_affine', 2434, 4, False)
        # Assigning a type to the variable 'self' (line 2435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2435, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform._get_is_affine')
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform._get_is_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform._get_is_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_is_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_is_affine(...)' code ##################

        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2435)
        self_159549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 15), 'self')
        # Obtaining the member '_a' of a type (line 2435)
        _a_159550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 15), self_159549, '_a')
        # Obtaining the member 'is_affine' of a type (line 2435)
        is_affine_159551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 15), _a_159550, 'is_affine')
        # Getting the type of 'self' (line 2435)
        self_159552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 37), 'self')
        # Obtaining the member '_b' of a type (line 2435)
        _b_159553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 37), self_159552, '_b')
        # Obtaining the member 'is_affine' of a type (line 2435)
        is_affine_159554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 37), _b_159553, 'is_affine')
        # Applying the binary operator 'and' (line 2435)
        result_and_keyword_159555 = python_operator(stypy.reporting.localization.Localization(__file__, 2435, 15), 'and', is_affine_159551, is_affine_159554)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2435, 8), 'stypy_return_type', result_and_keyword_159555)
        
        # ################# End of '_get_is_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_is_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2434)
        stypy_return_type_159556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159556)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_is_affine'
        return stypy_return_type_159556

    
    # Assigning a Call to a Name (line 2436):

    @norecursion
    def _get_is_separable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_is_separable'
        module_type_store = module_type_store.open_function_context('_get_is_separable', 2438, 4, False)
        # Assigning a type to the variable 'self' (line 2439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2439, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform._get_is_separable')
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform._get_is_separable.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform._get_is_separable', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_is_separable', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_is_separable(...)' code ##################

        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2439)
        self_159557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 15), 'self')
        # Obtaining the member '_a' of a type (line 2439)
        _a_159558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 15), self_159557, '_a')
        # Obtaining the member 'is_separable' of a type (line 2439)
        is_separable_159559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 15), _a_159558, 'is_separable')
        # Getting the type of 'self' (line 2439)
        self_159560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 40), 'self')
        # Obtaining the member '_b' of a type (line 2439)
        _b_159561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 40), self_159560, '_b')
        # Obtaining the member 'is_separable' of a type (line 2439)
        is_separable_159562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 40), _b_159561, 'is_separable')
        # Applying the binary operator 'and' (line 2439)
        result_and_keyword_159563 = python_operator(stypy.reporting.localization.Localization(__file__, 2439, 15), 'and', is_separable_159559, is_separable_159562)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2439, 8), 'stypy_return_type', result_and_keyword_159563)
        
        # ################# End of '_get_is_separable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_is_separable' in the type store
        # Getting the type of 'stypy_return_type' (line 2438)
        stypy_return_type_159564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159564)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_is_separable'
        return stypy_return_type_159564


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 2446, 4, False)
        # Assigning a type to the variable 'self' (line 2447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2447, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform.stypy__repr__')
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_159565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2447, 15), 'unicode', u'CompositeGenericTransform(%r, %r)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2447)
        tuple_159566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2447, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2447)
        # Adding element type (line 2447)
        # Getting the type of 'self' (line 2447)
        self_159567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 54), 'self')
        # Obtaining the member '_a' of a type (line 2447)
        _a_159568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 54), self_159567, '_a')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2447, 54), tuple_159566, _a_159568)
        # Adding element type (line 2447)
        # Getting the type of 'self' (line 2447)
        self_159569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 63), 'self')
        # Obtaining the member '_b' of a type (line 2447)
        _b_159570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 63), self_159569, '_b')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2447, 54), tuple_159566, _b_159570)
        
        # Applying the binary operator '%' (line 2447)
        result_mod_159571 = python_operator(stypy.reporting.localization.Localization(__file__, 2447, 15), '%', unicode_159565, tuple_159566)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2447, 8), 'stypy_return_type', result_mod_159571)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 2446)
        stypy_return_type_159572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159572)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_159572


    @norecursion
    def transform_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_affine'
        module_type_store = module_type_store.open_function_context('transform_affine', 2449, 4, False)
        # Assigning a type to the variable 'self' (line 2450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2450, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform.transform_affine')
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_param_names_list', ['points'])
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform.transform_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform.transform_affine', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_affine', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_affine(...)' code ##################

        
        # Call to transform(...): (line 2450)
        # Processing the call arguments (line 2450)
        # Getting the type of 'points' (line 2450)
        points_159578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 43), 'points', False)
        # Processing the call keyword arguments (line 2450)
        kwargs_159579 = {}
        
        # Call to get_affine(...): (line 2450)
        # Processing the call keyword arguments (line 2450)
        kwargs_159575 = {}
        # Getting the type of 'self' (line 2450)
        self_159573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 15), 'self', False)
        # Obtaining the member 'get_affine' of a type (line 2450)
        get_affine_159574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2450, 15), self_159573, 'get_affine')
        # Calling get_affine(args, kwargs) (line 2450)
        get_affine_call_result_159576 = invoke(stypy.reporting.localization.Localization(__file__, 2450, 15), get_affine_159574, *[], **kwargs_159575)
        
        # Obtaining the member 'transform' of a type (line 2450)
        transform_159577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2450, 15), get_affine_call_result_159576, 'transform')
        # Calling transform(args, kwargs) (line 2450)
        transform_call_result_159580 = invoke(stypy.reporting.localization.Localization(__file__, 2450, 15), transform_159577, *[points_159578], **kwargs_159579)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2450, 8), 'stypy_return_type', transform_call_result_159580)
        
        # ################# End of 'transform_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2449)
        stypy_return_type_159581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159581)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_affine'
        return stypy_return_type_159581

    
    # Assigning a Attribute to a Attribute (line 2451):

    @norecursion
    def transform_non_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_non_affine'
        module_type_store = module_type_store.open_function_context('transform_non_affine', 2453, 4, False)
        # Assigning a type to the variable 'self' (line 2454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2454, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform.transform_non_affine')
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_param_names_list', ['points'])
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform.transform_non_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform.transform_non_affine', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_non_affine', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_non_affine(...)' code ##################

        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2454)
        self_159582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 11), 'self')
        # Obtaining the member '_a' of a type (line 2454)
        _a_159583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 11), self_159582, '_a')
        # Obtaining the member 'is_affine' of a type (line 2454)
        is_affine_159584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 11), _a_159583, 'is_affine')
        # Getting the type of 'self' (line 2454)
        self_159585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 33), 'self')
        # Obtaining the member '_b' of a type (line 2454)
        _b_159586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 33), self_159585, '_b')
        # Obtaining the member 'is_affine' of a type (line 2454)
        is_affine_159587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 33), _b_159586, 'is_affine')
        # Applying the binary operator 'and' (line 2454)
        result_and_keyword_159588 = python_operator(stypy.reporting.localization.Localization(__file__, 2454, 11), 'and', is_affine_159584, is_affine_159587)
        
        # Testing the type of an if condition (line 2454)
        if_condition_159589 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2454, 8), result_and_keyword_159588)
        # Assigning a type to the variable 'if_condition_159589' (line 2454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2454, 8), 'if_condition_159589', if_condition_159589)
        # SSA begins for if statement (line 2454)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'points' (line 2455)
        points_159590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 19), 'points')
        # Assigning a type to the variable 'stypy_return_type' (line 2455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2455, 12), 'stypy_return_type', points_159590)
        # SSA branch for the else part of an if statement (line 2454)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2456)
        self_159591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 17), 'self')
        # Obtaining the member '_a' of a type (line 2456)
        _a_159592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2456, 17), self_159591, '_a')
        # Obtaining the member 'is_affine' of a type (line 2456)
        is_affine_159593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2456, 17), _a_159592, 'is_affine')
        # Applying the 'not' unary operator (line 2456)
        result_not__159594 = python_operator(stypy.reporting.localization.Localization(__file__, 2456, 13), 'not', is_affine_159593)
        
        # Getting the type of 'self' (line 2456)
        self_159595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 39), 'self')
        # Obtaining the member '_b' of a type (line 2456)
        _b_159596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2456, 39), self_159595, '_b')
        # Obtaining the member 'is_affine' of a type (line 2456)
        is_affine_159597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2456, 39), _b_159596, 'is_affine')
        # Applying the binary operator 'and' (line 2456)
        result_and_keyword_159598 = python_operator(stypy.reporting.localization.Localization(__file__, 2456, 13), 'and', result_not__159594, is_affine_159597)
        
        # Testing the type of an if condition (line 2456)
        if_condition_159599 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2456, 13), result_and_keyword_159598)
        # Assigning a type to the variable 'if_condition_159599' (line 2456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2456, 13), 'if_condition_159599', if_condition_159599)
        # SSA begins for if statement (line 2456)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to transform_non_affine(...): (line 2457)
        # Processing the call arguments (line 2457)
        # Getting the type of 'points' (line 2457)
        points_159603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 48), 'points', False)
        # Processing the call keyword arguments (line 2457)
        kwargs_159604 = {}
        # Getting the type of 'self' (line 2457)
        self_159600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 19), 'self', False)
        # Obtaining the member '_a' of a type (line 2457)
        _a_159601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2457, 19), self_159600, '_a')
        # Obtaining the member 'transform_non_affine' of a type (line 2457)
        transform_non_affine_159602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2457, 19), _a_159601, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 2457)
        transform_non_affine_call_result_159605 = invoke(stypy.reporting.localization.Localization(__file__, 2457, 19), transform_non_affine_159602, *[points_159603], **kwargs_159604)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2457, 12), 'stypy_return_type', transform_non_affine_call_result_159605)
        # SSA branch for the else part of an if statement (line 2456)
        module_type_store.open_ssa_branch('else')
        
        # Call to transform_non_affine(...): (line 2459)
        # Processing the call arguments (line 2459)
        
        # Call to transform(...): (line 2460)
        # Processing the call arguments (line 2460)
        # Getting the type of 'points' (line 2460)
        points_159612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 50), 'points', False)
        # Processing the call keyword arguments (line 2460)
        kwargs_159613 = {}
        # Getting the type of 'self' (line 2460)
        self_159609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 32), 'self', False)
        # Obtaining the member '_a' of a type (line 2460)
        _a_159610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 32), self_159609, '_a')
        # Obtaining the member 'transform' of a type (line 2460)
        transform_159611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 32), _a_159610, 'transform')
        # Calling transform(args, kwargs) (line 2460)
        transform_call_result_159614 = invoke(stypy.reporting.localization.Localization(__file__, 2460, 32), transform_159611, *[points_159612], **kwargs_159613)
        
        # Processing the call keyword arguments (line 2459)
        kwargs_159615 = {}
        # Getting the type of 'self' (line 2459)
        self_159606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2459, 19), 'self', False)
        # Obtaining the member '_b' of a type (line 2459)
        _b_159607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2459, 19), self_159606, '_b')
        # Obtaining the member 'transform_non_affine' of a type (line 2459)
        transform_non_affine_159608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2459, 19), _b_159607, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 2459)
        transform_non_affine_call_result_159616 = invoke(stypy.reporting.localization.Localization(__file__, 2459, 19), transform_non_affine_159608, *[transform_call_result_159614], **kwargs_159615)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2459, 12), 'stypy_return_type', transform_non_affine_call_result_159616)
        # SSA join for if statement (line 2456)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2454)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'transform_non_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_non_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2453)
        stypy_return_type_159617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159617)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_non_affine'
        return stypy_return_type_159617

    
    # Assigning a Attribute to a Attribute (line 2461):

    @norecursion
    def transform_path_non_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_path_non_affine'
        module_type_store = module_type_store.open_function_context('transform_path_non_affine', 2463, 4, False)
        # Assigning a type to the variable 'self' (line 2464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2464, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform.transform_path_non_affine')
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_param_names_list', ['path'])
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform.transform_path_non_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform.transform_path_non_affine', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_path_non_affine', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_path_non_affine(...)' code ##################

        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2464)
        self_159618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 11), 'self')
        # Obtaining the member '_a' of a type (line 2464)
        _a_159619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2464, 11), self_159618, '_a')
        # Obtaining the member 'is_affine' of a type (line 2464)
        is_affine_159620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2464, 11), _a_159619, 'is_affine')
        # Getting the type of 'self' (line 2464)
        self_159621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 33), 'self')
        # Obtaining the member '_b' of a type (line 2464)
        _b_159622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2464, 33), self_159621, '_b')
        # Obtaining the member 'is_affine' of a type (line 2464)
        is_affine_159623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2464, 33), _b_159622, 'is_affine')
        # Applying the binary operator 'and' (line 2464)
        result_and_keyword_159624 = python_operator(stypy.reporting.localization.Localization(__file__, 2464, 11), 'and', is_affine_159620, is_affine_159623)
        
        # Testing the type of an if condition (line 2464)
        if_condition_159625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2464, 8), result_and_keyword_159624)
        # Assigning a type to the variable 'if_condition_159625' (line 2464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2464, 8), 'if_condition_159625', if_condition_159625)
        # SSA begins for if statement (line 2464)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'path' (line 2465)
        path_159626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 19), 'path')
        # Assigning a type to the variable 'stypy_return_type' (line 2465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2465, 12), 'stypy_return_type', path_159626)
        # SSA branch for the else part of an if statement (line 2464)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2466)
        self_159627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 17), 'self')
        # Obtaining the member '_a' of a type (line 2466)
        _a_159628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 17), self_159627, '_a')
        # Obtaining the member 'is_affine' of a type (line 2466)
        is_affine_159629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 17), _a_159628, 'is_affine')
        # Applying the 'not' unary operator (line 2466)
        result_not__159630 = python_operator(stypy.reporting.localization.Localization(__file__, 2466, 13), 'not', is_affine_159629)
        
        # Getting the type of 'self' (line 2466)
        self_159631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 39), 'self')
        # Obtaining the member '_b' of a type (line 2466)
        _b_159632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 39), self_159631, '_b')
        # Obtaining the member 'is_affine' of a type (line 2466)
        is_affine_159633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 39), _b_159632, 'is_affine')
        # Applying the binary operator 'and' (line 2466)
        result_and_keyword_159634 = python_operator(stypy.reporting.localization.Localization(__file__, 2466, 13), 'and', result_not__159630, is_affine_159633)
        
        # Testing the type of an if condition (line 2466)
        if_condition_159635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2466, 13), result_and_keyword_159634)
        # Assigning a type to the variable 'if_condition_159635' (line 2466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2466, 13), 'if_condition_159635', if_condition_159635)
        # SSA begins for if statement (line 2466)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to transform_path_non_affine(...): (line 2467)
        # Processing the call arguments (line 2467)
        # Getting the type of 'path' (line 2467)
        path_159639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 53), 'path', False)
        # Processing the call keyword arguments (line 2467)
        kwargs_159640 = {}
        # Getting the type of 'self' (line 2467)
        self_159636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 19), 'self', False)
        # Obtaining the member '_a' of a type (line 2467)
        _a_159637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 19), self_159636, '_a')
        # Obtaining the member 'transform_path_non_affine' of a type (line 2467)
        transform_path_non_affine_159638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 19), _a_159637, 'transform_path_non_affine')
        # Calling transform_path_non_affine(args, kwargs) (line 2467)
        transform_path_non_affine_call_result_159641 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 19), transform_path_non_affine_159638, *[path_159639], **kwargs_159640)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2467, 12), 'stypy_return_type', transform_path_non_affine_call_result_159641)
        # SSA branch for the else part of an if statement (line 2466)
        module_type_store.open_ssa_branch('else')
        
        # Call to transform_path_non_affine(...): (line 2469)
        # Processing the call arguments (line 2469)
        
        # Call to transform_path(...): (line 2470)
        # Processing the call arguments (line 2470)
        # Getting the type of 'path' (line 2470)
        path_159648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 59), 'path', False)
        # Processing the call keyword arguments (line 2470)
        kwargs_159649 = {}
        # Getting the type of 'self' (line 2470)
        self_159645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 36), 'self', False)
        # Obtaining the member '_a' of a type (line 2470)
        _a_159646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2470, 36), self_159645, '_a')
        # Obtaining the member 'transform_path' of a type (line 2470)
        transform_path_159647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2470, 36), _a_159646, 'transform_path')
        # Calling transform_path(args, kwargs) (line 2470)
        transform_path_call_result_159650 = invoke(stypy.reporting.localization.Localization(__file__, 2470, 36), transform_path_159647, *[path_159648], **kwargs_159649)
        
        # Processing the call keyword arguments (line 2469)
        kwargs_159651 = {}
        # Getting the type of 'self' (line 2469)
        self_159642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 19), 'self', False)
        # Obtaining the member '_b' of a type (line 2469)
        _b_159643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2469, 19), self_159642, '_b')
        # Obtaining the member 'transform_path_non_affine' of a type (line 2469)
        transform_path_non_affine_159644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2469, 19), _b_159643, 'transform_path_non_affine')
        # Calling transform_path_non_affine(args, kwargs) (line 2469)
        transform_path_non_affine_call_result_159652 = invoke(stypy.reporting.localization.Localization(__file__, 2469, 19), transform_path_non_affine_159644, *[transform_path_call_result_159650], **kwargs_159651)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2469, 12), 'stypy_return_type', transform_path_non_affine_call_result_159652)
        # SSA join for if statement (line 2466)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2464)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'transform_path_non_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_path_non_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2463)
        stypy_return_type_159653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159653)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_path_non_affine'
        return stypy_return_type_159653

    
    # Assigning a Attribute to a Attribute (line 2471):

    @norecursion
    def get_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_affine'
        module_type_store = module_type_store.open_function_context('get_affine', 2473, 4, False)
        # Assigning a type to the variable 'self' (line 2474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2474, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform.get_affine')
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform.get_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform.get_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_affine(...)' code ##################

        
        
        # Getting the type of 'self' (line 2474)
        self_159654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2474, 15), 'self')
        # Obtaining the member '_b' of a type (line 2474)
        _b_159655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2474, 15), self_159654, '_b')
        # Obtaining the member 'is_affine' of a type (line 2474)
        is_affine_159656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2474, 15), _b_159655, 'is_affine')
        # Applying the 'not' unary operator (line 2474)
        result_not__159657 = python_operator(stypy.reporting.localization.Localization(__file__, 2474, 11), 'not', is_affine_159656)
        
        # Testing the type of an if condition (line 2474)
        if_condition_159658 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2474, 8), result_not__159657)
        # Assigning a type to the variable 'if_condition_159658' (line 2474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2474, 8), 'if_condition_159658', if_condition_159658)
        # SSA begins for if statement (line 2474)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_affine(...): (line 2475)
        # Processing the call keyword arguments (line 2475)
        kwargs_159662 = {}
        # Getting the type of 'self' (line 2475)
        self_159659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 19), 'self', False)
        # Obtaining the member '_b' of a type (line 2475)
        _b_159660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2475, 19), self_159659, '_b')
        # Obtaining the member 'get_affine' of a type (line 2475)
        get_affine_159661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2475, 19), _b_159660, 'get_affine')
        # Calling get_affine(args, kwargs) (line 2475)
        get_affine_call_result_159663 = invoke(stypy.reporting.localization.Localization(__file__, 2475, 19), get_affine_159661, *[], **kwargs_159662)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2475, 12), 'stypy_return_type', get_affine_call_result_159663)
        # SSA branch for the else part of an if statement (line 2474)
        module_type_store.open_ssa_branch('else')
        
        # Call to Affine2D(...): (line 2477)
        # Processing the call arguments (line 2477)
        
        # Call to dot(...): (line 2477)
        # Processing the call arguments (line 2477)
        
        # Call to get_matrix(...): (line 2477)
        # Processing the call keyword arguments (line 2477)
        kwargs_159673 = {}
        
        # Call to get_affine(...): (line 2477)
        # Processing the call keyword arguments (line 2477)
        kwargs_159670 = {}
        # Getting the type of 'self' (line 2477)
        self_159667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 35), 'self', False)
        # Obtaining the member '_b' of a type (line 2477)
        _b_159668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 35), self_159667, '_b')
        # Obtaining the member 'get_affine' of a type (line 2477)
        get_affine_159669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 35), _b_159668, 'get_affine')
        # Calling get_affine(args, kwargs) (line 2477)
        get_affine_call_result_159671 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 35), get_affine_159669, *[], **kwargs_159670)
        
        # Obtaining the member 'get_matrix' of a type (line 2477)
        get_matrix_159672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 35), get_affine_call_result_159671, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 2477)
        get_matrix_call_result_159674 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 35), get_matrix_159672, *[], **kwargs_159673)
        
        
        # Call to get_matrix(...): (line 2478)
        # Processing the call keyword arguments (line 2478)
        kwargs_159681 = {}
        
        # Call to get_affine(...): (line 2478)
        # Processing the call keyword arguments (line 2478)
        kwargs_159678 = {}
        # Getting the type of 'self' (line 2478)
        self_159675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 32), 'self', False)
        # Obtaining the member '_a' of a type (line 2478)
        _a_159676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 32), self_159675, '_a')
        # Obtaining the member 'get_affine' of a type (line 2478)
        get_affine_159677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 32), _a_159676, 'get_affine')
        # Calling get_affine(args, kwargs) (line 2478)
        get_affine_call_result_159679 = invoke(stypy.reporting.localization.Localization(__file__, 2478, 32), get_affine_159677, *[], **kwargs_159678)
        
        # Obtaining the member 'get_matrix' of a type (line 2478)
        get_matrix_159680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 32), get_affine_call_result_159679, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 2478)
        get_matrix_call_result_159682 = invoke(stypy.reporting.localization.Localization(__file__, 2478, 32), get_matrix_159680, *[], **kwargs_159681)
        
        # Processing the call keyword arguments (line 2477)
        kwargs_159683 = {}
        # Getting the type of 'np' (line 2477)
        np_159665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 28), 'np', False)
        # Obtaining the member 'dot' of a type (line 2477)
        dot_159666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 28), np_159665, 'dot')
        # Calling dot(args, kwargs) (line 2477)
        dot_call_result_159684 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 28), dot_159666, *[get_matrix_call_result_159674, get_matrix_call_result_159682], **kwargs_159683)
        
        # Processing the call keyword arguments (line 2477)
        kwargs_159685 = {}
        # Getting the type of 'Affine2D' (line 2477)
        Affine2D_159664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 19), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 2477)
        Affine2D_call_result_159686 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 19), Affine2D_159664, *[dot_call_result_159684], **kwargs_159685)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 12), 'stypy_return_type', Affine2D_call_result_159686)
        # SSA join for if statement (line 2474)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2473)
        stypy_return_type_159687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159687)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_affine'
        return stypy_return_type_159687

    
    # Assigning a Attribute to a Attribute (line 2479):

    @norecursion
    def inverted(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverted'
        module_type_store = module_type_store.open_function_context('inverted', 2481, 4, False)
        # Assigning a type to the variable 'self' (line 2482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2482, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform.inverted')
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform.inverted.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform.inverted', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverted', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverted(...)' code ##################

        
        # Call to CompositeGenericTransform(...): (line 2482)
        # Processing the call arguments (line 2482)
        
        # Call to inverted(...): (line 2482)
        # Processing the call keyword arguments (line 2482)
        kwargs_159692 = {}
        # Getting the type of 'self' (line 2482)
        self_159689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 41), 'self', False)
        # Obtaining the member '_b' of a type (line 2482)
        _b_159690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2482, 41), self_159689, '_b')
        # Obtaining the member 'inverted' of a type (line 2482)
        inverted_159691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2482, 41), _b_159690, 'inverted')
        # Calling inverted(args, kwargs) (line 2482)
        inverted_call_result_159693 = invoke(stypy.reporting.localization.Localization(__file__, 2482, 41), inverted_159691, *[], **kwargs_159692)
        
        
        # Call to inverted(...): (line 2482)
        # Processing the call keyword arguments (line 2482)
        kwargs_159697 = {}
        # Getting the type of 'self' (line 2482)
        self_159694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 61), 'self', False)
        # Obtaining the member '_a' of a type (line 2482)
        _a_159695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2482, 61), self_159694, '_a')
        # Obtaining the member 'inverted' of a type (line 2482)
        inverted_159696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2482, 61), _a_159695, 'inverted')
        # Calling inverted(args, kwargs) (line 2482)
        inverted_call_result_159698 = invoke(stypy.reporting.localization.Localization(__file__, 2482, 61), inverted_159696, *[], **kwargs_159697)
        
        # Processing the call keyword arguments (line 2482)
        kwargs_159699 = {}
        # Getting the type of 'CompositeGenericTransform' (line 2482)
        CompositeGenericTransform_159688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 15), 'CompositeGenericTransform', False)
        # Calling CompositeGenericTransform(args, kwargs) (line 2482)
        CompositeGenericTransform_call_result_159700 = invoke(stypy.reporting.localization.Localization(__file__, 2482, 15), CompositeGenericTransform_159688, *[inverted_call_result_159693, inverted_call_result_159698], **kwargs_159699)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2482, 8), 'stypy_return_type', CompositeGenericTransform_call_result_159700)
        
        # ################# End of 'inverted(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverted' in the type store
        # Getting the type of 'stypy_return_type' (line 2481)
        stypy_return_type_159701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159701)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverted'
        return stypy_return_type_159701

    
    # Assigning a Attribute to a Attribute (line 2483):

    @norecursion
    def _get_has_inverse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_has_inverse'
        module_type_store = module_type_store.open_function_context('_get_has_inverse', 2485, 4, False)
        # Assigning a type to the variable 'self' (line 2486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2486, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_localization', localization)
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_function_name', 'CompositeGenericTransform._get_has_inverse')
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeGenericTransform._get_has_inverse.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeGenericTransform._get_has_inverse', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_has_inverse', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_has_inverse(...)' code ##################

        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2486)
        self_159702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 15), 'self')
        # Obtaining the member '_a' of a type (line 2486)
        _a_159703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 15), self_159702, '_a')
        # Obtaining the member 'has_inverse' of a type (line 2486)
        has_inverse_159704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 15), _a_159703, 'has_inverse')
        # Getting the type of 'self' (line 2486)
        self_159705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 39), 'self')
        # Obtaining the member '_b' of a type (line 2486)
        _b_159706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 39), self_159705, '_b')
        # Obtaining the member 'has_inverse' of a type (line 2486)
        has_inverse_159707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 39), _b_159706, 'has_inverse')
        # Applying the binary operator 'and' (line 2486)
        result_and_keyword_159708 = python_operator(stypy.reporting.localization.Localization(__file__, 2486, 15), 'and', has_inverse_159704, has_inverse_159707)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2486, 8), 'stypy_return_type', result_and_keyword_159708)
        
        # ################# End of '_get_has_inverse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_has_inverse' in the type store
        # Getting the type of 'stypy_return_type' (line 2485)
        stypy_return_type_159709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159709)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_has_inverse'
        return stypy_return_type_159709

    
    # Assigning a Call to a Name (line 2487):

# Assigning a type to the variable 'CompositeGenericTransform' (line 2361)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2361, 0), 'CompositeGenericTransform', CompositeGenericTransform)

# Assigning a Name to a Name (line 2369):
# Getting the type of 'True' (line 2369)
True_159710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 19), 'True')
# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Setting the type of the member 'pass_through' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159711, 'pass_through', True_159710)

# Assigning a Call to a Name (line 2393):

# Call to property(...): (line 2393)
# Processing the call arguments (line 2393)

@norecursion
def _stypy_temp_lambda_23(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_23'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_23', 2393, 25, True)
    # Passed parameters checking function
    _stypy_temp_lambda_23.stypy_localization = localization
    _stypy_temp_lambda_23.stypy_type_of_self = None
    _stypy_temp_lambda_23.stypy_type_store = module_type_store
    _stypy_temp_lambda_23.stypy_function_name = '_stypy_temp_lambda_23'
    _stypy_temp_lambda_23.stypy_param_names_list = ['self']
    _stypy_temp_lambda_23.stypy_varargs_param_name = None
    _stypy_temp_lambda_23.stypy_kwargs_param_name = None
    _stypy_temp_lambda_23.stypy_call_defaults = defaults
    _stypy_temp_lambda_23.stypy_call_varargs = varargs
    _stypy_temp_lambda_23.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_23', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_23', ['self'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Evaluating a boolean operation
    # Getting the type of 'self' (line 2393)
    self_159713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 38), 'self', False)
    # Obtaining the member '_a' of a type (line 2393)
    _a_159714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2393, 38), self_159713, '_a')
    # Obtaining the member 'is_affine' of a type (line 2393)
    is_affine_159715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2393, 38), _a_159714, 'is_affine')
    # Getting the type of 'self' (line 2393)
    self_159716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 60), 'self', False)
    # Obtaining the member '_b' of a type (line 2393)
    _b_159717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2393, 60), self_159716, '_b')
    # Obtaining the member 'is_affine' of a type (line 2393)
    is_affine_159718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2393, 60), _b_159717, 'is_affine')
    # Applying the binary operator 'and' (line 2393)
    result_and_keyword_159719 = python_operator(stypy.reporting.localization.Localization(__file__, 2393, 38), 'and', is_affine_159715, is_affine_159718)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 2393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 25), 'stypy_return_type', result_and_keyword_159719)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_23' in the type store
    # Getting the type of 'stypy_return_type' (line 2393)
    stypy_return_type_159720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 25), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_159720)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_23'
    return stypy_return_type_159720

# Assigning a type to the variable '_stypy_temp_lambda_23' (line 2393)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 25), '_stypy_temp_lambda_23', _stypy_temp_lambda_23)
# Getting the type of '_stypy_temp_lambda_23' (line 2393)
_stypy_temp_lambda_23_159721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 25), '_stypy_temp_lambda_23')
# Processing the call keyword arguments (line 2393)
kwargs_159722 = {}
# Getting the type of 'property' (line 2393)
property_159712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 16), 'property', False)
# Calling property(args, kwargs) (line 2393)
property_call_result_159723 = invoke(stypy.reporting.localization.Localization(__file__, 2393, 16), property_159712, *[_stypy_temp_lambda_23_159721], **kwargs_159722)

# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Setting the type of the member 'is_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159724, 'is_affine', property_call_result_159723)

# Assigning a Attribute to a Attribute (line 2401):
# Getting the type of 'Transform' (line 2401)
Transform_159725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 21), 'Transform')
# Obtaining the member 'frozen' of a type (line 2401)
frozen_159726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2401, 21), Transform_159725, 'frozen')
# Obtaining the member '__doc__' of a type (line 2401)
doc___159727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2401, 21), frozen_159726, '__doc__')
# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Obtaining the member 'frozen' of a type
frozen_159729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159728, 'frozen')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), frozen_159729, '__doc__', doc___159727)

# Assigning a Call to a Name (line 2436):

# Call to property(...): (line 2436)
# Processing the call arguments (line 2436)
# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform', False)
# Obtaining the member '_get_is_affine' of a type
_get_is_affine_159732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159731, '_get_is_affine')
# Processing the call keyword arguments (line 2436)
kwargs_159733 = {}
# Getting the type of 'property' (line 2436)
property_159730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 16), 'property', False)
# Calling property(args, kwargs) (line 2436)
property_call_result_159734 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 16), property_159730, *[_get_is_affine_159732], **kwargs_159733)

# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Setting the type of the member 'is_affine' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159735, 'is_affine', property_call_result_159734)

# Assigning a Call to a Name (line 2440):

# Call to property(...): (line 2440)
# Processing the call arguments (line 2440)
# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform', False)
# Obtaining the member '_get_is_separable' of a type
_get_is_separable_159738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159737, '_get_is_separable')
# Processing the call keyword arguments (line 2440)
kwargs_159739 = {}
# Getting the type of 'property' (line 2440)
property_159736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 19), 'property', False)
# Calling property(args, kwargs) (line 2440)
property_call_result_159740 = invoke(stypy.reporting.localization.Localization(__file__, 2440, 19), property_159736, *[_get_is_separable_159738], **kwargs_159739)

# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159741, 'is_separable', property_call_result_159740)

# Assigning a Call to a Name (line 2440):

# Getting the type of 'DEBUG' (line 2442)
DEBUG_159742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 7), 'DEBUG')
# Testing the type of an if condition (line 2442)
if_condition_159743 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2442, 4), DEBUG_159742)
# Assigning a type to the variable 'if_condition_159743' (line 2442)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 4), 'if_condition_159743', if_condition_159743)
# SSA begins for if statement (line 2442)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def stypy__str__(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '__str__'
    module_type_store = module_type_store.open_function_context('__str__', 2443, 8, False)
    
    # Passed parameters checking function
    stypy__str__.stypy_localization = localization
    stypy__str__.stypy_type_of_self = None
    stypy__str__.stypy_type_store = module_type_store
    stypy__str__.stypy_function_name = 'stypy__str__'
    stypy__str__.stypy_param_names_list = ['self']
    stypy__str__.stypy_varargs_param_name = None
    stypy__str__.stypy_kwargs_param_name = None
    stypy__str__.stypy_call_defaults = defaults
    stypy__str__.stypy_call_varargs = varargs
    stypy__str__.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'stypy__str__', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '__str__', localization, ['self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '__str__(...)' code ##################

    unicode_159744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2444, 19), 'unicode', u'(%s, %s)')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2444)
    tuple_159745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2444, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2444)
    # Adding element type (line 2444)
    # Getting the type of 'self' (line 2444)
    self_159746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 33), 'self')
    # Obtaining the member '_a' of a type (line 2444)
    _a_159747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2444, 33), self_159746, '_a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2444, 33), tuple_159745, _a_159747)
    # Adding element type (line 2444)
    # Getting the type of 'self' (line 2444)
    self_159748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 42), 'self')
    # Obtaining the member '_b' of a type (line 2444)
    _b_159749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2444, 42), self_159748, '_b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2444, 33), tuple_159745, _b_159749)
    
    # Applying the binary operator '%' (line 2444)
    result_mod_159750 = python_operator(stypy.reporting.localization.Localization(__file__, 2444, 19), '%', unicode_159744, tuple_159745)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2444, 12), 'stypy_return_type', result_mod_159750)
    
    # ################# End of '__str__(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '__str__' in the type store
    # Getting the type of 'stypy_return_type' (line 2443)
    stypy_return_type_159751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_159751)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '__str__'
    return stypy_return_type_159751

# Assigning a type to the variable '__str__' (line 2443)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2443, 8), '__str__', stypy__str__)
# SSA join for if statement (line 2442)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Attribute to a Attribute (line 2451):
# Getting the type of 'Transform' (line 2451)
Transform_159752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 31), 'Transform')
# Obtaining the member 'transform_affine' of a type (line 2451)
transform_affine_159753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 31), Transform_159752, 'transform_affine')
# Obtaining the member '__doc__' of a type (line 2451)
doc___159754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 31), transform_affine_159753, '__doc__')
# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Obtaining the member 'transform_affine' of a type
transform_affine_159756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159755, 'transform_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_affine_159756, '__doc__', doc___159754)

# Assigning a Attribute to a Attribute (line 2461):
# Getting the type of 'Transform' (line 2461)
Transform_159757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 35), 'Transform')
# Obtaining the member 'transform_non_affine' of a type (line 2461)
transform_non_affine_159758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2461, 35), Transform_159757, 'transform_non_affine')
# Obtaining the member '__doc__' of a type (line 2461)
doc___159759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2461, 35), transform_non_affine_159758, '__doc__')
# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Obtaining the member 'transform_non_affine' of a type
transform_non_affine_159761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159760, 'transform_non_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_non_affine_159761, '__doc__', doc___159759)

# Assigning a Attribute to a Attribute (line 2471):
# Getting the type of 'Transform' (line 2471)
Transform_159762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 40), 'Transform')
# Obtaining the member 'transform_path_non_affine' of a type (line 2471)
transform_path_non_affine_159763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2471, 40), Transform_159762, 'transform_path_non_affine')
# Obtaining the member '__doc__' of a type (line 2471)
doc___159764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2471, 40), transform_path_non_affine_159763, '__doc__')
# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Obtaining the member 'transform_path_non_affine' of a type
transform_path_non_affine_159766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159765, 'transform_path_non_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_path_non_affine_159766, '__doc__', doc___159764)

# Assigning a Attribute to a Attribute (line 2479):
# Getting the type of 'Transform' (line 2479)
Transform_159767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 25), 'Transform')
# Obtaining the member 'get_affine' of a type (line 2479)
get_affine_159768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 25), Transform_159767, 'get_affine')
# Obtaining the member '__doc__' of a type (line 2479)
doc___159769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 25), get_affine_159768, '__doc__')
# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Obtaining the member 'get_affine' of a type
get_affine_159771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159770, 'get_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_affine_159771, '__doc__', doc___159769)

# Assigning a Attribute to a Attribute (line 2483):
# Getting the type of 'Transform' (line 2483)
Transform_159772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 23), 'Transform')
# Obtaining the member 'inverted' of a type (line 2483)
inverted_159773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2483, 23), Transform_159772, 'inverted')
# Obtaining the member '__doc__' of a type (line 2483)
doc___159774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2483, 23), inverted_159773, '__doc__')
# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Obtaining the member 'inverted' of a type
inverted_159776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159775, 'inverted')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), inverted_159776, '__doc__', doc___159774)

# Assigning a Call to a Name (line 2487):

# Call to property(...): (line 2487)
# Processing the call arguments (line 2487)
# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform', False)
# Obtaining the member '_get_has_inverse' of a type
_get_has_inverse_159779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159778, '_get_has_inverse')
# Processing the call keyword arguments (line 2487)
kwargs_159780 = {}
# Getting the type of 'property' (line 2487)
property_159777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 18), 'property', False)
# Calling property(args, kwargs) (line 2487)
property_call_result_159781 = invoke(stypy.reporting.localization.Localization(__file__, 2487, 18), property_159777, *[_get_has_inverse_159779], **kwargs_159780)

# Getting the type of 'CompositeGenericTransform'
CompositeGenericTransform_159782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeGenericTransform')
# Setting the type of the member 'has_inverse' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeGenericTransform_159782, 'has_inverse', property_call_result_159781)
# Declaration of the 'CompositeAffine2D' class
# Getting the type of 'Affine2DBase' (line 2490)
Affine2DBase_159783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 24), 'Affine2DBase')

class CompositeAffine2D(Affine2DBase_159783, ):
    unicode_159784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2496, (-1)), 'unicode', u'\n    A composite transform formed by applying transform *a* then transform *b*.\n\n    This version is an optimization that handles the case where both *a*\n    and *b* are 2D affines.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2497, 4, False)
        # Assigning a type to the variable 'self' (line 2498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2498, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeAffine2D.__init__', ['a', 'b'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['a', 'b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_159785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2508, (-1)), 'unicode', u'\n        Create a new composite transform that is the result of\n        applying transform *a* then transform *b*.\n\n        Both *a* and *b* must be instances of :class:`Affine2DBase`.\n\n        You will generally not call this constructor directly but use\n        the :func:`composite_transform_factory` function instead,\n        which can automatically choose the best kind of composite\n        transform instance to create.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'a' (line 2509)
        a_159786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 15), 'a')
        # Obtaining the member 'is_affine' of a type (line 2509)
        is_affine_159787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2509, 15), a_159786, 'is_affine')
        # Applying the 'not' unary operator (line 2509)
        result_not__159788 = python_operator(stypy.reporting.localization.Localization(__file__, 2509, 11), 'not', is_affine_159787)
        
        
        # Getting the type of 'b' (line 2509)
        b_159789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 34), 'b')
        # Obtaining the member 'is_affine' of a type (line 2509)
        is_affine_159790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2509, 34), b_159789, 'is_affine')
        # Applying the 'not' unary operator (line 2509)
        result_not__159791 = python_operator(stypy.reporting.localization.Localization(__file__, 2509, 30), 'not', is_affine_159790)
        
        # Applying the binary operator 'or' (line 2509)
        result_or_keyword_159792 = python_operator(stypy.reporting.localization.Localization(__file__, 2509, 11), 'or', result_not__159788, result_not__159791)
        
        # Testing the type of an if condition (line 2509)
        if_condition_159793 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2509, 8), result_or_keyword_159792)
        # Assigning a type to the variable 'if_condition_159793' (line 2509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2509, 8), 'if_condition_159793', if_condition_159793)
        # SSA begins for if statement (line 2509)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2510)
        # Processing the call arguments (line 2510)
        unicode_159795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2510, 29), 'unicode', u"'a' and 'b' must be affine transforms")
        # Processing the call keyword arguments (line 2510)
        kwargs_159796 = {}
        # Getting the type of 'ValueError' (line 2510)
        ValueError_159794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2510)
        ValueError_call_result_159797 = invoke(stypy.reporting.localization.Localization(__file__, 2510, 18), ValueError_159794, *[unicode_159795], **kwargs_159796)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2510, 12), ValueError_call_result_159797, 'raise parameter', BaseException)
        # SSA join for if statement (line 2509)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'a' (line 2511)
        a_159798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 11), 'a')
        # Obtaining the member 'output_dims' of a type (line 2511)
        output_dims_159799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2511, 11), a_159798, 'output_dims')
        # Getting the type of 'b' (line 2511)
        b_159800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 28), 'b')
        # Obtaining the member 'input_dims' of a type (line 2511)
        input_dims_159801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2511, 28), b_159800, 'input_dims')
        # Applying the binary operator '!=' (line 2511)
        result_ne_159802 = python_operator(stypy.reporting.localization.Localization(__file__, 2511, 11), '!=', output_dims_159799, input_dims_159801)
        
        # Testing the type of an if condition (line 2511)
        if_condition_159803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2511, 8), result_ne_159802)
        # Assigning a type to the variable 'if_condition_159803' (line 2511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2511, 8), 'if_condition_159803', if_condition_159803)
        # SSA begins for if statement (line 2511)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 2512):
        
        # Assigning a Str to a Name (line 2512):
        unicode_159804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2512, 19), 'unicode', u"The output dimension of 'a' must be equal to the input dimensions of 'b'")
        # Assigning a type to the variable 'msg' (line 2512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2512, 12), 'msg', unicode_159804)
        
        # Call to ValueError(...): (line 2514)
        # Processing the call arguments (line 2514)
        # Getting the type of 'msg' (line 2514)
        msg_159806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 29), 'msg', False)
        # Processing the call keyword arguments (line 2514)
        kwargs_159807 = {}
        # Getting the type of 'ValueError' (line 2514)
        ValueError_159805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2514)
        ValueError_call_result_159808 = invoke(stypy.reporting.localization.Localization(__file__, 2514, 18), ValueError_159805, *[msg_159806], **kwargs_159807)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2514, 12), ValueError_call_result_159808, 'raise parameter', BaseException)
        # SSA join for if statement (line 2511)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Attribute (line 2515):
        
        # Assigning a Attribute to a Attribute (line 2515):
        # Getting the type of 'a' (line 2515)
        a_159809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 26), 'a')
        # Obtaining the member 'input_dims' of a type (line 2515)
        input_dims_159810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 26), a_159809, 'input_dims')
        # Getting the type of 'self' (line 2515)
        self_159811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 8), 'self')
        # Setting the type of the member 'input_dims' of a type (line 2515)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 8), self_159811, 'input_dims', input_dims_159810)
        
        # Assigning a Attribute to a Attribute (line 2516):
        
        # Assigning a Attribute to a Attribute (line 2516):
        # Getting the type of 'b' (line 2516)
        b_159812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 27), 'b')
        # Obtaining the member 'output_dims' of a type (line 2516)
        output_dims_159813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 27), b_159812, 'output_dims')
        # Getting the type of 'self' (line 2516)
        self_159814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 8), 'self')
        # Setting the type of the member 'output_dims' of a type (line 2516)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 8), self_159814, 'output_dims', output_dims_159813)
        
        # Call to __init__(...): (line 2518)
        # Processing the call arguments (line 2518)
        # Getting the type of 'self' (line 2518)
        self_159817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 30), 'self', False)
        # Processing the call keyword arguments (line 2518)
        # Getting the type of 'kwargs' (line 2518)
        kwargs_159818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 38), 'kwargs', False)
        kwargs_159819 = {'kwargs_159818': kwargs_159818}
        # Getting the type of 'Affine2DBase' (line 2518)
        Affine2DBase_159815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 8), 'Affine2DBase', False)
        # Obtaining the member '__init__' of a type (line 2518)
        init___159816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2518, 8), Affine2DBase_159815, '__init__')
        # Calling __init__(args, kwargs) (line 2518)
        init___call_result_159820 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 8), init___159816, *[self_159817], **kwargs_159819)
        
        
        # Assigning a Name to a Attribute (line 2519):
        
        # Assigning a Name to a Attribute (line 2519):
        # Getting the type of 'a' (line 2519)
        a_159821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 18), 'a')
        # Getting the type of 'self' (line 2519)
        self_159822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 8), 'self')
        # Setting the type of the member '_a' of a type (line 2519)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2519, 8), self_159822, '_a', a_159821)
        
        # Assigning a Name to a Attribute (line 2520):
        
        # Assigning a Name to a Attribute (line 2520):
        # Getting the type of 'b' (line 2520)
        b_159823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 18), 'b')
        # Getting the type of 'self' (line 2520)
        self_159824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 8), 'self')
        # Setting the type of the member '_b' of a type (line 2520)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2520, 8), self_159824, '_b', b_159823)
        
        # Call to set_children(...): (line 2521)
        # Processing the call arguments (line 2521)
        # Getting the type of 'a' (line 2521)
        a_159827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 26), 'a', False)
        # Getting the type of 'b' (line 2521)
        b_159828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 29), 'b', False)
        # Processing the call keyword arguments (line 2521)
        kwargs_159829 = {}
        # Getting the type of 'self' (line 2521)
        self_159825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 2521)
        set_children_159826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 8), self_159825, 'set_children')
        # Calling set_children(args, kwargs) (line 2521)
        set_children_call_result_159830 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 8), set_children_159826, *[a_159827, b_159828], **kwargs_159829)
        
        
        # Assigning a Name to a Attribute (line 2522):
        
        # Assigning a Name to a Attribute (line 2522):
        # Getting the type of 'None' (line 2522)
        None_159831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 20), 'None')
        # Getting the type of 'self' (line 2522)
        self_159832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 2522)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2522, 8), self_159832, '_mtx', None_159831)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def depth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'depth'
        module_type_store = module_type_store.open_function_context('depth', 2528, 4, False)
        # Assigning a type to the variable 'self' (line 2529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2529, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_localization', localization)
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_function_name', 'CompositeAffine2D.depth')
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeAffine2D.depth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeAffine2D.depth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'depth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'depth(...)' code ##################

        # Getting the type of 'self' (line 2530)
        self_159833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2530, 15), 'self')
        # Obtaining the member '_a' of a type (line 2530)
        _a_159834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2530, 15), self_159833, '_a')
        # Obtaining the member 'depth' of a type (line 2530)
        depth_159835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2530, 15), _a_159834, 'depth')
        # Getting the type of 'self' (line 2530)
        self_159836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2530, 31), 'self')
        # Obtaining the member '_b' of a type (line 2530)
        _b_159837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2530, 31), self_159836, '_b')
        # Obtaining the member 'depth' of a type (line 2530)
        depth_159838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2530, 31), _b_159837, 'depth')
        # Applying the binary operator '+' (line 2530)
        result_add_159839 = python_operator(stypy.reporting.localization.Localization(__file__, 2530, 15), '+', depth_159835, depth_159838)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2530, 8), 'stypy_return_type', result_add_159839)
        
        # ################# End of 'depth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'depth' in the type store
        # Getting the type of 'stypy_return_type' (line 2528)
        stypy_return_type_159840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2528, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159840)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'depth'
        return stypy_return_type_159840


    @norecursion
    def _iter_break_from_left_to_right(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_iter_break_from_left_to_right'
        module_type_store = module_type_store.open_function_context('_iter_break_from_left_to_right', 2532, 4, False)
        # Assigning a type to the variable 'self' (line 2533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_localization', localization)
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_function_name', 'CompositeAffine2D._iter_break_from_left_to_right')
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeAffine2D._iter_break_from_left_to_right.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeAffine2D._iter_break_from_left_to_right', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_iter_break_from_left_to_right', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_iter_break_from_left_to_right(...)' code ##################

        
        
        # Call to _iter_break_from_left_to_right(...): (line 2533)
        # Processing the call keyword arguments (line 2533)
        kwargs_159844 = {}
        # Getting the type of 'self' (line 2533)
        self_159841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 44), 'self', False)
        # Obtaining the member '_a' of a type (line 2533)
        _a_159842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2533, 44), self_159841, '_a')
        # Obtaining the member '_iter_break_from_left_to_right' of a type (line 2533)
        _iter_break_from_left_to_right_159843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2533, 44), _a_159842, '_iter_break_from_left_to_right')
        # Calling _iter_break_from_left_to_right(args, kwargs) (line 2533)
        _iter_break_from_left_to_right_call_result_159845 = invoke(stypy.reporting.localization.Localization(__file__, 2533, 44), _iter_break_from_left_to_right_159843, *[], **kwargs_159844)
        
        # Testing the type of a for loop iterable (line 2533)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2533, 8), _iter_break_from_left_to_right_call_result_159845)
        # Getting the type of the for loop variable (line 2533)
        for_loop_var_159846 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2533, 8), _iter_break_from_left_to_right_call_result_159845)
        # Assigning a type to the variable 'lh_compliment' (line 2533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 8), 'lh_compliment', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2533, 8), for_loop_var_159846))
        # Assigning a type to the variable 'rh_compliment' (line 2533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 8), 'rh_compliment', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2533, 8), for_loop_var_159846))
        # SSA begins for a for statement (line 2533)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Creating a generator
        
        # Obtaining an instance of the builtin type 'tuple' (line 2534)
        tuple_159847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2534, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2534)
        # Adding element type (line 2534)
        # Getting the type of 'lh_compliment' (line 2534)
        lh_compliment_159848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2534, 18), 'lh_compliment')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2534, 18), tuple_159847, lh_compliment_159848)
        # Adding element type (line 2534)
        # Getting the type of 'rh_compliment' (line 2534)
        rh_compliment_159849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2534, 33), 'rh_compliment')
        # Getting the type of 'self' (line 2534)
        self_159850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2534, 49), 'self')
        # Obtaining the member '_b' of a type (line 2534)
        _b_159851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2534, 49), self_159850, '_b')
        # Applying the binary operator '+' (line 2534)
        result_add_159852 = python_operator(stypy.reporting.localization.Localization(__file__, 2534, 33), '+', rh_compliment_159849, _b_159851)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2534, 18), tuple_159847, result_add_159852)
        
        GeneratorType_159853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2534, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2534, 12), GeneratorType_159853, tuple_159847)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2534, 12), 'stypy_return_type', GeneratorType_159853)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _iter_break_from_left_to_right(...): (line 2535)
        # Processing the call keyword arguments (line 2535)
        kwargs_159857 = {}
        # Getting the type of 'self' (line 2535)
        self_159854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2535, 44), 'self', False)
        # Obtaining the member '_b' of a type (line 2535)
        _b_159855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2535, 44), self_159854, '_b')
        # Obtaining the member '_iter_break_from_left_to_right' of a type (line 2535)
        _iter_break_from_left_to_right_159856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2535, 44), _b_159855, '_iter_break_from_left_to_right')
        # Calling _iter_break_from_left_to_right(args, kwargs) (line 2535)
        _iter_break_from_left_to_right_call_result_159858 = invoke(stypy.reporting.localization.Localization(__file__, 2535, 44), _iter_break_from_left_to_right_159856, *[], **kwargs_159857)
        
        # Testing the type of a for loop iterable (line 2535)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2535, 8), _iter_break_from_left_to_right_call_result_159858)
        # Getting the type of the for loop variable (line 2535)
        for_loop_var_159859 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2535, 8), _iter_break_from_left_to_right_call_result_159858)
        # Assigning a type to the variable 'lh_compliment' (line 2535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2535, 8), 'lh_compliment', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2535, 8), for_loop_var_159859))
        # Assigning a type to the variable 'rh_compliment' (line 2535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2535, 8), 'rh_compliment', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2535, 8), for_loop_var_159859))
        # SSA begins for a for statement (line 2535)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Creating a generator
        
        # Obtaining an instance of the builtin type 'tuple' (line 2536)
        tuple_159860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2536, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2536)
        # Adding element type (line 2536)
        # Getting the type of 'self' (line 2536)
        self_159861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2536, 18), 'self')
        # Obtaining the member '_a' of a type (line 2536)
        _a_159862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2536, 18), self_159861, '_a')
        # Getting the type of 'lh_compliment' (line 2536)
        lh_compliment_159863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2536, 28), 'lh_compliment')
        # Applying the binary operator '+' (line 2536)
        result_add_159864 = python_operator(stypy.reporting.localization.Localization(__file__, 2536, 18), '+', _a_159862, lh_compliment_159863)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2536, 18), tuple_159860, result_add_159864)
        # Adding element type (line 2536)
        # Getting the type of 'rh_compliment' (line 2536)
        rh_compliment_159865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2536, 43), 'rh_compliment')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2536, 18), tuple_159860, rh_compliment_159865)
        
        GeneratorType_159866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2536, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2536, 12), GeneratorType_159866, tuple_159860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2536, 12), 'stypy_return_type', GeneratorType_159866)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_iter_break_from_left_to_right(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_iter_break_from_left_to_right' in the type store
        # Getting the type of 'stypy_return_type' (line 2532)
        stypy_return_type_159867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2532, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159867)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_iter_break_from_left_to_right'
        return stypy_return_type_159867


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 2538, 4, False)
        # Assigning a type to the variable 'self' (line 2539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2539, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'CompositeAffine2D.stypy__repr__')
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeAffine2D.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeAffine2D.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_159868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2539, 15), 'unicode', u'CompositeAffine2D(%r, %r)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2539)
        tuple_159869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2539, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2539)
        # Adding element type (line 2539)
        # Getting the type of 'self' (line 2539)
        self_159870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 46), 'self')
        # Obtaining the member '_a' of a type (line 2539)
        _a_159871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2539, 46), self_159870, '_a')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2539, 46), tuple_159869, _a_159871)
        # Adding element type (line 2539)
        # Getting the type of 'self' (line 2539)
        self_159872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 55), 'self')
        # Obtaining the member '_b' of a type (line 2539)
        _b_159873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2539, 55), self_159872, '_b')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2539, 46), tuple_159869, _b_159873)
        
        # Applying the binary operator '%' (line 2539)
        result_mod_159874 = python_operator(stypy.reporting.localization.Localization(__file__, 2539, 15), '%', unicode_159868, tuple_159869)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2539, 8), 'stypy_return_type', result_mod_159874)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 2538)
        stypy_return_type_159875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2538, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159875)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_159875


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 2541, 4, False)
        # Assigning a type to the variable 'self' (line 2542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2542, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_function_name', 'CompositeAffine2D.get_matrix')
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CompositeAffine2D.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CompositeAffine2D.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        
        # Getting the type of 'self' (line 2542)
        self_159876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 2542)
        _invalid_159877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2542, 11), self_159876, '_invalid')
        # Testing the type of an if condition (line 2542)
        if_condition_159878 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2542, 8), _invalid_159877)
        # Assigning a type to the variable 'if_condition_159878' (line 2542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2542, 8), 'if_condition_159878', if_condition_159878)
        # SSA begins for if statement (line 2542)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2543):
        
        # Assigning a Call to a Attribute (line 2543):
        
        # Call to dot(...): (line 2543)
        # Processing the call arguments (line 2543)
        
        # Call to get_matrix(...): (line 2544)
        # Processing the call keyword arguments (line 2544)
        kwargs_159884 = {}
        # Getting the type of 'self' (line 2544)
        self_159881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 16), 'self', False)
        # Obtaining the member '_b' of a type (line 2544)
        _b_159882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 16), self_159881, '_b')
        # Obtaining the member 'get_matrix' of a type (line 2544)
        get_matrix_159883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 16), _b_159882, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 2544)
        get_matrix_call_result_159885 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 16), get_matrix_159883, *[], **kwargs_159884)
        
        
        # Call to get_matrix(...): (line 2545)
        # Processing the call keyword arguments (line 2545)
        kwargs_159889 = {}
        # Getting the type of 'self' (line 2545)
        self_159886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 16), 'self', False)
        # Obtaining the member '_a' of a type (line 2545)
        _a_159887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 16), self_159886, '_a')
        # Obtaining the member 'get_matrix' of a type (line 2545)
        get_matrix_159888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 16), _a_159887, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 2545)
        get_matrix_call_result_159890 = invoke(stypy.reporting.localization.Localization(__file__, 2545, 16), get_matrix_159888, *[], **kwargs_159889)
        
        # Processing the call keyword arguments (line 2543)
        kwargs_159891 = {}
        # Getting the type of 'np' (line 2543)
        np_159879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 24), 'np', False)
        # Obtaining the member 'dot' of a type (line 2543)
        dot_159880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2543, 24), np_159879, 'dot')
        # Calling dot(args, kwargs) (line 2543)
        dot_call_result_159892 = invoke(stypy.reporting.localization.Localization(__file__, 2543, 24), dot_159880, *[get_matrix_call_result_159885, get_matrix_call_result_159890], **kwargs_159891)
        
        # Getting the type of 'self' (line 2543)
        self_159893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 12), 'self')
        # Setting the type of the member '_mtx' of a type (line 2543)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2543, 12), self_159893, '_mtx', dot_call_result_159892)
        
        # Assigning a Name to a Attribute (line 2546):
        
        # Assigning a Name to a Attribute (line 2546):
        # Getting the type of 'None' (line 2546)
        None_159894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 29), 'None')
        # Getting the type of 'self' (line 2546)
        self_159895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 12), 'self')
        # Setting the type of the member '_inverted' of a type (line 2546)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2546, 12), self_159895, '_inverted', None_159894)
        
        # Assigning a Num to a Attribute (line 2547):
        
        # Assigning a Num to a Attribute (line 2547):
        int_159896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2547, 28), 'int')
        # Getting the type of 'self' (line 2547)
        self_159897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 2547)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2547, 12), self_159897, '_invalid', int_159896)
        # SSA join for if statement (line 2542)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 2548)
        self_159898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 15), 'self')
        # Obtaining the member '_mtx' of a type (line 2548)
        _mtx_159899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 15), self_159898, '_mtx')
        # Assigning a type to the variable 'stypy_return_type' (line 2548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2548, 8), 'stypy_return_type', _mtx_159899)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 2541)
        stypy_return_type_159900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159900)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_159900

    
    # Assigning a Attribute to a Attribute (line 2549):

# Assigning a type to the variable 'CompositeAffine2D' (line 2490)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2490, 0), 'CompositeAffine2D', CompositeAffine2D)

# Getting the type of 'DEBUG' (line 2524)
DEBUG_159901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 7), 'DEBUG')
# Testing the type of an if condition (line 2524)
if_condition_159902 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2524, 4), DEBUG_159901)
# Assigning a type to the variable 'if_condition_159902' (line 2524)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2524, 4), 'if_condition_159902', if_condition_159902)
# SSA begins for if statement (line 2524)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def stypy__str__(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '__str__'
    module_type_store = module_type_store.open_function_context('__str__', 2525, 8, False)
    
    # Passed parameters checking function
    stypy__str__.stypy_localization = localization
    stypy__str__.stypy_type_of_self = None
    stypy__str__.stypy_type_store = module_type_store
    stypy__str__.stypy_function_name = 'stypy__str__'
    stypy__str__.stypy_param_names_list = ['self']
    stypy__str__.stypy_varargs_param_name = None
    stypy__str__.stypy_kwargs_param_name = None
    stypy__str__.stypy_call_defaults = defaults
    stypy__str__.stypy_call_varargs = varargs
    stypy__str__.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'stypy__str__', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '__str__', localization, ['self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '__str__(...)' code ##################

    unicode_159903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2526, 19), 'unicode', u'(%s, %s)')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2526)
    tuple_159904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2526, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2526)
    # Adding element type (line 2526)
    # Getting the type of 'self' (line 2526)
    self_159905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2526, 33), 'self')
    # Obtaining the member '_a' of a type (line 2526)
    _a_159906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2526, 33), self_159905, '_a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2526, 33), tuple_159904, _a_159906)
    # Adding element type (line 2526)
    # Getting the type of 'self' (line 2526)
    self_159907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2526, 42), 'self')
    # Obtaining the member '_b' of a type (line 2526)
    _b_159908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2526, 42), self_159907, '_b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2526, 33), tuple_159904, _b_159908)
    
    # Applying the binary operator '%' (line 2526)
    result_mod_159909 = python_operator(stypy.reporting.localization.Localization(__file__, 2526, 19), '%', unicode_159903, tuple_159904)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2526, 12), 'stypy_return_type', result_mod_159909)
    
    # ################# End of '__str__(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '__str__' in the type store
    # Getting the type of 'stypy_return_type' (line 2525)
    stypy_return_type_159910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_159910)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '__str__'
    return stypy_return_type_159910

# Assigning a type to the variable '__str__' (line 2525)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 8), '__str__', stypy__str__)
# SSA join for if statement (line 2524)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Attribute to a Attribute (line 2549):
# Getting the type of 'Affine2DBase' (line 2549)
Affine2DBase_159911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 25), 'Affine2DBase')
# Obtaining the member 'get_matrix' of a type (line 2549)
get_matrix_159912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2549, 25), Affine2DBase_159911, 'get_matrix')
# Obtaining the member '__doc__' of a type (line 2549)
doc___159913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2549, 25), get_matrix_159912, '__doc__')
# Getting the type of 'CompositeAffine2D'
CompositeAffine2D_159914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CompositeAffine2D')
# Obtaining the member 'get_matrix' of a type
get_matrix_159915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CompositeAffine2D_159914, 'get_matrix')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_matrix_159915, '__doc__', doc___159913)

@norecursion
def composite_transform_factory(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'composite_transform_factory'
    module_type_store = module_type_store.open_function_context('composite_transform_factory', 2552, 0, False)
    
    # Passed parameters checking function
    composite_transform_factory.stypy_localization = localization
    composite_transform_factory.stypy_type_of_self = None
    composite_transform_factory.stypy_type_store = module_type_store
    composite_transform_factory.stypy_function_name = 'composite_transform_factory'
    composite_transform_factory.stypy_param_names_list = ['a', 'b']
    composite_transform_factory.stypy_varargs_param_name = None
    composite_transform_factory.stypy_kwargs_param_name = None
    composite_transform_factory.stypy_call_defaults = defaults
    composite_transform_factory.stypy_call_varargs = varargs
    composite_transform_factory.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'composite_transform_factory', ['a', 'b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'composite_transform_factory', localization, ['a', 'b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'composite_transform_factory(...)' code ##################

    unicode_159916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2565, (-1)), 'unicode', u"\n    Create a new composite transform that is the result of applying\n    transform a then transform b.\n\n    Shortcut versions of the blended transform are provided for the\n    case where both child transforms are affine, or one or the other\n    is the identity transform.\n\n    Composite transforms may also be created using the '+' operator,\n    e.g.::\n\n      c = a + b\n    ")
    
    
    # Call to isinstance(...): (line 2570)
    # Processing the call arguments (line 2570)
    # Getting the type of 'a' (line 2570)
    a_159918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 18), 'a', False)
    # Getting the type of 'IdentityTransform' (line 2570)
    IdentityTransform_159919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 21), 'IdentityTransform', False)
    # Processing the call keyword arguments (line 2570)
    kwargs_159920 = {}
    # Getting the type of 'isinstance' (line 2570)
    isinstance_159917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2570)
    isinstance_call_result_159921 = invoke(stypy.reporting.localization.Localization(__file__, 2570, 7), isinstance_159917, *[a_159918, IdentityTransform_159919], **kwargs_159920)
    
    # Testing the type of an if condition (line 2570)
    if_condition_159922 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2570, 4), isinstance_call_result_159921)
    # Assigning a type to the variable 'if_condition_159922' (line 2570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2570, 4), 'if_condition_159922', if_condition_159922)
    # SSA begins for if statement (line 2570)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'b' (line 2571)
    b_159923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 15), 'b')
    # Assigning a type to the variable 'stypy_return_type' (line 2571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 8), 'stypy_return_type', b_159923)
    # SSA branch for the else part of an if statement (line 2570)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 2572)
    # Processing the call arguments (line 2572)
    # Getting the type of 'b' (line 2572)
    b_159925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 20), 'b', False)
    # Getting the type of 'IdentityTransform' (line 2572)
    IdentityTransform_159926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 23), 'IdentityTransform', False)
    # Processing the call keyword arguments (line 2572)
    kwargs_159927 = {}
    # Getting the type of 'isinstance' (line 2572)
    isinstance_159924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2572)
    isinstance_call_result_159928 = invoke(stypy.reporting.localization.Localization(__file__, 2572, 9), isinstance_159924, *[b_159925, IdentityTransform_159926], **kwargs_159927)
    
    # Testing the type of an if condition (line 2572)
    if_condition_159929 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2572, 9), isinstance_call_result_159928)
    # Assigning a type to the variable 'if_condition_159929' (line 2572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2572, 9), 'if_condition_159929', if_condition_159929)
    # SSA begins for if statement (line 2572)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'a' (line 2573)
    a_159930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 15), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 2573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2573, 8), 'stypy_return_type', a_159930)
    # SSA branch for the else part of an if statement (line 2572)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 2574)
    # Processing the call arguments (line 2574)
    # Getting the type of 'a' (line 2574)
    a_159932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 20), 'a', False)
    # Getting the type of 'Affine2D' (line 2574)
    Affine2D_159933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 23), 'Affine2D', False)
    # Processing the call keyword arguments (line 2574)
    kwargs_159934 = {}
    # Getting the type of 'isinstance' (line 2574)
    isinstance_159931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2574)
    isinstance_call_result_159935 = invoke(stypy.reporting.localization.Localization(__file__, 2574, 9), isinstance_159931, *[a_159932, Affine2D_159933], **kwargs_159934)
    
    
    # Call to isinstance(...): (line 2574)
    # Processing the call arguments (line 2574)
    # Getting the type of 'b' (line 2574)
    b_159937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 48), 'b', False)
    # Getting the type of 'Affine2D' (line 2574)
    Affine2D_159938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 51), 'Affine2D', False)
    # Processing the call keyword arguments (line 2574)
    kwargs_159939 = {}
    # Getting the type of 'isinstance' (line 2574)
    isinstance_159936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 37), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2574)
    isinstance_call_result_159940 = invoke(stypy.reporting.localization.Localization(__file__, 2574, 37), isinstance_159936, *[b_159937, Affine2D_159938], **kwargs_159939)
    
    # Applying the binary operator 'and' (line 2574)
    result_and_keyword_159941 = python_operator(stypy.reporting.localization.Localization(__file__, 2574, 9), 'and', isinstance_call_result_159935, isinstance_call_result_159940)
    
    # Testing the type of an if condition (line 2574)
    if_condition_159942 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2574, 9), result_and_keyword_159941)
    # Assigning a type to the variable 'if_condition_159942' (line 2574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 9), 'if_condition_159942', if_condition_159942)
    # SSA begins for if statement (line 2574)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to CompositeAffine2D(...): (line 2575)
    # Processing the call arguments (line 2575)
    # Getting the type of 'a' (line 2575)
    a_159944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 33), 'a', False)
    # Getting the type of 'b' (line 2575)
    b_159945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 36), 'b', False)
    # Processing the call keyword arguments (line 2575)
    kwargs_159946 = {}
    # Getting the type of 'CompositeAffine2D' (line 2575)
    CompositeAffine2D_159943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 15), 'CompositeAffine2D', False)
    # Calling CompositeAffine2D(args, kwargs) (line 2575)
    CompositeAffine2D_call_result_159947 = invoke(stypy.reporting.localization.Localization(__file__, 2575, 15), CompositeAffine2D_159943, *[a_159944, b_159945], **kwargs_159946)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2575, 8), 'stypy_return_type', CompositeAffine2D_call_result_159947)
    # SSA join for if statement (line 2574)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2572)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2570)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to CompositeGenericTransform(...): (line 2576)
    # Processing the call arguments (line 2576)
    # Getting the type of 'a' (line 2576)
    a_159949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 37), 'a', False)
    # Getting the type of 'b' (line 2576)
    b_159950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 40), 'b', False)
    # Processing the call keyword arguments (line 2576)
    kwargs_159951 = {}
    # Getting the type of 'CompositeGenericTransform' (line 2576)
    CompositeGenericTransform_159948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 11), 'CompositeGenericTransform', False)
    # Calling CompositeGenericTransform(args, kwargs) (line 2576)
    CompositeGenericTransform_call_result_159952 = invoke(stypy.reporting.localization.Localization(__file__, 2576, 11), CompositeGenericTransform_159948, *[a_159949, b_159950], **kwargs_159951)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2576, 4), 'stypy_return_type', CompositeGenericTransform_call_result_159952)
    
    # ################# End of 'composite_transform_factory(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'composite_transform_factory' in the type store
    # Getting the type of 'stypy_return_type' (line 2552)
    stypy_return_type_159953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_159953)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'composite_transform_factory'
    return stypy_return_type_159953

# Assigning a type to the variable 'composite_transform_factory' (line 2552)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2552, 0), 'composite_transform_factory', composite_transform_factory)
# Declaration of the 'BboxTransform' class
# Getting the type of 'Affine2DBase' (line 2579)
Affine2DBase_159954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 20), 'Affine2DBase')

class BboxTransform(Affine2DBase_159954, ):
    unicode_159955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2583, (-1)), 'unicode', u'\n    :class:`BboxTransform` linearly transforms points from one\n    :class:`Bbox` to another :class:`Bbox`.\n    ')
    
    # Assigning a Name to a Name (line 2584):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2586, 4, False)
        # Assigning a type to the variable 'self' (line 2587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransform.__init__', ['boxin', 'boxout'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['boxin', 'boxout'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_159956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2590, (-1)), 'unicode', u'\n        Create a new :class:`BboxTransform` that linearly transforms\n        points from *boxin* to *boxout*.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'boxin' (line 2591)
        boxin_159957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 15), 'boxin')
        # Obtaining the member 'is_bbox' of a type (line 2591)
        is_bbox_159958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2591, 15), boxin_159957, 'is_bbox')
        # Applying the 'not' unary operator (line 2591)
        result_not__159959 = python_operator(stypy.reporting.localization.Localization(__file__, 2591, 11), 'not', is_bbox_159958)
        
        
        # Getting the type of 'boxout' (line 2591)
        boxout_159960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 36), 'boxout')
        # Obtaining the member 'is_bbox' of a type (line 2591)
        is_bbox_159961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2591, 36), boxout_159960, 'is_bbox')
        # Applying the 'not' unary operator (line 2591)
        result_not__159962 = python_operator(stypy.reporting.localization.Localization(__file__, 2591, 32), 'not', is_bbox_159961)
        
        # Applying the binary operator 'or' (line 2591)
        result_or_keyword_159963 = python_operator(stypy.reporting.localization.Localization(__file__, 2591, 11), 'or', result_not__159959, result_not__159962)
        
        # Testing the type of an if condition (line 2591)
        if_condition_159964 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2591, 8), result_or_keyword_159963)
        # Assigning a type to the variable 'if_condition_159964' (line 2591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2591, 8), 'if_condition_159964', if_condition_159964)
        # SSA begins for if statement (line 2591)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 2592):
        
        # Assigning a Str to a Name (line 2592):
        unicode_159965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2592, 18), 'unicode', u"'boxin' and 'boxout' must be bbox")
        # Assigning a type to the variable 'msg' (line 2592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2592, 12), 'msg', unicode_159965)
        
        # Call to ValueError(...): (line 2593)
        # Processing the call arguments (line 2593)
        # Getting the type of 'msg' (line 2593)
        msg_159967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 29), 'msg', False)
        # Processing the call keyword arguments (line 2593)
        kwargs_159968 = {}
        # Getting the type of 'ValueError' (line 2593)
        ValueError_159966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2593)
        ValueError_call_result_159969 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 18), ValueError_159966, *[msg_159967], **kwargs_159968)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2593, 12), ValueError_call_result_159969, 'raise parameter', BaseException)
        # SSA join for if statement (line 2591)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 2595)
        # Processing the call arguments (line 2595)
        # Getting the type of 'self' (line 2595)
        self_159972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 30), 'self', False)
        # Processing the call keyword arguments (line 2595)
        # Getting the type of 'kwargs' (line 2595)
        kwargs_159973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 38), 'kwargs', False)
        kwargs_159974 = {'kwargs_159973': kwargs_159973}
        # Getting the type of 'Affine2DBase' (line 2595)
        Affine2DBase_159970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 8), 'Affine2DBase', False)
        # Obtaining the member '__init__' of a type (line 2595)
        init___159971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 8), Affine2DBase_159970, '__init__')
        # Calling __init__(args, kwargs) (line 2595)
        init___call_result_159975 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 8), init___159971, *[self_159972], **kwargs_159974)
        
        
        # Assigning a Name to a Attribute (line 2596):
        
        # Assigning a Name to a Attribute (line 2596):
        # Getting the type of 'boxin' (line 2596)
        boxin_159976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 22), 'boxin')
        # Getting the type of 'self' (line 2596)
        self_159977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 8), 'self')
        # Setting the type of the member '_boxin' of a type (line 2596)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2596, 8), self_159977, '_boxin', boxin_159976)
        
        # Assigning a Name to a Attribute (line 2597):
        
        # Assigning a Name to a Attribute (line 2597):
        # Getting the type of 'boxout' (line 2597)
        boxout_159978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 23), 'boxout')
        # Getting the type of 'self' (line 2597)
        self_159979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 8), 'self')
        # Setting the type of the member '_boxout' of a type (line 2597)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2597, 8), self_159979, '_boxout', boxout_159978)
        
        # Call to set_children(...): (line 2598)
        # Processing the call arguments (line 2598)
        # Getting the type of 'boxin' (line 2598)
        boxin_159982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 26), 'boxin', False)
        # Getting the type of 'boxout' (line 2598)
        boxout_159983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 33), 'boxout', False)
        # Processing the call keyword arguments (line 2598)
        kwargs_159984 = {}
        # Getting the type of 'self' (line 2598)
        self_159980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 2598)
        set_children_159981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2598, 8), self_159980, 'set_children')
        # Calling set_children(args, kwargs) (line 2598)
        set_children_call_result_159985 = invoke(stypy.reporting.localization.Localization(__file__, 2598, 8), set_children_159981, *[boxin_159982, boxout_159983], **kwargs_159984)
        
        
        # Assigning a Name to a Attribute (line 2599):
        
        # Assigning a Name to a Attribute (line 2599):
        # Getting the type of 'None' (line 2599)
        None_159986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 20), 'None')
        # Getting the type of 'self' (line 2599)
        self_159987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 2599)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 8), self_159987, '_mtx', None_159986)
        
        # Assigning a Name to a Attribute (line 2600):
        
        # Assigning a Name to a Attribute (line 2600):
        # Getting the type of 'None' (line 2600)
        None_159988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 25), 'None')
        # Getting the type of 'self' (line 2600)
        self_159989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 8), 'self')
        # Setting the type of the member '_inverted' of a type (line 2600)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2600, 8), self_159989, '_inverted', None_159988)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 2602, 4, False)
        # Assigning a type to the variable 'self' (line 2603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2603, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'BboxTransform.stypy__repr__')
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxTransform.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransform.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_159990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 15), 'unicode', u'BboxTransform(%r, %r)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2603)
        tuple_159991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2603)
        # Adding element type (line 2603)
        # Getting the type of 'self' (line 2603)
        self_159992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 42), 'self')
        # Obtaining the member '_boxin' of a type (line 2603)
        _boxin_159993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2603, 42), self_159992, '_boxin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2603, 42), tuple_159991, _boxin_159993)
        # Adding element type (line 2603)
        # Getting the type of 'self' (line 2603)
        self_159994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 55), 'self')
        # Obtaining the member '_boxout' of a type (line 2603)
        _boxout_159995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2603, 55), self_159994, '_boxout')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2603, 42), tuple_159991, _boxout_159995)
        
        # Applying the binary operator '%' (line 2603)
        result_mod_159996 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 15), '%', unicode_159990, tuple_159991)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2603, 8), 'stypy_return_type', result_mod_159996)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 2602)
        stypy_return_type_159997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_159997)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_159997


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 2605, 4, False)
        # Assigning a type to the variable 'self' (line 2606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2606, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_function_name', 'BboxTransform.get_matrix')
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxTransform.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransform.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        
        # Getting the type of 'self' (line 2606)
        self_159998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 2606)
        _invalid_159999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2606, 11), self_159998, '_invalid')
        # Testing the type of an if condition (line 2606)
        if_condition_160000 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2606, 8), _invalid_159999)
        # Assigning a type to the variable 'if_condition_160000' (line 2606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2606, 8), 'if_condition_160000', if_condition_160000)
        # SSA begins for if statement (line 2606)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 2607):
        
        # Assigning a Subscript to a Name (line 2607):
        
        # Obtaining the type of the subscript
        int_160001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 12), 'int')
        # Getting the type of 'self' (line 2607)
        self_160002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 33), 'self')
        # Obtaining the member '_boxin' of a type (line 2607)
        _boxin_160003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 33), self_160002, '_boxin')
        # Obtaining the member 'bounds' of a type (line 2607)
        bounds_160004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 33), _boxin_160003, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2607)
        getitem___160005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 12), bounds_160004, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2607)
        subscript_call_result_160006 = invoke(stypy.reporting.localization.Localization(__file__, 2607, 12), getitem___160005, int_160001)
        
        # Assigning a type to the variable 'tuple_var_assignment_154305' (line 2607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 12), 'tuple_var_assignment_154305', subscript_call_result_160006)
        
        # Assigning a Subscript to a Name (line 2607):
        
        # Obtaining the type of the subscript
        int_160007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 12), 'int')
        # Getting the type of 'self' (line 2607)
        self_160008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 33), 'self')
        # Obtaining the member '_boxin' of a type (line 2607)
        _boxin_160009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 33), self_160008, '_boxin')
        # Obtaining the member 'bounds' of a type (line 2607)
        bounds_160010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 33), _boxin_160009, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2607)
        getitem___160011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 12), bounds_160010, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2607)
        subscript_call_result_160012 = invoke(stypy.reporting.localization.Localization(__file__, 2607, 12), getitem___160011, int_160007)
        
        # Assigning a type to the variable 'tuple_var_assignment_154306' (line 2607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 12), 'tuple_var_assignment_154306', subscript_call_result_160012)
        
        # Assigning a Subscript to a Name (line 2607):
        
        # Obtaining the type of the subscript
        int_160013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 12), 'int')
        # Getting the type of 'self' (line 2607)
        self_160014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 33), 'self')
        # Obtaining the member '_boxin' of a type (line 2607)
        _boxin_160015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 33), self_160014, '_boxin')
        # Obtaining the member 'bounds' of a type (line 2607)
        bounds_160016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 33), _boxin_160015, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2607)
        getitem___160017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 12), bounds_160016, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2607)
        subscript_call_result_160018 = invoke(stypy.reporting.localization.Localization(__file__, 2607, 12), getitem___160017, int_160013)
        
        # Assigning a type to the variable 'tuple_var_assignment_154307' (line 2607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 12), 'tuple_var_assignment_154307', subscript_call_result_160018)
        
        # Assigning a Subscript to a Name (line 2607):
        
        # Obtaining the type of the subscript
        int_160019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 12), 'int')
        # Getting the type of 'self' (line 2607)
        self_160020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 33), 'self')
        # Obtaining the member '_boxin' of a type (line 2607)
        _boxin_160021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 33), self_160020, '_boxin')
        # Obtaining the member 'bounds' of a type (line 2607)
        bounds_160022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 33), _boxin_160021, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2607)
        getitem___160023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 12), bounds_160022, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2607)
        subscript_call_result_160024 = invoke(stypy.reporting.localization.Localization(__file__, 2607, 12), getitem___160023, int_160019)
        
        # Assigning a type to the variable 'tuple_var_assignment_154308' (line 2607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 12), 'tuple_var_assignment_154308', subscript_call_result_160024)
        
        # Assigning a Name to a Name (line 2607):
        # Getting the type of 'tuple_var_assignment_154305' (line 2607)
        tuple_var_assignment_154305_160025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 12), 'tuple_var_assignment_154305')
        # Assigning a type to the variable 'inl' (line 2607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 12), 'inl', tuple_var_assignment_154305_160025)
        
        # Assigning a Name to a Name (line 2607):
        # Getting the type of 'tuple_var_assignment_154306' (line 2607)
        tuple_var_assignment_154306_160026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 12), 'tuple_var_assignment_154306')
        # Assigning a type to the variable 'inb' (line 2607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 17), 'inb', tuple_var_assignment_154306_160026)
        
        # Assigning a Name to a Name (line 2607):
        # Getting the type of 'tuple_var_assignment_154307' (line 2607)
        tuple_var_assignment_154307_160027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 12), 'tuple_var_assignment_154307')
        # Assigning a type to the variable 'inw' (line 2607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 22), 'inw', tuple_var_assignment_154307_160027)
        
        # Assigning a Name to a Name (line 2607):
        # Getting the type of 'tuple_var_assignment_154308' (line 2607)
        tuple_var_assignment_154308_160028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 12), 'tuple_var_assignment_154308')
        # Assigning a type to the variable 'inh' (line 2607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 27), 'inh', tuple_var_assignment_154308_160028)
        
        # Assigning a Attribute to a Tuple (line 2608):
        
        # Assigning a Subscript to a Name (line 2608):
        
        # Obtaining the type of the subscript
        int_160029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 12), 'int')
        # Getting the type of 'self' (line 2608)
        self_160030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 37), 'self')
        # Obtaining the member '_boxout' of a type (line 2608)
        _boxout_160031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 37), self_160030, '_boxout')
        # Obtaining the member 'bounds' of a type (line 2608)
        bounds_160032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 37), _boxout_160031, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2608)
        getitem___160033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 12), bounds_160032, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2608)
        subscript_call_result_160034 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 12), getitem___160033, int_160029)
        
        # Assigning a type to the variable 'tuple_var_assignment_154309' (line 2608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 12), 'tuple_var_assignment_154309', subscript_call_result_160034)
        
        # Assigning a Subscript to a Name (line 2608):
        
        # Obtaining the type of the subscript
        int_160035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 12), 'int')
        # Getting the type of 'self' (line 2608)
        self_160036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 37), 'self')
        # Obtaining the member '_boxout' of a type (line 2608)
        _boxout_160037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 37), self_160036, '_boxout')
        # Obtaining the member 'bounds' of a type (line 2608)
        bounds_160038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 37), _boxout_160037, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2608)
        getitem___160039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 12), bounds_160038, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2608)
        subscript_call_result_160040 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 12), getitem___160039, int_160035)
        
        # Assigning a type to the variable 'tuple_var_assignment_154310' (line 2608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 12), 'tuple_var_assignment_154310', subscript_call_result_160040)
        
        # Assigning a Subscript to a Name (line 2608):
        
        # Obtaining the type of the subscript
        int_160041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 12), 'int')
        # Getting the type of 'self' (line 2608)
        self_160042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 37), 'self')
        # Obtaining the member '_boxout' of a type (line 2608)
        _boxout_160043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 37), self_160042, '_boxout')
        # Obtaining the member 'bounds' of a type (line 2608)
        bounds_160044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 37), _boxout_160043, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2608)
        getitem___160045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 12), bounds_160044, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2608)
        subscript_call_result_160046 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 12), getitem___160045, int_160041)
        
        # Assigning a type to the variable 'tuple_var_assignment_154311' (line 2608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 12), 'tuple_var_assignment_154311', subscript_call_result_160046)
        
        # Assigning a Subscript to a Name (line 2608):
        
        # Obtaining the type of the subscript
        int_160047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 12), 'int')
        # Getting the type of 'self' (line 2608)
        self_160048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 37), 'self')
        # Obtaining the member '_boxout' of a type (line 2608)
        _boxout_160049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 37), self_160048, '_boxout')
        # Obtaining the member 'bounds' of a type (line 2608)
        bounds_160050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 37), _boxout_160049, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2608)
        getitem___160051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 12), bounds_160050, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2608)
        subscript_call_result_160052 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 12), getitem___160051, int_160047)
        
        # Assigning a type to the variable 'tuple_var_assignment_154312' (line 2608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 12), 'tuple_var_assignment_154312', subscript_call_result_160052)
        
        # Assigning a Name to a Name (line 2608):
        # Getting the type of 'tuple_var_assignment_154309' (line 2608)
        tuple_var_assignment_154309_160053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 12), 'tuple_var_assignment_154309')
        # Assigning a type to the variable 'outl' (line 2608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 12), 'outl', tuple_var_assignment_154309_160053)
        
        # Assigning a Name to a Name (line 2608):
        # Getting the type of 'tuple_var_assignment_154310' (line 2608)
        tuple_var_assignment_154310_160054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 12), 'tuple_var_assignment_154310')
        # Assigning a type to the variable 'outb' (line 2608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 18), 'outb', tuple_var_assignment_154310_160054)
        
        # Assigning a Name to a Name (line 2608):
        # Getting the type of 'tuple_var_assignment_154311' (line 2608)
        tuple_var_assignment_154311_160055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 12), 'tuple_var_assignment_154311')
        # Assigning a type to the variable 'outw' (line 2608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 24), 'outw', tuple_var_assignment_154311_160055)
        
        # Assigning a Name to a Name (line 2608):
        # Getting the type of 'tuple_var_assignment_154312' (line 2608)
        tuple_var_assignment_154312_160056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 12), 'tuple_var_assignment_154312')
        # Assigning a type to the variable 'outh' (line 2608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 30), 'outh', tuple_var_assignment_154312_160056)
        
        # Assigning a BinOp to a Name (line 2609):
        
        # Assigning a BinOp to a Name (line 2609):
        # Getting the type of 'outw' (line 2609)
        outw_160057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 22), 'outw')
        # Getting the type of 'inw' (line 2609)
        inw_160058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 29), 'inw')
        # Applying the binary operator 'div' (line 2609)
        result_div_160059 = python_operator(stypy.reporting.localization.Localization(__file__, 2609, 22), 'div', outw_160057, inw_160058)
        
        # Assigning a type to the variable 'x_scale' (line 2609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2609, 12), 'x_scale', result_div_160059)
        
        # Assigning a BinOp to a Name (line 2610):
        
        # Assigning a BinOp to a Name (line 2610):
        # Getting the type of 'outh' (line 2610)
        outh_160060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 22), 'outh')
        # Getting the type of 'inh' (line 2610)
        inh_160061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 29), 'inh')
        # Applying the binary operator 'div' (line 2610)
        result_div_160062 = python_operator(stypy.reporting.localization.Localization(__file__, 2610, 22), 'div', outh_160060, inh_160061)
        
        # Assigning a type to the variable 'y_scale' (line 2610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2610, 12), 'y_scale', result_div_160062)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'DEBUG' (line 2611)
        DEBUG_160063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 15), 'DEBUG')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x_scale' (line 2611)
        x_scale_160064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 26), 'x_scale')
        int_160065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2611, 37), 'int')
        # Applying the binary operator '==' (line 2611)
        result_eq_160066 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 26), '==', x_scale_160064, int_160065)
        
        
        # Getting the type of 'y_scale' (line 2611)
        y_scale_160067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 42), 'y_scale')
        int_160068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2611, 53), 'int')
        # Applying the binary operator '==' (line 2611)
        result_eq_160069 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 42), '==', y_scale_160067, int_160068)
        
        # Applying the binary operator 'or' (line 2611)
        result_or_keyword_160070 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 26), 'or', result_eq_160066, result_eq_160069)
        
        # Applying the binary operator 'and' (line 2611)
        result_and_keyword_160071 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 15), 'and', DEBUG_160063, result_or_keyword_160070)
        
        # Testing the type of an if condition (line 2611)
        if_condition_160072 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2611, 12), result_and_keyword_160071)
        # Assigning a type to the variable 'if_condition_160072' (line 2611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2611, 12), 'if_condition_160072', if_condition_160072)
        # SSA begins for if statement (line 2611)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2612)
        # Processing the call arguments (line 2612)
        unicode_160074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2612, 33), 'unicode', u'Transforming from or to a singular bounding box.')
        # Processing the call keyword arguments (line 2612)
        kwargs_160075 = {}
        # Getting the type of 'ValueError' (line 2612)
        ValueError_160073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2612)
        ValueError_call_result_160076 = invoke(stypy.reporting.localization.Localization(__file__, 2612, 22), ValueError_160073, *[unicode_160074], **kwargs_160075)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2612, 16), ValueError_call_result_160076, 'raise parameter', BaseException)
        # SSA join for if statement (line 2611)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 2613):
        
        # Assigning a Call to a Attribute (line 2613):
        
        # Call to array(...): (line 2613)
        # Processing the call arguments (line 2613)
        
        # Obtaining an instance of the builtin type 'list' (line 2613)
        list_160079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2613, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2613)
        # Adding element type (line 2613)
        
        # Obtaining an instance of the builtin type 'list' (line 2613)
        list_160080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2613, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2613)
        # Adding element type (line 2613)
        # Getting the type of 'x_scale' (line 2613)
        x_scale_160081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 35), 'x_scale', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2613, 34), list_160080, x_scale_160081)
        # Adding element type (line 2613)
        float_160082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2613, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2613, 34), list_160080, float_160082)
        # Adding element type (line 2613)
        
        # Getting the type of 'inl' (line 2613)
        inl_160083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 55), 'inl', False)
        # Applying the 'usub' unary operator (line 2613)
        result___neg___160084 = python_operator(stypy.reporting.localization.Localization(__file__, 2613, 54), 'usub', inl_160083)
        
        # Getting the type of 'x_scale' (line 2613)
        x_scale_160085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 59), 'x_scale', False)
        # Applying the binary operator '*' (line 2613)
        result_mul_160086 = python_operator(stypy.reporting.localization.Localization(__file__, 2613, 54), '*', result___neg___160084, x_scale_160085)
        
        # Getting the type of 'outl' (line 2613)
        outl_160087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 67), 'outl', False)
        # Applying the binary operator '+' (line 2613)
        result_add_160088 = python_operator(stypy.reporting.localization.Localization(__file__, 2613, 54), '+', result_mul_160086, outl_160087)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2613, 34), list_160080, result_add_160088)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2613, 33), list_160079, list_160080)
        # Adding element type (line 2613)
        
        # Obtaining an instance of the builtin type 'list' (line 2614)
        list_160089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2614, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2614)
        # Adding element type (line 2614)
        float_160090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2614, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2614, 35), list_160089, float_160090)
        # Adding element type (line 2614)
        # Getting the type of 'y_scale' (line 2614)
        y_scale_160091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 44), 'y_scale', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2614, 35), list_160089, y_scale_160091)
        # Adding element type (line 2614)
        
        # Getting the type of 'inb' (line 2614)
        inb_160092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 55), 'inb', False)
        # Applying the 'usub' unary operator (line 2614)
        result___neg___160093 = python_operator(stypy.reporting.localization.Localization(__file__, 2614, 54), 'usub', inb_160092)
        
        # Getting the type of 'y_scale' (line 2614)
        y_scale_160094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 59), 'y_scale', False)
        # Applying the binary operator '*' (line 2614)
        result_mul_160095 = python_operator(stypy.reporting.localization.Localization(__file__, 2614, 54), '*', result___neg___160093, y_scale_160094)
        
        # Getting the type of 'outb' (line 2614)
        outb_160096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 67), 'outb', False)
        # Applying the binary operator '+' (line 2614)
        result_add_160097 = python_operator(stypy.reporting.localization.Localization(__file__, 2614, 54), '+', result_mul_160095, outb_160096)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2614, 35), list_160089, result_add_160097)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2613, 33), list_160079, list_160089)
        # Adding element type (line 2613)
        
        # Obtaining an instance of the builtin type 'list' (line 2615)
        list_160098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2615, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2615)
        # Adding element type (line 2615)
        float_160099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2615, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2615, 35), list_160098, float_160099)
        # Adding element type (line 2615)
        float_160100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2615, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2615, 35), list_160098, float_160100)
        # Adding element type (line 2615)
        float_160101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2615, 53), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2615, 35), list_160098, float_160101)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2613, 33), list_160079, list_160098)
        
        # Getting the type of 'float' (line 2616)
        float_160102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 33), 'float', False)
        # Processing the call keyword arguments (line 2613)
        kwargs_160103 = {}
        # Getting the type of 'np' (line 2613)
        np_160077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 24), 'np', False)
        # Obtaining the member 'array' of a type (line 2613)
        array_160078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2613, 24), np_160077, 'array')
        # Calling array(args, kwargs) (line 2613)
        array_call_result_160104 = invoke(stypy.reporting.localization.Localization(__file__, 2613, 24), array_160078, *[list_160079, float_160102], **kwargs_160103)
        
        # Getting the type of 'self' (line 2613)
        self_160105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 12), 'self')
        # Setting the type of the member '_mtx' of a type (line 2613)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2613, 12), self_160105, '_mtx', array_call_result_160104)
        
        # Assigning a Name to a Attribute (line 2617):
        
        # Assigning a Name to a Attribute (line 2617):
        # Getting the type of 'None' (line 2617)
        None_160106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 29), 'None')
        # Getting the type of 'self' (line 2617)
        self_160107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 12), 'self')
        # Setting the type of the member '_inverted' of a type (line 2617)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2617, 12), self_160107, '_inverted', None_160106)
        
        # Assigning a Num to a Attribute (line 2618):
        
        # Assigning a Num to a Attribute (line 2618):
        int_160108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2618, 28), 'int')
        # Getting the type of 'self' (line 2618)
        self_160109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 2618)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2618, 12), self_160109, '_invalid', int_160108)
        # SSA join for if statement (line 2606)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 2619)
        self_160110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 15), 'self')
        # Obtaining the member '_mtx' of a type (line 2619)
        _mtx_160111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2619, 15), self_160110, '_mtx')
        # Assigning a type to the variable 'stypy_return_type' (line 2619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2619, 8), 'stypy_return_type', _mtx_160111)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 2605)
        stypy_return_type_160112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160112)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_160112

    
    # Assigning a Attribute to a Attribute (line 2620):

# Assigning a type to the variable 'BboxTransform' (line 2579)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2579, 0), 'BboxTransform', BboxTransform)

# Assigning a Name to a Name (line 2584):
# Getting the type of 'True' (line 2584)
True_160113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 19), 'True')
# Getting the type of 'BboxTransform'
BboxTransform_160114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxTransform')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxTransform_160114, 'is_separable', True_160113)

# Assigning a Attribute to a Attribute (line 2620):
# Getting the type of 'Affine2DBase' (line 2620)
Affine2DBase_160115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 25), 'Affine2DBase')
# Obtaining the member 'get_matrix' of a type (line 2620)
get_matrix_160116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2620, 25), Affine2DBase_160115, 'get_matrix')
# Obtaining the member '__doc__' of a type (line 2620)
doc___160117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2620, 25), get_matrix_160116, '__doc__')
# Getting the type of 'BboxTransform'
BboxTransform_160118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxTransform')
# Obtaining the member 'get_matrix' of a type
get_matrix_160119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxTransform_160118, 'get_matrix')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_matrix_160119, '__doc__', doc___160117)
# Declaration of the 'BboxTransformTo' class
# Getting the type of 'Affine2DBase' (line 2623)
Affine2DBase_160120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 22), 'Affine2DBase')

class BboxTransformTo(Affine2DBase_160120, ):
    unicode_160121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2628, (-1)), 'unicode', u'\n    :class:`BboxTransformTo` is a transformation that linearly\n    transforms points from the unit bounding box to a given\n    :class:`Bbox`.\n    ')
    
    # Assigning a Name to a Name (line 2629):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2631, 4, False)
        # Assigning a type to the variable 'self' (line 2632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2632, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransformTo.__init__', ['boxout'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['boxout'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_160122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2635, (-1)), 'unicode', u'\n        Create a new :class:`BboxTransformTo` that linearly transforms\n        points from the unit bounding box to *boxout*.\n        ')
        
        
        # Getting the type of 'boxout' (line 2636)
        boxout_160123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 15), 'boxout')
        # Obtaining the member 'is_bbox' of a type (line 2636)
        is_bbox_160124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 15), boxout_160123, 'is_bbox')
        # Applying the 'not' unary operator (line 2636)
        result_not__160125 = python_operator(stypy.reporting.localization.Localization(__file__, 2636, 11), 'not', is_bbox_160124)
        
        # Testing the type of an if condition (line 2636)
        if_condition_160126 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2636, 8), result_not__160125)
        # Assigning a type to the variable 'if_condition_160126' (line 2636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 8), 'if_condition_160126', if_condition_160126)
        # SSA begins for if statement (line 2636)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2637)
        # Processing the call arguments (line 2637)
        unicode_160128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2637, 29), 'unicode', u"'boxout' must be bbox")
        # Processing the call keyword arguments (line 2637)
        kwargs_160129 = {}
        # Getting the type of 'ValueError' (line 2637)
        ValueError_160127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2637)
        ValueError_call_result_160130 = invoke(stypy.reporting.localization.Localization(__file__, 2637, 18), ValueError_160127, *[unicode_160128], **kwargs_160129)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2637, 12), ValueError_call_result_160130, 'raise parameter', BaseException)
        # SSA join for if statement (line 2636)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 2639)
        # Processing the call arguments (line 2639)
        # Getting the type of 'self' (line 2639)
        self_160133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 30), 'self', False)
        # Processing the call keyword arguments (line 2639)
        # Getting the type of 'kwargs' (line 2639)
        kwargs_160134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 38), 'kwargs', False)
        kwargs_160135 = {'kwargs_160134': kwargs_160134}
        # Getting the type of 'Affine2DBase' (line 2639)
        Affine2DBase_160131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 8), 'Affine2DBase', False)
        # Obtaining the member '__init__' of a type (line 2639)
        init___160132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2639, 8), Affine2DBase_160131, '__init__')
        # Calling __init__(args, kwargs) (line 2639)
        init___call_result_160136 = invoke(stypy.reporting.localization.Localization(__file__, 2639, 8), init___160132, *[self_160133], **kwargs_160135)
        
        
        # Assigning a Name to a Attribute (line 2640):
        
        # Assigning a Name to a Attribute (line 2640):
        # Getting the type of 'boxout' (line 2640)
        boxout_160137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 23), 'boxout')
        # Getting the type of 'self' (line 2640)
        self_160138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 8), 'self')
        # Setting the type of the member '_boxout' of a type (line 2640)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 8), self_160138, '_boxout', boxout_160137)
        
        # Call to set_children(...): (line 2641)
        # Processing the call arguments (line 2641)
        # Getting the type of 'boxout' (line 2641)
        boxout_160141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 26), 'boxout', False)
        # Processing the call keyword arguments (line 2641)
        kwargs_160142 = {}
        # Getting the type of 'self' (line 2641)
        self_160139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 2641)
        set_children_160140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2641, 8), self_160139, 'set_children')
        # Calling set_children(args, kwargs) (line 2641)
        set_children_call_result_160143 = invoke(stypy.reporting.localization.Localization(__file__, 2641, 8), set_children_160140, *[boxout_160141], **kwargs_160142)
        
        
        # Assigning a Name to a Attribute (line 2642):
        
        # Assigning a Name to a Attribute (line 2642):
        # Getting the type of 'None' (line 2642)
        None_160144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 20), 'None')
        # Getting the type of 'self' (line 2642)
        self_160145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 2642)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2642, 8), self_160145, '_mtx', None_160144)
        
        # Assigning a Name to a Attribute (line 2643):
        
        # Assigning a Name to a Attribute (line 2643):
        # Getting the type of 'None' (line 2643)
        None_160146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 25), 'None')
        # Getting the type of 'self' (line 2643)
        self_160147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 8), 'self')
        # Setting the type of the member '_inverted' of a type (line 2643)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2643, 8), self_160147, '_inverted', None_160146)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 2645, 4, False)
        # Assigning a type to the variable 'self' (line 2646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'BboxTransformTo.stypy__repr__')
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxTransformTo.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransformTo.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_160148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2646, 15), 'unicode', u'BboxTransformTo(%r)')
        # Getting the type of 'self' (line 2646)
        self_160149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 40), 'self')
        # Obtaining the member '_boxout' of a type (line 2646)
        _boxout_160150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2646, 40), self_160149, '_boxout')
        # Applying the binary operator '%' (line 2646)
        result_mod_160151 = python_operator(stypy.reporting.localization.Localization(__file__, 2646, 15), '%', unicode_160148, _boxout_160150)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2646, 8), 'stypy_return_type', result_mod_160151)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 2645)
        stypy_return_type_160152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160152)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_160152


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 2648, 4, False)
        # Assigning a type to the variable 'self' (line 2649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2649, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_function_name', 'BboxTransformTo.get_matrix')
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxTransformTo.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransformTo.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        
        # Getting the type of 'self' (line 2649)
        self_160153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 2649)
        _invalid_160154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2649, 11), self_160153, '_invalid')
        # Testing the type of an if condition (line 2649)
        if_condition_160155 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2649, 8), _invalid_160154)
        # Assigning a type to the variable 'if_condition_160155' (line 2649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2649, 8), 'if_condition_160155', if_condition_160155)
        # SSA begins for if statement (line 2649)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 2650):
        
        # Assigning a Subscript to a Name (line 2650):
        
        # Obtaining the type of the subscript
        int_160156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2650, 12), 'int')
        # Getting the type of 'self' (line 2650)
        self_160157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 37), 'self')
        # Obtaining the member '_boxout' of a type (line 2650)
        _boxout_160158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 37), self_160157, '_boxout')
        # Obtaining the member 'bounds' of a type (line 2650)
        bounds_160159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 37), _boxout_160158, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2650)
        getitem___160160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 12), bounds_160159, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2650)
        subscript_call_result_160161 = invoke(stypy.reporting.localization.Localization(__file__, 2650, 12), getitem___160160, int_160156)
        
        # Assigning a type to the variable 'tuple_var_assignment_154313' (line 2650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2650, 12), 'tuple_var_assignment_154313', subscript_call_result_160161)
        
        # Assigning a Subscript to a Name (line 2650):
        
        # Obtaining the type of the subscript
        int_160162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2650, 12), 'int')
        # Getting the type of 'self' (line 2650)
        self_160163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 37), 'self')
        # Obtaining the member '_boxout' of a type (line 2650)
        _boxout_160164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 37), self_160163, '_boxout')
        # Obtaining the member 'bounds' of a type (line 2650)
        bounds_160165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 37), _boxout_160164, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2650)
        getitem___160166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 12), bounds_160165, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2650)
        subscript_call_result_160167 = invoke(stypy.reporting.localization.Localization(__file__, 2650, 12), getitem___160166, int_160162)
        
        # Assigning a type to the variable 'tuple_var_assignment_154314' (line 2650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2650, 12), 'tuple_var_assignment_154314', subscript_call_result_160167)
        
        # Assigning a Subscript to a Name (line 2650):
        
        # Obtaining the type of the subscript
        int_160168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2650, 12), 'int')
        # Getting the type of 'self' (line 2650)
        self_160169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 37), 'self')
        # Obtaining the member '_boxout' of a type (line 2650)
        _boxout_160170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 37), self_160169, '_boxout')
        # Obtaining the member 'bounds' of a type (line 2650)
        bounds_160171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 37), _boxout_160170, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2650)
        getitem___160172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 12), bounds_160171, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2650)
        subscript_call_result_160173 = invoke(stypy.reporting.localization.Localization(__file__, 2650, 12), getitem___160172, int_160168)
        
        # Assigning a type to the variable 'tuple_var_assignment_154315' (line 2650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2650, 12), 'tuple_var_assignment_154315', subscript_call_result_160173)
        
        # Assigning a Subscript to a Name (line 2650):
        
        # Obtaining the type of the subscript
        int_160174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2650, 12), 'int')
        # Getting the type of 'self' (line 2650)
        self_160175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 37), 'self')
        # Obtaining the member '_boxout' of a type (line 2650)
        _boxout_160176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 37), self_160175, '_boxout')
        # Obtaining the member 'bounds' of a type (line 2650)
        bounds_160177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 37), _boxout_160176, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2650)
        getitem___160178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 12), bounds_160177, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2650)
        subscript_call_result_160179 = invoke(stypy.reporting.localization.Localization(__file__, 2650, 12), getitem___160178, int_160174)
        
        # Assigning a type to the variable 'tuple_var_assignment_154316' (line 2650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2650, 12), 'tuple_var_assignment_154316', subscript_call_result_160179)
        
        # Assigning a Name to a Name (line 2650):
        # Getting the type of 'tuple_var_assignment_154313' (line 2650)
        tuple_var_assignment_154313_160180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 12), 'tuple_var_assignment_154313')
        # Assigning a type to the variable 'outl' (line 2650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2650, 12), 'outl', tuple_var_assignment_154313_160180)
        
        # Assigning a Name to a Name (line 2650):
        # Getting the type of 'tuple_var_assignment_154314' (line 2650)
        tuple_var_assignment_154314_160181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 12), 'tuple_var_assignment_154314')
        # Assigning a type to the variable 'outb' (line 2650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2650, 18), 'outb', tuple_var_assignment_154314_160181)
        
        # Assigning a Name to a Name (line 2650):
        # Getting the type of 'tuple_var_assignment_154315' (line 2650)
        tuple_var_assignment_154315_160182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 12), 'tuple_var_assignment_154315')
        # Assigning a type to the variable 'outw' (line 2650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2650, 24), 'outw', tuple_var_assignment_154315_160182)
        
        # Assigning a Name to a Name (line 2650):
        # Getting the type of 'tuple_var_assignment_154316' (line 2650)
        tuple_var_assignment_154316_160183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 12), 'tuple_var_assignment_154316')
        # Assigning a type to the variable 'outh' (line 2650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2650, 30), 'outh', tuple_var_assignment_154316_160183)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'DEBUG' (line 2651)
        DEBUG_160184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 15), 'DEBUG')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'outw' (line 2651)
        outw_160185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 26), 'outw')
        int_160186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2651, 34), 'int')
        # Applying the binary operator '==' (line 2651)
        result_eq_160187 = python_operator(stypy.reporting.localization.Localization(__file__, 2651, 26), '==', outw_160185, int_160186)
        
        
        # Getting the type of 'outh' (line 2651)
        outh_160188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 39), 'outh')
        int_160189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2651, 47), 'int')
        # Applying the binary operator '==' (line 2651)
        result_eq_160190 = python_operator(stypy.reporting.localization.Localization(__file__, 2651, 39), '==', outh_160188, int_160189)
        
        # Applying the binary operator 'or' (line 2651)
        result_or_keyword_160191 = python_operator(stypy.reporting.localization.Localization(__file__, 2651, 26), 'or', result_eq_160187, result_eq_160190)
        
        # Applying the binary operator 'and' (line 2651)
        result_and_keyword_160192 = python_operator(stypy.reporting.localization.Localization(__file__, 2651, 15), 'and', DEBUG_160184, result_or_keyword_160191)
        
        # Testing the type of an if condition (line 2651)
        if_condition_160193 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2651, 12), result_and_keyword_160192)
        # Assigning a type to the variable 'if_condition_160193' (line 2651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2651, 12), 'if_condition_160193', if_condition_160193)
        # SSA begins for if statement (line 2651)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2652)
        # Processing the call arguments (line 2652)
        unicode_160195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2652, 33), 'unicode', u'Transforming to a singular bounding box.')
        # Processing the call keyword arguments (line 2652)
        kwargs_160196 = {}
        # Getting the type of 'ValueError' (line 2652)
        ValueError_160194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2652, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2652)
        ValueError_call_result_160197 = invoke(stypy.reporting.localization.Localization(__file__, 2652, 22), ValueError_160194, *[unicode_160195], **kwargs_160196)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2652, 16), ValueError_call_result_160197, 'raise parameter', BaseException)
        # SSA join for if statement (line 2651)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 2653):
        
        # Assigning a Call to a Attribute (line 2653):
        
        # Call to array(...): (line 2653)
        # Processing the call arguments (line 2653)
        
        # Obtaining an instance of the builtin type 'list' (line 2653)
        list_160200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2653, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2653)
        # Adding element type (line 2653)
        
        # Obtaining an instance of the builtin type 'list' (line 2653)
        list_160201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2653, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2653)
        # Adding element type (line 2653)
        # Getting the type of 'outw' (line 2653)
        outw_160202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 35), 'outw', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2653, 34), list_160201, outw_160202)
        # Adding element type (line 2653)
        float_160203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2653, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2653, 34), list_160201, float_160203)
        # Adding element type (line 2653)
        # Getting the type of 'outl' (line 2653)
        outl_160204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 47), 'outl', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2653, 34), list_160201, outl_160204)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2653, 33), list_160200, list_160201)
        # Adding element type (line 2653)
        
        # Obtaining an instance of the builtin type 'list' (line 2654)
        list_160205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2654, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2654)
        # Adding element type (line 2654)
        float_160206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2654, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2654, 34), list_160205, float_160206)
        # Adding element type (line 2654)
        # Getting the type of 'outh' (line 2654)
        outh_160207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 41), 'outh', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2654, 34), list_160205, outh_160207)
        # Adding element type (line 2654)
        # Getting the type of 'outb' (line 2654)
        outb_160208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 47), 'outb', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2654, 34), list_160205, outb_160208)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2653, 33), list_160200, list_160205)
        # Adding element type (line 2653)
        
        # Obtaining an instance of the builtin type 'list' (line 2655)
        list_160209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2655, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2655)
        # Adding element type (line 2655)
        float_160210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2655, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2655, 34), list_160209, float_160210)
        # Adding element type (line 2655)
        float_160211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2655, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2655, 34), list_160209, float_160211)
        # Adding element type (line 2655)
        float_160212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2655, 48), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2655, 34), list_160209, float_160212)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2653, 33), list_160200, list_160209)
        
        # Getting the type of 'float' (line 2656)
        float_160213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2656, 34), 'float', False)
        # Processing the call keyword arguments (line 2653)
        kwargs_160214 = {}
        # Getting the type of 'np' (line 2653)
        np_160198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 24), 'np', False)
        # Obtaining the member 'array' of a type (line 2653)
        array_160199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2653, 24), np_160198, 'array')
        # Calling array(args, kwargs) (line 2653)
        array_call_result_160215 = invoke(stypy.reporting.localization.Localization(__file__, 2653, 24), array_160199, *[list_160200, float_160213], **kwargs_160214)
        
        # Getting the type of 'self' (line 2653)
        self_160216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 12), 'self')
        # Setting the type of the member '_mtx' of a type (line 2653)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2653, 12), self_160216, '_mtx', array_call_result_160215)
        
        # Assigning a Name to a Attribute (line 2657):
        
        # Assigning a Name to a Attribute (line 2657):
        # Getting the type of 'None' (line 2657)
        None_160217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 29), 'None')
        # Getting the type of 'self' (line 2657)
        self_160218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 12), 'self')
        # Setting the type of the member '_inverted' of a type (line 2657)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2657, 12), self_160218, '_inverted', None_160217)
        
        # Assigning a Num to a Attribute (line 2658):
        
        # Assigning a Num to a Attribute (line 2658):
        int_160219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2658, 28), 'int')
        # Getting the type of 'self' (line 2658)
        self_160220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 2658)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 12), self_160220, '_invalid', int_160219)
        # SSA join for if statement (line 2649)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 2659)
        self_160221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2659, 15), 'self')
        # Obtaining the member '_mtx' of a type (line 2659)
        _mtx_160222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2659, 15), self_160221, '_mtx')
        # Assigning a type to the variable 'stypy_return_type' (line 2659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2659, 8), 'stypy_return_type', _mtx_160222)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 2648)
        stypy_return_type_160223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160223)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_160223

    
    # Assigning a Attribute to a Attribute (line 2660):

# Assigning a type to the variable 'BboxTransformTo' (line 2623)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2623, 0), 'BboxTransformTo', BboxTransformTo)

# Assigning a Name to a Name (line 2629):
# Getting the type of 'True' (line 2629)
True_160224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 19), 'True')
# Getting the type of 'BboxTransformTo'
BboxTransformTo_160225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxTransformTo')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxTransformTo_160225, 'is_separable', True_160224)

# Assigning a Attribute to a Attribute (line 2660):
# Getting the type of 'Affine2DBase' (line 2660)
Affine2DBase_160226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 25), 'Affine2DBase')
# Obtaining the member 'get_matrix' of a type (line 2660)
get_matrix_160227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2660, 25), Affine2DBase_160226, 'get_matrix')
# Obtaining the member '__doc__' of a type (line 2660)
doc___160228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2660, 25), get_matrix_160227, '__doc__')
# Getting the type of 'BboxTransformTo'
BboxTransformTo_160229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxTransformTo')
# Obtaining the member 'get_matrix' of a type
get_matrix_160230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxTransformTo_160229, 'get_matrix')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_matrix_160230, '__doc__', doc___160228)
# Declaration of the 'BboxTransformToMaxOnly' class
# Getting the type of 'BboxTransformTo' (line 2663)
BboxTransformTo_160231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 29), 'BboxTransformTo')

class BboxTransformToMaxOnly(BboxTransformTo_160231, ):
    unicode_160232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2668, (-1)), 'unicode', u'\n    :class:`BboxTransformTo` is a transformation that linearly\n    transforms points from the unit bounding box to a given\n    :class:`Bbox` with a fixed upper left of (0, 0).\n    ')

    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 2669, 4, False)
        # Assigning a type to the variable 'self' (line 2670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2670, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'BboxTransformToMaxOnly.stypy__repr__')
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxTransformToMaxOnly.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransformToMaxOnly.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_160233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2670, 15), 'unicode', u'BboxTransformToMaxOnly(%r)')
        # Getting the type of 'self' (line 2670)
        self_160234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 47), 'self')
        # Obtaining the member '_boxout' of a type (line 2670)
        _boxout_160235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2670, 47), self_160234, '_boxout')
        # Applying the binary operator '%' (line 2670)
        result_mod_160236 = python_operator(stypy.reporting.localization.Localization(__file__, 2670, 15), '%', unicode_160233, _boxout_160235)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2670, 8), 'stypy_return_type', result_mod_160236)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 2669)
        stypy_return_type_160237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160237)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_160237


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 2672, 4, False)
        # Assigning a type to the variable 'self' (line 2673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2673, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_function_name', 'BboxTransformToMaxOnly.get_matrix')
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxTransformToMaxOnly.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransformToMaxOnly.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        
        # Getting the type of 'self' (line 2673)
        self_160238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 2673)
        _invalid_160239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2673, 11), self_160238, '_invalid')
        # Testing the type of an if condition (line 2673)
        if_condition_160240 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2673, 8), _invalid_160239)
        # Assigning a type to the variable 'if_condition_160240' (line 2673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2673, 8), 'if_condition_160240', if_condition_160240)
        # SSA begins for if statement (line 2673)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 2674):
        
        # Assigning a Subscript to a Name (line 2674):
        
        # Obtaining the type of the subscript
        int_160241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2674, 12), 'int')
        # Getting the type of 'self' (line 2674)
        self_160242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 25), 'self')
        # Obtaining the member '_boxout' of a type (line 2674)
        _boxout_160243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 25), self_160242, '_boxout')
        # Obtaining the member 'max' of a type (line 2674)
        max_160244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 25), _boxout_160243, 'max')
        # Obtaining the member '__getitem__' of a type (line 2674)
        getitem___160245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 12), max_160244, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2674)
        subscript_call_result_160246 = invoke(stypy.reporting.localization.Localization(__file__, 2674, 12), getitem___160245, int_160241)
        
        # Assigning a type to the variable 'tuple_var_assignment_154317' (line 2674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2674, 12), 'tuple_var_assignment_154317', subscript_call_result_160246)
        
        # Assigning a Subscript to a Name (line 2674):
        
        # Obtaining the type of the subscript
        int_160247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2674, 12), 'int')
        # Getting the type of 'self' (line 2674)
        self_160248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 25), 'self')
        # Obtaining the member '_boxout' of a type (line 2674)
        _boxout_160249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 25), self_160248, '_boxout')
        # Obtaining the member 'max' of a type (line 2674)
        max_160250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 25), _boxout_160249, 'max')
        # Obtaining the member '__getitem__' of a type (line 2674)
        getitem___160251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 12), max_160250, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2674)
        subscript_call_result_160252 = invoke(stypy.reporting.localization.Localization(__file__, 2674, 12), getitem___160251, int_160247)
        
        # Assigning a type to the variable 'tuple_var_assignment_154318' (line 2674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2674, 12), 'tuple_var_assignment_154318', subscript_call_result_160252)
        
        # Assigning a Name to a Name (line 2674):
        # Getting the type of 'tuple_var_assignment_154317' (line 2674)
        tuple_var_assignment_154317_160253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 12), 'tuple_var_assignment_154317')
        # Assigning a type to the variable 'xmax' (line 2674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2674, 12), 'xmax', tuple_var_assignment_154317_160253)
        
        # Assigning a Name to a Name (line 2674):
        # Getting the type of 'tuple_var_assignment_154318' (line 2674)
        tuple_var_assignment_154318_160254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 12), 'tuple_var_assignment_154318')
        # Assigning a type to the variable 'ymax' (line 2674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2674, 18), 'ymax', tuple_var_assignment_154318_160254)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'DEBUG' (line 2675)
        DEBUG_160255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 15), 'DEBUG')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xmax' (line 2675)
        xmax_160256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 26), 'xmax')
        int_160257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2675, 34), 'int')
        # Applying the binary operator '==' (line 2675)
        result_eq_160258 = python_operator(stypy.reporting.localization.Localization(__file__, 2675, 26), '==', xmax_160256, int_160257)
        
        
        # Getting the type of 'ymax' (line 2675)
        ymax_160259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 39), 'ymax')
        int_160260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2675, 47), 'int')
        # Applying the binary operator '==' (line 2675)
        result_eq_160261 = python_operator(stypy.reporting.localization.Localization(__file__, 2675, 39), '==', ymax_160259, int_160260)
        
        # Applying the binary operator 'or' (line 2675)
        result_or_keyword_160262 = python_operator(stypy.reporting.localization.Localization(__file__, 2675, 26), 'or', result_eq_160258, result_eq_160261)
        
        # Applying the binary operator 'and' (line 2675)
        result_and_keyword_160263 = python_operator(stypy.reporting.localization.Localization(__file__, 2675, 15), 'and', DEBUG_160255, result_or_keyword_160262)
        
        # Testing the type of an if condition (line 2675)
        if_condition_160264 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2675, 12), result_and_keyword_160263)
        # Assigning a type to the variable 'if_condition_160264' (line 2675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2675, 12), 'if_condition_160264', if_condition_160264)
        # SSA begins for if statement (line 2675)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2676)
        # Processing the call arguments (line 2676)
        unicode_160266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2676, 33), 'unicode', u'Transforming to a singular bounding box.')
        # Processing the call keyword arguments (line 2676)
        kwargs_160267 = {}
        # Getting the type of 'ValueError' (line 2676)
        ValueError_160265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2676, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2676)
        ValueError_call_result_160268 = invoke(stypy.reporting.localization.Localization(__file__, 2676, 22), ValueError_160265, *[unicode_160266], **kwargs_160267)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2676, 16), ValueError_call_result_160268, 'raise parameter', BaseException)
        # SSA join for if statement (line 2675)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 2677):
        
        # Assigning a Call to a Attribute (line 2677):
        
        # Call to array(...): (line 2677)
        # Processing the call arguments (line 2677)
        
        # Obtaining an instance of the builtin type 'list' (line 2677)
        list_160271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2677, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2677)
        # Adding element type (line 2677)
        
        # Obtaining an instance of the builtin type 'list' (line 2677)
        list_160272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2677, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2677)
        # Adding element type (line 2677)
        # Getting the type of 'xmax' (line 2677)
        xmax_160273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 35), 'xmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2677, 34), list_160272, xmax_160273)
        # Adding element type (line 2677)
        float_160274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2677, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2677, 34), list_160272, float_160274)
        # Adding element type (line 2677)
        float_160275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2677, 47), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2677, 34), list_160272, float_160275)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2677, 33), list_160271, list_160272)
        # Adding element type (line 2677)
        
        # Obtaining an instance of the builtin type 'list' (line 2678)
        list_160276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2678, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2678)
        # Adding element type (line 2678)
        float_160277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2678, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2678, 34), list_160276, float_160277)
        # Adding element type (line 2678)
        # Getting the type of 'ymax' (line 2678)
        ymax_160278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 41), 'ymax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2678, 34), list_160276, ymax_160278)
        # Adding element type (line 2678)
        float_160279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2678, 47), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2678, 34), list_160276, float_160279)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2677, 33), list_160271, list_160276)
        # Adding element type (line 2677)
        
        # Obtaining an instance of the builtin type 'list' (line 2679)
        list_160280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2679, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2679)
        # Adding element type (line 2679)
        float_160281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2679, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2679, 34), list_160280, float_160281)
        # Adding element type (line 2679)
        float_160282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2679, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2679, 34), list_160280, float_160282)
        # Adding element type (line 2679)
        float_160283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2679, 47), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2679, 34), list_160280, float_160283)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2677, 33), list_160271, list_160280)
        
        # Getting the type of 'float' (line 2680)
        float_160284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2680, 33), 'float', False)
        # Processing the call keyword arguments (line 2677)
        kwargs_160285 = {}
        # Getting the type of 'np' (line 2677)
        np_160269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 24), 'np', False)
        # Obtaining the member 'array' of a type (line 2677)
        array_160270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2677, 24), np_160269, 'array')
        # Calling array(args, kwargs) (line 2677)
        array_call_result_160286 = invoke(stypy.reporting.localization.Localization(__file__, 2677, 24), array_160270, *[list_160271, float_160284], **kwargs_160285)
        
        # Getting the type of 'self' (line 2677)
        self_160287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 12), 'self')
        # Setting the type of the member '_mtx' of a type (line 2677)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2677, 12), self_160287, '_mtx', array_call_result_160286)
        
        # Assigning a Name to a Attribute (line 2681):
        
        # Assigning a Name to a Attribute (line 2681):
        # Getting the type of 'None' (line 2681)
        None_160288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 29), 'None')
        # Getting the type of 'self' (line 2681)
        self_160289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 12), 'self')
        # Setting the type of the member '_inverted' of a type (line 2681)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2681, 12), self_160289, '_inverted', None_160288)
        
        # Assigning a Num to a Attribute (line 2682):
        
        # Assigning a Num to a Attribute (line 2682):
        int_160290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2682, 28), 'int')
        # Getting the type of 'self' (line 2682)
        self_160291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 2682)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2682, 12), self_160291, '_invalid', int_160290)
        # SSA join for if statement (line 2673)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 2683)
        self_160292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 15), 'self')
        # Obtaining the member '_mtx' of a type (line 2683)
        _mtx_160293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2683, 15), self_160292, '_mtx')
        # Assigning a type to the variable 'stypy_return_type' (line 2683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2683, 8), 'stypy_return_type', _mtx_160293)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 2672)
        stypy_return_type_160294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2672, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160294)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_160294

    
    # Assigning a Attribute to a Attribute (line 2684):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2663, 0, False)
        # Assigning a type to the variable 'self' (line 2664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2664, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransformToMaxOnly.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'BboxTransformToMaxOnly' (line 2663)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2663, 0), 'BboxTransformToMaxOnly', BboxTransformToMaxOnly)

# Assigning a Attribute to a Attribute (line 2684):
# Getting the type of 'Affine2DBase' (line 2684)
Affine2DBase_160295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 25), 'Affine2DBase')
# Obtaining the member 'get_matrix' of a type (line 2684)
get_matrix_160296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2684, 25), Affine2DBase_160295, 'get_matrix')
# Obtaining the member '__doc__' of a type (line 2684)
doc___160297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2684, 25), get_matrix_160296, '__doc__')
# Getting the type of 'BboxTransformToMaxOnly'
BboxTransformToMaxOnly_160298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxTransformToMaxOnly')
# Obtaining the member 'get_matrix' of a type
get_matrix_160299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxTransformToMaxOnly_160298, 'get_matrix')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_matrix_160299, '__doc__', doc___160297)
# Declaration of the 'BboxTransformFrom' class
# Getting the type of 'Affine2DBase' (line 2687)
Affine2DBase_160300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 24), 'Affine2DBase')

class BboxTransformFrom(Affine2DBase_160300, ):
    unicode_160301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2691, (-1)), 'unicode', u'\n    :class:`BboxTransformFrom` linearly transforms points from a given\n    :class:`Bbox` to the unit bounding box.\n    ')
    
    # Assigning a Name to a Name (line 2692):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2694, 4, False)
        # Assigning a type to the variable 'self' (line 2695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2695, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransformFrom.__init__', ['boxin'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['boxin'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'boxin' (line 2695)
        boxin_160302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2695, 15), 'boxin')
        # Obtaining the member 'is_bbox' of a type (line 2695)
        is_bbox_160303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2695, 15), boxin_160302, 'is_bbox')
        # Applying the 'not' unary operator (line 2695)
        result_not__160304 = python_operator(stypy.reporting.localization.Localization(__file__, 2695, 11), 'not', is_bbox_160303)
        
        # Testing the type of an if condition (line 2695)
        if_condition_160305 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2695, 8), result_not__160304)
        # Assigning a type to the variable 'if_condition_160305' (line 2695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2695, 8), 'if_condition_160305', if_condition_160305)
        # SSA begins for if statement (line 2695)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2696)
        # Processing the call arguments (line 2696)
        unicode_160307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2696, 29), 'unicode', u"'boxin' must be bbox")
        # Processing the call keyword arguments (line 2696)
        kwargs_160308 = {}
        # Getting the type of 'ValueError' (line 2696)
        ValueError_160306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2696)
        ValueError_call_result_160309 = invoke(stypy.reporting.localization.Localization(__file__, 2696, 18), ValueError_160306, *[unicode_160307], **kwargs_160308)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2696, 12), ValueError_call_result_160309, 'raise parameter', BaseException)
        # SSA join for if statement (line 2695)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 2698)
        # Processing the call arguments (line 2698)
        # Getting the type of 'self' (line 2698)
        self_160312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 30), 'self', False)
        # Processing the call keyword arguments (line 2698)
        # Getting the type of 'kwargs' (line 2698)
        kwargs_160313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 38), 'kwargs', False)
        kwargs_160314 = {'kwargs_160313': kwargs_160313}
        # Getting the type of 'Affine2DBase' (line 2698)
        Affine2DBase_160310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 8), 'Affine2DBase', False)
        # Obtaining the member '__init__' of a type (line 2698)
        init___160311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 8), Affine2DBase_160310, '__init__')
        # Calling __init__(args, kwargs) (line 2698)
        init___call_result_160315 = invoke(stypy.reporting.localization.Localization(__file__, 2698, 8), init___160311, *[self_160312], **kwargs_160314)
        
        
        # Assigning a Name to a Attribute (line 2699):
        
        # Assigning a Name to a Attribute (line 2699):
        # Getting the type of 'boxin' (line 2699)
        boxin_160316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2699, 22), 'boxin')
        # Getting the type of 'self' (line 2699)
        self_160317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2699, 8), 'self')
        # Setting the type of the member '_boxin' of a type (line 2699)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2699, 8), self_160317, '_boxin', boxin_160316)
        
        # Call to set_children(...): (line 2700)
        # Processing the call arguments (line 2700)
        # Getting the type of 'boxin' (line 2700)
        boxin_160320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 26), 'boxin', False)
        # Processing the call keyword arguments (line 2700)
        kwargs_160321 = {}
        # Getting the type of 'self' (line 2700)
        self_160318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 2700)
        set_children_160319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2700, 8), self_160318, 'set_children')
        # Calling set_children(args, kwargs) (line 2700)
        set_children_call_result_160322 = invoke(stypy.reporting.localization.Localization(__file__, 2700, 8), set_children_160319, *[boxin_160320], **kwargs_160321)
        
        
        # Assigning a Name to a Attribute (line 2701):
        
        # Assigning a Name to a Attribute (line 2701):
        # Getting the type of 'None' (line 2701)
        None_160323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 20), 'None')
        # Getting the type of 'self' (line 2701)
        self_160324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 2701)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2701, 8), self_160324, '_mtx', None_160323)
        
        # Assigning a Name to a Attribute (line 2702):
        
        # Assigning a Name to a Attribute (line 2702):
        # Getting the type of 'None' (line 2702)
        None_160325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 25), 'None')
        # Getting the type of 'self' (line 2702)
        self_160326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 8), 'self')
        # Setting the type of the member '_inverted' of a type (line 2702)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2702, 8), self_160326, '_inverted', None_160325)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 2704, 4, False)
        # Assigning a type to the variable 'self' (line 2705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2705, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'BboxTransformFrom.stypy__repr__')
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxTransformFrom.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransformFrom.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_160327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2705, 15), 'unicode', u'BboxTransformFrom(%r)')
        # Getting the type of 'self' (line 2705)
        self_160328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 42), 'self')
        # Obtaining the member '_boxin' of a type (line 2705)
        _boxin_160329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2705, 42), self_160328, '_boxin')
        # Applying the binary operator '%' (line 2705)
        result_mod_160330 = python_operator(stypy.reporting.localization.Localization(__file__, 2705, 15), '%', unicode_160327, _boxin_160329)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2705, 8), 'stypy_return_type', result_mod_160330)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 2704)
        stypy_return_type_160331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160331)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_160331


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 2707, 4, False)
        # Assigning a type to the variable 'self' (line 2708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2708, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_function_name', 'BboxTransformFrom.get_matrix')
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxTransformFrom.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxTransformFrom.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        
        # Getting the type of 'self' (line 2708)
        self_160332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 2708)
        _invalid_160333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2708, 11), self_160332, '_invalid')
        # Testing the type of an if condition (line 2708)
        if_condition_160334 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2708, 8), _invalid_160333)
        # Assigning a type to the variable 'if_condition_160334' (line 2708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2708, 8), 'if_condition_160334', if_condition_160334)
        # SSA begins for if statement (line 2708)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 2709):
        
        # Assigning a Subscript to a Name (line 2709):
        
        # Obtaining the type of the subscript
        int_160335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2709, 12), 'int')
        # Getting the type of 'self' (line 2709)
        self_160336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 33), 'self')
        # Obtaining the member '_boxin' of a type (line 2709)
        _boxin_160337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 33), self_160336, '_boxin')
        # Obtaining the member 'bounds' of a type (line 2709)
        bounds_160338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 33), _boxin_160337, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2709)
        getitem___160339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 12), bounds_160338, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2709)
        subscript_call_result_160340 = invoke(stypy.reporting.localization.Localization(__file__, 2709, 12), getitem___160339, int_160335)
        
        # Assigning a type to the variable 'tuple_var_assignment_154319' (line 2709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'tuple_var_assignment_154319', subscript_call_result_160340)
        
        # Assigning a Subscript to a Name (line 2709):
        
        # Obtaining the type of the subscript
        int_160341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2709, 12), 'int')
        # Getting the type of 'self' (line 2709)
        self_160342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 33), 'self')
        # Obtaining the member '_boxin' of a type (line 2709)
        _boxin_160343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 33), self_160342, '_boxin')
        # Obtaining the member 'bounds' of a type (line 2709)
        bounds_160344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 33), _boxin_160343, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2709)
        getitem___160345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 12), bounds_160344, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2709)
        subscript_call_result_160346 = invoke(stypy.reporting.localization.Localization(__file__, 2709, 12), getitem___160345, int_160341)
        
        # Assigning a type to the variable 'tuple_var_assignment_154320' (line 2709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'tuple_var_assignment_154320', subscript_call_result_160346)
        
        # Assigning a Subscript to a Name (line 2709):
        
        # Obtaining the type of the subscript
        int_160347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2709, 12), 'int')
        # Getting the type of 'self' (line 2709)
        self_160348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 33), 'self')
        # Obtaining the member '_boxin' of a type (line 2709)
        _boxin_160349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 33), self_160348, '_boxin')
        # Obtaining the member 'bounds' of a type (line 2709)
        bounds_160350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 33), _boxin_160349, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2709)
        getitem___160351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 12), bounds_160350, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2709)
        subscript_call_result_160352 = invoke(stypy.reporting.localization.Localization(__file__, 2709, 12), getitem___160351, int_160347)
        
        # Assigning a type to the variable 'tuple_var_assignment_154321' (line 2709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'tuple_var_assignment_154321', subscript_call_result_160352)
        
        # Assigning a Subscript to a Name (line 2709):
        
        # Obtaining the type of the subscript
        int_160353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2709, 12), 'int')
        # Getting the type of 'self' (line 2709)
        self_160354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 33), 'self')
        # Obtaining the member '_boxin' of a type (line 2709)
        _boxin_160355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 33), self_160354, '_boxin')
        # Obtaining the member 'bounds' of a type (line 2709)
        bounds_160356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 33), _boxin_160355, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 2709)
        getitem___160357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 12), bounds_160356, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2709)
        subscript_call_result_160358 = invoke(stypy.reporting.localization.Localization(__file__, 2709, 12), getitem___160357, int_160353)
        
        # Assigning a type to the variable 'tuple_var_assignment_154322' (line 2709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'tuple_var_assignment_154322', subscript_call_result_160358)
        
        # Assigning a Name to a Name (line 2709):
        # Getting the type of 'tuple_var_assignment_154319' (line 2709)
        tuple_var_assignment_154319_160359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'tuple_var_assignment_154319')
        # Assigning a type to the variable 'inl' (line 2709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'inl', tuple_var_assignment_154319_160359)
        
        # Assigning a Name to a Name (line 2709):
        # Getting the type of 'tuple_var_assignment_154320' (line 2709)
        tuple_var_assignment_154320_160360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'tuple_var_assignment_154320')
        # Assigning a type to the variable 'inb' (line 2709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2709, 17), 'inb', tuple_var_assignment_154320_160360)
        
        # Assigning a Name to a Name (line 2709):
        # Getting the type of 'tuple_var_assignment_154321' (line 2709)
        tuple_var_assignment_154321_160361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'tuple_var_assignment_154321')
        # Assigning a type to the variable 'inw' (line 2709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2709, 22), 'inw', tuple_var_assignment_154321_160361)
        
        # Assigning a Name to a Name (line 2709):
        # Getting the type of 'tuple_var_assignment_154322' (line 2709)
        tuple_var_assignment_154322_160362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'tuple_var_assignment_154322')
        # Assigning a type to the variable 'inh' (line 2709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2709, 27), 'inh', tuple_var_assignment_154322_160362)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'DEBUG' (line 2710)
        DEBUG_160363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 15), 'DEBUG')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'inw' (line 2710)
        inw_160364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 26), 'inw')
        int_160365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2710, 33), 'int')
        # Applying the binary operator '==' (line 2710)
        result_eq_160366 = python_operator(stypy.reporting.localization.Localization(__file__, 2710, 26), '==', inw_160364, int_160365)
        
        
        # Getting the type of 'inh' (line 2710)
        inh_160367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 38), 'inh')
        int_160368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2710, 45), 'int')
        # Applying the binary operator '==' (line 2710)
        result_eq_160369 = python_operator(stypy.reporting.localization.Localization(__file__, 2710, 38), '==', inh_160367, int_160368)
        
        # Applying the binary operator 'or' (line 2710)
        result_or_keyword_160370 = python_operator(stypy.reporting.localization.Localization(__file__, 2710, 26), 'or', result_eq_160366, result_eq_160369)
        
        # Applying the binary operator 'and' (line 2710)
        result_and_keyword_160371 = python_operator(stypy.reporting.localization.Localization(__file__, 2710, 15), 'and', DEBUG_160363, result_or_keyword_160370)
        
        # Testing the type of an if condition (line 2710)
        if_condition_160372 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2710, 12), result_and_keyword_160371)
        # Assigning a type to the variable 'if_condition_160372' (line 2710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2710, 12), 'if_condition_160372', if_condition_160372)
        # SSA begins for if statement (line 2710)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2711)
        # Processing the call arguments (line 2711)
        unicode_160374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2711, 33), 'unicode', u'Transforming from a singular bounding box.')
        # Processing the call keyword arguments (line 2711)
        kwargs_160375 = {}
        # Getting the type of 'ValueError' (line 2711)
        ValueError_160373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2711, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2711)
        ValueError_call_result_160376 = invoke(stypy.reporting.localization.Localization(__file__, 2711, 22), ValueError_160373, *[unicode_160374], **kwargs_160375)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2711, 16), ValueError_call_result_160376, 'raise parameter', BaseException)
        # SSA join for if statement (line 2710)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 2712):
        
        # Assigning a BinOp to a Name (line 2712):
        float_160377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2712, 22), 'float')
        # Getting the type of 'inw' (line 2712)
        inw_160378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2712, 28), 'inw')
        # Applying the binary operator 'div' (line 2712)
        result_div_160379 = python_operator(stypy.reporting.localization.Localization(__file__, 2712, 22), 'div', float_160377, inw_160378)
        
        # Assigning a type to the variable 'x_scale' (line 2712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2712, 12), 'x_scale', result_div_160379)
        
        # Assigning a BinOp to a Name (line 2713):
        
        # Assigning a BinOp to a Name (line 2713):
        float_160380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2713, 22), 'float')
        # Getting the type of 'inh' (line 2713)
        inh_160381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2713, 28), 'inh')
        # Applying the binary operator 'div' (line 2713)
        result_div_160382 = python_operator(stypy.reporting.localization.Localization(__file__, 2713, 22), 'div', float_160380, inh_160381)
        
        # Assigning a type to the variable 'y_scale' (line 2713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2713, 12), 'y_scale', result_div_160382)
        
        # Assigning a Call to a Attribute (line 2714):
        
        # Assigning a Call to a Attribute (line 2714):
        
        # Call to array(...): (line 2714)
        # Processing the call arguments (line 2714)
        
        # Obtaining an instance of the builtin type 'list' (line 2714)
        list_160385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2714, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2714)
        # Adding element type (line 2714)
        
        # Obtaining an instance of the builtin type 'list' (line 2714)
        list_160386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2714, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2714)
        # Adding element type (line 2714)
        # Getting the type of 'x_scale' (line 2714)
        x_scale_160387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 35), 'x_scale', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2714, 34), list_160386, x_scale_160387)
        # Adding element type (line 2714)
        float_160388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2714, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2714, 34), list_160386, float_160388)
        # Adding element type (line 2714)
        
        # Getting the type of 'inl' (line 2714)
        inl_160389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 55), 'inl', False)
        # Applying the 'usub' unary operator (line 2714)
        result___neg___160390 = python_operator(stypy.reporting.localization.Localization(__file__, 2714, 54), 'usub', inl_160389)
        
        # Getting the type of 'x_scale' (line 2714)
        x_scale_160391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 59), 'x_scale', False)
        # Applying the binary operator '*' (line 2714)
        result_mul_160392 = python_operator(stypy.reporting.localization.Localization(__file__, 2714, 54), '*', result___neg___160390, x_scale_160391)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2714, 34), list_160386, result_mul_160392)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2714, 33), list_160385, list_160386)
        # Adding element type (line 2714)
        
        # Obtaining an instance of the builtin type 'list' (line 2715)
        list_160393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2715, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2715)
        # Adding element type (line 2715)
        float_160394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2715, 35), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2715, 34), list_160393, float_160394)
        # Adding element type (line 2715)
        # Getting the type of 'y_scale' (line 2715)
        y_scale_160395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 44), 'y_scale', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2715, 34), list_160393, y_scale_160395)
        # Adding element type (line 2715)
        
        # Getting the type of 'inb' (line 2715)
        inb_160396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 55), 'inb', False)
        # Applying the 'usub' unary operator (line 2715)
        result___neg___160397 = python_operator(stypy.reporting.localization.Localization(__file__, 2715, 54), 'usub', inb_160396)
        
        # Getting the type of 'y_scale' (line 2715)
        y_scale_160398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 59), 'y_scale', False)
        # Applying the binary operator '*' (line 2715)
        result_mul_160399 = python_operator(stypy.reporting.localization.Localization(__file__, 2715, 54), '*', result___neg___160397, y_scale_160398)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2715, 34), list_160393, result_mul_160399)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2714, 33), list_160385, list_160393)
        # Adding element type (line 2714)
        
        # Obtaining an instance of the builtin type 'list' (line 2716)
        list_160400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2716, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2716)
        # Adding element type (line 2716)
        float_160401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2716, 35), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2716, 34), list_160400, float_160401)
        # Adding element type (line 2716)
        float_160402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2716, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2716, 34), list_160400, float_160402)
        # Adding element type (line 2716)
        float_160403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2716, 53), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2716, 34), list_160400, float_160403)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2714, 33), list_160385, list_160400)
        
        # Getting the type of 'float' (line 2717)
        float_160404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 33), 'float', False)
        # Processing the call keyword arguments (line 2714)
        kwargs_160405 = {}
        # Getting the type of 'np' (line 2714)
        np_160383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 24), 'np', False)
        # Obtaining the member 'array' of a type (line 2714)
        array_160384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2714, 24), np_160383, 'array')
        # Calling array(args, kwargs) (line 2714)
        array_call_result_160406 = invoke(stypy.reporting.localization.Localization(__file__, 2714, 24), array_160384, *[list_160385, float_160404], **kwargs_160405)
        
        # Getting the type of 'self' (line 2714)
        self_160407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 12), 'self')
        # Setting the type of the member '_mtx' of a type (line 2714)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2714, 12), self_160407, '_mtx', array_call_result_160406)
        
        # Assigning a Name to a Attribute (line 2718):
        
        # Assigning a Name to a Attribute (line 2718):
        # Getting the type of 'None' (line 2718)
        None_160408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 29), 'None')
        # Getting the type of 'self' (line 2718)
        self_160409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 12), 'self')
        # Setting the type of the member '_inverted' of a type (line 2718)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2718, 12), self_160409, '_inverted', None_160408)
        
        # Assigning a Num to a Attribute (line 2719):
        
        # Assigning a Num to a Attribute (line 2719):
        int_160410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2719, 28), 'int')
        # Getting the type of 'self' (line 2719)
        self_160411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 2719)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2719, 12), self_160411, '_invalid', int_160410)
        # SSA join for if statement (line 2708)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 2720)
        self_160412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 15), 'self')
        # Obtaining the member '_mtx' of a type (line 2720)
        _mtx_160413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2720, 15), self_160412, '_mtx')
        # Assigning a type to the variable 'stypy_return_type' (line 2720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2720, 8), 'stypy_return_type', _mtx_160413)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 2707)
        stypy_return_type_160414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2707, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160414)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_160414

    
    # Assigning a Attribute to a Attribute (line 2721):

# Assigning a type to the variable 'BboxTransformFrom' (line 2687)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2687, 0), 'BboxTransformFrom', BboxTransformFrom)

# Assigning a Name to a Name (line 2692):
# Getting the type of 'True' (line 2692)
True_160415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 19), 'True')
# Getting the type of 'BboxTransformFrom'
BboxTransformFrom_160416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxTransformFrom')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxTransformFrom_160416, 'is_separable', True_160415)

# Assigning a Attribute to a Attribute (line 2721):
# Getting the type of 'Affine2DBase' (line 2721)
Affine2DBase_160417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2721, 25), 'Affine2DBase')
# Obtaining the member 'get_matrix' of a type (line 2721)
get_matrix_160418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2721, 25), Affine2DBase_160417, 'get_matrix')
# Obtaining the member '__doc__' of a type (line 2721)
doc___160419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2721, 25), get_matrix_160418, '__doc__')
# Getting the type of 'BboxTransformFrom'
BboxTransformFrom_160420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BboxTransformFrom')
# Obtaining the member 'get_matrix' of a type
get_matrix_160421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BboxTransformFrom_160420, 'get_matrix')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_matrix_160421, '__doc__', doc___160419)
# Declaration of the 'ScaledTranslation' class
# Getting the type of 'Affine2DBase' (line 2724)
Affine2DBase_160422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 24), 'Affine2DBase')

class ScaledTranslation(Affine2DBase_160422, ):
    unicode_160423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2728, (-1)), 'unicode', u'\n    A transformation that translates by *xt* and *yt*, after *xt* and *yt*\n    have been transformad by the given transform *scale_trans*.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2729, 4, False)
        # Assigning a type to the variable 'self' (line 2730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2730, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScaledTranslation.__init__', ['xt', 'yt', 'scale_trans'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xt', 'yt', 'scale_trans'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 2730)
        # Processing the call arguments (line 2730)
        # Getting the type of 'self' (line 2730)
        self_160426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2730, 30), 'self', False)
        # Processing the call keyword arguments (line 2730)
        # Getting the type of 'kwargs' (line 2730)
        kwargs_160427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2730, 38), 'kwargs', False)
        kwargs_160428 = {'kwargs_160427': kwargs_160427}
        # Getting the type of 'Affine2DBase' (line 2730)
        Affine2DBase_160424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2730, 8), 'Affine2DBase', False)
        # Obtaining the member '__init__' of a type (line 2730)
        init___160425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2730, 8), Affine2DBase_160424, '__init__')
        # Calling __init__(args, kwargs) (line 2730)
        init___call_result_160429 = invoke(stypy.reporting.localization.Localization(__file__, 2730, 8), init___160425, *[self_160426], **kwargs_160428)
        
        
        # Assigning a Tuple to a Attribute (line 2731):
        
        # Assigning a Tuple to a Attribute (line 2731):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2731)
        tuple_160430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2731, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2731)
        # Adding element type (line 2731)
        # Getting the type of 'xt' (line 2731)
        xt_160431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 19), 'xt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2731, 19), tuple_160430, xt_160431)
        # Adding element type (line 2731)
        # Getting the type of 'yt' (line 2731)
        yt_160432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 23), 'yt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2731, 19), tuple_160430, yt_160432)
        
        # Getting the type of 'self' (line 2731)
        self_160433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 8), 'self')
        # Setting the type of the member '_t' of a type (line 2731)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2731, 8), self_160433, '_t', tuple_160430)
        
        # Assigning a Name to a Attribute (line 2732):
        
        # Assigning a Name to a Attribute (line 2732):
        # Getting the type of 'scale_trans' (line 2732)
        scale_trans_160434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2732, 28), 'scale_trans')
        # Getting the type of 'self' (line 2732)
        self_160435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2732, 8), 'self')
        # Setting the type of the member '_scale_trans' of a type (line 2732)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2732, 8), self_160435, '_scale_trans', scale_trans_160434)
        
        # Call to set_children(...): (line 2733)
        # Processing the call arguments (line 2733)
        # Getting the type of 'scale_trans' (line 2733)
        scale_trans_160438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 26), 'scale_trans', False)
        # Processing the call keyword arguments (line 2733)
        kwargs_160439 = {}
        # Getting the type of 'self' (line 2733)
        self_160436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 2733)
        set_children_160437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2733, 8), self_160436, 'set_children')
        # Calling set_children(args, kwargs) (line 2733)
        set_children_call_result_160440 = invoke(stypy.reporting.localization.Localization(__file__, 2733, 8), set_children_160437, *[scale_trans_160438], **kwargs_160439)
        
        
        # Assigning a Name to a Attribute (line 2734):
        
        # Assigning a Name to a Attribute (line 2734):
        # Getting the type of 'None' (line 2734)
        None_160441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 20), 'None')
        # Getting the type of 'self' (line 2734)
        self_160442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 2734)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2734, 8), self_160442, '_mtx', None_160441)
        
        # Assigning a Name to a Attribute (line 2735):
        
        # Assigning a Name to a Attribute (line 2735):
        # Getting the type of 'None' (line 2735)
        None_160443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 25), 'None')
        # Getting the type of 'self' (line 2735)
        self_160444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 8), 'self')
        # Setting the type of the member '_inverted' of a type (line 2735)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2735, 8), self_160444, '_inverted', None_160443)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 2737, 4, False)
        # Assigning a type to the variable 'self' (line 2738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2738, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'ScaledTranslation.stypy__repr__')
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScaledTranslation.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScaledTranslation.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_160445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2738, 15), 'unicode', u'ScaledTranslation(%r)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2738)
        tuple_160446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2738, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2738)
        # Adding element type (line 2738)
        # Getting the type of 'self' (line 2738)
        self_160447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 42), 'self')
        # Obtaining the member '_t' of a type (line 2738)
        _t_160448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2738, 42), self_160447, '_t')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2738, 42), tuple_160446, _t_160448)
        
        # Applying the binary operator '%' (line 2738)
        result_mod_160449 = python_operator(stypy.reporting.localization.Localization(__file__, 2738, 15), '%', unicode_160445, tuple_160446)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2738, 8), 'stypy_return_type', result_mod_160449)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 2737)
        stypy_return_type_160450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160450)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_160450


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 2740, 4, False)
        # Assigning a type to the variable 'self' (line 2741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_function_name', 'ScaledTranslation.get_matrix')
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScaledTranslation.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScaledTranslation.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        
        # Getting the type of 'self' (line 2741)
        self_160451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 2741)
        _invalid_160452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 11), self_160451, '_invalid')
        # Testing the type of an if condition (line 2741)
        if_condition_160453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2741, 8), _invalid_160452)
        # Assigning a type to the variable 'if_condition_160453' (line 2741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 8), 'if_condition_160453', if_condition_160453)
        # SSA begins for if statement (line 2741)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 2742):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 2742)
        # Processing the call arguments (line 2742)
        # Getting the type of 'self' (line 2742)
        self_160457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 55), 'self', False)
        # Obtaining the member '_t' of a type (line 2742)
        _t_160458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 55), self_160457, '_t')
        # Processing the call keyword arguments (line 2742)
        kwargs_160459 = {}
        # Getting the type of 'self' (line 2742)
        self_160454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 21), 'self', False)
        # Obtaining the member '_scale_trans' of a type (line 2742)
        _scale_trans_160455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 21), self_160454, '_scale_trans')
        # Obtaining the member 'transform_point' of a type (line 2742)
        transform_point_160456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 21), _scale_trans_160455, 'transform_point')
        # Calling transform_point(args, kwargs) (line 2742)
        transform_point_call_result_160460 = invoke(stypy.reporting.localization.Localization(__file__, 2742, 21), transform_point_160456, *[_t_160458], **kwargs_160459)
        
        # Assigning a type to the variable 'call_assignment_154323' (line 2742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2742, 12), 'call_assignment_154323', transform_point_call_result_160460)
        
        # Assigning a Call to a Name (line 2742):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_160463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2742, 12), 'int')
        # Processing the call keyword arguments
        kwargs_160464 = {}
        # Getting the type of 'call_assignment_154323' (line 2742)
        call_assignment_154323_160461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 12), 'call_assignment_154323', False)
        # Obtaining the member '__getitem__' of a type (line 2742)
        getitem___160462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 12), call_assignment_154323_160461, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_160465 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___160462, *[int_160463], **kwargs_160464)
        
        # Assigning a type to the variable 'call_assignment_154324' (line 2742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2742, 12), 'call_assignment_154324', getitem___call_result_160465)
        
        # Assigning a Name to a Name (line 2742):
        # Getting the type of 'call_assignment_154324' (line 2742)
        call_assignment_154324_160466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 12), 'call_assignment_154324')
        # Assigning a type to the variable 'xt' (line 2742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2742, 12), 'xt', call_assignment_154324_160466)
        
        # Assigning a Call to a Name (line 2742):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_160469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2742, 12), 'int')
        # Processing the call keyword arguments
        kwargs_160470 = {}
        # Getting the type of 'call_assignment_154323' (line 2742)
        call_assignment_154323_160467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 12), 'call_assignment_154323', False)
        # Obtaining the member '__getitem__' of a type (line 2742)
        getitem___160468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 12), call_assignment_154323_160467, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_160471 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___160468, *[int_160469], **kwargs_160470)
        
        # Assigning a type to the variable 'call_assignment_154325' (line 2742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2742, 12), 'call_assignment_154325', getitem___call_result_160471)
        
        # Assigning a Name to a Name (line 2742):
        # Getting the type of 'call_assignment_154325' (line 2742)
        call_assignment_154325_160472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 12), 'call_assignment_154325')
        # Assigning a type to the variable 'yt' (line 2742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2742, 16), 'yt', call_assignment_154325_160472)
        
        # Assigning a Call to a Attribute (line 2743):
        
        # Assigning a Call to a Attribute (line 2743):
        
        # Call to array(...): (line 2743)
        # Processing the call arguments (line 2743)
        
        # Obtaining an instance of the builtin type 'list' (line 2743)
        list_160475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2743, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2743)
        # Adding element type (line 2743)
        
        # Obtaining an instance of the builtin type 'list' (line 2743)
        list_160476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2743, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2743)
        # Adding element type (line 2743)
        float_160477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2743, 35), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2743, 34), list_160476, float_160477)
        # Adding element type (line 2743)
        float_160478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2743, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2743, 34), list_160476, float_160478)
        # Adding element type (line 2743)
        # Getting the type of 'xt' (line 2743)
        xt_160479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 45), 'xt', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2743, 34), list_160476, xt_160479)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2743, 33), list_160475, list_160476)
        # Adding element type (line 2743)
        
        # Obtaining an instance of the builtin type 'list' (line 2744)
        list_160480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2744, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2744)
        # Adding element type (line 2744)
        float_160481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2744, 35), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2744, 34), list_160480, float_160481)
        # Adding element type (line 2744)
        float_160482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2744, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2744, 34), list_160480, float_160482)
        # Adding element type (line 2744)
        # Getting the type of 'yt' (line 2744)
        yt_160483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 45), 'yt', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2744, 34), list_160480, yt_160483)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2743, 33), list_160475, list_160480)
        # Adding element type (line 2743)
        
        # Obtaining an instance of the builtin type 'list' (line 2745)
        list_160484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2745, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2745)
        # Adding element type (line 2745)
        float_160485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2745, 35), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2745, 34), list_160484, float_160485)
        # Adding element type (line 2745)
        float_160486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2745, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2745, 34), list_160484, float_160486)
        # Adding element type (line 2745)
        float_160487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2745, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2745, 34), list_160484, float_160487)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2743, 33), list_160475, list_160484)
        
        # Getting the type of 'float' (line 2746)
        float_160488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 33), 'float', False)
        # Processing the call keyword arguments (line 2743)
        kwargs_160489 = {}
        # Getting the type of 'np' (line 2743)
        np_160473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 24), 'np', False)
        # Obtaining the member 'array' of a type (line 2743)
        array_160474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2743, 24), np_160473, 'array')
        # Calling array(args, kwargs) (line 2743)
        array_call_result_160490 = invoke(stypy.reporting.localization.Localization(__file__, 2743, 24), array_160474, *[list_160475, float_160488], **kwargs_160489)
        
        # Getting the type of 'self' (line 2743)
        self_160491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 12), 'self')
        # Setting the type of the member '_mtx' of a type (line 2743)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2743, 12), self_160491, '_mtx', array_call_result_160490)
        
        # Assigning a Num to a Attribute (line 2747):
        
        # Assigning a Num to a Attribute (line 2747):
        int_160492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2747, 28), 'int')
        # Getting the type of 'self' (line 2747)
        self_160493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 2747)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2747, 12), self_160493, '_invalid', int_160492)
        
        # Assigning a Name to a Attribute (line 2748):
        
        # Assigning a Name to a Attribute (line 2748):
        # Getting the type of 'None' (line 2748)
        None_160494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 29), 'None')
        # Getting the type of 'self' (line 2748)
        self_160495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 12), 'self')
        # Setting the type of the member '_inverted' of a type (line 2748)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2748, 12), self_160495, '_inverted', None_160494)
        # SSA join for if statement (line 2741)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 2749)
        self_160496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 15), 'self')
        # Obtaining the member '_mtx' of a type (line 2749)
        _mtx_160497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 15), self_160496, '_mtx')
        # Assigning a type to the variable 'stypy_return_type' (line 2749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'stypy_return_type', _mtx_160497)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 2740)
        stypy_return_type_160498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160498)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_160498

    
    # Assigning a Attribute to a Attribute (line 2750):

# Assigning a type to the variable 'ScaledTranslation' (line 2724)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2724, 0), 'ScaledTranslation', ScaledTranslation)

# Assigning a Attribute to a Attribute (line 2750):
# Getting the type of 'Affine2DBase' (line 2750)
Affine2DBase_160499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 25), 'Affine2DBase')
# Obtaining the member 'get_matrix' of a type (line 2750)
get_matrix_160500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 25), Affine2DBase_160499, 'get_matrix')
# Obtaining the member '__doc__' of a type (line 2750)
doc___160501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 25), get_matrix_160500, '__doc__')
# Getting the type of 'ScaledTranslation'
ScaledTranslation_160502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ScaledTranslation')
# Obtaining the member 'get_matrix' of a type
get_matrix_160503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ScaledTranslation_160502, 'get_matrix')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_matrix_160503, '__doc__', doc___160501)
# Declaration of the 'TransformedPath' class
# Getting the type of 'TransformNode' (line 2753)
TransformNode_160504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 22), 'TransformNode')

class TransformedPath(TransformNode_160504, ):
    unicode_160505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2765, (-1)), 'unicode', u"\n    A :class:`TransformedPath` caches a non-affine transformed copy of\n    the :class:`~matplotlib.path.Path`.  This cached copy is\n    automatically updated when the non-affine part of the transform\n    changes.\n\n    .. note::\n\n        Paths are considered immutable by this class. Any update to the\n        path's vertices/codes will not trigger a transform recomputation.\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2766, 4, False)
        # Assigning a type to the variable 'self' (line 2767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2767, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedPath.__init__', ['path', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['path', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_160506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2770, (-1)), 'unicode', u'\n        Create a new :class:`TransformedPath` from the given\n        :class:`~matplotlib.path.Path` and :class:`Transform`.\n        ')
        
        
        
        # Call to isinstance(...): (line 2771)
        # Processing the call arguments (line 2771)
        # Getting the type of 'transform' (line 2771)
        transform_160508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 26), 'transform', False)
        # Getting the type of 'Transform' (line 2771)
        Transform_160509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 37), 'Transform', False)
        # Processing the call keyword arguments (line 2771)
        kwargs_160510 = {}
        # Getting the type of 'isinstance' (line 2771)
        isinstance_160507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2771)
        isinstance_call_result_160511 = invoke(stypy.reporting.localization.Localization(__file__, 2771, 15), isinstance_160507, *[transform_160508, Transform_160509], **kwargs_160510)
        
        # Applying the 'not' unary operator (line 2771)
        result_not__160512 = python_operator(stypy.reporting.localization.Localization(__file__, 2771, 11), 'not', isinstance_call_result_160511)
        
        # Testing the type of an if condition (line 2771)
        if_condition_160513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2771, 8), result_not__160512)
        # Assigning a type to the variable 'if_condition_160513' (line 2771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2771, 8), 'if_condition_160513', if_condition_160513)
        # SSA begins for if statement (line 2771)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 2772):
        
        # Assigning a Str to a Name (line 2772):
        unicode_160514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2772, 19), 'unicode', u"'transform' must be an instance of 'matplotlib.transform.Transform'")
        # Assigning a type to the variable 'msg' (line 2772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2772, 12), 'msg', unicode_160514)
        
        # Call to ValueError(...): (line 2774)
        # Processing the call arguments (line 2774)
        # Getting the type of 'msg' (line 2774)
        msg_160516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2774, 29), 'msg', False)
        # Processing the call keyword arguments (line 2774)
        kwargs_160517 = {}
        # Getting the type of 'ValueError' (line 2774)
        ValueError_160515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2774, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2774)
        ValueError_call_result_160518 = invoke(stypy.reporting.localization.Localization(__file__, 2774, 18), ValueError_160515, *[msg_160516], **kwargs_160517)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2774, 12), ValueError_call_result_160518, 'raise parameter', BaseException)
        # SSA join for if statement (line 2771)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 2775)
        # Processing the call arguments (line 2775)
        # Getting the type of 'self' (line 2775)
        self_160521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 31), 'self', False)
        # Processing the call keyword arguments (line 2775)
        kwargs_160522 = {}
        # Getting the type of 'TransformNode' (line 2775)
        TransformNode_160519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 8), 'TransformNode', False)
        # Obtaining the member '__init__' of a type (line 2775)
        init___160520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2775, 8), TransformNode_160519, '__init__')
        # Calling __init__(args, kwargs) (line 2775)
        init___call_result_160523 = invoke(stypy.reporting.localization.Localization(__file__, 2775, 8), init___160520, *[self_160521], **kwargs_160522)
        
        
        # Assigning a Name to a Attribute (line 2777):
        
        # Assigning a Name to a Attribute (line 2777):
        # Getting the type of 'path' (line 2777)
        path_160524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 21), 'path')
        # Getting the type of 'self' (line 2777)
        self_160525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 8), 'self')
        # Setting the type of the member '_path' of a type (line 2777)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2777, 8), self_160525, '_path', path_160524)
        
        # Assigning a Name to a Attribute (line 2778):
        
        # Assigning a Name to a Attribute (line 2778):
        # Getting the type of 'transform' (line 2778)
        transform_160526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 26), 'transform')
        # Getting the type of 'self' (line 2778)
        self_160527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 8), 'self')
        # Setting the type of the member '_transform' of a type (line 2778)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2778, 8), self_160527, '_transform', transform_160526)
        
        # Call to set_children(...): (line 2779)
        # Processing the call arguments (line 2779)
        # Getting the type of 'transform' (line 2779)
        transform_160530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 26), 'transform', False)
        # Processing the call keyword arguments (line 2779)
        kwargs_160531 = {}
        # Getting the type of 'self' (line 2779)
        self_160528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 2779)
        set_children_160529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2779, 8), self_160528, 'set_children')
        # Calling set_children(args, kwargs) (line 2779)
        set_children_call_result_160532 = invoke(stypy.reporting.localization.Localization(__file__, 2779, 8), set_children_160529, *[transform_160530], **kwargs_160531)
        
        
        # Assigning a Name to a Attribute (line 2780):
        
        # Assigning a Name to a Attribute (line 2780):
        # Getting the type of 'None' (line 2780)
        None_160533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 33), 'None')
        # Getting the type of 'self' (line 2780)
        self_160534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 8), 'self')
        # Setting the type of the member '_transformed_path' of a type (line 2780)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 8), self_160534, '_transformed_path', None_160533)
        
        # Assigning a Name to a Attribute (line 2781):
        
        # Assigning a Name to a Attribute (line 2781):
        # Getting the type of 'None' (line 2781)
        None_160535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 35), 'None')
        # Getting the type of 'self' (line 2781)
        self_160536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 8), 'self')
        # Setting the type of the member '_transformed_points' of a type (line 2781)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2781, 8), self_160536, '_transformed_points', None_160535)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _revalidate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_revalidate'
        module_type_store = module_type_store.open_function_context('_revalidate', 2783, 4, False)
        # Assigning a type to the variable 'self' (line 2784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformedPath._revalidate.__dict__.__setitem__('stypy_localization', localization)
        TransformedPath._revalidate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformedPath._revalidate.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformedPath._revalidate.__dict__.__setitem__('stypy_function_name', 'TransformedPath._revalidate')
        TransformedPath._revalidate.__dict__.__setitem__('stypy_param_names_list', [])
        TransformedPath._revalidate.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformedPath._revalidate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformedPath._revalidate.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformedPath._revalidate.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformedPath._revalidate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformedPath._revalidate.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedPath._revalidate', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_revalidate', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_revalidate(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2785)
        self_160537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 13), 'self')
        # Obtaining the member '_invalid' of a type (line 2785)
        _invalid_160538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2785, 13), self_160537, '_invalid')
        # Getting the type of 'self' (line 2785)
        self_160539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 29), 'self')
        # Obtaining the member 'INVALID_NON_AFFINE' of a type (line 2785)
        INVALID_NON_AFFINE_160540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2785, 29), self_160539, 'INVALID_NON_AFFINE')
        # Applying the binary operator '&' (line 2785)
        result_and__160541 = python_operator(stypy.reporting.localization.Localization(__file__, 2785, 13), '&', _invalid_160538, INVALID_NON_AFFINE_160540)
        
        # Getting the type of 'self' (line 2785)
        self_160542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 56), 'self')
        # Obtaining the member 'INVALID_NON_AFFINE' of a type (line 2785)
        INVALID_NON_AFFINE_160543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2785, 56), self_160542, 'INVALID_NON_AFFINE')
        # Applying the binary operator '==' (line 2785)
        result_eq_160544 = python_operator(stypy.reporting.localization.Localization(__file__, 2785, 13), '==', result_and__160541, INVALID_NON_AFFINE_160543)
        
        
        # Getting the type of 'self' (line 2786)
        self_160545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 15), 'self')
        # Obtaining the member '_transformed_path' of a type (line 2786)
        _transformed_path_160546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2786, 15), self_160545, '_transformed_path')
        # Getting the type of 'None' (line 2786)
        None_160547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 41), 'None')
        # Applying the binary operator 'is' (line 2786)
        result_is__160548 = python_operator(stypy.reporting.localization.Localization(__file__, 2786, 15), 'is', _transformed_path_160546, None_160547)
        
        # Applying the binary operator 'or' (line 2785)
        result_or_keyword_160549 = python_operator(stypy.reporting.localization.Localization(__file__, 2785, 12), 'or', result_eq_160544, result_is__160548)
        
        # Testing the type of an if condition (line 2785)
        if_condition_160550 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2785, 8), result_or_keyword_160549)
        # Assigning a type to the variable 'if_condition_160550' (line 2785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2785, 8), 'if_condition_160550', if_condition_160550)
        # SSA begins for if statement (line 2785)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2787):
        
        # Assigning a Call to a Attribute (line 2787):
        
        # Call to transform_path_non_affine(...): (line 2788)
        # Processing the call arguments (line 2788)
        # Getting the type of 'self' (line 2788)
        self_160554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 58), 'self', False)
        # Obtaining the member '_path' of a type (line 2788)
        _path_160555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2788, 58), self_160554, '_path')
        # Processing the call keyword arguments (line 2788)
        kwargs_160556 = {}
        # Getting the type of 'self' (line 2788)
        self_160551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 16), 'self', False)
        # Obtaining the member '_transform' of a type (line 2788)
        _transform_160552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2788, 16), self_160551, '_transform')
        # Obtaining the member 'transform_path_non_affine' of a type (line 2788)
        transform_path_non_affine_160553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2788, 16), _transform_160552, 'transform_path_non_affine')
        # Calling transform_path_non_affine(args, kwargs) (line 2788)
        transform_path_non_affine_call_result_160557 = invoke(stypy.reporting.localization.Localization(__file__, 2788, 16), transform_path_non_affine_160553, *[_path_160555], **kwargs_160556)
        
        # Getting the type of 'self' (line 2787)
        self_160558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 12), 'self')
        # Setting the type of the member '_transformed_path' of a type (line 2787)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 12), self_160558, '_transformed_path', transform_path_non_affine_call_result_160557)
        
        # Assigning a Call to a Attribute (line 2789):
        
        # Assigning a Call to a Attribute (line 2789):
        
        # Call to _fast_from_codes_and_verts(...): (line 2790)
        # Processing the call arguments (line 2790)
        
        # Call to transform_non_affine(...): (line 2791)
        # Processing the call arguments (line 2791)
        # Getting the type of 'self' (line 2791)
        self_160564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 57), 'self', False)
        # Obtaining the member '_path' of a type (line 2791)
        _path_160565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2791, 57), self_160564, '_path')
        # Obtaining the member 'vertices' of a type (line 2791)
        vertices_160566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2791, 57), _path_160565, 'vertices')
        # Processing the call keyword arguments (line 2791)
        kwargs_160567 = {}
        # Getting the type of 'self' (line 2791)
        self_160561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 20), 'self', False)
        # Obtaining the member '_transform' of a type (line 2791)
        _transform_160562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2791, 20), self_160561, '_transform')
        # Obtaining the member 'transform_non_affine' of a type (line 2791)
        transform_non_affine_160563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2791, 20), _transform_160562, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 2791)
        transform_non_affine_call_result_160568 = invoke(stypy.reporting.localization.Localization(__file__, 2791, 20), transform_non_affine_160563, *[vertices_160566], **kwargs_160567)
        
        # Getting the type of 'None' (line 2792)
        None_160569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 20), 'None', False)
        
        # Obtaining an instance of the builtin type 'dict' (line 2793)
        dict_160570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2793, 20), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2793)
        # Adding element type (key, value) (line 2793)
        unicode_160571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2793, 21), 'unicode', u'interpolation_steps')
        # Getting the type of 'self' (line 2793)
        self_160572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 44), 'self', False)
        # Obtaining the member '_path' of a type (line 2793)
        _path_160573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2793, 44), self_160572, '_path')
        # Obtaining the member '_interpolation_steps' of a type (line 2793)
        _interpolation_steps_160574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2793, 44), _path_160573, '_interpolation_steps')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2793, 20), dict_160570, (unicode_160571, _interpolation_steps_160574))
        # Adding element type (key, value) (line 2793)
        unicode_160575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2794, 21), 'unicode', u'should_simplify')
        # Getting the type of 'self' (line 2794)
        self_160576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 40), 'self', False)
        # Obtaining the member '_path' of a type (line 2794)
        _path_160577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2794, 40), self_160576, '_path')
        # Obtaining the member 'should_simplify' of a type (line 2794)
        should_simplify_160578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2794, 40), _path_160577, 'should_simplify')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2793, 20), dict_160570, (unicode_160575, should_simplify_160578))
        
        # Processing the call keyword arguments (line 2790)
        kwargs_160579 = {}
        # Getting the type of 'Path' (line 2790)
        Path_160559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 16), 'Path', False)
        # Obtaining the member '_fast_from_codes_and_verts' of a type (line 2790)
        _fast_from_codes_and_verts_160560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 16), Path_160559, '_fast_from_codes_and_verts')
        # Calling _fast_from_codes_and_verts(args, kwargs) (line 2790)
        _fast_from_codes_and_verts_call_result_160580 = invoke(stypy.reporting.localization.Localization(__file__, 2790, 16), _fast_from_codes_and_verts_160560, *[transform_non_affine_call_result_160568, None_160569, dict_160570], **kwargs_160579)
        
        # Getting the type of 'self' (line 2789)
        self_160581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 12), 'self')
        # Setting the type of the member '_transformed_points' of a type (line 2789)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 12), self_160581, '_transformed_points', _fast_from_codes_and_verts_call_result_160580)
        # SSA join for if statement (line 2785)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Attribute (line 2795):
        
        # Assigning a Num to a Attribute (line 2795):
        int_160582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2795, 24), 'int')
        # Getting the type of 'self' (line 2795)
        self_160583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 8), 'self')
        # Setting the type of the member '_invalid' of a type (line 2795)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2795, 8), self_160583, '_invalid', int_160582)
        
        # ################# End of '_revalidate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_revalidate' in the type store
        # Getting the type of 'stypy_return_type' (line 2783)
        stypy_return_type_160584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2783, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160584)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_revalidate'
        return stypy_return_type_160584


    @norecursion
    def get_transformed_points_and_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_transformed_points_and_affine'
        module_type_store = module_type_store.open_function_context('get_transformed_points_and_affine', 2797, 4, False)
        # Assigning a type to the variable 'self' (line 2798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2798, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_localization', localization)
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_function_name', 'TransformedPath.get_transformed_points_and_affine')
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_param_names_list', [])
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformedPath.get_transformed_points_and_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedPath.get_transformed_points_and_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_transformed_points_and_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_transformed_points_and_affine(...)' code ##################

        unicode_160585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2804, (-1)), 'unicode', u'\n        Return a copy of the child path, with the non-affine part of\n        the transform already applied, along with the affine part of\n        the path necessary to complete the transformation.  Unlike\n        :meth:`get_transformed_path_and_affine`, no interpolation will\n        be performed.\n        ')
        
        # Call to _revalidate(...): (line 2805)
        # Processing the call keyword arguments (line 2805)
        kwargs_160588 = {}
        # Getting the type of 'self' (line 2805)
        self_160586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2805, 8), 'self', False)
        # Obtaining the member '_revalidate' of a type (line 2805)
        _revalidate_160587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2805, 8), self_160586, '_revalidate')
        # Calling _revalidate(args, kwargs) (line 2805)
        _revalidate_call_result_160589 = invoke(stypy.reporting.localization.Localization(__file__, 2805, 8), _revalidate_160587, *[], **kwargs_160588)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2806)
        tuple_160590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2806, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2806)
        # Adding element type (line 2806)
        # Getting the type of 'self' (line 2806)
        self_160591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 15), 'self')
        # Obtaining the member '_transformed_points' of a type (line 2806)
        _transformed_points_160592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2806, 15), self_160591, '_transformed_points')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2806, 15), tuple_160590, _transformed_points_160592)
        # Adding element type (line 2806)
        
        # Call to get_affine(...): (line 2806)
        # Processing the call keyword arguments (line 2806)
        kwargs_160595 = {}
        # Getting the type of 'self' (line 2806)
        self_160593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 41), 'self', False)
        # Obtaining the member 'get_affine' of a type (line 2806)
        get_affine_160594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2806, 41), self_160593, 'get_affine')
        # Calling get_affine(args, kwargs) (line 2806)
        get_affine_call_result_160596 = invoke(stypy.reporting.localization.Localization(__file__, 2806, 41), get_affine_160594, *[], **kwargs_160595)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2806, 15), tuple_160590, get_affine_call_result_160596)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2806, 8), 'stypy_return_type', tuple_160590)
        
        # ################# End of 'get_transformed_points_and_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_transformed_points_and_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2797)
        stypy_return_type_160597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160597)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_transformed_points_and_affine'
        return stypy_return_type_160597


    @norecursion
    def get_transformed_path_and_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_transformed_path_and_affine'
        module_type_store = module_type_store.open_function_context('get_transformed_path_and_affine', 2808, 4, False)
        # Assigning a type to the variable 'self' (line 2809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2809, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_localization', localization)
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_function_name', 'TransformedPath.get_transformed_path_and_affine')
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_param_names_list', [])
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformedPath.get_transformed_path_and_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedPath.get_transformed_path_and_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_transformed_path_and_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_transformed_path_and_affine(...)' code ##################

        unicode_160598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2813, (-1)), 'unicode', u'\n        Return a copy of the child path, with the non-affine part of\n        the transform already applied, along with the affine part of\n        the path necessary to complete the transformation.\n        ')
        
        # Call to _revalidate(...): (line 2814)
        # Processing the call keyword arguments (line 2814)
        kwargs_160601 = {}
        # Getting the type of 'self' (line 2814)
        self_160599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2814, 8), 'self', False)
        # Obtaining the member '_revalidate' of a type (line 2814)
        _revalidate_160600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2814, 8), self_160599, '_revalidate')
        # Calling _revalidate(args, kwargs) (line 2814)
        _revalidate_call_result_160602 = invoke(stypy.reporting.localization.Localization(__file__, 2814, 8), _revalidate_160600, *[], **kwargs_160601)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2815)
        tuple_160603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2815, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2815)
        # Adding element type (line 2815)
        # Getting the type of 'self' (line 2815)
        self_160604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 15), 'self')
        # Obtaining the member '_transformed_path' of a type (line 2815)
        _transformed_path_160605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2815, 15), self_160604, '_transformed_path')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2815, 15), tuple_160603, _transformed_path_160605)
        # Adding element type (line 2815)
        
        # Call to get_affine(...): (line 2815)
        # Processing the call keyword arguments (line 2815)
        kwargs_160608 = {}
        # Getting the type of 'self' (line 2815)
        self_160606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 39), 'self', False)
        # Obtaining the member 'get_affine' of a type (line 2815)
        get_affine_160607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2815, 39), self_160606, 'get_affine')
        # Calling get_affine(args, kwargs) (line 2815)
        get_affine_call_result_160609 = invoke(stypy.reporting.localization.Localization(__file__, 2815, 39), get_affine_160607, *[], **kwargs_160608)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2815, 15), tuple_160603, get_affine_call_result_160609)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2815, 8), 'stypy_return_type', tuple_160603)
        
        # ################# End of 'get_transformed_path_and_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_transformed_path_and_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2808)
        stypy_return_type_160610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160610)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_transformed_path_and_affine'
        return stypy_return_type_160610


    @norecursion
    def get_fully_transformed_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fully_transformed_path'
        module_type_store = module_type_store.open_function_context('get_fully_transformed_path', 2817, 4, False)
        # Assigning a type to the variable 'self' (line 2818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2818, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_localization', localization)
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_function_name', 'TransformedPath.get_fully_transformed_path')
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_param_names_list', [])
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformedPath.get_fully_transformed_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedPath.get_fully_transformed_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fully_transformed_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fully_transformed_path(...)' code ##################

        unicode_160611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2820, (-1)), 'unicode', u'\n        Return a fully-transformed copy of the child path.\n        ')
        
        # Call to _revalidate(...): (line 2821)
        # Processing the call keyword arguments (line 2821)
        kwargs_160614 = {}
        # Getting the type of 'self' (line 2821)
        self_160612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 8), 'self', False)
        # Obtaining the member '_revalidate' of a type (line 2821)
        _revalidate_160613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2821, 8), self_160612, '_revalidate')
        # Calling _revalidate(args, kwargs) (line 2821)
        _revalidate_call_result_160615 = invoke(stypy.reporting.localization.Localization(__file__, 2821, 8), _revalidate_160613, *[], **kwargs_160614)
        
        
        # Call to transform_path_affine(...): (line 2822)
        # Processing the call arguments (line 2822)
        # Getting the type of 'self' (line 2822)
        self_160619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 53), 'self', False)
        # Obtaining the member '_transformed_path' of a type (line 2822)
        _transformed_path_160620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2822, 53), self_160619, '_transformed_path')
        # Processing the call keyword arguments (line 2822)
        kwargs_160621 = {}
        # Getting the type of 'self' (line 2822)
        self_160616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 15), 'self', False)
        # Obtaining the member '_transform' of a type (line 2822)
        _transform_160617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2822, 15), self_160616, '_transform')
        # Obtaining the member 'transform_path_affine' of a type (line 2822)
        transform_path_affine_160618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2822, 15), _transform_160617, 'transform_path_affine')
        # Calling transform_path_affine(args, kwargs) (line 2822)
        transform_path_affine_call_result_160622 = invoke(stypy.reporting.localization.Localization(__file__, 2822, 15), transform_path_affine_160618, *[_transformed_path_160620], **kwargs_160621)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2822, 8), 'stypy_return_type', transform_path_affine_call_result_160622)
        
        # ################# End of 'get_fully_transformed_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fully_transformed_path' in the type store
        # Getting the type of 'stypy_return_type' (line 2817)
        stypy_return_type_160623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2817, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160623)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fully_transformed_path'
        return stypy_return_type_160623


    @norecursion
    def get_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_affine'
        module_type_store = module_type_store.open_function_context('get_affine', 2824, 4, False)
        # Assigning a type to the variable 'self' (line 2825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2825, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformedPath.get_affine.__dict__.__setitem__('stypy_localization', localization)
        TransformedPath.get_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformedPath.get_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformedPath.get_affine.__dict__.__setitem__('stypy_function_name', 'TransformedPath.get_affine')
        TransformedPath.get_affine.__dict__.__setitem__('stypy_param_names_list', [])
        TransformedPath.get_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformedPath.get_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformedPath.get_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformedPath.get_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformedPath.get_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformedPath.get_affine.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedPath.get_affine', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_affine', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_affine(...)' code ##################

        
        # Call to get_affine(...): (line 2825)
        # Processing the call keyword arguments (line 2825)
        kwargs_160627 = {}
        # Getting the type of 'self' (line 2825)
        self_160624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 15), 'self', False)
        # Obtaining the member '_transform' of a type (line 2825)
        _transform_160625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2825, 15), self_160624, '_transform')
        # Obtaining the member 'get_affine' of a type (line 2825)
        get_affine_160626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2825, 15), _transform_160625, 'get_affine')
        # Calling get_affine(args, kwargs) (line 2825)
        get_affine_call_result_160628 = invoke(stypy.reporting.localization.Localization(__file__, 2825, 15), get_affine_160626, *[], **kwargs_160627)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2825, 8), 'stypy_return_type', get_affine_call_result_160628)
        
        # ################# End of 'get_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 2824)
        stypy_return_type_160629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160629)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_affine'
        return stypy_return_type_160629


# Assigning a type to the variable 'TransformedPath' (line 2753)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2753, 0), 'TransformedPath', TransformedPath)
# Declaration of the 'TransformedPatchPath' class
# Getting the type of 'TransformedPath' (line 2828)
TransformedPath_160630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2828, 27), 'TransformedPath')

class TransformedPatchPath(TransformedPath_160630, ):
    unicode_160631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2833, (-1)), 'unicode', u'\n    A :class:`TransformedPatchPath` caches a non-affine transformed copy of\n    the :class:`~matplotlib.path.Patch`. This cached copy is automatically\n    updated when the non-affine part of the transform or the patch changes.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2834, 4, False)
        # Assigning a type to the variable 'self' (line 2835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2835, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedPatchPath.__init__', ['patch'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['patch'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_160632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2838, (-1)), 'unicode', u'\n        Create a new :class:`TransformedPatchPath` from the given\n        :class:`~matplotlib.path.Patch`.\n        ')
        
        # Call to __init__(...): (line 2839)
        # Processing the call arguments (line 2839)
        # Getting the type of 'self' (line 2839)
        self_160635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 31), 'self', False)
        # Processing the call keyword arguments (line 2839)
        kwargs_160636 = {}
        # Getting the type of 'TransformNode' (line 2839)
        TransformNode_160633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 8), 'TransformNode', False)
        # Obtaining the member '__init__' of a type (line 2839)
        init___160634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2839, 8), TransformNode_160633, '__init__')
        # Calling __init__(args, kwargs) (line 2839)
        init___call_result_160637 = invoke(stypy.reporting.localization.Localization(__file__, 2839, 8), init___160634, *[self_160635], **kwargs_160636)
        
        
        # Assigning a Call to a Name (line 2841):
        
        # Assigning a Call to a Name (line 2841):
        
        # Call to get_transform(...): (line 2841)
        # Processing the call keyword arguments (line 2841)
        kwargs_160640 = {}
        # Getting the type of 'patch' (line 2841)
        patch_160638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 20), 'patch', False)
        # Obtaining the member 'get_transform' of a type (line 2841)
        get_transform_160639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2841, 20), patch_160638, 'get_transform')
        # Calling get_transform(args, kwargs) (line 2841)
        get_transform_call_result_160641 = invoke(stypy.reporting.localization.Localization(__file__, 2841, 20), get_transform_160639, *[], **kwargs_160640)
        
        # Assigning a type to the variable 'transform' (line 2841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2841, 8), 'transform', get_transform_call_result_160641)
        
        # Assigning a Name to a Attribute (line 2842):
        
        # Assigning a Name to a Attribute (line 2842):
        # Getting the type of 'patch' (line 2842)
        patch_160642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 22), 'patch')
        # Getting the type of 'self' (line 2842)
        self_160643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 8), 'self')
        # Setting the type of the member '_patch' of a type (line 2842)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 8), self_160643, '_patch', patch_160642)
        
        # Assigning a Name to a Attribute (line 2843):
        
        # Assigning a Name to a Attribute (line 2843):
        # Getting the type of 'transform' (line 2843)
        transform_160644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 26), 'transform')
        # Getting the type of 'self' (line 2843)
        self_160645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 8), 'self')
        # Setting the type of the member '_transform' of a type (line 2843)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2843, 8), self_160645, '_transform', transform_160644)
        
        # Call to set_children(...): (line 2844)
        # Processing the call arguments (line 2844)
        # Getting the type of 'transform' (line 2844)
        transform_160648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 26), 'transform', False)
        # Processing the call keyword arguments (line 2844)
        kwargs_160649 = {}
        # Getting the type of 'self' (line 2844)
        self_160646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 2844)
        set_children_160647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2844, 8), self_160646, 'set_children')
        # Calling set_children(args, kwargs) (line 2844)
        set_children_call_result_160650 = invoke(stypy.reporting.localization.Localization(__file__, 2844, 8), set_children_160647, *[transform_160648], **kwargs_160649)
        
        
        # Assigning a Call to a Attribute (line 2845):
        
        # Assigning a Call to a Attribute (line 2845):
        
        # Call to get_path(...): (line 2845)
        # Processing the call keyword arguments (line 2845)
        kwargs_160653 = {}
        # Getting the type of 'patch' (line 2845)
        patch_160651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 21), 'patch', False)
        # Obtaining the member 'get_path' of a type (line 2845)
        get_path_160652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2845, 21), patch_160651, 'get_path')
        # Calling get_path(args, kwargs) (line 2845)
        get_path_call_result_160654 = invoke(stypy.reporting.localization.Localization(__file__, 2845, 21), get_path_160652, *[], **kwargs_160653)
        
        # Getting the type of 'self' (line 2845)
        self_160655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 8), 'self')
        # Setting the type of the member '_path' of a type (line 2845)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2845, 8), self_160655, '_path', get_path_call_result_160654)
        
        # Assigning a Name to a Attribute (line 2846):
        
        # Assigning a Name to a Attribute (line 2846):
        # Getting the type of 'None' (line 2846)
        None_160656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 33), 'None')
        # Getting the type of 'self' (line 2846)
        self_160657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 8), 'self')
        # Setting the type of the member '_transformed_path' of a type (line 2846)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2846, 8), self_160657, '_transformed_path', None_160656)
        
        # Assigning a Name to a Attribute (line 2847):
        
        # Assigning a Name to a Attribute (line 2847):
        # Getting the type of 'None' (line 2847)
        None_160658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 35), 'None')
        # Getting the type of 'self' (line 2847)
        self_160659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 8), 'self')
        # Setting the type of the member '_transformed_points' of a type (line 2847)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2847, 8), self_160659, '_transformed_points', None_160658)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _revalidate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_revalidate'
        module_type_store = module_type_store.open_function_context('_revalidate', 2849, 4, False)
        # Assigning a type to the variable 'self' (line 2850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2850, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_localization', localization)
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_function_name', 'TransformedPatchPath._revalidate')
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_param_names_list', [])
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransformedPatchPath._revalidate.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransformedPatchPath._revalidate', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_revalidate', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_revalidate(...)' code ##################

        
        # Assigning a Call to a Name (line 2850):
        
        # Assigning a Call to a Name (line 2850):
        
        # Call to get_path(...): (line 2850)
        # Processing the call keyword arguments (line 2850)
        kwargs_160663 = {}
        # Getting the type of 'self' (line 2850)
        self_160660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 21), 'self', False)
        # Obtaining the member '_patch' of a type (line 2850)
        _patch_160661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2850, 21), self_160660, '_patch')
        # Obtaining the member 'get_path' of a type (line 2850)
        get_path_160662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2850, 21), _patch_160661, 'get_path')
        # Calling get_path(args, kwargs) (line 2850)
        get_path_call_result_160664 = invoke(stypy.reporting.localization.Localization(__file__, 2850, 21), get_path_160662, *[], **kwargs_160663)
        
        # Assigning a type to the variable 'patch_path' (line 2850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2850, 8), 'patch_path', get_path_call_result_160664)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2853)
        self_160665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 12), 'self')
        # Obtaining the member '_transformed_path' of a type (line 2853)
        _transformed_path_160666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2853, 12), self_160665, '_transformed_path')
        # Getting the type of 'None' (line 2853)
        None_160667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 38), 'None')
        # Applying the binary operator 'is' (line 2853)
        result_is__160668 = python_operator(stypy.reporting.localization.Localization(__file__, 2853, 12), 'is', _transformed_path_160666, None_160667)
        
        
        # Getting the type of 'self' (line 2853)
        self_160669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 46), 'self')
        # Obtaining the member '_path' of a type (line 2853)
        _path_160670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2853, 46), self_160669, '_path')
        # Getting the type of 'patch_path' (line 2853)
        patch_path_160671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 60), 'patch_path')
        # Applying the binary operator '!=' (line 2853)
        result_ne_160672 = python_operator(stypy.reporting.localization.Localization(__file__, 2853, 46), '!=', _path_160670, patch_path_160671)
        
        # Applying the binary operator 'or' (line 2853)
        result_or_keyword_160673 = python_operator(stypy.reporting.localization.Localization(__file__, 2853, 12), 'or', result_is__160668, result_ne_160672)
        
        # Getting the type of 'self' (line 2854)
        self_160674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 17), 'self')
        # Obtaining the member '_invalid' of a type (line 2854)
        _invalid_160675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2854, 17), self_160674, '_invalid')
        # Getting the type of 'self' (line 2854)
        self_160676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 33), 'self')
        # Obtaining the member 'INVALID_NON_AFFINE' of a type (line 2854)
        INVALID_NON_AFFINE_160677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2854, 33), self_160676, 'INVALID_NON_AFFINE')
        # Applying the binary operator '&' (line 2854)
        result_and__160678 = python_operator(stypy.reporting.localization.Localization(__file__, 2854, 17), '&', _invalid_160675, INVALID_NON_AFFINE_160677)
        
        # Getting the type of 'self' (line 2855)
        self_160679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 20), 'self')
        # Obtaining the member 'INVALID_NON_AFFINE' of a type (line 2855)
        INVALID_NON_AFFINE_160680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2855, 20), self_160679, 'INVALID_NON_AFFINE')
        # Applying the binary operator '==' (line 2854)
        result_eq_160681 = python_operator(stypy.reporting.localization.Localization(__file__, 2854, 17), '==', result_and__160678, INVALID_NON_AFFINE_160680)
        
        # Applying the binary operator 'or' (line 2853)
        result_or_keyword_160682 = python_operator(stypy.reporting.localization.Localization(__file__, 2853, 12), 'or', result_or_keyword_160673, result_eq_160681)
        
        # Testing the type of an if condition (line 2853)
        if_condition_160683 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2853, 8), result_or_keyword_160682)
        # Assigning a type to the variable 'if_condition_160683' (line 2853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2853, 8), 'if_condition_160683', if_condition_160683)
        # SSA begins for if statement (line 2853)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2856):
        
        # Assigning a Name to a Attribute (line 2856):
        # Getting the type of 'patch_path' (line 2856)
        patch_path_160684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 25), 'patch_path')
        # Getting the type of 'self' (line 2856)
        self_160685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 12), 'self')
        # Setting the type of the member '_path' of a type (line 2856)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2856, 12), self_160685, '_path', patch_path_160684)
        
        # Assigning a Call to a Attribute (line 2857):
        
        # Assigning a Call to a Attribute (line 2857):
        
        # Call to transform_path_non_affine(...): (line 2858)
        # Processing the call arguments (line 2858)
        # Getting the type of 'patch_path' (line 2858)
        patch_path_160689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2858, 58), 'patch_path', False)
        # Processing the call keyword arguments (line 2858)
        kwargs_160690 = {}
        # Getting the type of 'self' (line 2858)
        self_160686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2858, 16), 'self', False)
        # Obtaining the member '_transform' of a type (line 2858)
        _transform_160687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2858, 16), self_160686, '_transform')
        # Obtaining the member 'transform_path_non_affine' of a type (line 2858)
        transform_path_non_affine_160688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2858, 16), _transform_160687, 'transform_path_non_affine')
        # Calling transform_path_non_affine(args, kwargs) (line 2858)
        transform_path_non_affine_call_result_160691 = invoke(stypy.reporting.localization.Localization(__file__, 2858, 16), transform_path_non_affine_160688, *[patch_path_160689], **kwargs_160690)
        
        # Getting the type of 'self' (line 2857)
        self_160692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 12), 'self')
        # Setting the type of the member '_transformed_path' of a type (line 2857)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2857, 12), self_160692, '_transformed_path', transform_path_non_affine_call_result_160691)
        
        # Assigning a Call to a Attribute (line 2859):
        
        # Assigning a Call to a Attribute (line 2859):
        
        # Call to _fast_from_codes_and_verts(...): (line 2860)
        # Processing the call arguments (line 2860)
        
        # Call to transform_non_affine(...): (line 2861)
        # Processing the call arguments (line 2861)
        # Getting the type of 'patch_path' (line 2861)
        patch_path_160698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 57), 'patch_path', False)
        # Obtaining the member 'vertices' of a type (line 2861)
        vertices_160699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2861, 57), patch_path_160698, 'vertices')
        # Processing the call keyword arguments (line 2861)
        kwargs_160700 = {}
        # Getting the type of 'self' (line 2861)
        self_160695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 20), 'self', False)
        # Obtaining the member '_transform' of a type (line 2861)
        _transform_160696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2861, 20), self_160695, '_transform')
        # Obtaining the member 'transform_non_affine' of a type (line 2861)
        transform_non_affine_160697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2861, 20), _transform_160696, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 2861)
        transform_non_affine_call_result_160701 = invoke(stypy.reporting.localization.Localization(__file__, 2861, 20), transform_non_affine_160697, *[vertices_160699], **kwargs_160700)
        
        # Getting the type of 'None' (line 2862)
        None_160702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 20), 'None', False)
        
        # Obtaining an instance of the builtin type 'dict' (line 2863)
        dict_160703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2863, 20), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2863)
        # Adding element type (key, value) (line 2863)
        unicode_160704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2863, 21), 'unicode', u'interpolation_steps')
        # Getting the type of 'patch_path' (line 2863)
        patch_path_160705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2863, 44), 'patch_path', False)
        # Obtaining the member '_interpolation_steps' of a type (line 2863)
        _interpolation_steps_160706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2863, 44), patch_path_160705, '_interpolation_steps')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2863, 20), dict_160703, (unicode_160704, _interpolation_steps_160706))
        # Adding element type (key, value) (line 2863)
        unicode_160707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2864, 21), 'unicode', u'should_simplify')
        # Getting the type of 'patch_path' (line 2864)
        patch_path_160708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2864, 40), 'patch_path', False)
        # Obtaining the member 'should_simplify' of a type (line 2864)
        should_simplify_160709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2864, 40), patch_path_160708, 'should_simplify')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2863, 20), dict_160703, (unicode_160707, should_simplify_160709))
        
        # Processing the call keyword arguments (line 2860)
        kwargs_160710 = {}
        # Getting the type of 'Path' (line 2860)
        Path_160693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 16), 'Path', False)
        # Obtaining the member '_fast_from_codes_and_verts' of a type (line 2860)
        _fast_from_codes_and_verts_160694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2860, 16), Path_160693, '_fast_from_codes_and_verts')
        # Calling _fast_from_codes_and_verts(args, kwargs) (line 2860)
        _fast_from_codes_and_verts_call_result_160711 = invoke(stypy.reporting.localization.Localization(__file__, 2860, 16), _fast_from_codes_and_verts_160694, *[transform_non_affine_call_result_160701, None_160702, dict_160703], **kwargs_160710)
        
        # Getting the type of 'self' (line 2859)
        self_160712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2859, 12), 'self')
        # Setting the type of the member '_transformed_points' of a type (line 2859)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2859, 12), self_160712, '_transformed_points', _fast_from_codes_and_verts_call_result_160711)
        # SSA join for if statement (line 2853)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Attribute (line 2865):
        
        # Assigning a Num to a Attribute (line 2865):
        int_160713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2865, 24), 'int')
        # Getting the type of 'self' (line 2865)
        self_160714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2865, 8), 'self')
        # Setting the type of the member '_invalid' of a type (line 2865)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2865, 8), self_160714, '_invalid', int_160713)
        
        # ################# End of '_revalidate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_revalidate' in the type store
        # Getting the type of 'stypy_return_type' (line 2849)
        stypy_return_type_160715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160715)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_revalidate'
        return stypy_return_type_160715


# Assigning a type to the variable 'TransformedPatchPath' (line 2828)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2828, 0), 'TransformedPatchPath', TransformedPatchPath)

@norecursion
def nonsingular(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_160716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2868, 37), 'float')
    float_160717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2868, 49), 'float')
    # Getting the type of 'True' (line 2868)
    True_160718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 67), 'True')
    defaults = [float_160716, float_160717, True_160718]
    # Create a new context for function 'nonsingular'
    module_type_store = module_type_store.open_function_context('nonsingular', 2868, 0, False)
    
    # Passed parameters checking function
    nonsingular.stypy_localization = localization
    nonsingular.stypy_type_of_self = None
    nonsingular.stypy_type_store = module_type_store
    nonsingular.stypy_function_name = 'nonsingular'
    nonsingular.stypy_param_names_list = ['vmin', 'vmax', 'expander', 'tiny', 'increasing']
    nonsingular.stypy_varargs_param_name = None
    nonsingular.stypy_kwargs_param_name = None
    nonsingular.stypy_call_defaults = defaults
    nonsingular.stypy_call_varargs = varargs
    nonsingular.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'nonsingular', ['vmin', 'vmax', 'expander', 'tiny', 'increasing'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'nonsingular', localization, ['vmin', 'vmax', 'expander', 'tiny', 'increasing'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'nonsingular(...)' code ##################

    unicode_160719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2893, (-1)), 'unicode', u'\n    Modify the endpoints of a range as needed to avoid singularities.\n\n    *vmin*, *vmax*\n        the initial endpoints.\n\n    *tiny*\n        threshold for the ratio of the interval to the maximum absolute\n        value of its endpoints.  If the interval is smaller than\n        this, it will be expanded.  This value should be around\n        1e-15 or larger; otherwise the interval will be approaching\n        the double precision resolution limit.\n\n    *expander*\n        fractional amount by which *vmin* and *vmax* are expanded if\n        the original interval is too small, based on *tiny*.\n\n    *increasing*: [True | False]\n        If True (default), swap *vmin*, *vmax* if *vmin* > *vmax*\n\n    Returns *vmin*, *vmax*, expanded and/or swapped if necessary.\n\n    If either input is inf or NaN, or if both inputs are 0 or very\n    close to zero, it returns -*expander*, *expander*.\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isfinite(...): (line 2894)
    # Processing the call arguments (line 2894)
    # Getting the type of 'vmin' (line 2894)
    vmin_160722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 24), 'vmin', False)
    # Processing the call keyword arguments (line 2894)
    kwargs_160723 = {}
    # Getting the type of 'np' (line 2894)
    np_160720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 12), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 2894)
    isfinite_160721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2894, 12), np_160720, 'isfinite')
    # Calling isfinite(args, kwargs) (line 2894)
    isfinite_call_result_160724 = invoke(stypy.reporting.localization.Localization(__file__, 2894, 12), isfinite_160721, *[vmin_160722], **kwargs_160723)
    
    # Applying the 'not' unary operator (line 2894)
    result_not__160725 = python_operator(stypy.reporting.localization.Localization(__file__, 2894, 8), 'not', isfinite_call_result_160724)
    
    
    
    # Call to isfinite(...): (line 2894)
    # Processing the call arguments (line 2894)
    # Getting the type of 'vmax' (line 2894)
    vmax_160728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 51), 'vmax', False)
    # Processing the call keyword arguments (line 2894)
    kwargs_160729 = {}
    # Getting the type of 'np' (line 2894)
    np_160726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 39), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 2894)
    isfinite_160727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2894, 39), np_160726, 'isfinite')
    # Calling isfinite(args, kwargs) (line 2894)
    isfinite_call_result_160730 = invoke(stypy.reporting.localization.Localization(__file__, 2894, 39), isfinite_160727, *[vmax_160728], **kwargs_160729)
    
    # Applying the 'not' unary operator (line 2894)
    result_not__160731 = python_operator(stypy.reporting.localization.Localization(__file__, 2894, 35), 'not', isfinite_call_result_160730)
    
    # Applying the binary operator 'or' (line 2894)
    result_or_keyword_160732 = python_operator(stypy.reporting.localization.Localization(__file__, 2894, 7), 'or', result_not__160725, result_not__160731)
    
    # Testing the type of an if condition (line 2894)
    if_condition_160733 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2894, 4), result_or_keyword_160732)
    # Assigning a type to the variable 'if_condition_160733' (line 2894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2894, 4), 'if_condition_160733', if_condition_160733)
    # SSA begins for if statement (line 2894)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2895)
    tuple_160734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2895, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2895)
    # Adding element type (line 2895)
    
    # Getting the type of 'expander' (line 2895)
    expander_160735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2895, 16), 'expander')
    # Applying the 'usub' unary operator (line 2895)
    result___neg___160736 = python_operator(stypy.reporting.localization.Localization(__file__, 2895, 15), 'usub', expander_160735)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2895, 15), tuple_160734, result___neg___160736)
    # Adding element type (line 2895)
    # Getting the type of 'expander' (line 2895)
    expander_160737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2895, 26), 'expander')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2895, 15), tuple_160734, expander_160737)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2895, 8), 'stypy_return_type', tuple_160734)
    # SSA join for if statement (line 2894)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 2897):
    
    # Assigning a Name to a Name (line 2897):
    # Getting the type of 'False' (line 2897)
    False_160738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2897, 14), 'False')
    # Assigning a type to the variable 'swapped' (line 2897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2897, 4), 'swapped', False_160738)
    
    
    # Getting the type of 'vmax' (line 2898)
    vmax_160739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 7), 'vmax')
    # Getting the type of 'vmin' (line 2898)
    vmin_160740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 14), 'vmin')
    # Applying the binary operator '<' (line 2898)
    result_lt_160741 = python_operator(stypy.reporting.localization.Localization(__file__, 2898, 7), '<', vmax_160739, vmin_160740)
    
    # Testing the type of an if condition (line 2898)
    if_condition_160742 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2898, 4), result_lt_160741)
    # Assigning a type to the variable 'if_condition_160742' (line 2898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2898, 4), 'if_condition_160742', if_condition_160742)
    # SSA begins for if statement (line 2898)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 2899):
    
    # Assigning a Name to a Name (line 2899):
    # Getting the type of 'vmax' (line 2899)
    vmax_160743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 21), 'vmax')
    # Assigning a type to the variable 'tuple_assignment_154326' (line 2899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2899, 8), 'tuple_assignment_154326', vmax_160743)
    
    # Assigning a Name to a Name (line 2899):
    # Getting the type of 'vmin' (line 2899)
    vmin_160744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 27), 'vmin')
    # Assigning a type to the variable 'tuple_assignment_154327' (line 2899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2899, 8), 'tuple_assignment_154327', vmin_160744)
    
    # Assigning a Name to a Name (line 2899):
    # Getting the type of 'tuple_assignment_154326' (line 2899)
    tuple_assignment_154326_160745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 8), 'tuple_assignment_154326')
    # Assigning a type to the variable 'vmin' (line 2899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2899, 8), 'vmin', tuple_assignment_154326_160745)
    
    # Assigning a Name to a Name (line 2899):
    # Getting the type of 'tuple_assignment_154327' (line 2899)
    tuple_assignment_154327_160746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 8), 'tuple_assignment_154327')
    # Assigning a type to the variable 'vmax' (line 2899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2899, 14), 'vmax', tuple_assignment_154327_160746)
    
    # Assigning a Name to a Name (line 2900):
    
    # Assigning a Name to a Name (line 2900):
    # Getting the type of 'True' (line 2900)
    True_160747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 18), 'True')
    # Assigning a type to the variable 'swapped' (line 2900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2900, 8), 'swapped', True_160747)
    # SSA join for if statement (line 2898)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2902):
    
    # Assigning a Call to a Name (line 2902):
    
    # Call to max(...): (line 2902)
    # Processing the call arguments (line 2902)
    
    # Call to abs(...): (line 2902)
    # Processing the call arguments (line 2902)
    # Getting the type of 'vmin' (line 2902)
    vmin_160750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 26), 'vmin', False)
    # Processing the call keyword arguments (line 2902)
    kwargs_160751 = {}
    # Getting the type of 'abs' (line 2902)
    abs_160749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 22), 'abs', False)
    # Calling abs(args, kwargs) (line 2902)
    abs_call_result_160752 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 22), abs_160749, *[vmin_160750], **kwargs_160751)
    
    
    # Call to abs(...): (line 2902)
    # Processing the call arguments (line 2902)
    # Getting the type of 'vmax' (line 2902)
    vmax_160754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 37), 'vmax', False)
    # Processing the call keyword arguments (line 2902)
    kwargs_160755 = {}
    # Getting the type of 'abs' (line 2902)
    abs_160753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 33), 'abs', False)
    # Calling abs(args, kwargs) (line 2902)
    abs_call_result_160756 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 33), abs_160753, *[vmax_160754], **kwargs_160755)
    
    # Processing the call keyword arguments (line 2902)
    kwargs_160757 = {}
    # Getting the type of 'max' (line 2902)
    max_160748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 18), 'max', False)
    # Calling max(args, kwargs) (line 2902)
    max_call_result_160758 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 18), max_160748, *[abs_call_result_160752, abs_call_result_160756], **kwargs_160757)
    
    # Assigning a type to the variable 'maxabsvalue' (line 2902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2902, 4), 'maxabsvalue', max_call_result_160758)
    
    
    # Getting the type of 'maxabsvalue' (line 2903)
    maxabsvalue_160759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 7), 'maxabsvalue')
    float_160760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2903, 22), 'float')
    # Getting the type of 'tiny' (line 2903)
    tiny_160761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 28), 'tiny')
    # Applying the binary operator 'div' (line 2903)
    result_div_160762 = python_operator(stypy.reporting.localization.Localization(__file__, 2903, 22), 'div', float_160760, tiny_160761)
    
    
    # Call to finfo(...): (line 2903)
    # Processing the call arguments (line 2903)
    # Getting the type of 'float' (line 2903)
    float_160765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 45), 'float', False)
    # Processing the call keyword arguments (line 2903)
    kwargs_160766 = {}
    # Getting the type of 'np' (line 2903)
    np_160763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 36), 'np', False)
    # Obtaining the member 'finfo' of a type (line 2903)
    finfo_160764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2903, 36), np_160763, 'finfo')
    # Calling finfo(args, kwargs) (line 2903)
    finfo_call_result_160767 = invoke(stypy.reporting.localization.Localization(__file__, 2903, 36), finfo_160764, *[float_160765], **kwargs_160766)
    
    # Obtaining the member 'tiny' of a type (line 2903)
    tiny_160768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2903, 36), finfo_call_result_160767, 'tiny')
    # Applying the binary operator '*' (line 2903)
    result_mul_160769 = python_operator(stypy.reporting.localization.Localization(__file__, 2903, 21), '*', result_div_160762, tiny_160768)
    
    # Applying the binary operator '<' (line 2903)
    result_lt_160770 = python_operator(stypy.reporting.localization.Localization(__file__, 2903, 7), '<', maxabsvalue_160759, result_mul_160769)
    
    # Testing the type of an if condition (line 2903)
    if_condition_160771 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2903, 4), result_lt_160770)
    # Assigning a type to the variable 'if_condition_160771' (line 2903)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2903, 4), 'if_condition_160771', if_condition_160771)
    # SSA begins for if statement (line 2903)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Name (line 2904):
    
    # Assigning a UnaryOp to a Name (line 2904):
    
    # Getting the type of 'expander' (line 2904)
    expander_160772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 16), 'expander')
    # Applying the 'usub' unary operator (line 2904)
    result___neg___160773 = python_operator(stypy.reporting.localization.Localization(__file__, 2904, 15), 'usub', expander_160772)
    
    # Assigning a type to the variable 'vmin' (line 2904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2904, 8), 'vmin', result___neg___160773)
    
    # Assigning a Name to a Name (line 2905):
    
    # Assigning a Name to a Name (line 2905):
    # Getting the type of 'expander' (line 2905)
    expander_160774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 15), 'expander')
    # Assigning a type to the variable 'vmax' (line 2905)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2905, 8), 'vmax', expander_160774)
    # SSA branch for the else part of an if statement (line 2903)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'vmax' (line 2907)
    vmax_160775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 9), 'vmax')
    # Getting the type of 'vmin' (line 2907)
    vmin_160776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 16), 'vmin')
    # Applying the binary operator '-' (line 2907)
    result_sub_160777 = python_operator(stypy.reporting.localization.Localization(__file__, 2907, 9), '-', vmax_160775, vmin_160776)
    
    # Getting the type of 'maxabsvalue' (line 2907)
    maxabsvalue_160778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 24), 'maxabsvalue')
    # Getting the type of 'tiny' (line 2907)
    tiny_160779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 38), 'tiny')
    # Applying the binary operator '*' (line 2907)
    result_mul_160780 = python_operator(stypy.reporting.localization.Localization(__file__, 2907, 24), '*', maxabsvalue_160778, tiny_160779)
    
    # Applying the binary operator '<=' (line 2907)
    result_le_160781 = python_operator(stypy.reporting.localization.Localization(__file__, 2907, 9), '<=', result_sub_160777, result_mul_160780)
    
    # Testing the type of an if condition (line 2907)
    if_condition_160782 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2907, 9), result_le_160781)
    # Assigning a type to the variable 'if_condition_160782' (line 2907)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2907, 9), 'if_condition_160782', if_condition_160782)
    # SSA begins for if statement (line 2907)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'vmax' (line 2908)
    vmax_160783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 11), 'vmax')
    int_160784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2908, 19), 'int')
    # Applying the binary operator '==' (line 2908)
    result_eq_160785 = python_operator(stypy.reporting.localization.Localization(__file__, 2908, 11), '==', vmax_160783, int_160784)
    
    
    # Getting the type of 'vmin' (line 2908)
    vmin_160786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 25), 'vmin')
    int_160787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2908, 33), 'int')
    # Applying the binary operator '==' (line 2908)
    result_eq_160788 = python_operator(stypy.reporting.localization.Localization(__file__, 2908, 25), '==', vmin_160786, int_160787)
    
    # Applying the binary operator 'and' (line 2908)
    result_and_keyword_160789 = python_operator(stypy.reporting.localization.Localization(__file__, 2908, 11), 'and', result_eq_160785, result_eq_160788)
    
    # Testing the type of an if condition (line 2908)
    if_condition_160790 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2908, 8), result_and_keyword_160789)
    # Assigning a type to the variable 'if_condition_160790' (line 2908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2908, 8), 'if_condition_160790', if_condition_160790)
    # SSA begins for if statement (line 2908)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Name (line 2909):
    
    # Assigning a UnaryOp to a Name (line 2909):
    
    # Getting the type of 'expander' (line 2909)
    expander_160791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 20), 'expander')
    # Applying the 'usub' unary operator (line 2909)
    result___neg___160792 = python_operator(stypy.reporting.localization.Localization(__file__, 2909, 19), 'usub', expander_160791)
    
    # Assigning a type to the variable 'vmin' (line 2909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2909, 12), 'vmin', result___neg___160792)
    
    # Assigning a Name to a Name (line 2910):
    
    # Assigning a Name to a Name (line 2910):
    # Getting the type of 'expander' (line 2910)
    expander_160793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2910, 19), 'expander')
    # Assigning a type to the variable 'vmax' (line 2910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2910, 12), 'vmax', expander_160793)
    # SSA branch for the else part of an if statement (line 2908)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'vmin' (line 2912)
    vmin_160794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 12), 'vmin')
    # Getting the type of 'expander' (line 2912)
    expander_160795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 20), 'expander')
    
    # Call to abs(...): (line 2912)
    # Processing the call arguments (line 2912)
    # Getting the type of 'vmin' (line 2912)
    vmin_160797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 33), 'vmin', False)
    # Processing the call keyword arguments (line 2912)
    kwargs_160798 = {}
    # Getting the type of 'abs' (line 2912)
    abs_160796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2912)
    abs_call_result_160799 = invoke(stypy.reporting.localization.Localization(__file__, 2912, 29), abs_160796, *[vmin_160797], **kwargs_160798)
    
    # Applying the binary operator '*' (line 2912)
    result_mul_160800 = python_operator(stypy.reporting.localization.Localization(__file__, 2912, 20), '*', expander_160795, abs_call_result_160799)
    
    # Applying the binary operator '-=' (line 2912)
    result_isub_160801 = python_operator(stypy.reporting.localization.Localization(__file__, 2912, 12), '-=', vmin_160794, result_mul_160800)
    # Assigning a type to the variable 'vmin' (line 2912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2912, 12), 'vmin', result_isub_160801)
    
    
    # Getting the type of 'vmax' (line 2913)
    vmax_160802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 12), 'vmax')
    # Getting the type of 'expander' (line 2913)
    expander_160803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 20), 'expander')
    
    # Call to abs(...): (line 2913)
    # Processing the call arguments (line 2913)
    # Getting the type of 'vmax' (line 2913)
    vmax_160805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 33), 'vmax', False)
    # Processing the call keyword arguments (line 2913)
    kwargs_160806 = {}
    # Getting the type of 'abs' (line 2913)
    abs_160804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2913)
    abs_call_result_160807 = invoke(stypy.reporting.localization.Localization(__file__, 2913, 29), abs_160804, *[vmax_160805], **kwargs_160806)
    
    # Applying the binary operator '*' (line 2913)
    result_mul_160808 = python_operator(stypy.reporting.localization.Localization(__file__, 2913, 20), '*', expander_160803, abs_call_result_160807)
    
    # Applying the binary operator '+=' (line 2913)
    result_iadd_160809 = python_operator(stypy.reporting.localization.Localization(__file__, 2913, 12), '+=', vmax_160802, result_mul_160808)
    # Assigning a type to the variable 'vmax' (line 2913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2913, 12), 'vmax', result_iadd_160809)
    
    # SSA join for if statement (line 2908)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2907)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2903)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'swapped' (line 2915)
    swapped_160810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 7), 'swapped')
    
    # Getting the type of 'increasing' (line 2915)
    increasing_160811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 23), 'increasing')
    # Applying the 'not' unary operator (line 2915)
    result_not__160812 = python_operator(stypy.reporting.localization.Localization(__file__, 2915, 19), 'not', increasing_160811)
    
    # Applying the binary operator 'and' (line 2915)
    result_and_keyword_160813 = python_operator(stypy.reporting.localization.Localization(__file__, 2915, 7), 'and', swapped_160810, result_not__160812)
    
    # Testing the type of an if condition (line 2915)
    if_condition_160814 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2915, 4), result_and_keyword_160813)
    # Assigning a type to the variable 'if_condition_160814' (line 2915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2915, 4), 'if_condition_160814', if_condition_160814)
    # SSA begins for if statement (line 2915)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 2916):
    
    # Assigning a Name to a Name (line 2916):
    # Getting the type of 'vmax' (line 2916)
    vmax_160815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 21), 'vmax')
    # Assigning a type to the variable 'tuple_assignment_154328' (line 2916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2916, 8), 'tuple_assignment_154328', vmax_160815)
    
    # Assigning a Name to a Name (line 2916):
    # Getting the type of 'vmin' (line 2916)
    vmin_160816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 27), 'vmin')
    # Assigning a type to the variable 'tuple_assignment_154329' (line 2916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2916, 8), 'tuple_assignment_154329', vmin_160816)
    
    # Assigning a Name to a Name (line 2916):
    # Getting the type of 'tuple_assignment_154328' (line 2916)
    tuple_assignment_154328_160817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 8), 'tuple_assignment_154328')
    # Assigning a type to the variable 'vmin' (line 2916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2916, 8), 'vmin', tuple_assignment_154328_160817)
    
    # Assigning a Name to a Name (line 2916):
    # Getting the type of 'tuple_assignment_154329' (line 2916)
    tuple_assignment_154329_160818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 8), 'tuple_assignment_154329')
    # Assigning a type to the variable 'vmax' (line 2916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2916, 14), 'vmax', tuple_assignment_154329_160818)
    # SSA join for if statement (line 2915)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2917)
    tuple_160819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2917, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2917)
    # Adding element type (line 2917)
    # Getting the type of 'vmin' (line 2917)
    vmin_160820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2917, 11), 'vmin')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2917, 11), tuple_160819, vmin_160820)
    # Adding element type (line 2917)
    # Getting the type of 'vmax' (line 2917)
    vmax_160821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2917, 17), 'vmax')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2917, 11), tuple_160819, vmax_160821)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2917)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2917, 4), 'stypy_return_type', tuple_160819)
    
    # ################# End of 'nonsingular(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'nonsingular' in the type store
    # Getting the type of 'stypy_return_type' (line 2868)
    stypy_return_type_160822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_160822)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'nonsingular'
    return stypy_return_type_160822

# Assigning a type to the variable 'nonsingular' (line 2868)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2868, 0), 'nonsingular', nonsingular)

@norecursion
def interval_contains(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'interval_contains'
    module_type_store = module_type_store.open_function_context('interval_contains', 2920, 0, False)
    
    # Passed parameters checking function
    interval_contains.stypy_localization = localization
    interval_contains.stypy_type_of_self = None
    interval_contains.stypy_type_store = module_type_store
    interval_contains.stypy_function_name = 'interval_contains'
    interval_contains.stypy_param_names_list = ['interval', 'val']
    interval_contains.stypy_varargs_param_name = None
    interval_contains.stypy_kwargs_param_name = None
    interval_contains.stypy_call_defaults = defaults
    interval_contains.stypy_call_varargs = varargs
    interval_contains.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'interval_contains', ['interval', 'val'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'interval_contains', localization, ['interval', 'val'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'interval_contains(...)' code ##################

    
    # Assigning a Name to a Tuple (line 2921):
    
    # Assigning a Subscript to a Name (line 2921):
    
    # Obtaining the type of the subscript
    int_160823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2921, 4), 'int')
    # Getting the type of 'interval' (line 2921)
    interval_160824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 11), 'interval')
    # Obtaining the member '__getitem__' of a type (line 2921)
    getitem___160825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2921, 4), interval_160824, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2921)
    subscript_call_result_160826 = invoke(stypy.reporting.localization.Localization(__file__, 2921, 4), getitem___160825, int_160823)
    
    # Assigning a type to the variable 'tuple_var_assignment_154330' (line 2921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2921, 4), 'tuple_var_assignment_154330', subscript_call_result_160826)
    
    # Assigning a Subscript to a Name (line 2921):
    
    # Obtaining the type of the subscript
    int_160827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2921, 4), 'int')
    # Getting the type of 'interval' (line 2921)
    interval_160828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 11), 'interval')
    # Obtaining the member '__getitem__' of a type (line 2921)
    getitem___160829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2921, 4), interval_160828, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2921)
    subscript_call_result_160830 = invoke(stypy.reporting.localization.Localization(__file__, 2921, 4), getitem___160829, int_160827)
    
    # Assigning a type to the variable 'tuple_var_assignment_154331' (line 2921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2921, 4), 'tuple_var_assignment_154331', subscript_call_result_160830)
    
    # Assigning a Name to a Name (line 2921):
    # Getting the type of 'tuple_var_assignment_154330' (line 2921)
    tuple_var_assignment_154330_160831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 4), 'tuple_var_assignment_154330')
    # Assigning a type to the variable 'a' (line 2921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2921, 4), 'a', tuple_var_assignment_154330_160831)
    
    # Assigning a Name to a Name (line 2921):
    # Getting the type of 'tuple_var_assignment_154331' (line 2921)
    tuple_var_assignment_154331_160832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 4), 'tuple_var_assignment_154331')
    # Assigning a type to the variable 'b' (line 2921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2921, 7), 'b', tuple_var_assignment_154331_160832)
    
    # Evaluating a boolean operation
    
    # Getting the type of 'a' (line 2922)
    a_160833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 11), 'a')
    # Getting the type of 'val' (line 2922)
    val_160834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 16), 'val')
    # Applying the binary operator '<=' (line 2922)
    result_le_160835 = python_operator(stypy.reporting.localization.Localization(__file__, 2922, 11), '<=', a_160833, val_160834)
    # Getting the type of 'b' (line 2922)
    b_160836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 23), 'b')
    # Applying the binary operator '<=' (line 2922)
    result_le_160837 = python_operator(stypy.reporting.localization.Localization(__file__, 2922, 11), '<=', val_160834, b_160836)
    # Applying the binary operator '&' (line 2922)
    result_and__160838 = python_operator(stypy.reporting.localization.Localization(__file__, 2922, 11), '&', result_le_160835, result_le_160837)
    
    
    # Getting the type of 'a' (line 2922)
    a_160839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 28), 'a')
    # Getting the type of 'val' (line 2922)
    val_160840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 33), 'val')
    # Applying the binary operator '>=' (line 2922)
    result_ge_160841 = python_operator(stypy.reporting.localization.Localization(__file__, 2922, 28), '>=', a_160839, val_160840)
    # Getting the type of 'b' (line 2922)
    b_160842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 40), 'b')
    # Applying the binary operator '>=' (line 2922)
    result_ge_160843 = python_operator(stypy.reporting.localization.Localization(__file__, 2922, 28), '>=', val_160840, b_160842)
    # Applying the binary operator '&' (line 2922)
    result_and__160844 = python_operator(stypy.reporting.localization.Localization(__file__, 2922, 28), '&', result_ge_160841, result_ge_160843)
    
    # Applying the binary operator 'or' (line 2922)
    result_or_keyword_160845 = python_operator(stypy.reporting.localization.Localization(__file__, 2922, 11), 'or', result_and__160838, result_and__160844)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2922, 4), 'stypy_return_type', result_or_keyword_160845)
    
    # ################# End of 'interval_contains(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'interval_contains' in the type store
    # Getting the type of 'stypy_return_type' (line 2920)
    stypy_return_type_160846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_160846)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'interval_contains'
    return stypy_return_type_160846

# Assigning a type to the variable 'interval_contains' (line 2920)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2920, 0), 'interval_contains', interval_contains)

@norecursion
def interval_contains_open(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'interval_contains_open'
    module_type_store = module_type_store.open_function_context('interval_contains_open', 2925, 0, False)
    
    # Passed parameters checking function
    interval_contains_open.stypy_localization = localization
    interval_contains_open.stypy_type_of_self = None
    interval_contains_open.stypy_type_store = module_type_store
    interval_contains_open.stypy_function_name = 'interval_contains_open'
    interval_contains_open.stypy_param_names_list = ['interval', 'val']
    interval_contains_open.stypy_varargs_param_name = None
    interval_contains_open.stypy_kwargs_param_name = None
    interval_contains_open.stypy_call_defaults = defaults
    interval_contains_open.stypy_call_varargs = varargs
    interval_contains_open.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'interval_contains_open', ['interval', 'val'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'interval_contains_open', localization, ['interval', 'val'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'interval_contains_open(...)' code ##################

    
    # Assigning a Name to a Tuple (line 2926):
    
    # Assigning a Subscript to a Name (line 2926):
    
    # Obtaining the type of the subscript
    int_160847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2926, 4), 'int')
    # Getting the type of 'interval' (line 2926)
    interval_160848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 11), 'interval')
    # Obtaining the member '__getitem__' of a type (line 2926)
    getitem___160849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2926, 4), interval_160848, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2926)
    subscript_call_result_160850 = invoke(stypy.reporting.localization.Localization(__file__, 2926, 4), getitem___160849, int_160847)
    
    # Assigning a type to the variable 'tuple_var_assignment_154332' (line 2926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2926, 4), 'tuple_var_assignment_154332', subscript_call_result_160850)
    
    # Assigning a Subscript to a Name (line 2926):
    
    # Obtaining the type of the subscript
    int_160851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2926, 4), 'int')
    # Getting the type of 'interval' (line 2926)
    interval_160852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 11), 'interval')
    # Obtaining the member '__getitem__' of a type (line 2926)
    getitem___160853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2926, 4), interval_160852, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2926)
    subscript_call_result_160854 = invoke(stypy.reporting.localization.Localization(__file__, 2926, 4), getitem___160853, int_160851)
    
    # Assigning a type to the variable 'tuple_var_assignment_154333' (line 2926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2926, 4), 'tuple_var_assignment_154333', subscript_call_result_160854)
    
    # Assigning a Name to a Name (line 2926):
    # Getting the type of 'tuple_var_assignment_154332' (line 2926)
    tuple_var_assignment_154332_160855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 4), 'tuple_var_assignment_154332')
    # Assigning a type to the variable 'a' (line 2926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2926, 4), 'a', tuple_var_assignment_154332_160855)
    
    # Assigning a Name to a Name (line 2926):
    # Getting the type of 'tuple_var_assignment_154333' (line 2926)
    tuple_var_assignment_154333_160856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 4), 'tuple_var_assignment_154333')
    # Assigning a type to the variable 'b' (line 2926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2926, 7), 'b', tuple_var_assignment_154333_160856)
    
    # Evaluating a boolean operation
    
    # Getting the type of 'a' (line 2927)
    a_160857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 11), 'a')
    # Getting the type of 'val' (line 2927)
    val_160858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 15), 'val')
    # Applying the binary operator '<' (line 2927)
    result_lt_160859 = python_operator(stypy.reporting.localization.Localization(__file__, 2927, 11), '<', a_160857, val_160858)
    # Getting the type of 'b' (line 2927)
    b_160860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 21), 'b')
    # Applying the binary operator '<' (line 2927)
    result_lt_160861 = python_operator(stypy.reporting.localization.Localization(__file__, 2927, 11), '<', val_160858, b_160860)
    # Applying the binary operator '&' (line 2927)
    result_and__160862 = python_operator(stypy.reporting.localization.Localization(__file__, 2927, 11), '&', result_lt_160859, result_lt_160861)
    
    
    # Getting the type of 'a' (line 2927)
    a_160863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 26), 'a')
    # Getting the type of 'val' (line 2927)
    val_160864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 30), 'val')
    # Applying the binary operator '>' (line 2927)
    result_gt_160865 = python_operator(stypy.reporting.localization.Localization(__file__, 2927, 26), '>', a_160863, val_160864)
    # Getting the type of 'b' (line 2927)
    b_160866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 36), 'b')
    # Applying the binary operator '>' (line 2927)
    result_gt_160867 = python_operator(stypy.reporting.localization.Localization(__file__, 2927, 26), '>', val_160864, b_160866)
    # Applying the binary operator '&' (line 2927)
    result_and__160868 = python_operator(stypy.reporting.localization.Localization(__file__, 2927, 26), '&', result_gt_160865, result_gt_160867)
    
    # Applying the binary operator 'or' (line 2927)
    result_or_keyword_160869 = python_operator(stypy.reporting.localization.Localization(__file__, 2927, 11), 'or', result_and__160862, result_and__160868)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2927, 4), 'stypy_return_type', result_or_keyword_160869)
    
    # ################# End of 'interval_contains_open(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'interval_contains_open' in the type store
    # Getting the type of 'stypy_return_type' (line 2925)
    stypy_return_type_160870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_160870)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'interval_contains_open'
    return stypy_return_type_160870

# Assigning a type to the variable 'interval_contains_open' (line 2925)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2925, 0), 'interval_contains_open', interval_contains_open)

@norecursion
def offset_copy(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2930)
    None_160871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 27), 'None')
    float_160872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2930, 35), 'float')
    float_160873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2930, 42), 'float')
    unicode_160874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2930, 53), 'unicode', u'inches')
    defaults = [None_160871, float_160872, float_160873, unicode_160874]
    # Create a new context for function 'offset_copy'
    module_type_store = module_type_store.open_function_context('offset_copy', 2930, 0, False)
    
    # Passed parameters checking function
    offset_copy.stypy_localization = localization
    offset_copy.stypy_type_of_self = None
    offset_copy.stypy_type_store = module_type_store
    offset_copy.stypy_function_name = 'offset_copy'
    offset_copy.stypy_param_names_list = ['trans', 'fig', 'x', 'y', 'units']
    offset_copy.stypy_varargs_param_name = None
    offset_copy.stypy_kwargs_param_name = None
    offset_copy.stypy_call_defaults = defaults
    offset_copy.stypy_call_varargs = varargs
    offset_copy.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'offset_copy', ['trans', 'fig', 'x', 'y', 'units'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'offset_copy', localization, ['trans', 'fig', 'x', 'y', 'units'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'offset_copy(...)' code ##################

    unicode_160875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2939, (-1)), 'unicode', u"\n    Return a new transform with an added offset.\n      args:\n        trans is any transform\n      kwargs:\n        fig is the current figure; it can be None if units are 'dots'\n        x, y give the offset\n        units is 'inches', 'points' or 'dots'\n    ")
    
    
    # Getting the type of 'units' (line 2940)
    units_160876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2940, 7), 'units')
    unicode_160877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2940, 16), 'unicode', u'dots')
    # Applying the binary operator '==' (line 2940)
    result_eq_160878 = python_operator(stypy.reporting.localization.Localization(__file__, 2940, 7), '==', units_160876, unicode_160877)
    
    # Testing the type of an if condition (line 2940)
    if_condition_160879 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2940, 4), result_eq_160878)
    # Assigning a type to the variable 'if_condition_160879' (line 2940)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2940, 4), 'if_condition_160879', if_condition_160879)
    # SSA begins for if statement (line 2940)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'trans' (line 2941)
    trans_160880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 15), 'trans')
    
    # Call to translate(...): (line 2941)
    # Processing the call arguments (line 2941)
    # Getting the type of 'x' (line 2941)
    x_160885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 44), 'x', False)
    # Getting the type of 'y' (line 2941)
    y_160886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 47), 'y', False)
    # Processing the call keyword arguments (line 2941)
    kwargs_160887 = {}
    
    # Call to Affine2D(...): (line 2941)
    # Processing the call keyword arguments (line 2941)
    kwargs_160882 = {}
    # Getting the type of 'Affine2D' (line 2941)
    Affine2D_160881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 23), 'Affine2D', False)
    # Calling Affine2D(args, kwargs) (line 2941)
    Affine2D_call_result_160883 = invoke(stypy.reporting.localization.Localization(__file__, 2941, 23), Affine2D_160881, *[], **kwargs_160882)
    
    # Obtaining the member 'translate' of a type (line 2941)
    translate_160884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2941, 23), Affine2D_call_result_160883, 'translate')
    # Calling translate(args, kwargs) (line 2941)
    translate_call_result_160888 = invoke(stypy.reporting.localization.Localization(__file__, 2941, 23), translate_160884, *[x_160885, y_160886], **kwargs_160887)
    
    # Applying the binary operator '+' (line 2941)
    result_add_160889 = python_operator(stypy.reporting.localization.Localization(__file__, 2941, 15), '+', trans_160880, translate_call_result_160888)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2941)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2941, 8), 'stypy_return_type', result_add_160889)
    # SSA join for if statement (line 2940)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2942)
    # Getting the type of 'fig' (line 2942)
    fig_160890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 7), 'fig')
    # Getting the type of 'None' (line 2942)
    None_160891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 14), 'None')
    
    (may_be_160892, more_types_in_union_160893) = may_be_none(fig_160890, None_160891)

    if may_be_160892:

        if more_types_in_union_160893:
            # Runtime conditional SSA (line 2942)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to ValueError(...): (line 2943)
        # Processing the call arguments (line 2943)
        unicode_160895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2943, 25), 'unicode', u'For units of inches or points a fig kwarg is needed')
        # Processing the call keyword arguments (line 2943)
        kwargs_160896 = {}
        # Getting the type of 'ValueError' (line 2943)
        ValueError_160894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2943)
        ValueError_call_result_160897 = invoke(stypy.reporting.localization.Localization(__file__, 2943, 14), ValueError_160894, *[unicode_160895], **kwargs_160896)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2943, 8), ValueError_call_result_160897, 'raise parameter', BaseException)

        if more_types_in_union_160893:
            # SSA join for if statement (line 2942)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'units' (line 2944)
    units_160898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2944, 7), 'units')
    unicode_160899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2944, 16), 'unicode', u'points')
    # Applying the binary operator '==' (line 2944)
    result_eq_160900 = python_operator(stypy.reporting.localization.Localization(__file__, 2944, 7), '==', units_160898, unicode_160899)
    
    # Testing the type of an if condition (line 2944)
    if_condition_160901 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2944, 4), result_eq_160900)
    # Assigning a type to the variable 'if_condition_160901' (line 2944)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2944, 4), 'if_condition_160901', if_condition_160901)
    # SSA begins for if statement (line 2944)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'x' (line 2945)
    x_160902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 8), 'x')
    float_160903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2945, 13), 'float')
    # Applying the binary operator 'div=' (line 2945)
    result_div_160904 = python_operator(stypy.reporting.localization.Localization(__file__, 2945, 8), 'div=', x_160902, float_160903)
    # Assigning a type to the variable 'x' (line 2945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2945, 8), 'x', result_div_160904)
    
    
    # Getting the type of 'y' (line 2946)
    y_160905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 8), 'y')
    float_160906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2946, 13), 'float')
    # Applying the binary operator 'div=' (line 2946)
    result_div_160907 = python_operator(stypy.reporting.localization.Localization(__file__, 2946, 8), 'div=', y_160905, float_160906)
    # Assigning a type to the variable 'y' (line 2946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2946, 8), 'y', result_div_160907)
    
    # SSA branch for the else part of an if statement (line 2944)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Getting the type of 'units' (line 2947)
    units_160908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 13), 'units')
    unicode_160909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 22), 'unicode', u'inches')
    # Applying the binary operator '==' (line 2947)
    result_eq_160910 = python_operator(stypy.reporting.localization.Localization(__file__, 2947, 13), '==', units_160908, unicode_160909)
    
    # Applying the 'not' unary operator (line 2947)
    result_not__160911 = python_operator(stypy.reporting.localization.Localization(__file__, 2947, 9), 'not', result_eq_160910)
    
    # Testing the type of an if condition (line 2947)
    if_condition_160912 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2947, 9), result_not__160911)
    # Assigning a type to the variable 'if_condition_160912' (line 2947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 9), 'if_condition_160912', if_condition_160912)
    # SSA begins for if statement (line 2947)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2948)
    # Processing the call arguments (line 2948)
    unicode_160914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2948, 25), 'unicode', u'units must be dots, points, or inches')
    # Processing the call keyword arguments (line 2948)
    kwargs_160915 = {}
    # Getting the type of 'ValueError' (line 2948)
    ValueError_160913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2948)
    ValueError_call_result_160916 = invoke(stypy.reporting.localization.Localization(__file__, 2948, 14), ValueError_160913, *[unicode_160914], **kwargs_160915)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2948, 8), ValueError_call_result_160916, 'raise parameter', BaseException)
    # SSA join for if statement (line 2947)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2944)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'trans' (line 2949)
    trans_160917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 11), 'trans')
    
    # Call to ScaledTranslation(...): (line 2949)
    # Processing the call arguments (line 2949)
    # Getting the type of 'x' (line 2949)
    x_160919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 37), 'x', False)
    # Getting the type of 'y' (line 2949)
    y_160920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 40), 'y', False)
    # Getting the type of 'fig' (line 2949)
    fig_160921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 43), 'fig', False)
    # Obtaining the member 'dpi_scale_trans' of a type (line 2949)
    dpi_scale_trans_160922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2949, 43), fig_160921, 'dpi_scale_trans')
    # Processing the call keyword arguments (line 2949)
    kwargs_160923 = {}
    # Getting the type of 'ScaledTranslation' (line 2949)
    ScaledTranslation_160918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 19), 'ScaledTranslation', False)
    # Calling ScaledTranslation(args, kwargs) (line 2949)
    ScaledTranslation_call_result_160924 = invoke(stypy.reporting.localization.Localization(__file__, 2949, 19), ScaledTranslation_160918, *[x_160919, y_160920, dpi_scale_trans_160922], **kwargs_160923)
    
    # Applying the binary operator '+' (line 2949)
    result_add_160925 = python_operator(stypy.reporting.localization.Localization(__file__, 2949, 11), '+', trans_160917, ScaledTranslation_call_result_160924)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2949, 4), 'stypy_return_type', result_add_160925)
    
    # ################# End of 'offset_copy(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'offset_copy' in the type store
    # Getting the type of 'stypy_return_type' (line 2930)
    stypy_return_type_160926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_160926)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'offset_copy'
    return stypy_return_type_160926

# Assigning a type to the variable 'offset_copy' (line 2930)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2930, 0), 'offset_copy', offset_copy)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
