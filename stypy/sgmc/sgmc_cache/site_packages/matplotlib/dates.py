
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Matplotlib provides sophisticated date plotting capabilities, standing on the
3: shoulders of python :mod:`datetime`, the add-on modules :mod:`pytz` and
4: :mod:`dateutil`.  :class:`datetime` objects are converted to floating point
5: numbers which represent time in days since 0001-01-01 UTC, plus 1.  For
6: example, 0001-01-01, 06:00 is 1.25, not 0.25.  The helper functions
7: :func:`date2num`, :func:`num2date` and :func:`drange` are used to facilitate
8: easy conversion to and from :mod:`datetime` and numeric ranges.
9: 
10: .. note::
11: 
12:    Like Python's datetime, mpl uses the Gregorian calendar for all
13:    conversions between dates and floating point numbers. This practice
14:    is not universal, and calendar differences can cause confusing
15:    differences between what Python and mpl give as the number of days
16:    since 0001-01-01 and what other software and databases yield.  For
17:    example, the US Naval Observatory uses a calendar that switches
18:    from Julian to Gregorian in October, 1582.  Hence, using their
19:    calculator, the number of days between 0001-01-01 and 2006-04-01 is
20:    732403, whereas using the Gregorian calendar via the datetime
21:    module we find::
22: 
23:      In [31]:date(2006,4,1).toordinal() - date(1,1,1).toordinal()
24:      Out[31]:732401
25: 
26: 
27: A wide range of specific and general purpose date tick locators and
28: formatters are provided in this module.  See
29: :mod:`matplotlib.ticker` for general information on tick locators
30: and formatters.  These are described below.
31: 
32: All the matplotlib date converters, tickers and formatters are
33: timezone aware, and the default timezone is given by the timezone
34: parameter in your :file:`matplotlibrc` file.  If you leave out a
35: :class:`tz` timezone instance, the default from your rc file will be
36: assumed.  If you want to use a custom time zone, pass a
37: :class:`pytz.timezone` instance with the tz keyword argument to
38: :func:`num2date`, :func:`plot_date`, and any custom date tickers or
39: locators you create.  See `pytz <http://pythonhosted.org/pytz/>`_ for
40: information on :mod:`pytz` and timezone handling.
41: 
42: The `dateutil module <https://dateutil.readthedocs.io/en/stable/>`_ provides
43: additional code to handle date ticking, making it easy to place ticks
44: on any kinds of dates.  See examples below.
45: 
46: Date tickers
47: ------------
48: 
49: Most of the date tickers can locate single or multiple values.  For
50: example::
51: 
52:     # import constants for the days of the week
53:     from matplotlib.dates import MO, TU, WE, TH, FR, SA, SU
54: 
55:     # tick on mondays every week
56:     loc = WeekdayLocator(byweekday=MO, tz=tz)
57: 
58:     # tick on mondays and saturdays
59:     loc = WeekdayLocator(byweekday=(MO, SA))
60: 
61: In addition, most of the constructors take an interval argument::
62: 
63:     # tick on mondays every second week
64:     loc = WeekdayLocator(byweekday=MO, interval=2)
65: 
66: The rrule locator allows completely general date ticking::
67: 
68:     # tick every 5th easter
69:     rule = rrulewrapper(YEARLY, byeaster=1, interval=5)
70:     loc = RRuleLocator(rule)
71: 
72: Here are all the date tickers:
73: 
74:     * :class:`MinuteLocator`: locate minutes
75: 
76:     * :class:`HourLocator`: locate hours
77: 
78:     * :class:`DayLocator`: locate specified days of the month
79: 
80:     * :class:`WeekdayLocator`: Locate days of the week, e.g., MO, TU
81: 
82:     * :class:`MonthLocator`: locate months, e.g., 7 for july
83: 
84:     * :class:`YearLocator`: locate years that are multiples of base
85: 
86:     * :class:`RRuleLocator`: locate using a
87:       :class:`matplotlib.dates.rrulewrapper`.  The
88:       :class:`rrulewrapper` is a simple wrapper around a
89:       :class:`dateutil.rrule` (`dateutil
90:       <https://dateutil.readthedocs.io/en/stable/>`_) which allow almost
91:       arbitrary date tick specifications.  See `rrule example
92:       <../gallery/ticks_and_spines/date_demo_rrule.html>`_.
93: 
94:     * :class:`AutoDateLocator`: On autoscale, this class picks the best
95:       :class:`MultipleDateLocator` to set the view limits and the tick
96:       locations.
97: 
98: Date formatters
99: ---------------
100: 
101: Here all all the date formatters:
102: 
103:     * :class:`AutoDateFormatter`: attempts to figure out the best format
104:       to use.  This is most useful when used with the :class:`AutoDateLocator`.
105: 
106:     * :class:`DateFormatter`: use :func:`strftime` format strings
107: 
108:     * :class:`IndexDateFormatter`: date plots with implicit *x*
109:       indexing.
110: '''
111: from __future__ import (absolute_import, division, print_function,
112:                         unicode_literals)
113: 
114: import six
115: from six.moves import zip
116: from matplotlib import rcParams
117: import re
118: import time
119: import math
120: import datetime
121: 
122: import warnings
123: 
124: 
125: from dateutil.rrule import (rrule, MO, TU, WE, TH, FR, SA, SU, YEARLY,
126:                             MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY,
127:                             SECONDLY)
128: from dateutil.relativedelta import relativedelta
129: import dateutil.parser
130: import numpy as np
131: 
132: 
133: import matplotlib
134: import matplotlib.units as units
135: import matplotlib.cbook as cbook
136: import matplotlib.ticker as ticker
137: 
138: 
139: __all__ = ('date2num', 'num2date', 'num2timedelta', 'drange', 'epoch2num',
140:            'num2epoch', 'mx2num', 'DateFormatter',
141:            'IndexDateFormatter', 'AutoDateFormatter', 'DateLocator',
142:            'RRuleLocator', 'AutoDateLocator', 'YearLocator',
143:            'MonthLocator', 'WeekdayLocator',
144:            'DayLocator', 'HourLocator', 'MinuteLocator',
145:            'SecondLocator', 'MicrosecondLocator',
146:            'rrule', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU',
147:            'YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY',
148:            'HOURLY', 'MINUTELY', 'SECONDLY', 'MICROSECONDLY', 'relativedelta',
149:            'seconds', 'minutes', 'hours', 'weeks')
150: 
151: 
152: # Make a simple UTC instance so we don't always have to import
153: # pytz.  From the python datetime library docs:
154: 
155: class _UTC(datetime.tzinfo):
156:     '''UTC'''
157: 
158:     def utcoffset(self, dt):
159:         return datetime.timedelta(0)
160: 
161:     def tzname(self, dt):
162:         return str("UTC")
163: 
164:     def dst(self, dt):
165:         return datetime.timedelta(0)
166: 
167: 
168: UTC = _UTC()
169: 
170: 
171: def _get_rc_timezone():
172:     '''
173:     Retrieve the preferred timeszone from the rcParams dictionary.
174:     '''
175:     s = matplotlib.rcParams['timezone']
176:     if s == 'UTC':
177:         return UTC
178:     import pytz
179:     return pytz.timezone(s)
180: 
181: 
182: '''
183: Time-related constants.
184: '''
185: EPOCH_OFFSET = float(datetime.datetime(1970, 1, 1).toordinal())
186: JULIAN_OFFSET = 1721424.5                         # Julian date at 0001-01-01
187: MICROSECONDLY = SECONDLY + 1
188: HOURS_PER_DAY = 24.
189: MIN_PER_HOUR = 60.
190: SEC_PER_MIN = 60.
191: MONTHS_PER_YEAR = 12.
192: 
193: DAYS_PER_WEEK = 7.
194: DAYS_PER_MONTH = 30.
195: DAYS_PER_YEAR = 365.0
196: 
197: MINUTES_PER_DAY = MIN_PER_HOUR * HOURS_PER_DAY
198: 
199: SEC_PER_HOUR = SEC_PER_MIN * MIN_PER_HOUR
200: SEC_PER_DAY = SEC_PER_HOUR * HOURS_PER_DAY
201: SEC_PER_WEEK = SEC_PER_DAY * DAYS_PER_WEEK
202: 
203: MUSECONDS_PER_DAY = 1e6 * SEC_PER_DAY
204: 
205: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY = (
206:     MO, TU, WE, TH, FR, SA, SU)
207: WEEKDAYS = (MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY)
208: 
209: 
210: def _to_ordinalf(dt):
211:     '''
212:     Convert :mod:`datetime` or :mod:`date` to the Gregorian date as UTC float
213:     days, preserving hours, minutes, seconds and microseconds.  Return value
214:     is a :func:`float`.
215:     '''
216:     # Convert to UTC
217:     tzi = getattr(dt, 'tzinfo', None)
218:     if tzi is not None:
219:         dt = dt.astimezone(UTC)
220:         tzi = UTC
221: 
222:     base = float(dt.toordinal())
223: 
224:     # If it's sufficiently datetime-like, it will have a `date()` method
225:     cdate = getattr(dt, 'date', lambda: None)()
226:     if cdate is not None:
227:         # Get a datetime object at midnight UTC
228:         midnight_time = datetime.time(0, tzinfo=tzi)
229: 
230:         rdt = datetime.datetime.combine(cdate, midnight_time)
231: 
232:         # Append the seconds as a fraction of a day
233:         base += (dt - rdt).total_seconds() / SEC_PER_DAY
234: 
235:     return base
236: 
237: 
238: # a version of _to_ordinalf that can operate on numpy arrays
239: _to_ordinalf_np_vectorized = np.vectorize(_to_ordinalf)
240: 
241: 
242: def _from_ordinalf(x, tz=None):
243:     '''
244:     Convert Gregorian float of the date, preserving hours, minutes,
245:     seconds and microseconds.  Return value is a :class:`datetime`.
246: 
247:     The input date `x` is a float in ordinal days at UTC, and the output will
248:     be the specified :class:`datetime` object corresponding to that time in
249:     timezone `tz`, or if `tz` is `None`, in the timezone specified in
250:     `rcParams['timezone']`.
251:     '''
252:     if tz is None:
253:         tz = _get_rc_timezone()
254: 
255:     ix = int(x)
256:     dt = datetime.datetime.fromordinal(ix).replace(tzinfo=UTC)
257: 
258:     remainder = float(x) - ix
259: 
260:     # Round down to the nearest microsecond.
261:     dt += datetime.timedelta(microseconds=int(remainder * MUSECONDS_PER_DAY))
262: 
263:     # Compensate for rounding errors
264:     if dt.microsecond < 10:
265:         dt = dt.replace(microsecond=0)
266:     elif dt.microsecond > 999990:
267:         dt += datetime.timedelta(microseconds=1e6 - dt.microsecond)
268: 
269:     return dt.astimezone(tz)
270: 
271: 
272: # a version of _from_ordinalf that can operate on numpy arrays
273: _from_ordinalf_np_vectorized = np.vectorize(_from_ordinalf)
274: 
275: 
276: class strpdate2num(object):
277:     '''
278:     Use this class to parse date strings to matplotlib datenums when
279:     you know the date format string of the date you are parsing.
280:     '''
281:     def __init__(self, fmt):
282:         ''' fmt: any valid strptime format is supported '''
283:         self.fmt = fmt
284: 
285:     def __call__(self, s):
286:         '''s : string to be converted
287:            return value: a date2num float
288:         '''
289:         return date2num(datetime.datetime(*time.strptime(s, self.fmt)[:6]))
290: 
291: 
292: class bytespdate2num(strpdate2num):
293:     '''
294:     Use this class to parse date strings to matplotlib datenums when
295:     you know the date format string of the date you are parsing.  See
296:     :file:`examples/misc/load_converter.py`.
297:     '''
298:     def __init__(self, fmt, encoding='utf-8'):
299:         '''
300:         Args:
301:             fmt: any valid strptime format is supported
302:             encoding: encoding to use on byte input (default: 'utf-8')
303:         '''
304:         super(bytespdate2num, self).__init__(fmt)
305:         self.encoding = encoding
306: 
307:     def __call__(self, b):
308:         '''
309:         Args:
310:             b: byte input to be converted
311:         Returns:
312:             A date2num float
313:         '''
314:         s = b.decode(self.encoding)
315:         return super(bytespdate2num, self).__call__(s)
316: 
317: 
318: # a version of dateutil.parser.parse that can operate on nump0y arrays
319: _dateutil_parser_parse_np_vectorized = np.vectorize(dateutil.parser.parse)
320: 
321: 
322: def datestr2num(d, default=None):
323:     '''
324:     Convert a date string to a datenum using
325:     :func:`dateutil.parser.parse`.
326: 
327:     Parameters
328:     ----------
329:     d : string or sequence of strings
330:         The dates to convert.
331: 
332:     default : datetime instance, optional
333:         The default date to use when fields are missing in *d*.
334:     '''
335:     if isinstance(d, six.string_types):
336:         dt = dateutil.parser.parse(d, default=default)
337:         return date2num(dt)
338:     else:
339:         if default is not None:
340:             d = [dateutil.parser.parse(s, default=default) for s in d]
341:         d = np.asarray(d)
342:         if not d.size:
343:             return d
344:         return date2num(_dateutil_parser_parse_np_vectorized(d))
345: 
346: 
347: def date2num(d):
348:     '''
349:     Converts datetime objects to Matplotlib dates.
350: 
351:     Parameters
352:     ----------
353:     d : :class:`datetime` or sequence of :class:`datetime`
354: 
355:     Returns
356:     -------
357:     float or sequence of floats
358:         Number of days (fraction part represents hours, minutes, seconds)
359:         since 0001-01-01 00:00:00 UTC, plus one.
360: 
361:     Notes
362:     -----
363:     The addition of one here is a historical artifact. Also, note that the
364:     Gregorian calendar is assumed; this is not universal practice.
365:     For details see the module docstring.
366:     '''
367:     if not cbook.iterable(d):
368:         return _to_ordinalf(d)
369:     else:
370:         d = np.asarray(d)
371:         if not d.size:
372:             return d
373:         return _to_ordinalf_np_vectorized(d)
374: 
375: 
376: def julian2num(j):
377:     '''
378:     Convert a Julian date (or sequence) to a matplotlib date (or sequence).
379: 
380:     Parameters
381:     ----------
382:     k : float or sequence of floats
383:         Julian date(s)
384: 
385:     Returns
386:     -------
387:     float or sequence of floats
388:         Matplotlib date(s)
389:     '''
390:     if cbook.iterable(j):
391:         j = np.asarray(j)
392:     return j - JULIAN_OFFSET
393: 
394: 
395: def num2julian(n):
396:     '''
397:     Convert a Matplotlib date (or sequence) to a Julian date (or sequence).
398: 
399:     Parameters
400:     ----------
401:     n : float or sequence of floats
402:         Matplotlib date(s)
403: 
404:     Returns
405:     -------
406:     float or sequence of floats
407:         Julian date(s)
408:     '''
409:     if cbook.iterable(n):
410:         n = np.asarray(n)
411:     return n + JULIAN_OFFSET
412: 
413: 
414: def num2date(x, tz=None):
415:     '''
416:     Parameters
417:     ----------
418:     x : float or sequence of floats
419:         Number of days (fraction part represents hours, minutes, seconds)
420:         since 0001-01-01 00:00:00 UTC, plus one.
421:     tz : string, optional
422:         Timezone of *x* (defaults to rcparams TZ value).
423: 
424:     Returns
425:     -------
426:     :class:`datetime` or sequence of :class:`datetime`
427:         Dates are returned in timezone *tz*
428: 
429:     If *x* is a sequence, a sequence of :class:`datetime` objects will
430:     be returned.
431: 
432:     Notes
433:     -----
434:     The addition of one here is a historical artifact. Also, note that the
435:     Gregorian calendar is assumed; this is not universal practice.
436:     For details, see the module docstring.
437:     '''
438:     if tz is None:
439:         tz = _get_rc_timezone()
440:     if not cbook.iterable(x):
441:         return _from_ordinalf(x, tz)
442:     else:
443:         x = np.asarray(x)
444:         if not x.size:
445:             return x
446:         return _from_ordinalf_np_vectorized(x, tz).tolist()
447: 
448: 
449: def _ordinalf_to_timedelta(x):
450:     return datetime.timedelta(days=x)
451: 
452: 
453: _ordinalf_to_timedelta_np_vectorized = np.vectorize(_ordinalf_to_timedelta)
454: 
455: 
456: def num2timedelta(x):
457:     '''
458:     Converts number of days to a :class:`timdelta` object.
459:     If *x* is a sequence, a sequence of :class:`timedelta` objects will
460:     be returned.
461: 
462:     Parameters
463:     ----------
464:     x : float, sequence of floats
465:         Number of days (fraction part represents hours, minutes, seconds)
466: 
467:     Returns
468:     -------
469:     :class:`timedelta` or list[:class:`timedelta`]
470: 
471:     '''
472:     if not cbook.iterable(x):
473:         return _ordinalf_to_timedelta(x)
474:     else:
475:         x = np.asarray(x)
476:         if not x.size:
477:             return x
478:         return _ordinalf_to_timedelta_np_vectorized(x).tolist()
479: 
480: 
481: def drange(dstart, dend, delta):
482:     '''
483:     Return a date range as float Gregorian ordinals.  *dstart* and
484:     *dend* are :class:`datetime` instances.  *delta* is a
485:     :class:`datetime.timedelta` instance.
486:     '''
487:     f1 = _to_ordinalf(dstart)
488:     f2 = _to_ordinalf(dend)
489:     step = delta.total_seconds() / SEC_PER_DAY
490: 
491:     # calculate the difference between dend and dstart in times of delta
492:     num = int(np.ceil((f2 - f1) / step))
493: 
494:     # calculate end of the interval which will be generated
495:     dinterval_end = dstart + num * delta
496: 
497:     # ensure, that an half open interval will be generated [dstart, dend)
498:     if dinterval_end >= dend:
499:         # if the endpoint is greated than dend, just subtract one delta
500:         dinterval_end -= delta
501:         num -= 1
502: 
503:     f2 = _to_ordinalf(dinterval_end)  # new float-endpoint
504:     return np.linspace(f1, f2, num + 1)
505: 
506: ### date tickers and formatters ###
507: 
508: 
509: class DateFormatter(ticker.Formatter):
510:     '''
511:     Tick location is seconds since the epoch.  Use a :func:`strftime`
512:     format string.
513: 
514:     Python only supports :mod:`datetime` :func:`strftime` formatting
515:     for years greater than 1900.  Thanks to Andrew Dalke, Dalke
516:     Scientific Software who contributed the :func:`strftime` code
517:     below to include dates earlier than this year.
518:     '''
519: 
520:     illegal_s = re.compile(r"((^|[^%])(%%)*%s)")
521: 
522:     def __init__(self, fmt, tz=None):
523:         '''
524:         *fmt* is a :func:`strftime` format string; *tz* is the
525:          :class:`tzinfo` instance.
526:         '''
527:         if tz is None:
528:             tz = _get_rc_timezone()
529:         self.fmt = fmt
530:         self.tz = tz
531: 
532:     def __call__(self, x, pos=0):
533:         if x == 0:
534:             raise ValueError('DateFormatter found a value of x=0, which is '
535:                              'an illegal date.  This usually occurs because '
536:                              'you have not informed the axis that it is '
537:                              'plotting dates, e.g., with ax.xaxis_date()')
538:         dt = num2date(x, self.tz)
539:         return self.strftime(dt, self.fmt)
540: 
541:     def set_tzinfo(self, tz):
542:         self.tz = tz
543: 
544:     def _replace_common_substr(self, s1, s2, sub1, sub2, replacement):
545:         '''Helper function for replacing substrings sub1 and sub2
546:         located at the same indexes in strings s1 and s2 respectively,
547:         with the string replacement.  It is expected that sub1 and sub2
548:         have the same length.  Returns the pair s1, s2 after the
549:         substitutions.
550:         '''
551:         # Find common indexes of substrings sub1 in s1 and sub2 in s2
552:         # and make substitutions inplace. Because this is inplace,
553:         # it is okay if len(replacement) != len(sub1), len(sub2).
554:         i = 0
555:         while True:
556:             j = s1.find(sub1, i)
557:             if j == -1:
558:                 break
559: 
560:             i = j + 1
561:             if s2[j:j + len(sub2)] != sub2:
562:                 continue
563: 
564:             s1 = s1[:j] + replacement + s1[j + len(sub1):]
565:             s2 = s2[:j] + replacement + s2[j + len(sub2):]
566: 
567:         return s1, s2
568: 
569:     def strftime_pre_1900(self, dt, fmt=None):
570:         '''Call time.strftime for years before 1900 by rolling
571:         forward a multiple of 28 years.
572: 
573:         *fmt* is a :func:`strftime` format string.
574: 
575:         Dalke: I hope I did this math right.  Every 28 years the
576:         calendar repeats, except through century leap years excepting
577:         the 400 year leap years.  But only if you're using the Gregorian
578:         calendar.
579:         '''
580:         if fmt is None:
581:             fmt = self.fmt
582: 
583:         # Since python's time module's strftime implementation does not
584:         # support %f microsecond (but the datetime module does), use a
585:         # regular expression substitution to replace instances of %f.
586:         # Note that this can be useful since python's floating-point
587:         # precision representation for datetime causes precision to be
588:         # more accurate closer to year 0 (around the year 2000, precision
589:         # can be at 10s of microseconds).
590:         fmt = re.sub(r'((^|[^%])(%%)*)%f',
591:                      r'\g<1>{0:06d}'.format(dt.microsecond), fmt)
592: 
593:         year = dt.year
594:         # For every non-leap year century, advance by
595:         # 6 years to get into the 28-year repeat cycle
596:         delta = 2000 - year
597:         off = 6 * (delta // 100 + delta // 400)
598:         year = year + off
599: 
600:         # Move to between the years 1973 and 2000
601:         year1 = year + ((2000 - year) // 28) * 28
602:         year2 = year1 + 28
603:         timetuple = dt.timetuple()
604:         # Generate timestamp string for year and year+28
605:         s1 = time.strftime(fmt, (year1,) + timetuple[1:])
606:         s2 = time.strftime(fmt, (year2,) + timetuple[1:])
607: 
608:         # Replace instances of respective years (both 2-digit and 4-digit)
609:         # that are located at the same indexes of s1, s2 with dt's year.
610:         # Note that C++'s strftime implementation does not use padded
611:         # zeros or padded whitespace for %y or %Y for years before 100, but
612:         # uses padded zeros for %x. (For example, try the runnable examples
613:         # with .tm_year in the interval [-1900, -1800] on
614:         # http://en.cppreference.com/w/c/chrono/strftime.) For ease of
615:         # implementation, we always use padded zeros for %y, %Y, and %x.
616:         s1, s2 = self._replace_common_substr(s1, s2,
617:                                              "{0:04d}".format(year1),
618:                                              "{0:04d}".format(year2),
619:                                              "{0:04d}".format(dt.year))
620:         s1, s2 = self._replace_common_substr(s1, s2,
621:                                              "{0:02d}".format(year1 % 100),
622:                                              "{0:02d}".format(year2 % 100),
623:                                              "{0:02d}".format(dt.year % 100))
624:         return cbook.unicode_safe(s1)
625: 
626:     def strftime(self, dt, fmt=None):
627:         '''Refer to documentation for datetime.strftime.
628: 
629:         *fmt* is a :func:`strftime` format string.
630: 
631:         Warning: For years before 1900, depending upon the current
632:         locale it is possible that the year displayed with %x might
633:         be incorrect. For years before 100, %y and %Y will yield
634:         zero-padded strings.
635:         '''
636:         if fmt is None:
637:             fmt = self.fmt
638:         fmt = self.illegal_s.sub(r"\1", fmt)
639:         fmt = fmt.replace("%s", "s")
640:         if dt.year >= 1900:
641:             # Note: in python 3.3 this is okay for years >= 1000,
642:             # refer to http://bugs.python.org/issue177742
643:             return cbook.unicode_safe(dt.strftime(fmt))
644: 
645:         return self.strftime_pre_1900(dt, fmt)
646: 
647: 
648: class IndexDateFormatter(ticker.Formatter):
649:     '''
650:     Use with :class:`~matplotlib.ticker.IndexLocator` to cycle format
651:     strings by index.
652:     '''
653:     def __init__(self, t, fmt, tz=None):
654:         '''
655:         *t* is a sequence of dates (floating point days).  *fmt* is a
656:         :func:`strftime` format string.
657:         '''
658:         if tz is None:
659:             tz = _get_rc_timezone()
660:         self.t = t
661:         self.fmt = fmt
662:         self.tz = tz
663: 
664:     def __call__(self, x, pos=0):
665:         'Return the label for time *x* at position *pos*'
666:         ind = int(np.round(x))
667:         if ind >= len(self.t) or ind <= 0:
668:             return ''
669: 
670:         dt = num2date(self.t[ind], self.tz)
671: 
672:         return cbook.unicode_safe(dt.strftime(self.fmt))
673: 
674: 
675: class AutoDateFormatter(ticker.Formatter):
676:     '''
677:     This class attempts to figure out the best format to use.  This is
678:     most useful when used with the :class:`AutoDateLocator`.
679: 
680: 
681:     The AutoDateFormatter has a scale dictionary that maps the scale
682:     of the tick (the distance in days between one major tick) and a
683:     format string.  The default looks like this::
684: 
685:         self.scaled = {
686:             DAYS_PER_YEAR: rcParams['date.autoformat.year'],
687:             DAYS_PER_MONTH: rcParams['date.autoformat.month'],
688:             1.0: rcParams['date.autoformat.day'],
689:             1. / HOURS_PER_DAY: rcParams['date.autoformat.hour'],
690:             1. / (MINUTES_PER_DAY): rcParams['date.autoformat.minute'],
691:             1. / (SEC_PER_DAY): rcParams['date.autoformat.second'],
692:             1. / (MUSECONDS_PER_DAY): rcParams['date.autoformat.microsecond'],
693:             }
694: 
695: 
696:     The algorithm picks the key in the dictionary that is >= the
697:     current scale and uses that format string.  You can customize this
698:     dictionary by doing::
699: 
700: 
701:     >>> locator = AutoDateLocator()
702:     >>> formatter = AutoDateFormatter(locator)
703:     >>> formatter.scaled[1/(24.*60.)] = '%M:%S' # only show min and sec
704: 
705:     A custom :class:`~matplotlib.ticker.FuncFormatter` can also be used.
706:     The following example shows how to use a custom format function to strip
707:     trailing zeros from decimal seconds and adds the date to the first
708:     ticklabel::
709: 
710:         >>> def my_format_function(x, pos=None):
711:         ...     x = matplotlib.dates.num2date(x)
712:         ...     if pos == 0:
713:         ...         fmt = '%D %H:%M:%S.%f'
714:         ...     else:
715:         ...         fmt = '%H:%M:%S.%f'
716:         ...     label = x.strftime(fmt)
717:         ...     label = label.rstrip("0")
718:         ...     label = label.rstrip(".")
719:         ...     return label
720:         >>> from matplotlib.ticker import FuncFormatter
721:         >>> formatter.scaled[1/(24.*60.)] = FuncFormatter(my_format_function)
722:     '''
723: 
724:     # This can be improved by providing some user-level direction on
725:     # how to choose the best format (precedence, etc...)
726: 
727:     # Perhaps a 'struct' that has a field for each time-type where a
728:     # zero would indicate "don't show" and a number would indicate
729:     # "show" with some sort of priority.  Same priorities could mean
730:     # show all with the same priority.
731: 
732:     # Or more simply, perhaps just a format string for each
733:     # possibility...
734: 
735:     def __init__(self, locator, tz=None, defaultfmt='%Y-%m-%d'):
736:         '''
737:         Autoformat the date labels.  The default format is the one to use
738:         if none of the values in ``self.scaled`` are greater than the unit
739:         returned by ``locator._get_unit()``.
740:         '''
741:         self._locator = locator
742:         self._tz = tz
743:         self.defaultfmt = defaultfmt
744:         self._formatter = DateFormatter(self.defaultfmt, tz)
745:         self.scaled = {DAYS_PER_YEAR: rcParams['date.autoformatter.year'],
746:                        DAYS_PER_MONTH: rcParams['date.autoformatter.month'],
747:                        1.0: rcParams['date.autoformatter.day'],
748:                        1. / HOURS_PER_DAY: rcParams['date.autoformatter.hour'],
749:                        1. / (MINUTES_PER_DAY):
750:                            rcParams['date.autoformatter.minute'],
751:                        1. / (SEC_PER_DAY):
752:                            rcParams['date.autoformatter.second'],
753:                        1. / (MUSECONDS_PER_DAY):
754:                            rcParams['date.autoformatter.microsecond']}
755: 
756:     def __call__(self, x, pos=None):
757:         locator_unit_scale = float(self._locator._get_unit())
758:         # Pick the first scale which is greater than the locator unit.
759:         fmt = next((fmt for scale, fmt in sorted(self.scaled.items())
760:                     if scale >= locator_unit_scale),
761:                    self.defaultfmt)
762: 
763:         if isinstance(fmt, six.string_types):
764:             self._formatter = DateFormatter(fmt, self._tz)
765:             result = self._formatter(x, pos)
766:         elif callable(fmt):
767:             result = fmt(x, pos)
768:         else:
769:             raise TypeError('Unexpected type passed to {0!r}.'.format(self))
770: 
771:         return result
772: 
773: 
774: class rrulewrapper(object):
775: 
776:     def __init__(self, freq, **kwargs):
777:         self._construct = kwargs.copy()
778:         self._construct["freq"] = freq
779:         self._rrule = rrule(**self._construct)
780: 
781:     def set(self, **kwargs):
782:         self._construct.update(kwargs)
783:         self._rrule = rrule(**self._construct)
784: 
785:     def __getattr__(self, name):
786:         if name in self.__dict__:
787:             return self.__dict__[name]
788:         return getattr(self._rrule, name)
789: 
790:     def __setstate__(self, state):
791:         self.__dict__.update(state)
792: 
793: 
794: class DateLocator(ticker.Locator):
795:     '''
796:     Determines the tick locations when plotting dates.
797:     '''
798:     hms0d = {'byhour': 0, 'byminute': 0, 'bysecond': 0}
799: 
800:     def __init__(self, tz=None):
801:         '''
802:         *tz* is a :class:`tzinfo` instance.
803:         '''
804:         if tz is None:
805:             tz = _get_rc_timezone()
806:         self.tz = tz
807: 
808:     def set_tzinfo(self, tz):
809:         '''
810:         Set time zone info.
811:         '''
812:         self.tz = tz
813: 
814:     def datalim_to_dt(self):
815:         '''
816:         Convert axis data interval to datetime objects.
817:         '''
818:         dmin, dmax = self.axis.get_data_interval()
819:         if dmin > dmax:
820:             dmin, dmax = dmax, dmin
821: 
822:         return num2date(dmin, self.tz), num2date(dmax, self.tz)
823: 
824:     def viewlim_to_dt(self):
825:         '''
826:         Converts the view interval to datetime objects.
827:         '''
828:         vmin, vmax = self.axis.get_view_interval()
829:         if vmin > vmax:
830:             vmin, vmax = vmax, vmin
831: 
832:         return num2date(vmin, self.tz), num2date(vmax, self.tz)
833: 
834:     def _get_unit(self):
835:         '''
836:         Return how many days a unit of the locator is; used for
837:         intelligent autoscaling.
838:         '''
839:         return 1
840: 
841:     def _get_interval(self):
842:         '''
843:         Return the number of units for each tick.
844:         '''
845:         return 1
846: 
847:     def nonsingular(self, vmin, vmax):
848:         '''
849:         Given the proposed upper and lower extent, adjust the range
850:         if it is too close to being singular (i.e. a range of ~0).
851: 
852:         '''
853:         unit = self._get_unit()
854:         interval = self._get_interval()
855:         if abs(vmax - vmin) < 1e-6:
856:             vmin -= 2 * unit * interval
857:             vmax += 2 * unit * interval
858:         return vmin, vmax
859: 
860: 
861: class RRuleLocator(DateLocator):
862:     # use the dateutil rrule instance
863: 
864:     def __init__(self, o, tz=None):
865:         DateLocator.__init__(self, tz)
866:         self.rule = o
867: 
868:     def __call__(self):
869:         # if no data have been set, this will tank with a ValueError
870:         try:
871:             dmin, dmax = self.viewlim_to_dt()
872:         except ValueError:
873:             return []
874: 
875:         return self.tick_values(dmin, dmax)
876: 
877:     def tick_values(self, vmin, vmax):
878:         delta = relativedelta(vmax, vmin)
879: 
880:         # We need to cap at the endpoints of valid datetime
881:         try:
882:             start = vmin - delta
883:         except (ValueError, OverflowError):
884:             start = _from_ordinalf(1.0)
885: 
886:         try:
887:             stop = vmax + delta
888:         except (ValueError, OverflowError):
889:             # The magic number!
890:             stop = _from_ordinalf(3652059.9999999)
891: 
892:         self.rule.set(dtstart=start, until=stop)
893: 
894:         dates = self.rule.between(vmin, vmax, True)
895:         if len(dates) == 0:
896:             return date2num([vmin, vmax])
897:         return self.raise_if_exceeds(date2num(dates))
898: 
899:     def _get_unit(self):
900:         '''
901:         Return how many days a unit of the locator is; used for
902:         intelligent autoscaling.
903:         '''
904:         freq = self.rule._rrule._freq
905:         return self.get_unit_generic(freq)
906: 
907:     @staticmethod
908:     def get_unit_generic(freq):
909:         if freq == YEARLY:
910:             return DAYS_PER_YEAR
911:         elif freq == MONTHLY:
912:             return DAYS_PER_MONTH
913:         elif freq == WEEKLY:
914:             return DAYS_PER_WEEK
915:         elif freq == DAILY:
916:             return 1.0
917:         elif freq == HOURLY:
918:             return 1.0 / HOURS_PER_DAY
919:         elif freq == MINUTELY:
920:             return 1.0 / MINUTES_PER_DAY
921:         elif freq == SECONDLY:
922:             return 1.0 / SEC_PER_DAY
923:         else:
924:             # error
925:             return -1   # or should this just return '1'?
926: 
927:     def _get_interval(self):
928:         return self.rule._rrule._interval
929: 
930:     def autoscale(self):
931:         '''
932:         Set the view limits to include the data range.
933:         '''
934:         dmin, dmax = self.datalim_to_dt()
935:         delta = relativedelta(dmax, dmin)
936: 
937:         # We need to cap at the endpoints of valid datetime
938:         try:
939:             start = dmin - delta
940:         except ValueError:
941:             start = _from_ordinalf(1.0)
942: 
943:         try:
944:             stop = dmax + delta
945:         except ValueError:
946:             # The magic number!
947:             stop = _from_ordinalf(3652059.9999999)
948: 
949:         self.rule.set(dtstart=start, until=stop)
950:         dmin, dmax = self.datalim_to_dt()
951: 
952:         vmin = self.rule.before(dmin, True)
953:         if not vmin:
954:             vmin = dmin
955: 
956:         vmax = self.rule.after(dmax, True)
957:         if not vmax:
958:             vmax = dmax
959: 
960:         vmin = date2num(vmin)
961:         vmax = date2num(vmax)
962: 
963:         return self.nonsingular(vmin, vmax)
964: 
965: 
966: class AutoDateLocator(DateLocator):
967:     '''
968:     On autoscale, this class picks the best
969:     :class:`DateLocator` to set the view limits and the tick
970:     locations.
971:     '''
972:     def __init__(self, tz=None, minticks=5, maxticks=None,
973:                  interval_multiples=False):
974:         '''
975:         *minticks* is the minimum number of ticks desired, which is used to
976:         select the type of ticking (yearly, monthly, etc.).
977: 
978:         *maxticks* is the maximum number of ticks desired, which controls
979:         any interval between ticks (ticking every other, every 3, etc.).
980:         For really fine-grained control, this can be a dictionary mapping
981:         individual rrule frequency constants (YEARLY, MONTHLY, etc.)
982:         to their own maximum number of ticks.  This can be used to keep
983:         the number of ticks appropriate to the format chosen in
984:         :class:`AutoDateFormatter`. Any frequency not specified in this
985:         dictionary is given a default value.
986: 
987:         *tz* is a :class:`tzinfo` instance.
988: 
989:         *interval_multiples* is a boolean that indicates whether ticks
990:         should be chosen to be multiple of the interval. This will lock
991:         ticks to 'nicer' locations. For example, this will force the
992:         ticks to be at hours 0,6,12,18 when hourly ticking is done at
993:         6 hour intervals.
994: 
995:         The AutoDateLocator has an interval dictionary that maps the
996:         frequency of the tick (a constant from dateutil.rrule) and a
997:         multiple allowed for that ticking.  The default looks like this::
998: 
999:           self.intervald = {
1000:             YEARLY  : [1, 2, 4, 5, 10, 20, 40, 50, 100, 200, 400, 500,
1001:                       1000, 2000, 4000, 5000, 10000],
1002:             MONTHLY : [1, 2, 3, 4, 6],
1003:             DAILY   : [1, 2, 3, 7, 14],
1004:             HOURLY  : [1, 2, 3, 4, 6, 12],
1005:             MINUTELY: [1, 5, 10, 15, 30],
1006:             SECONDLY: [1, 5, 10, 15, 30],
1007:             MICROSECONDLY: [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000,
1008:                            5000, 10000, 20000, 50000, 100000, 200000, 500000,
1009:                            1000000],
1010:             }
1011: 
1012:         The interval is used to specify multiples that are appropriate for
1013:         the frequency of ticking. For instance, every 7 days is sensible
1014:         for daily ticks, but for minutes/seconds, 15 or 30 make sense.
1015:         You can customize this dictionary by doing::
1016: 
1017:           locator = AutoDateLocator()
1018:           locator.intervald[HOURLY] = [3] # only show every 3 hours
1019:         '''
1020:         DateLocator.__init__(self, tz)
1021:         self._locator = YearLocator()
1022:         self._freq = YEARLY
1023:         self._freqs = [YEARLY, MONTHLY, DAILY, HOURLY, MINUTELY,
1024:                        SECONDLY, MICROSECONDLY]
1025:         self.minticks = minticks
1026: 
1027:         self.maxticks = {YEARLY: 11, MONTHLY: 12, DAILY: 11, HOURLY: 12,
1028:                          MINUTELY: 11, SECONDLY: 11, MICROSECONDLY: 8}
1029:         if maxticks is not None:
1030:             try:
1031:                 self.maxticks.update(maxticks)
1032:             except TypeError:
1033:                 # Assume we were given an integer. Use this as the maximum
1034:                 # number of ticks for every frequency and create a
1035:                 # dictionary for this
1036:                 self.maxticks = dict.fromkeys(self._freqs, maxticks)
1037:         self.interval_multiples = interval_multiples
1038:         self.intervald = {
1039:             YEARLY:   [1, 2, 4, 5, 10, 20, 40, 50, 100, 200, 400, 500,
1040:                        1000, 2000, 4000, 5000, 10000],
1041:             MONTHLY:  [1, 2, 3, 4, 6],
1042:             DAILY:    [1, 2, 3, 7, 14, 21],
1043:             HOURLY:   [1, 2, 3, 4, 6, 12],
1044:             MINUTELY: [1, 5, 10, 15, 30],
1045:             SECONDLY: [1, 5, 10, 15, 30],
1046:             MICROSECONDLY: [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000,
1047:                             5000, 10000, 20000, 50000, 100000, 200000, 500000,
1048:                             1000000]}
1049:         self._byranges = [None, range(1, 13), range(1, 32),
1050:                           range(0, 24), range(0, 60), range(0, 60), None]
1051: 
1052:     def __call__(self):
1053:         'Return the locations of the ticks'
1054:         self.refresh()
1055:         return self._locator()
1056: 
1057:     def tick_values(self, vmin, vmax):
1058:         return self.get_locator(vmin, vmax).tick_values(vmin, vmax)
1059: 
1060:     def nonsingular(self, vmin, vmax):
1061:         # whatever is thrown at us, we can scale the unit.
1062:         # But default nonsingular date plots at an ~4 year period.
1063:         if vmin == vmax:
1064:             vmin = vmin - DAYS_PER_YEAR * 2
1065:             vmax = vmax + DAYS_PER_YEAR * 2
1066:         return vmin, vmax
1067: 
1068:     def set_axis(self, axis):
1069:         DateLocator.set_axis(self, axis)
1070:         self._locator.set_axis(axis)
1071: 
1072:     def refresh(self):
1073:         'Refresh internal information based on current limits.'
1074:         dmin, dmax = self.viewlim_to_dt()
1075:         self._locator = self.get_locator(dmin, dmax)
1076: 
1077:     def _get_unit(self):
1078:         if self._freq in [MICROSECONDLY]:
1079:             return 1. / MUSECONDS_PER_DAY
1080:         else:
1081:             return RRuleLocator.get_unit_generic(self._freq)
1082: 
1083:     def autoscale(self):
1084:         'Try to choose the view limits intelligently.'
1085:         dmin, dmax = self.datalim_to_dt()
1086:         self._locator = self.get_locator(dmin, dmax)
1087:         return self._locator.autoscale()
1088: 
1089:     def get_locator(self, dmin, dmax):
1090:         'Pick the best locator based on a distance.'
1091:         delta = relativedelta(dmax, dmin)
1092:         tdelta = dmax - dmin
1093: 
1094:         # take absolute difference
1095:         if dmin > dmax:
1096:             delta = -delta
1097:             tdelta = -tdelta
1098: 
1099:         # The following uses a mix of calls to relativedelta and timedelta
1100:         # methods because there is incomplete overlap in the functionality of
1101:         # these similar functions, and it's best to avoid doing our own math
1102:         # whenever possible.
1103:         numYears = float(delta.years)
1104:         numMonths = (numYears * MONTHS_PER_YEAR) + delta.months
1105:         numDays = tdelta.days   # Avoids estimates of days/month, days/year
1106:         numHours = (numDays * HOURS_PER_DAY) + delta.hours
1107:         numMinutes = (numHours * MIN_PER_HOUR) + delta.minutes
1108:         numSeconds = np.floor(tdelta.total_seconds())
1109:         numMicroseconds = np.floor(tdelta.total_seconds() * 1e6)
1110: 
1111:         nums = [numYears, numMonths, numDays, numHours, numMinutes,
1112:                 numSeconds, numMicroseconds]
1113: 
1114:         use_rrule_locator = [True] * 6 + [False]
1115: 
1116:         # Default setting of bymonth, etc. to pass to rrule
1117:         # [unused (for year), bymonth, bymonthday, byhour, byminute,
1118:         #  bysecond, unused (for microseconds)]
1119:         byranges = [None, 1, 1, 0, 0, 0, None]
1120: 
1121:         # Loop over all the frequencies and try to find one that gives at
1122:         # least a minticks tick positions.  Once this is found, look for
1123:         # an interval from an list specific to that frequency that gives no
1124:         # more than maxticks tick positions. Also, set up some ranges
1125:         # (bymonth, etc.) as appropriate to be passed to rrulewrapper.
1126:         for i, (freq, num) in enumerate(zip(self._freqs, nums)):
1127:             # If this particular frequency doesn't give enough ticks, continue
1128:             if num < self.minticks:
1129:                 # Since we're not using this particular frequency, set
1130:                 # the corresponding by_ to None so the rrule can act as
1131:                 # appropriate
1132:                 byranges[i] = None
1133:                 continue
1134: 
1135:             # Find the first available interval that doesn't give too many
1136:             # ticks
1137:             for interval in self.intervald[freq]:
1138:                 if num <= interval * (self.maxticks[freq] - 1):
1139:                     break
1140:             else:
1141:                 # We went through the whole loop without breaking, default to
1142:                 # the last interval in the list and raise a warning
1143:                 warnings.warn('AutoDateLocator was unable to pick an '
1144:                               'appropriate interval for this date range. '
1145:                               'It may be necessary to add an interval value '
1146:                               "to the AutoDateLocator's intervald dictionary."
1147:                               ' Defaulting to {0}.'.format(interval))
1148: 
1149:             # Set some parameters as appropriate
1150:             self._freq = freq
1151: 
1152:             if self._byranges[i] and self.interval_multiples:
1153:                 byranges[i] = self._byranges[i][::interval]
1154:                 interval = 1
1155:             else:
1156:                 byranges[i] = self._byranges[i]
1157: 
1158:             # We found what frequency to use
1159:             break
1160:         else:
1161:             raise ValueError('No sensible date limit could be found in the '
1162:                              'AutoDateLocator.')
1163: 
1164:         if use_rrule_locator[i]:
1165:             _, bymonth, bymonthday, byhour, byminute, bysecond, _ = byranges
1166: 
1167:             rrule = rrulewrapper(self._freq, interval=interval,
1168:                                  dtstart=dmin, until=dmax,
1169:                                  bymonth=bymonth, bymonthday=bymonthday,
1170:                                  byhour=byhour, byminute=byminute,
1171:                                  bysecond=bysecond)
1172: 
1173:             locator = RRuleLocator(rrule, self.tz)
1174:         else:
1175:             locator = MicrosecondLocator(interval, tz=self.tz)
1176: 
1177:         locator.set_axis(self.axis)
1178: 
1179:         locator.set_view_interval(*self.axis.get_view_interval())
1180:         locator.set_data_interval(*self.axis.get_data_interval())
1181:         return locator
1182: 
1183: 
1184: class YearLocator(DateLocator):
1185:     '''
1186:     Make ticks on a given day of each year that is a multiple of base.
1187: 
1188:     Examples::
1189: 
1190:       # Tick every year on Jan 1st
1191:       locator = YearLocator()
1192: 
1193:       # Tick every 5 years on July 4th
1194:       locator = YearLocator(5, month=7, day=4)
1195:     '''
1196:     def __init__(self, base=1, month=1, day=1, tz=None):
1197:         '''
1198:         Mark years that are multiple of base on a given month and day
1199:         (default jan 1).
1200:         '''
1201:         DateLocator.__init__(self, tz)
1202:         self.base = ticker.Base(base)
1203:         self.replaced = {'month':  month,
1204:                          'day':    day,
1205:                          'hour':   0,
1206:                          'minute': 0,
1207:                          'second': 0,
1208:                          'tzinfo': tz
1209:                          }
1210: 
1211:     def __call__(self):
1212:         # if no data have been set, this will tank with a ValueError
1213:         try:
1214:             dmin, dmax = self.viewlim_to_dt()
1215:         except ValueError:
1216:             return []
1217: 
1218:         return self.tick_values(dmin, dmax)
1219: 
1220:     def tick_values(self, vmin, vmax):
1221:         ymin = self.base.le(vmin.year)
1222:         ymax = self.base.ge(vmax.year)
1223: 
1224:         ticks = [vmin.replace(year=ymin, **self.replaced)]
1225:         while True:
1226:             dt = ticks[-1]
1227:             if dt.year >= ymax:
1228:                 return date2num(ticks)
1229:             year = dt.year + self.base.get_base()
1230:             ticks.append(dt.replace(year=year, **self.replaced))
1231: 
1232:     def autoscale(self):
1233:         '''
1234:         Set the view limits to include the data range.
1235:         '''
1236:         dmin, dmax = self.datalim_to_dt()
1237: 
1238:         ymin = self.base.le(dmin.year)
1239:         ymax = self.base.ge(dmax.year)
1240:         vmin = dmin.replace(year=ymin, **self.replaced)
1241:         vmax = dmax.replace(year=ymax, **self.replaced)
1242: 
1243:         vmin = date2num(vmin)
1244:         vmax = date2num(vmax)
1245:         return self.nonsingular(vmin, vmax)
1246: 
1247: 
1248: class MonthLocator(RRuleLocator):
1249:     '''
1250:     Make ticks on occurances of each month month, e.g., 1, 3, 12.
1251:     '''
1252:     def __init__(self, bymonth=None, bymonthday=1, interval=1, tz=None):
1253:         '''
1254:         Mark every month in *bymonth*; *bymonth* can be an int or
1255:         sequence.  Default is ``range(1,13)``, i.e. every month.
1256: 
1257:         *interval* is the interval between each iteration.  For
1258:         example, if ``interval=2``, mark every second occurance.
1259:         '''
1260:         if bymonth is None:
1261:             bymonth = range(1, 13)
1262:         elif isinstance(bymonth, np.ndarray):
1263:             # This fixes a bug in dateutil <= 2.3 which prevents the use of
1264:             # numpy arrays in (among other things) the bymonthday, byweekday
1265:             # and bymonth parameters.
1266:             bymonth = [x.item() for x in bymonth.astype(int)]
1267: 
1268:         rule = rrulewrapper(MONTHLY, bymonth=bymonth, bymonthday=bymonthday,
1269:                          interval=interval, **self.hms0d)
1270:         RRuleLocator.__init__(self, rule, tz)
1271: 
1272: 
1273: class WeekdayLocator(RRuleLocator):
1274:     '''
1275:     Make ticks on occurances of each weekday.
1276:     '''
1277: 
1278:     def __init__(self, byweekday=1, interval=1, tz=None):
1279:         '''
1280:         Mark every weekday in *byweekday*; *byweekday* can be a number or
1281:         sequence.
1282: 
1283:         Elements of *byweekday* must be one of MO, TU, WE, TH, FR, SA,
1284:         SU, the constants from :mod:`dateutil.rrule`, which have been
1285:         imported into the :mod:`matplotlib.dates` namespace.
1286: 
1287:         *interval* specifies the number of weeks to skip.  For example,
1288:         ``interval=2`` plots every second week.
1289:         '''
1290:         if isinstance(byweekday, np.ndarray):
1291:             # This fixes a bug in dateutil <= 2.3 which prevents the use of
1292:             # numpy arrays in (among other things) the bymonthday, byweekday
1293:             # and bymonth parameters.
1294:             [x.item() for x in byweekday.astype(int)]
1295: 
1296:         rule = rrulewrapper(DAILY, byweekday=byweekday,
1297:                             interval=interval, **self.hms0d)
1298:         RRuleLocator.__init__(self, rule, tz)
1299: 
1300: 
1301: class DayLocator(RRuleLocator):
1302:     '''
1303:     Make ticks on occurances of each day of the month.  For example,
1304:     1, 15, 30.
1305:     '''
1306:     def __init__(self, bymonthday=None, interval=1, tz=None):
1307:         '''
1308:         Mark every day in *bymonthday*; *bymonthday* can be an int or
1309:         sequence.
1310: 
1311:         Default is to tick every day of the month: ``bymonthday=range(1,32)``
1312:         '''
1313:         if not interval == int(interval) or interval < 1:
1314:             raise ValueError("interval must be an integer greater than 0")
1315:         if bymonthday is None:
1316:             bymonthday = range(1, 32)
1317:         elif isinstance(bymonthday, np.ndarray):
1318:             # This fixes a bug in dateutil <= 2.3 which prevents the use of
1319:             # numpy arrays in (among other things) the bymonthday, byweekday
1320:             # and bymonth parameters.
1321:             bymonthday = [x.item() for x in bymonthday.astype(int)]
1322: 
1323:         rule = rrulewrapper(DAILY, bymonthday=bymonthday,
1324:                             interval=interval, **self.hms0d)
1325:         RRuleLocator.__init__(self, rule, tz)
1326: 
1327: 
1328: class HourLocator(RRuleLocator):
1329:     '''
1330:     Make ticks on occurances of each hour.
1331:     '''
1332:     def __init__(self, byhour=None, interval=1, tz=None):
1333:         '''
1334:         Mark every hour in *byhour*; *byhour* can be an int or sequence.
1335:         Default is to tick every hour: ``byhour=range(24)``
1336: 
1337:         *interval* is the interval between each iteration.  For
1338:         example, if ``interval=2``, mark every second occurrence.
1339:         '''
1340:         if byhour is None:
1341:             byhour = range(24)
1342: 
1343:         rule = rrulewrapper(HOURLY, byhour=byhour, interval=interval,
1344:                             byminute=0, bysecond=0)
1345:         RRuleLocator.__init__(self, rule, tz)
1346: 
1347: 
1348: class MinuteLocator(RRuleLocator):
1349:     '''
1350:     Make ticks on occurances of each minute.
1351:     '''
1352:     def __init__(self, byminute=None, interval=1, tz=None):
1353:         '''
1354:         Mark every minute in *byminute*; *byminute* can be an int or
1355:         sequence.  Default is to tick every minute: ``byminute=range(60)``
1356: 
1357:         *interval* is the interval between each iteration.  For
1358:         example, if ``interval=2``, mark every second occurrence.
1359:         '''
1360:         if byminute is None:
1361:             byminute = range(60)
1362: 
1363:         rule = rrulewrapper(MINUTELY, byminute=byminute, interval=interval,
1364:                             bysecond=0)
1365:         RRuleLocator.__init__(self, rule, tz)
1366: 
1367: 
1368: class SecondLocator(RRuleLocator):
1369:     '''
1370:     Make ticks on occurances of each second.
1371:     '''
1372:     def __init__(self, bysecond=None, interval=1, tz=None):
1373:         '''
1374:         Mark every second in *bysecond*; *bysecond* can be an int or
1375:         sequence.  Default is to tick every second: ``bysecond = range(60)``
1376: 
1377:         *interval* is the interval between each iteration.  For
1378:         example, if ``interval=2``, mark every second occurrence.
1379: 
1380:         '''
1381:         if bysecond is None:
1382:             bysecond = range(60)
1383: 
1384:         rule = rrulewrapper(SECONDLY, bysecond=bysecond, interval=interval)
1385:         RRuleLocator.__init__(self, rule, tz)
1386: 
1387: 
1388: class MicrosecondLocator(DateLocator):
1389:     '''
1390:     Make ticks on occurances of each microsecond.
1391: 
1392:     '''
1393:     def __init__(self, interval=1, tz=None):
1394:         '''
1395:         *interval* is the interval between each iteration.  For
1396:         example, if ``interval=2``, mark every second microsecond.
1397: 
1398:         '''
1399:         self._interval = interval
1400:         self._wrapped_locator = ticker.MultipleLocator(interval)
1401:         self.tz = tz
1402: 
1403:     def set_axis(self, axis):
1404:         self._wrapped_locator.set_axis(axis)
1405:         return DateLocator.set_axis(self, axis)
1406: 
1407:     def set_view_interval(self, vmin, vmax):
1408:         self._wrapped_locator.set_view_interval(vmin, vmax)
1409:         return DateLocator.set_view_interval(self, vmin, vmax)
1410: 
1411:     def set_data_interval(self, vmin, vmax):
1412:         self._wrapped_locator.set_data_interval(vmin, vmax)
1413:         return DateLocator.set_data_interval(self, vmin, vmax)
1414: 
1415:     def __call__(self):
1416:         # if no data have been set, this will tank with a ValueError
1417:         try:
1418:             dmin, dmax = self.viewlim_to_dt()
1419:         except ValueError:
1420:             return []
1421: 
1422:         return self.tick_values(dmin, dmax)
1423: 
1424:     def tick_values(self, vmin, vmax):
1425:         nmin, nmax = date2num((vmin, vmax))
1426:         nmin *= MUSECONDS_PER_DAY
1427:         nmax *= MUSECONDS_PER_DAY
1428:         ticks = self._wrapped_locator.tick_values(nmin, nmax)
1429:         ticks = [tick / MUSECONDS_PER_DAY for tick in ticks]
1430:         return ticks
1431: 
1432:     def _get_unit(self):
1433:         '''
1434:         Return how many days a unit of the locator is; used for
1435:         intelligent autoscaling.
1436:         '''
1437:         return 1. / MUSECONDS_PER_DAY
1438: 
1439:     def _get_interval(self):
1440:         '''
1441:         Return the number of units for each tick.
1442:         '''
1443:         return self._interval
1444: 
1445: 
1446: def _close_to_dt(d1, d2, epsilon=5):
1447:     '''
1448:     Assert that datetimes *d1* and *d2* are within *epsilon* microseconds.
1449:     '''
1450:     delta = d2 - d1
1451:     mus = abs(delta.total_seconds() * 1e6)
1452:     assert mus < epsilon
1453: 
1454: 
1455: def _close_to_num(o1, o2, epsilon=5):
1456:     '''
1457:     Assert that float ordinals *o1* and *o2* are within *epsilon*
1458:     microseconds.
1459:     '''
1460:     delta = abs((o2 - o1) * MUSECONDS_PER_DAY)
1461:     assert delta < epsilon
1462: 
1463: 
1464: def epoch2num(e):
1465:     '''
1466:     Convert an epoch or sequence of epochs to the new date format,
1467:     that is days since 0001.
1468:     '''
1469:     return EPOCH_OFFSET + np.asarray(e) / SEC_PER_DAY
1470: 
1471: 
1472: def num2epoch(d):
1473:     '''
1474:     Convert days since 0001 to epoch.  *d* can be a number or sequence.
1475:     '''
1476:     return (np.asarray(d) - EPOCH_OFFSET) * SEC_PER_DAY
1477: 
1478: 
1479: def mx2num(mxdates):
1480:     '''
1481:     Convert mx :class:`datetime` instance (or sequence of mx
1482:     instances) to the new date format.
1483:     '''
1484:     scalar = False
1485:     if not cbook.iterable(mxdates):
1486:         scalar = True
1487:         mxdates = [mxdates]
1488:     ret = epoch2num([m.ticks() for m in mxdates])
1489:     if scalar:
1490:         return ret[0]
1491:     else:
1492:         return ret
1493: 
1494: 
1495: def date_ticker_factory(span, tz=None, numticks=5):
1496:     '''
1497:     Create a date locator with *numticks* (approx) and a date formatter
1498:     for *span* in days.  Return value is (locator, formatter).
1499:     '''
1500: 
1501:     if span == 0:
1502:         span = 1 / HOURS_PER_DAY
1503: 
1504:     mins = span * MINUTES_PER_DAY
1505:     hrs = span * HOURS_PER_DAY
1506:     days = span
1507:     wks = span / DAYS_PER_WEEK
1508:     months = span / DAYS_PER_MONTH      # Approx
1509:     years = span / DAYS_PER_YEAR        # Approx
1510: 
1511:     if years > numticks:
1512:         locator = YearLocator(int(years / numticks), tz=tz)  # define
1513:         fmt = '%Y'
1514:     elif months > numticks:
1515:         locator = MonthLocator(tz=tz)
1516:         fmt = '%b %Y'
1517:     elif wks > numticks:
1518:         locator = WeekdayLocator(tz=tz)
1519:         fmt = '%a, %b %d'
1520:     elif days > numticks:
1521:         locator = DayLocator(interval=int(math.ceil(days / numticks)), tz=tz)
1522:         fmt = '%b %d'
1523:     elif hrs > numticks:
1524:         locator = HourLocator(interval=int(math.ceil(hrs / numticks)), tz=tz)
1525:         fmt = '%H:%M\n%b %d'
1526:     elif mins > numticks:
1527:         locator = MinuteLocator(interval=int(math.ceil(mins / numticks)),
1528:                                 tz=tz)
1529:         fmt = '%H:%M:%S'
1530:     else:
1531:         locator = MinuteLocator(tz=tz)
1532:         fmt = '%H:%M:%S'
1533: 
1534:     formatter = DateFormatter(fmt, tz=tz)
1535:     return locator, formatter
1536: 
1537: 
1538: def seconds(s):
1539:     '''
1540:     Return seconds as days.
1541:     '''
1542:     return float(s) / SEC_PER_DAY
1543: 
1544: 
1545: def minutes(m):
1546:     '''
1547:     Return minutes as days.
1548:     '''
1549:     return float(m) / MINUTES_PER_DAY
1550: 
1551: 
1552: def hours(h):
1553:     '''
1554:     Return hours as days.
1555:     '''
1556:     return h / HOURS_PER_DAY
1557: 
1558: 
1559: def weeks(w):
1560:     '''
1561:     Return weeks as days.
1562:     '''
1563:     return w * DAYS_PER_WEEK
1564: 
1565: 
1566: class DateConverter(units.ConversionInterface):
1567:     '''
1568:     Converter for datetime.date and datetime.datetime data,
1569:     or for date/time data represented as it would be converted
1570:     by :func:`date2num`.
1571: 
1572:     The 'unit' tag for such data is None or a tzinfo instance.
1573:     '''
1574: 
1575:     @staticmethod
1576:     def axisinfo(unit, axis):
1577:         '''
1578:         Return the :class:`~matplotlib.units.AxisInfo` for *unit*.
1579: 
1580:         *unit* is a tzinfo instance or None.
1581:         The *axis* argument is required but not used.
1582:         '''
1583:         tz = unit
1584: 
1585:         majloc = AutoDateLocator(tz=tz)
1586:         majfmt = AutoDateFormatter(majloc, tz=tz)
1587:         datemin = datetime.date(2000, 1, 1)
1588:         datemax = datetime.date(2010, 1, 1)
1589: 
1590:         return units.AxisInfo(majloc=majloc, majfmt=majfmt, label='',
1591:                               default_limits=(datemin, datemax))
1592: 
1593:     @staticmethod
1594:     def convert(value, unit, axis):
1595:         '''
1596:         If *value* is not already a number or sequence of numbers,
1597:         convert it with :func:`date2num`.
1598: 
1599:         The *unit* and *axis* arguments are not used.
1600:         '''
1601:         if units.ConversionInterface.is_numlike(value):
1602:             return value
1603:         return date2num(value)
1604: 
1605:     @staticmethod
1606:     def default_units(x, axis):
1607:         '''
1608:         Return the tzinfo instance of *x* or of its first element, or None
1609:         '''
1610:         if isinstance(x, np.ndarray):
1611:             x = x.ravel()
1612: 
1613:         try:
1614:             x = cbook.safe_first_element(x)
1615:         except (TypeError, StopIteration):
1616:             pass
1617: 
1618:         try:
1619:             return x.tzinfo
1620:         except AttributeError:
1621:             pass
1622:         return None
1623: 
1624: 
1625: units.registry[datetime.date] = DateConverter()
1626: units.registry[datetime.datetime] = DateConverter()
1627: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_44562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, (-1)), 'unicode', u"\nMatplotlib provides sophisticated date plotting capabilities, standing on the\nshoulders of python :mod:`datetime`, the add-on modules :mod:`pytz` and\n:mod:`dateutil`.  :class:`datetime` objects are converted to floating point\nnumbers which represent time in days since 0001-01-01 UTC, plus 1.  For\nexample, 0001-01-01, 06:00 is 1.25, not 0.25.  The helper functions\n:func:`date2num`, :func:`num2date` and :func:`drange` are used to facilitate\neasy conversion to and from :mod:`datetime` and numeric ranges.\n\n.. note::\n\n   Like Python's datetime, mpl uses the Gregorian calendar for all\n   conversions between dates and floating point numbers. This practice\n   is not universal, and calendar differences can cause confusing\n   differences between what Python and mpl give as the number of days\n   since 0001-01-01 and what other software and databases yield.  For\n   example, the US Naval Observatory uses a calendar that switches\n   from Julian to Gregorian in October, 1582.  Hence, using their\n   calculator, the number of days between 0001-01-01 and 2006-04-01 is\n   732403, whereas using the Gregorian calendar via the datetime\n   module we find::\n\n     In [31]:date(2006,4,1).toordinal() - date(1,1,1).toordinal()\n     Out[31]:732401\n\n\nA wide range of specific and general purpose date tick locators and\nformatters are provided in this module.  See\n:mod:`matplotlib.ticker` for general information on tick locators\nand formatters.  These are described below.\n\nAll the matplotlib date converters, tickers and formatters are\ntimezone aware, and the default timezone is given by the timezone\nparameter in your :file:`matplotlibrc` file.  If you leave out a\n:class:`tz` timezone instance, the default from your rc file will be\nassumed.  If you want to use a custom time zone, pass a\n:class:`pytz.timezone` instance with the tz keyword argument to\n:func:`num2date`, :func:`plot_date`, and any custom date tickers or\nlocators you create.  See `pytz <http://pythonhosted.org/pytz/>`_ for\ninformation on :mod:`pytz` and timezone handling.\n\nThe `dateutil module <https://dateutil.readthedocs.io/en/stable/>`_ provides\nadditional code to handle date ticking, making it easy to place ticks\non any kinds of dates.  See examples below.\n\nDate tickers\n------------\n\nMost of the date tickers can locate single or multiple values.  For\nexample::\n\n    # import constants for the days of the week\n    from matplotlib.dates import MO, TU, WE, TH, FR, SA, SU\n\n    # tick on mondays every week\n    loc = WeekdayLocator(byweekday=MO, tz=tz)\n\n    # tick on mondays and saturdays\n    loc = WeekdayLocator(byweekday=(MO, SA))\n\nIn addition, most of the constructors take an interval argument::\n\n    # tick on mondays every second week\n    loc = WeekdayLocator(byweekday=MO, interval=2)\n\nThe rrule locator allows completely general date ticking::\n\n    # tick every 5th easter\n    rule = rrulewrapper(YEARLY, byeaster=1, interval=5)\n    loc = RRuleLocator(rule)\n\nHere are all the date tickers:\n\n    * :class:`MinuteLocator`: locate minutes\n\n    * :class:`HourLocator`: locate hours\n\n    * :class:`DayLocator`: locate specified days of the month\n\n    * :class:`WeekdayLocator`: Locate days of the week, e.g., MO, TU\n\n    * :class:`MonthLocator`: locate months, e.g., 7 for july\n\n    * :class:`YearLocator`: locate years that are multiples of base\n\n    * :class:`RRuleLocator`: locate using a\n      :class:`matplotlib.dates.rrulewrapper`.  The\n      :class:`rrulewrapper` is a simple wrapper around a\n      :class:`dateutil.rrule` (`dateutil\n      <https://dateutil.readthedocs.io/en/stable/>`_) which allow almost\n      arbitrary date tick specifications.  See `rrule example\n      <../gallery/ticks_and_spines/date_demo_rrule.html>`_.\n\n    * :class:`AutoDateLocator`: On autoscale, this class picks the best\n      :class:`MultipleDateLocator` to set the view limits and the tick\n      locations.\n\nDate formatters\n---------------\n\nHere all all the date formatters:\n\n    * :class:`AutoDateFormatter`: attempts to figure out the best format\n      to use.  This is most useful when used with the :class:`AutoDateLocator`.\n\n    * :class:`DateFormatter`: use :func:`strftime` format strings\n\n    * :class:`IndexDateFormatter`: date plots with implicit *x*\n      indexing.\n")
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 114, 0))

# 'import six' statement (line 114)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44563 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 114, 0), 'six')

if (type(import_44563) is not StypyTypeError):

    if (import_44563 != 'pyd_module'):
        __import__(import_44563)
        sys_modules_44564 = sys.modules[import_44563]
        import_module(stypy.reporting.localization.Localization(__file__, 114, 0), 'six', sys_modules_44564.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 114, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 0), 'six', import_44563)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 115, 0))

# 'from six.moves import zip' statement (line 115)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44565 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 115, 0), 'six.moves')

if (type(import_44565) is not StypyTypeError):

    if (import_44565 != 'pyd_module'):
        __import__(import_44565)
        sys_modules_44566 = sys.modules[import_44565]
        import_from_module(stypy.reporting.localization.Localization(__file__, 115, 0), 'six.moves', sys_modules_44566.module_type_store, module_type_store, ['zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 115, 0), __file__, sys_modules_44566, sys_modules_44566.module_type_store, module_type_store)
    else:
        from six.moves import zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 115, 0), 'six.moves', None, module_type_store, ['zip'], [zip])

else:
    # Assigning a type to the variable 'six.moves' (line 115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 115, 0), 'six.moves', import_44565)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 116, 0))

# 'from matplotlib import rcParams' statement (line 116)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44567 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 116, 0), 'matplotlib')

if (type(import_44567) is not StypyTypeError):

    if (import_44567 != 'pyd_module'):
        __import__(import_44567)
        sys_modules_44568 = sys.modules[import_44567]
        import_from_module(stypy.reporting.localization.Localization(__file__, 116, 0), 'matplotlib', sys_modules_44568.module_type_store, module_type_store, ['rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 116, 0), __file__, sys_modules_44568, sys_modules_44568.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 116, 0), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 0), 'matplotlib', import_44567)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 117, 0))

# 'import re' statement (line 117)
import re

import_module(stypy.reporting.localization.Localization(__file__, 117, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 118, 0))

# 'import time' statement (line 118)
import time

import_module(stypy.reporting.localization.Localization(__file__, 118, 0), 'time', time, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 119, 0))

# 'import math' statement (line 119)
import math

import_module(stypy.reporting.localization.Localization(__file__, 119, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 120, 0))

# 'import datetime' statement (line 120)
import datetime

import_module(stypy.reporting.localization.Localization(__file__, 120, 0), 'datetime', datetime, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 122, 0))

# 'import warnings' statement (line 122)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 122, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 125, 0))

# 'from dateutil.rrule import rrule, MO, TU, WE, TH, FR, SA, SU, YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, SECONDLY' statement (line 125)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44569 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 125, 0), 'dateutil.rrule')

if (type(import_44569) is not StypyTypeError):

    if (import_44569 != 'pyd_module'):
        __import__(import_44569)
        sys_modules_44570 = sys.modules[import_44569]
        import_from_module(stypy.reporting.localization.Localization(__file__, 125, 0), 'dateutil.rrule', sys_modules_44570.module_type_store, module_type_store, ['rrule', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU', 'YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY', 'HOURLY', 'MINUTELY', 'SECONDLY'])
        nest_module(stypy.reporting.localization.Localization(__file__, 125, 0), __file__, sys_modules_44570, sys_modules_44570.module_type_store, module_type_store)
    else:
        from dateutil.rrule import rrule, MO, TU, WE, TH, FR, SA, SU, YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, SECONDLY

        import_from_module(stypy.reporting.localization.Localization(__file__, 125, 0), 'dateutil.rrule', None, module_type_store, ['rrule', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU', 'YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY', 'HOURLY', 'MINUTELY', 'SECONDLY'], [rrule, MO, TU, WE, TH, FR, SA, SU, YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, SECONDLY])

else:
    # Assigning a type to the variable 'dateutil.rrule' (line 125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 0), 'dateutil.rrule', import_44569)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 128, 0))

# 'from dateutil.relativedelta import relativedelta' statement (line 128)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44571 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 128, 0), 'dateutil.relativedelta')

if (type(import_44571) is not StypyTypeError):

    if (import_44571 != 'pyd_module'):
        __import__(import_44571)
        sys_modules_44572 = sys.modules[import_44571]
        import_from_module(stypy.reporting.localization.Localization(__file__, 128, 0), 'dateutil.relativedelta', sys_modules_44572.module_type_store, module_type_store, ['relativedelta'])
        nest_module(stypy.reporting.localization.Localization(__file__, 128, 0), __file__, sys_modules_44572, sys_modules_44572.module_type_store, module_type_store)
    else:
        from dateutil.relativedelta import relativedelta

        import_from_module(stypy.reporting.localization.Localization(__file__, 128, 0), 'dateutil.relativedelta', None, module_type_store, ['relativedelta'], [relativedelta])

else:
    # Assigning a type to the variable 'dateutil.relativedelta' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 0), 'dateutil.relativedelta', import_44571)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 129, 0))

# 'import dateutil.parser' statement (line 129)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44573 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 129, 0), 'dateutil.parser')

if (type(import_44573) is not StypyTypeError):

    if (import_44573 != 'pyd_module'):
        __import__(import_44573)
        sys_modules_44574 = sys.modules[import_44573]
        import_module(stypy.reporting.localization.Localization(__file__, 129, 0), 'dateutil.parser', sys_modules_44574.module_type_store, module_type_store)
    else:
        import dateutil.parser

        import_module(stypy.reporting.localization.Localization(__file__, 129, 0), 'dateutil.parser', dateutil.parser, module_type_store)

else:
    # Assigning a type to the variable 'dateutil.parser' (line 129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 0), 'dateutil.parser', import_44573)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 130, 0))

# 'import numpy' statement (line 130)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44575 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 130, 0), 'numpy')

if (type(import_44575) is not StypyTypeError):

    if (import_44575 != 'pyd_module'):
        __import__(import_44575)
        sys_modules_44576 = sys.modules[import_44575]
        import_module(stypy.reporting.localization.Localization(__file__, 130, 0), 'np', sys_modules_44576.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 130, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 0), 'numpy', import_44575)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 133, 0))

# 'import matplotlib' statement (line 133)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44577 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 133, 0), 'matplotlib')

if (type(import_44577) is not StypyTypeError):

    if (import_44577 != 'pyd_module'):
        __import__(import_44577)
        sys_modules_44578 = sys.modules[import_44577]
        import_module(stypy.reporting.localization.Localization(__file__, 133, 0), 'matplotlib', sys_modules_44578.module_type_store, module_type_store)
    else:
        import matplotlib

        import_module(stypy.reporting.localization.Localization(__file__, 133, 0), 'matplotlib', matplotlib, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib' (line 133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 0), 'matplotlib', import_44577)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 134, 0))

# 'import matplotlib.units' statement (line 134)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44579 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 134, 0), 'matplotlib.units')

if (type(import_44579) is not StypyTypeError):

    if (import_44579 != 'pyd_module'):
        __import__(import_44579)
        sys_modules_44580 = sys.modules[import_44579]
        import_module(stypy.reporting.localization.Localization(__file__, 134, 0), 'units', sys_modules_44580.module_type_store, module_type_store)
    else:
        import matplotlib.units as units

        import_module(stypy.reporting.localization.Localization(__file__, 134, 0), 'units', matplotlib.units, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.units' (line 134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 0), 'matplotlib.units', import_44579)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 135, 0))

# 'import matplotlib.cbook' statement (line 135)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44581 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 135, 0), 'matplotlib.cbook')

if (type(import_44581) is not StypyTypeError):

    if (import_44581 != 'pyd_module'):
        __import__(import_44581)
        sys_modules_44582 = sys.modules[import_44581]
        import_module(stypy.reporting.localization.Localization(__file__, 135, 0), 'cbook', sys_modules_44582.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 135, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 0), 'matplotlib.cbook', import_44581)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 136, 0))

# 'import matplotlib.ticker' statement (line 136)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_44583 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 136, 0), 'matplotlib.ticker')

if (type(import_44583) is not StypyTypeError):

    if (import_44583 != 'pyd_module'):
        __import__(import_44583)
        sys_modules_44584 = sys.modules[import_44583]
        import_module(stypy.reporting.localization.Localization(__file__, 136, 0), 'ticker', sys_modules_44584.module_type_store, module_type_store)
    else:
        import matplotlib.ticker as ticker

        import_module(stypy.reporting.localization.Localization(__file__, 136, 0), 'ticker', matplotlib.ticker, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.ticker' (line 136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 0), 'matplotlib.ticker', import_44583)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


# Assigning a Tuple to a Name (line 139):

# Assigning a Tuple to a Name (line 139):

# Obtaining an instance of the builtin type 'tuple' (line 139)
tuple_44585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 11), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 139)
# Adding element type (line 139)
unicode_44586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 11), 'unicode', u'date2num')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44586)
# Adding element type (line 139)
unicode_44587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 23), 'unicode', u'num2date')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44587)
# Adding element type (line 139)
unicode_44588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 35), 'unicode', u'num2timedelta')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44588)
# Adding element type (line 139)
unicode_44589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 52), 'unicode', u'drange')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44589)
# Adding element type (line 139)
unicode_44590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 62), 'unicode', u'epoch2num')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44590)
# Adding element type (line 139)
unicode_44591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 11), 'unicode', u'num2epoch')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44591)
# Adding element type (line 139)
unicode_44592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 24), 'unicode', u'mx2num')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44592)
# Adding element type (line 139)
unicode_44593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 34), 'unicode', u'DateFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44593)
# Adding element type (line 139)
unicode_44594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 11), 'unicode', u'IndexDateFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44594)
# Adding element type (line 139)
unicode_44595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 33), 'unicode', u'AutoDateFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44595)
# Adding element type (line 139)
unicode_44596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 54), 'unicode', u'DateLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44596)
# Adding element type (line 139)
unicode_44597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 142, 11), 'unicode', u'RRuleLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44597)
# Adding element type (line 139)
unicode_44598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 142, 27), 'unicode', u'AutoDateLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44598)
# Adding element type (line 139)
unicode_44599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 142, 46), 'unicode', u'YearLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44599)
# Adding element type (line 139)
unicode_44600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 143, 11), 'unicode', u'MonthLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44600)
# Adding element type (line 139)
unicode_44601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 143, 27), 'unicode', u'WeekdayLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44601)
# Adding element type (line 139)
unicode_44602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 11), 'unicode', u'DayLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44602)
# Adding element type (line 139)
unicode_44603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 25), 'unicode', u'HourLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44603)
# Adding element type (line 139)
unicode_44604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 40), 'unicode', u'MinuteLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44604)
# Adding element type (line 139)
unicode_44605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, 11), 'unicode', u'SecondLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44605)
# Adding element type (line 139)
unicode_44606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, 28), 'unicode', u'MicrosecondLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44606)
# Adding element type (line 139)
unicode_44607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 11), 'unicode', u'rrule')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44607)
# Adding element type (line 139)
unicode_44608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 20), 'unicode', u'MO')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44608)
# Adding element type (line 139)
unicode_44609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 26), 'unicode', u'TU')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44609)
# Adding element type (line 139)
unicode_44610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 32), 'unicode', u'WE')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44610)
# Adding element type (line 139)
unicode_44611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 38), 'unicode', u'TH')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44611)
# Adding element type (line 139)
unicode_44612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 44), 'unicode', u'FR')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44612)
# Adding element type (line 139)
unicode_44613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 50), 'unicode', u'SA')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44613)
# Adding element type (line 139)
unicode_44614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 56), 'unicode', u'SU')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44614)
# Adding element type (line 139)
unicode_44615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 11), 'unicode', u'YEARLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44615)
# Adding element type (line 139)
unicode_44616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 21), 'unicode', u'MONTHLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44616)
# Adding element type (line 139)
unicode_44617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 32), 'unicode', u'WEEKLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44617)
# Adding element type (line 139)
unicode_44618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 42), 'unicode', u'DAILY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44618)
# Adding element type (line 139)
unicode_44619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 11), 'unicode', u'HOURLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44619)
# Adding element type (line 139)
unicode_44620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 21), 'unicode', u'MINUTELY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44620)
# Adding element type (line 139)
unicode_44621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 33), 'unicode', u'SECONDLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44621)
# Adding element type (line 139)
unicode_44622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 45), 'unicode', u'MICROSECONDLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44622)
# Adding element type (line 139)
unicode_44623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 62), 'unicode', u'relativedelta')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44623)
# Adding element type (line 139)
unicode_44624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 11), 'unicode', u'seconds')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44624)
# Adding element type (line 139)
unicode_44625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 22), 'unicode', u'minutes')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44625)
# Adding element type (line 139)
unicode_44626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 33), 'unicode', u'hours')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44626)
# Adding element type (line 139)
unicode_44627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 42), 'unicode', u'weeks')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_44585, unicode_44627)

# Assigning a type to the variable '__all__' (line 139)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 0), '__all__', tuple_44585)
# Declaration of the '_UTC' class
# Getting the type of 'datetime' (line 155)
datetime_44628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 11), 'datetime')
# Obtaining the member 'tzinfo' of a type (line 155)
tzinfo_44629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 11), datetime_44628, 'tzinfo')

class _UTC(tzinfo_44629, ):
    unicode_44630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 4), 'unicode', u'UTC')

    @norecursion
    def utcoffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'utcoffset'
        module_type_store = module_type_store.open_function_context('utcoffset', 158, 4, False)
        # Assigning a type to the variable 'self' (line 159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _UTC.utcoffset.__dict__.__setitem__('stypy_localization', localization)
        _UTC.utcoffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _UTC.utcoffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        _UTC.utcoffset.__dict__.__setitem__('stypy_function_name', '_UTC.utcoffset')
        _UTC.utcoffset.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        _UTC.utcoffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        _UTC.utcoffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _UTC.utcoffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        _UTC.utcoffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        _UTC.utcoffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _UTC.utcoffset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_UTC.utcoffset', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'utcoffset', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'utcoffset(...)' code ##################

        
        # Call to timedelta(...): (line 159)
        # Processing the call arguments (line 159)
        int_44633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 34), 'int')
        # Processing the call keyword arguments (line 159)
        kwargs_44634 = {}
        # Getting the type of 'datetime' (line 159)
        datetime_44631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 15), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 159)
        timedelta_44632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 15), datetime_44631, 'timedelta')
        # Calling timedelta(args, kwargs) (line 159)
        timedelta_call_result_44635 = invoke(stypy.reporting.localization.Localization(__file__, 159, 15), timedelta_44632, *[int_44633], **kwargs_44634)
        
        # Assigning a type to the variable 'stypy_return_type' (line 159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'stypy_return_type', timedelta_call_result_44635)
        
        # ################# End of 'utcoffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'utcoffset' in the type store
        # Getting the type of 'stypy_return_type' (line 158)
        stypy_return_type_44636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_44636)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'utcoffset'
        return stypy_return_type_44636


    @norecursion
    def tzname(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tzname'
        module_type_store = module_type_store.open_function_context('tzname', 161, 4, False)
        # Assigning a type to the variable 'self' (line 162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _UTC.tzname.__dict__.__setitem__('stypy_localization', localization)
        _UTC.tzname.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _UTC.tzname.__dict__.__setitem__('stypy_type_store', module_type_store)
        _UTC.tzname.__dict__.__setitem__('stypy_function_name', '_UTC.tzname')
        _UTC.tzname.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        _UTC.tzname.__dict__.__setitem__('stypy_varargs_param_name', None)
        _UTC.tzname.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _UTC.tzname.__dict__.__setitem__('stypy_call_defaults', defaults)
        _UTC.tzname.__dict__.__setitem__('stypy_call_varargs', varargs)
        _UTC.tzname.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _UTC.tzname.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_UTC.tzname', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tzname', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tzname(...)' code ##################

        
        # Call to str(...): (line 162)
        # Processing the call arguments (line 162)
        unicode_44638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 19), 'unicode', u'UTC')
        # Processing the call keyword arguments (line 162)
        kwargs_44639 = {}
        # Getting the type of 'str' (line 162)
        str_44637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 15), 'str', False)
        # Calling str(args, kwargs) (line 162)
        str_call_result_44640 = invoke(stypy.reporting.localization.Localization(__file__, 162, 15), str_44637, *[unicode_44638], **kwargs_44639)
        
        # Assigning a type to the variable 'stypy_return_type' (line 162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 8), 'stypy_return_type', str_call_result_44640)
        
        # ################# End of 'tzname(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tzname' in the type store
        # Getting the type of 'stypy_return_type' (line 161)
        stypy_return_type_44641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_44641)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tzname'
        return stypy_return_type_44641


    @norecursion
    def dst(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dst'
        module_type_store = module_type_store.open_function_context('dst', 164, 4, False)
        # Assigning a type to the variable 'self' (line 165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _UTC.dst.__dict__.__setitem__('stypy_localization', localization)
        _UTC.dst.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _UTC.dst.__dict__.__setitem__('stypy_type_store', module_type_store)
        _UTC.dst.__dict__.__setitem__('stypy_function_name', '_UTC.dst')
        _UTC.dst.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        _UTC.dst.__dict__.__setitem__('stypy_varargs_param_name', None)
        _UTC.dst.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _UTC.dst.__dict__.__setitem__('stypy_call_defaults', defaults)
        _UTC.dst.__dict__.__setitem__('stypy_call_varargs', varargs)
        _UTC.dst.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _UTC.dst.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_UTC.dst', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dst', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dst(...)' code ##################

        
        # Call to timedelta(...): (line 165)
        # Processing the call arguments (line 165)
        int_44644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 34), 'int')
        # Processing the call keyword arguments (line 165)
        kwargs_44645 = {}
        # Getting the type of 'datetime' (line 165)
        datetime_44642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 15), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 165)
        timedelta_44643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 15), datetime_44642, 'timedelta')
        # Calling timedelta(args, kwargs) (line 165)
        timedelta_call_result_44646 = invoke(stypy.reporting.localization.Localization(__file__, 165, 15), timedelta_44643, *[int_44644], **kwargs_44645)
        
        # Assigning a type to the variable 'stypy_return_type' (line 165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'stypy_return_type', timedelta_call_result_44646)
        
        # ################# End of 'dst(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dst' in the type store
        # Getting the type of 'stypy_return_type' (line 164)
        stypy_return_type_44647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_44647)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dst'
        return stypy_return_type_44647


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 155, 0, False)
        # Assigning a type to the variable 'self' (line 156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_UTC.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_UTC' (line 155)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 0), '_UTC', _UTC)

# Assigning a Call to a Name (line 168):

# Assigning a Call to a Name (line 168):

# Call to _UTC(...): (line 168)
# Processing the call keyword arguments (line 168)
kwargs_44649 = {}
# Getting the type of '_UTC' (line 168)
_UTC_44648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 6), '_UTC', False)
# Calling _UTC(args, kwargs) (line 168)
_UTC_call_result_44650 = invoke(stypy.reporting.localization.Localization(__file__, 168, 6), _UTC_44648, *[], **kwargs_44649)

# Assigning a type to the variable 'UTC' (line 168)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 0), 'UTC', _UTC_call_result_44650)

@norecursion
def _get_rc_timezone(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_rc_timezone'
    module_type_store = module_type_store.open_function_context('_get_rc_timezone', 171, 0, False)
    
    # Passed parameters checking function
    _get_rc_timezone.stypy_localization = localization
    _get_rc_timezone.stypy_type_of_self = None
    _get_rc_timezone.stypy_type_store = module_type_store
    _get_rc_timezone.stypy_function_name = '_get_rc_timezone'
    _get_rc_timezone.stypy_param_names_list = []
    _get_rc_timezone.stypy_varargs_param_name = None
    _get_rc_timezone.stypy_kwargs_param_name = None
    _get_rc_timezone.stypy_call_defaults = defaults
    _get_rc_timezone.stypy_call_varargs = varargs
    _get_rc_timezone.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_rc_timezone', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_rc_timezone', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_rc_timezone(...)' code ##################

    unicode_44651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 174, (-1)), 'unicode', u'\n    Retrieve the preferred timeszone from the rcParams dictionary.\n    ')
    
    # Assigning a Subscript to a Name (line 175):
    
    # Assigning a Subscript to a Name (line 175):
    
    # Obtaining the type of the subscript
    unicode_44652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 28), 'unicode', u'timezone')
    # Getting the type of 'matplotlib' (line 175)
    matplotlib_44653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 8), 'matplotlib')
    # Obtaining the member 'rcParams' of a type (line 175)
    rcParams_44654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 8), matplotlib_44653, 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 175)
    getitem___44655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 8), rcParams_44654, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 175)
    subscript_call_result_44656 = invoke(stypy.reporting.localization.Localization(__file__, 175, 8), getitem___44655, unicode_44652)
    
    # Assigning a type to the variable 's' (line 175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 4), 's', subscript_call_result_44656)
    
    
    # Getting the type of 's' (line 176)
    s_44657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 7), 's')
    unicode_44658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 176, 12), 'unicode', u'UTC')
    # Applying the binary operator '==' (line 176)
    result_eq_44659 = python_operator(stypy.reporting.localization.Localization(__file__, 176, 7), '==', s_44657, unicode_44658)
    
    # Testing the type of an if condition (line 176)
    if_condition_44660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 176, 4), result_eq_44659)
    # Assigning a type to the variable 'if_condition_44660' (line 176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 4), 'if_condition_44660', if_condition_44660)
    # SSA begins for if statement (line 176)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'UTC' (line 177)
    UTC_44661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 15), 'UTC')
    # Assigning a type to the variable 'stypy_return_type' (line 177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'stypy_return_type', UTC_44661)
    # SSA join for if statement (line 176)
    module_type_store = module_type_store.join_ssa_context()
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 178, 4))
    
    # 'import pytz' statement (line 178)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_44662 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 178, 4), 'pytz')

    if (type(import_44662) is not StypyTypeError):

        if (import_44662 != 'pyd_module'):
            __import__(import_44662)
            sys_modules_44663 = sys.modules[import_44662]
            import_module(stypy.reporting.localization.Localization(__file__, 178, 4), 'pytz', sys_modules_44663.module_type_store, module_type_store)
        else:
            import pytz

            import_module(stypy.reporting.localization.Localization(__file__, 178, 4), 'pytz', pytz, module_type_store)

    else:
        # Assigning a type to the variable 'pytz' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 4), 'pytz', import_44662)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Call to timezone(...): (line 179)
    # Processing the call arguments (line 179)
    # Getting the type of 's' (line 179)
    s_44666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 25), 's', False)
    # Processing the call keyword arguments (line 179)
    kwargs_44667 = {}
    # Getting the type of 'pytz' (line 179)
    pytz_44664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 11), 'pytz', False)
    # Obtaining the member 'timezone' of a type (line 179)
    timezone_44665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 11), pytz_44664, 'timezone')
    # Calling timezone(args, kwargs) (line 179)
    timezone_call_result_44668 = invoke(stypy.reporting.localization.Localization(__file__, 179, 11), timezone_44665, *[s_44666], **kwargs_44667)
    
    # Assigning a type to the variable 'stypy_return_type' (line 179)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 4), 'stypy_return_type', timezone_call_result_44668)
    
    # ################# End of '_get_rc_timezone(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_rc_timezone' in the type store
    # Getting the type of 'stypy_return_type' (line 171)
    stypy_return_type_44669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_44669)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_rc_timezone'
    return stypy_return_type_44669

# Assigning a type to the variable '_get_rc_timezone' (line 171)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 0), '_get_rc_timezone', _get_rc_timezone)
unicode_44670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, (-1)), 'unicode', u'\nTime-related constants.\n')

# Assigning a Call to a Name (line 185):

# Assigning a Call to a Name (line 185):

# Call to float(...): (line 185)
# Processing the call arguments (line 185)

# Call to toordinal(...): (line 185)
# Processing the call keyword arguments (line 185)
kwargs_44680 = {}

# Call to datetime(...): (line 185)
# Processing the call arguments (line 185)
int_44674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 39), 'int')
int_44675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 45), 'int')
int_44676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 48), 'int')
# Processing the call keyword arguments (line 185)
kwargs_44677 = {}
# Getting the type of 'datetime' (line 185)
datetime_44672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 21), 'datetime', False)
# Obtaining the member 'datetime' of a type (line 185)
datetime_44673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 21), datetime_44672, 'datetime')
# Calling datetime(args, kwargs) (line 185)
datetime_call_result_44678 = invoke(stypy.reporting.localization.Localization(__file__, 185, 21), datetime_44673, *[int_44674, int_44675, int_44676], **kwargs_44677)

# Obtaining the member 'toordinal' of a type (line 185)
toordinal_44679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 21), datetime_call_result_44678, 'toordinal')
# Calling toordinal(args, kwargs) (line 185)
toordinal_call_result_44681 = invoke(stypy.reporting.localization.Localization(__file__, 185, 21), toordinal_44679, *[], **kwargs_44680)

# Processing the call keyword arguments (line 185)
kwargs_44682 = {}
# Getting the type of 'float' (line 185)
float_44671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 15), 'float', False)
# Calling float(args, kwargs) (line 185)
float_call_result_44683 = invoke(stypy.reporting.localization.Localization(__file__, 185, 15), float_44671, *[toordinal_call_result_44681], **kwargs_44682)

# Assigning a type to the variable 'EPOCH_OFFSET' (line 185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 0), 'EPOCH_OFFSET', float_call_result_44683)

# Assigning a Num to a Name (line 186):

# Assigning a Num to a Name (line 186):
float_44684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 16), 'float')
# Assigning a type to the variable 'JULIAN_OFFSET' (line 186)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 0), 'JULIAN_OFFSET', float_44684)

# Assigning a BinOp to a Name (line 187):

# Assigning a BinOp to a Name (line 187):
# Getting the type of 'SECONDLY' (line 187)
SECONDLY_44685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 16), 'SECONDLY')
int_44686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 27), 'int')
# Applying the binary operator '+' (line 187)
result_add_44687 = python_operator(stypy.reporting.localization.Localization(__file__, 187, 16), '+', SECONDLY_44685, int_44686)

# Assigning a type to the variable 'MICROSECONDLY' (line 187)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 0), 'MICROSECONDLY', result_add_44687)

# Assigning a Num to a Name (line 188):

# Assigning a Num to a Name (line 188):
float_44688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 16), 'float')
# Assigning a type to the variable 'HOURS_PER_DAY' (line 188)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 0), 'HOURS_PER_DAY', float_44688)

# Assigning a Num to a Name (line 189):

# Assigning a Num to a Name (line 189):
float_44689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 15), 'float')
# Assigning a type to the variable 'MIN_PER_HOUR' (line 189)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 0), 'MIN_PER_HOUR', float_44689)

# Assigning a Num to a Name (line 190):

# Assigning a Num to a Name (line 190):
float_44690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 14), 'float')
# Assigning a type to the variable 'SEC_PER_MIN' (line 190)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 0), 'SEC_PER_MIN', float_44690)

# Assigning a Num to a Name (line 191):

# Assigning a Num to a Name (line 191):
float_44691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 18), 'float')
# Assigning a type to the variable 'MONTHS_PER_YEAR' (line 191)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 0), 'MONTHS_PER_YEAR', float_44691)

# Assigning a Num to a Name (line 193):

# Assigning a Num to a Name (line 193):
float_44692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 16), 'float')
# Assigning a type to the variable 'DAYS_PER_WEEK' (line 193)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 0), 'DAYS_PER_WEEK', float_44692)

# Assigning a Num to a Name (line 194):

# Assigning a Num to a Name (line 194):
float_44693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 17), 'float')
# Assigning a type to the variable 'DAYS_PER_MONTH' (line 194)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 0), 'DAYS_PER_MONTH', float_44693)

# Assigning a Num to a Name (line 195):

# Assigning a Num to a Name (line 195):
float_44694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 16), 'float')
# Assigning a type to the variable 'DAYS_PER_YEAR' (line 195)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 0), 'DAYS_PER_YEAR', float_44694)

# Assigning a BinOp to a Name (line 197):

# Assigning a BinOp to a Name (line 197):
# Getting the type of 'MIN_PER_HOUR' (line 197)
MIN_PER_HOUR_44695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 18), 'MIN_PER_HOUR')
# Getting the type of 'HOURS_PER_DAY' (line 197)
HOURS_PER_DAY_44696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 33), 'HOURS_PER_DAY')
# Applying the binary operator '*' (line 197)
result_mul_44697 = python_operator(stypy.reporting.localization.Localization(__file__, 197, 18), '*', MIN_PER_HOUR_44695, HOURS_PER_DAY_44696)

# Assigning a type to the variable 'MINUTES_PER_DAY' (line 197)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 0), 'MINUTES_PER_DAY', result_mul_44697)

# Assigning a BinOp to a Name (line 199):

# Assigning a BinOp to a Name (line 199):
# Getting the type of 'SEC_PER_MIN' (line 199)
SEC_PER_MIN_44698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 15), 'SEC_PER_MIN')
# Getting the type of 'MIN_PER_HOUR' (line 199)
MIN_PER_HOUR_44699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 29), 'MIN_PER_HOUR')
# Applying the binary operator '*' (line 199)
result_mul_44700 = python_operator(stypy.reporting.localization.Localization(__file__, 199, 15), '*', SEC_PER_MIN_44698, MIN_PER_HOUR_44699)

# Assigning a type to the variable 'SEC_PER_HOUR' (line 199)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 0), 'SEC_PER_HOUR', result_mul_44700)

# Assigning a BinOp to a Name (line 200):

# Assigning a BinOp to a Name (line 200):
# Getting the type of 'SEC_PER_HOUR' (line 200)
SEC_PER_HOUR_44701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 14), 'SEC_PER_HOUR')
# Getting the type of 'HOURS_PER_DAY' (line 200)
HOURS_PER_DAY_44702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 29), 'HOURS_PER_DAY')
# Applying the binary operator '*' (line 200)
result_mul_44703 = python_operator(stypy.reporting.localization.Localization(__file__, 200, 14), '*', SEC_PER_HOUR_44701, HOURS_PER_DAY_44702)

# Assigning a type to the variable 'SEC_PER_DAY' (line 200)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 0), 'SEC_PER_DAY', result_mul_44703)

# Assigning a BinOp to a Name (line 201):

# Assigning a BinOp to a Name (line 201):
# Getting the type of 'SEC_PER_DAY' (line 201)
SEC_PER_DAY_44704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 15), 'SEC_PER_DAY')
# Getting the type of 'DAYS_PER_WEEK' (line 201)
DAYS_PER_WEEK_44705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 29), 'DAYS_PER_WEEK')
# Applying the binary operator '*' (line 201)
result_mul_44706 = python_operator(stypy.reporting.localization.Localization(__file__, 201, 15), '*', SEC_PER_DAY_44704, DAYS_PER_WEEK_44705)

# Assigning a type to the variable 'SEC_PER_WEEK' (line 201)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 0), 'SEC_PER_WEEK', result_mul_44706)

# Assigning a BinOp to a Name (line 203):

# Assigning a BinOp to a Name (line 203):
float_44707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 20), 'float')
# Getting the type of 'SEC_PER_DAY' (line 203)
SEC_PER_DAY_44708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 26), 'SEC_PER_DAY')
# Applying the binary operator '*' (line 203)
result_mul_44709 = python_operator(stypy.reporting.localization.Localization(__file__, 203, 20), '*', float_44707, SEC_PER_DAY_44708)

# Assigning a type to the variable 'MUSECONDS_PER_DAY' (line 203)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 203, 0), 'MUSECONDS_PER_DAY', result_mul_44709)

# Assigning a Tuple to a Tuple (line 205):

# Assigning a Name to a Name (line 205):
# Getting the type of 'MO' (line 206)
MO_44710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'MO')
# Assigning a type to the variable 'tuple_assignment_44505' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44505', MO_44710)

# Assigning a Name to a Name (line 205):
# Getting the type of 'TU' (line 206)
TU_44711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 8), 'TU')
# Assigning a type to the variable 'tuple_assignment_44506' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44506', TU_44711)

# Assigning a Name to a Name (line 205):
# Getting the type of 'WE' (line 206)
WE_44712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 12), 'WE')
# Assigning a type to the variable 'tuple_assignment_44507' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44507', WE_44712)

# Assigning a Name to a Name (line 205):
# Getting the type of 'TH' (line 206)
TH_44713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 16), 'TH')
# Assigning a type to the variable 'tuple_assignment_44508' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44508', TH_44713)

# Assigning a Name to a Name (line 205):
# Getting the type of 'FR' (line 206)
FR_44714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 20), 'FR')
# Assigning a type to the variable 'tuple_assignment_44509' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44509', FR_44714)

# Assigning a Name to a Name (line 205):
# Getting the type of 'SA' (line 206)
SA_44715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 24), 'SA')
# Assigning a type to the variable 'tuple_assignment_44510' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44510', SA_44715)

# Assigning a Name to a Name (line 205):
# Getting the type of 'SU' (line 206)
SU_44716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 28), 'SU')
# Assigning a type to the variable 'tuple_assignment_44511' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44511', SU_44716)

# Assigning a Name to a Name (line 205):
# Getting the type of 'tuple_assignment_44505' (line 205)
tuple_assignment_44505_44717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44505')
# Assigning a type to the variable 'MONDAY' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'MONDAY', tuple_assignment_44505_44717)

# Assigning a Name to a Name (line 205):
# Getting the type of 'tuple_assignment_44506' (line 205)
tuple_assignment_44506_44718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44506')
# Assigning a type to the variable 'TUESDAY' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'TUESDAY', tuple_assignment_44506_44718)

# Assigning a Name to a Name (line 205):
# Getting the type of 'tuple_assignment_44507' (line 205)
tuple_assignment_44507_44719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44507')
# Assigning a type to the variable 'WEDNESDAY' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 17), 'WEDNESDAY', tuple_assignment_44507_44719)

# Assigning a Name to a Name (line 205):
# Getting the type of 'tuple_assignment_44508' (line 205)
tuple_assignment_44508_44720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44508')
# Assigning a type to the variable 'THURSDAY' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 28), 'THURSDAY', tuple_assignment_44508_44720)

# Assigning a Name to a Name (line 205):
# Getting the type of 'tuple_assignment_44509' (line 205)
tuple_assignment_44509_44721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44509')
# Assigning a type to the variable 'FRIDAY' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 38), 'FRIDAY', tuple_assignment_44509_44721)

# Assigning a Name to a Name (line 205):
# Getting the type of 'tuple_assignment_44510' (line 205)
tuple_assignment_44510_44722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44510')
# Assigning a type to the variable 'SATURDAY' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 46), 'SATURDAY', tuple_assignment_44510_44722)

# Assigning a Name to a Name (line 205):
# Getting the type of 'tuple_assignment_44511' (line 205)
tuple_assignment_44511_44723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'tuple_assignment_44511')
# Assigning a type to the variable 'SUNDAY' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 56), 'SUNDAY', tuple_assignment_44511_44723)

# Assigning a Tuple to a Name (line 207):

# Assigning a Tuple to a Name (line 207):

# Obtaining an instance of the builtin type 'tuple' (line 207)
tuple_44724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 12), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 207)
# Adding element type (line 207)
# Getting the type of 'MONDAY' (line 207)
MONDAY_44725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 12), 'MONDAY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 12), tuple_44724, MONDAY_44725)
# Adding element type (line 207)
# Getting the type of 'TUESDAY' (line 207)
TUESDAY_44726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 20), 'TUESDAY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 12), tuple_44724, TUESDAY_44726)
# Adding element type (line 207)
# Getting the type of 'WEDNESDAY' (line 207)
WEDNESDAY_44727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 29), 'WEDNESDAY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 12), tuple_44724, WEDNESDAY_44727)
# Adding element type (line 207)
# Getting the type of 'THURSDAY' (line 207)
THURSDAY_44728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 40), 'THURSDAY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 12), tuple_44724, THURSDAY_44728)
# Adding element type (line 207)
# Getting the type of 'FRIDAY' (line 207)
FRIDAY_44729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 50), 'FRIDAY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 12), tuple_44724, FRIDAY_44729)
# Adding element type (line 207)
# Getting the type of 'SATURDAY' (line 207)
SATURDAY_44730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 58), 'SATURDAY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 12), tuple_44724, SATURDAY_44730)
# Adding element type (line 207)
# Getting the type of 'SUNDAY' (line 207)
SUNDAY_44731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 68), 'SUNDAY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 12), tuple_44724, SUNDAY_44731)

# Assigning a type to the variable 'WEEKDAYS' (line 207)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 0), 'WEEKDAYS', tuple_44724)

@norecursion
def _to_ordinalf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_to_ordinalf'
    module_type_store = module_type_store.open_function_context('_to_ordinalf', 210, 0, False)
    
    # Passed parameters checking function
    _to_ordinalf.stypy_localization = localization
    _to_ordinalf.stypy_type_of_self = None
    _to_ordinalf.stypy_type_store = module_type_store
    _to_ordinalf.stypy_function_name = '_to_ordinalf'
    _to_ordinalf.stypy_param_names_list = ['dt']
    _to_ordinalf.stypy_varargs_param_name = None
    _to_ordinalf.stypy_kwargs_param_name = None
    _to_ordinalf.stypy_call_defaults = defaults
    _to_ordinalf.stypy_call_varargs = varargs
    _to_ordinalf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_to_ordinalf', ['dt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_to_ordinalf', localization, ['dt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_to_ordinalf(...)' code ##################

    unicode_44732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, (-1)), 'unicode', u'\n    Convert :mod:`datetime` or :mod:`date` to the Gregorian date as UTC float\n    days, preserving hours, minutes, seconds and microseconds.  Return value\n    is a :func:`float`.\n    ')
    
    # Assigning a Call to a Name (line 217):
    
    # Assigning a Call to a Name (line 217):
    
    # Call to getattr(...): (line 217)
    # Processing the call arguments (line 217)
    # Getting the type of 'dt' (line 217)
    dt_44734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 18), 'dt', False)
    unicode_44735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 22), 'unicode', u'tzinfo')
    # Getting the type of 'None' (line 217)
    None_44736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 32), 'None', False)
    # Processing the call keyword arguments (line 217)
    kwargs_44737 = {}
    # Getting the type of 'getattr' (line 217)
    getattr_44733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 10), 'getattr', False)
    # Calling getattr(args, kwargs) (line 217)
    getattr_call_result_44738 = invoke(stypy.reporting.localization.Localization(__file__, 217, 10), getattr_44733, *[dt_44734, unicode_44735, None_44736], **kwargs_44737)
    
    # Assigning a type to the variable 'tzi' (line 217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'tzi', getattr_call_result_44738)
    
    # Type idiom detected: calculating its left and rigth part (line 218)
    # Getting the type of 'tzi' (line 218)
    tzi_44739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 4), 'tzi')
    # Getting the type of 'None' (line 218)
    None_44740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 18), 'None')
    
    (may_be_44741, more_types_in_union_44742) = may_not_be_none(tzi_44739, None_44740)

    if may_be_44741:

        if more_types_in_union_44742:
            # Runtime conditional SSA (line 218)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 219):
        
        # Assigning a Call to a Name (line 219):
        
        # Call to astimezone(...): (line 219)
        # Processing the call arguments (line 219)
        # Getting the type of 'UTC' (line 219)
        UTC_44745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 27), 'UTC', False)
        # Processing the call keyword arguments (line 219)
        kwargs_44746 = {}
        # Getting the type of 'dt' (line 219)
        dt_44743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 13), 'dt', False)
        # Obtaining the member 'astimezone' of a type (line 219)
        astimezone_44744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 13), dt_44743, 'astimezone')
        # Calling astimezone(args, kwargs) (line 219)
        astimezone_call_result_44747 = invoke(stypy.reporting.localization.Localization(__file__, 219, 13), astimezone_44744, *[UTC_44745], **kwargs_44746)
        
        # Assigning a type to the variable 'dt' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 8), 'dt', astimezone_call_result_44747)
        
        # Assigning a Name to a Name (line 220):
        
        # Assigning a Name to a Name (line 220):
        # Getting the type of 'UTC' (line 220)
        UTC_44748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 14), 'UTC')
        # Assigning a type to the variable 'tzi' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'tzi', UTC_44748)

        if more_types_in_union_44742:
            # SSA join for if statement (line 218)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 222):
    
    # Assigning a Call to a Name (line 222):
    
    # Call to float(...): (line 222)
    # Processing the call arguments (line 222)
    
    # Call to toordinal(...): (line 222)
    # Processing the call keyword arguments (line 222)
    kwargs_44752 = {}
    # Getting the type of 'dt' (line 222)
    dt_44750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 17), 'dt', False)
    # Obtaining the member 'toordinal' of a type (line 222)
    toordinal_44751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 17), dt_44750, 'toordinal')
    # Calling toordinal(args, kwargs) (line 222)
    toordinal_call_result_44753 = invoke(stypy.reporting.localization.Localization(__file__, 222, 17), toordinal_44751, *[], **kwargs_44752)
    
    # Processing the call keyword arguments (line 222)
    kwargs_44754 = {}
    # Getting the type of 'float' (line 222)
    float_44749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 11), 'float', False)
    # Calling float(args, kwargs) (line 222)
    float_call_result_44755 = invoke(stypy.reporting.localization.Localization(__file__, 222, 11), float_44749, *[toordinal_call_result_44753], **kwargs_44754)
    
    # Assigning a type to the variable 'base' (line 222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 4), 'base', float_call_result_44755)
    
    # Assigning a Call to a Name (line 225):
    
    # Assigning a Call to a Name (line 225):
    
    # Call to (...): (line 225)
    # Processing the call keyword arguments (line 225)
    kwargs_44764 = {}
    
    # Call to getattr(...): (line 225)
    # Processing the call arguments (line 225)
    # Getting the type of 'dt' (line 225)
    dt_44757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 20), 'dt', False)
    unicode_44758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 24), 'unicode', u'date')

    @norecursion
    def _stypy_temp_lambda_10(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_10'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_10', 225, 32, True)
        # Passed parameters checking function
        _stypy_temp_lambda_10.stypy_localization = localization
        _stypy_temp_lambda_10.stypy_type_of_self = None
        _stypy_temp_lambda_10.stypy_type_store = module_type_store
        _stypy_temp_lambda_10.stypy_function_name = '_stypy_temp_lambda_10'
        _stypy_temp_lambda_10.stypy_param_names_list = []
        _stypy_temp_lambda_10.stypy_varargs_param_name = None
        _stypy_temp_lambda_10.stypy_kwargs_param_name = None
        _stypy_temp_lambda_10.stypy_call_defaults = defaults
        _stypy_temp_lambda_10.stypy_call_varargs = varargs
        _stypy_temp_lambda_10.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_10', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_10', [], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        # Getting the type of 'None' (line 225)
        None_44759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 40), 'None', False)
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 32), 'stypy_return_type', None_44759)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_10' in the type store
        # Getting the type of 'stypy_return_type' (line 225)
        stypy_return_type_44760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 32), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_44760)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_10'
        return stypy_return_type_44760

    # Assigning a type to the variable '_stypy_temp_lambda_10' (line 225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 32), '_stypy_temp_lambda_10', _stypy_temp_lambda_10)
    # Getting the type of '_stypy_temp_lambda_10' (line 225)
    _stypy_temp_lambda_10_44761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 32), '_stypy_temp_lambda_10')
    # Processing the call keyword arguments (line 225)
    kwargs_44762 = {}
    # Getting the type of 'getattr' (line 225)
    getattr_44756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 12), 'getattr', False)
    # Calling getattr(args, kwargs) (line 225)
    getattr_call_result_44763 = invoke(stypy.reporting.localization.Localization(__file__, 225, 12), getattr_44756, *[dt_44757, unicode_44758, _stypy_temp_lambda_10_44761], **kwargs_44762)
    
    # Calling (args, kwargs) (line 225)
    _call_result_44765 = invoke(stypy.reporting.localization.Localization(__file__, 225, 12), getattr_call_result_44763, *[], **kwargs_44764)
    
    # Assigning a type to the variable 'cdate' (line 225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'cdate', _call_result_44765)
    
    # Type idiom detected: calculating its left and rigth part (line 226)
    # Getting the type of 'cdate' (line 226)
    cdate_44766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 4), 'cdate')
    # Getting the type of 'None' (line 226)
    None_44767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 20), 'None')
    
    (may_be_44768, more_types_in_union_44769) = may_not_be_none(cdate_44766, None_44767)

    if may_be_44768:

        if more_types_in_union_44769:
            # Runtime conditional SSA (line 226)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 228):
        
        # Assigning a Call to a Name (line 228):
        
        # Call to time(...): (line 228)
        # Processing the call arguments (line 228)
        int_44772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 38), 'int')
        # Processing the call keyword arguments (line 228)
        # Getting the type of 'tzi' (line 228)
        tzi_44773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 48), 'tzi', False)
        keyword_44774 = tzi_44773
        kwargs_44775 = {'tzinfo': keyword_44774}
        # Getting the type of 'datetime' (line 228)
        datetime_44770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 24), 'datetime', False)
        # Obtaining the member 'time' of a type (line 228)
        time_44771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 24), datetime_44770, 'time')
        # Calling time(args, kwargs) (line 228)
        time_call_result_44776 = invoke(stypy.reporting.localization.Localization(__file__, 228, 24), time_44771, *[int_44772], **kwargs_44775)
        
        # Assigning a type to the variable 'midnight_time' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'midnight_time', time_call_result_44776)
        
        # Assigning a Call to a Name (line 230):
        
        # Assigning a Call to a Name (line 230):
        
        # Call to combine(...): (line 230)
        # Processing the call arguments (line 230)
        # Getting the type of 'cdate' (line 230)
        cdate_44780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 40), 'cdate', False)
        # Getting the type of 'midnight_time' (line 230)
        midnight_time_44781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 47), 'midnight_time', False)
        # Processing the call keyword arguments (line 230)
        kwargs_44782 = {}
        # Getting the type of 'datetime' (line 230)
        datetime_44777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 14), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 230)
        datetime_44778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 14), datetime_44777, 'datetime')
        # Obtaining the member 'combine' of a type (line 230)
        combine_44779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 14), datetime_44778, 'combine')
        # Calling combine(args, kwargs) (line 230)
        combine_call_result_44783 = invoke(stypy.reporting.localization.Localization(__file__, 230, 14), combine_44779, *[cdate_44780, midnight_time_44781], **kwargs_44782)
        
        # Assigning a type to the variable 'rdt' (line 230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 8), 'rdt', combine_call_result_44783)
        
        # Getting the type of 'base' (line 233)
        base_44784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'base')
        
        # Call to total_seconds(...): (line 233)
        # Processing the call keyword arguments (line 233)
        kwargs_44789 = {}
        # Getting the type of 'dt' (line 233)
        dt_44785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 17), 'dt', False)
        # Getting the type of 'rdt' (line 233)
        rdt_44786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 22), 'rdt', False)
        # Applying the binary operator '-' (line 233)
        result_sub_44787 = python_operator(stypy.reporting.localization.Localization(__file__, 233, 17), '-', dt_44785, rdt_44786)
        
        # Obtaining the member 'total_seconds' of a type (line 233)
        total_seconds_44788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 17), result_sub_44787, 'total_seconds')
        # Calling total_seconds(args, kwargs) (line 233)
        total_seconds_call_result_44790 = invoke(stypy.reporting.localization.Localization(__file__, 233, 17), total_seconds_44788, *[], **kwargs_44789)
        
        # Getting the type of 'SEC_PER_DAY' (line 233)
        SEC_PER_DAY_44791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 45), 'SEC_PER_DAY')
        # Applying the binary operator 'div' (line 233)
        result_div_44792 = python_operator(stypy.reporting.localization.Localization(__file__, 233, 16), 'div', total_seconds_call_result_44790, SEC_PER_DAY_44791)
        
        # Applying the binary operator '+=' (line 233)
        result_iadd_44793 = python_operator(stypy.reporting.localization.Localization(__file__, 233, 8), '+=', base_44784, result_div_44792)
        # Assigning a type to the variable 'base' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'base', result_iadd_44793)
        

        if more_types_in_union_44769:
            # SSA join for if statement (line 226)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'base' (line 235)
    base_44794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 11), 'base')
    # Assigning a type to the variable 'stypy_return_type' (line 235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 4), 'stypy_return_type', base_44794)
    
    # ################# End of '_to_ordinalf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_to_ordinalf' in the type store
    # Getting the type of 'stypy_return_type' (line 210)
    stypy_return_type_44795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_44795)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_to_ordinalf'
    return stypy_return_type_44795

# Assigning a type to the variable '_to_ordinalf' (line 210)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 0), '_to_ordinalf', _to_ordinalf)

# Assigning a Call to a Name (line 239):

# Assigning a Call to a Name (line 239):

# Call to vectorize(...): (line 239)
# Processing the call arguments (line 239)
# Getting the type of '_to_ordinalf' (line 239)
_to_ordinalf_44798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 42), '_to_ordinalf', False)
# Processing the call keyword arguments (line 239)
kwargs_44799 = {}
# Getting the type of 'np' (line 239)
np_44796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 29), 'np', False)
# Obtaining the member 'vectorize' of a type (line 239)
vectorize_44797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 29), np_44796, 'vectorize')
# Calling vectorize(args, kwargs) (line 239)
vectorize_call_result_44800 = invoke(stypy.reporting.localization.Localization(__file__, 239, 29), vectorize_44797, *[_to_ordinalf_44798], **kwargs_44799)

# Assigning a type to the variable '_to_ordinalf_np_vectorized' (line 239)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 239, 0), '_to_ordinalf_np_vectorized', vectorize_call_result_44800)

@norecursion
def _from_ordinalf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 242)
    None_44801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 25), 'None')
    defaults = [None_44801]
    # Create a new context for function '_from_ordinalf'
    module_type_store = module_type_store.open_function_context('_from_ordinalf', 242, 0, False)
    
    # Passed parameters checking function
    _from_ordinalf.stypy_localization = localization
    _from_ordinalf.stypy_type_of_self = None
    _from_ordinalf.stypy_type_store = module_type_store
    _from_ordinalf.stypy_function_name = '_from_ordinalf'
    _from_ordinalf.stypy_param_names_list = ['x', 'tz']
    _from_ordinalf.stypy_varargs_param_name = None
    _from_ordinalf.stypy_kwargs_param_name = None
    _from_ordinalf.stypy_call_defaults = defaults
    _from_ordinalf.stypy_call_varargs = varargs
    _from_ordinalf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_from_ordinalf', ['x', 'tz'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_from_ordinalf', localization, ['x', 'tz'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_from_ordinalf(...)' code ##################

    unicode_44802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, (-1)), 'unicode', u"\n    Convert Gregorian float of the date, preserving hours, minutes,\n    seconds and microseconds.  Return value is a :class:`datetime`.\n\n    The input date `x` is a float in ordinal days at UTC, and the output will\n    be the specified :class:`datetime` object corresponding to that time in\n    timezone `tz`, or if `tz` is `None`, in the timezone specified in\n    `rcParams['timezone']`.\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 252)
    # Getting the type of 'tz' (line 252)
    tz_44803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 7), 'tz')
    # Getting the type of 'None' (line 252)
    None_44804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 13), 'None')
    
    (may_be_44805, more_types_in_union_44806) = may_be_none(tz_44803, None_44804)

    if may_be_44805:

        if more_types_in_union_44806:
            # Runtime conditional SSA (line 252)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 253):
        
        # Assigning a Call to a Name (line 253):
        
        # Call to _get_rc_timezone(...): (line 253)
        # Processing the call keyword arguments (line 253)
        kwargs_44808 = {}
        # Getting the type of '_get_rc_timezone' (line 253)
        _get_rc_timezone_44807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 13), '_get_rc_timezone', False)
        # Calling _get_rc_timezone(args, kwargs) (line 253)
        _get_rc_timezone_call_result_44809 = invoke(stypy.reporting.localization.Localization(__file__, 253, 13), _get_rc_timezone_44807, *[], **kwargs_44808)
        
        # Assigning a type to the variable 'tz' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 8), 'tz', _get_rc_timezone_call_result_44809)

        if more_types_in_union_44806:
            # SSA join for if statement (line 252)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 255):
    
    # Assigning a Call to a Name (line 255):
    
    # Call to int(...): (line 255)
    # Processing the call arguments (line 255)
    # Getting the type of 'x' (line 255)
    x_44811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 13), 'x', False)
    # Processing the call keyword arguments (line 255)
    kwargs_44812 = {}
    # Getting the type of 'int' (line 255)
    int_44810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 9), 'int', False)
    # Calling int(args, kwargs) (line 255)
    int_call_result_44813 = invoke(stypy.reporting.localization.Localization(__file__, 255, 9), int_44810, *[x_44811], **kwargs_44812)
    
    # Assigning a type to the variable 'ix' (line 255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 4), 'ix', int_call_result_44813)
    
    # Assigning a Call to a Name (line 256):
    
    # Assigning a Call to a Name (line 256):
    
    # Call to replace(...): (line 256)
    # Processing the call keyword arguments (line 256)
    # Getting the type of 'UTC' (line 256)
    UTC_44821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 58), 'UTC', False)
    keyword_44822 = UTC_44821
    kwargs_44823 = {'tzinfo': keyword_44822}
    
    # Call to fromordinal(...): (line 256)
    # Processing the call arguments (line 256)
    # Getting the type of 'ix' (line 256)
    ix_44817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 39), 'ix', False)
    # Processing the call keyword arguments (line 256)
    kwargs_44818 = {}
    # Getting the type of 'datetime' (line 256)
    datetime_44814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 9), 'datetime', False)
    # Obtaining the member 'datetime' of a type (line 256)
    datetime_44815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 9), datetime_44814, 'datetime')
    # Obtaining the member 'fromordinal' of a type (line 256)
    fromordinal_44816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 9), datetime_44815, 'fromordinal')
    # Calling fromordinal(args, kwargs) (line 256)
    fromordinal_call_result_44819 = invoke(stypy.reporting.localization.Localization(__file__, 256, 9), fromordinal_44816, *[ix_44817], **kwargs_44818)
    
    # Obtaining the member 'replace' of a type (line 256)
    replace_44820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 9), fromordinal_call_result_44819, 'replace')
    # Calling replace(args, kwargs) (line 256)
    replace_call_result_44824 = invoke(stypy.reporting.localization.Localization(__file__, 256, 9), replace_44820, *[], **kwargs_44823)
    
    # Assigning a type to the variable 'dt' (line 256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 4), 'dt', replace_call_result_44824)
    
    # Assigning a BinOp to a Name (line 258):
    
    # Assigning a BinOp to a Name (line 258):
    
    # Call to float(...): (line 258)
    # Processing the call arguments (line 258)
    # Getting the type of 'x' (line 258)
    x_44826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 22), 'x', False)
    # Processing the call keyword arguments (line 258)
    kwargs_44827 = {}
    # Getting the type of 'float' (line 258)
    float_44825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 16), 'float', False)
    # Calling float(args, kwargs) (line 258)
    float_call_result_44828 = invoke(stypy.reporting.localization.Localization(__file__, 258, 16), float_44825, *[x_44826], **kwargs_44827)
    
    # Getting the type of 'ix' (line 258)
    ix_44829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 27), 'ix')
    # Applying the binary operator '-' (line 258)
    result_sub_44830 = python_operator(stypy.reporting.localization.Localization(__file__, 258, 16), '-', float_call_result_44828, ix_44829)
    
    # Assigning a type to the variable 'remainder' (line 258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 4), 'remainder', result_sub_44830)
    
    # Getting the type of 'dt' (line 261)
    dt_44831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'dt')
    
    # Call to timedelta(...): (line 261)
    # Processing the call keyword arguments (line 261)
    
    # Call to int(...): (line 261)
    # Processing the call arguments (line 261)
    # Getting the type of 'remainder' (line 261)
    remainder_44835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 46), 'remainder', False)
    # Getting the type of 'MUSECONDS_PER_DAY' (line 261)
    MUSECONDS_PER_DAY_44836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 58), 'MUSECONDS_PER_DAY', False)
    # Applying the binary operator '*' (line 261)
    result_mul_44837 = python_operator(stypy.reporting.localization.Localization(__file__, 261, 46), '*', remainder_44835, MUSECONDS_PER_DAY_44836)
    
    # Processing the call keyword arguments (line 261)
    kwargs_44838 = {}
    # Getting the type of 'int' (line 261)
    int_44834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 42), 'int', False)
    # Calling int(args, kwargs) (line 261)
    int_call_result_44839 = invoke(stypy.reporting.localization.Localization(__file__, 261, 42), int_44834, *[result_mul_44837], **kwargs_44838)
    
    keyword_44840 = int_call_result_44839
    kwargs_44841 = {'microseconds': keyword_44840}
    # Getting the type of 'datetime' (line 261)
    datetime_44832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 10), 'datetime', False)
    # Obtaining the member 'timedelta' of a type (line 261)
    timedelta_44833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 10), datetime_44832, 'timedelta')
    # Calling timedelta(args, kwargs) (line 261)
    timedelta_call_result_44842 = invoke(stypy.reporting.localization.Localization(__file__, 261, 10), timedelta_44833, *[], **kwargs_44841)
    
    # Applying the binary operator '+=' (line 261)
    result_iadd_44843 = python_operator(stypy.reporting.localization.Localization(__file__, 261, 4), '+=', dt_44831, timedelta_call_result_44842)
    # Assigning a type to the variable 'dt' (line 261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'dt', result_iadd_44843)
    
    
    
    # Getting the type of 'dt' (line 264)
    dt_44844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 7), 'dt')
    # Obtaining the member 'microsecond' of a type (line 264)
    microsecond_44845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 7), dt_44844, 'microsecond')
    int_44846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 24), 'int')
    # Applying the binary operator '<' (line 264)
    result_lt_44847 = python_operator(stypy.reporting.localization.Localization(__file__, 264, 7), '<', microsecond_44845, int_44846)
    
    # Testing the type of an if condition (line 264)
    if_condition_44848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 264, 4), result_lt_44847)
    # Assigning a type to the variable 'if_condition_44848' (line 264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 4), 'if_condition_44848', if_condition_44848)
    # SSA begins for if statement (line 264)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 265):
    
    # Assigning a Call to a Name (line 265):
    
    # Call to replace(...): (line 265)
    # Processing the call keyword arguments (line 265)
    int_44851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, 36), 'int')
    keyword_44852 = int_44851
    kwargs_44853 = {'microsecond': keyword_44852}
    # Getting the type of 'dt' (line 265)
    dt_44849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 13), 'dt', False)
    # Obtaining the member 'replace' of a type (line 265)
    replace_44850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 13), dt_44849, 'replace')
    # Calling replace(args, kwargs) (line 265)
    replace_call_result_44854 = invoke(stypy.reporting.localization.Localization(__file__, 265, 13), replace_44850, *[], **kwargs_44853)
    
    # Assigning a type to the variable 'dt' (line 265)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'dt', replace_call_result_44854)
    # SSA branch for the else part of an if statement (line 264)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'dt' (line 266)
    dt_44855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 9), 'dt')
    # Obtaining the member 'microsecond' of a type (line 266)
    microsecond_44856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 266, 9), dt_44855, 'microsecond')
    int_44857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 26), 'int')
    # Applying the binary operator '>' (line 266)
    result_gt_44858 = python_operator(stypy.reporting.localization.Localization(__file__, 266, 9), '>', microsecond_44856, int_44857)
    
    # Testing the type of an if condition (line 266)
    if_condition_44859 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 266, 9), result_gt_44858)
    # Assigning a type to the variable 'if_condition_44859' (line 266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 9), 'if_condition_44859', if_condition_44859)
    # SSA begins for if statement (line 266)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'dt' (line 267)
    dt_44860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 8), 'dt')
    
    # Call to timedelta(...): (line 267)
    # Processing the call keyword arguments (line 267)
    float_44863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 46), 'float')
    # Getting the type of 'dt' (line 267)
    dt_44864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 52), 'dt', False)
    # Obtaining the member 'microsecond' of a type (line 267)
    microsecond_44865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 52), dt_44864, 'microsecond')
    # Applying the binary operator '-' (line 267)
    result_sub_44866 = python_operator(stypy.reporting.localization.Localization(__file__, 267, 46), '-', float_44863, microsecond_44865)
    
    keyword_44867 = result_sub_44866
    kwargs_44868 = {'microseconds': keyword_44867}
    # Getting the type of 'datetime' (line 267)
    datetime_44861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 14), 'datetime', False)
    # Obtaining the member 'timedelta' of a type (line 267)
    timedelta_44862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 14), datetime_44861, 'timedelta')
    # Calling timedelta(args, kwargs) (line 267)
    timedelta_call_result_44869 = invoke(stypy.reporting.localization.Localization(__file__, 267, 14), timedelta_44862, *[], **kwargs_44868)
    
    # Applying the binary operator '+=' (line 267)
    result_iadd_44870 = python_operator(stypy.reporting.localization.Localization(__file__, 267, 8), '+=', dt_44860, timedelta_call_result_44869)
    # Assigning a type to the variable 'dt' (line 267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 8), 'dt', result_iadd_44870)
    
    # SSA join for if statement (line 266)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 264)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to astimezone(...): (line 269)
    # Processing the call arguments (line 269)
    # Getting the type of 'tz' (line 269)
    tz_44873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 25), 'tz', False)
    # Processing the call keyword arguments (line 269)
    kwargs_44874 = {}
    # Getting the type of 'dt' (line 269)
    dt_44871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 11), 'dt', False)
    # Obtaining the member 'astimezone' of a type (line 269)
    astimezone_44872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 11), dt_44871, 'astimezone')
    # Calling astimezone(args, kwargs) (line 269)
    astimezone_call_result_44875 = invoke(stypy.reporting.localization.Localization(__file__, 269, 11), astimezone_44872, *[tz_44873], **kwargs_44874)
    
    # Assigning a type to the variable 'stypy_return_type' (line 269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'stypy_return_type', astimezone_call_result_44875)
    
    # ################# End of '_from_ordinalf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_from_ordinalf' in the type store
    # Getting the type of 'stypy_return_type' (line 242)
    stypy_return_type_44876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_44876)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_from_ordinalf'
    return stypy_return_type_44876

# Assigning a type to the variable '_from_ordinalf' (line 242)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 0), '_from_ordinalf', _from_ordinalf)

# Assigning a Call to a Name (line 273):

# Assigning a Call to a Name (line 273):

# Call to vectorize(...): (line 273)
# Processing the call arguments (line 273)
# Getting the type of '_from_ordinalf' (line 273)
_from_ordinalf_44879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 44), '_from_ordinalf', False)
# Processing the call keyword arguments (line 273)
kwargs_44880 = {}
# Getting the type of 'np' (line 273)
np_44877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 31), 'np', False)
# Obtaining the member 'vectorize' of a type (line 273)
vectorize_44878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 31), np_44877, 'vectorize')
# Calling vectorize(args, kwargs) (line 273)
vectorize_call_result_44881 = invoke(stypy.reporting.localization.Localization(__file__, 273, 31), vectorize_44878, *[_from_ordinalf_44879], **kwargs_44880)

# Assigning a type to the variable '_from_ordinalf_np_vectorized' (line 273)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 0), '_from_ordinalf_np_vectorized', vectorize_call_result_44881)
# Declaration of the 'strpdate2num' class

class strpdate2num(object, ):
    unicode_44882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, (-1)), 'unicode', u'\n    Use this class to parse date strings to matplotlib datenums when\n    you know the date format string of the date you are parsing.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 281, 4, False)
        # Assigning a type to the variable 'self' (line 282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'strpdate2num.__init__', ['fmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_44883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 282, 8), 'unicode', u' fmt: any valid strptime format is supported ')
        
        # Assigning a Name to a Attribute (line 283):
        
        # Assigning a Name to a Attribute (line 283):
        # Getting the type of 'fmt' (line 283)
        fmt_44884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 19), 'fmt')
        # Getting the type of 'self' (line 283)
        self_44885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 8), 'self')
        # Setting the type of the member 'fmt' of a type (line 283)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 283, 8), self_44885, 'fmt', fmt_44884)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 285, 4, False)
        # Assigning a type to the variable 'self' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        strpdate2num.__call__.__dict__.__setitem__('stypy_localization', localization)
        strpdate2num.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        strpdate2num.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        strpdate2num.__call__.__dict__.__setitem__('stypy_function_name', 'strpdate2num.__call__')
        strpdate2num.__call__.__dict__.__setitem__('stypy_param_names_list', ['s'])
        strpdate2num.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        strpdate2num.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        strpdate2num.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        strpdate2num.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        strpdate2num.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        strpdate2num.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'strpdate2num.__call__', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_44886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, (-1)), 'unicode', u's : string to be converted\n           return value: a date2num float\n        ')
        
        # Call to date2num(...): (line 289)
        # Processing the call arguments (line 289)
        
        # Call to datetime(...): (line 289)
        
        # Obtaining the type of the subscript
        int_44890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 71), 'int')
        slice_44891 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 289, 43), None, int_44890, None)
        
        # Call to strptime(...): (line 289)
        # Processing the call arguments (line 289)
        # Getting the type of 's' (line 289)
        s_44894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 57), 's', False)
        # Getting the type of 'self' (line 289)
        self_44895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 60), 'self', False)
        # Obtaining the member 'fmt' of a type (line 289)
        fmt_44896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 60), self_44895, 'fmt')
        # Processing the call keyword arguments (line 289)
        kwargs_44897 = {}
        # Getting the type of 'time' (line 289)
        time_44892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 43), 'time', False)
        # Obtaining the member 'strptime' of a type (line 289)
        strptime_44893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 43), time_44892, 'strptime')
        # Calling strptime(args, kwargs) (line 289)
        strptime_call_result_44898 = invoke(stypy.reporting.localization.Localization(__file__, 289, 43), strptime_44893, *[s_44894, fmt_44896], **kwargs_44897)
        
        # Obtaining the member '__getitem__' of a type (line 289)
        getitem___44899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 43), strptime_call_result_44898, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 289)
        subscript_call_result_44900 = invoke(stypy.reporting.localization.Localization(__file__, 289, 43), getitem___44899, slice_44891)
        
        # Processing the call keyword arguments (line 289)
        kwargs_44901 = {}
        # Getting the type of 'datetime' (line 289)
        datetime_44888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 24), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 289)
        datetime_44889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 24), datetime_44888, 'datetime')
        # Calling datetime(args, kwargs) (line 289)
        datetime_call_result_44902 = invoke(stypy.reporting.localization.Localization(__file__, 289, 24), datetime_44889, *[subscript_call_result_44900], **kwargs_44901)
        
        # Processing the call keyword arguments (line 289)
        kwargs_44903 = {}
        # Getting the type of 'date2num' (line 289)
        date2num_44887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 15), 'date2num', False)
        # Calling date2num(args, kwargs) (line 289)
        date2num_call_result_44904 = invoke(stypy.reporting.localization.Localization(__file__, 289, 15), date2num_44887, *[datetime_call_result_44902], **kwargs_44903)
        
        # Assigning a type to the variable 'stypy_return_type' (line 289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 8), 'stypy_return_type', date2num_call_result_44904)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 285)
        stypy_return_type_44905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_44905)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_44905


# Assigning a type to the variable 'strpdate2num' (line 276)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 0), 'strpdate2num', strpdate2num)
# Declaration of the 'bytespdate2num' class
# Getting the type of 'strpdate2num' (line 292)
strpdate2num_44906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 21), 'strpdate2num')

class bytespdate2num(strpdate2num_44906, ):
    unicode_44907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, (-1)), 'unicode', u'\n    Use this class to parse date strings to matplotlib datenums when\n    you know the date format string of the date you are parsing.  See\n    :file:`examples/misc/load_converter.py`.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_44908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 37), 'unicode', u'utf-8')
        defaults = [unicode_44908]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 298, 4, False)
        # Assigning a type to the variable 'self' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'bytespdate2num.__init__', ['fmt', 'encoding'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fmt', 'encoding'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_44909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 303, (-1)), 'unicode', u"\n        Args:\n            fmt: any valid strptime format is supported\n            encoding: encoding to use on byte input (default: 'utf-8')\n        ")
        
        # Call to __init__(...): (line 304)
        # Processing the call arguments (line 304)
        # Getting the type of 'fmt' (line 304)
        fmt_44916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 45), 'fmt', False)
        # Processing the call keyword arguments (line 304)
        kwargs_44917 = {}
        
        # Call to super(...): (line 304)
        # Processing the call arguments (line 304)
        # Getting the type of 'bytespdate2num' (line 304)
        bytespdate2num_44911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 14), 'bytespdate2num', False)
        # Getting the type of 'self' (line 304)
        self_44912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 30), 'self', False)
        # Processing the call keyword arguments (line 304)
        kwargs_44913 = {}
        # Getting the type of 'super' (line 304)
        super_44910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 8), 'super', False)
        # Calling super(args, kwargs) (line 304)
        super_call_result_44914 = invoke(stypy.reporting.localization.Localization(__file__, 304, 8), super_44910, *[bytespdate2num_44911, self_44912], **kwargs_44913)
        
        # Obtaining the member '__init__' of a type (line 304)
        init___44915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 8), super_call_result_44914, '__init__')
        # Calling __init__(args, kwargs) (line 304)
        init___call_result_44918 = invoke(stypy.reporting.localization.Localization(__file__, 304, 8), init___44915, *[fmt_44916], **kwargs_44917)
        
        
        # Assigning a Name to a Attribute (line 305):
        
        # Assigning a Name to a Attribute (line 305):
        # Getting the type of 'encoding' (line 305)
        encoding_44919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 24), 'encoding')
        # Getting the type of 'self' (line 305)
        self_44920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'self')
        # Setting the type of the member 'encoding' of a type (line 305)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 8), self_44920, 'encoding', encoding_44919)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 307, 4, False)
        # Assigning a type to the variable 'self' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        bytespdate2num.__call__.__dict__.__setitem__('stypy_localization', localization)
        bytespdate2num.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        bytespdate2num.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        bytespdate2num.__call__.__dict__.__setitem__('stypy_function_name', 'bytespdate2num.__call__')
        bytespdate2num.__call__.__dict__.__setitem__('stypy_param_names_list', ['b'])
        bytespdate2num.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        bytespdate2num.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        bytespdate2num.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        bytespdate2num.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        bytespdate2num.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        bytespdate2num.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'bytespdate2num.__call__', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_44921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, (-1)), 'unicode', u'\n        Args:\n            b: byte input to be converted\n        Returns:\n            A date2num float\n        ')
        
        # Assigning a Call to a Name (line 314):
        
        # Assigning a Call to a Name (line 314):
        
        # Call to decode(...): (line 314)
        # Processing the call arguments (line 314)
        # Getting the type of 'self' (line 314)
        self_44924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 21), 'self', False)
        # Obtaining the member 'encoding' of a type (line 314)
        encoding_44925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 21), self_44924, 'encoding')
        # Processing the call keyword arguments (line 314)
        kwargs_44926 = {}
        # Getting the type of 'b' (line 314)
        b_44922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'b', False)
        # Obtaining the member 'decode' of a type (line 314)
        decode_44923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 12), b_44922, 'decode')
        # Calling decode(args, kwargs) (line 314)
        decode_call_result_44927 = invoke(stypy.reporting.localization.Localization(__file__, 314, 12), decode_44923, *[encoding_44925], **kwargs_44926)
        
        # Assigning a type to the variable 's' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 's', decode_call_result_44927)
        
        # Call to __call__(...): (line 315)
        # Processing the call arguments (line 315)
        # Getting the type of 's' (line 315)
        s_44934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 52), 's', False)
        # Processing the call keyword arguments (line 315)
        kwargs_44935 = {}
        
        # Call to super(...): (line 315)
        # Processing the call arguments (line 315)
        # Getting the type of 'bytespdate2num' (line 315)
        bytespdate2num_44929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 21), 'bytespdate2num', False)
        # Getting the type of 'self' (line 315)
        self_44930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 37), 'self', False)
        # Processing the call keyword arguments (line 315)
        kwargs_44931 = {}
        # Getting the type of 'super' (line 315)
        super_44928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 15), 'super', False)
        # Calling super(args, kwargs) (line 315)
        super_call_result_44932 = invoke(stypy.reporting.localization.Localization(__file__, 315, 15), super_44928, *[bytespdate2num_44929, self_44930], **kwargs_44931)
        
        # Obtaining the member '__call__' of a type (line 315)
        call___44933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 15), super_call_result_44932, '__call__')
        # Calling __call__(args, kwargs) (line 315)
        call___call_result_44936 = invoke(stypy.reporting.localization.Localization(__file__, 315, 15), call___44933, *[s_44934], **kwargs_44935)
        
        # Assigning a type to the variable 'stypy_return_type' (line 315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 8), 'stypy_return_type', call___call_result_44936)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 307)
        stypy_return_type_44937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_44937)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_44937


# Assigning a type to the variable 'bytespdate2num' (line 292)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 0), 'bytespdate2num', bytespdate2num)

# Assigning a Call to a Name (line 319):

# Assigning a Call to a Name (line 319):

# Call to vectorize(...): (line 319)
# Processing the call arguments (line 319)
# Getting the type of 'dateutil' (line 319)
dateutil_44940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 52), 'dateutil', False)
# Obtaining the member 'parser' of a type (line 319)
parser_44941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 52), dateutil_44940, 'parser')
# Obtaining the member 'parse' of a type (line 319)
parse_44942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 52), parser_44941, 'parse')
# Processing the call keyword arguments (line 319)
kwargs_44943 = {}
# Getting the type of 'np' (line 319)
np_44938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 39), 'np', False)
# Obtaining the member 'vectorize' of a type (line 319)
vectorize_44939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 39), np_44938, 'vectorize')
# Calling vectorize(args, kwargs) (line 319)
vectorize_call_result_44944 = invoke(stypy.reporting.localization.Localization(__file__, 319, 39), vectorize_44939, *[parse_44942], **kwargs_44943)

# Assigning a type to the variable '_dateutil_parser_parse_np_vectorized' (line 319)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 0), '_dateutil_parser_parse_np_vectorized', vectorize_call_result_44944)

@norecursion
def datestr2num(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 322)
    None_44945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 27), 'None')
    defaults = [None_44945]
    # Create a new context for function 'datestr2num'
    module_type_store = module_type_store.open_function_context('datestr2num', 322, 0, False)
    
    # Passed parameters checking function
    datestr2num.stypy_localization = localization
    datestr2num.stypy_type_of_self = None
    datestr2num.stypy_type_store = module_type_store
    datestr2num.stypy_function_name = 'datestr2num'
    datestr2num.stypy_param_names_list = ['d', 'default']
    datestr2num.stypy_varargs_param_name = None
    datestr2num.stypy_kwargs_param_name = None
    datestr2num.stypy_call_defaults = defaults
    datestr2num.stypy_call_varargs = varargs
    datestr2num.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'datestr2num', ['d', 'default'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'datestr2num', localization, ['d', 'default'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'datestr2num(...)' code ##################

    unicode_44946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, (-1)), 'unicode', u'\n    Convert a date string to a datenum using\n    :func:`dateutil.parser.parse`.\n\n    Parameters\n    ----------\n    d : string or sequence of strings\n        The dates to convert.\n\n    default : datetime instance, optional\n        The default date to use when fields are missing in *d*.\n    ')
    
    
    # Call to isinstance(...): (line 335)
    # Processing the call arguments (line 335)
    # Getting the type of 'd' (line 335)
    d_44948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 18), 'd', False)
    # Getting the type of 'six' (line 335)
    six_44949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 21), 'six', False)
    # Obtaining the member 'string_types' of a type (line 335)
    string_types_44950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 21), six_44949, 'string_types')
    # Processing the call keyword arguments (line 335)
    kwargs_44951 = {}
    # Getting the type of 'isinstance' (line 335)
    isinstance_44947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 335)
    isinstance_call_result_44952 = invoke(stypy.reporting.localization.Localization(__file__, 335, 7), isinstance_44947, *[d_44948, string_types_44950], **kwargs_44951)
    
    # Testing the type of an if condition (line 335)
    if_condition_44953 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 335, 4), isinstance_call_result_44952)
    # Assigning a type to the variable 'if_condition_44953' (line 335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 4), 'if_condition_44953', if_condition_44953)
    # SSA begins for if statement (line 335)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 336):
    
    # Assigning a Call to a Name (line 336):
    
    # Call to parse(...): (line 336)
    # Processing the call arguments (line 336)
    # Getting the type of 'd' (line 336)
    d_44957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 35), 'd', False)
    # Processing the call keyword arguments (line 336)
    # Getting the type of 'default' (line 336)
    default_44958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 46), 'default', False)
    keyword_44959 = default_44958
    kwargs_44960 = {'default': keyword_44959}
    # Getting the type of 'dateutil' (line 336)
    dateutil_44954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 13), 'dateutil', False)
    # Obtaining the member 'parser' of a type (line 336)
    parser_44955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 13), dateutil_44954, 'parser')
    # Obtaining the member 'parse' of a type (line 336)
    parse_44956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 13), parser_44955, 'parse')
    # Calling parse(args, kwargs) (line 336)
    parse_call_result_44961 = invoke(stypy.reporting.localization.Localization(__file__, 336, 13), parse_44956, *[d_44957], **kwargs_44960)
    
    # Assigning a type to the variable 'dt' (line 336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 8), 'dt', parse_call_result_44961)
    
    # Call to date2num(...): (line 337)
    # Processing the call arguments (line 337)
    # Getting the type of 'dt' (line 337)
    dt_44963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 24), 'dt', False)
    # Processing the call keyword arguments (line 337)
    kwargs_44964 = {}
    # Getting the type of 'date2num' (line 337)
    date2num_44962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 15), 'date2num', False)
    # Calling date2num(args, kwargs) (line 337)
    date2num_call_result_44965 = invoke(stypy.reporting.localization.Localization(__file__, 337, 15), date2num_44962, *[dt_44963], **kwargs_44964)
    
    # Assigning a type to the variable 'stypy_return_type' (line 337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 8), 'stypy_return_type', date2num_call_result_44965)
    # SSA branch for the else part of an if statement (line 335)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 339)
    # Getting the type of 'default' (line 339)
    default_44966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 8), 'default')
    # Getting the type of 'None' (line 339)
    None_44967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 26), 'None')
    
    (may_be_44968, more_types_in_union_44969) = may_not_be_none(default_44966, None_44967)

    if may_be_44968:

        if more_types_in_union_44969:
            # Runtime conditional SSA (line 339)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a ListComp to a Name (line 340):
        
        # Assigning a ListComp to a Name (line 340):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'd' (line 340)
        d_44978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 68), 'd')
        comprehension_44979 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 340, 17), d_44978)
        # Assigning a type to the variable 's' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 17), 's', comprehension_44979)
        
        # Call to parse(...): (line 340)
        # Processing the call arguments (line 340)
        # Getting the type of 's' (line 340)
        s_44973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 39), 's', False)
        # Processing the call keyword arguments (line 340)
        # Getting the type of 'default' (line 340)
        default_44974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 50), 'default', False)
        keyword_44975 = default_44974
        kwargs_44976 = {'default': keyword_44975}
        # Getting the type of 'dateutil' (line 340)
        dateutil_44970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 17), 'dateutil', False)
        # Obtaining the member 'parser' of a type (line 340)
        parser_44971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 17), dateutil_44970, 'parser')
        # Obtaining the member 'parse' of a type (line 340)
        parse_44972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 17), parser_44971, 'parse')
        # Calling parse(args, kwargs) (line 340)
        parse_call_result_44977 = invoke(stypy.reporting.localization.Localization(__file__, 340, 17), parse_44972, *[s_44973], **kwargs_44976)
        
        list_44980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 17), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 340, 17), list_44980, parse_call_result_44977)
        # Assigning a type to the variable 'd' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 12), 'd', list_44980)

        if more_types_in_union_44969:
            # SSA join for if statement (line 339)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 341):
    
    # Assigning a Call to a Name (line 341):
    
    # Call to asarray(...): (line 341)
    # Processing the call arguments (line 341)
    # Getting the type of 'd' (line 341)
    d_44983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 23), 'd', False)
    # Processing the call keyword arguments (line 341)
    kwargs_44984 = {}
    # Getting the type of 'np' (line 341)
    np_44981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 341)
    asarray_44982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 12), np_44981, 'asarray')
    # Calling asarray(args, kwargs) (line 341)
    asarray_call_result_44985 = invoke(stypy.reporting.localization.Localization(__file__, 341, 12), asarray_44982, *[d_44983], **kwargs_44984)
    
    # Assigning a type to the variable 'd' (line 341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 8), 'd', asarray_call_result_44985)
    
    
    # Getting the type of 'd' (line 342)
    d_44986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 15), 'd')
    # Obtaining the member 'size' of a type (line 342)
    size_44987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 15), d_44986, 'size')
    # Applying the 'not' unary operator (line 342)
    result_not__44988 = python_operator(stypy.reporting.localization.Localization(__file__, 342, 11), 'not', size_44987)
    
    # Testing the type of an if condition (line 342)
    if_condition_44989 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 342, 8), result_not__44988)
    # Assigning a type to the variable 'if_condition_44989' (line 342)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 8), 'if_condition_44989', if_condition_44989)
    # SSA begins for if statement (line 342)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'd' (line 343)
    d_44990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 19), 'd')
    # Assigning a type to the variable 'stypy_return_type' (line 343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 12), 'stypy_return_type', d_44990)
    # SSA join for if statement (line 342)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to date2num(...): (line 344)
    # Processing the call arguments (line 344)
    
    # Call to _dateutil_parser_parse_np_vectorized(...): (line 344)
    # Processing the call arguments (line 344)
    # Getting the type of 'd' (line 344)
    d_44993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 61), 'd', False)
    # Processing the call keyword arguments (line 344)
    kwargs_44994 = {}
    # Getting the type of '_dateutil_parser_parse_np_vectorized' (line 344)
    _dateutil_parser_parse_np_vectorized_44992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 24), '_dateutil_parser_parse_np_vectorized', False)
    # Calling _dateutil_parser_parse_np_vectorized(args, kwargs) (line 344)
    _dateutil_parser_parse_np_vectorized_call_result_44995 = invoke(stypy.reporting.localization.Localization(__file__, 344, 24), _dateutil_parser_parse_np_vectorized_44992, *[d_44993], **kwargs_44994)
    
    # Processing the call keyword arguments (line 344)
    kwargs_44996 = {}
    # Getting the type of 'date2num' (line 344)
    date2num_44991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 15), 'date2num', False)
    # Calling date2num(args, kwargs) (line 344)
    date2num_call_result_44997 = invoke(stypy.reporting.localization.Localization(__file__, 344, 15), date2num_44991, *[_dateutil_parser_parse_np_vectorized_call_result_44995], **kwargs_44996)
    
    # Assigning a type to the variable 'stypy_return_type' (line 344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 8), 'stypy_return_type', date2num_call_result_44997)
    # SSA join for if statement (line 335)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'datestr2num(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'datestr2num' in the type store
    # Getting the type of 'stypy_return_type' (line 322)
    stypy_return_type_44998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_44998)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'datestr2num'
    return stypy_return_type_44998

# Assigning a type to the variable 'datestr2num' (line 322)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 0), 'datestr2num', datestr2num)

@norecursion
def date2num(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'date2num'
    module_type_store = module_type_store.open_function_context('date2num', 347, 0, False)
    
    # Passed parameters checking function
    date2num.stypy_localization = localization
    date2num.stypy_type_of_self = None
    date2num.stypy_type_store = module_type_store
    date2num.stypy_function_name = 'date2num'
    date2num.stypy_param_names_list = ['d']
    date2num.stypy_varargs_param_name = None
    date2num.stypy_kwargs_param_name = None
    date2num.stypy_call_defaults = defaults
    date2num.stypy_call_varargs = varargs
    date2num.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'date2num', ['d'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'date2num', localization, ['d'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'date2num(...)' code ##################

    unicode_44999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 366, (-1)), 'unicode', u'\n    Converts datetime objects to Matplotlib dates.\n\n    Parameters\n    ----------\n    d : :class:`datetime` or sequence of :class:`datetime`\n\n    Returns\n    -------\n    float or sequence of floats\n        Number of days (fraction part represents hours, minutes, seconds)\n        since 0001-01-01 00:00:00 UTC, plus one.\n\n    Notes\n    -----\n    The addition of one here is a historical artifact. Also, note that the\n    Gregorian calendar is assumed; this is not universal practice.\n    For details see the module docstring.\n    ')
    
    
    
    # Call to iterable(...): (line 367)
    # Processing the call arguments (line 367)
    # Getting the type of 'd' (line 367)
    d_45002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 26), 'd', False)
    # Processing the call keyword arguments (line 367)
    kwargs_45003 = {}
    # Getting the type of 'cbook' (line 367)
    cbook_45000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 11), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 367)
    iterable_45001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 11), cbook_45000, 'iterable')
    # Calling iterable(args, kwargs) (line 367)
    iterable_call_result_45004 = invoke(stypy.reporting.localization.Localization(__file__, 367, 11), iterable_45001, *[d_45002], **kwargs_45003)
    
    # Applying the 'not' unary operator (line 367)
    result_not__45005 = python_operator(stypy.reporting.localization.Localization(__file__, 367, 7), 'not', iterable_call_result_45004)
    
    # Testing the type of an if condition (line 367)
    if_condition_45006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 367, 4), result_not__45005)
    # Assigning a type to the variable 'if_condition_45006' (line 367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 4), 'if_condition_45006', if_condition_45006)
    # SSA begins for if statement (line 367)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _to_ordinalf(...): (line 368)
    # Processing the call arguments (line 368)
    # Getting the type of 'd' (line 368)
    d_45008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 28), 'd', False)
    # Processing the call keyword arguments (line 368)
    kwargs_45009 = {}
    # Getting the type of '_to_ordinalf' (line 368)
    _to_ordinalf_45007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 15), '_to_ordinalf', False)
    # Calling _to_ordinalf(args, kwargs) (line 368)
    _to_ordinalf_call_result_45010 = invoke(stypy.reporting.localization.Localization(__file__, 368, 15), _to_ordinalf_45007, *[d_45008], **kwargs_45009)
    
    # Assigning a type to the variable 'stypy_return_type' (line 368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'stypy_return_type', _to_ordinalf_call_result_45010)
    # SSA branch for the else part of an if statement (line 367)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 370):
    
    # Assigning a Call to a Name (line 370):
    
    # Call to asarray(...): (line 370)
    # Processing the call arguments (line 370)
    # Getting the type of 'd' (line 370)
    d_45013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 23), 'd', False)
    # Processing the call keyword arguments (line 370)
    kwargs_45014 = {}
    # Getting the type of 'np' (line 370)
    np_45011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 370)
    asarray_45012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 12), np_45011, 'asarray')
    # Calling asarray(args, kwargs) (line 370)
    asarray_call_result_45015 = invoke(stypy.reporting.localization.Localization(__file__, 370, 12), asarray_45012, *[d_45013], **kwargs_45014)
    
    # Assigning a type to the variable 'd' (line 370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 8), 'd', asarray_call_result_45015)
    
    
    # Getting the type of 'd' (line 371)
    d_45016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 15), 'd')
    # Obtaining the member 'size' of a type (line 371)
    size_45017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 15), d_45016, 'size')
    # Applying the 'not' unary operator (line 371)
    result_not__45018 = python_operator(stypy.reporting.localization.Localization(__file__, 371, 11), 'not', size_45017)
    
    # Testing the type of an if condition (line 371)
    if_condition_45019 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 371, 8), result_not__45018)
    # Assigning a type to the variable 'if_condition_45019' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 8), 'if_condition_45019', if_condition_45019)
    # SSA begins for if statement (line 371)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'd' (line 372)
    d_45020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 19), 'd')
    # Assigning a type to the variable 'stypy_return_type' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 12), 'stypy_return_type', d_45020)
    # SSA join for if statement (line 371)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _to_ordinalf_np_vectorized(...): (line 373)
    # Processing the call arguments (line 373)
    # Getting the type of 'd' (line 373)
    d_45022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 42), 'd', False)
    # Processing the call keyword arguments (line 373)
    kwargs_45023 = {}
    # Getting the type of '_to_ordinalf_np_vectorized' (line 373)
    _to_ordinalf_np_vectorized_45021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 15), '_to_ordinalf_np_vectorized', False)
    # Calling _to_ordinalf_np_vectorized(args, kwargs) (line 373)
    _to_ordinalf_np_vectorized_call_result_45024 = invoke(stypy.reporting.localization.Localization(__file__, 373, 15), _to_ordinalf_np_vectorized_45021, *[d_45022], **kwargs_45023)
    
    # Assigning a type to the variable 'stypy_return_type' (line 373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 8), 'stypy_return_type', _to_ordinalf_np_vectorized_call_result_45024)
    # SSA join for if statement (line 367)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'date2num(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'date2num' in the type store
    # Getting the type of 'stypy_return_type' (line 347)
    stypy_return_type_45025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_45025)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'date2num'
    return stypy_return_type_45025

# Assigning a type to the variable 'date2num' (line 347)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 347, 0), 'date2num', date2num)

@norecursion
def julian2num(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'julian2num'
    module_type_store = module_type_store.open_function_context('julian2num', 376, 0, False)
    
    # Passed parameters checking function
    julian2num.stypy_localization = localization
    julian2num.stypy_type_of_self = None
    julian2num.stypy_type_store = module_type_store
    julian2num.stypy_function_name = 'julian2num'
    julian2num.stypy_param_names_list = ['j']
    julian2num.stypy_varargs_param_name = None
    julian2num.stypy_kwargs_param_name = None
    julian2num.stypy_call_defaults = defaults
    julian2num.stypy_call_varargs = varargs
    julian2num.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'julian2num', ['j'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'julian2num', localization, ['j'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'julian2num(...)' code ##################

    unicode_45026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, (-1)), 'unicode', u'\n    Convert a Julian date (or sequence) to a matplotlib date (or sequence).\n\n    Parameters\n    ----------\n    k : float or sequence of floats\n        Julian date(s)\n\n    Returns\n    -------\n    float or sequence of floats\n        Matplotlib date(s)\n    ')
    
    
    # Call to iterable(...): (line 390)
    # Processing the call arguments (line 390)
    # Getting the type of 'j' (line 390)
    j_45029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 22), 'j', False)
    # Processing the call keyword arguments (line 390)
    kwargs_45030 = {}
    # Getting the type of 'cbook' (line 390)
    cbook_45027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 7), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 390)
    iterable_45028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 7), cbook_45027, 'iterable')
    # Calling iterable(args, kwargs) (line 390)
    iterable_call_result_45031 = invoke(stypy.reporting.localization.Localization(__file__, 390, 7), iterable_45028, *[j_45029], **kwargs_45030)
    
    # Testing the type of an if condition (line 390)
    if_condition_45032 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 390, 4), iterable_call_result_45031)
    # Assigning a type to the variable 'if_condition_45032' (line 390)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 4), 'if_condition_45032', if_condition_45032)
    # SSA begins for if statement (line 390)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 391):
    
    # Assigning a Call to a Name (line 391):
    
    # Call to asarray(...): (line 391)
    # Processing the call arguments (line 391)
    # Getting the type of 'j' (line 391)
    j_45035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 23), 'j', False)
    # Processing the call keyword arguments (line 391)
    kwargs_45036 = {}
    # Getting the type of 'np' (line 391)
    np_45033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 391)
    asarray_45034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 12), np_45033, 'asarray')
    # Calling asarray(args, kwargs) (line 391)
    asarray_call_result_45037 = invoke(stypy.reporting.localization.Localization(__file__, 391, 12), asarray_45034, *[j_45035], **kwargs_45036)
    
    # Assigning a type to the variable 'j' (line 391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'j', asarray_call_result_45037)
    # SSA join for if statement (line 390)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'j' (line 392)
    j_45038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 11), 'j')
    # Getting the type of 'JULIAN_OFFSET' (line 392)
    JULIAN_OFFSET_45039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 15), 'JULIAN_OFFSET')
    # Applying the binary operator '-' (line 392)
    result_sub_45040 = python_operator(stypy.reporting.localization.Localization(__file__, 392, 11), '-', j_45038, JULIAN_OFFSET_45039)
    
    # Assigning a type to the variable 'stypy_return_type' (line 392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'stypy_return_type', result_sub_45040)
    
    # ################# End of 'julian2num(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'julian2num' in the type store
    # Getting the type of 'stypy_return_type' (line 376)
    stypy_return_type_45041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_45041)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'julian2num'
    return stypy_return_type_45041

# Assigning a type to the variable 'julian2num' (line 376)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 0), 'julian2num', julian2num)

@norecursion
def num2julian(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'num2julian'
    module_type_store = module_type_store.open_function_context('num2julian', 395, 0, False)
    
    # Passed parameters checking function
    num2julian.stypy_localization = localization
    num2julian.stypy_type_of_self = None
    num2julian.stypy_type_store = module_type_store
    num2julian.stypy_function_name = 'num2julian'
    num2julian.stypy_param_names_list = ['n']
    num2julian.stypy_varargs_param_name = None
    num2julian.stypy_kwargs_param_name = None
    num2julian.stypy_call_defaults = defaults
    num2julian.stypy_call_varargs = varargs
    num2julian.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'num2julian', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'num2julian', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'num2julian(...)' code ##################

    unicode_45042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, (-1)), 'unicode', u'\n    Convert a Matplotlib date (or sequence) to a Julian date (or sequence).\n\n    Parameters\n    ----------\n    n : float or sequence of floats\n        Matplotlib date(s)\n\n    Returns\n    -------\n    float or sequence of floats\n        Julian date(s)\n    ')
    
    
    # Call to iterable(...): (line 409)
    # Processing the call arguments (line 409)
    # Getting the type of 'n' (line 409)
    n_45045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 22), 'n', False)
    # Processing the call keyword arguments (line 409)
    kwargs_45046 = {}
    # Getting the type of 'cbook' (line 409)
    cbook_45043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 7), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 409)
    iterable_45044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 7), cbook_45043, 'iterable')
    # Calling iterable(args, kwargs) (line 409)
    iterable_call_result_45047 = invoke(stypy.reporting.localization.Localization(__file__, 409, 7), iterable_45044, *[n_45045], **kwargs_45046)
    
    # Testing the type of an if condition (line 409)
    if_condition_45048 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 409, 4), iterable_call_result_45047)
    # Assigning a type to the variable 'if_condition_45048' (line 409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 4), 'if_condition_45048', if_condition_45048)
    # SSA begins for if statement (line 409)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 410):
    
    # Assigning a Call to a Name (line 410):
    
    # Call to asarray(...): (line 410)
    # Processing the call arguments (line 410)
    # Getting the type of 'n' (line 410)
    n_45051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 23), 'n', False)
    # Processing the call keyword arguments (line 410)
    kwargs_45052 = {}
    # Getting the type of 'np' (line 410)
    np_45049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 410)
    asarray_45050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 12), np_45049, 'asarray')
    # Calling asarray(args, kwargs) (line 410)
    asarray_call_result_45053 = invoke(stypy.reporting.localization.Localization(__file__, 410, 12), asarray_45050, *[n_45051], **kwargs_45052)
    
    # Assigning a type to the variable 'n' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'n', asarray_call_result_45053)
    # SSA join for if statement (line 409)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'n' (line 411)
    n_45054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 11), 'n')
    # Getting the type of 'JULIAN_OFFSET' (line 411)
    JULIAN_OFFSET_45055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 15), 'JULIAN_OFFSET')
    # Applying the binary operator '+' (line 411)
    result_add_45056 = python_operator(stypy.reporting.localization.Localization(__file__, 411, 11), '+', n_45054, JULIAN_OFFSET_45055)
    
    # Assigning a type to the variable 'stypy_return_type' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'stypy_return_type', result_add_45056)
    
    # ################# End of 'num2julian(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'num2julian' in the type store
    # Getting the type of 'stypy_return_type' (line 395)
    stypy_return_type_45057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_45057)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'num2julian'
    return stypy_return_type_45057

# Assigning a type to the variable 'num2julian' (line 395)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 0), 'num2julian', num2julian)

@norecursion
def num2date(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 414)
    None_45058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 19), 'None')
    defaults = [None_45058]
    # Create a new context for function 'num2date'
    module_type_store = module_type_store.open_function_context('num2date', 414, 0, False)
    
    # Passed parameters checking function
    num2date.stypy_localization = localization
    num2date.stypy_type_of_self = None
    num2date.stypy_type_store = module_type_store
    num2date.stypy_function_name = 'num2date'
    num2date.stypy_param_names_list = ['x', 'tz']
    num2date.stypy_varargs_param_name = None
    num2date.stypy_kwargs_param_name = None
    num2date.stypy_call_defaults = defaults
    num2date.stypy_call_varargs = varargs
    num2date.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'num2date', ['x', 'tz'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'num2date', localization, ['x', 'tz'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'num2date(...)' code ##################

    unicode_45059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, (-1)), 'unicode', u'\n    Parameters\n    ----------\n    x : float or sequence of floats\n        Number of days (fraction part represents hours, minutes, seconds)\n        since 0001-01-01 00:00:00 UTC, plus one.\n    tz : string, optional\n        Timezone of *x* (defaults to rcparams TZ value).\n\n    Returns\n    -------\n    :class:`datetime` or sequence of :class:`datetime`\n        Dates are returned in timezone *tz*\n\n    If *x* is a sequence, a sequence of :class:`datetime` objects will\n    be returned.\n\n    Notes\n    -----\n    The addition of one here is a historical artifact. Also, note that the\n    Gregorian calendar is assumed; this is not universal practice.\n    For details, see the module docstring.\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 438)
    # Getting the type of 'tz' (line 438)
    tz_45060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 7), 'tz')
    # Getting the type of 'None' (line 438)
    None_45061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 13), 'None')
    
    (may_be_45062, more_types_in_union_45063) = may_be_none(tz_45060, None_45061)

    if may_be_45062:

        if more_types_in_union_45063:
            # Runtime conditional SSA (line 438)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 439):
        
        # Assigning a Call to a Name (line 439):
        
        # Call to _get_rc_timezone(...): (line 439)
        # Processing the call keyword arguments (line 439)
        kwargs_45065 = {}
        # Getting the type of '_get_rc_timezone' (line 439)
        _get_rc_timezone_45064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 13), '_get_rc_timezone', False)
        # Calling _get_rc_timezone(args, kwargs) (line 439)
        _get_rc_timezone_call_result_45066 = invoke(stypy.reporting.localization.Localization(__file__, 439, 13), _get_rc_timezone_45064, *[], **kwargs_45065)
        
        # Assigning a type to the variable 'tz' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'tz', _get_rc_timezone_call_result_45066)

        if more_types_in_union_45063:
            # SSA join for if statement (line 438)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Call to iterable(...): (line 440)
    # Processing the call arguments (line 440)
    # Getting the type of 'x' (line 440)
    x_45069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 26), 'x', False)
    # Processing the call keyword arguments (line 440)
    kwargs_45070 = {}
    # Getting the type of 'cbook' (line 440)
    cbook_45067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 11), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 440)
    iterable_45068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 11), cbook_45067, 'iterable')
    # Calling iterable(args, kwargs) (line 440)
    iterable_call_result_45071 = invoke(stypy.reporting.localization.Localization(__file__, 440, 11), iterable_45068, *[x_45069], **kwargs_45070)
    
    # Applying the 'not' unary operator (line 440)
    result_not__45072 = python_operator(stypy.reporting.localization.Localization(__file__, 440, 7), 'not', iterable_call_result_45071)
    
    # Testing the type of an if condition (line 440)
    if_condition_45073 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 440, 4), result_not__45072)
    # Assigning a type to the variable 'if_condition_45073' (line 440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 4), 'if_condition_45073', if_condition_45073)
    # SSA begins for if statement (line 440)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _from_ordinalf(...): (line 441)
    # Processing the call arguments (line 441)
    # Getting the type of 'x' (line 441)
    x_45075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 30), 'x', False)
    # Getting the type of 'tz' (line 441)
    tz_45076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 33), 'tz', False)
    # Processing the call keyword arguments (line 441)
    kwargs_45077 = {}
    # Getting the type of '_from_ordinalf' (line 441)
    _from_ordinalf_45074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 15), '_from_ordinalf', False)
    # Calling _from_ordinalf(args, kwargs) (line 441)
    _from_ordinalf_call_result_45078 = invoke(stypy.reporting.localization.Localization(__file__, 441, 15), _from_ordinalf_45074, *[x_45075, tz_45076], **kwargs_45077)
    
    # Assigning a type to the variable 'stypy_return_type' (line 441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 8), 'stypy_return_type', _from_ordinalf_call_result_45078)
    # SSA branch for the else part of an if statement (line 440)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 443):
    
    # Assigning a Call to a Name (line 443):
    
    # Call to asarray(...): (line 443)
    # Processing the call arguments (line 443)
    # Getting the type of 'x' (line 443)
    x_45081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 23), 'x', False)
    # Processing the call keyword arguments (line 443)
    kwargs_45082 = {}
    # Getting the type of 'np' (line 443)
    np_45079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 443)
    asarray_45080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 12), np_45079, 'asarray')
    # Calling asarray(args, kwargs) (line 443)
    asarray_call_result_45083 = invoke(stypy.reporting.localization.Localization(__file__, 443, 12), asarray_45080, *[x_45081], **kwargs_45082)
    
    # Assigning a type to the variable 'x' (line 443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 8), 'x', asarray_call_result_45083)
    
    
    # Getting the type of 'x' (line 444)
    x_45084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 15), 'x')
    # Obtaining the member 'size' of a type (line 444)
    size_45085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 15), x_45084, 'size')
    # Applying the 'not' unary operator (line 444)
    result_not__45086 = python_operator(stypy.reporting.localization.Localization(__file__, 444, 11), 'not', size_45085)
    
    # Testing the type of an if condition (line 444)
    if_condition_45087 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 444, 8), result_not__45086)
    # Assigning a type to the variable 'if_condition_45087' (line 444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'if_condition_45087', if_condition_45087)
    # SSA begins for if statement (line 444)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'x' (line 445)
    x_45088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 19), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'stypy_return_type', x_45088)
    # SSA join for if statement (line 444)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to tolist(...): (line 446)
    # Processing the call keyword arguments (line 446)
    kwargs_45095 = {}
    
    # Call to _from_ordinalf_np_vectorized(...): (line 446)
    # Processing the call arguments (line 446)
    # Getting the type of 'x' (line 446)
    x_45090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 44), 'x', False)
    # Getting the type of 'tz' (line 446)
    tz_45091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 47), 'tz', False)
    # Processing the call keyword arguments (line 446)
    kwargs_45092 = {}
    # Getting the type of '_from_ordinalf_np_vectorized' (line 446)
    _from_ordinalf_np_vectorized_45089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 15), '_from_ordinalf_np_vectorized', False)
    # Calling _from_ordinalf_np_vectorized(args, kwargs) (line 446)
    _from_ordinalf_np_vectorized_call_result_45093 = invoke(stypy.reporting.localization.Localization(__file__, 446, 15), _from_ordinalf_np_vectorized_45089, *[x_45090, tz_45091], **kwargs_45092)
    
    # Obtaining the member 'tolist' of a type (line 446)
    tolist_45094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 15), _from_ordinalf_np_vectorized_call_result_45093, 'tolist')
    # Calling tolist(args, kwargs) (line 446)
    tolist_call_result_45096 = invoke(stypy.reporting.localization.Localization(__file__, 446, 15), tolist_45094, *[], **kwargs_45095)
    
    # Assigning a type to the variable 'stypy_return_type' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'stypy_return_type', tolist_call_result_45096)
    # SSA join for if statement (line 440)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'num2date(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'num2date' in the type store
    # Getting the type of 'stypy_return_type' (line 414)
    stypy_return_type_45097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_45097)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'num2date'
    return stypy_return_type_45097

# Assigning a type to the variable 'num2date' (line 414)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 0), 'num2date', num2date)

@norecursion
def _ordinalf_to_timedelta(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_ordinalf_to_timedelta'
    module_type_store = module_type_store.open_function_context('_ordinalf_to_timedelta', 449, 0, False)
    
    # Passed parameters checking function
    _ordinalf_to_timedelta.stypy_localization = localization
    _ordinalf_to_timedelta.stypy_type_of_self = None
    _ordinalf_to_timedelta.stypy_type_store = module_type_store
    _ordinalf_to_timedelta.stypy_function_name = '_ordinalf_to_timedelta'
    _ordinalf_to_timedelta.stypy_param_names_list = ['x']
    _ordinalf_to_timedelta.stypy_varargs_param_name = None
    _ordinalf_to_timedelta.stypy_kwargs_param_name = None
    _ordinalf_to_timedelta.stypy_call_defaults = defaults
    _ordinalf_to_timedelta.stypy_call_varargs = varargs
    _ordinalf_to_timedelta.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_ordinalf_to_timedelta', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_ordinalf_to_timedelta', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_ordinalf_to_timedelta(...)' code ##################

    
    # Call to timedelta(...): (line 450)
    # Processing the call keyword arguments (line 450)
    # Getting the type of 'x' (line 450)
    x_45100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 35), 'x', False)
    keyword_45101 = x_45100
    kwargs_45102 = {'days': keyword_45101}
    # Getting the type of 'datetime' (line 450)
    datetime_45098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 11), 'datetime', False)
    # Obtaining the member 'timedelta' of a type (line 450)
    timedelta_45099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 11), datetime_45098, 'timedelta')
    # Calling timedelta(args, kwargs) (line 450)
    timedelta_call_result_45103 = invoke(stypy.reporting.localization.Localization(__file__, 450, 11), timedelta_45099, *[], **kwargs_45102)
    
    # Assigning a type to the variable 'stypy_return_type' (line 450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 4), 'stypy_return_type', timedelta_call_result_45103)
    
    # ################# End of '_ordinalf_to_timedelta(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_ordinalf_to_timedelta' in the type store
    # Getting the type of 'stypy_return_type' (line 449)
    stypy_return_type_45104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_45104)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_ordinalf_to_timedelta'
    return stypy_return_type_45104

# Assigning a type to the variable '_ordinalf_to_timedelta' (line 449)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 0), '_ordinalf_to_timedelta', _ordinalf_to_timedelta)

# Assigning a Call to a Name (line 453):

# Assigning a Call to a Name (line 453):

# Call to vectorize(...): (line 453)
# Processing the call arguments (line 453)
# Getting the type of '_ordinalf_to_timedelta' (line 453)
_ordinalf_to_timedelta_45107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 52), '_ordinalf_to_timedelta', False)
# Processing the call keyword arguments (line 453)
kwargs_45108 = {}
# Getting the type of 'np' (line 453)
np_45105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 39), 'np', False)
# Obtaining the member 'vectorize' of a type (line 453)
vectorize_45106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 39), np_45105, 'vectorize')
# Calling vectorize(args, kwargs) (line 453)
vectorize_call_result_45109 = invoke(stypy.reporting.localization.Localization(__file__, 453, 39), vectorize_45106, *[_ordinalf_to_timedelta_45107], **kwargs_45108)

# Assigning a type to the variable '_ordinalf_to_timedelta_np_vectorized' (line 453)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 0), '_ordinalf_to_timedelta_np_vectorized', vectorize_call_result_45109)

@norecursion
def num2timedelta(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'num2timedelta'
    module_type_store = module_type_store.open_function_context('num2timedelta', 456, 0, False)
    
    # Passed parameters checking function
    num2timedelta.stypy_localization = localization
    num2timedelta.stypy_type_of_self = None
    num2timedelta.stypy_type_store = module_type_store
    num2timedelta.stypy_function_name = 'num2timedelta'
    num2timedelta.stypy_param_names_list = ['x']
    num2timedelta.stypy_varargs_param_name = None
    num2timedelta.stypy_kwargs_param_name = None
    num2timedelta.stypy_call_defaults = defaults
    num2timedelta.stypy_call_varargs = varargs
    num2timedelta.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'num2timedelta', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'num2timedelta', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'num2timedelta(...)' code ##################

    unicode_45110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, (-1)), 'unicode', u'\n    Converts number of days to a :class:`timdelta` object.\n    If *x* is a sequence, a sequence of :class:`timedelta` objects will\n    be returned.\n\n    Parameters\n    ----------\n    x : float, sequence of floats\n        Number of days (fraction part represents hours, minutes, seconds)\n\n    Returns\n    -------\n    :class:`timedelta` or list[:class:`timedelta`]\n\n    ')
    
    
    
    # Call to iterable(...): (line 472)
    # Processing the call arguments (line 472)
    # Getting the type of 'x' (line 472)
    x_45113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 26), 'x', False)
    # Processing the call keyword arguments (line 472)
    kwargs_45114 = {}
    # Getting the type of 'cbook' (line 472)
    cbook_45111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 11), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 472)
    iterable_45112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 11), cbook_45111, 'iterable')
    # Calling iterable(args, kwargs) (line 472)
    iterable_call_result_45115 = invoke(stypy.reporting.localization.Localization(__file__, 472, 11), iterable_45112, *[x_45113], **kwargs_45114)
    
    # Applying the 'not' unary operator (line 472)
    result_not__45116 = python_operator(stypy.reporting.localization.Localization(__file__, 472, 7), 'not', iterable_call_result_45115)
    
    # Testing the type of an if condition (line 472)
    if_condition_45117 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 472, 4), result_not__45116)
    # Assigning a type to the variable 'if_condition_45117' (line 472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 4), 'if_condition_45117', if_condition_45117)
    # SSA begins for if statement (line 472)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _ordinalf_to_timedelta(...): (line 473)
    # Processing the call arguments (line 473)
    # Getting the type of 'x' (line 473)
    x_45119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 38), 'x', False)
    # Processing the call keyword arguments (line 473)
    kwargs_45120 = {}
    # Getting the type of '_ordinalf_to_timedelta' (line 473)
    _ordinalf_to_timedelta_45118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 15), '_ordinalf_to_timedelta', False)
    # Calling _ordinalf_to_timedelta(args, kwargs) (line 473)
    _ordinalf_to_timedelta_call_result_45121 = invoke(stypy.reporting.localization.Localization(__file__, 473, 15), _ordinalf_to_timedelta_45118, *[x_45119], **kwargs_45120)
    
    # Assigning a type to the variable 'stypy_return_type' (line 473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'stypy_return_type', _ordinalf_to_timedelta_call_result_45121)
    # SSA branch for the else part of an if statement (line 472)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 475):
    
    # Assigning a Call to a Name (line 475):
    
    # Call to asarray(...): (line 475)
    # Processing the call arguments (line 475)
    # Getting the type of 'x' (line 475)
    x_45124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 23), 'x', False)
    # Processing the call keyword arguments (line 475)
    kwargs_45125 = {}
    # Getting the type of 'np' (line 475)
    np_45122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 475)
    asarray_45123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 12), np_45122, 'asarray')
    # Calling asarray(args, kwargs) (line 475)
    asarray_call_result_45126 = invoke(stypy.reporting.localization.Localization(__file__, 475, 12), asarray_45123, *[x_45124], **kwargs_45125)
    
    # Assigning a type to the variable 'x' (line 475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'x', asarray_call_result_45126)
    
    
    # Getting the type of 'x' (line 476)
    x_45127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 15), 'x')
    # Obtaining the member 'size' of a type (line 476)
    size_45128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 15), x_45127, 'size')
    # Applying the 'not' unary operator (line 476)
    result_not__45129 = python_operator(stypy.reporting.localization.Localization(__file__, 476, 11), 'not', size_45128)
    
    # Testing the type of an if condition (line 476)
    if_condition_45130 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 476, 8), result_not__45129)
    # Assigning a type to the variable 'if_condition_45130' (line 476)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'if_condition_45130', if_condition_45130)
    # SSA begins for if statement (line 476)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'x' (line 477)
    x_45131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 19), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 12), 'stypy_return_type', x_45131)
    # SSA join for if statement (line 476)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to tolist(...): (line 478)
    # Processing the call keyword arguments (line 478)
    kwargs_45137 = {}
    
    # Call to _ordinalf_to_timedelta_np_vectorized(...): (line 478)
    # Processing the call arguments (line 478)
    # Getting the type of 'x' (line 478)
    x_45133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 52), 'x', False)
    # Processing the call keyword arguments (line 478)
    kwargs_45134 = {}
    # Getting the type of '_ordinalf_to_timedelta_np_vectorized' (line 478)
    _ordinalf_to_timedelta_np_vectorized_45132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 15), '_ordinalf_to_timedelta_np_vectorized', False)
    # Calling _ordinalf_to_timedelta_np_vectorized(args, kwargs) (line 478)
    _ordinalf_to_timedelta_np_vectorized_call_result_45135 = invoke(stypy.reporting.localization.Localization(__file__, 478, 15), _ordinalf_to_timedelta_np_vectorized_45132, *[x_45133], **kwargs_45134)
    
    # Obtaining the member 'tolist' of a type (line 478)
    tolist_45136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 15), _ordinalf_to_timedelta_np_vectorized_call_result_45135, 'tolist')
    # Calling tolist(args, kwargs) (line 478)
    tolist_call_result_45138 = invoke(stypy.reporting.localization.Localization(__file__, 478, 15), tolist_45136, *[], **kwargs_45137)
    
    # Assigning a type to the variable 'stypy_return_type' (line 478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'stypy_return_type', tolist_call_result_45138)
    # SSA join for if statement (line 472)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'num2timedelta(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'num2timedelta' in the type store
    # Getting the type of 'stypy_return_type' (line 456)
    stypy_return_type_45139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_45139)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'num2timedelta'
    return stypy_return_type_45139

# Assigning a type to the variable 'num2timedelta' (line 456)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 0), 'num2timedelta', num2timedelta)

@norecursion
def drange(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'drange'
    module_type_store = module_type_store.open_function_context('drange', 481, 0, False)
    
    # Passed parameters checking function
    drange.stypy_localization = localization
    drange.stypy_type_of_self = None
    drange.stypy_type_store = module_type_store
    drange.stypy_function_name = 'drange'
    drange.stypy_param_names_list = ['dstart', 'dend', 'delta']
    drange.stypy_varargs_param_name = None
    drange.stypy_kwargs_param_name = None
    drange.stypy_call_defaults = defaults
    drange.stypy_call_varargs = varargs
    drange.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'drange', ['dstart', 'dend', 'delta'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'drange', localization, ['dstart', 'dend', 'delta'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'drange(...)' code ##################

    unicode_45140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, (-1)), 'unicode', u'\n    Return a date range as float Gregorian ordinals.  *dstart* and\n    *dend* are :class:`datetime` instances.  *delta* is a\n    :class:`datetime.timedelta` instance.\n    ')
    
    # Assigning a Call to a Name (line 487):
    
    # Assigning a Call to a Name (line 487):
    
    # Call to _to_ordinalf(...): (line 487)
    # Processing the call arguments (line 487)
    # Getting the type of 'dstart' (line 487)
    dstart_45142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 22), 'dstart', False)
    # Processing the call keyword arguments (line 487)
    kwargs_45143 = {}
    # Getting the type of '_to_ordinalf' (line 487)
    _to_ordinalf_45141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 9), '_to_ordinalf', False)
    # Calling _to_ordinalf(args, kwargs) (line 487)
    _to_ordinalf_call_result_45144 = invoke(stypy.reporting.localization.Localization(__file__, 487, 9), _to_ordinalf_45141, *[dstart_45142], **kwargs_45143)
    
    # Assigning a type to the variable 'f1' (line 487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 4), 'f1', _to_ordinalf_call_result_45144)
    
    # Assigning a Call to a Name (line 488):
    
    # Assigning a Call to a Name (line 488):
    
    # Call to _to_ordinalf(...): (line 488)
    # Processing the call arguments (line 488)
    # Getting the type of 'dend' (line 488)
    dend_45146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 22), 'dend', False)
    # Processing the call keyword arguments (line 488)
    kwargs_45147 = {}
    # Getting the type of '_to_ordinalf' (line 488)
    _to_ordinalf_45145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 9), '_to_ordinalf', False)
    # Calling _to_ordinalf(args, kwargs) (line 488)
    _to_ordinalf_call_result_45148 = invoke(stypy.reporting.localization.Localization(__file__, 488, 9), _to_ordinalf_45145, *[dend_45146], **kwargs_45147)
    
    # Assigning a type to the variable 'f2' (line 488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 4), 'f2', _to_ordinalf_call_result_45148)
    
    # Assigning a BinOp to a Name (line 489):
    
    # Assigning a BinOp to a Name (line 489):
    
    # Call to total_seconds(...): (line 489)
    # Processing the call keyword arguments (line 489)
    kwargs_45151 = {}
    # Getting the type of 'delta' (line 489)
    delta_45149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 11), 'delta', False)
    # Obtaining the member 'total_seconds' of a type (line 489)
    total_seconds_45150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 11), delta_45149, 'total_seconds')
    # Calling total_seconds(args, kwargs) (line 489)
    total_seconds_call_result_45152 = invoke(stypy.reporting.localization.Localization(__file__, 489, 11), total_seconds_45150, *[], **kwargs_45151)
    
    # Getting the type of 'SEC_PER_DAY' (line 489)
    SEC_PER_DAY_45153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 35), 'SEC_PER_DAY')
    # Applying the binary operator 'div' (line 489)
    result_div_45154 = python_operator(stypy.reporting.localization.Localization(__file__, 489, 11), 'div', total_seconds_call_result_45152, SEC_PER_DAY_45153)
    
    # Assigning a type to the variable 'step' (line 489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 4), 'step', result_div_45154)
    
    # Assigning a Call to a Name (line 492):
    
    # Assigning a Call to a Name (line 492):
    
    # Call to int(...): (line 492)
    # Processing the call arguments (line 492)
    
    # Call to ceil(...): (line 492)
    # Processing the call arguments (line 492)
    # Getting the type of 'f2' (line 492)
    f2_45158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 23), 'f2', False)
    # Getting the type of 'f1' (line 492)
    f1_45159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 28), 'f1', False)
    # Applying the binary operator '-' (line 492)
    result_sub_45160 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 23), '-', f2_45158, f1_45159)
    
    # Getting the type of 'step' (line 492)
    step_45161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 34), 'step', False)
    # Applying the binary operator 'div' (line 492)
    result_div_45162 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 22), 'div', result_sub_45160, step_45161)
    
    # Processing the call keyword arguments (line 492)
    kwargs_45163 = {}
    # Getting the type of 'np' (line 492)
    np_45156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 14), 'np', False)
    # Obtaining the member 'ceil' of a type (line 492)
    ceil_45157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 14), np_45156, 'ceil')
    # Calling ceil(args, kwargs) (line 492)
    ceil_call_result_45164 = invoke(stypy.reporting.localization.Localization(__file__, 492, 14), ceil_45157, *[result_div_45162], **kwargs_45163)
    
    # Processing the call keyword arguments (line 492)
    kwargs_45165 = {}
    # Getting the type of 'int' (line 492)
    int_45155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 10), 'int', False)
    # Calling int(args, kwargs) (line 492)
    int_call_result_45166 = invoke(stypy.reporting.localization.Localization(__file__, 492, 10), int_45155, *[ceil_call_result_45164], **kwargs_45165)
    
    # Assigning a type to the variable 'num' (line 492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'num', int_call_result_45166)
    
    # Assigning a BinOp to a Name (line 495):
    
    # Assigning a BinOp to a Name (line 495):
    # Getting the type of 'dstart' (line 495)
    dstart_45167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 20), 'dstart')
    # Getting the type of 'num' (line 495)
    num_45168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 29), 'num')
    # Getting the type of 'delta' (line 495)
    delta_45169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 35), 'delta')
    # Applying the binary operator '*' (line 495)
    result_mul_45170 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 29), '*', num_45168, delta_45169)
    
    # Applying the binary operator '+' (line 495)
    result_add_45171 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 20), '+', dstart_45167, result_mul_45170)
    
    # Assigning a type to the variable 'dinterval_end' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 4), 'dinterval_end', result_add_45171)
    
    
    # Getting the type of 'dinterval_end' (line 498)
    dinterval_end_45172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 7), 'dinterval_end')
    # Getting the type of 'dend' (line 498)
    dend_45173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 24), 'dend')
    # Applying the binary operator '>=' (line 498)
    result_ge_45174 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 7), '>=', dinterval_end_45172, dend_45173)
    
    # Testing the type of an if condition (line 498)
    if_condition_45175 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 498, 4), result_ge_45174)
    # Assigning a type to the variable 'if_condition_45175' (line 498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 4), 'if_condition_45175', if_condition_45175)
    # SSA begins for if statement (line 498)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'dinterval_end' (line 500)
    dinterval_end_45176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 8), 'dinterval_end')
    # Getting the type of 'delta' (line 500)
    delta_45177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 25), 'delta')
    # Applying the binary operator '-=' (line 500)
    result_isub_45178 = python_operator(stypy.reporting.localization.Localization(__file__, 500, 8), '-=', dinterval_end_45176, delta_45177)
    # Assigning a type to the variable 'dinterval_end' (line 500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 8), 'dinterval_end', result_isub_45178)
    
    
    # Getting the type of 'num' (line 501)
    num_45179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 8), 'num')
    int_45180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, 15), 'int')
    # Applying the binary operator '-=' (line 501)
    result_isub_45181 = python_operator(stypy.reporting.localization.Localization(__file__, 501, 8), '-=', num_45179, int_45180)
    # Assigning a type to the variable 'num' (line 501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 8), 'num', result_isub_45181)
    
    # SSA join for if statement (line 498)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 503):
    
    # Assigning a Call to a Name (line 503):
    
    # Call to _to_ordinalf(...): (line 503)
    # Processing the call arguments (line 503)
    # Getting the type of 'dinterval_end' (line 503)
    dinterval_end_45183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 22), 'dinterval_end', False)
    # Processing the call keyword arguments (line 503)
    kwargs_45184 = {}
    # Getting the type of '_to_ordinalf' (line 503)
    _to_ordinalf_45182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 9), '_to_ordinalf', False)
    # Calling _to_ordinalf(args, kwargs) (line 503)
    _to_ordinalf_call_result_45185 = invoke(stypy.reporting.localization.Localization(__file__, 503, 9), _to_ordinalf_45182, *[dinterval_end_45183], **kwargs_45184)
    
    # Assigning a type to the variable 'f2' (line 503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 4), 'f2', _to_ordinalf_call_result_45185)
    
    # Call to linspace(...): (line 504)
    # Processing the call arguments (line 504)
    # Getting the type of 'f1' (line 504)
    f1_45188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 23), 'f1', False)
    # Getting the type of 'f2' (line 504)
    f2_45189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 27), 'f2', False)
    # Getting the type of 'num' (line 504)
    num_45190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 31), 'num', False)
    int_45191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 37), 'int')
    # Applying the binary operator '+' (line 504)
    result_add_45192 = python_operator(stypy.reporting.localization.Localization(__file__, 504, 31), '+', num_45190, int_45191)
    
    # Processing the call keyword arguments (line 504)
    kwargs_45193 = {}
    # Getting the type of 'np' (line 504)
    np_45186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 11), 'np', False)
    # Obtaining the member 'linspace' of a type (line 504)
    linspace_45187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 11), np_45186, 'linspace')
    # Calling linspace(args, kwargs) (line 504)
    linspace_call_result_45194 = invoke(stypy.reporting.localization.Localization(__file__, 504, 11), linspace_45187, *[f1_45188, f2_45189, result_add_45192], **kwargs_45193)
    
    # Assigning a type to the variable 'stypy_return_type' (line 504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 4), 'stypy_return_type', linspace_call_result_45194)
    
    # ################# End of 'drange(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'drange' in the type store
    # Getting the type of 'stypy_return_type' (line 481)
    stypy_return_type_45195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_45195)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'drange'
    return stypy_return_type_45195

# Assigning a type to the variable 'drange' (line 481)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 0), 'drange', drange)
# Declaration of the 'DateFormatter' class
# Getting the type of 'ticker' (line 509)
ticker_45196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 20), 'ticker')
# Obtaining the member 'Formatter' of a type (line 509)
Formatter_45197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 20), ticker_45196, 'Formatter')

class DateFormatter(Formatter_45197, ):
    unicode_45198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, (-1)), 'unicode', u'\n    Tick location is seconds since the epoch.  Use a :func:`strftime`\n    format string.\n\n    Python only supports :mod:`datetime` :func:`strftime` formatting\n    for years greater than 1900.  Thanks to Andrew Dalke, Dalke\n    Scientific Software who contributed the :func:`strftime` code\n    below to include dates earlier than this year.\n    ')
    
    # Assigning a Call to a Name (line 520):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 522)
        None_45199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 31), 'None')
        defaults = [None_45199]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 522, 4, False)
        # Assigning a type to the variable 'self' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateFormatter.__init__', ['fmt', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fmt', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_45200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, (-1)), 'unicode', u'\n        *fmt* is a :func:`strftime` format string; *tz* is the\n         :class:`tzinfo` instance.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 527)
        # Getting the type of 'tz' (line 527)
        tz_45201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 11), 'tz')
        # Getting the type of 'None' (line 527)
        None_45202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 17), 'None')
        
        (may_be_45203, more_types_in_union_45204) = may_be_none(tz_45201, None_45202)

        if may_be_45203:

            if more_types_in_union_45204:
                # Runtime conditional SSA (line 527)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 528):
            
            # Assigning a Call to a Name (line 528):
            
            # Call to _get_rc_timezone(...): (line 528)
            # Processing the call keyword arguments (line 528)
            kwargs_45206 = {}
            # Getting the type of '_get_rc_timezone' (line 528)
            _get_rc_timezone_45205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 17), '_get_rc_timezone', False)
            # Calling _get_rc_timezone(args, kwargs) (line 528)
            _get_rc_timezone_call_result_45207 = invoke(stypy.reporting.localization.Localization(__file__, 528, 17), _get_rc_timezone_45205, *[], **kwargs_45206)
            
            # Assigning a type to the variable 'tz' (line 528)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 12), 'tz', _get_rc_timezone_call_result_45207)

            if more_types_in_union_45204:
                # SSA join for if statement (line 527)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 529):
        
        # Assigning a Name to a Attribute (line 529):
        # Getting the type of 'fmt' (line 529)
        fmt_45208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 19), 'fmt')
        # Getting the type of 'self' (line 529)
        self_45209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'self')
        # Setting the type of the member 'fmt' of a type (line 529)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 8), self_45209, 'fmt', fmt_45208)
        
        # Assigning a Name to a Attribute (line 530):
        
        # Assigning a Name to a Attribute (line 530):
        # Getting the type of 'tz' (line 530)
        tz_45210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 18), 'tz')
        # Getting the type of 'self' (line 530)
        self_45211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'self')
        # Setting the type of the member 'tz' of a type (line 530)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 8), self_45211, 'tz', tz_45210)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_45212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 30), 'int')
        defaults = [int_45212]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 532, 4, False)
        # Assigning a type to the variable 'self' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        DateFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'DateFormatter.__call__')
        DateFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        DateFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # Getting the type of 'x' (line 533)
        x_45213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 11), 'x')
        int_45214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 16), 'int')
        # Applying the binary operator '==' (line 533)
        result_eq_45215 = python_operator(stypy.reporting.localization.Localization(__file__, 533, 11), '==', x_45213, int_45214)
        
        # Testing the type of an if condition (line 533)
        if_condition_45216 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 533, 8), result_eq_45215)
        # Assigning a type to the variable 'if_condition_45216' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 8), 'if_condition_45216', if_condition_45216)
        # SSA begins for if statement (line 533)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 534)
        # Processing the call arguments (line 534)
        unicode_45218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 29), 'unicode', u'DateFormatter found a value of x=0, which is an illegal date.  This usually occurs because you have not informed the axis that it is plotting dates, e.g., with ax.xaxis_date()')
        # Processing the call keyword arguments (line 534)
        kwargs_45219 = {}
        # Getting the type of 'ValueError' (line 534)
        ValueError_45217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 534)
        ValueError_call_result_45220 = invoke(stypy.reporting.localization.Localization(__file__, 534, 18), ValueError_45217, *[unicode_45218], **kwargs_45219)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 534, 12), ValueError_call_result_45220, 'raise parameter', BaseException)
        # SSA join for if statement (line 533)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 538):
        
        # Assigning a Call to a Name (line 538):
        
        # Call to num2date(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'x' (line 538)
        x_45222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 22), 'x', False)
        # Getting the type of 'self' (line 538)
        self_45223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 25), 'self', False)
        # Obtaining the member 'tz' of a type (line 538)
        tz_45224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 25), self_45223, 'tz')
        # Processing the call keyword arguments (line 538)
        kwargs_45225 = {}
        # Getting the type of 'num2date' (line 538)
        num2date_45221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 13), 'num2date', False)
        # Calling num2date(args, kwargs) (line 538)
        num2date_call_result_45226 = invoke(stypy.reporting.localization.Localization(__file__, 538, 13), num2date_45221, *[x_45222, tz_45224], **kwargs_45225)
        
        # Assigning a type to the variable 'dt' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'dt', num2date_call_result_45226)
        
        # Call to strftime(...): (line 539)
        # Processing the call arguments (line 539)
        # Getting the type of 'dt' (line 539)
        dt_45229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 29), 'dt', False)
        # Getting the type of 'self' (line 539)
        self_45230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 33), 'self', False)
        # Obtaining the member 'fmt' of a type (line 539)
        fmt_45231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 33), self_45230, 'fmt')
        # Processing the call keyword arguments (line 539)
        kwargs_45232 = {}
        # Getting the type of 'self' (line 539)
        self_45227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 15), 'self', False)
        # Obtaining the member 'strftime' of a type (line 539)
        strftime_45228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 15), self_45227, 'strftime')
        # Calling strftime(args, kwargs) (line 539)
        strftime_call_result_45233 = invoke(stypy.reporting.localization.Localization(__file__, 539, 15), strftime_45228, *[dt_45229, fmt_45231], **kwargs_45232)
        
        # Assigning a type to the variable 'stypy_return_type' (line 539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 8), 'stypy_return_type', strftime_call_result_45233)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 532)
        stypy_return_type_45234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45234)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_45234


    @norecursion
    def set_tzinfo(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_tzinfo'
        module_type_store = module_type_store.open_function_context('set_tzinfo', 541, 4, False)
        # Assigning a type to the variable 'self' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_localization', localization)
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_function_name', 'DateFormatter.set_tzinfo')
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_param_names_list', ['tz'])
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateFormatter.set_tzinfo.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateFormatter.set_tzinfo', ['tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_tzinfo', localization, ['tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_tzinfo(...)' code ##################

        
        # Assigning a Name to a Attribute (line 542):
        
        # Assigning a Name to a Attribute (line 542):
        # Getting the type of 'tz' (line 542)
        tz_45235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 18), 'tz')
        # Getting the type of 'self' (line 542)
        self_45236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'self')
        # Setting the type of the member 'tz' of a type (line 542)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 8), self_45236, 'tz', tz_45235)
        
        # ################# End of 'set_tzinfo(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_tzinfo' in the type store
        # Getting the type of 'stypy_return_type' (line 541)
        stypy_return_type_45237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45237)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_tzinfo'
        return stypy_return_type_45237


    @norecursion
    def _replace_common_substr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_replace_common_substr'
        module_type_store = module_type_store.open_function_context('_replace_common_substr', 544, 4, False)
        # Assigning a type to the variable 'self' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_localization', localization)
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_function_name', 'DateFormatter._replace_common_substr')
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_param_names_list', ['s1', 's2', 'sub1', 'sub2', 'replacement'])
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateFormatter._replace_common_substr.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateFormatter._replace_common_substr', ['s1', 's2', 'sub1', 'sub2', 'replacement'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_replace_common_substr', localization, ['s1', 's2', 'sub1', 'sub2', 'replacement'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_replace_common_substr(...)' code ##################

        unicode_45238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, (-1)), 'unicode', u'Helper function for replacing substrings sub1 and sub2\n        located at the same indexes in strings s1 and s2 respectively,\n        with the string replacement.  It is expected that sub1 and sub2\n        have the same length.  Returns the pair s1, s2 after the\n        substitutions.\n        ')
        
        # Assigning a Num to a Name (line 554):
        
        # Assigning a Num to a Name (line 554):
        int_45239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 12), 'int')
        # Assigning a type to the variable 'i' (line 554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 8), 'i', int_45239)
        
        # Getting the type of 'True' (line 555)
        True_45240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 14), 'True')
        # Testing the type of an if condition (line 555)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 555, 8), True_45240)
        # SSA begins for while statement (line 555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Call to a Name (line 556):
        
        # Assigning a Call to a Name (line 556):
        
        # Call to find(...): (line 556)
        # Processing the call arguments (line 556)
        # Getting the type of 'sub1' (line 556)
        sub1_45243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 24), 'sub1', False)
        # Getting the type of 'i' (line 556)
        i_45244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 30), 'i', False)
        # Processing the call keyword arguments (line 556)
        kwargs_45245 = {}
        # Getting the type of 's1' (line 556)
        s1_45241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 16), 's1', False)
        # Obtaining the member 'find' of a type (line 556)
        find_45242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 16), s1_45241, 'find')
        # Calling find(args, kwargs) (line 556)
        find_call_result_45246 = invoke(stypy.reporting.localization.Localization(__file__, 556, 16), find_45242, *[sub1_45243, i_45244], **kwargs_45245)
        
        # Assigning a type to the variable 'j' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 12), 'j', find_call_result_45246)
        
        
        # Getting the type of 'j' (line 557)
        j_45247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 15), 'j')
        int_45248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 20), 'int')
        # Applying the binary operator '==' (line 557)
        result_eq_45249 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 15), '==', j_45247, int_45248)
        
        # Testing the type of an if condition (line 557)
        if_condition_45250 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 557, 12), result_eq_45249)
        # Assigning a type to the variable 'if_condition_45250' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'if_condition_45250', if_condition_45250)
        # SSA begins for if statement (line 557)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 557)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 560):
        
        # Assigning a BinOp to a Name (line 560):
        # Getting the type of 'j' (line 560)
        j_45251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'j')
        int_45252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 20), 'int')
        # Applying the binary operator '+' (line 560)
        result_add_45253 = python_operator(stypy.reporting.localization.Localization(__file__, 560, 16), '+', j_45251, int_45252)
        
        # Assigning a type to the variable 'i' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 12), 'i', result_add_45253)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 561)
        j_45254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 18), 'j')
        # Getting the type of 'j' (line 561)
        j_45255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 20), 'j')
        
        # Call to len(...): (line 561)
        # Processing the call arguments (line 561)
        # Getting the type of 'sub2' (line 561)
        sub2_45257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 28), 'sub2', False)
        # Processing the call keyword arguments (line 561)
        kwargs_45258 = {}
        # Getting the type of 'len' (line 561)
        len_45256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 24), 'len', False)
        # Calling len(args, kwargs) (line 561)
        len_call_result_45259 = invoke(stypy.reporting.localization.Localization(__file__, 561, 24), len_45256, *[sub2_45257], **kwargs_45258)
        
        # Applying the binary operator '+' (line 561)
        result_add_45260 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 20), '+', j_45255, len_call_result_45259)
        
        slice_45261 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 561, 15), j_45254, result_add_45260, None)
        # Getting the type of 's2' (line 561)
        s2_45262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 15), 's2')
        # Obtaining the member '__getitem__' of a type (line 561)
        getitem___45263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 15), s2_45262, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 561)
        subscript_call_result_45264 = invoke(stypy.reporting.localization.Localization(__file__, 561, 15), getitem___45263, slice_45261)
        
        # Getting the type of 'sub2' (line 561)
        sub2_45265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 38), 'sub2')
        # Applying the binary operator '!=' (line 561)
        result_ne_45266 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 15), '!=', subscript_call_result_45264, sub2_45265)
        
        # Testing the type of an if condition (line 561)
        if_condition_45267 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 561, 12), result_ne_45266)
        # Assigning a type to the variable 'if_condition_45267' (line 561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'if_condition_45267', if_condition_45267)
        # SSA begins for if statement (line 561)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 561)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 564):
        
        # Assigning a BinOp to a Name (line 564):
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 564)
        j_45268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 21), 'j')
        slice_45269 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 564, 17), None, j_45268, None)
        # Getting the type of 's1' (line 564)
        s1_45270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 17), 's1')
        # Obtaining the member '__getitem__' of a type (line 564)
        getitem___45271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 17), s1_45270, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 564)
        subscript_call_result_45272 = invoke(stypy.reporting.localization.Localization(__file__, 564, 17), getitem___45271, slice_45269)
        
        # Getting the type of 'replacement' (line 564)
        replacement_45273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 26), 'replacement')
        # Applying the binary operator '+' (line 564)
        result_add_45274 = python_operator(stypy.reporting.localization.Localization(__file__, 564, 17), '+', subscript_call_result_45272, replacement_45273)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 564)
        j_45275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 43), 'j')
        
        # Call to len(...): (line 564)
        # Processing the call arguments (line 564)
        # Getting the type of 'sub1' (line 564)
        sub1_45277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 51), 'sub1', False)
        # Processing the call keyword arguments (line 564)
        kwargs_45278 = {}
        # Getting the type of 'len' (line 564)
        len_45276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 47), 'len', False)
        # Calling len(args, kwargs) (line 564)
        len_call_result_45279 = invoke(stypy.reporting.localization.Localization(__file__, 564, 47), len_45276, *[sub1_45277], **kwargs_45278)
        
        # Applying the binary operator '+' (line 564)
        result_add_45280 = python_operator(stypy.reporting.localization.Localization(__file__, 564, 43), '+', j_45275, len_call_result_45279)
        
        slice_45281 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 564, 40), result_add_45280, None, None)
        # Getting the type of 's1' (line 564)
        s1_45282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 40), 's1')
        # Obtaining the member '__getitem__' of a type (line 564)
        getitem___45283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 40), s1_45282, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 564)
        subscript_call_result_45284 = invoke(stypy.reporting.localization.Localization(__file__, 564, 40), getitem___45283, slice_45281)
        
        # Applying the binary operator '+' (line 564)
        result_add_45285 = python_operator(stypy.reporting.localization.Localization(__file__, 564, 38), '+', result_add_45274, subscript_call_result_45284)
        
        # Assigning a type to the variable 's1' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 12), 's1', result_add_45285)
        
        # Assigning a BinOp to a Name (line 565):
        
        # Assigning a BinOp to a Name (line 565):
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 565)
        j_45286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 21), 'j')
        slice_45287 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 565, 17), None, j_45286, None)
        # Getting the type of 's2' (line 565)
        s2_45288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 17), 's2')
        # Obtaining the member '__getitem__' of a type (line 565)
        getitem___45289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 17), s2_45288, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 565)
        subscript_call_result_45290 = invoke(stypy.reporting.localization.Localization(__file__, 565, 17), getitem___45289, slice_45287)
        
        # Getting the type of 'replacement' (line 565)
        replacement_45291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 26), 'replacement')
        # Applying the binary operator '+' (line 565)
        result_add_45292 = python_operator(stypy.reporting.localization.Localization(__file__, 565, 17), '+', subscript_call_result_45290, replacement_45291)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 565)
        j_45293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 43), 'j')
        
        # Call to len(...): (line 565)
        # Processing the call arguments (line 565)
        # Getting the type of 'sub2' (line 565)
        sub2_45295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 51), 'sub2', False)
        # Processing the call keyword arguments (line 565)
        kwargs_45296 = {}
        # Getting the type of 'len' (line 565)
        len_45294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 47), 'len', False)
        # Calling len(args, kwargs) (line 565)
        len_call_result_45297 = invoke(stypy.reporting.localization.Localization(__file__, 565, 47), len_45294, *[sub2_45295], **kwargs_45296)
        
        # Applying the binary operator '+' (line 565)
        result_add_45298 = python_operator(stypy.reporting.localization.Localization(__file__, 565, 43), '+', j_45293, len_call_result_45297)
        
        slice_45299 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 565, 40), result_add_45298, None, None)
        # Getting the type of 's2' (line 565)
        s2_45300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 40), 's2')
        # Obtaining the member '__getitem__' of a type (line 565)
        getitem___45301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 40), s2_45300, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 565)
        subscript_call_result_45302 = invoke(stypy.reporting.localization.Localization(__file__, 565, 40), getitem___45301, slice_45299)
        
        # Applying the binary operator '+' (line 565)
        result_add_45303 = python_operator(stypy.reporting.localization.Localization(__file__, 565, 38), '+', result_add_45292, subscript_call_result_45302)
        
        # Assigning a type to the variable 's2' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 12), 's2', result_add_45303)
        # SSA join for while statement (line 555)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 567)
        tuple_45304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 567)
        # Adding element type (line 567)
        # Getting the type of 's1' (line 567)
        s1_45305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 15), 's1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 567, 15), tuple_45304, s1_45305)
        # Adding element type (line 567)
        # Getting the type of 's2' (line 567)
        s2_45306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 19), 's2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 567, 15), tuple_45304, s2_45306)
        
        # Assigning a type to the variable 'stypy_return_type' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 8), 'stypy_return_type', tuple_45304)
        
        # ################# End of '_replace_common_substr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_replace_common_substr' in the type store
        # Getting the type of 'stypy_return_type' (line 544)
        stypy_return_type_45307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45307)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_replace_common_substr'
        return stypy_return_type_45307


    @norecursion
    def strftime_pre_1900(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 569)
        None_45308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 40), 'None')
        defaults = [None_45308]
        # Create a new context for function 'strftime_pre_1900'
        module_type_store = module_type_store.open_function_context('strftime_pre_1900', 569, 4, False)
        # Assigning a type to the variable 'self' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_localization', localization)
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_function_name', 'DateFormatter.strftime_pre_1900')
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_param_names_list', ['dt', 'fmt'])
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateFormatter.strftime_pre_1900.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateFormatter.strftime_pre_1900', ['dt', 'fmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'strftime_pre_1900', localization, ['dt', 'fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'strftime_pre_1900(...)' code ##################

        unicode_45309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, (-1)), 'unicode', u"Call time.strftime for years before 1900 by rolling\n        forward a multiple of 28 years.\n\n        *fmt* is a :func:`strftime` format string.\n\n        Dalke: I hope I did this math right.  Every 28 years the\n        calendar repeats, except through century leap years excepting\n        the 400 year leap years.  But only if you're using the Gregorian\n        calendar.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 580)
        # Getting the type of 'fmt' (line 580)
        fmt_45310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 11), 'fmt')
        # Getting the type of 'None' (line 580)
        None_45311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 18), 'None')
        
        (may_be_45312, more_types_in_union_45313) = may_be_none(fmt_45310, None_45311)

        if may_be_45312:

            if more_types_in_union_45313:
                # Runtime conditional SSA (line 580)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 581):
            
            # Assigning a Attribute to a Name (line 581):
            # Getting the type of 'self' (line 581)
            self_45314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 18), 'self')
            # Obtaining the member 'fmt' of a type (line 581)
            fmt_45315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 18), self_45314, 'fmt')
            # Assigning a type to the variable 'fmt' (line 581)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'fmt', fmt_45315)

            if more_types_in_union_45313:
                # SSA join for if statement (line 580)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 590):
        
        # Assigning a Call to a Name (line 590):
        
        # Call to sub(...): (line 590)
        # Processing the call arguments (line 590)
        unicode_45318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 21), 'unicode', u'((^|[^%])(%%)*)%f')
        
        # Call to format(...): (line 591)
        # Processing the call arguments (line 591)
        # Getting the type of 'dt' (line 591)
        dt_45321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 44), 'dt', False)
        # Obtaining the member 'microsecond' of a type (line 591)
        microsecond_45322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 44), dt_45321, 'microsecond')
        # Processing the call keyword arguments (line 591)
        kwargs_45323 = {}
        unicode_45319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 21), 'unicode', u'\\g<1>{0:06d}')
        # Obtaining the member 'format' of a type (line 591)
        format_45320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 21), unicode_45319, 'format')
        # Calling format(args, kwargs) (line 591)
        format_call_result_45324 = invoke(stypy.reporting.localization.Localization(__file__, 591, 21), format_45320, *[microsecond_45322], **kwargs_45323)
        
        # Getting the type of 'fmt' (line 591)
        fmt_45325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 61), 'fmt', False)
        # Processing the call keyword arguments (line 590)
        kwargs_45326 = {}
        # Getting the type of 're' (line 590)
        re_45316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 14), 're', False)
        # Obtaining the member 'sub' of a type (line 590)
        sub_45317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 14), re_45316, 'sub')
        # Calling sub(args, kwargs) (line 590)
        sub_call_result_45327 = invoke(stypy.reporting.localization.Localization(__file__, 590, 14), sub_45317, *[unicode_45318, format_call_result_45324, fmt_45325], **kwargs_45326)
        
        # Assigning a type to the variable 'fmt' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'fmt', sub_call_result_45327)
        
        # Assigning a Attribute to a Name (line 593):
        
        # Assigning a Attribute to a Name (line 593):
        # Getting the type of 'dt' (line 593)
        dt_45328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 15), 'dt')
        # Obtaining the member 'year' of a type (line 593)
        year_45329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 15), dt_45328, 'year')
        # Assigning a type to the variable 'year' (line 593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'year', year_45329)
        
        # Assigning a BinOp to a Name (line 596):
        
        # Assigning a BinOp to a Name (line 596):
        int_45330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 16), 'int')
        # Getting the type of 'year' (line 596)
        year_45331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 23), 'year')
        # Applying the binary operator '-' (line 596)
        result_sub_45332 = python_operator(stypy.reporting.localization.Localization(__file__, 596, 16), '-', int_45330, year_45331)
        
        # Assigning a type to the variable 'delta' (line 596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 8), 'delta', result_sub_45332)
        
        # Assigning a BinOp to a Name (line 597):
        
        # Assigning a BinOp to a Name (line 597):
        int_45333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 14), 'int')
        # Getting the type of 'delta' (line 597)
        delta_45334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 19), 'delta')
        int_45335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 28), 'int')
        # Applying the binary operator '//' (line 597)
        result_floordiv_45336 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 19), '//', delta_45334, int_45335)
        
        # Getting the type of 'delta' (line 597)
        delta_45337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 34), 'delta')
        int_45338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 43), 'int')
        # Applying the binary operator '//' (line 597)
        result_floordiv_45339 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 34), '//', delta_45337, int_45338)
        
        # Applying the binary operator '+' (line 597)
        result_add_45340 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 19), '+', result_floordiv_45336, result_floordiv_45339)
        
        # Applying the binary operator '*' (line 597)
        result_mul_45341 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 14), '*', int_45333, result_add_45340)
        
        # Assigning a type to the variable 'off' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'off', result_mul_45341)
        
        # Assigning a BinOp to a Name (line 598):
        
        # Assigning a BinOp to a Name (line 598):
        # Getting the type of 'year' (line 598)
        year_45342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 15), 'year')
        # Getting the type of 'off' (line 598)
        off_45343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 22), 'off')
        # Applying the binary operator '+' (line 598)
        result_add_45344 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 15), '+', year_45342, off_45343)
        
        # Assigning a type to the variable 'year' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'year', result_add_45344)
        
        # Assigning a BinOp to a Name (line 601):
        
        # Assigning a BinOp to a Name (line 601):
        # Getting the type of 'year' (line 601)
        year_45345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 16), 'year')
        int_45346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 25), 'int')
        # Getting the type of 'year' (line 601)
        year_45347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 32), 'year')
        # Applying the binary operator '-' (line 601)
        result_sub_45348 = python_operator(stypy.reporting.localization.Localization(__file__, 601, 25), '-', int_45346, year_45347)
        
        int_45349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 41), 'int')
        # Applying the binary operator '//' (line 601)
        result_floordiv_45350 = python_operator(stypy.reporting.localization.Localization(__file__, 601, 24), '//', result_sub_45348, int_45349)
        
        int_45351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 47), 'int')
        # Applying the binary operator '*' (line 601)
        result_mul_45352 = python_operator(stypy.reporting.localization.Localization(__file__, 601, 23), '*', result_floordiv_45350, int_45351)
        
        # Applying the binary operator '+' (line 601)
        result_add_45353 = python_operator(stypy.reporting.localization.Localization(__file__, 601, 16), '+', year_45345, result_mul_45352)
        
        # Assigning a type to the variable 'year1' (line 601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 8), 'year1', result_add_45353)
        
        # Assigning a BinOp to a Name (line 602):
        
        # Assigning a BinOp to a Name (line 602):
        # Getting the type of 'year1' (line 602)
        year1_45354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'year1')
        int_45355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 24), 'int')
        # Applying the binary operator '+' (line 602)
        result_add_45356 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 16), '+', year1_45354, int_45355)
        
        # Assigning a type to the variable 'year2' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'year2', result_add_45356)
        
        # Assigning a Call to a Name (line 603):
        
        # Assigning a Call to a Name (line 603):
        
        # Call to timetuple(...): (line 603)
        # Processing the call keyword arguments (line 603)
        kwargs_45359 = {}
        # Getting the type of 'dt' (line 603)
        dt_45357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 20), 'dt', False)
        # Obtaining the member 'timetuple' of a type (line 603)
        timetuple_45358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 20), dt_45357, 'timetuple')
        # Calling timetuple(args, kwargs) (line 603)
        timetuple_call_result_45360 = invoke(stypy.reporting.localization.Localization(__file__, 603, 20), timetuple_45358, *[], **kwargs_45359)
        
        # Assigning a type to the variable 'timetuple' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'timetuple', timetuple_call_result_45360)
        
        # Assigning a Call to a Name (line 605):
        
        # Assigning a Call to a Name (line 605):
        
        # Call to strftime(...): (line 605)
        # Processing the call arguments (line 605)
        # Getting the type of 'fmt' (line 605)
        fmt_45363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 27), 'fmt', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 605)
        tuple_45364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 605)
        # Adding element type (line 605)
        # Getting the type of 'year1' (line 605)
        year1_45365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 33), 'year1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 33), tuple_45364, year1_45365)
        
        
        # Obtaining the type of the subscript
        int_45366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 53), 'int')
        slice_45367 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 605, 43), int_45366, None, None)
        # Getting the type of 'timetuple' (line 605)
        timetuple_45368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 43), 'timetuple', False)
        # Obtaining the member '__getitem__' of a type (line 605)
        getitem___45369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 43), timetuple_45368, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 605)
        subscript_call_result_45370 = invoke(stypy.reporting.localization.Localization(__file__, 605, 43), getitem___45369, slice_45367)
        
        # Applying the binary operator '+' (line 605)
        result_add_45371 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 32), '+', tuple_45364, subscript_call_result_45370)
        
        # Processing the call keyword arguments (line 605)
        kwargs_45372 = {}
        # Getting the type of 'time' (line 605)
        time_45361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 13), 'time', False)
        # Obtaining the member 'strftime' of a type (line 605)
        strftime_45362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 13), time_45361, 'strftime')
        # Calling strftime(args, kwargs) (line 605)
        strftime_call_result_45373 = invoke(stypy.reporting.localization.Localization(__file__, 605, 13), strftime_45362, *[fmt_45363, result_add_45371], **kwargs_45372)
        
        # Assigning a type to the variable 's1' (line 605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 's1', strftime_call_result_45373)
        
        # Assigning a Call to a Name (line 606):
        
        # Assigning a Call to a Name (line 606):
        
        # Call to strftime(...): (line 606)
        # Processing the call arguments (line 606)
        # Getting the type of 'fmt' (line 606)
        fmt_45376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 27), 'fmt', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 606)
        tuple_45377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 606)
        # Adding element type (line 606)
        # Getting the type of 'year2' (line 606)
        year2_45378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 33), 'year2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 606, 33), tuple_45377, year2_45378)
        
        
        # Obtaining the type of the subscript
        int_45379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 53), 'int')
        slice_45380 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 606, 43), int_45379, None, None)
        # Getting the type of 'timetuple' (line 606)
        timetuple_45381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 43), 'timetuple', False)
        # Obtaining the member '__getitem__' of a type (line 606)
        getitem___45382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 43), timetuple_45381, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 606)
        subscript_call_result_45383 = invoke(stypy.reporting.localization.Localization(__file__, 606, 43), getitem___45382, slice_45380)
        
        # Applying the binary operator '+' (line 606)
        result_add_45384 = python_operator(stypy.reporting.localization.Localization(__file__, 606, 32), '+', tuple_45377, subscript_call_result_45383)
        
        # Processing the call keyword arguments (line 606)
        kwargs_45385 = {}
        # Getting the type of 'time' (line 606)
        time_45374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 13), 'time', False)
        # Obtaining the member 'strftime' of a type (line 606)
        strftime_45375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 13), time_45374, 'strftime')
        # Calling strftime(args, kwargs) (line 606)
        strftime_call_result_45386 = invoke(stypy.reporting.localization.Localization(__file__, 606, 13), strftime_45375, *[fmt_45376, result_add_45384], **kwargs_45385)
        
        # Assigning a type to the variable 's2' (line 606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 8), 's2', strftime_call_result_45386)
        
        # Assigning a Call to a Tuple (line 616):
        
        # Assigning a Call to a Name:
        
        # Call to _replace_common_substr(...): (line 616)
        # Processing the call arguments (line 616)
        # Getting the type of 's1' (line 616)
        s1_45389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 45), 's1', False)
        # Getting the type of 's2' (line 616)
        s2_45390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 49), 's2', False)
        
        # Call to format(...): (line 617)
        # Processing the call arguments (line 617)
        # Getting the type of 'year1' (line 617)
        year1_45393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 62), 'year1', False)
        # Processing the call keyword arguments (line 617)
        kwargs_45394 = {}
        unicode_45391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 45), 'unicode', u'{0:04d}')
        # Obtaining the member 'format' of a type (line 617)
        format_45392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 45), unicode_45391, 'format')
        # Calling format(args, kwargs) (line 617)
        format_call_result_45395 = invoke(stypy.reporting.localization.Localization(__file__, 617, 45), format_45392, *[year1_45393], **kwargs_45394)
        
        
        # Call to format(...): (line 618)
        # Processing the call arguments (line 618)
        # Getting the type of 'year2' (line 618)
        year2_45398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 62), 'year2', False)
        # Processing the call keyword arguments (line 618)
        kwargs_45399 = {}
        unicode_45396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 45), 'unicode', u'{0:04d}')
        # Obtaining the member 'format' of a type (line 618)
        format_45397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 45), unicode_45396, 'format')
        # Calling format(args, kwargs) (line 618)
        format_call_result_45400 = invoke(stypy.reporting.localization.Localization(__file__, 618, 45), format_45397, *[year2_45398], **kwargs_45399)
        
        
        # Call to format(...): (line 619)
        # Processing the call arguments (line 619)
        # Getting the type of 'dt' (line 619)
        dt_45403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 62), 'dt', False)
        # Obtaining the member 'year' of a type (line 619)
        year_45404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 62), dt_45403, 'year')
        # Processing the call keyword arguments (line 619)
        kwargs_45405 = {}
        unicode_45401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 45), 'unicode', u'{0:04d}')
        # Obtaining the member 'format' of a type (line 619)
        format_45402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 45), unicode_45401, 'format')
        # Calling format(args, kwargs) (line 619)
        format_call_result_45406 = invoke(stypy.reporting.localization.Localization(__file__, 619, 45), format_45402, *[year_45404], **kwargs_45405)
        
        # Processing the call keyword arguments (line 616)
        kwargs_45407 = {}
        # Getting the type of 'self' (line 616)
        self_45387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 17), 'self', False)
        # Obtaining the member '_replace_common_substr' of a type (line 616)
        _replace_common_substr_45388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 17), self_45387, '_replace_common_substr')
        # Calling _replace_common_substr(args, kwargs) (line 616)
        _replace_common_substr_call_result_45408 = invoke(stypy.reporting.localization.Localization(__file__, 616, 17), _replace_common_substr_45388, *[s1_45389, s2_45390, format_call_result_45395, format_call_result_45400, format_call_result_45406], **kwargs_45407)
        
        # Assigning a type to the variable 'call_assignment_44512' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'call_assignment_44512', _replace_common_substr_call_result_45408)
        
        # Assigning a Call to a Name (line 616):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_45411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 8), 'int')
        # Processing the call keyword arguments
        kwargs_45412 = {}
        # Getting the type of 'call_assignment_44512' (line 616)
        call_assignment_44512_45409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'call_assignment_44512', False)
        # Obtaining the member '__getitem__' of a type (line 616)
        getitem___45410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 8), call_assignment_44512_45409, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_45413 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___45410, *[int_45411], **kwargs_45412)
        
        # Assigning a type to the variable 'call_assignment_44513' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'call_assignment_44513', getitem___call_result_45413)
        
        # Assigning a Name to a Name (line 616):
        # Getting the type of 'call_assignment_44513' (line 616)
        call_assignment_44513_45414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'call_assignment_44513')
        # Assigning a type to the variable 's1' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 's1', call_assignment_44513_45414)
        
        # Assigning a Call to a Name (line 616):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_45417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 8), 'int')
        # Processing the call keyword arguments
        kwargs_45418 = {}
        # Getting the type of 'call_assignment_44512' (line 616)
        call_assignment_44512_45415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'call_assignment_44512', False)
        # Obtaining the member '__getitem__' of a type (line 616)
        getitem___45416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 8), call_assignment_44512_45415, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_45419 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___45416, *[int_45417], **kwargs_45418)
        
        # Assigning a type to the variable 'call_assignment_44514' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'call_assignment_44514', getitem___call_result_45419)
        
        # Assigning a Name to a Name (line 616):
        # Getting the type of 'call_assignment_44514' (line 616)
        call_assignment_44514_45420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'call_assignment_44514')
        # Assigning a type to the variable 's2' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 12), 's2', call_assignment_44514_45420)
        
        # Assigning a Call to a Tuple (line 620):
        
        # Assigning a Call to a Name:
        
        # Call to _replace_common_substr(...): (line 620)
        # Processing the call arguments (line 620)
        # Getting the type of 's1' (line 620)
        s1_45423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 45), 's1', False)
        # Getting the type of 's2' (line 620)
        s2_45424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 49), 's2', False)
        
        # Call to format(...): (line 621)
        # Processing the call arguments (line 621)
        # Getting the type of 'year1' (line 621)
        year1_45427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 62), 'year1', False)
        int_45428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 70), 'int')
        # Applying the binary operator '%' (line 621)
        result_mod_45429 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 62), '%', year1_45427, int_45428)
        
        # Processing the call keyword arguments (line 621)
        kwargs_45430 = {}
        unicode_45425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 45), 'unicode', u'{0:02d}')
        # Obtaining the member 'format' of a type (line 621)
        format_45426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 45), unicode_45425, 'format')
        # Calling format(args, kwargs) (line 621)
        format_call_result_45431 = invoke(stypy.reporting.localization.Localization(__file__, 621, 45), format_45426, *[result_mod_45429], **kwargs_45430)
        
        
        # Call to format(...): (line 622)
        # Processing the call arguments (line 622)
        # Getting the type of 'year2' (line 622)
        year2_45434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 62), 'year2', False)
        int_45435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 70), 'int')
        # Applying the binary operator '%' (line 622)
        result_mod_45436 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 62), '%', year2_45434, int_45435)
        
        # Processing the call keyword arguments (line 622)
        kwargs_45437 = {}
        unicode_45432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 45), 'unicode', u'{0:02d}')
        # Obtaining the member 'format' of a type (line 622)
        format_45433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 45), unicode_45432, 'format')
        # Calling format(args, kwargs) (line 622)
        format_call_result_45438 = invoke(stypy.reporting.localization.Localization(__file__, 622, 45), format_45433, *[result_mod_45436], **kwargs_45437)
        
        
        # Call to format(...): (line 623)
        # Processing the call arguments (line 623)
        # Getting the type of 'dt' (line 623)
        dt_45441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 62), 'dt', False)
        # Obtaining the member 'year' of a type (line 623)
        year_45442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 62), dt_45441, 'year')
        int_45443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 72), 'int')
        # Applying the binary operator '%' (line 623)
        result_mod_45444 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 62), '%', year_45442, int_45443)
        
        # Processing the call keyword arguments (line 623)
        kwargs_45445 = {}
        unicode_45439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 45), 'unicode', u'{0:02d}')
        # Obtaining the member 'format' of a type (line 623)
        format_45440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 45), unicode_45439, 'format')
        # Calling format(args, kwargs) (line 623)
        format_call_result_45446 = invoke(stypy.reporting.localization.Localization(__file__, 623, 45), format_45440, *[result_mod_45444], **kwargs_45445)
        
        # Processing the call keyword arguments (line 620)
        kwargs_45447 = {}
        # Getting the type of 'self' (line 620)
        self_45421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 17), 'self', False)
        # Obtaining the member '_replace_common_substr' of a type (line 620)
        _replace_common_substr_45422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 17), self_45421, '_replace_common_substr')
        # Calling _replace_common_substr(args, kwargs) (line 620)
        _replace_common_substr_call_result_45448 = invoke(stypy.reporting.localization.Localization(__file__, 620, 17), _replace_common_substr_45422, *[s1_45423, s2_45424, format_call_result_45431, format_call_result_45438, format_call_result_45446], **kwargs_45447)
        
        # Assigning a type to the variable 'call_assignment_44515' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'call_assignment_44515', _replace_common_substr_call_result_45448)
        
        # Assigning a Call to a Name (line 620):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_45451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 8), 'int')
        # Processing the call keyword arguments
        kwargs_45452 = {}
        # Getting the type of 'call_assignment_44515' (line 620)
        call_assignment_44515_45449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'call_assignment_44515', False)
        # Obtaining the member '__getitem__' of a type (line 620)
        getitem___45450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 8), call_assignment_44515_45449, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_45453 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___45450, *[int_45451], **kwargs_45452)
        
        # Assigning a type to the variable 'call_assignment_44516' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'call_assignment_44516', getitem___call_result_45453)
        
        # Assigning a Name to a Name (line 620):
        # Getting the type of 'call_assignment_44516' (line 620)
        call_assignment_44516_45454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'call_assignment_44516')
        # Assigning a type to the variable 's1' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 's1', call_assignment_44516_45454)
        
        # Assigning a Call to a Name (line 620):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_45457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 8), 'int')
        # Processing the call keyword arguments
        kwargs_45458 = {}
        # Getting the type of 'call_assignment_44515' (line 620)
        call_assignment_44515_45455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'call_assignment_44515', False)
        # Obtaining the member '__getitem__' of a type (line 620)
        getitem___45456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 8), call_assignment_44515_45455, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_45459 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___45456, *[int_45457], **kwargs_45458)
        
        # Assigning a type to the variable 'call_assignment_44517' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'call_assignment_44517', getitem___call_result_45459)
        
        # Assigning a Name to a Name (line 620):
        # Getting the type of 'call_assignment_44517' (line 620)
        call_assignment_44517_45460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'call_assignment_44517')
        # Assigning a type to the variable 's2' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 12), 's2', call_assignment_44517_45460)
        
        # Call to unicode_safe(...): (line 624)
        # Processing the call arguments (line 624)
        # Getting the type of 's1' (line 624)
        s1_45463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 34), 's1', False)
        # Processing the call keyword arguments (line 624)
        kwargs_45464 = {}
        # Getting the type of 'cbook' (line 624)
        cbook_45461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 15), 'cbook', False)
        # Obtaining the member 'unicode_safe' of a type (line 624)
        unicode_safe_45462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 15), cbook_45461, 'unicode_safe')
        # Calling unicode_safe(args, kwargs) (line 624)
        unicode_safe_call_result_45465 = invoke(stypy.reporting.localization.Localization(__file__, 624, 15), unicode_safe_45462, *[s1_45463], **kwargs_45464)
        
        # Assigning a type to the variable 'stypy_return_type' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 8), 'stypy_return_type', unicode_safe_call_result_45465)
        
        # ################# End of 'strftime_pre_1900(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'strftime_pre_1900' in the type store
        # Getting the type of 'stypy_return_type' (line 569)
        stypy_return_type_45466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45466)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'strftime_pre_1900'
        return stypy_return_type_45466


    @norecursion
    def strftime(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 626)
        None_45467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 31), 'None')
        defaults = [None_45467]
        # Create a new context for function 'strftime'
        module_type_store = module_type_store.open_function_context('strftime', 626, 4, False)
        # Assigning a type to the variable 'self' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateFormatter.strftime.__dict__.__setitem__('stypy_localization', localization)
        DateFormatter.strftime.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateFormatter.strftime.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateFormatter.strftime.__dict__.__setitem__('stypy_function_name', 'DateFormatter.strftime')
        DateFormatter.strftime.__dict__.__setitem__('stypy_param_names_list', ['dt', 'fmt'])
        DateFormatter.strftime.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateFormatter.strftime.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateFormatter.strftime.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateFormatter.strftime.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateFormatter.strftime.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateFormatter.strftime.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateFormatter.strftime', ['dt', 'fmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'strftime', localization, ['dt', 'fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'strftime(...)' code ##################

        unicode_45468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, (-1)), 'unicode', u'Refer to documentation for datetime.strftime.\n\n        *fmt* is a :func:`strftime` format string.\n\n        Warning: For years before 1900, depending upon the current\n        locale it is possible that the year displayed with %x might\n        be incorrect. For years before 100, %y and %Y will yield\n        zero-padded strings.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 636)
        # Getting the type of 'fmt' (line 636)
        fmt_45469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 11), 'fmt')
        # Getting the type of 'None' (line 636)
        None_45470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 18), 'None')
        
        (may_be_45471, more_types_in_union_45472) = may_be_none(fmt_45469, None_45470)

        if may_be_45471:

            if more_types_in_union_45472:
                # Runtime conditional SSA (line 636)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 637):
            
            # Assigning a Attribute to a Name (line 637):
            # Getting the type of 'self' (line 637)
            self_45473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 18), 'self')
            # Obtaining the member 'fmt' of a type (line 637)
            fmt_45474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 18), self_45473, 'fmt')
            # Assigning a type to the variable 'fmt' (line 637)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 12), 'fmt', fmt_45474)

            if more_types_in_union_45472:
                # SSA join for if statement (line 636)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 638):
        
        # Assigning a Call to a Name (line 638):
        
        # Call to sub(...): (line 638)
        # Processing the call arguments (line 638)
        unicode_45478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 33), 'unicode', u'\\1')
        # Getting the type of 'fmt' (line 638)
        fmt_45479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 40), 'fmt', False)
        # Processing the call keyword arguments (line 638)
        kwargs_45480 = {}
        # Getting the type of 'self' (line 638)
        self_45475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 14), 'self', False)
        # Obtaining the member 'illegal_s' of a type (line 638)
        illegal_s_45476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 14), self_45475, 'illegal_s')
        # Obtaining the member 'sub' of a type (line 638)
        sub_45477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 14), illegal_s_45476, 'sub')
        # Calling sub(args, kwargs) (line 638)
        sub_call_result_45481 = invoke(stypy.reporting.localization.Localization(__file__, 638, 14), sub_45477, *[unicode_45478, fmt_45479], **kwargs_45480)
        
        # Assigning a type to the variable 'fmt' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'fmt', sub_call_result_45481)
        
        # Assigning a Call to a Name (line 639):
        
        # Assigning a Call to a Name (line 639):
        
        # Call to replace(...): (line 639)
        # Processing the call arguments (line 639)
        unicode_45484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 26), 'unicode', u'%s')
        unicode_45485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 32), 'unicode', u's')
        # Processing the call keyword arguments (line 639)
        kwargs_45486 = {}
        # Getting the type of 'fmt' (line 639)
        fmt_45482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 14), 'fmt', False)
        # Obtaining the member 'replace' of a type (line 639)
        replace_45483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 14), fmt_45482, 'replace')
        # Calling replace(args, kwargs) (line 639)
        replace_call_result_45487 = invoke(stypy.reporting.localization.Localization(__file__, 639, 14), replace_45483, *[unicode_45484, unicode_45485], **kwargs_45486)
        
        # Assigning a type to the variable 'fmt' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 8), 'fmt', replace_call_result_45487)
        
        
        # Getting the type of 'dt' (line 640)
        dt_45488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 11), 'dt')
        # Obtaining the member 'year' of a type (line 640)
        year_45489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 11), dt_45488, 'year')
        int_45490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 22), 'int')
        # Applying the binary operator '>=' (line 640)
        result_ge_45491 = python_operator(stypy.reporting.localization.Localization(__file__, 640, 11), '>=', year_45489, int_45490)
        
        # Testing the type of an if condition (line 640)
        if_condition_45492 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 640, 8), result_ge_45491)
        # Assigning a type to the variable 'if_condition_45492' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'if_condition_45492', if_condition_45492)
        # SSA begins for if statement (line 640)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to unicode_safe(...): (line 643)
        # Processing the call arguments (line 643)
        
        # Call to strftime(...): (line 643)
        # Processing the call arguments (line 643)
        # Getting the type of 'fmt' (line 643)
        fmt_45497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 50), 'fmt', False)
        # Processing the call keyword arguments (line 643)
        kwargs_45498 = {}
        # Getting the type of 'dt' (line 643)
        dt_45495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 38), 'dt', False)
        # Obtaining the member 'strftime' of a type (line 643)
        strftime_45496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 38), dt_45495, 'strftime')
        # Calling strftime(args, kwargs) (line 643)
        strftime_call_result_45499 = invoke(stypy.reporting.localization.Localization(__file__, 643, 38), strftime_45496, *[fmt_45497], **kwargs_45498)
        
        # Processing the call keyword arguments (line 643)
        kwargs_45500 = {}
        # Getting the type of 'cbook' (line 643)
        cbook_45493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 19), 'cbook', False)
        # Obtaining the member 'unicode_safe' of a type (line 643)
        unicode_safe_45494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 19), cbook_45493, 'unicode_safe')
        # Calling unicode_safe(args, kwargs) (line 643)
        unicode_safe_call_result_45501 = invoke(stypy.reporting.localization.Localization(__file__, 643, 19), unicode_safe_45494, *[strftime_call_result_45499], **kwargs_45500)
        
        # Assigning a type to the variable 'stypy_return_type' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 12), 'stypy_return_type', unicode_safe_call_result_45501)
        # SSA join for if statement (line 640)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to strftime_pre_1900(...): (line 645)
        # Processing the call arguments (line 645)
        # Getting the type of 'dt' (line 645)
        dt_45504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 38), 'dt', False)
        # Getting the type of 'fmt' (line 645)
        fmt_45505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 42), 'fmt', False)
        # Processing the call keyword arguments (line 645)
        kwargs_45506 = {}
        # Getting the type of 'self' (line 645)
        self_45502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 15), 'self', False)
        # Obtaining the member 'strftime_pre_1900' of a type (line 645)
        strftime_pre_1900_45503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 15), self_45502, 'strftime_pre_1900')
        # Calling strftime_pre_1900(args, kwargs) (line 645)
        strftime_pre_1900_call_result_45507 = invoke(stypy.reporting.localization.Localization(__file__, 645, 15), strftime_pre_1900_45503, *[dt_45504, fmt_45505], **kwargs_45506)
        
        # Assigning a type to the variable 'stypy_return_type' (line 645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 645, 8), 'stypy_return_type', strftime_pre_1900_call_result_45507)
        
        # ################# End of 'strftime(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'strftime' in the type store
        # Getting the type of 'stypy_return_type' (line 626)
        stypy_return_type_45508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45508)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'strftime'
        return stypy_return_type_45508


# Assigning a type to the variable 'DateFormatter' (line 509)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 0), 'DateFormatter', DateFormatter)

# Assigning a Call to a Name (line 520):

# Call to compile(...): (line 520)
# Processing the call arguments (line 520)
unicode_45511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 27), 'unicode', u'((^|[^%])(%%)*%s)')
# Processing the call keyword arguments (line 520)
kwargs_45512 = {}
# Getting the type of 're' (line 520)
re_45509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 16), 're', False)
# Obtaining the member 'compile' of a type (line 520)
compile_45510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 16), re_45509, 'compile')
# Calling compile(args, kwargs) (line 520)
compile_call_result_45513 = invoke(stypy.reporting.localization.Localization(__file__, 520, 16), compile_45510, *[unicode_45511], **kwargs_45512)

# Getting the type of 'DateFormatter'
DateFormatter_45514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'DateFormatter')
# Setting the type of the member 'illegal_s' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), DateFormatter_45514, 'illegal_s', compile_call_result_45513)
# Declaration of the 'IndexDateFormatter' class
# Getting the type of 'ticker' (line 648)
ticker_45515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 25), 'ticker')
# Obtaining the member 'Formatter' of a type (line 648)
Formatter_45516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 25), ticker_45515, 'Formatter')

class IndexDateFormatter(Formatter_45516, ):
    unicode_45517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, (-1)), 'unicode', u'\n    Use with :class:`~matplotlib.ticker.IndexLocator` to cycle format\n    strings by index.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 653)
        None_45518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 34), 'None')
        defaults = [None_45518]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 653, 4, False)
        # Assigning a type to the variable 'self' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IndexDateFormatter.__init__', ['t', 'fmt', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['t', 'fmt', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_45519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, (-1)), 'unicode', u'\n        *t* is a sequence of dates (floating point days).  *fmt* is a\n        :func:`strftime` format string.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 658)
        # Getting the type of 'tz' (line 658)
        tz_45520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 11), 'tz')
        # Getting the type of 'None' (line 658)
        None_45521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 17), 'None')
        
        (may_be_45522, more_types_in_union_45523) = may_be_none(tz_45520, None_45521)

        if may_be_45522:

            if more_types_in_union_45523:
                # Runtime conditional SSA (line 658)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 659):
            
            # Assigning a Call to a Name (line 659):
            
            # Call to _get_rc_timezone(...): (line 659)
            # Processing the call keyword arguments (line 659)
            kwargs_45525 = {}
            # Getting the type of '_get_rc_timezone' (line 659)
            _get_rc_timezone_45524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 17), '_get_rc_timezone', False)
            # Calling _get_rc_timezone(args, kwargs) (line 659)
            _get_rc_timezone_call_result_45526 = invoke(stypy.reporting.localization.Localization(__file__, 659, 17), _get_rc_timezone_45524, *[], **kwargs_45525)
            
            # Assigning a type to the variable 'tz' (line 659)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 12), 'tz', _get_rc_timezone_call_result_45526)

            if more_types_in_union_45523:
                # SSA join for if statement (line 658)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 660):
        
        # Assigning a Name to a Attribute (line 660):
        # Getting the type of 't' (line 660)
        t_45527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 17), 't')
        # Getting the type of 'self' (line 660)
        self_45528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 8), 'self')
        # Setting the type of the member 't' of a type (line 660)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 8), self_45528, 't', t_45527)
        
        # Assigning a Name to a Attribute (line 661):
        
        # Assigning a Name to a Attribute (line 661):
        # Getting the type of 'fmt' (line 661)
        fmt_45529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 19), 'fmt')
        # Getting the type of 'self' (line 661)
        self_45530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 8), 'self')
        # Setting the type of the member 'fmt' of a type (line 661)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 8), self_45530, 'fmt', fmt_45529)
        
        # Assigning a Name to a Attribute (line 662):
        
        # Assigning a Name to a Attribute (line 662):
        # Getting the type of 'tz' (line 662)
        tz_45531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 18), 'tz')
        # Getting the type of 'self' (line 662)
        self_45532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'self')
        # Setting the type of the member 'tz' of a type (line 662)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 8), self_45532, 'tz', tz_45531)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_45533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 30), 'int')
        defaults = [int_45533]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 664, 4, False)
        # Assigning a type to the variable 'self' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'IndexDateFormatter.__call__')
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IndexDateFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IndexDateFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_45534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 665, 8), 'unicode', u'Return the label for time *x* at position *pos*')
        
        # Assigning a Call to a Name (line 666):
        
        # Assigning a Call to a Name (line 666):
        
        # Call to int(...): (line 666)
        # Processing the call arguments (line 666)
        
        # Call to round(...): (line 666)
        # Processing the call arguments (line 666)
        # Getting the type of 'x' (line 666)
        x_45538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 27), 'x', False)
        # Processing the call keyword arguments (line 666)
        kwargs_45539 = {}
        # Getting the type of 'np' (line 666)
        np_45536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 18), 'np', False)
        # Obtaining the member 'round' of a type (line 666)
        round_45537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 18), np_45536, 'round')
        # Calling round(args, kwargs) (line 666)
        round_call_result_45540 = invoke(stypy.reporting.localization.Localization(__file__, 666, 18), round_45537, *[x_45538], **kwargs_45539)
        
        # Processing the call keyword arguments (line 666)
        kwargs_45541 = {}
        # Getting the type of 'int' (line 666)
        int_45535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 14), 'int', False)
        # Calling int(args, kwargs) (line 666)
        int_call_result_45542 = invoke(stypy.reporting.localization.Localization(__file__, 666, 14), int_45535, *[round_call_result_45540], **kwargs_45541)
        
        # Assigning a type to the variable 'ind' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 'ind', int_call_result_45542)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ind' (line 667)
        ind_45543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 11), 'ind')
        
        # Call to len(...): (line 667)
        # Processing the call arguments (line 667)
        # Getting the type of 'self' (line 667)
        self_45545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 22), 'self', False)
        # Obtaining the member 't' of a type (line 667)
        t_45546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 22), self_45545, 't')
        # Processing the call keyword arguments (line 667)
        kwargs_45547 = {}
        # Getting the type of 'len' (line 667)
        len_45544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 18), 'len', False)
        # Calling len(args, kwargs) (line 667)
        len_call_result_45548 = invoke(stypy.reporting.localization.Localization(__file__, 667, 18), len_45544, *[t_45546], **kwargs_45547)
        
        # Applying the binary operator '>=' (line 667)
        result_ge_45549 = python_operator(stypy.reporting.localization.Localization(__file__, 667, 11), '>=', ind_45543, len_call_result_45548)
        
        
        # Getting the type of 'ind' (line 667)
        ind_45550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 33), 'ind')
        int_45551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 40), 'int')
        # Applying the binary operator '<=' (line 667)
        result_le_45552 = python_operator(stypy.reporting.localization.Localization(__file__, 667, 33), '<=', ind_45550, int_45551)
        
        # Applying the binary operator 'or' (line 667)
        result_or_keyword_45553 = python_operator(stypy.reporting.localization.Localization(__file__, 667, 11), 'or', result_ge_45549, result_le_45552)
        
        # Testing the type of an if condition (line 667)
        if_condition_45554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 667, 8), result_or_keyword_45553)
        # Assigning a type to the variable 'if_condition_45554' (line 667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'if_condition_45554', if_condition_45554)
        # SSA begins for if statement (line 667)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_45555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 19), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 12), 'stypy_return_type', unicode_45555)
        # SSA join for if statement (line 667)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 670):
        
        # Assigning a Call to a Name (line 670):
        
        # Call to num2date(...): (line 670)
        # Processing the call arguments (line 670)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 670)
        ind_45557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 29), 'ind', False)
        # Getting the type of 'self' (line 670)
        self_45558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 22), 'self', False)
        # Obtaining the member 't' of a type (line 670)
        t_45559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 22), self_45558, 't')
        # Obtaining the member '__getitem__' of a type (line 670)
        getitem___45560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 22), t_45559, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 670)
        subscript_call_result_45561 = invoke(stypy.reporting.localization.Localization(__file__, 670, 22), getitem___45560, ind_45557)
        
        # Getting the type of 'self' (line 670)
        self_45562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 35), 'self', False)
        # Obtaining the member 'tz' of a type (line 670)
        tz_45563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 35), self_45562, 'tz')
        # Processing the call keyword arguments (line 670)
        kwargs_45564 = {}
        # Getting the type of 'num2date' (line 670)
        num2date_45556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 13), 'num2date', False)
        # Calling num2date(args, kwargs) (line 670)
        num2date_call_result_45565 = invoke(stypy.reporting.localization.Localization(__file__, 670, 13), num2date_45556, *[subscript_call_result_45561, tz_45563], **kwargs_45564)
        
        # Assigning a type to the variable 'dt' (line 670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 670, 8), 'dt', num2date_call_result_45565)
        
        # Call to unicode_safe(...): (line 672)
        # Processing the call arguments (line 672)
        
        # Call to strftime(...): (line 672)
        # Processing the call arguments (line 672)
        # Getting the type of 'self' (line 672)
        self_45570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 46), 'self', False)
        # Obtaining the member 'fmt' of a type (line 672)
        fmt_45571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 46), self_45570, 'fmt')
        # Processing the call keyword arguments (line 672)
        kwargs_45572 = {}
        # Getting the type of 'dt' (line 672)
        dt_45568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 34), 'dt', False)
        # Obtaining the member 'strftime' of a type (line 672)
        strftime_45569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 34), dt_45568, 'strftime')
        # Calling strftime(args, kwargs) (line 672)
        strftime_call_result_45573 = invoke(stypy.reporting.localization.Localization(__file__, 672, 34), strftime_45569, *[fmt_45571], **kwargs_45572)
        
        # Processing the call keyword arguments (line 672)
        kwargs_45574 = {}
        # Getting the type of 'cbook' (line 672)
        cbook_45566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 15), 'cbook', False)
        # Obtaining the member 'unicode_safe' of a type (line 672)
        unicode_safe_45567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 15), cbook_45566, 'unicode_safe')
        # Calling unicode_safe(args, kwargs) (line 672)
        unicode_safe_call_result_45575 = invoke(stypy.reporting.localization.Localization(__file__, 672, 15), unicode_safe_45567, *[strftime_call_result_45573], **kwargs_45574)
        
        # Assigning a type to the variable 'stypy_return_type' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'stypy_return_type', unicode_safe_call_result_45575)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 664)
        stypy_return_type_45576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45576)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_45576


# Assigning a type to the variable 'IndexDateFormatter' (line 648)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 0), 'IndexDateFormatter', IndexDateFormatter)
# Declaration of the 'AutoDateFormatter' class
# Getting the type of 'ticker' (line 675)
ticker_45577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 24), 'ticker')
# Obtaining the member 'Formatter' of a type (line 675)
Formatter_45578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 24), ticker_45577, 'Formatter')

class AutoDateFormatter(Formatter_45578, ):
    unicode_45579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, (-1)), 'unicode', u'\n    This class attempts to figure out the best format to use.  This is\n    most useful when used with the :class:`AutoDateLocator`.\n\n\n    The AutoDateFormatter has a scale dictionary that maps the scale\n    of the tick (the distance in days between one major tick) and a\n    format string.  The default looks like this::\n\n        self.scaled = {\n            DAYS_PER_YEAR: rcParams[\'date.autoformat.year\'],\n            DAYS_PER_MONTH: rcParams[\'date.autoformat.month\'],\n            1.0: rcParams[\'date.autoformat.day\'],\n            1. / HOURS_PER_DAY: rcParams[\'date.autoformat.hour\'],\n            1. / (MINUTES_PER_DAY): rcParams[\'date.autoformat.minute\'],\n            1. / (SEC_PER_DAY): rcParams[\'date.autoformat.second\'],\n            1. / (MUSECONDS_PER_DAY): rcParams[\'date.autoformat.microsecond\'],\n            }\n\n\n    The algorithm picks the key in the dictionary that is >= the\n    current scale and uses that format string.  You can customize this\n    dictionary by doing::\n\n\n    >>> locator = AutoDateLocator()\n    >>> formatter = AutoDateFormatter(locator)\n    >>> formatter.scaled[1/(24.*60.)] = \'%M:%S\' # only show min and sec\n\n    A custom :class:`~matplotlib.ticker.FuncFormatter` can also be used.\n    The following example shows how to use a custom format function to strip\n    trailing zeros from decimal seconds and adds the date to the first\n    ticklabel::\n\n        >>> def my_format_function(x, pos=None):\n        ...     x = matplotlib.dates.num2date(x)\n        ...     if pos == 0:\n        ...         fmt = \'%D %H:%M:%S.%f\'\n        ...     else:\n        ...         fmt = \'%H:%M:%S.%f\'\n        ...     label = x.strftime(fmt)\n        ...     label = label.rstrip("0")\n        ...     label = label.rstrip(".")\n        ...     return label\n        >>> from matplotlib.ticker import FuncFormatter\n        >>> formatter.scaled[1/(24.*60.)] = FuncFormatter(my_format_function)\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 735)
        None_45580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 35), 'None')
        unicode_45581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 52), 'unicode', u'%Y-%m-%d')
        defaults = [None_45580, unicode_45581]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 735, 4, False)
        # Assigning a type to the variable 'self' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateFormatter.__init__', ['locator', 'tz', 'defaultfmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['locator', 'tz', 'defaultfmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_45582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, (-1)), 'unicode', u'\n        Autoformat the date labels.  The default format is the one to use\n        if none of the values in ``self.scaled`` are greater than the unit\n        returned by ``locator._get_unit()``.\n        ')
        
        # Assigning a Name to a Attribute (line 741):
        
        # Assigning a Name to a Attribute (line 741):
        # Getting the type of 'locator' (line 741)
        locator_45583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 24), 'locator')
        # Getting the type of 'self' (line 741)
        self_45584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'self')
        # Setting the type of the member '_locator' of a type (line 741)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 8), self_45584, '_locator', locator_45583)
        
        # Assigning a Name to a Attribute (line 742):
        
        # Assigning a Name to a Attribute (line 742):
        # Getting the type of 'tz' (line 742)
        tz_45585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 19), 'tz')
        # Getting the type of 'self' (line 742)
        self_45586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 8), 'self')
        # Setting the type of the member '_tz' of a type (line 742)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 8), self_45586, '_tz', tz_45585)
        
        # Assigning a Name to a Attribute (line 743):
        
        # Assigning a Name to a Attribute (line 743):
        # Getting the type of 'defaultfmt' (line 743)
        defaultfmt_45587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 26), 'defaultfmt')
        # Getting the type of 'self' (line 743)
        self_45588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 8), 'self')
        # Setting the type of the member 'defaultfmt' of a type (line 743)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 8), self_45588, 'defaultfmt', defaultfmt_45587)
        
        # Assigning a Call to a Attribute (line 744):
        
        # Assigning a Call to a Attribute (line 744):
        
        # Call to DateFormatter(...): (line 744)
        # Processing the call arguments (line 744)
        # Getting the type of 'self' (line 744)
        self_45590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 40), 'self', False)
        # Obtaining the member 'defaultfmt' of a type (line 744)
        defaultfmt_45591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 40), self_45590, 'defaultfmt')
        # Getting the type of 'tz' (line 744)
        tz_45592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 57), 'tz', False)
        # Processing the call keyword arguments (line 744)
        kwargs_45593 = {}
        # Getting the type of 'DateFormatter' (line 744)
        DateFormatter_45589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 26), 'DateFormatter', False)
        # Calling DateFormatter(args, kwargs) (line 744)
        DateFormatter_call_result_45594 = invoke(stypy.reporting.localization.Localization(__file__, 744, 26), DateFormatter_45589, *[defaultfmt_45591, tz_45592], **kwargs_45593)
        
        # Getting the type of 'self' (line 744)
        self_45595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 8), 'self')
        # Setting the type of the member '_formatter' of a type (line 744)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 8), self_45595, '_formatter', DateFormatter_call_result_45594)
        
        # Assigning a Dict to a Attribute (line 745):
        
        # Assigning a Dict to a Attribute (line 745):
        
        # Obtaining an instance of the builtin type 'dict' (line 745)
        dict_45596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, 22), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 745)
        # Adding element type (key, value) (line 745)
        # Getting the type of 'DAYS_PER_YEAR' (line 745)
        DAYS_PER_YEAR_45597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 23), 'DAYS_PER_YEAR')
        
        # Obtaining the type of the subscript
        unicode_45598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, 47), 'unicode', u'date.autoformatter.year')
        # Getting the type of 'rcParams' (line 745)
        rcParams_45599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 38), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 745)
        getitem___45600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 38), rcParams_45599, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 745)
        subscript_call_result_45601 = invoke(stypy.reporting.localization.Localization(__file__, 745, 38), getitem___45600, unicode_45598)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 745, 22), dict_45596, (DAYS_PER_YEAR_45597, subscript_call_result_45601))
        # Adding element type (key, value) (line 745)
        # Getting the type of 'DAYS_PER_MONTH' (line 746)
        DAYS_PER_MONTH_45602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 23), 'DAYS_PER_MONTH')
        
        # Obtaining the type of the subscript
        unicode_45603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 746, 48), 'unicode', u'date.autoformatter.month')
        # Getting the type of 'rcParams' (line 746)
        rcParams_45604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 39), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 746)
        getitem___45605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 39), rcParams_45604, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 746)
        subscript_call_result_45606 = invoke(stypy.reporting.localization.Localization(__file__, 746, 39), getitem___45605, unicode_45603)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 745, 22), dict_45596, (DAYS_PER_MONTH_45602, subscript_call_result_45606))
        # Adding element type (key, value) (line 745)
        float_45607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 747, 23), 'float')
        
        # Obtaining the type of the subscript
        unicode_45608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 747, 37), 'unicode', u'date.autoformatter.day')
        # Getting the type of 'rcParams' (line 747)
        rcParams_45609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 28), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 747)
        getitem___45610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 28), rcParams_45609, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 747)
        subscript_call_result_45611 = invoke(stypy.reporting.localization.Localization(__file__, 747, 28), getitem___45610, unicode_45608)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 745, 22), dict_45596, (float_45607, subscript_call_result_45611))
        # Adding element type (key, value) (line 745)
        float_45612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 23), 'float')
        # Getting the type of 'HOURS_PER_DAY' (line 748)
        HOURS_PER_DAY_45613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 28), 'HOURS_PER_DAY')
        # Applying the binary operator 'div' (line 748)
        result_div_45614 = python_operator(stypy.reporting.localization.Localization(__file__, 748, 23), 'div', float_45612, HOURS_PER_DAY_45613)
        
        
        # Obtaining the type of the subscript
        unicode_45615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 52), 'unicode', u'date.autoformatter.hour')
        # Getting the type of 'rcParams' (line 748)
        rcParams_45616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 43), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 748)
        getitem___45617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 43), rcParams_45616, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 748)
        subscript_call_result_45618 = invoke(stypy.reporting.localization.Localization(__file__, 748, 43), getitem___45617, unicode_45615)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 745, 22), dict_45596, (result_div_45614, subscript_call_result_45618))
        # Adding element type (key, value) (line 745)
        float_45619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, 23), 'float')
        # Getting the type of 'MINUTES_PER_DAY' (line 749)
        MINUTES_PER_DAY_45620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 29), 'MINUTES_PER_DAY')
        # Applying the binary operator 'div' (line 749)
        result_div_45621 = python_operator(stypy.reporting.localization.Localization(__file__, 749, 23), 'div', float_45619, MINUTES_PER_DAY_45620)
        
        
        # Obtaining the type of the subscript
        unicode_45622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 36), 'unicode', u'date.autoformatter.minute')
        # Getting the type of 'rcParams' (line 750)
        rcParams_45623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 27), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 750)
        getitem___45624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 27), rcParams_45623, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 750)
        subscript_call_result_45625 = invoke(stypy.reporting.localization.Localization(__file__, 750, 27), getitem___45624, unicode_45622)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 745, 22), dict_45596, (result_div_45621, subscript_call_result_45625))
        # Adding element type (key, value) (line 745)
        float_45626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 23), 'float')
        # Getting the type of 'SEC_PER_DAY' (line 751)
        SEC_PER_DAY_45627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 29), 'SEC_PER_DAY')
        # Applying the binary operator 'div' (line 751)
        result_div_45628 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 23), 'div', float_45626, SEC_PER_DAY_45627)
        
        
        # Obtaining the type of the subscript
        unicode_45629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 36), 'unicode', u'date.autoformatter.second')
        # Getting the type of 'rcParams' (line 752)
        rcParams_45630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 27), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 752)
        getitem___45631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 27), rcParams_45630, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 752)
        subscript_call_result_45632 = invoke(stypy.reporting.localization.Localization(__file__, 752, 27), getitem___45631, unicode_45629)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 745, 22), dict_45596, (result_div_45628, subscript_call_result_45632))
        # Adding element type (key, value) (line 745)
        float_45633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 23), 'float')
        # Getting the type of 'MUSECONDS_PER_DAY' (line 753)
        MUSECONDS_PER_DAY_45634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 29), 'MUSECONDS_PER_DAY')
        # Applying the binary operator 'div' (line 753)
        result_div_45635 = python_operator(stypy.reporting.localization.Localization(__file__, 753, 23), 'div', float_45633, MUSECONDS_PER_DAY_45634)
        
        
        # Obtaining the type of the subscript
        unicode_45636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 36), 'unicode', u'date.autoformatter.microsecond')
        # Getting the type of 'rcParams' (line 754)
        rcParams_45637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 27), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 754)
        getitem___45638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 27), rcParams_45637, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 754)
        subscript_call_result_45639 = invoke(stypy.reporting.localization.Localization(__file__, 754, 27), getitem___45638, unicode_45636)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 745, 22), dict_45596, (result_div_45635, subscript_call_result_45639))
        
        # Getting the type of 'self' (line 745)
        self_45640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 8), 'self')
        # Setting the type of the member 'scaled' of a type (line 745)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 8), self_45640, 'scaled', dict_45596)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 756)
        None_45641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 30), 'None')
        defaults = [None_45641]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 756, 4, False)
        # Assigning a type to the variable 'self' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'AutoDateFormatter.__call__')
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoDateFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Call to a Name (line 757):
        
        # Assigning a Call to a Name (line 757):
        
        # Call to float(...): (line 757)
        # Processing the call arguments (line 757)
        
        # Call to _get_unit(...): (line 757)
        # Processing the call keyword arguments (line 757)
        kwargs_45646 = {}
        # Getting the type of 'self' (line 757)
        self_45643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 35), 'self', False)
        # Obtaining the member '_locator' of a type (line 757)
        _locator_45644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 35), self_45643, '_locator')
        # Obtaining the member '_get_unit' of a type (line 757)
        _get_unit_45645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 35), _locator_45644, '_get_unit')
        # Calling _get_unit(args, kwargs) (line 757)
        _get_unit_call_result_45647 = invoke(stypy.reporting.localization.Localization(__file__, 757, 35), _get_unit_45645, *[], **kwargs_45646)
        
        # Processing the call keyword arguments (line 757)
        kwargs_45648 = {}
        # Getting the type of 'float' (line 757)
        float_45642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 29), 'float', False)
        # Calling float(args, kwargs) (line 757)
        float_call_result_45649 = invoke(stypy.reporting.localization.Localization(__file__, 757, 29), float_45642, *[_get_unit_call_result_45647], **kwargs_45648)
        
        # Assigning a type to the variable 'locator_unit_scale' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'locator_unit_scale', float_call_result_45649)
        
        # Assigning a Call to a Name (line 759):
        
        # Assigning a Call to a Name (line 759):
        
        # Call to next(...): (line 759)
        # Processing the call arguments (line 759)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 759, 20, True)
        # Calculating comprehension expression
        
        # Call to sorted(...): (line 759)
        # Processing the call arguments (line 759)
        
        # Call to items(...): (line 759)
        # Processing the call keyword arguments (line 759)
        kwargs_45659 = {}
        # Getting the type of 'self' (line 759)
        self_45656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 49), 'self', False)
        # Obtaining the member 'scaled' of a type (line 759)
        scaled_45657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 49), self_45656, 'scaled')
        # Obtaining the member 'items' of a type (line 759)
        items_45658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 49), scaled_45657, 'items')
        # Calling items(args, kwargs) (line 759)
        items_call_result_45660 = invoke(stypy.reporting.localization.Localization(__file__, 759, 49), items_45658, *[], **kwargs_45659)
        
        # Processing the call keyword arguments (line 759)
        kwargs_45661 = {}
        # Getting the type of 'sorted' (line 759)
        sorted_45655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 42), 'sorted', False)
        # Calling sorted(args, kwargs) (line 759)
        sorted_call_result_45662 = invoke(stypy.reporting.localization.Localization(__file__, 759, 42), sorted_45655, *[items_call_result_45660], **kwargs_45661)
        
        comprehension_45663 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 20), sorted_call_result_45662)
        # Assigning a type to the variable 'scale' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 20), 'scale', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 20), comprehension_45663))
        # Assigning a type to the variable 'fmt' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 20), 'fmt', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 20), comprehension_45663))
        
        # Getting the type of 'scale' (line 760)
        scale_45652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 23), 'scale', False)
        # Getting the type of 'locator_unit_scale' (line 760)
        locator_unit_scale_45653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 32), 'locator_unit_scale', False)
        # Applying the binary operator '>=' (line 760)
        result_ge_45654 = python_operator(stypy.reporting.localization.Localization(__file__, 760, 23), '>=', scale_45652, locator_unit_scale_45653)
        
        # Getting the type of 'fmt' (line 759)
        fmt_45651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 20), 'fmt', False)
        list_45664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 20), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 20), list_45664, fmt_45651)
        # Getting the type of 'self' (line 761)
        self_45665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 19), 'self', False)
        # Obtaining the member 'defaultfmt' of a type (line 761)
        defaultfmt_45666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 19), self_45665, 'defaultfmt')
        # Processing the call keyword arguments (line 759)
        kwargs_45667 = {}
        # Getting the type of 'next' (line 759)
        next_45650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 14), 'next', False)
        # Calling next(args, kwargs) (line 759)
        next_call_result_45668 = invoke(stypy.reporting.localization.Localization(__file__, 759, 14), next_45650, *[list_45664, defaultfmt_45666], **kwargs_45667)
        
        # Assigning a type to the variable 'fmt' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 8), 'fmt', next_call_result_45668)
        
        
        # Call to isinstance(...): (line 763)
        # Processing the call arguments (line 763)
        # Getting the type of 'fmt' (line 763)
        fmt_45670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 22), 'fmt', False)
        # Getting the type of 'six' (line 763)
        six_45671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 27), 'six', False)
        # Obtaining the member 'string_types' of a type (line 763)
        string_types_45672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 27), six_45671, 'string_types')
        # Processing the call keyword arguments (line 763)
        kwargs_45673 = {}
        # Getting the type of 'isinstance' (line 763)
        isinstance_45669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 763)
        isinstance_call_result_45674 = invoke(stypy.reporting.localization.Localization(__file__, 763, 11), isinstance_45669, *[fmt_45670, string_types_45672], **kwargs_45673)
        
        # Testing the type of an if condition (line 763)
        if_condition_45675 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 763, 8), isinstance_call_result_45674)
        # Assigning a type to the variable 'if_condition_45675' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'if_condition_45675', if_condition_45675)
        # SSA begins for if statement (line 763)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 764):
        
        # Assigning a Call to a Attribute (line 764):
        
        # Call to DateFormatter(...): (line 764)
        # Processing the call arguments (line 764)
        # Getting the type of 'fmt' (line 764)
        fmt_45677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 44), 'fmt', False)
        # Getting the type of 'self' (line 764)
        self_45678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 49), 'self', False)
        # Obtaining the member '_tz' of a type (line 764)
        _tz_45679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 49), self_45678, '_tz')
        # Processing the call keyword arguments (line 764)
        kwargs_45680 = {}
        # Getting the type of 'DateFormatter' (line 764)
        DateFormatter_45676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 30), 'DateFormatter', False)
        # Calling DateFormatter(args, kwargs) (line 764)
        DateFormatter_call_result_45681 = invoke(stypy.reporting.localization.Localization(__file__, 764, 30), DateFormatter_45676, *[fmt_45677, _tz_45679], **kwargs_45680)
        
        # Getting the type of 'self' (line 764)
        self_45682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 12), 'self')
        # Setting the type of the member '_formatter' of a type (line 764)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 12), self_45682, '_formatter', DateFormatter_call_result_45681)
        
        # Assigning a Call to a Name (line 765):
        
        # Assigning a Call to a Name (line 765):
        
        # Call to _formatter(...): (line 765)
        # Processing the call arguments (line 765)
        # Getting the type of 'x' (line 765)
        x_45685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 37), 'x', False)
        # Getting the type of 'pos' (line 765)
        pos_45686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 40), 'pos', False)
        # Processing the call keyword arguments (line 765)
        kwargs_45687 = {}
        # Getting the type of 'self' (line 765)
        self_45683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 21), 'self', False)
        # Obtaining the member '_formatter' of a type (line 765)
        _formatter_45684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 21), self_45683, '_formatter')
        # Calling _formatter(args, kwargs) (line 765)
        _formatter_call_result_45688 = invoke(stypy.reporting.localization.Localization(__file__, 765, 21), _formatter_45684, *[x_45685, pos_45686], **kwargs_45687)
        
        # Assigning a type to the variable 'result' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'result', _formatter_call_result_45688)
        # SSA branch for the else part of an if statement (line 763)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to callable(...): (line 766)
        # Processing the call arguments (line 766)
        # Getting the type of 'fmt' (line 766)
        fmt_45690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 22), 'fmt', False)
        # Processing the call keyword arguments (line 766)
        kwargs_45691 = {}
        # Getting the type of 'callable' (line 766)
        callable_45689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 13), 'callable', False)
        # Calling callable(args, kwargs) (line 766)
        callable_call_result_45692 = invoke(stypy.reporting.localization.Localization(__file__, 766, 13), callable_45689, *[fmt_45690], **kwargs_45691)
        
        # Testing the type of an if condition (line 766)
        if_condition_45693 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 766, 13), callable_call_result_45692)
        # Assigning a type to the variable 'if_condition_45693' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 13), 'if_condition_45693', if_condition_45693)
        # SSA begins for if statement (line 766)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 767):
        
        # Assigning a Call to a Name (line 767):
        
        # Call to fmt(...): (line 767)
        # Processing the call arguments (line 767)
        # Getting the type of 'x' (line 767)
        x_45695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 25), 'x', False)
        # Getting the type of 'pos' (line 767)
        pos_45696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 28), 'pos', False)
        # Processing the call keyword arguments (line 767)
        kwargs_45697 = {}
        # Getting the type of 'fmt' (line 767)
        fmt_45694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 21), 'fmt', False)
        # Calling fmt(args, kwargs) (line 767)
        fmt_call_result_45698 = invoke(stypy.reporting.localization.Localization(__file__, 767, 21), fmt_45694, *[x_45695, pos_45696], **kwargs_45697)
        
        # Assigning a type to the variable 'result' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 12), 'result', fmt_call_result_45698)
        # SSA branch for the else part of an if statement (line 766)
        module_type_store.open_ssa_branch('else')
        
        # Call to TypeError(...): (line 769)
        # Processing the call arguments (line 769)
        
        # Call to format(...): (line 769)
        # Processing the call arguments (line 769)
        # Getting the type of 'self' (line 769)
        self_45702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 70), 'self', False)
        # Processing the call keyword arguments (line 769)
        kwargs_45703 = {}
        unicode_45700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 28), 'unicode', u'Unexpected type passed to {0!r}.')
        # Obtaining the member 'format' of a type (line 769)
        format_45701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 28), unicode_45700, 'format')
        # Calling format(args, kwargs) (line 769)
        format_call_result_45704 = invoke(stypy.reporting.localization.Localization(__file__, 769, 28), format_45701, *[self_45702], **kwargs_45703)
        
        # Processing the call keyword arguments (line 769)
        kwargs_45705 = {}
        # Getting the type of 'TypeError' (line 769)
        TypeError_45699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 769)
        TypeError_call_result_45706 = invoke(stypy.reporting.localization.Localization(__file__, 769, 18), TypeError_45699, *[format_call_result_45704], **kwargs_45705)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 769, 12), TypeError_call_result_45706, 'raise parameter', BaseException)
        # SSA join for if statement (line 766)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 763)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 771)
        result_45707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'stypy_return_type', result_45707)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 756)
        stypy_return_type_45708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45708)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_45708


# Assigning a type to the variable 'AutoDateFormatter' (line 675)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 0), 'AutoDateFormatter', AutoDateFormatter)
# Declaration of the 'rrulewrapper' class

class rrulewrapper(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 776, 4, False)
        # Assigning a type to the variable 'self' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulewrapper.__init__', ['freq'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['freq'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 777):
        
        # Assigning a Call to a Attribute (line 777):
        
        # Call to copy(...): (line 777)
        # Processing the call keyword arguments (line 777)
        kwargs_45711 = {}
        # Getting the type of 'kwargs' (line 777)
        kwargs_45709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 26), 'kwargs', False)
        # Obtaining the member 'copy' of a type (line 777)
        copy_45710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 26), kwargs_45709, 'copy')
        # Calling copy(args, kwargs) (line 777)
        copy_call_result_45712 = invoke(stypy.reporting.localization.Localization(__file__, 777, 26), copy_45710, *[], **kwargs_45711)
        
        # Getting the type of 'self' (line 777)
        self_45713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 8), 'self')
        # Setting the type of the member '_construct' of a type (line 777)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 8), self_45713, '_construct', copy_call_result_45712)
        
        # Assigning a Name to a Subscript (line 778):
        
        # Assigning a Name to a Subscript (line 778):
        # Getting the type of 'freq' (line 778)
        freq_45714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 34), 'freq')
        # Getting the type of 'self' (line 778)
        self_45715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 8), 'self')
        # Obtaining the member '_construct' of a type (line 778)
        _construct_45716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 8), self_45715, '_construct')
        unicode_45717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 24), 'unicode', u'freq')
        # Storing an element on a container (line 778)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 778, 8), _construct_45716, (unicode_45717, freq_45714))
        
        # Assigning a Call to a Attribute (line 779):
        
        # Assigning a Call to a Attribute (line 779):
        
        # Call to rrule(...): (line 779)
        # Processing the call keyword arguments (line 779)
        # Getting the type of 'self' (line 779)
        self_45719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 30), 'self', False)
        # Obtaining the member '_construct' of a type (line 779)
        _construct_45720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 30), self_45719, '_construct')
        kwargs_45721 = {'_construct_45720': _construct_45720}
        # Getting the type of 'rrule' (line 779)
        rrule_45718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 22), 'rrule', False)
        # Calling rrule(args, kwargs) (line 779)
        rrule_call_result_45722 = invoke(stypy.reporting.localization.Localization(__file__, 779, 22), rrule_45718, *[], **kwargs_45721)
        
        # Getting the type of 'self' (line 779)
        self_45723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 8), 'self')
        # Setting the type of the member '_rrule' of a type (line 779)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 8), self_45723, '_rrule', rrule_call_result_45722)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set'
        module_type_store = module_type_store.open_function_context('set', 781, 4, False)
        # Assigning a type to the variable 'self' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulewrapper.set.__dict__.__setitem__('stypy_localization', localization)
        rrulewrapper.set.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulewrapper.set.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulewrapper.set.__dict__.__setitem__('stypy_function_name', 'rrulewrapper.set')
        rrulewrapper.set.__dict__.__setitem__('stypy_param_names_list', [])
        rrulewrapper.set.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulewrapper.set.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        rrulewrapper.set.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulewrapper.set.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulewrapper.set.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulewrapper.set.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulewrapper.set', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set(...)' code ##################

        
        # Call to update(...): (line 782)
        # Processing the call arguments (line 782)
        # Getting the type of 'kwargs' (line 782)
        kwargs_45727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 31), 'kwargs', False)
        # Processing the call keyword arguments (line 782)
        kwargs_45728 = {}
        # Getting the type of 'self' (line 782)
        self_45724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 8), 'self', False)
        # Obtaining the member '_construct' of a type (line 782)
        _construct_45725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 8), self_45724, '_construct')
        # Obtaining the member 'update' of a type (line 782)
        update_45726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 8), _construct_45725, 'update')
        # Calling update(args, kwargs) (line 782)
        update_call_result_45729 = invoke(stypy.reporting.localization.Localization(__file__, 782, 8), update_45726, *[kwargs_45727], **kwargs_45728)
        
        
        # Assigning a Call to a Attribute (line 783):
        
        # Assigning a Call to a Attribute (line 783):
        
        # Call to rrule(...): (line 783)
        # Processing the call keyword arguments (line 783)
        # Getting the type of 'self' (line 783)
        self_45731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 30), 'self', False)
        # Obtaining the member '_construct' of a type (line 783)
        _construct_45732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 30), self_45731, '_construct')
        kwargs_45733 = {'_construct_45732': _construct_45732}
        # Getting the type of 'rrule' (line 783)
        rrule_45730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 22), 'rrule', False)
        # Calling rrule(args, kwargs) (line 783)
        rrule_call_result_45734 = invoke(stypy.reporting.localization.Localization(__file__, 783, 22), rrule_45730, *[], **kwargs_45733)
        
        # Getting the type of 'self' (line 783)
        self_45735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 8), 'self')
        # Setting the type of the member '_rrule' of a type (line 783)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 8), self_45735, '_rrule', rrule_call_result_45734)
        
        # ################# End of 'set(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set' in the type store
        # Getting the type of 'stypy_return_type' (line 781)
        stypy_return_type_45736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45736)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set'
        return stypy_return_type_45736


    @norecursion
    def __getattr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getattr__'
        module_type_store = module_type_store.open_function_context('__getattr__', 785, 4, False)
        # Assigning a type to the variable 'self' (line 786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_localization', localization)
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_function_name', 'rrulewrapper.__getattr__')
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_param_names_list', ['name'])
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulewrapper.__getattr__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulewrapper.__getattr__', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getattr__', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getattr__(...)' code ##################

        
        
        # Getting the type of 'name' (line 786)
        name_45737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 11), 'name')
        # Getting the type of 'self' (line 786)
        self_45738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 19), 'self')
        # Obtaining the member '__dict__' of a type (line 786)
        dict___45739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 19), self_45738, '__dict__')
        # Applying the binary operator 'in' (line 786)
        result_contains_45740 = python_operator(stypy.reporting.localization.Localization(__file__, 786, 11), 'in', name_45737, dict___45739)
        
        # Testing the type of an if condition (line 786)
        if_condition_45741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 786, 8), result_contains_45740)
        # Assigning a type to the variable 'if_condition_45741' (line 786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 8), 'if_condition_45741', if_condition_45741)
        # SSA begins for if statement (line 786)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 787)
        name_45742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 33), 'name')
        # Getting the type of 'self' (line 787)
        self_45743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 19), 'self')
        # Obtaining the member '__dict__' of a type (line 787)
        dict___45744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 19), self_45743, '__dict__')
        # Obtaining the member '__getitem__' of a type (line 787)
        getitem___45745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 19), dict___45744, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 787)
        subscript_call_result_45746 = invoke(stypy.reporting.localization.Localization(__file__, 787, 19), getitem___45745, name_45742)
        
        # Assigning a type to the variable 'stypy_return_type' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 12), 'stypy_return_type', subscript_call_result_45746)
        # SSA join for if statement (line 786)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to getattr(...): (line 788)
        # Processing the call arguments (line 788)
        # Getting the type of 'self' (line 788)
        self_45748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 23), 'self', False)
        # Obtaining the member '_rrule' of a type (line 788)
        _rrule_45749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 23), self_45748, '_rrule')
        # Getting the type of 'name' (line 788)
        name_45750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 36), 'name', False)
        # Processing the call keyword arguments (line 788)
        kwargs_45751 = {}
        # Getting the type of 'getattr' (line 788)
        getattr_45747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 15), 'getattr', False)
        # Calling getattr(args, kwargs) (line 788)
        getattr_call_result_45752 = invoke(stypy.reporting.localization.Localization(__file__, 788, 15), getattr_45747, *[_rrule_45749, name_45750], **kwargs_45751)
        
        # Assigning a type to the variable 'stypy_return_type' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'stypy_return_type', getattr_call_result_45752)
        
        # ################# End of '__getattr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getattr__' in the type store
        # Getting the type of 'stypy_return_type' (line 785)
        stypy_return_type_45753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45753)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getattr__'
        return stypy_return_type_45753


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 790, 4, False)
        # Assigning a type to the variable 'self' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_function_name', 'rrulewrapper.__setstate__')
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['state'])
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulewrapper.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulewrapper.__setstate__', ['state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Call to update(...): (line 791)
        # Processing the call arguments (line 791)
        # Getting the type of 'state' (line 791)
        state_45757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 29), 'state', False)
        # Processing the call keyword arguments (line 791)
        kwargs_45758 = {}
        # Getting the type of 'self' (line 791)
        self_45754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 8), 'self', False)
        # Obtaining the member '__dict__' of a type (line 791)
        dict___45755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 8), self_45754, '__dict__')
        # Obtaining the member 'update' of a type (line 791)
        update_45756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 8), dict___45755, 'update')
        # Calling update(args, kwargs) (line 791)
        update_call_result_45759 = invoke(stypy.reporting.localization.Localization(__file__, 791, 8), update_45756, *[state_45757], **kwargs_45758)
        
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 790)
        stypy_return_type_45760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45760)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_45760


# Assigning a type to the variable 'rrulewrapper' (line 774)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 0), 'rrulewrapper', rrulewrapper)
# Declaration of the 'DateLocator' class
# Getting the type of 'ticker' (line 794)
ticker_45761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 18), 'ticker')
# Obtaining the member 'Locator' of a type (line 794)
Locator_45762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 18), ticker_45761, 'Locator')

class DateLocator(Locator_45762, ):
    unicode_45763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, (-1)), 'unicode', u'\n    Determines the tick locations when plotting dates.\n    ')
    
    # Assigning a Dict to a Name (line 798):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 800)
        None_45764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 26), 'None')
        defaults = [None_45764]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 800, 4, False)
        # Assigning a type to the variable 'self' (line 801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateLocator.__init__', ['tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_45765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, (-1)), 'unicode', u'\n        *tz* is a :class:`tzinfo` instance.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 804)
        # Getting the type of 'tz' (line 804)
        tz_45766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 11), 'tz')
        # Getting the type of 'None' (line 804)
        None_45767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 17), 'None')
        
        (may_be_45768, more_types_in_union_45769) = may_be_none(tz_45766, None_45767)

        if may_be_45768:

            if more_types_in_union_45769:
                # Runtime conditional SSA (line 804)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 805):
            
            # Assigning a Call to a Name (line 805):
            
            # Call to _get_rc_timezone(...): (line 805)
            # Processing the call keyword arguments (line 805)
            kwargs_45771 = {}
            # Getting the type of '_get_rc_timezone' (line 805)
            _get_rc_timezone_45770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 17), '_get_rc_timezone', False)
            # Calling _get_rc_timezone(args, kwargs) (line 805)
            _get_rc_timezone_call_result_45772 = invoke(stypy.reporting.localization.Localization(__file__, 805, 17), _get_rc_timezone_45770, *[], **kwargs_45771)
            
            # Assigning a type to the variable 'tz' (line 805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'tz', _get_rc_timezone_call_result_45772)

            if more_types_in_union_45769:
                # SSA join for if statement (line 804)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 806):
        
        # Assigning a Name to a Attribute (line 806):
        # Getting the type of 'tz' (line 806)
        tz_45773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 18), 'tz')
        # Getting the type of 'self' (line 806)
        self_45774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'self')
        # Setting the type of the member 'tz' of a type (line 806)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 8), self_45774, 'tz', tz_45773)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_tzinfo(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_tzinfo'
        module_type_store = module_type_store.open_function_context('set_tzinfo', 808, 4, False)
        # Assigning a type to the variable 'self' (line 809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_localization', localization)
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_function_name', 'DateLocator.set_tzinfo')
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_param_names_list', ['tz'])
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateLocator.set_tzinfo.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateLocator.set_tzinfo', ['tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_tzinfo', localization, ['tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_tzinfo(...)' code ##################

        unicode_45775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, (-1)), 'unicode', u'\n        Set time zone info.\n        ')
        
        # Assigning a Name to a Attribute (line 812):
        
        # Assigning a Name to a Attribute (line 812):
        # Getting the type of 'tz' (line 812)
        tz_45776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 18), 'tz')
        # Getting the type of 'self' (line 812)
        self_45777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 8), 'self')
        # Setting the type of the member 'tz' of a type (line 812)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 8), self_45777, 'tz', tz_45776)
        
        # ################# End of 'set_tzinfo(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_tzinfo' in the type store
        # Getting the type of 'stypy_return_type' (line 808)
        stypy_return_type_45778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45778)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_tzinfo'
        return stypy_return_type_45778


    @norecursion
    def datalim_to_dt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'datalim_to_dt'
        module_type_store = module_type_store.open_function_context('datalim_to_dt', 814, 4, False)
        # Assigning a type to the variable 'self' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_localization', localization)
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_function_name', 'DateLocator.datalim_to_dt')
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_param_names_list', [])
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateLocator.datalim_to_dt.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateLocator.datalim_to_dt', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'datalim_to_dt', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'datalim_to_dt(...)' code ##################

        unicode_45779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, (-1)), 'unicode', u'\n        Convert axis data interval to datetime objects.\n        ')
        
        # Assigning a Call to a Tuple (line 818):
        
        # Assigning a Call to a Name:
        
        # Call to get_data_interval(...): (line 818)
        # Processing the call keyword arguments (line 818)
        kwargs_45783 = {}
        # Getting the type of 'self' (line 818)
        self_45780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 818)
        axis_45781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 21), self_45780, 'axis')
        # Obtaining the member 'get_data_interval' of a type (line 818)
        get_data_interval_45782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 21), axis_45781, 'get_data_interval')
        # Calling get_data_interval(args, kwargs) (line 818)
        get_data_interval_call_result_45784 = invoke(stypy.reporting.localization.Localization(__file__, 818, 21), get_data_interval_45782, *[], **kwargs_45783)
        
        # Assigning a type to the variable 'call_assignment_44518' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'call_assignment_44518', get_data_interval_call_result_45784)
        
        # Assigning a Call to a Name (line 818):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_45787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 8), 'int')
        # Processing the call keyword arguments
        kwargs_45788 = {}
        # Getting the type of 'call_assignment_44518' (line 818)
        call_assignment_44518_45785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'call_assignment_44518', False)
        # Obtaining the member '__getitem__' of a type (line 818)
        getitem___45786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 8), call_assignment_44518_45785, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_45789 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___45786, *[int_45787], **kwargs_45788)
        
        # Assigning a type to the variable 'call_assignment_44519' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'call_assignment_44519', getitem___call_result_45789)
        
        # Assigning a Name to a Name (line 818):
        # Getting the type of 'call_assignment_44519' (line 818)
        call_assignment_44519_45790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'call_assignment_44519')
        # Assigning a type to the variable 'dmin' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'dmin', call_assignment_44519_45790)
        
        # Assigning a Call to a Name (line 818):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_45793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 8), 'int')
        # Processing the call keyword arguments
        kwargs_45794 = {}
        # Getting the type of 'call_assignment_44518' (line 818)
        call_assignment_44518_45791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'call_assignment_44518', False)
        # Obtaining the member '__getitem__' of a type (line 818)
        getitem___45792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 8), call_assignment_44518_45791, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_45795 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___45792, *[int_45793], **kwargs_45794)
        
        # Assigning a type to the variable 'call_assignment_44520' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'call_assignment_44520', getitem___call_result_45795)
        
        # Assigning a Name to a Name (line 818):
        # Getting the type of 'call_assignment_44520' (line 818)
        call_assignment_44520_45796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'call_assignment_44520')
        # Assigning a type to the variable 'dmax' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 14), 'dmax', call_assignment_44520_45796)
        
        
        # Getting the type of 'dmin' (line 819)
        dmin_45797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 11), 'dmin')
        # Getting the type of 'dmax' (line 819)
        dmax_45798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 18), 'dmax')
        # Applying the binary operator '>' (line 819)
        result_gt_45799 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 11), '>', dmin_45797, dmax_45798)
        
        # Testing the type of an if condition (line 819)
        if_condition_45800 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 819, 8), result_gt_45799)
        # Assigning a type to the variable 'if_condition_45800' (line 819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 8), 'if_condition_45800', if_condition_45800)
        # SSA begins for if statement (line 819)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 820):
        
        # Assigning a Name to a Name (line 820):
        # Getting the type of 'dmax' (line 820)
        dmax_45801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 25), 'dmax')
        # Assigning a type to the variable 'tuple_assignment_44521' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 12), 'tuple_assignment_44521', dmax_45801)
        
        # Assigning a Name to a Name (line 820):
        # Getting the type of 'dmin' (line 820)
        dmin_45802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 31), 'dmin')
        # Assigning a type to the variable 'tuple_assignment_44522' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 12), 'tuple_assignment_44522', dmin_45802)
        
        # Assigning a Name to a Name (line 820):
        # Getting the type of 'tuple_assignment_44521' (line 820)
        tuple_assignment_44521_45803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 12), 'tuple_assignment_44521')
        # Assigning a type to the variable 'dmin' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 12), 'dmin', tuple_assignment_44521_45803)
        
        # Assigning a Name to a Name (line 820):
        # Getting the type of 'tuple_assignment_44522' (line 820)
        tuple_assignment_44522_45804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 12), 'tuple_assignment_44522')
        # Assigning a type to the variable 'dmax' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 18), 'dmax', tuple_assignment_44522_45804)
        # SSA join for if statement (line 819)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 822)
        tuple_45805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 822)
        # Adding element type (line 822)
        
        # Call to num2date(...): (line 822)
        # Processing the call arguments (line 822)
        # Getting the type of 'dmin' (line 822)
        dmin_45807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 24), 'dmin', False)
        # Getting the type of 'self' (line 822)
        self_45808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 30), 'self', False)
        # Obtaining the member 'tz' of a type (line 822)
        tz_45809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 30), self_45808, 'tz')
        # Processing the call keyword arguments (line 822)
        kwargs_45810 = {}
        # Getting the type of 'num2date' (line 822)
        num2date_45806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 15), 'num2date', False)
        # Calling num2date(args, kwargs) (line 822)
        num2date_call_result_45811 = invoke(stypy.reporting.localization.Localization(__file__, 822, 15), num2date_45806, *[dmin_45807, tz_45809], **kwargs_45810)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 15), tuple_45805, num2date_call_result_45811)
        # Adding element type (line 822)
        
        # Call to num2date(...): (line 822)
        # Processing the call arguments (line 822)
        # Getting the type of 'dmax' (line 822)
        dmax_45813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 49), 'dmax', False)
        # Getting the type of 'self' (line 822)
        self_45814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 55), 'self', False)
        # Obtaining the member 'tz' of a type (line 822)
        tz_45815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 55), self_45814, 'tz')
        # Processing the call keyword arguments (line 822)
        kwargs_45816 = {}
        # Getting the type of 'num2date' (line 822)
        num2date_45812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 40), 'num2date', False)
        # Calling num2date(args, kwargs) (line 822)
        num2date_call_result_45817 = invoke(stypy.reporting.localization.Localization(__file__, 822, 40), num2date_45812, *[dmax_45813, tz_45815], **kwargs_45816)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 15), tuple_45805, num2date_call_result_45817)
        
        # Assigning a type to the variable 'stypy_return_type' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'stypy_return_type', tuple_45805)
        
        # ################# End of 'datalim_to_dt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'datalim_to_dt' in the type store
        # Getting the type of 'stypy_return_type' (line 814)
        stypy_return_type_45818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45818)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'datalim_to_dt'
        return stypy_return_type_45818


    @norecursion
    def viewlim_to_dt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'viewlim_to_dt'
        module_type_store = module_type_store.open_function_context('viewlim_to_dt', 824, 4, False)
        # Assigning a type to the variable 'self' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_localization', localization)
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_function_name', 'DateLocator.viewlim_to_dt')
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_param_names_list', [])
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateLocator.viewlim_to_dt.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateLocator.viewlim_to_dt', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'viewlim_to_dt', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'viewlim_to_dt(...)' code ##################

        unicode_45819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, (-1)), 'unicode', u'\n        Converts the view interval to datetime objects.\n        ')
        
        # Assigning a Call to a Tuple (line 828):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 828)
        # Processing the call keyword arguments (line 828)
        kwargs_45823 = {}
        # Getting the type of 'self' (line 828)
        self_45820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 828)
        axis_45821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 21), self_45820, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 828)
        get_view_interval_45822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 21), axis_45821, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 828)
        get_view_interval_call_result_45824 = invoke(stypy.reporting.localization.Localization(__file__, 828, 21), get_view_interval_45822, *[], **kwargs_45823)
        
        # Assigning a type to the variable 'call_assignment_44523' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'call_assignment_44523', get_view_interval_call_result_45824)
        
        # Assigning a Call to a Name (line 828):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_45827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 8), 'int')
        # Processing the call keyword arguments
        kwargs_45828 = {}
        # Getting the type of 'call_assignment_44523' (line 828)
        call_assignment_44523_45825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'call_assignment_44523', False)
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___45826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 8), call_assignment_44523_45825, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_45829 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___45826, *[int_45827], **kwargs_45828)
        
        # Assigning a type to the variable 'call_assignment_44524' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'call_assignment_44524', getitem___call_result_45829)
        
        # Assigning a Name to a Name (line 828):
        # Getting the type of 'call_assignment_44524' (line 828)
        call_assignment_44524_45830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'call_assignment_44524')
        # Assigning a type to the variable 'vmin' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'vmin', call_assignment_44524_45830)
        
        # Assigning a Call to a Name (line 828):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_45833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 8), 'int')
        # Processing the call keyword arguments
        kwargs_45834 = {}
        # Getting the type of 'call_assignment_44523' (line 828)
        call_assignment_44523_45831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'call_assignment_44523', False)
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___45832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 8), call_assignment_44523_45831, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_45835 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___45832, *[int_45833], **kwargs_45834)
        
        # Assigning a type to the variable 'call_assignment_44525' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'call_assignment_44525', getitem___call_result_45835)
        
        # Assigning a Name to a Name (line 828):
        # Getting the type of 'call_assignment_44525' (line 828)
        call_assignment_44525_45836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'call_assignment_44525')
        # Assigning a type to the variable 'vmax' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 14), 'vmax', call_assignment_44525_45836)
        
        
        # Getting the type of 'vmin' (line 829)
        vmin_45837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 11), 'vmin')
        # Getting the type of 'vmax' (line 829)
        vmax_45838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 18), 'vmax')
        # Applying the binary operator '>' (line 829)
        result_gt_45839 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 11), '>', vmin_45837, vmax_45838)
        
        # Testing the type of an if condition (line 829)
        if_condition_45840 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 829, 8), result_gt_45839)
        # Assigning a type to the variable 'if_condition_45840' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'if_condition_45840', if_condition_45840)
        # SSA begins for if statement (line 829)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 830):
        
        # Assigning a Name to a Name (line 830):
        # Getting the type of 'vmax' (line 830)
        vmax_45841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_44526' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 12), 'tuple_assignment_44526', vmax_45841)
        
        # Assigning a Name to a Name (line 830):
        # Getting the type of 'vmin' (line 830)
        vmin_45842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_44527' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 12), 'tuple_assignment_44527', vmin_45842)
        
        # Assigning a Name to a Name (line 830):
        # Getting the type of 'tuple_assignment_44526' (line 830)
        tuple_assignment_44526_45843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 12), 'tuple_assignment_44526')
        # Assigning a type to the variable 'vmin' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 12), 'vmin', tuple_assignment_44526_45843)
        
        # Assigning a Name to a Name (line 830):
        # Getting the type of 'tuple_assignment_44527' (line 830)
        tuple_assignment_44527_45844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 12), 'tuple_assignment_44527')
        # Assigning a type to the variable 'vmax' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 18), 'vmax', tuple_assignment_44527_45844)
        # SSA join for if statement (line 829)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 832)
        tuple_45845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 832)
        # Adding element type (line 832)
        
        # Call to num2date(...): (line 832)
        # Processing the call arguments (line 832)
        # Getting the type of 'vmin' (line 832)
        vmin_45847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 24), 'vmin', False)
        # Getting the type of 'self' (line 832)
        self_45848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 30), 'self', False)
        # Obtaining the member 'tz' of a type (line 832)
        tz_45849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 30), self_45848, 'tz')
        # Processing the call keyword arguments (line 832)
        kwargs_45850 = {}
        # Getting the type of 'num2date' (line 832)
        num2date_45846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 15), 'num2date', False)
        # Calling num2date(args, kwargs) (line 832)
        num2date_call_result_45851 = invoke(stypy.reporting.localization.Localization(__file__, 832, 15), num2date_45846, *[vmin_45847, tz_45849], **kwargs_45850)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 832, 15), tuple_45845, num2date_call_result_45851)
        # Adding element type (line 832)
        
        # Call to num2date(...): (line 832)
        # Processing the call arguments (line 832)
        # Getting the type of 'vmax' (line 832)
        vmax_45853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 49), 'vmax', False)
        # Getting the type of 'self' (line 832)
        self_45854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 55), 'self', False)
        # Obtaining the member 'tz' of a type (line 832)
        tz_45855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 55), self_45854, 'tz')
        # Processing the call keyword arguments (line 832)
        kwargs_45856 = {}
        # Getting the type of 'num2date' (line 832)
        num2date_45852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 40), 'num2date', False)
        # Calling num2date(args, kwargs) (line 832)
        num2date_call_result_45857 = invoke(stypy.reporting.localization.Localization(__file__, 832, 40), num2date_45852, *[vmax_45853, tz_45855], **kwargs_45856)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 832, 15), tuple_45845, num2date_call_result_45857)
        
        # Assigning a type to the variable 'stypy_return_type' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 8), 'stypy_return_type', tuple_45845)
        
        # ################# End of 'viewlim_to_dt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'viewlim_to_dt' in the type store
        # Getting the type of 'stypy_return_type' (line 824)
        stypy_return_type_45858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45858)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'viewlim_to_dt'
        return stypy_return_type_45858


    @norecursion
    def _get_unit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_unit'
        module_type_store = module_type_store.open_function_context('_get_unit', 834, 4, False)
        # Assigning a type to the variable 'self' (line 835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateLocator._get_unit.__dict__.__setitem__('stypy_localization', localization)
        DateLocator._get_unit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateLocator._get_unit.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateLocator._get_unit.__dict__.__setitem__('stypy_function_name', 'DateLocator._get_unit')
        DateLocator._get_unit.__dict__.__setitem__('stypy_param_names_list', [])
        DateLocator._get_unit.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateLocator._get_unit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateLocator._get_unit.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateLocator._get_unit.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateLocator._get_unit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateLocator._get_unit.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateLocator._get_unit', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_unit', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_unit(...)' code ##################

        unicode_45859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, (-1)), 'unicode', u'\n        Return how many days a unit of the locator is; used for\n        intelligent autoscaling.\n        ')
        int_45860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 15), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 8), 'stypy_return_type', int_45860)
        
        # ################# End of '_get_unit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_unit' in the type store
        # Getting the type of 'stypy_return_type' (line 834)
        stypy_return_type_45861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45861)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_unit'
        return stypy_return_type_45861


    @norecursion
    def _get_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_interval'
        module_type_store = module_type_store.open_function_context('_get_interval', 841, 4, False)
        # Assigning a type to the variable 'self' (line 842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateLocator._get_interval.__dict__.__setitem__('stypy_localization', localization)
        DateLocator._get_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateLocator._get_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateLocator._get_interval.__dict__.__setitem__('stypy_function_name', 'DateLocator._get_interval')
        DateLocator._get_interval.__dict__.__setitem__('stypy_param_names_list', [])
        DateLocator._get_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateLocator._get_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateLocator._get_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateLocator._get_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateLocator._get_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateLocator._get_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateLocator._get_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_interval(...)' code ##################

        unicode_45862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, (-1)), 'unicode', u'\n        Return the number of units for each tick.\n        ')
        int_45863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 845, 15), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'stypy_return_type', int_45863)
        
        # ################# End of '_get_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 841)
        stypy_return_type_45864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45864)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_interval'
        return stypy_return_type_45864


    @norecursion
    def nonsingular(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'nonsingular'
        module_type_store = module_type_store.open_function_context('nonsingular', 847, 4, False)
        # Assigning a type to the variable 'self' (line 848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DateLocator.nonsingular.__dict__.__setitem__('stypy_localization', localization)
        DateLocator.nonsingular.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DateLocator.nonsingular.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateLocator.nonsingular.__dict__.__setitem__('stypy_function_name', 'DateLocator.nonsingular')
        DateLocator.nonsingular.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        DateLocator.nonsingular.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateLocator.nonsingular.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateLocator.nonsingular.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateLocator.nonsingular.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateLocator.nonsingular.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateLocator.nonsingular.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateLocator.nonsingular', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'nonsingular', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'nonsingular(...)' code ##################

        unicode_45865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, (-1)), 'unicode', u'\n        Given the proposed upper and lower extent, adjust the range\n        if it is too close to being singular (i.e. a range of ~0).\n\n        ')
        
        # Assigning a Call to a Name (line 853):
        
        # Assigning a Call to a Name (line 853):
        
        # Call to _get_unit(...): (line 853)
        # Processing the call keyword arguments (line 853)
        kwargs_45868 = {}
        # Getting the type of 'self' (line 853)
        self_45866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 15), 'self', False)
        # Obtaining the member '_get_unit' of a type (line 853)
        _get_unit_45867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 15), self_45866, '_get_unit')
        # Calling _get_unit(args, kwargs) (line 853)
        _get_unit_call_result_45869 = invoke(stypy.reporting.localization.Localization(__file__, 853, 15), _get_unit_45867, *[], **kwargs_45868)
        
        # Assigning a type to the variable 'unit' (line 853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 8), 'unit', _get_unit_call_result_45869)
        
        # Assigning a Call to a Name (line 854):
        
        # Assigning a Call to a Name (line 854):
        
        # Call to _get_interval(...): (line 854)
        # Processing the call keyword arguments (line 854)
        kwargs_45872 = {}
        # Getting the type of 'self' (line 854)
        self_45870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 19), 'self', False)
        # Obtaining the member '_get_interval' of a type (line 854)
        _get_interval_45871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 19), self_45870, '_get_interval')
        # Calling _get_interval(args, kwargs) (line 854)
        _get_interval_call_result_45873 = invoke(stypy.reporting.localization.Localization(__file__, 854, 19), _get_interval_45871, *[], **kwargs_45872)
        
        # Assigning a type to the variable 'interval' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'interval', _get_interval_call_result_45873)
        
        
        
        # Call to abs(...): (line 855)
        # Processing the call arguments (line 855)
        # Getting the type of 'vmax' (line 855)
        vmax_45875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 15), 'vmax', False)
        # Getting the type of 'vmin' (line 855)
        vmin_45876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 22), 'vmin', False)
        # Applying the binary operator '-' (line 855)
        result_sub_45877 = python_operator(stypy.reporting.localization.Localization(__file__, 855, 15), '-', vmax_45875, vmin_45876)
        
        # Processing the call keyword arguments (line 855)
        kwargs_45878 = {}
        # Getting the type of 'abs' (line 855)
        abs_45874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 11), 'abs', False)
        # Calling abs(args, kwargs) (line 855)
        abs_call_result_45879 = invoke(stypy.reporting.localization.Localization(__file__, 855, 11), abs_45874, *[result_sub_45877], **kwargs_45878)
        
        float_45880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 30), 'float')
        # Applying the binary operator '<' (line 855)
        result_lt_45881 = python_operator(stypy.reporting.localization.Localization(__file__, 855, 11), '<', abs_call_result_45879, float_45880)
        
        # Testing the type of an if condition (line 855)
        if_condition_45882 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 855, 8), result_lt_45881)
        # Assigning a type to the variable 'if_condition_45882' (line 855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 8), 'if_condition_45882', if_condition_45882)
        # SSA begins for if statement (line 855)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'vmin' (line 856)
        vmin_45883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 12), 'vmin')
        int_45884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 20), 'int')
        # Getting the type of 'unit' (line 856)
        unit_45885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 24), 'unit')
        # Applying the binary operator '*' (line 856)
        result_mul_45886 = python_operator(stypy.reporting.localization.Localization(__file__, 856, 20), '*', int_45884, unit_45885)
        
        # Getting the type of 'interval' (line 856)
        interval_45887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 31), 'interval')
        # Applying the binary operator '*' (line 856)
        result_mul_45888 = python_operator(stypy.reporting.localization.Localization(__file__, 856, 29), '*', result_mul_45886, interval_45887)
        
        # Applying the binary operator '-=' (line 856)
        result_isub_45889 = python_operator(stypy.reporting.localization.Localization(__file__, 856, 12), '-=', vmin_45883, result_mul_45888)
        # Assigning a type to the variable 'vmin' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 12), 'vmin', result_isub_45889)
        
        
        # Getting the type of 'vmax' (line 857)
        vmax_45890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 12), 'vmax')
        int_45891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 20), 'int')
        # Getting the type of 'unit' (line 857)
        unit_45892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 24), 'unit')
        # Applying the binary operator '*' (line 857)
        result_mul_45893 = python_operator(stypy.reporting.localization.Localization(__file__, 857, 20), '*', int_45891, unit_45892)
        
        # Getting the type of 'interval' (line 857)
        interval_45894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 31), 'interval')
        # Applying the binary operator '*' (line 857)
        result_mul_45895 = python_operator(stypy.reporting.localization.Localization(__file__, 857, 29), '*', result_mul_45893, interval_45894)
        
        # Applying the binary operator '+=' (line 857)
        result_iadd_45896 = python_operator(stypy.reporting.localization.Localization(__file__, 857, 12), '+=', vmax_45890, result_mul_45895)
        # Assigning a type to the variable 'vmax' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 12), 'vmax', result_iadd_45896)
        
        # SSA join for if statement (line 855)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 858)
        tuple_45897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 858)
        # Adding element type (line 858)
        # Getting the type of 'vmin' (line 858)
        vmin_45898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 15), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 858, 15), tuple_45897, vmin_45898)
        # Adding element type (line 858)
        # Getting the type of 'vmax' (line 858)
        vmax_45899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 21), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 858, 15), tuple_45897, vmax_45899)
        
        # Assigning a type to the variable 'stypy_return_type' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 8), 'stypy_return_type', tuple_45897)
        
        # ################# End of 'nonsingular(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'nonsingular' in the type store
        # Getting the type of 'stypy_return_type' (line 847)
        stypy_return_type_45900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45900)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'nonsingular'
        return stypy_return_type_45900


# Assigning a type to the variable 'DateLocator' (line 794)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 0), 'DateLocator', DateLocator)

# Assigning a Dict to a Name (line 798):

# Obtaining an instance of the builtin type 'dict' (line 798)
dict_45901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 12), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 798)
# Adding element type (key, value) (line 798)
unicode_45902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 13), 'unicode', u'byhour')
int_45903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 23), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 798, 12), dict_45901, (unicode_45902, int_45903))
# Adding element type (key, value) (line 798)
unicode_45904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 26), 'unicode', u'byminute')
int_45905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 38), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 798, 12), dict_45901, (unicode_45904, int_45905))
# Adding element type (key, value) (line 798)
unicode_45906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 41), 'unicode', u'bysecond')
int_45907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 53), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 798, 12), dict_45901, (unicode_45906, int_45907))

# Getting the type of 'DateLocator'
DateLocator_45908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'DateLocator')
# Setting the type of the member 'hms0d' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), DateLocator_45908, 'hms0d', dict_45901)
# Declaration of the 'RRuleLocator' class
# Getting the type of 'DateLocator' (line 861)
DateLocator_45909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 19), 'DateLocator')

class RRuleLocator(DateLocator_45909, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 864)
        None_45910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 29), 'None')
        defaults = [None_45910]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 864, 4, False)
        # Assigning a type to the variable 'self' (line 865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 865, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RRuleLocator.__init__', ['o', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['o', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 865)
        # Processing the call arguments (line 865)
        # Getting the type of 'self' (line 865)
        self_45913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 29), 'self', False)
        # Getting the type of 'tz' (line 865)
        tz_45914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 35), 'tz', False)
        # Processing the call keyword arguments (line 865)
        kwargs_45915 = {}
        # Getting the type of 'DateLocator' (line 865)
        DateLocator_45911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 8), 'DateLocator', False)
        # Obtaining the member '__init__' of a type (line 865)
        init___45912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 8), DateLocator_45911, '__init__')
        # Calling __init__(args, kwargs) (line 865)
        init___call_result_45916 = invoke(stypy.reporting.localization.Localization(__file__, 865, 8), init___45912, *[self_45913, tz_45914], **kwargs_45915)
        
        
        # Assigning a Name to a Attribute (line 866):
        
        # Assigning a Name to a Attribute (line 866):
        # Getting the type of 'o' (line 866)
        o_45917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 20), 'o')
        # Getting the type of 'self' (line 866)
        self_45918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 8), 'self')
        # Setting the type of the member 'rule' of a type (line 866)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 8), self_45918, 'rule', o_45917)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 868, 4, False)
        # Assigning a type to the variable 'self' (line 869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RRuleLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        RRuleLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RRuleLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        RRuleLocator.__call__.__dict__.__setitem__('stypy_function_name', 'RRuleLocator.__call__')
        RRuleLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        RRuleLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        RRuleLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RRuleLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        RRuleLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        RRuleLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RRuleLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RRuleLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # SSA begins for try-except statement (line 870)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Tuple (line 871):
        
        # Assigning a Call to a Name:
        
        # Call to viewlim_to_dt(...): (line 871)
        # Processing the call keyword arguments (line 871)
        kwargs_45921 = {}
        # Getting the type of 'self' (line 871)
        self_45919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 25), 'self', False)
        # Obtaining the member 'viewlim_to_dt' of a type (line 871)
        viewlim_to_dt_45920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 25), self_45919, 'viewlim_to_dt')
        # Calling viewlim_to_dt(args, kwargs) (line 871)
        viewlim_to_dt_call_result_45922 = invoke(stypy.reporting.localization.Localization(__file__, 871, 25), viewlim_to_dt_45920, *[], **kwargs_45921)
        
        # Assigning a type to the variable 'call_assignment_44528' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'call_assignment_44528', viewlim_to_dt_call_result_45922)
        
        # Assigning a Call to a Name (line 871):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_45925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 12), 'int')
        # Processing the call keyword arguments
        kwargs_45926 = {}
        # Getting the type of 'call_assignment_44528' (line 871)
        call_assignment_44528_45923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'call_assignment_44528', False)
        # Obtaining the member '__getitem__' of a type (line 871)
        getitem___45924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 12), call_assignment_44528_45923, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_45927 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___45924, *[int_45925], **kwargs_45926)
        
        # Assigning a type to the variable 'call_assignment_44529' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'call_assignment_44529', getitem___call_result_45927)
        
        # Assigning a Name to a Name (line 871):
        # Getting the type of 'call_assignment_44529' (line 871)
        call_assignment_44529_45928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'call_assignment_44529')
        # Assigning a type to the variable 'dmin' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'dmin', call_assignment_44529_45928)
        
        # Assigning a Call to a Name (line 871):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_45931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 12), 'int')
        # Processing the call keyword arguments
        kwargs_45932 = {}
        # Getting the type of 'call_assignment_44528' (line 871)
        call_assignment_44528_45929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'call_assignment_44528', False)
        # Obtaining the member '__getitem__' of a type (line 871)
        getitem___45930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 12), call_assignment_44528_45929, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_45933 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___45930, *[int_45931], **kwargs_45932)
        
        # Assigning a type to the variable 'call_assignment_44530' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'call_assignment_44530', getitem___call_result_45933)
        
        # Assigning a Name to a Name (line 871):
        # Getting the type of 'call_assignment_44530' (line 871)
        call_assignment_44530_45934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'call_assignment_44530')
        # Assigning a type to the variable 'dmax' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 18), 'dmax', call_assignment_44530_45934)
        # SSA branch for the except part of a try statement (line 870)
        # SSA branch for the except 'ValueError' branch of a try statement (line 870)
        module_type_store.open_ssa_branch('except')
        
        # Obtaining an instance of the builtin type 'list' (line 873)
        list_45935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 873, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 873)
        
        # Assigning a type to the variable 'stypy_return_type' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 12), 'stypy_return_type', list_45935)
        # SSA join for try-except statement (line 870)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to tick_values(...): (line 875)
        # Processing the call arguments (line 875)
        # Getting the type of 'dmin' (line 875)
        dmin_45938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 32), 'dmin', False)
        # Getting the type of 'dmax' (line 875)
        dmax_45939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 38), 'dmax', False)
        # Processing the call keyword arguments (line 875)
        kwargs_45940 = {}
        # Getting the type of 'self' (line 875)
        self_45936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 875)
        tick_values_45937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 15), self_45936, 'tick_values')
        # Calling tick_values(args, kwargs) (line 875)
        tick_values_call_result_45941 = invoke(stypy.reporting.localization.Localization(__file__, 875, 15), tick_values_45937, *[dmin_45938, dmax_45939], **kwargs_45940)
        
        # Assigning a type to the variable 'stypy_return_type' (line 875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'stypy_return_type', tick_values_call_result_45941)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 868)
        stypy_return_type_45942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_45942)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_45942


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 877, 4, False)
        # Assigning a type to the variable 'self' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'RRuleLocator.tick_values')
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RRuleLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RRuleLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        # Assigning a Call to a Name (line 878):
        
        # Assigning a Call to a Name (line 878):
        
        # Call to relativedelta(...): (line 878)
        # Processing the call arguments (line 878)
        # Getting the type of 'vmax' (line 878)
        vmax_45944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 30), 'vmax', False)
        # Getting the type of 'vmin' (line 878)
        vmin_45945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 36), 'vmin', False)
        # Processing the call keyword arguments (line 878)
        kwargs_45946 = {}
        # Getting the type of 'relativedelta' (line 878)
        relativedelta_45943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 16), 'relativedelta', False)
        # Calling relativedelta(args, kwargs) (line 878)
        relativedelta_call_result_45947 = invoke(stypy.reporting.localization.Localization(__file__, 878, 16), relativedelta_45943, *[vmax_45944, vmin_45945], **kwargs_45946)
        
        # Assigning a type to the variable 'delta' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 8), 'delta', relativedelta_call_result_45947)
        
        
        # SSA begins for try-except statement (line 881)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a BinOp to a Name (line 882):
        
        # Assigning a BinOp to a Name (line 882):
        # Getting the type of 'vmin' (line 882)
        vmin_45948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 20), 'vmin')
        # Getting the type of 'delta' (line 882)
        delta_45949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 27), 'delta')
        # Applying the binary operator '-' (line 882)
        result_sub_45950 = python_operator(stypy.reporting.localization.Localization(__file__, 882, 20), '-', vmin_45948, delta_45949)
        
        # Assigning a type to the variable 'start' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 12), 'start', result_sub_45950)
        # SSA branch for the except part of a try statement (line 881)
        # SSA branch for the except 'Tuple' branch of a try statement (line 881)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 884):
        
        # Assigning a Call to a Name (line 884):
        
        # Call to _from_ordinalf(...): (line 884)
        # Processing the call arguments (line 884)
        float_45952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 35), 'float')
        # Processing the call keyword arguments (line 884)
        kwargs_45953 = {}
        # Getting the type of '_from_ordinalf' (line 884)
        _from_ordinalf_45951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 20), '_from_ordinalf', False)
        # Calling _from_ordinalf(args, kwargs) (line 884)
        _from_ordinalf_call_result_45954 = invoke(stypy.reporting.localization.Localization(__file__, 884, 20), _from_ordinalf_45951, *[float_45952], **kwargs_45953)
        
        # Assigning a type to the variable 'start' (line 884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 12), 'start', _from_ordinalf_call_result_45954)
        # SSA join for try-except statement (line 881)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 886)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a BinOp to a Name (line 887):
        
        # Assigning a BinOp to a Name (line 887):
        # Getting the type of 'vmax' (line 887)
        vmax_45955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 19), 'vmax')
        # Getting the type of 'delta' (line 887)
        delta_45956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 26), 'delta')
        # Applying the binary operator '+' (line 887)
        result_add_45957 = python_operator(stypy.reporting.localization.Localization(__file__, 887, 19), '+', vmax_45955, delta_45956)
        
        # Assigning a type to the variable 'stop' (line 887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 12), 'stop', result_add_45957)
        # SSA branch for the except part of a try statement (line 886)
        # SSA branch for the except 'Tuple' branch of a try statement (line 886)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 890):
        
        # Assigning a Call to a Name (line 890):
        
        # Call to _from_ordinalf(...): (line 890)
        # Processing the call arguments (line 890)
        float_45959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 890, 34), 'float')
        # Processing the call keyword arguments (line 890)
        kwargs_45960 = {}
        # Getting the type of '_from_ordinalf' (line 890)
        _from_ordinalf_45958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 19), '_from_ordinalf', False)
        # Calling _from_ordinalf(args, kwargs) (line 890)
        _from_ordinalf_call_result_45961 = invoke(stypy.reporting.localization.Localization(__file__, 890, 19), _from_ordinalf_45958, *[float_45959], **kwargs_45960)
        
        # Assigning a type to the variable 'stop' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 12), 'stop', _from_ordinalf_call_result_45961)
        # SSA join for try-except statement (line 886)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set(...): (line 892)
        # Processing the call keyword arguments (line 892)
        # Getting the type of 'start' (line 892)
        start_45965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 30), 'start', False)
        keyword_45966 = start_45965
        # Getting the type of 'stop' (line 892)
        stop_45967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 43), 'stop', False)
        keyword_45968 = stop_45967
        kwargs_45969 = {'dtstart': keyword_45966, 'until': keyword_45968}
        # Getting the type of 'self' (line 892)
        self_45962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'self', False)
        # Obtaining the member 'rule' of a type (line 892)
        rule_45963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 8), self_45962, 'rule')
        # Obtaining the member 'set' of a type (line 892)
        set_45964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 8), rule_45963, 'set')
        # Calling set(args, kwargs) (line 892)
        set_call_result_45970 = invoke(stypy.reporting.localization.Localization(__file__, 892, 8), set_45964, *[], **kwargs_45969)
        
        
        # Assigning a Call to a Name (line 894):
        
        # Assigning a Call to a Name (line 894):
        
        # Call to between(...): (line 894)
        # Processing the call arguments (line 894)
        # Getting the type of 'vmin' (line 894)
        vmin_45974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 34), 'vmin', False)
        # Getting the type of 'vmax' (line 894)
        vmax_45975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 40), 'vmax', False)
        # Getting the type of 'True' (line 894)
        True_45976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 46), 'True', False)
        # Processing the call keyword arguments (line 894)
        kwargs_45977 = {}
        # Getting the type of 'self' (line 894)
        self_45971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 16), 'self', False)
        # Obtaining the member 'rule' of a type (line 894)
        rule_45972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 16), self_45971, 'rule')
        # Obtaining the member 'between' of a type (line 894)
        between_45973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 16), rule_45972, 'between')
        # Calling between(args, kwargs) (line 894)
        between_call_result_45978 = invoke(stypy.reporting.localization.Localization(__file__, 894, 16), between_45973, *[vmin_45974, vmax_45975, True_45976], **kwargs_45977)
        
        # Assigning a type to the variable 'dates' (line 894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'dates', between_call_result_45978)
        
        
        
        # Call to len(...): (line 895)
        # Processing the call arguments (line 895)
        # Getting the type of 'dates' (line 895)
        dates_45980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 15), 'dates', False)
        # Processing the call keyword arguments (line 895)
        kwargs_45981 = {}
        # Getting the type of 'len' (line 895)
        len_45979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 11), 'len', False)
        # Calling len(args, kwargs) (line 895)
        len_call_result_45982 = invoke(stypy.reporting.localization.Localization(__file__, 895, 11), len_45979, *[dates_45980], **kwargs_45981)
        
        int_45983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 25), 'int')
        # Applying the binary operator '==' (line 895)
        result_eq_45984 = python_operator(stypy.reporting.localization.Localization(__file__, 895, 11), '==', len_call_result_45982, int_45983)
        
        # Testing the type of an if condition (line 895)
        if_condition_45985 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 895, 8), result_eq_45984)
        # Assigning a type to the variable 'if_condition_45985' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 8), 'if_condition_45985', if_condition_45985)
        # SSA begins for if statement (line 895)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to date2num(...): (line 896)
        # Processing the call arguments (line 896)
        
        # Obtaining an instance of the builtin type 'list' (line 896)
        list_45987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 896)
        # Adding element type (line 896)
        # Getting the type of 'vmin' (line 896)
        vmin_45988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 29), 'vmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 28), list_45987, vmin_45988)
        # Adding element type (line 896)
        # Getting the type of 'vmax' (line 896)
        vmax_45989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 35), 'vmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 28), list_45987, vmax_45989)
        
        # Processing the call keyword arguments (line 896)
        kwargs_45990 = {}
        # Getting the type of 'date2num' (line 896)
        date2num_45986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 19), 'date2num', False)
        # Calling date2num(args, kwargs) (line 896)
        date2num_call_result_45991 = invoke(stypy.reporting.localization.Localization(__file__, 896, 19), date2num_45986, *[list_45987], **kwargs_45990)
        
        # Assigning a type to the variable 'stypy_return_type' (line 896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 12), 'stypy_return_type', date2num_call_result_45991)
        # SSA join for if statement (line 895)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to raise_if_exceeds(...): (line 897)
        # Processing the call arguments (line 897)
        
        # Call to date2num(...): (line 897)
        # Processing the call arguments (line 897)
        # Getting the type of 'dates' (line 897)
        dates_45995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 46), 'dates', False)
        # Processing the call keyword arguments (line 897)
        kwargs_45996 = {}
        # Getting the type of 'date2num' (line 897)
        date2num_45994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 37), 'date2num', False)
        # Calling date2num(args, kwargs) (line 897)
        date2num_call_result_45997 = invoke(stypy.reporting.localization.Localization(__file__, 897, 37), date2num_45994, *[dates_45995], **kwargs_45996)
        
        # Processing the call keyword arguments (line 897)
        kwargs_45998 = {}
        # Getting the type of 'self' (line 897)
        self_45992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 897)
        raise_if_exceeds_45993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 15), self_45992, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 897)
        raise_if_exceeds_call_result_45999 = invoke(stypy.reporting.localization.Localization(__file__, 897, 15), raise_if_exceeds_45993, *[date2num_call_result_45997], **kwargs_45998)
        
        # Assigning a type to the variable 'stypy_return_type' (line 897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 8), 'stypy_return_type', raise_if_exceeds_call_result_45999)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 877)
        stypy_return_type_46000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46000)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_46000


    @norecursion
    def _get_unit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_unit'
        module_type_store = module_type_store.open_function_context('_get_unit', 899, 4, False)
        # Assigning a type to the variable 'self' (line 900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_localization', localization)
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_type_store', module_type_store)
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_function_name', 'RRuleLocator._get_unit')
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_param_names_list', [])
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_varargs_param_name', None)
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_call_defaults', defaults)
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_call_varargs', varargs)
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RRuleLocator._get_unit.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RRuleLocator._get_unit', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_unit', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_unit(...)' code ##################

        unicode_46001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, (-1)), 'unicode', u'\n        Return how many days a unit of the locator is; used for\n        intelligent autoscaling.\n        ')
        
        # Assigning a Attribute to a Name (line 904):
        
        # Assigning a Attribute to a Name (line 904):
        # Getting the type of 'self' (line 904)
        self_46002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 15), 'self')
        # Obtaining the member 'rule' of a type (line 904)
        rule_46003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 15), self_46002, 'rule')
        # Obtaining the member '_rrule' of a type (line 904)
        _rrule_46004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 15), rule_46003, '_rrule')
        # Obtaining the member '_freq' of a type (line 904)
        _freq_46005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 15), _rrule_46004, '_freq')
        # Assigning a type to the variable 'freq' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 8), 'freq', _freq_46005)
        
        # Call to get_unit_generic(...): (line 905)
        # Processing the call arguments (line 905)
        # Getting the type of 'freq' (line 905)
        freq_46008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 37), 'freq', False)
        # Processing the call keyword arguments (line 905)
        kwargs_46009 = {}
        # Getting the type of 'self' (line 905)
        self_46006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 15), 'self', False)
        # Obtaining the member 'get_unit_generic' of a type (line 905)
        get_unit_generic_46007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 15), self_46006, 'get_unit_generic')
        # Calling get_unit_generic(args, kwargs) (line 905)
        get_unit_generic_call_result_46010 = invoke(stypy.reporting.localization.Localization(__file__, 905, 15), get_unit_generic_46007, *[freq_46008], **kwargs_46009)
        
        # Assigning a type to the variable 'stypy_return_type' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'stypy_return_type', get_unit_generic_call_result_46010)
        
        # ################# End of '_get_unit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_unit' in the type store
        # Getting the type of 'stypy_return_type' (line 899)
        stypy_return_type_46011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46011)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_unit'
        return stypy_return_type_46011


    @staticmethod
    @norecursion
    def get_unit_generic(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_unit_generic'
        module_type_store = module_type_store.open_function_context('get_unit_generic', 907, 4, False)
        
        # Passed parameters checking function
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_localization', localization)
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_type_of_self', None)
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_type_store', module_type_store)
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_function_name', 'get_unit_generic')
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_param_names_list', ['freq'])
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_varargs_param_name', None)
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_call_defaults', defaults)
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_call_varargs', varargs)
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RRuleLocator.get_unit_generic.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, 'get_unit_generic', ['freq'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_unit_generic', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_unit_generic(...)' code ##################

        
        
        # Getting the type of 'freq' (line 909)
        freq_46012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 11), 'freq')
        # Getting the type of 'YEARLY' (line 909)
        YEARLY_46013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 19), 'YEARLY')
        # Applying the binary operator '==' (line 909)
        result_eq_46014 = python_operator(stypy.reporting.localization.Localization(__file__, 909, 11), '==', freq_46012, YEARLY_46013)
        
        # Testing the type of an if condition (line 909)
        if_condition_46015 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 909, 8), result_eq_46014)
        # Assigning a type to the variable 'if_condition_46015' (line 909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 8), 'if_condition_46015', if_condition_46015)
        # SSA begins for if statement (line 909)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'DAYS_PER_YEAR' (line 910)
        DAYS_PER_YEAR_46016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 19), 'DAYS_PER_YEAR')
        # Assigning a type to the variable 'stypy_return_type' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 12), 'stypy_return_type', DAYS_PER_YEAR_46016)
        # SSA branch for the else part of an if statement (line 909)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 911)
        freq_46017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 13), 'freq')
        # Getting the type of 'MONTHLY' (line 911)
        MONTHLY_46018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 21), 'MONTHLY')
        # Applying the binary operator '==' (line 911)
        result_eq_46019 = python_operator(stypy.reporting.localization.Localization(__file__, 911, 13), '==', freq_46017, MONTHLY_46018)
        
        # Testing the type of an if condition (line 911)
        if_condition_46020 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 911, 13), result_eq_46019)
        # Assigning a type to the variable 'if_condition_46020' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 13), 'if_condition_46020', if_condition_46020)
        # SSA begins for if statement (line 911)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'DAYS_PER_MONTH' (line 912)
        DAYS_PER_MONTH_46021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 19), 'DAYS_PER_MONTH')
        # Assigning a type to the variable 'stypy_return_type' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'stypy_return_type', DAYS_PER_MONTH_46021)
        # SSA branch for the else part of an if statement (line 911)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 913)
        freq_46022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 13), 'freq')
        # Getting the type of 'WEEKLY' (line 913)
        WEEKLY_46023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 21), 'WEEKLY')
        # Applying the binary operator '==' (line 913)
        result_eq_46024 = python_operator(stypy.reporting.localization.Localization(__file__, 913, 13), '==', freq_46022, WEEKLY_46023)
        
        # Testing the type of an if condition (line 913)
        if_condition_46025 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 913, 13), result_eq_46024)
        # Assigning a type to the variable 'if_condition_46025' (line 913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 13), 'if_condition_46025', if_condition_46025)
        # SSA begins for if statement (line 913)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'DAYS_PER_WEEK' (line 914)
        DAYS_PER_WEEK_46026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 19), 'DAYS_PER_WEEK')
        # Assigning a type to the variable 'stypy_return_type' (line 914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 12), 'stypy_return_type', DAYS_PER_WEEK_46026)
        # SSA branch for the else part of an if statement (line 913)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 915)
        freq_46027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 13), 'freq')
        # Getting the type of 'DAILY' (line 915)
        DAILY_46028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 21), 'DAILY')
        # Applying the binary operator '==' (line 915)
        result_eq_46029 = python_operator(stypy.reporting.localization.Localization(__file__, 915, 13), '==', freq_46027, DAILY_46028)
        
        # Testing the type of an if condition (line 915)
        if_condition_46030 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 915, 13), result_eq_46029)
        # Assigning a type to the variable 'if_condition_46030' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 13), 'if_condition_46030', if_condition_46030)
        # SSA begins for if statement (line 915)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        float_46031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 19), 'float')
        # Assigning a type to the variable 'stypy_return_type' (line 916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 12), 'stypy_return_type', float_46031)
        # SSA branch for the else part of an if statement (line 915)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 917)
        freq_46032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 13), 'freq')
        # Getting the type of 'HOURLY' (line 917)
        HOURLY_46033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 21), 'HOURLY')
        # Applying the binary operator '==' (line 917)
        result_eq_46034 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 13), '==', freq_46032, HOURLY_46033)
        
        # Testing the type of an if condition (line 917)
        if_condition_46035 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 917, 13), result_eq_46034)
        # Assigning a type to the variable 'if_condition_46035' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 13), 'if_condition_46035', if_condition_46035)
        # SSA begins for if statement (line 917)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        float_46036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 19), 'float')
        # Getting the type of 'HOURS_PER_DAY' (line 918)
        HOURS_PER_DAY_46037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 25), 'HOURS_PER_DAY')
        # Applying the binary operator 'div' (line 918)
        result_div_46038 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 19), 'div', float_46036, HOURS_PER_DAY_46037)
        
        # Assigning a type to the variable 'stypy_return_type' (line 918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 12), 'stypy_return_type', result_div_46038)
        # SSA branch for the else part of an if statement (line 917)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 919)
        freq_46039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 13), 'freq')
        # Getting the type of 'MINUTELY' (line 919)
        MINUTELY_46040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 21), 'MINUTELY')
        # Applying the binary operator '==' (line 919)
        result_eq_46041 = python_operator(stypy.reporting.localization.Localization(__file__, 919, 13), '==', freq_46039, MINUTELY_46040)
        
        # Testing the type of an if condition (line 919)
        if_condition_46042 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 919, 13), result_eq_46041)
        # Assigning a type to the variable 'if_condition_46042' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 13), 'if_condition_46042', if_condition_46042)
        # SSA begins for if statement (line 919)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        float_46043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 19), 'float')
        # Getting the type of 'MINUTES_PER_DAY' (line 920)
        MINUTES_PER_DAY_46044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 25), 'MINUTES_PER_DAY')
        # Applying the binary operator 'div' (line 920)
        result_div_46045 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 19), 'div', float_46043, MINUTES_PER_DAY_46044)
        
        # Assigning a type to the variable 'stypy_return_type' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 12), 'stypy_return_type', result_div_46045)
        # SSA branch for the else part of an if statement (line 919)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 921)
        freq_46046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 13), 'freq')
        # Getting the type of 'SECONDLY' (line 921)
        SECONDLY_46047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 21), 'SECONDLY')
        # Applying the binary operator '==' (line 921)
        result_eq_46048 = python_operator(stypy.reporting.localization.Localization(__file__, 921, 13), '==', freq_46046, SECONDLY_46047)
        
        # Testing the type of an if condition (line 921)
        if_condition_46049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 921, 13), result_eq_46048)
        # Assigning a type to the variable 'if_condition_46049' (line 921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 13), 'if_condition_46049', if_condition_46049)
        # SSA begins for if statement (line 921)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        float_46050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 19), 'float')
        # Getting the type of 'SEC_PER_DAY' (line 922)
        SEC_PER_DAY_46051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 25), 'SEC_PER_DAY')
        # Applying the binary operator 'div' (line 922)
        result_div_46052 = python_operator(stypy.reporting.localization.Localization(__file__, 922, 19), 'div', float_46050, SEC_PER_DAY_46051)
        
        # Assigning a type to the variable 'stypy_return_type' (line 922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 12), 'stypy_return_type', result_div_46052)
        # SSA branch for the else part of an if statement (line 921)
        module_type_store.open_ssa_branch('else')
        int_46053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 19), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 12), 'stypy_return_type', int_46053)
        # SSA join for if statement (line 921)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 919)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 917)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 915)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 913)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 911)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 909)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_unit_generic(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_unit_generic' in the type store
        # Getting the type of 'stypy_return_type' (line 907)
        stypy_return_type_46054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46054)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_unit_generic'
        return stypy_return_type_46054


    @norecursion
    def _get_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_interval'
        module_type_store = module_type_store.open_function_context('_get_interval', 927, 4, False)
        # Assigning a type to the variable 'self' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_localization', localization)
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_function_name', 'RRuleLocator._get_interval')
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_param_names_list', [])
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RRuleLocator._get_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RRuleLocator._get_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_interval(...)' code ##################

        # Getting the type of 'self' (line 928)
        self_46055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 15), 'self')
        # Obtaining the member 'rule' of a type (line 928)
        rule_46056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 15), self_46055, 'rule')
        # Obtaining the member '_rrule' of a type (line 928)
        _rrule_46057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 15), rule_46056, '_rrule')
        # Obtaining the member '_interval' of a type (line 928)
        _interval_46058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 15), _rrule_46057, '_interval')
        # Assigning a type to the variable 'stypy_return_type' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 8), 'stypy_return_type', _interval_46058)
        
        # ################# End of '_get_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 927)
        stypy_return_type_46059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46059)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_interval'
        return stypy_return_type_46059


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 930, 4, False)
        # Assigning a type to the variable 'self' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_localization', localization)
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_function_name', 'RRuleLocator.autoscale')
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_param_names_list', [])
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RRuleLocator.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RRuleLocator.autoscale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        unicode_46060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, (-1)), 'unicode', u'\n        Set the view limits to include the data range.\n        ')
        
        # Assigning a Call to a Tuple (line 934):
        
        # Assigning a Call to a Name:
        
        # Call to datalim_to_dt(...): (line 934)
        # Processing the call keyword arguments (line 934)
        kwargs_46063 = {}
        # Getting the type of 'self' (line 934)
        self_46061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 21), 'self', False)
        # Obtaining the member 'datalim_to_dt' of a type (line 934)
        datalim_to_dt_46062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 21), self_46061, 'datalim_to_dt')
        # Calling datalim_to_dt(args, kwargs) (line 934)
        datalim_to_dt_call_result_46064 = invoke(stypy.reporting.localization.Localization(__file__, 934, 21), datalim_to_dt_46062, *[], **kwargs_46063)
        
        # Assigning a type to the variable 'call_assignment_44531' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'call_assignment_44531', datalim_to_dt_call_result_46064)
        
        # Assigning a Call to a Name (line 934):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 8), 'int')
        # Processing the call keyword arguments
        kwargs_46068 = {}
        # Getting the type of 'call_assignment_44531' (line 934)
        call_assignment_44531_46065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'call_assignment_44531', False)
        # Obtaining the member '__getitem__' of a type (line 934)
        getitem___46066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 8), call_assignment_44531_46065, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46069 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46066, *[int_46067], **kwargs_46068)
        
        # Assigning a type to the variable 'call_assignment_44532' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'call_assignment_44532', getitem___call_result_46069)
        
        # Assigning a Name to a Name (line 934):
        # Getting the type of 'call_assignment_44532' (line 934)
        call_assignment_44532_46070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'call_assignment_44532')
        # Assigning a type to the variable 'dmin' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'dmin', call_assignment_44532_46070)
        
        # Assigning a Call to a Name (line 934):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 8), 'int')
        # Processing the call keyword arguments
        kwargs_46074 = {}
        # Getting the type of 'call_assignment_44531' (line 934)
        call_assignment_44531_46071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'call_assignment_44531', False)
        # Obtaining the member '__getitem__' of a type (line 934)
        getitem___46072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 8), call_assignment_44531_46071, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46075 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46072, *[int_46073], **kwargs_46074)
        
        # Assigning a type to the variable 'call_assignment_44533' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'call_assignment_44533', getitem___call_result_46075)
        
        # Assigning a Name to a Name (line 934):
        # Getting the type of 'call_assignment_44533' (line 934)
        call_assignment_44533_46076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'call_assignment_44533')
        # Assigning a type to the variable 'dmax' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 14), 'dmax', call_assignment_44533_46076)
        
        # Assigning a Call to a Name (line 935):
        
        # Assigning a Call to a Name (line 935):
        
        # Call to relativedelta(...): (line 935)
        # Processing the call arguments (line 935)
        # Getting the type of 'dmax' (line 935)
        dmax_46078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 30), 'dmax', False)
        # Getting the type of 'dmin' (line 935)
        dmin_46079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 36), 'dmin', False)
        # Processing the call keyword arguments (line 935)
        kwargs_46080 = {}
        # Getting the type of 'relativedelta' (line 935)
        relativedelta_46077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 16), 'relativedelta', False)
        # Calling relativedelta(args, kwargs) (line 935)
        relativedelta_call_result_46081 = invoke(stypy.reporting.localization.Localization(__file__, 935, 16), relativedelta_46077, *[dmax_46078, dmin_46079], **kwargs_46080)
        
        # Assigning a type to the variable 'delta' (line 935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 8), 'delta', relativedelta_call_result_46081)
        
        
        # SSA begins for try-except statement (line 938)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a BinOp to a Name (line 939):
        
        # Assigning a BinOp to a Name (line 939):
        # Getting the type of 'dmin' (line 939)
        dmin_46082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 20), 'dmin')
        # Getting the type of 'delta' (line 939)
        delta_46083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 27), 'delta')
        # Applying the binary operator '-' (line 939)
        result_sub_46084 = python_operator(stypy.reporting.localization.Localization(__file__, 939, 20), '-', dmin_46082, delta_46083)
        
        # Assigning a type to the variable 'start' (line 939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 12), 'start', result_sub_46084)
        # SSA branch for the except part of a try statement (line 938)
        # SSA branch for the except 'ValueError' branch of a try statement (line 938)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 941):
        
        # Assigning a Call to a Name (line 941):
        
        # Call to _from_ordinalf(...): (line 941)
        # Processing the call arguments (line 941)
        float_46086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 35), 'float')
        # Processing the call keyword arguments (line 941)
        kwargs_46087 = {}
        # Getting the type of '_from_ordinalf' (line 941)
        _from_ordinalf_46085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 20), '_from_ordinalf', False)
        # Calling _from_ordinalf(args, kwargs) (line 941)
        _from_ordinalf_call_result_46088 = invoke(stypy.reporting.localization.Localization(__file__, 941, 20), _from_ordinalf_46085, *[float_46086], **kwargs_46087)
        
        # Assigning a type to the variable 'start' (line 941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 12), 'start', _from_ordinalf_call_result_46088)
        # SSA join for try-except statement (line 938)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 943)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a BinOp to a Name (line 944):
        
        # Assigning a BinOp to a Name (line 944):
        # Getting the type of 'dmax' (line 944)
        dmax_46089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 19), 'dmax')
        # Getting the type of 'delta' (line 944)
        delta_46090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 26), 'delta')
        # Applying the binary operator '+' (line 944)
        result_add_46091 = python_operator(stypy.reporting.localization.Localization(__file__, 944, 19), '+', dmax_46089, delta_46090)
        
        # Assigning a type to the variable 'stop' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 12), 'stop', result_add_46091)
        # SSA branch for the except part of a try statement (line 943)
        # SSA branch for the except 'ValueError' branch of a try statement (line 943)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 947):
        
        # Assigning a Call to a Name (line 947):
        
        # Call to _from_ordinalf(...): (line 947)
        # Processing the call arguments (line 947)
        float_46093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 34), 'float')
        # Processing the call keyword arguments (line 947)
        kwargs_46094 = {}
        # Getting the type of '_from_ordinalf' (line 947)
        _from_ordinalf_46092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 19), '_from_ordinalf', False)
        # Calling _from_ordinalf(args, kwargs) (line 947)
        _from_ordinalf_call_result_46095 = invoke(stypy.reporting.localization.Localization(__file__, 947, 19), _from_ordinalf_46092, *[float_46093], **kwargs_46094)
        
        # Assigning a type to the variable 'stop' (line 947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 12), 'stop', _from_ordinalf_call_result_46095)
        # SSA join for try-except statement (line 943)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set(...): (line 949)
        # Processing the call keyword arguments (line 949)
        # Getting the type of 'start' (line 949)
        start_46099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 30), 'start', False)
        keyword_46100 = start_46099
        # Getting the type of 'stop' (line 949)
        stop_46101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 43), 'stop', False)
        keyword_46102 = stop_46101
        kwargs_46103 = {'dtstart': keyword_46100, 'until': keyword_46102}
        # Getting the type of 'self' (line 949)
        self_46096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 8), 'self', False)
        # Obtaining the member 'rule' of a type (line 949)
        rule_46097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 8), self_46096, 'rule')
        # Obtaining the member 'set' of a type (line 949)
        set_46098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 8), rule_46097, 'set')
        # Calling set(args, kwargs) (line 949)
        set_call_result_46104 = invoke(stypy.reporting.localization.Localization(__file__, 949, 8), set_46098, *[], **kwargs_46103)
        
        
        # Assigning a Call to a Tuple (line 950):
        
        # Assigning a Call to a Name:
        
        # Call to datalim_to_dt(...): (line 950)
        # Processing the call keyword arguments (line 950)
        kwargs_46107 = {}
        # Getting the type of 'self' (line 950)
        self_46105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 21), 'self', False)
        # Obtaining the member 'datalim_to_dt' of a type (line 950)
        datalim_to_dt_46106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 21), self_46105, 'datalim_to_dt')
        # Calling datalim_to_dt(args, kwargs) (line 950)
        datalim_to_dt_call_result_46108 = invoke(stypy.reporting.localization.Localization(__file__, 950, 21), datalim_to_dt_46106, *[], **kwargs_46107)
        
        # Assigning a type to the variable 'call_assignment_44534' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'call_assignment_44534', datalim_to_dt_call_result_46108)
        
        # Assigning a Call to a Name (line 950):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 8), 'int')
        # Processing the call keyword arguments
        kwargs_46112 = {}
        # Getting the type of 'call_assignment_44534' (line 950)
        call_assignment_44534_46109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'call_assignment_44534', False)
        # Obtaining the member '__getitem__' of a type (line 950)
        getitem___46110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 8), call_assignment_44534_46109, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46113 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46110, *[int_46111], **kwargs_46112)
        
        # Assigning a type to the variable 'call_assignment_44535' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'call_assignment_44535', getitem___call_result_46113)
        
        # Assigning a Name to a Name (line 950):
        # Getting the type of 'call_assignment_44535' (line 950)
        call_assignment_44535_46114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'call_assignment_44535')
        # Assigning a type to the variable 'dmin' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'dmin', call_assignment_44535_46114)
        
        # Assigning a Call to a Name (line 950):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 8), 'int')
        # Processing the call keyword arguments
        kwargs_46118 = {}
        # Getting the type of 'call_assignment_44534' (line 950)
        call_assignment_44534_46115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'call_assignment_44534', False)
        # Obtaining the member '__getitem__' of a type (line 950)
        getitem___46116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 8), call_assignment_44534_46115, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46119 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46116, *[int_46117], **kwargs_46118)
        
        # Assigning a type to the variable 'call_assignment_44536' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'call_assignment_44536', getitem___call_result_46119)
        
        # Assigning a Name to a Name (line 950):
        # Getting the type of 'call_assignment_44536' (line 950)
        call_assignment_44536_46120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'call_assignment_44536')
        # Assigning a type to the variable 'dmax' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 14), 'dmax', call_assignment_44536_46120)
        
        # Assigning a Call to a Name (line 952):
        
        # Assigning a Call to a Name (line 952):
        
        # Call to before(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'dmin' (line 952)
        dmin_46124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 32), 'dmin', False)
        # Getting the type of 'True' (line 952)
        True_46125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 38), 'True', False)
        # Processing the call keyword arguments (line 952)
        kwargs_46126 = {}
        # Getting the type of 'self' (line 952)
        self_46121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 15), 'self', False)
        # Obtaining the member 'rule' of a type (line 952)
        rule_46122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 15), self_46121, 'rule')
        # Obtaining the member 'before' of a type (line 952)
        before_46123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 15), rule_46122, 'before')
        # Calling before(args, kwargs) (line 952)
        before_call_result_46127 = invoke(stypy.reporting.localization.Localization(__file__, 952, 15), before_46123, *[dmin_46124, True_46125], **kwargs_46126)
        
        # Assigning a type to the variable 'vmin' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'vmin', before_call_result_46127)
        
        
        # Getting the type of 'vmin' (line 953)
        vmin_46128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 15), 'vmin')
        # Applying the 'not' unary operator (line 953)
        result_not__46129 = python_operator(stypy.reporting.localization.Localization(__file__, 953, 11), 'not', vmin_46128)
        
        # Testing the type of an if condition (line 953)
        if_condition_46130 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 953, 8), result_not__46129)
        # Assigning a type to the variable 'if_condition_46130' (line 953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'if_condition_46130', if_condition_46130)
        # SSA begins for if statement (line 953)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 954):
        
        # Assigning a Name to a Name (line 954):
        # Getting the type of 'dmin' (line 954)
        dmin_46131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 19), 'dmin')
        # Assigning a type to the variable 'vmin' (line 954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 12), 'vmin', dmin_46131)
        # SSA join for if statement (line 953)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 956):
        
        # Assigning a Call to a Name (line 956):
        
        # Call to after(...): (line 956)
        # Processing the call arguments (line 956)
        # Getting the type of 'dmax' (line 956)
        dmax_46135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 31), 'dmax', False)
        # Getting the type of 'True' (line 956)
        True_46136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 37), 'True', False)
        # Processing the call keyword arguments (line 956)
        kwargs_46137 = {}
        # Getting the type of 'self' (line 956)
        self_46132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 15), 'self', False)
        # Obtaining the member 'rule' of a type (line 956)
        rule_46133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 15), self_46132, 'rule')
        # Obtaining the member 'after' of a type (line 956)
        after_46134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 15), rule_46133, 'after')
        # Calling after(args, kwargs) (line 956)
        after_call_result_46138 = invoke(stypy.reporting.localization.Localization(__file__, 956, 15), after_46134, *[dmax_46135, True_46136], **kwargs_46137)
        
        # Assigning a type to the variable 'vmax' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 8), 'vmax', after_call_result_46138)
        
        
        # Getting the type of 'vmax' (line 957)
        vmax_46139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 15), 'vmax')
        # Applying the 'not' unary operator (line 957)
        result_not__46140 = python_operator(stypy.reporting.localization.Localization(__file__, 957, 11), 'not', vmax_46139)
        
        # Testing the type of an if condition (line 957)
        if_condition_46141 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 957, 8), result_not__46140)
        # Assigning a type to the variable 'if_condition_46141' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'if_condition_46141', if_condition_46141)
        # SSA begins for if statement (line 957)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 958):
        
        # Assigning a Name to a Name (line 958):
        # Getting the type of 'dmax' (line 958)
        dmax_46142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 19), 'dmax')
        # Assigning a type to the variable 'vmax' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'vmax', dmax_46142)
        # SSA join for if statement (line 957)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 960):
        
        # Assigning a Call to a Name (line 960):
        
        # Call to date2num(...): (line 960)
        # Processing the call arguments (line 960)
        # Getting the type of 'vmin' (line 960)
        vmin_46144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 24), 'vmin', False)
        # Processing the call keyword arguments (line 960)
        kwargs_46145 = {}
        # Getting the type of 'date2num' (line 960)
        date2num_46143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 15), 'date2num', False)
        # Calling date2num(args, kwargs) (line 960)
        date2num_call_result_46146 = invoke(stypy.reporting.localization.Localization(__file__, 960, 15), date2num_46143, *[vmin_46144], **kwargs_46145)
        
        # Assigning a type to the variable 'vmin' (line 960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'vmin', date2num_call_result_46146)
        
        # Assigning a Call to a Name (line 961):
        
        # Assigning a Call to a Name (line 961):
        
        # Call to date2num(...): (line 961)
        # Processing the call arguments (line 961)
        # Getting the type of 'vmax' (line 961)
        vmax_46148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 24), 'vmax', False)
        # Processing the call keyword arguments (line 961)
        kwargs_46149 = {}
        # Getting the type of 'date2num' (line 961)
        date2num_46147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 15), 'date2num', False)
        # Calling date2num(args, kwargs) (line 961)
        date2num_call_result_46150 = invoke(stypy.reporting.localization.Localization(__file__, 961, 15), date2num_46147, *[vmax_46148], **kwargs_46149)
        
        # Assigning a type to the variable 'vmax' (line 961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 8), 'vmax', date2num_call_result_46150)
        
        # Call to nonsingular(...): (line 963)
        # Processing the call arguments (line 963)
        # Getting the type of 'vmin' (line 963)
        vmin_46153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 32), 'vmin', False)
        # Getting the type of 'vmax' (line 963)
        vmax_46154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 38), 'vmax', False)
        # Processing the call keyword arguments (line 963)
        kwargs_46155 = {}
        # Getting the type of 'self' (line 963)
        self_46151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 15), 'self', False)
        # Obtaining the member 'nonsingular' of a type (line 963)
        nonsingular_46152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 15), self_46151, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 963)
        nonsingular_call_result_46156 = invoke(stypy.reporting.localization.Localization(__file__, 963, 15), nonsingular_46152, *[vmin_46153, vmax_46154], **kwargs_46155)
        
        # Assigning a type to the variable 'stypy_return_type' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 8), 'stypy_return_type', nonsingular_call_result_46156)
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 930)
        stypy_return_type_46157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46157)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_46157


# Assigning a type to the variable 'RRuleLocator' (line 861)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 861, 0), 'RRuleLocator', RRuleLocator)
# Declaration of the 'AutoDateLocator' class
# Getting the type of 'DateLocator' (line 966)
DateLocator_46158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 22), 'DateLocator')

class AutoDateLocator(DateLocator_46158, ):
    unicode_46159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, (-1)), 'unicode', u'\n    On autoscale, this class picks the best\n    :class:`DateLocator` to set the view limits and the tick\n    locations.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 972)
        None_46160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 26), 'None')
        int_46161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 41), 'int')
        # Getting the type of 'None' (line 972)
        None_46162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 53), 'None')
        # Getting the type of 'False' (line 973)
        False_46163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 36), 'False')
        defaults = [None_46160, int_46161, None_46162, False_46163]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 972, 4, False)
        # Assigning a type to the variable 'self' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateLocator.__init__', ['tz', 'minticks', 'maxticks', 'interval_multiples'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['tz', 'minticks', 'maxticks', 'interval_multiples'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_46164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, (-1)), 'unicode', u"\n        *minticks* is the minimum number of ticks desired, which is used to\n        select the type of ticking (yearly, monthly, etc.).\n\n        *maxticks* is the maximum number of ticks desired, which controls\n        any interval between ticks (ticking every other, every 3, etc.).\n        For really fine-grained control, this can be a dictionary mapping\n        individual rrule frequency constants (YEARLY, MONTHLY, etc.)\n        to their own maximum number of ticks.  This can be used to keep\n        the number of ticks appropriate to the format chosen in\n        :class:`AutoDateFormatter`. Any frequency not specified in this\n        dictionary is given a default value.\n\n        *tz* is a :class:`tzinfo` instance.\n\n        *interval_multiples* is a boolean that indicates whether ticks\n        should be chosen to be multiple of the interval. This will lock\n        ticks to 'nicer' locations. For example, this will force the\n        ticks to be at hours 0,6,12,18 when hourly ticking is done at\n        6 hour intervals.\n\n        The AutoDateLocator has an interval dictionary that maps the\n        frequency of the tick (a constant from dateutil.rrule) and a\n        multiple allowed for that ticking.  The default looks like this::\n\n          self.intervald = {\n            YEARLY  : [1, 2, 4, 5, 10, 20, 40, 50, 100, 200, 400, 500,\n                      1000, 2000, 4000, 5000, 10000],\n            MONTHLY : [1, 2, 3, 4, 6],\n            DAILY   : [1, 2, 3, 7, 14],\n            HOURLY  : [1, 2, 3, 4, 6, 12],\n            MINUTELY: [1, 5, 10, 15, 30],\n            SECONDLY: [1, 5, 10, 15, 30],\n            MICROSECONDLY: [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000,\n                           5000, 10000, 20000, 50000, 100000, 200000, 500000,\n                           1000000],\n            }\n\n        The interval is used to specify multiples that are appropriate for\n        the frequency of ticking. For instance, every 7 days is sensible\n        for daily ticks, but for minutes/seconds, 15 or 30 make sense.\n        You can customize this dictionary by doing::\n\n          locator = AutoDateLocator()\n          locator.intervald[HOURLY] = [3] # only show every 3 hours\n        ")
        
        # Call to __init__(...): (line 1020)
        # Processing the call arguments (line 1020)
        # Getting the type of 'self' (line 1020)
        self_46167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 29), 'self', False)
        # Getting the type of 'tz' (line 1020)
        tz_46168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 35), 'tz', False)
        # Processing the call keyword arguments (line 1020)
        kwargs_46169 = {}
        # Getting the type of 'DateLocator' (line 1020)
        DateLocator_46165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 8), 'DateLocator', False)
        # Obtaining the member '__init__' of a type (line 1020)
        init___46166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 8), DateLocator_46165, '__init__')
        # Calling __init__(args, kwargs) (line 1020)
        init___call_result_46170 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 8), init___46166, *[self_46167, tz_46168], **kwargs_46169)
        
        
        # Assigning a Call to a Attribute (line 1021):
        
        # Assigning a Call to a Attribute (line 1021):
        
        # Call to YearLocator(...): (line 1021)
        # Processing the call keyword arguments (line 1021)
        kwargs_46172 = {}
        # Getting the type of 'YearLocator' (line 1021)
        YearLocator_46171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 24), 'YearLocator', False)
        # Calling YearLocator(args, kwargs) (line 1021)
        YearLocator_call_result_46173 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 24), YearLocator_46171, *[], **kwargs_46172)
        
        # Getting the type of 'self' (line 1021)
        self_46174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 8), 'self')
        # Setting the type of the member '_locator' of a type (line 1021)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 8), self_46174, '_locator', YearLocator_call_result_46173)
        
        # Assigning a Name to a Attribute (line 1022):
        
        # Assigning a Name to a Attribute (line 1022):
        # Getting the type of 'YEARLY' (line 1022)
        YEARLY_46175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 21), 'YEARLY')
        # Getting the type of 'self' (line 1022)
        self_46176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 8), 'self')
        # Setting the type of the member '_freq' of a type (line 1022)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 8), self_46176, '_freq', YEARLY_46175)
        
        # Assigning a List to a Attribute (line 1023):
        
        # Assigning a List to a Attribute (line 1023):
        
        # Obtaining an instance of the builtin type 'list' (line 1023)
        list_46177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1023)
        # Adding element type (line 1023)
        # Getting the type of 'YEARLY' (line 1023)
        YEARLY_46178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 23), 'YEARLY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 22), list_46177, YEARLY_46178)
        # Adding element type (line 1023)
        # Getting the type of 'MONTHLY' (line 1023)
        MONTHLY_46179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 31), 'MONTHLY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 22), list_46177, MONTHLY_46179)
        # Adding element type (line 1023)
        # Getting the type of 'DAILY' (line 1023)
        DAILY_46180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 40), 'DAILY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 22), list_46177, DAILY_46180)
        # Adding element type (line 1023)
        # Getting the type of 'HOURLY' (line 1023)
        HOURLY_46181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 47), 'HOURLY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 22), list_46177, HOURLY_46181)
        # Adding element type (line 1023)
        # Getting the type of 'MINUTELY' (line 1023)
        MINUTELY_46182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 55), 'MINUTELY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 22), list_46177, MINUTELY_46182)
        # Adding element type (line 1023)
        # Getting the type of 'SECONDLY' (line 1024)
        SECONDLY_46183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 23), 'SECONDLY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 22), list_46177, SECONDLY_46183)
        # Adding element type (line 1023)
        # Getting the type of 'MICROSECONDLY' (line 1024)
        MICROSECONDLY_46184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 33), 'MICROSECONDLY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 22), list_46177, MICROSECONDLY_46184)
        
        # Getting the type of 'self' (line 1023)
        self_46185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 8), 'self')
        # Setting the type of the member '_freqs' of a type (line 1023)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 8), self_46185, '_freqs', list_46177)
        
        # Assigning a Name to a Attribute (line 1025):
        
        # Assigning a Name to a Attribute (line 1025):
        # Getting the type of 'minticks' (line 1025)
        minticks_46186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 24), 'minticks')
        # Getting the type of 'self' (line 1025)
        self_46187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 8), 'self')
        # Setting the type of the member 'minticks' of a type (line 1025)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 8), self_46187, 'minticks', minticks_46186)
        
        # Assigning a Dict to a Attribute (line 1027):
        
        # Assigning a Dict to a Attribute (line 1027):
        
        # Obtaining an instance of the builtin type 'dict' (line 1027)
        dict_46188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 24), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1027)
        # Adding element type (key, value) (line 1027)
        # Getting the type of 'YEARLY' (line 1027)
        YEARLY_46189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 25), 'YEARLY')
        int_46190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 33), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 24), dict_46188, (YEARLY_46189, int_46190))
        # Adding element type (key, value) (line 1027)
        # Getting the type of 'MONTHLY' (line 1027)
        MONTHLY_46191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 37), 'MONTHLY')
        int_46192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 46), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 24), dict_46188, (MONTHLY_46191, int_46192))
        # Adding element type (key, value) (line 1027)
        # Getting the type of 'DAILY' (line 1027)
        DAILY_46193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 50), 'DAILY')
        int_46194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 57), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 24), dict_46188, (DAILY_46193, int_46194))
        # Adding element type (key, value) (line 1027)
        # Getting the type of 'HOURLY' (line 1027)
        HOURLY_46195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 61), 'HOURLY')
        int_46196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 69), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 24), dict_46188, (HOURLY_46195, int_46196))
        # Adding element type (key, value) (line 1027)
        # Getting the type of 'MINUTELY' (line 1028)
        MINUTELY_46197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 25), 'MINUTELY')
        int_46198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 35), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 24), dict_46188, (MINUTELY_46197, int_46198))
        # Adding element type (key, value) (line 1027)
        # Getting the type of 'SECONDLY' (line 1028)
        SECONDLY_46199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 39), 'SECONDLY')
        int_46200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 49), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 24), dict_46188, (SECONDLY_46199, int_46200))
        # Adding element type (key, value) (line 1027)
        # Getting the type of 'MICROSECONDLY' (line 1028)
        MICROSECONDLY_46201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 53), 'MICROSECONDLY')
        int_46202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 68), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 24), dict_46188, (MICROSECONDLY_46201, int_46202))
        
        # Getting the type of 'self' (line 1027)
        self_46203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 8), 'self')
        # Setting the type of the member 'maxticks' of a type (line 1027)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 8), self_46203, 'maxticks', dict_46188)
        
        # Type idiom detected: calculating its left and rigth part (line 1029)
        # Getting the type of 'maxticks' (line 1029)
        maxticks_46204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 8), 'maxticks')
        # Getting the type of 'None' (line 1029)
        None_46205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 27), 'None')
        
        (may_be_46206, more_types_in_union_46207) = may_not_be_none(maxticks_46204, None_46205)

        if may_be_46206:

            if more_types_in_union_46207:
                # Runtime conditional SSA (line 1029)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # SSA begins for try-except statement (line 1030)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Call to update(...): (line 1031)
            # Processing the call arguments (line 1031)
            # Getting the type of 'maxticks' (line 1031)
            maxticks_46211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 37), 'maxticks', False)
            # Processing the call keyword arguments (line 1031)
            kwargs_46212 = {}
            # Getting the type of 'self' (line 1031)
            self_46208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 16), 'self', False)
            # Obtaining the member 'maxticks' of a type (line 1031)
            maxticks_46209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 16), self_46208, 'maxticks')
            # Obtaining the member 'update' of a type (line 1031)
            update_46210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 16), maxticks_46209, 'update')
            # Calling update(args, kwargs) (line 1031)
            update_call_result_46213 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 16), update_46210, *[maxticks_46211], **kwargs_46212)
            
            # SSA branch for the except part of a try statement (line 1030)
            # SSA branch for the except 'TypeError' branch of a try statement (line 1030)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Call to a Attribute (line 1036):
            
            # Assigning a Call to a Attribute (line 1036):
            
            # Call to fromkeys(...): (line 1036)
            # Processing the call arguments (line 1036)
            # Getting the type of 'self' (line 1036)
            self_46216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 46), 'self', False)
            # Obtaining the member '_freqs' of a type (line 1036)
            _freqs_46217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 46), self_46216, '_freqs')
            # Getting the type of 'maxticks' (line 1036)
            maxticks_46218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 59), 'maxticks', False)
            # Processing the call keyword arguments (line 1036)
            kwargs_46219 = {}
            # Getting the type of 'dict' (line 1036)
            dict_46214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 32), 'dict', False)
            # Obtaining the member 'fromkeys' of a type (line 1036)
            fromkeys_46215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 32), dict_46214, 'fromkeys')
            # Calling fromkeys(args, kwargs) (line 1036)
            fromkeys_call_result_46220 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 32), fromkeys_46215, *[_freqs_46217, maxticks_46218], **kwargs_46219)
            
            # Getting the type of 'self' (line 1036)
            self_46221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 16), 'self')
            # Setting the type of the member 'maxticks' of a type (line 1036)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 16), self_46221, 'maxticks', fromkeys_call_result_46220)
            # SSA join for try-except statement (line 1030)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_46207:
                # SSA join for if statement (line 1029)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1037):
        
        # Assigning a Name to a Attribute (line 1037):
        # Getting the type of 'interval_multiples' (line 1037)
        interval_multiples_46222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 34), 'interval_multiples')
        # Getting the type of 'self' (line 1037)
        self_46223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'self')
        # Setting the type of the member 'interval_multiples' of a type (line 1037)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 8), self_46223, 'interval_multiples', interval_multiples_46222)
        
        # Assigning a Dict to a Attribute (line 1038):
        
        # Assigning a Dict to a Attribute (line 1038):
        
        # Obtaining an instance of the builtin type 'dict' (line 1038)
        dict_46224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 25), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1038)
        # Adding element type (key, value) (line 1038)
        # Getting the type of 'YEARLY' (line 1039)
        YEARLY_46225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 12), 'YEARLY')
        
        # Obtaining an instance of the builtin type 'list' (line 1039)
        list_46226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1039)
        # Adding element type (line 1039)
        int_46227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46227)
        # Adding element type (line 1039)
        int_46228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46228)
        # Adding element type (line 1039)
        int_46229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46229)
        # Adding element type (line 1039)
        int_46230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46230)
        # Adding element type (line 1039)
        int_46231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46231)
        # Adding element type (line 1039)
        int_46232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46232)
        # Adding element type (line 1039)
        int_46233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46233)
        # Adding element type (line 1039)
        int_46234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46234)
        # Adding element type (line 1039)
        int_46235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 51), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46235)
        # Adding element type (line 1039)
        int_46236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46236)
        # Adding element type (line 1039)
        int_46237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 61), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46237)
        # Adding element type (line 1039)
        int_46238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 66), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46238)
        # Adding element type (line 1039)
        int_46239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46239)
        # Adding element type (line 1039)
        int_46240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46240)
        # Adding element type (line 1039)
        int_46241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46241)
        # Adding element type (line 1039)
        int_46242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 41), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46242)
        # Adding element type (line 1039)
        int_46243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 22), list_46226, int_46243)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1038, 25), dict_46224, (YEARLY_46225, list_46226))
        # Adding element type (key, value) (line 1038)
        # Getting the type of 'MONTHLY' (line 1041)
        MONTHLY_46244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 12), 'MONTHLY')
        
        # Obtaining an instance of the builtin type 'list' (line 1041)
        list_46245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1041)
        # Adding element type (line 1041)
        int_46246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 22), list_46245, int_46246)
        # Adding element type (line 1041)
        int_46247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 22), list_46245, int_46247)
        # Adding element type (line 1041)
        int_46248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 22), list_46245, int_46248)
        # Adding element type (line 1041)
        int_46249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 22), list_46245, int_46249)
        # Adding element type (line 1041)
        int_46250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 22), list_46245, int_46250)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1038, 25), dict_46224, (MONTHLY_46244, list_46245))
        # Adding element type (key, value) (line 1038)
        # Getting the type of 'DAILY' (line 1042)
        DAILY_46251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 12), 'DAILY')
        
        # Obtaining an instance of the builtin type 'list' (line 1042)
        list_46252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1042)
        # Adding element type (line 1042)
        int_46253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1042, 22), list_46252, int_46253)
        # Adding element type (line 1042)
        int_46254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1042, 22), list_46252, int_46254)
        # Adding element type (line 1042)
        int_46255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1042, 22), list_46252, int_46255)
        # Adding element type (line 1042)
        int_46256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1042, 22), list_46252, int_46256)
        # Adding element type (line 1042)
        int_46257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1042, 22), list_46252, int_46257)
        # Adding element type (line 1042)
        int_46258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1042, 22), list_46252, int_46258)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1038, 25), dict_46224, (DAILY_46251, list_46252))
        # Adding element type (key, value) (line 1038)
        # Getting the type of 'HOURLY' (line 1043)
        HOURLY_46259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 12), 'HOURLY')
        
        # Obtaining an instance of the builtin type 'list' (line 1043)
        list_46260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1043)
        # Adding element type (line 1043)
        int_46261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 22), list_46260, int_46261)
        # Adding element type (line 1043)
        int_46262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 22), list_46260, int_46262)
        # Adding element type (line 1043)
        int_46263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 22), list_46260, int_46263)
        # Adding element type (line 1043)
        int_46264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 22), list_46260, int_46264)
        # Adding element type (line 1043)
        int_46265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 22), list_46260, int_46265)
        # Adding element type (line 1043)
        int_46266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 38), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 22), list_46260, int_46266)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1038, 25), dict_46224, (HOURLY_46259, list_46260))
        # Adding element type (key, value) (line 1038)
        # Getting the type of 'MINUTELY' (line 1044)
        MINUTELY_46267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 12), 'MINUTELY')
        
        # Obtaining an instance of the builtin type 'list' (line 1044)
        list_46268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1044)
        # Adding element type (line 1044)
        int_46269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1044, 22), list_46268, int_46269)
        # Adding element type (line 1044)
        int_46270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1044, 22), list_46268, int_46270)
        # Adding element type (line 1044)
        int_46271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1044, 22), list_46268, int_46271)
        # Adding element type (line 1044)
        int_46272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1044, 22), list_46268, int_46272)
        # Adding element type (line 1044)
        int_46273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1044, 22), list_46268, int_46273)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1038, 25), dict_46224, (MINUTELY_46267, list_46268))
        # Adding element type (key, value) (line 1038)
        # Getting the type of 'SECONDLY' (line 1045)
        SECONDLY_46274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 12), 'SECONDLY')
        
        # Obtaining an instance of the builtin type 'list' (line 1045)
        list_46275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1045)
        # Adding element type (line 1045)
        int_46276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 22), list_46275, int_46276)
        # Adding element type (line 1045)
        int_46277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 22), list_46275, int_46277)
        # Adding element type (line 1045)
        int_46278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 22), list_46275, int_46278)
        # Adding element type (line 1045)
        int_46279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 22), list_46275, int_46279)
        # Adding element type (line 1045)
        int_46280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 22), list_46275, int_46280)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1038, 25), dict_46224, (SECONDLY_46274, list_46275))
        # Adding element type (key, value) (line 1038)
        # Getting the type of 'MICROSECONDLY' (line 1046)
        MICROSECONDLY_46281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 12), 'MICROSECONDLY')
        
        # Obtaining an instance of the builtin type 'list' (line 1046)
        list_46282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1046)
        # Adding element type (line 1046)
        int_46283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46283)
        # Adding element type (line 1046)
        int_46284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46284)
        # Adding element type (line 1046)
        int_46285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46285)
        # Adding element type (line 1046)
        int_46286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46286)
        # Adding element type (line 1046)
        int_46287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 41), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46287)
        # Adding element type (line 1046)
        int_46288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46288)
        # Adding element type (line 1046)
        int_46289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46289)
        # Adding element type (line 1046)
        int_46290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 54), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46290)
        # Adding element type (line 1046)
        int_46291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 59), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46291)
        # Adding element type (line 1046)
        int_46292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 64), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46292)
        # Adding element type (line 1046)
        int_46293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 70), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46293)
        # Adding element type (line 1046)
        int_46294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46294)
        # Adding element type (line 1046)
        int_46295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46295)
        # Adding element type (line 1046)
        int_46296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 41), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46296)
        # Adding element type (line 1046)
        int_46297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 48), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46297)
        # Adding element type (line 1046)
        int_46298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46298)
        # Adding element type (line 1046)
        int_46299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 63), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46299)
        # Adding element type (line 1046)
        int_46300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 71), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46300)
        # Adding element type (line 1046)
        int_46301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 27), list_46282, int_46301)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1038, 25), dict_46224, (MICROSECONDLY_46281, list_46282))
        
        # Getting the type of 'self' (line 1038)
        self_46302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'self')
        # Setting the type of the member 'intervald' of a type (line 1038)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 8), self_46302, 'intervald', dict_46224)
        
        # Assigning a List to a Attribute (line 1049):
        
        # Assigning a List to a Attribute (line 1049):
        
        # Obtaining an instance of the builtin type 'list' (line 1049)
        list_46303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1049)
        # Adding element type (line 1049)
        # Getting the type of 'None' (line 1049)
        None_46304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 26), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1049, 25), list_46303, None_46304)
        # Adding element type (line 1049)
        
        # Call to range(...): (line 1049)
        # Processing the call arguments (line 1049)
        int_46306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 38), 'int')
        int_46307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 41), 'int')
        # Processing the call keyword arguments (line 1049)
        kwargs_46308 = {}
        # Getting the type of 'range' (line 1049)
        range_46305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 32), 'range', False)
        # Calling range(args, kwargs) (line 1049)
        range_call_result_46309 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 32), range_46305, *[int_46306, int_46307], **kwargs_46308)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1049, 25), list_46303, range_call_result_46309)
        # Adding element type (line 1049)
        
        # Call to range(...): (line 1049)
        # Processing the call arguments (line 1049)
        int_46311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 52), 'int')
        int_46312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 55), 'int')
        # Processing the call keyword arguments (line 1049)
        kwargs_46313 = {}
        # Getting the type of 'range' (line 1049)
        range_46310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 46), 'range', False)
        # Calling range(args, kwargs) (line 1049)
        range_call_result_46314 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 46), range_46310, *[int_46311, int_46312], **kwargs_46313)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1049, 25), list_46303, range_call_result_46314)
        # Adding element type (line 1049)
        
        # Call to range(...): (line 1050)
        # Processing the call arguments (line 1050)
        int_46316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 32), 'int')
        int_46317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 35), 'int')
        # Processing the call keyword arguments (line 1050)
        kwargs_46318 = {}
        # Getting the type of 'range' (line 1050)
        range_46315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 26), 'range', False)
        # Calling range(args, kwargs) (line 1050)
        range_call_result_46319 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 26), range_46315, *[int_46316, int_46317], **kwargs_46318)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1049, 25), list_46303, range_call_result_46319)
        # Adding element type (line 1049)
        
        # Call to range(...): (line 1050)
        # Processing the call arguments (line 1050)
        int_46321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 46), 'int')
        int_46322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 49), 'int')
        # Processing the call keyword arguments (line 1050)
        kwargs_46323 = {}
        # Getting the type of 'range' (line 1050)
        range_46320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 40), 'range', False)
        # Calling range(args, kwargs) (line 1050)
        range_call_result_46324 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 40), range_46320, *[int_46321, int_46322], **kwargs_46323)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1049, 25), list_46303, range_call_result_46324)
        # Adding element type (line 1049)
        
        # Call to range(...): (line 1050)
        # Processing the call arguments (line 1050)
        int_46326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 60), 'int')
        int_46327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 63), 'int')
        # Processing the call keyword arguments (line 1050)
        kwargs_46328 = {}
        # Getting the type of 'range' (line 1050)
        range_46325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 54), 'range', False)
        # Calling range(args, kwargs) (line 1050)
        range_call_result_46329 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 54), range_46325, *[int_46326, int_46327], **kwargs_46328)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1049, 25), list_46303, range_call_result_46329)
        # Adding element type (line 1049)
        # Getting the type of 'None' (line 1050)
        None_46330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 68), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1049, 25), list_46303, None_46330)
        
        # Getting the type of 'self' (line 1049)
        self_46331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'self')
        # Setting the type of the member '_byranges' of a type (line 1049)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 8), self_46331, '_byranges', list_46303)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1052, 4, False)
        # Assigning a type to the variable 'self' (line 1053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_function_name', 'AutoDateLocator.__call__')
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoDateLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_46332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1053, 8), 'unicode', u'Return the locations of the ticks')
        
        # Call to refresh(...): (line 1054)
        # Processing the call keyword arguments (line 1054)
        kwargs_46335 = {}
        # Getting the type of 'self' (line 1054)
        self_46333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 8), 'self', False)
        # Obtaining the member 'refresh' of a type (line 1054)
        refresh_46334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 8), self_46333, 'refresh')
        # Calling refresh(args, kwargs) (line 1054)
        refresh_call_result_46336 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 8), refresh_46334, *[], **kwargs_46335)
        
        
        # Call to _locator(...): (line 1055)
        # Processing the call keyword arguments (line 1055)
        kwargs_46339 = {}
        # Getting the type of 'self' (line 1055)
        self_46337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 15), 'self', False)
        # Obtaining the member '_locator' of a type (line 1055)
        _locator_46338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 15), self_46337, '_locator')
        # Calling _locator(args, kwargs) (line 1055)
        _locator_call_result_46340 = invoke(stypy.reporting.localization.Localization(__file__, 1055, 15), _locator_46338, *[], **kwargs_46339)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 8), 'stypy_return_type', _locator_call_result_46340)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1052)
        stypy_return_type_46341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46341)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_46341


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 1057, 4, False)
        # Assigning a type to the variable 'self' (line 1058)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'AutoDateLocator.tick_values')
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoDateLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        # Call to tick_values(...): (line 1058)
        # Processing the call arguments (line 1058)
        # Getting the type of 'vmin' (line 1058)
        vmin_46349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 56), 'vmin', False)
        # Getting the type of 'vmax' (line 1058)
        vmax_46350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 62), 'vmax', False)
        # Processing the call keyword arguments (line 1058)
        kwargs_46351 = {}
        
        # Call to get_locator(...): (line 1058)
        # Processing the call arguments (line 1058)
        # Getting the type of 'vmin' (line 1058)
        vmin_46344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 32), 'vmin', False)
        # Getting the type of 'vmax' (line 1058)
        vmax_46345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 38), 'vmax', False)
        # Processing the call keyword arguments (line 1058)
        kwargs_46346 = {}
        # Getting the type of 'self' (line 1058)
        self_46342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 15), 'self', False)
        # Obtaining the member 'get_locator' of a type (line 1058)
        get_locator_46343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 15), self_46342, 'get_locator')
        # Calling get_locator(args, kwargs) (line 1058)
        get_locator_call_result_46347 = invoke(stypy.reporting.localization.Localization(__file__, 1058, 15), get_locator_46343, *[vmin_46344, vmax_46345], **kwargs_46346)
        
        # Obtaining the member 'tick_values' of a type (line 1058)
        tick_values_46348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 15), get_locator_call_result_46347, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1058)
        tick_values_call_result_46352 = invoke(stypy.reporting.localization.Localization(__file__, 1058, 15), tick_values_46348, *[vmin_46349, vmax_46350], **kwargs_46351)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1058)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 8), 'stypy_return_type', tick_values_call_result_46352)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1057)
        stypy_return_type_46353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46353)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_46353


    @norecursion
    def nonsingular(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'nonsingular'
        module_type_store = module_type_store.open_function_context('nonsingular', 1060, 4, False)
        # Assigning a type to the variable 'self' (line 1061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_localization', localization)
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_function_name', 'AutoDateLocator.nonsingular')
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoDateLocator.nonsingular.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateLocator.nonsingular', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'nonsingular', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'nonsingular(...)' code ##################

        
        
        # Getting the type of 'vmin' (line 1063)
        vmin_46354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 11), 'vmin')
        # Getting the type of 'vmax' (line 1063)
        vmax_46355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 19), 'vmax')
        # Applying the binary operator '==' (line 1063)
        result_eq_46356 = python_operator(stypy.reporting.localization.Localization(__file__, 1063, 11), '==', vmin_46354, vmax_46355)
        
        # Testing the type of an if condition (line 1063)
        if_condition_46357 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1063, 8), result_eq_46356)
        # Assigning a type to the variable 'if_condition_46357' (line 1063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1063, 8), 'if_condition_46357', if_condition_46357)
        # SSA begins for if statement (line 1063)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1064):
        
        # Assigning a BinOp to a Name (line 1064):
        # Getting the type of 'vmin' (line 1064)
        vmin_46358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 19), 'vmin')
        # Getting the type of 'DAYS_PER_YEAR' (line 1064)
        DAYS_PER_YEAR_46359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 26), 'DAYS_PER_YEAR')
        int_46360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, 42), 'int')
        # Applying the binary operator '*' (line 1064)
        result_mul_46361 = python_operator(stypy.reporting.localization.Localization(__file__, 1064, 26), '*', DAYS_PER_YEAR_46359, int_46360)
        
        # Applying the binary operator '-' (line 1064)
        result_sub_46362 = python_operator(stypy.reporting.localization.Localization(__file__, 1064, 19), '-', vmin_46358, result_mul_46361)
        
        # Assigning a type to the variable 'vmin' (line 1064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1064, 12), 'vmin', result_sub_46362)
        
        # Assigning a BinOp to a Name (line 1065):
        
        # Assigning a BinOp to a Name (line 1065):
        # Getting the type of 'vmax' (line 1065)
        vmax_46363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 19), 'vmax')
        # Getting the type of 'DAYS_PER_YEAR' (line 1065)
        DAYS_PER_YEAR_46364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 26), 'DAYS_PER_YEAR')
        int_46365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 42), 'int')
        # Applying the binary operator '*' (line 1065)
        result_mul_46366 = python_operator(stypy.reporting.localization.Localization(__file__, 1065, 26), '*', DAYS_PER_YEAR_46364, int_46365)
        
        # Applying the binary operator '+' (line 1065)
        result_add_46367 = python_operator(stypy.reporting.localization.Localization(__file__, 1065, 19), '+', vmax_46363, result_mul_46366)
        
        # Assigning a type to the variable 'vmax' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 12), 'vmax', result_add_46367)
        # SSA join for if statement (line 1063)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1066)
        tuple_46368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1066)
        # Adding element type (line 1066)
        # Getting the type of 'vmin' (line 1066)
        vmin_46369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 15), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 15), tuple_46368, vmin_46369)
        # Adding element type (line 1066)
        # Getting the type of 'vmax' (line 1066)
        vmax_46370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 21), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 15), tuple_46368, vmax_46370)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1066, 8), 'stypy_return_type', tuple_46368)
        
        # ################# End of 'nonsingular(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'nonsingular' in the type store
        # Getting the type of 'stypy_return_type' (line 1060)
        stypy_return_type_46371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46371)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'nonsingular'
        return stypy_return_type_46371


    @norecursion
    def set_axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_axis'
        module_type_store = module_type_store.open_function_context('set_axis', 1068, 4, False)
        # Assigning a type to the variable 'self' (line 1069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1069, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_localization', localization)
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_function_name', 'AutoDateLocator.set_axis')
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_param_names_list', ['axis'])
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoDateLocator.set_axis.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateLocator.set_axis', ['axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_axis', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_axis(...)' code ##################

        
        # Call to set_axis(...): (line 1069)
        # Processing the call arguments (line 1069)
        # Getting the type of 'self' (line 1069)
        self_46374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 29), 'self', False)
        # Getting the type of 'axis' (line 1069)
        axis_46375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 35), 'axis', False)
        # Processing the call keyword arguments (line 1069)
        kwargs_46376 = {}
        # Getting the type of 'DateLocator' (line 1069)
        DateLocator_46372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 8), 'DateLocator', False)
        # Obtaining the member 'set_axis' of a type (line 1069)
        set_axis_46373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 8), DateLocator_46372, 'set_axis')
        # Calling set_axis(args, kwargs) (line 1069)
        set_axis_call_result_46377 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 8), set_axis_46373, *[self_46374, axis_46375], **kwargs_46376)
        
        
        # Call to set_axis(...): (line 1070)
        # Processing the call arguments (line 1070)
        # Getting the type of 'axis' (line 1070)
        axis_46381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 31), 'axis', False)
        # Processing the call keyword arguments (line 1070)
        kwargs_46382 = {}
        # Getting the type of 'self' (line 1070)
        self_46378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'self', False)
        # Obtaining the member '_locator' of a type (line 1070)
        _locator_46379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 8), self_46378, '_locator')
        # Obtaining the member 'set_axis' of a type (line 1070)
        set_axis_46380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 8), _locator_46379, 'set_axis')
        # Calling set_axis(args, kwargs) (line 1070)
        set_axis_call_result_46383 = invoke(stypy.reporting.localization.Localization(__file__, 1070, 8), set_axis_46380, *[axis_46381], **kwargs_46382)
        
        
        # ################# End of 'set_axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_axis' in the type store
        # Getting the type of 'stypy_return_type' (line 1068)
        stypy_return_type_46384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46384)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_axis'
        return stypy_return_type_46384


    @norecursion
    def refresh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'refresh'
        module_type_store = module_type_store.open_function_context('refresh', 1072, 4, False)
        # Assigning a type to the variable 'self' (line 1073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_localization', localization)
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_function_name', 'AutoDateLocator.refresh')
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_param_names_list', [])
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoDateLocator.refresh.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateLocator.refresh', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'refresh', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'refresh(...)' code ##################

        unicode_46385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 8), 'unicode', u'Refresh internal information based on current limits.')
        
        # Assigning a Call to a Tuple (line 1074):
        
        # Assigning a Call to a Name:
        
        # Call to viewlim_to_dt(...): (line 1074)
        # Processing the call keyword arguments (line 1074)
        kwargs_46388 = {}
        # Getting the type of 'self' (line 1074)
        self_46386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 21), 'self', False)
        # Obtaining the member 'viewlim_to_dt' of a type (line 1074)
        viewlim_to_dt_46387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 21), self_46386, 'viewlim_to_dt')
        # Calling viewlim_to_dt(args, kwargs) (line 1074)
        viewlim_to_dt_call_result_46389 = invoke(stypy.reporting.localization.Localization(__file__, 1074, 21), viewlim_to_dt_46387, *[], **kwargs_46388)
        
        # Assigning a type to the variable 'call_assignment_44537' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_44537', viewlim_to_dt_call_result_46389)
        
        # Assigning a Call to a Name (line 1074):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 8), 'int')
        # Processing the call keyword arguments
        kwargs_46393 = {}
        # Getting the type of 'call_assignment_44537' (line 1074)
        call_assignment_44537_46390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_44537', False)
        # Obtaining the member '__getitem__' of a type (line 1074)
        getitem___46391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 8), call_assignment_44537_46390, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46394 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46391, *[int_46392], **kwargs_46393)
        
        # Assigning a type to the variable 'call_assignment_44538' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_44538', getitem___call_result_46394)
        
        # Assigning a Name to a Name (line 1074):
        # Getting the type of 'call_assignment_44538' (line 1074)
        call_assignment_44538_46395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_44538')
        # Assigning a type to the variable 'dmin' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'dmin', call_assignment_44538_46395)
        
        # Assigning a Call to a Name (line 1074):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 8), 'int')
        # Processing the call keyword arguments
        kwargs_46399 = {}
        # Getting the type of 'call_assignment_44537' (line 1074)
        call_assignment_44537_46396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_44537', False)
        # Obtaining the member '__getitem__' of a type (line 1074)
        getitem___46397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 8), call_assignment_44537_46396, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46400 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46397, *[int_46398], **kwargs_46399)
        
        # Assigning a type to the variable 'call_assignment_44539' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_44539', getitem___call_result_46400)
        
        # Assigning a Name to a Name (line 1074):
        # Getting the type of 'call_assignment_44539' (line 1074)
        call_assignment_44539_46401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_44539')
        # Assigning a type to the variable 'dmax' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 14), 'dmax', call_assignment_44539_46401)
        
        # Assigning a Call to a Attribute (line 1075):
        
        # Assigning a Call to a Attribute (line 1075):
        
        # Call to get_locator(...): (line 1075)
        # Processing the call arguments (line 1075)
        # Getting the type of 'dmin' (line 1075)
        dmin_46404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 41), 'dmin', False)
        # Getting the type of 'dmax' (line 1075)
        dmax_46405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 47), 'dmax', False)
        # Processing the call keyword arguments (line 1075)
        kwargs_46406 = {}
        # Getting the type of 'self' (line 1075)
        self_46402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 24), 'self', False)
        # Obtaining the member 'get_locator' of a type (line 1075)
        get_locator_46403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 24), self_46402, 'get_locator')
        # Calling get_locator(args, kwargs) (line 1075)
        get_locator_call_result_46407 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 24), get_locator_46403, *[dmin_46404, dmax_46405], **kwargs_46406)
        
        # Getting the type of 'self' (line 1075)
        self_46408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'self')
        # Setting the type of the member '_locator' of a type (line 1075)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 8), self_46408, '_locator', get_locator_call_result_46407)
        
        # ################# End of 'refresh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'refresh' in the type store
        # Getting the type of 'stypy_return_type' (line 1072)
        stypy_return_type_46409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46409)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'refresh'
        return stypy_return_type_46409


    @norecursion
    def _get_unit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_unit'
        module_type_store = module_type_store.open_function_context('_get_unit', 1077, 4, False)
        # Assigning a type to the variable 'self' (line 1078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_localization', localization)
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_function_name', 'AutoDateLocator._get_unit')
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_param_names_list', [])
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoDateLocator._get_unit.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateLocator._get_unit', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_unit', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_unit(...)' code ##################

        
        
        # Getting the type of 'self' (line 1078)
        self_46410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 11), 'self')
        # Obtaining the member '_freq' of a type (line 1078)
        _freq_46411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 11), self_46410, '_freq')
        
        # Obtaining an instance of the builtin type 'list' (line 1078)
        list_46412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1078)
        # Adding element type (line 1078)
        # Getting the type of 'MICROSECONDLY' (line 1078)
        MICROSECONDLY_46413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 26), 'MICROSECONDLY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 25), list_46412, MICROSECONDLY_46413)
        
        # Applying the binary operator 'in' (line 1078)
        result_contains_46414 = python_operator(stypy.reporting.localization.Localization(__file__, 1078, 11), 'in', _freq_46411, list_46412)
        
        # Testing the type of an if condition (line 1078)
        if_condition_46415 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1078, 8), result_contains_46414)
        # Assigning a type to the variable 'if_condition_46415' (line 1078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'if_condition_46415', if_condition_46415)
        # SSA begins for if statement (line 1078)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        float_46416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1079, 19), 'float')
        # Getting the type of 'MUSECONDS_PER_DAY' (line 1079)
        MUSECONDS_PER_DAY_46417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 24), 'MUSECONDS_PER_DAY')
        # Applying the binary operator 'div' (line 1079)
        result_div_46418 = python_operator(stypy.reporting.localization.Localization(__file__, 1079, 19), 'div', float_46416, MUSECONDS_PER_DAY_46417)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1079, 12), 'stypy_return_type', result_div_46418)
        # SSA branch for the else part of an if statement (line 1078)
        module_type_store.open_ssa_branch('else')
        
        # Call to get_unit_generic(...): (line 1081)
        # Processing the call arguments (line 1081)
        # Getting the type of 'self' (line 1081)
        self_46421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 49), 'self', False)
        # Obtaining the member '_freq' of a type (line 1081)
        _freq_46422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 49), self_46421, '_freq')
        # Processing the call keyword arguments (line 1081)
        kwargs_46423 = {}
        # Getting the type of 'RRuleLocator' (line 1081)
        RRuleLocator_46419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 19), 'RRuleLocator', False)
        # Obtaining the member 'get_unit_generic' of a type (line 1081)
        get_unit_generic_46420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 19), RRuleLocator_46419, 'get_unit_generic')
        # Calling get_unit_generic(args, kwargs) (line 1081)
        get_unit_generic_call_result_46424 = invoke(stypy.reporting.localization.Localization(__file__, 1081, 19), get_unit_generic_46420, *[_freq_46422], **kwargs_46423)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 12), 'stypy_return_type', get_unit_generic_call_result_46424)
        # SSA join for if statement (line 1078)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_get_unit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_unit' in the type store
        # Getting the type of 'stypy_return_type' (line 1077)
        stypy_return_type_46425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46425)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_unit'
        return stypy_return_type_46425


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 1083, 4, False)
        # Assigning a type to the variable 'self' (line 1084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1084, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_localization', localization)
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_function_name', 'AutoDateLocator.autoscale')
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_param_names_list', [])
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoDateLocator.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateLocator.autoscale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        unicode_46426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1084, 8), 'unicode', u'Try to choose the view limits intelligently.')
        
        # Assigning a Call to a Tuple (line 1085):
        
        # Assigning a Call to a Name:
        
        # Call to datalim_to_dt(...): (line 1085)
        # Processing the call keyword arguments (line 1085)
        kwargs_46429 = {}
        # Getting the type of 'self' (line 1085)
        self_46427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 21), 'self', False)
        # Obtaining the member 'datalim_to_dt' of a type (line 1085)
        datalim_to_dt_46428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 21), self_46427, 'datalim_to_dt')
        # Calling datalim_to_dt(args, kwargs) (line 1085)
        datalim_to_dt_call_result_46430 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 21), datalim_to_dt_46428, *[], **kwargs_46429)
        
        # Assigning a type to the variable 'call_assignment_44540' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'call_assignment_44540', datalim_to_dt_call_result_46430)
        
        # Assigning a Call to a Name (line 1085):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1085, 8), 'int')
        # Processing the call keyword arguments
        kwargs_46434 = {}
        # Getting the type of 'call_assignment_44540' (line 1085)
        call_assignment_44540_46431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'call_assignment_44540', False)
        # Obtaining the member '__getitem__' of a type (line 1085)
        getitem___46432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 8), call_assignment_44540_46431, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46435 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46432, *[int_46433], **kwargs_46434)
        
        # Assigning a type to the variable 'call_assignment_44541' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'call_assignment_44541', getitem___call_result_46435)
        
        # Assigning a Name to a Name (line 1085):
        # Getting the type of 'call_assignment_44541' (line 1085)
        call_assignment_44541_46436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'call_assignment_44541')
        # Assigning a type to the variable 'dmin' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'dmin', call_assignment_44541_46436)
        
        # Assigning a Call to a Name (line 1085):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1085, 8), 'int')
        # Processing the call keyword arguments
        kwargs_46440 = {}
        # Getting the type of 'call_assignment_44540' (line 1085)
        call_assignment_44540_46437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'call_assignment_44540', False)
        # Obtaining the member '__getitem__' of a type (line 1085)
        getitem___46438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 8), call_assignment_44540_46437, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46441 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46438, *[int_46439], **kwargs_46440)
        
        # Assigning a type to the variable 'call_assignment_44542' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'call_assignment_44542', getitem___call_result_46441)
        
        # Assigning a Name to a Name (line 1085):
        # Getting the type of 'call_assignment_44542' (line 1085)
        call_assignment_44542_46442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'call_assignment_44542')
        # Assigning a type to the variable 'dmax' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 14), 'dmax', call_assignment_44542_46442)
        
        # Assigning a Call to a Attribute (line 1086):
        
        # Assigning a Call to a Attribute (line 1086):
        
        # Call to get_locator(...): (line 1086)
        # Processing the call arguments (line 1086)
        # Getting the type of 'dmin' (line 1086)
        dmin_46445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 41), 'dmin', False)
        # Getting the type of 'dmax' (line 1086)
        dmax_46446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 47), 'dmax', False)
        # Processing the call keyword arguments (line 1086)
        kwargs_46447 = {}
        # Getting the type of 'self' (line 1086)
        self_46443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 24), 'self', False)
        # Obtaining the member 'get_locator' of a type (line 1086)
        get_locator_46444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 24), self_46443, 'get_locator')
        # Calling get_locator(args, kwargs) (line 1086)
        get_locator_call_result_46448 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 24), get_locator_46444, *[dmin_46445, dmax_46446], **kwargs_46447)
        
        # Getting the type of 'self' (line 1086)
        self_46449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 8), 'self')
        # Setting the type of the member '_locator' of a type (line 1086)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 8), self_46449, '_locator', get_locator_call_result_46448)
        
        # Call to autoscale(...): (line 1087)
        # Processing the call keyword arguments (line 1087)
        kwargs_46453 = {}
        # Getting the type of 'self' (line 1087)
        self_46450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 15), 'self', False)
        # Obtaining the member '_locator' of a type (line 1087)
        _locator_46451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 15), self_46450, '_locator')
        # Obtaining the member 'autoscale' of a type (line 1087)
        autoscale_46452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 15), _locator_46451, 'autoscale')
        # Calling autoscale(args, kwargs) (line 1087)
        autoscale_call_result_46454 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 15), autoscale_46452, *[], **kwargs_46453)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 8), 'stypy_return_type', autoscale_call_result_46454)
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 1083)
        stypy_return_type_46455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46455)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_46455


    @norecursion
    def get_locator(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_locator'
        module_type_store = module_type_store.open_function_context('get_locator', 1089, 4, False)
        # Assigning a type to the variable 'self' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_localization', localization)
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_function_name', 'AutoDateLocator.get_locator')
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_param_names_list', ['dmin', 'dmax'])
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoDateLocator.get_locator.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoDateLocator.get_locator', ['dmin', 'dmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_locator', localization, ['dmin', 'dmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_locator(...)' code ##################

        unicode_46456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 8), 'unicode', u'Pick the best locator based on a distance.')
        
        # Assigning a Call to a Name (line 1091):
        
        # Assigning a Call to a Name (line 1091):
        
        # Call to relativedelta(...): (line 1091)
        # Processing the call arguments (line 1091)
        # Getting the type of 'dmax' (line 1091)
        dmax_46458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 30), 'dmax', False)
        # Getting the type of 'dmin' (line 1091)
        dmin_46459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 36), 'dmin', False)
        # Processing the call keyword arguments (line 1091)
        kwargs_46460 = {}
        # Getting the type of 'relativedelta' (line 1091)
        relativedelta_46457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 16), 'relativedelta', False)
        # Calling relativedelta(args, kwargs) (line 1091)
        relativedelta_call_result_46461 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 16), relativedelta_46457, *[dmax_46458, dmin_46459], **kwargs_46460)
        
        # Assigning a type to the variable 'delta' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'delta', relativedelta_call_result_46461)
        
        # Assigning a BinOp to a Name (line 1092):
        
        # Assigning a BinOp to a Name (line 1092):
        # Getting the type of 'dmax' (line 1092)
        dmax_46462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 17), 'dmax')
        # Getting the type of 'dmin' (line 1092)
        dmin_46463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 24), 'dmin')
        # Applying the binary operator '-' (line 1092)
        result_sub_46464 = python_operator(stypy.reporting.localization.Localization(__file__, 1092, 17), '-', dmax_46462, dmin_46463)
        
        # Assigning a type to the variable 'tdelta' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'tdelta', result_sub_46464)
        
        
        # Getting the type of 'dmin' (line 1095)
        dmin_46465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 11), 'dmin')
        # Getting the type of 'dmax' (line 1095)
        dmax_46466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 18), 'dmax')
        # Applying the binary operator '>' (line 1095)
        result_gt_46467 = python_operator(stypy.reporting.localization.Localization(__file__, 1095, 11), '>', dmin_46465, dmax_46466)
        
        # Testing the type of an if condition (line 1095)
        if_condition_46468 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1095, 8), result_gt_46467)
        # Assigning a type to the variable 'if_condition_46468' (line 1095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 8), 'if_condition_46468', if_condition_46468)
        # SSA begins for if statement (line 1095)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a UnaryOp to a Name (line 1096):
        
        # Assigning a UnaryOp to a Name (line 1096):
        
        # Getting the type of 'delta' (line 1096)
        delta_46469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 21), 'delta')
        # Applying the 'usub' unary operator (line 1096)
        result___neg___46470 = python_operator(stypy.reporting.localization.Localization(__file__, 1096, 20), 'usub', delta_46469)
        
        # Assigning a type to the variable 'delta' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 12), 'delta', result___neg___46470)
        
        # Assigning a UnaryOp to a Name (line 1097):
        
        # Assigning a UnaryOp to a Name (line 1097):
        
        # Getting the type of 'tdelta' (line 1097)
        tdelta_46471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 22), 'tdelta')
        # Applying the 'usub' unary operator (line 1097)
        result___neg___46472 = python_operator(stypy.reporting.localization.Localization(__file__, 1097, 21), 'usub', tdelta_46471)
        
        # Assigning a type to the variable 'tdelta' (line 1097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1097, 12), 'tdelta', result___neg___46472)
        # SSA join for if statement (line 1095)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1103):
        
        # Assigning a Call to a Name (line 1103):
        
        # Call to float(...): (line 1103)
        # Processing the call arguments (line 1103)
        # Getting the type of 'delta' (line 1103)
        delta_46474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 25), 'delta', False)
        # Obtaining the member 'years' of a type (line 1103)
        years_46475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 25), delta_46474, 'years')
        # Processing the call keyword arguments (line 1103)
        kwargs_46476 = {}
        # Getting the type of 'float' (line 1103)
        float_46473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 19), 'float', False)
        # Calling float(args, kwargs) (line 1103)
        float_call_result_46477 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 19), float_46473, *[years_46475], **kwargs_46476)
        
        # Assigning a type to the variable 'numYears' (line 1103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 8), 'numYears', float_call_result_46477)
        
        # Assigning a BinOp to a Name (line 1104):
        
        # Assigning a BinOp to a Name (line 1104):
        # Getting the type of 'numYears' (line 1104)
        numYears_46478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 21), 'numYears')
        # Getting the type of 'MONTHS_PER_YEAR' (line 1104)
        MONTHS_PER_YEAR_46479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 32), 'MONTHS_PER_YEAR')
        # Applying the binary operator '*' (line 1104)
        result_mul_46480 = python_operator(stypy.reporting.localization.Localization(__file__, 1104, 21), '*', numYears_46478, MONTHS_PER_YEAR_46479)
        
        # Getting the type of 'delta' (line 1104)
        delta_46481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 51), 'delta')
        # Obtaining the member 'months' of a type (line 1104)
        months_46482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 51), delta_46481, 'months')
        # Applying the binary operator '+' (line 1104)
        result_add_46483 = python_operator(stypy.reporting.localization.Localization(__file__, 1104, 20), '+', result_mul_46480, months_46482)
        
        # Assigning a type to the variable 'numMonths' (line 1104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1104, 8), 'numMonths', result_add_46483)
        
        # Assigning a Attribute to a Name (line 1105):
        
        # Assigning a Attribute to a Name (line 1105):
        # Getting the type of 'tdelta' (line 1105)
        tdelta_46484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 18), 'tdelta')
        # Obtaining the member 'days' of a type (line 1105)
        days_46485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 18), tdelta_46484, 'days')
        # Assigning a type to the variable 'numDays' (line 1105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'numDays', days_46485)
        
        # Assigning a BinOp to a Name (line 1106):
        
        # Assigning a BinOp to a Name (line 1106):
        # Getting the type of 'numDays' (line 1106)
        numDays_46486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 20), 'numDays')
        # Getting the type of 'HOURS_PER_DAY' (line 1106)
        HOURS_PER_DAY_46487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 30), 'HOURS_PER_DAY')
        # Applying the binary operator '*' (line 1106)
        result_mul_46488 = python_operator(stypy.reporting.localization.Localization(__file__, 1106, 20), '*', numDays_46486, HOURS_PER_DAY_46487)
        
        # Getting the type of 'delta' (line 1106)
        delta_46489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 47), 'delta')
        # Obtaining the member 'hours' of a type (line 1106)
        hours_46490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 47), delta_46489, 'hours')
        # Applying the binary operator '+' (line 1106)
        result_add_46491 = python_operator(stypy.reporting.localization.Localization(__file__, 1106, 19), '+', result_mul_46488, hours_46490)
        
        # Assigning a type to the variable 'numHours' (line 1106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 8), 'numHours', result_add_46491)
        
        # Assigning a BinOp to a Name (line 1107):
        
        # Assigning a BinOp to a Name (line 1107):
        # Getting the type of 'numHours' (line 1107)
        numHours_46492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 22), 'numHours')
        # Getting the type of 'MIN_PER_HOUR' (line 1107)
        MIN_PER_HOUR_46493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 33), 'MIN_PER_HOUR')
        # Applying the binary operator '*' (line 1107)
        result_mul_46494 = python_operator(stypy.reporting.localization.Localization(__file__, 1107, 22), '*', numHours_46492, MIN_PER_HOUR_46493)
        
        # Getting the type of 'delta' (line 1107)
        delta_46495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 49), 'delta')
        # Obtaining the member 'minutes' of a type (line 1107)
        minutes_46496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 49), delta_46495, 'minutes')
        # Applying the binary operator '+' (line 1107)
        result_add_46497 = python_operator(stypy.reporting.localization.Localization(__file__, 1107, 21), '+', result_mul_46494, minutes_46496)
        
        # Assigning a type to the variable 'numMinutes' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'numMinutes', result_add_46497)
        
        # Assigning a Call to a Name (line 1108):
        
        # Assigning a Call to a Name (line 1108):
        
        # Call to floor(...): (line 1108)
        # Processing the call arguments (line 1108)
        
        # Call to total_seconds(...): (line 1108)
        # Processing the call keyword arguments (line 1108)
        kwargs_46502 = {}
        # Getting the type of 'tdelta' (line 1108)
        tdelta_46500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 30), 'tdelta', False)
        # Obtaining the member 'total_seconds' of a type (line 1108)
        total_seconds_46501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 30), tdelta_46500, 'total_seconds')
        # Calling total_seconds(args, kwargs) (line 1108)
        total_seconds_call_result_46503 = invoke(stypy.reporting.localization.Localization(__file__, 1108, 30), total_seconds_46501, *[], **kwargs_46502)
        
        # Processing the call keyword arguments (line 1108)
        kwargs_46504 = {}
        # Getting the type of 'np' (line 1108)
        np_46498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 21), 'np', False)
        # Obtaining the member 'floor' of a type (line 1108)
        floor_46499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 21), np_46498, 'floor')
        # Calling floor(args, kwargs) (line 1108)
        floor_call_result_46505 = invoke(stypy.reporting.localization.Localization(__file__, 1108, 21), floor_46499, *[total_seconds_call_result_46503], **kwargs_46504)
        
        # Assigning a type to the variable 'numSeconds' (line 1108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'numSeconds', floor_call_result_46505)
        
        # Assigning a Call to a Name (line 1109):
        
        # Assigning a Call to a Name (line 1109):
        
        # Call to floor(...): (line 1109)
        # Processing the call arguments (line 1109)
        
        # Call to total_seconds(...): (line 1109)
        # Processing the call keyword arguments (line 1109)
        kwargs_46510 = {}
        # Getting the type of 'tdelta' (line 1109)
        tdelta_46508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 35), 'tdelta', False)
        # Obtaining the member 'total_seconds' of a type (line 1109)
        total_seconds_46509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 35), tdelta_46508, 'total_seconds')
        # Calling total_seconds(args, kwargs) (line 1109)
        total_seconds_call_result_46511 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 35), total_seconds_46509, *[], **kwargs_46510)
        
        float_46512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 60), 'float')
        # Applying the binary operator '*' (line 1109)
        result_mul_46513 = python_operator(stypy.reporting.localization.Localization(__file__, 1109, 35), '*', total_seconds_call_result_46511, float_46512)
        
        # Processing the call keyword arguments (line 1109)
        kwargs_46514 = {}
        # Getting the type of 'np' (line 1109)
        np_46506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 26), 'np', False)
        # Obtaining the member 'floor' of a type (line 1109)
        floor_46507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 26), np_46506, 'floor')
        # Calling floor(args, kwargs) (line 1109)
        floor_call_result_46515 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 26), floor_46507, *[result_mul_46513], **kwargs_46514)
        
        # Assigning a type to the variable 'numMicroseconds' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'numMicroseconds', floor_call_result_46515)
        
        # Assigning a List to a Name (line 1111):
        
        # Assigning a List to a Name (line 1111):
        
        # Obtaining an instance of the builtin type 'list' (line 1111)
        list_46516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1111, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1111)
        # Adding element type (line 1111)
        # Getting the type of 'numYears' (line 1111)
        numYears_46517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 16), 'numYears')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1111, 15), list_46516, numYears_46517)
        # Adding element type (line 1111)
        # Getting the type of 'numMonths' (line 1111)
        numMonths_46518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 26), 'numMonths')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1111, 15), list_46516, numMonths_46518)
        # Adding element type (line 1111)
        # Getting the type of 'numDays' (line 1111)
        numDays_46519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 37), 'numDays')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1111, 15), list_46516, numDays_46519)
        # Adding element type (line 1111)
        # Getting the type of 'numHours' (line 1111)
        numHours_46520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 46), 'numHours')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1111, 15), list_46516, numHours_46520)
        # Adding element type (line 1111)
        # Getting the type of 'numMinutes' (line 1111)
        numMinutes_46521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 56), 'numMinutes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1111, 15), list_46516, numMinutes_46521)
        # Adding element type (line 1111)
        # Getting the type of 'numSeconds' (line 1112)
        numSeconds_46522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 16), 'numSeconds')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1111, 15), list_46516, numSeconds_46522)
        # Adding element type (line 1111)
        # Getting the type of 'numMicroseconds' (line 1112)
        numMicroseconds_46523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 28), 'numMicroseconds')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1111, 15), list_46516, numMicroseconds_46523)
        
        # Assigning a type to the variable 'nums' (line 1111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'nums', list_46516)
        
        # Assigning a BinOp to a Name (line 1114):
        
        # Assigning a BinOp to a Name (line 1114):
        
        # Obtaining an instance of the builtin type 'list' (line 1114)
        list_46524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1114)
        # Adding element type (line 1114)
        # Getting the type of 'True' (line 1114)
        True_46525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 29), 'True')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1114, 28), list_46524, True_46525)
        
        int_46526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 37), 'int')
        # Applying the binary operator '*' (line 1114)
        result_mul_46527 = python_operator(stypy.reporting.localization.Localization(__file__, 1114, 28), '*', list_46524, int_46526)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1114)
        list_46528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1114)
        # Adding element type (line 1114)
        # Getting the type of 'False' (line 1114)
        False_46529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 42), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1114, 41), list_46528, False_46529)
        
        # Applying the binary operator '+' (line 1114)
        result_add_46530 = python_operator(stypy.reporting.localization.Localization(__file__, 1114, 28), '+', result_mul_46527, list_46528)
        
        # Assigning a type to the variable 'use_rrule_locator' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'use_rrule_locator', result_add_46530)
        
        # Assigning a List to a Name (line 1119):
        
        # Assigning a List to a Name (line 1119):
        
        # Obtaining an instance of the builtin type 'list' (line 1119)
        list_46531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1119)
        # Adding element type (line 1119)
        # Getting the type of 'None' (line 1119)
        None_46532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 20), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1119, 19), list_46531, None_46532)
        # Adding element type (line 1119)
        int_46533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1119, 19), list_46531, int_46533)
        # Adding element type (line 1119)
        int_46534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1119, 19), list_46531, int_46534)
        # Adding element type (line 1119)
        int_46535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1119, 19), list_46531, int_46535)
        # Adding element type (line 1119)
        int_46536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1119, 19), list_46531, int_46536)
        # Adding element type (line 1119)
        int_46537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 38), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1119, 19), list_46531, int_46537)
        # Adding element type (line 1119)
        # Getting the type of 'None' (line 1119)
        None_46538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 41), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1119, 19), list_46531, None_46538)
        
        # Assigning a type to the variable 'byranges' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'byranges', list_46531)
        
        
        # Call to enumerate(...): (line 1126)
        # Processing the call arguments (line 1126)
        
        # Call to zip(...): (line 1126)
        # Processing the call arguments (line 1126)
        # Getting the type of 'self' (line 1126)
        self_46541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 44), 'self', False)
        # Obtaining the member '_freqs' of a type (line 1126)
        _freqs_46542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 44), self_46541, '_freqs')
        # Getting the type of 'nums' (line 1126)
        nums_46543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 57), 'nums', False)
        # Processing the call keyword arguments (line 1126)
        kwargs_46544 = {}
        # Getting the type of 'zip' (line 1126)
        zip_46540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 40), 'zip', False)
        # Calling zip(args, kwargs) (line 1126)
        zip_call_result_46545 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 40), zip_46540, *[_freqs_46542, nums_46543], **kwargs_46544)
        
        # Processing the call keyword arguments (line 1126)
        kwargs_46546 = {}
        # Getting the type of 'enumerate' (line 1126)
        enumerate_46539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 30), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1126)
        enumerate_call_result_46547 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 30), enumerate_46539, *[zip_call_result_46545], **kwargs_46546)
        
        # Testing the type of a for loop iterable (line 1126)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1126, 8), enumerate_call_result_46547)
        # Getting the type of the for loop variable (line 1126)
        for_loop_var_46548 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1126, 8), enumerate_call_result_46547)
        # Assigning a type to the variable 'i' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1126, 8), for_loop_var_46548))
        # Assigning a type to the variable 'freq' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), 'freq', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1126, 8), for_loop_var_46548))
        # Assigning a type to the variable 'num' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), 'num', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1126, 8), for_loop_var_46548))
        # SSA begins for a for statement (line 1126)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'num' (line 1128)
        num_46549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 15), 'num')
        # Getting the type of 'self' (line 1128)
        self_46550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 21), 'self')
        # Obtaining the member 'minticks' of a type (line 1128)
        minticks_46551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 21), self_46550, 'minticks')
        # Applying the binary operator '<' (line 1128)
        result_lt_46552 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 15), '<', num_46549, minticks_46551)
        
        # Testing the type of an if condition (line 1128)
        if_condition_46553 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1128, 12), result_lt_46552)
        # Assigning a type to the variable 'if_condition_46553' (line 1128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 12), 'if_condition_46553', if_condition_46553)
        # SSA begins for if statement (line 1128)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 1132):
        
        # Assigning a Name to a Subscript (line 1132):
        # Getting the type of 'None' (line 1132)
        None_46554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 30), 'None')
        # Getting the type of 'byranges' (line 1132)
        byranges_46555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 16), 'byranges')
        # Getting the type of 'i' (line 1132)
        i_46556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 25), 'i')
        # Storing an element on a container (line 1132)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 16), byranges_46555, (i_46556, None_46554))
        # SSA join for if statement (line 1128)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'freq' (line 1137)
        freq_46557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 43), 'freq')
        # Getting the type of 'self' (line 1137)
        self_46558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 28), 'self')
        # Obtaining the member 'intervald' of a type (line 1137)
        intervald_46559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 28), self_46558, 'intervald')
        # Obtaining the member '__getitem__' of a type (line 1137)
        getitem___46560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 28), intervald_46559, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1137)
        subscript_call_result_46561 = invoke(stypy.reporting.localization.Localization(__file__, 1137, 28), getitem___46560, freq_46557)
        
        # Testing the type of a for loop iterable (line 1137)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1137, 12), subscript_call_result_46561)
        # Getting the type of the for loop variable (line 1137)
        for_loop_var_46562 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1137, 12), subscript_call_result_46561)
        # Assigning a type to the variable 'interval' (line 1137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 12), 'interval', for_loop_var_46562)
        # SSA begins for a for statement (line 1137)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'num' (line 1138)
        num_46563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 19), 'num')
        # Getting the type of 'interval' (line 1138)
        interval_46564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 26), 'interval')
        
        # Obtaining the type of the subscript
        # Getting the type of 'freq' (line 1138)
        freq_46565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 52), 'freq')
        # Getting the type of 'self' (line 1138)
        self_46566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 38), 'self')
        # Obtaining the member 'maxticks' of a type (line 1138)
        maxticks_46567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 38), self_46566, 'maxticks')
        # Obtaining the member '__getitem__' of a type (line 1138)
        getitem___46568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 38), maxticks_46567, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1138)
        subscript_call_result_46569 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 38), getitem___46568, freq_46565)
        
        int_46570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 60), 'int')
        # Applying the binary operator '-' (line 1138)
        result_sub_46571 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 38), '-', subscript_call_result_46569, int_46570)
        
        # Applying the binary operator '*' (line 1138)
        result_mul_46572 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 26), '*', interval_46564, result_sub_46571)
        
        # Applying the binary operator '<=' (line 1138)
        result_le_46573 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 19), '<=', num_46563, result_mul_46572)
        
        # Testing the type of an if condition (line 1138)
        if_condition_46574 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1138, 16), result_le_46573)
        # Assigning a type to the variable 'if_condition_46574' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 16), 'if_condition_46574', if_condition_46574)
        # SSA begins for if statement (line 1138)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1138)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of a for statement (line 1137)
        module_type_store.open_ssa_branch('for loop else')
        
        # Call to warn(...): (line 1143)
        # Processing the call arguments (line 1143)
        
        # Call to format(...): (line 1143)
        # Processing the call arguments (line 1143)
        # Getting the type of 'interval' (line 1147)
        interval_46579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 59), 'interval', False)
        # Processing the call keyword arguments (line 1143)
        kwargs_46580 = {}
        unicode_46577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 30), 'unicode', u"AutoDateLocator was unable to pick an appropriate interval for this date range. It may be necessary to add an interval value to the AutoDateLocator's intervald dictionary. Defaulting to {0}.")
        # Obtaining the member 'format' of a type (line 1143)
        format_46578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 30), unicode_46577, 'format')
        # Calling format(args, kwargs) (line 1143)
        format_call_result_46581 = invoke(stypy.reporting.localization.Localization(__file__, 1143, 30), format_46578, *[interval_46579], **kwargs_46580)
        
        # Processing the call keyword arguments (line 1143)
        kwargs_46582 = {}
        # Getting the type of 'warnings' (line 1143)
        warnings_46575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1143)
        warn_46576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 16), warnings_46575, 'warn')
        # Calling warn(args, kwargs) (line 1143)
        warn_call_result_46583 = invoke(stypy.reporting.localization.Localization(__file__, 1143, 16), warn_46576, *[format_call_result_46581], **kwargs_46582)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1150):
        
        # Assigning a Name to a Attribute (line 1150):
        # Getting the type of 'freq' (line 1150)
        freq_46584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 25), 'freq')
        # Getting the type of 'self' (line 1150)
        self_46585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 12), 'self')
        # Setting the type of the member '_freq' of a type (line 1150)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 12), self_46585, '_freq', freq_46584)
        
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1152)
        i_46586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 30), 'i')
        # Getting the type of 'self' (line 1152)
        self_46587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 15), 'self')
        # Obtaining the member '_byranges' of a type (line 1152)
        _byranges_46588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 15), self_46587, '_byranges')
        # Obtaining the member '__getitem__' of a type (line 1152)
        getitem___46589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 15), _byranges_46588, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1152)
        subscript_call_result_46590 = invoke(stypy.reporting.localization.Localization(__file__, 1152, 15), getitem___46589, i_46586)
        
        # Getting the type of 'self' (line 1152)
        self_46591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 37), 'self')
        # Obtaining the member 'interval_multiples' of a type (line 1152)
        interval_multiples_46592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 37), self_46591, 'interval_multiples')
        # Applying the binary operator 'and' (line 1152)
        result_and_keyword_46593 = python_operator(stypy.reporting.localization.Localization(__file__, 1152, 15), 'and', subscript_call_result_46590, interval_multiples_46592)
        
        # Testing the type of an if condition (line 1152)
        if_condition_46594 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1152, 12), result_and_keyword_46593)
        # Assigning a type to the variable 'if_condition_46594' (line 1152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1152, 12), 'if_condition_46594', if_condition_46594)
        # SSA begins for if statement (line 1152)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 1153):
        
        # Assigning a Subscript to a Subscript (line 1153):
        
        # Obtaining the type of the subscript
        # Getting the type of 'interval' (line 1153)
        interval_46595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 50), 'interval')
        slice_46596 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1153, 30), None, None, interval_46595)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1153)
        i_46597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 45), 'i')
        # Getting the type of 'self' (line 1153)
        self_46598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 30), 'self')
        # Obtaining the member '_byranges' of a type (line 1153)
        _byranges_46599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 30), self_46598, '_byranges')
        # Obtaining the member '__getitem__' of a type (line 1153)
        getitem___46600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 30), _byranges_46599, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1153)
        subscript_call_result_46601 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 30), getitem___46600, i_46597)
        
        # Obtaining the member '__getitem__' of a type (line 1153)
        getitem___46602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 30), subscript_call_result_46601, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1153)
        subscript_call_result_46603 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 30), getitem___46602, slice_46596)
        
        # Getting the type of 'byranges' (line 1153)
        byranges_46604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 16), 'byranges')
        # Getting the type of 'i' (line 1153)
        i_46605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 25), 'i')
        # Storing an element on a container (line 1153)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1153, 16), byranges_46604, (i_46605, subscript_call_result_46603))
        
        # Assigning a Num to a Name (line 1154):
        
        # Assigning a Num to a Name (line 1154):
        int_46606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1154, 27), 'int')
        # Assigning a type to the variable 'interval' (line 1154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 16), 'interval', int_46606)
        # SSA branch for the else part of an if statement (line 1152)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Subscript (line 1156):
        
        # Assigning a Subscript to a Subscript (line 1156):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1156)
        i_46607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 45), 'i')
        # Getting the type of 'self' (line 1156)
        self_46608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 30), 'self')
        # Obtaining the member '_byranges' of a type (line 1156)
        _byranges_46609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 30), self_46608, '_byranges')
        # Obtaining the member '__getitem__' of a type (line 1156)
        getitem___46610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 30), _byranges_46609, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1156)
        subscript_call_result_46611 = invoke(stypy.reporting.localization.Localization(__file__, 1156, 30), getitem___46610, i_46607)
        
        # Getting the type of 'byranges' (line 1156)
        byranges_46612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 16), 'byranges')
        # Getting the type of 'i' (line 1156)
        i_46613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 25), 'i')
        # Storing an element on a container (line 1156)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1156, 16), byranges_46612, (i_46613, subscript_call_result_46611))
        # SSA join for if statement (line 1152)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of a for statement (line 1126)
        module_type_store.open_ssa_branch('for loop else')
        
        # Call to ValueError(...): (line 1161)
        # Processing the call arguments (line 1161)
        unicode_46615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1161, 29), 'unicode', u'No sensible date limit could be found in the AutoDateLocator.')
        # Processing the call keyword arguments (line 1161)
        kwargs_46616 = {}
        # Getting the type of 'ValueError' (line 1161)
        ValueError_46614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1161)
        ValueError_call_result_46617 = invoke(stypy.reporting.localization.Localization(__file__, 1161, 18), ValueError_46614, *[unicode_46615], **kwargs_46616)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1161, 12), ValueError_call_result_46617, 'raise parameter', BaseException)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1164)
        i_46618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 29), 'i')
        # Getting the type of 'use_rrule_locator' (line 1164)
        use_rrule_locator_46619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 11), 'use_rrule_locator')
        # Obtaining the member '__getitem__' of a type (line 1164)
        getitem___46620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 11), use_rrule_locator_46619, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1164)
        subscript_call_result_46621 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 11), getitem___46620, i_46618)
        
        # Testing the type of an if condition (line 1164)
        if_condition_46622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1164, 8), subscript_call_result_46621)
        # Assigning a type to the variable 'if_condition_46622' (line 1164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 8), 'if_condition_46622', if_condition_46622)
        # SSA begins for if statement (line 1164)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 1165):
        
        # Assigning a Subscript to a Name (line 1165):
        
        # Obtaining the type of the subscript
        int_46623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 12), 'int')
        # Getting the type of 'byranges' (line 1165)
        byranges_46624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 68), 'byranges')
        # Obtaining the member '__getitem__' of a type (line 1165)
        getitem___46625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 12), byranges_46624, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1165)
        subscript_call_result_46626 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 12), getitem___46625, int_46623)
        
        # Assigning a type to the variable 'tuple_var_assignment_44543' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44543', subscript_call_result_46626)
        
        # Assigning a Subscript to a Name (line 1165):
        
        # Obtaining the type of the subscript
        int_46627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 12), 'int')
        # Getting the type of 'byranges' (line 1165)
        byranges_46628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 68), 'byranges')
        # Obtaining the member '__getitem__' of a type (line 1165)
        getitem___46629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 12), byranges_46628, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1165)
        subscript_call_result_46630 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 12), getitem___46629, int_46627)
        
        # Assigning a type to the variable 'tuple_var_assignment_44544' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44544', subscript_call_result_46630)
        
        # Assigning a Subscript to a Name (line 1165):
        
        # Obtaining the type of the subscript
        int_46631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 12), 'int')
        # Getting the type of 'byranges' (line 1165)
        byranges_46632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 68), 'byranges')
        # Obtaining the member '__getitem__' of a type (line 1165)
        getitem___46633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 12), byranges_46632, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1165)
        subscript_call_result_46634 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 12), getitem___46633, int_46631)
        
        # Assigning a type to the variable 'tuple_var_assignment_44545' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44545', subscript_call_result_46634)
        
        # Assigning a Subscript to a Name (line 1165):
        
        # Obtaining the type of the subscript
        int_46635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 12), 'int')
        # Getting the type of 'byranges' (line 1165)
        byranges_46636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 68), 'byranges')
        # Obtaining the member '__getitem__' of a type (line 1165)
        getitem___46637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 12), byranges_46636, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1165)
        subscript_call_result_46638 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 12), getitem___46637, int_46635)
        
        # Assigning a type to the variable 'tuple_var_assignment_44546' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44546', subscript_call_result_46638)
        
        # Assigning a Subscript to a Name (line 1165):
        
        # Obtaining the type of the subscript
        int_46639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 12), 'int')
        # Getting the type of 'byranges' (line 1165)
        byranges_46640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 68), 'byranges')
        # Obtaining the member '__getitem__' of a type (line 1165)
        getitem___46641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 12), byranges_46640, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1165)
        subscript_call_result_46642 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 12), getitem___46641, int_46639)
        
        # Assigning a type to the variable 'tuple_var_assignment_44547' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44547', subscript_call_result_46642)
        
        # Assigning a Subscript to a Name (line 1165):
        
        # Obtaining the type of the subscript
        int_46643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 12), 'int')
        # Getting the type of 'byranges' (line 1165)
        byranges_46644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 68), 'byranges')
        # Obtaining the member '__getitem__' of a type (line 1165)
        getitem___46645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 12), byranges_46644, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1165)
        subscript_call_result_46646 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 12), getitem___46645, int_46643)
        
        # Assigning a type to the variable 'tuple_var_assignment_44548' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44548', subscript_call_result_46646)
        
        # Assigning a Subscript to a Name (line 1165):
        
        # Obtaining the type of the subscript
        int_46647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 12), 'int')
        # Getting the type of 'byranges' (line 1165)
        byranges_46648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 68), 'byranges')
        # Obtaining the member '__getitem__' of a type (line 1165)
        getitem___46649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 12), byranges_46648, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1165)
        subscript_call_result_46650 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 12), getitem___46649, int_46647)
        
        # Assigning a type to the variable 'tuple_var_assignment_44549' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44549', subscript_call_result_46650)
        
        # Assigning a Name to a Name (line 1165):
        # Getting the type of 'tuple_var_assignment_44543' (line 1165)
        tuple_var_assignment_44543_46651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44543')
        # Assigning a type to the variable '_' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), '_', tuple_var_assignment_44543_46651)
        
        # Assigning a Name to a Name (line 1165):
        # Getting the type of 'tuple_var_assignment_44544' (line 1165)
        tuple_var_assignment_44544_46652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44544')
        # Assigning a type to the variable 'bymonth' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 15), 'bymonth', tuple_var_assignment_44544_46652)
        
        # Assigning a Name to a Name (line 1165):
        # Getting the type of 'tuple_var_assignment_44545' (line 1165)
        tuple_var_assignment_44545_46653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44545')
        # Assigning a type to the variable 'bymonthday' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 24), 'bymonthday', tuple_var_assignment_44545_46653)
        
        # Assigning a Name to a Name (line 1165):
        # Getting the type of 'tuple_var_assignment_44546' (line 1165)
        tuple_var_assignment_44546_46654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44546')
        # Assigning a type to the variable 'byhour' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 36), 'byhour', tuple_var_assignment_44546_46654)
        
        # Assigning a Name to a Name (line 1165):
        # Getting the type of 'tuple_var_assignment_44547' (line 1165)
        tuple_var_assignment_44547_46655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44547')
        # Assigning a type to the variable 'byminute' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 44), 'byminute', tuple_var_assignment_44547_46655)
        
        # Assigning a Name to a Name (line 1165):
        # Getting the type of 'tuple_var_assignment_44548' (line 1165)
        tuple_var_assignment_44548_46656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44548')
        # Assigning a type to the variable 'bysecond' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 54), 'bysecond', tuple_var_assignment_44548_46656)
        
        # Assigning a Name to a Name (line 1165):
        # Getting the type of 'tuple_var_assignment_44549' (line 1165)
        tuple_var_assignment_44549_46657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'tuple_var_assignment_44549')
        # Assigning a type to the variable '_' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 64), '_', tuple_var_assignment_44549_46657)
        
        # Assigning a Call to a Name (line 1167):
        
        # Assigning a Call to a Name (line 1167):
        
        # Call to rrulewrapper(...): (line 1167)
        # Processing the call arguments (line 1167)
        # Getting the type of 'self' (line 1167)
        self_46659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 33), 'self', False)
        # Obtaining the member '_freq' of a type (line 1167)
        _freq_46660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 33), self_46659, '_freq')
        # Processing the call keyword arguments (line 1167)
        # Getting the type of 'interval' (line 1167)
        interval_46661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 54), 'interval', False)
        keyword_46662 = interval_46661
        # Getting the type of 'dmin' (line 1168)
        dmin_46663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 41), 'dmin', False)
        keyword_46664 = dmin_46663
        # Getting the type of 'dmax' (line 1168)
        dmax_46665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 53), 'dmax', False)
        keyword_46666 = dmax_46665
        # Getting the type of 'bymonth' (line 1169)
        bymonth_46667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 41), 'bymonth', False)
        keyword_46668 = bymonth_46667
        # Getting the type of 'bymonthday' (line 1169)
        bymonthday_46669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 61), 'bymonthday', False)
        keyword_46670 = bymonthday_46669
        # Getting the type of 'byhour' (line 1170)
        byhour_46671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 40), 'byhour', False)
        keyword_46672 = byhour_46671
        # Getting the type of 'byminute' (line 1170)
        byminute_46673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 57), 'byminute', False)
        keyword_46674 = byminute_46673
        # Getting the type of 'bysecond' (line 1171)
        bysecond_46675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 42), 'bysecond', False)
        keyword_46676 = bysecond_46675
        kwargs_46677 = {'byhour': keyword_46672, 'bysecond': keyword_46676, 'bymonth': keyword_46668, 'interval': keyword_46662, 'bymonthday': keyword_46670, 'byminute': keyword_46674, 'dtstart': keyword_46664, 'until': keyword_46666}
        # Getting the type of 'rrulewrapper' (line 1167)
        rrulewrapper_46658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 20), 'rrulewrapper', False)
        # Calling rrulewrapper(args, kwargs) (line 1167)
        rrulewrapper_call_result_46678 = invoke(stypy.reporting.localization.Localization(__file__, 1167, 20), rrulewrapper_46658, *[_freq_46660], **kwargs_46677)
        
        # Assigning a type to the variable 'rrule' (line 1167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 12), 'rrule', rrulewrapper_call_result_46678)
        
        # Assigning a Call to a Name (line 1173):
        
        # Assigning a Call to a Name (line 1173):
        
        # Call to RRuleLocator(...): (line 1173)
        # Processing the call arguments (line 1173)
        # Getting the type of 'rrule' (line 1173)
        rrule_46680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 35), 'rrule', False)
        # Getting the type of 'self' (line 1173)
        self_46681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 42), 'self', False)
        # Obtaining the member 'tz' of a type (line 1173)
        tz_46682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 42), self_46681, 'tz')
        # Processing the call keyword arguments (line 1173)
        kwargs_46683 = {}
        # Getting the type of 'RRuleLocator' (line 1173)
        RRuleLocator_46679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 22), 'RRuleLocator', False)
        # Calling RRuleLocator(args, kwargs) (line 1173)
        RRuleLocator_call_result_46684 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 22), RRuleLocator_46679, *[rrule_46680, tz_46682], **kwargs_46683)
        
        # Assigning a type to the variable 'locator' (line 1173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1173, 12), 'locator', RRuleLocator_call_result_46684)
        # SSA branch for the else part of an if statement (line 1164)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1175):
        
        # Assigning a Call to a Name (line 1175):
        
        # Call to MicrosecondLocator(...): (line 1175)
        # Processing the call arguments (line 1175)
        # Getting the type of 'interval' (line 1175)
        interval_46686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 41), 'interval', False)
        # Processing the call keyword arguments (line 1175)
        # Getting the type of 'self' (line 1175)
        self_46687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 54), 'self', False)
        # Obtaining the member 'tz' of a type (line 1175)
        tz_46688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 54), self_46687, 'tz')
        keyword_46689 = tz_46688
        kwargs_46690 = {'tz': keyword_46689}
        # Getting the type of 'MicrosecondLocator' (line 1175)
        MicrosecondLocator_46685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 22), 'MicrosecondLocator', False)
        # Calling MicrosecondLocator(args, kwargs) (line 1175)
        MicrosecondLocator_call_result_46691 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 22), MicrosecondLocator_46685, *[interval_46686], **kwargs_46690)
        
        # Assigning a type to the variable 'locator' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 12), 'locator', MicrosecondLocator_call_result_46691)
        # SSA join for if statement (line 1164)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_axis(...): (line 1177)
        # Processing the call arguments (line 1177)
        # Getting the type of 'self' (line 1177)
        self_46694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 25), 'self', False)
        # Obtaining the member 'axis' of a type (line 1177)
        axis_46695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 25), self_46694, 'axis')
        # Processing the call keyword arguments (line 1177)
        kwargs_46696 = {}
        # Getting the type of 'locator' (line 1177)
        locator_46692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 8), 'locator', False)
        # Obtaining the member 'set_axis' of a type (line 1177)
        set_axis_46693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 8), locator_46692, 'set_axis')
        # Calling set_axis(args, kwargs) (line 1177)
        set_axis_call_result_46697 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 8), set_axis_46693, *[axis_46695], **kwargs_46696)
        
        
        # Call to set_view_interval(...): (line 1179)
        
        # Call to get_view_interval(...): (line 1179)
        # Processing the call keyword arguments (line 1179)
        kwargs_46703 = {}
        # Getting the type of 'self' (line 1179)
        self_46700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 35), 'self', False)
        # Obtaining the member 'axis' of a type (line 1179)
        axis_46701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 35), self_46700, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 1179)
        get_view_interval_46702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 35), axis_46701, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1179)
        get_view_interval_call_result_46704 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 35), get_view_interval_46702, *[], **kwargs_46703)
        
        # Processing the call keyword arguments (line 1179)
        kwargs_46705 = {}
        # Getting the type of 'locator' (line 1179)
        locator_46698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'locator', False)
        # Obtaining the member 'set_view_interval' of a type (line 1179)
        set_view_interval_46699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 8), locator_46698, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 1179)
        set_view_interval_call_result_46706 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 8), set_view_interval_46699, *[get_view_interval_call_result_46704], **kwargs_46705)
        
        
        # Call to set_data_interval(...): (line 1180)
        
        # Call to get_data_interval(...): (line 1180)
        # Processing the call keyword arguments (line 1180)
        kwargs_46712 = {}
        # Getting the type of 'self' (line 1180)
        self_46709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 35), 'self', False)
        # Obtaining the member 'axis' of a type (line 1180)
        axis_46710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 35), self_46709, 'axis')
        # Obtaining the member 'get_data_interval' of a type (line 1180)
        get_data_interval_46711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 35), axis_46710, 'get_data_interval')
        # Calling get_data_interval(args, kwargs) (line 1180)
        get_data_interval_call_result_46713 = invoke(stypy.reporting.localization.Localization(__file__, 1180, 35), get_data_interval_46711, *[], **kwargs_46712)
        
        # Processing the call keyword arguments (line 1180)
        kwargs_46714 = {}
        # Getting the type of 'locator' (line 1180)
        locator_46707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 8), 'locator', False)
        # Obtaining the member 'set_data_interval' of a type (line 1180)
        set_data_interval_46708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 8), locator_46707, 'set_data_interval')
        # Calling set_data_interval(args, kwargs) (line 1180)
        set_data_interval_call_result_46715 = invoke(stypy.reporting.localization.Localization(__file__, 1180, 8), set_data_interval_46708, *[get_data_interval_call_result_46713], **kwargs_46714)
        
        # Getting the type of 'locator' (line 1181)
        locator_46716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 15), 'locator')
        # Assigning a type to the variable 'stypy_return_type' (line 1181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 8), 'stypy_return_type', locator_46716)
        
        # ################# End of 'get_locator(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_locator' in the type store
        # Getting the type of 'stypy_return_type' (line 1089)
        stypy_return_type_46717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46717)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_locator'
        return stypy_return_type_46717


# Assigning a type to the variable 'AutoDateLocator' (line 966)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 0), 'AutoDateLocator', AutoDateLocator)
# Declaration of the 'YearLocator' class
# Getting the type of 'DateLocator' (line 1184)
DateLocator_46718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 18), 'DateLocator')

class YearLocator(DateLocator_46718, ):
    unicode_46719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, (-1)), 'unicode', u'\n    Make ticks on a given day of each year that is a multiple of base.\n\n    Examples::\n\n      # Tick every year on Jan 1st\n      locator = YearLocator()\n\n      # Tick every 5 years on July 4th\n      locator = YearLocator(5, month=7, day=4)\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_46720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 28), 'int')
        int_46721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 37), 'int')
        int_46722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 44), 'int')
        # Getting the type of 'None' (line 1196)
        None_46723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 50), 'None')
        defaults = [int_46720, int_46721, int_46722, None_46723]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1196, 4, False)
        # Assigning a type to the variable 'self' (line 1197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YearLocator.__init__', ['base', 'month', 'day', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['base', 'month', 'day', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_46724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, (-1)), 'unicode', u'\n        Mark years that are multiple of base on a given month and day\n        (default jan 1).\n        ')
        
        # Call to __init__(...): (line 1201)
        # Processing the call arguments (line 1201)
        # Getting the type of 'self' (line 1201)
        self_46727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 29), 'self', False)
        # Getting the type of 'tz' (line 1201)
        tz_46728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 35), 'tz', False)
        # Processing the call keyword arguments (line 1201)
        kwargs_46729 = {}
        # Getting the type of 'DateLocator' (line 1201)
        DateLocator_46725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 8), 'DateLocator', False)
        # Obtaining the member '__init__' of a type (line 1201)
        init___46726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 8), DateLocator_46725, '__init__')
        # Calling __init__(args, kwargs) (line 1201)
        init___call_result_46730 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 8), init___46726, *[self_46727, tz_46728], **kwargs_46729)
        
        
        # Assigning a Call to a Attribute (line 1202):
        
        # Assigning a Call to a Attribute (line 1202):
        
        # Call to Base(...): (line 1202)
        # Processing the call arguments (line 1202)
        # Getting the type of 'base' (line 1202)
        base_46733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 32), 'base', False)
        # Processing the call keyword arguments (line 1202)
        kwargs_46734 = {}
        # Getting the type of 'ticker' (line 1202)
        ticker_46731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 20), 'ticker', False)
        # Obtaining the member 'Base' of a type (line 1202)
        Base_46732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 20), ticker_46731, 'Base')
        # Calling Base(args, kwargs) (line 1202)
        Base_call_result_46735 = invoke(stypy.reporting.localization.Localization(__file__, 1202, 20), Base_46732, *[base_46733], **kwargs_46734)
        
        # Getting the type of 'self' (line 1202)
        self_46736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'self')
        # Setting the type of the member 'base' of a type (line 1202)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), self_46736, 'base', Base_call_result_46735)
        
        # Assigning a Dict to a Attribute (line 1203):
        
        # Assigning a Dict to a Attribute (line 1203):
        
        # Obtaining an instance of the builtin type 'dict' (line 1203)
        dict_46737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 24), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1203)
        # Adding element type (key, value) (line 1203)
        unicode_46738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 25), 'unicode', u'month')
        # Getting the type of 'month' (line 1203)
        month_46739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 35), 'month')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1203, 24), dict_46737, (unicode_46738, month_46739))
        # Adding element type (key, value) (line 1203)
        unicode_46740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 25), 'unicode', u'day')
        # Getting the type of 'day' (line 1204)
        day_46741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 35), 'day')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1203, 24), dict_46737, (unicode_46740, day_46741))
        # Adding element type (key, value) (line 1203)
        unicode_46742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 25), 'unicode', u'hour')
        int_46743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 35), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1203, 24), dict_46737, (unicode_46742, int_46743))
        # Adding element type (key, value) (line 1203)
        unicode_46744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 25), 'unicode', u'minute')
        int_46745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 35), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1203, 24), dict_46737, (unicode_46744, int_46745))
        # Adding element type (key, value) (line 1203)
        unicode_46746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1207, 25), 'unicode', u'second')
        int_46747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1207, 35), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1203, 24), dict_46737, (unicode_46746, int_46747))
        # Adding element type (key, value) (line 1203)
        unicode_46748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1208, 25), 'unicode', u'tzinfo')
        # Getting the type of 'tz' (line 1208)
        tz_46749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 35), 'tz')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1203, 24), dict_46737, (unicode_46748, tz_46749))
        
        # Getting the type of 'self' (line 1203)
        self_46750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 8), 'self')
        # Setting the type of the member 'replaced' of a type (line 1203)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 8), self_46750, 'replaced', dict_46737)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1211, 4, False)
        # Assigning a type to the variable 'self' (line 1212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YearLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        YearLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YearLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        YearLocator.__call__.__dict__.__setitem__('stypy_function_name', 'YearLocator.__call__')
        YearLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        YearLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        YearLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YearLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        YearLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        YearLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YearLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YearLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # SSA begins for try-except statement (line 1213)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Tuple (line 1214):
        
        # Assigning a Call to a Name:
        
        # Call to viewlim_to_dt(...): (line 1214)
        # Processing the call keyword arguments (line 1214)
        kwargs_46753 = {}
        # Getting the type of 'self' (line 1214)
        self_46751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 25), 'self', False)
        # Obtaining the member 'viewlim_to_dt' of a type (line 1214)
        viewlim_to_dt_46752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 25), self_46751, 'viewlim_to_dt')
        # Calling viewlim_to_dt(args, kwargs) (line 1214)
        viewlim_to_dt_call_result_46754 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 25), viewlim_to_dt_46752, *[], **kwargs_46753)
        
        # Assigning a type to the variable 'call_assignment_44550' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'call_assignment_44550', viewlim_to_dt_call_result_46754)
        
        # Assigning a Call to a Name (line 1214):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 12), 'int')
        # Processing the call keyword arguments
        kwargs_46758 = {}
        # Getting the type of 'call_assignment_44550' (line 1214)
        call_assignment_44550_46755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'call_assignment_44550', False)
        # Obtaining the member '__getitem__' of a type (line 1214)
        getitem___46756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 12), call_assignment_44550_46755, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46759 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46756, *[int_46757], **kwargs_46758)
        
        # Assigning a type to the variable 'call_assignment_44551' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'call_assignment_44551', getitem___call_result_46759)
        
        # Assigning a Name to a Name (line 1214):
        # Getting the type of 'call_assignment_44551' (line 1214)
        call_assignment_44551_46760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'call_assignment_44551')
        # Assigning a type to the variable 'dmin' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'dmin', call_assignment_44551_46760)
        
        # Assigning a Call to a Name (line 1214):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 12), 'int')
        # Processing the call keyword arguments
        kwargs_46764 = {}
        # Getting the type of 'call_assignment_44550' (line 1214)
        call_assignment_44550_46761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'call_assignment_44550', False)
        # Obtaining the member '__getitem__' of a type (line 1214)
        getitem___46762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 12), call_assignment_44550_46761, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46765 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46762, *[int_46763], **kwargs_46764)
        
        # Assigning a type to the variable 'call_assignment_44552' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'call_assignment_44552', getitem___call_result_46765)
        
        # Assigning a Name to a Name (line 1214):
        # Getting the type of 'call_assignment_44552' (line 1214)
        call_assignment_44552_46766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'call_assignment_44552')
        # Assigning a type to the variable 'dmax' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 18), 'dmax', call_assignment_44552_46766)
        # SSA branch for the except part of a try statement (line 1213)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1213)
        module_type_store.open_ssa_branch('except')
        
        # Obtaining an instance of the builtin type 'list' (line 1216)
        list_46767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1216)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 12), 'stypy_return_type', list_46767)
        # SSA join for try-except statement (line 1213)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to tick_values(...): (line 1218)
        # Processing the call arguments (line 1218)
        # Getting the type of 'dmin' (line 1218)
        dmin_46770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 32), 'dmin', False)
        # Getting the type of 'dmax' (line 1218)
        dmax_46771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 38), 'dmax', False)
        # Processing the call keyword arguments (line 1218)
        kwargs_46772 = {}
        # Getting the type of 'self' (line 1218)
        self_46768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 1218)
        tick_values_46769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 15), self_46768, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1218)
        tick_values_call_result_46773 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 15), tick_values_46769, *[dmin_46770, dmax_46771], **kwargs_46772)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 8), 'stypy_return_type', tick_values_call_result_46773)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1211)
        stypy_return_type_46774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46774)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_46774


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 1220, 4, False)
        # Assigning a type to the variable 'self' (line 1221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YearLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        YearLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YearLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        YearLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'YearLocator.tick_values')
        YearLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        YearLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        YearLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YearLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        YearLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        YearLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YearLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YearLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        # Assigning a Call to a Name (line 1221):
        
        # Assigning a Call to a Name (line 1221):
        
        # Call to le(...): (line 1221)
        # Processing the call arguments (line 1221)
        # Getting the type of 'vmin' (line 1221)
        vmin_46778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 28), 'vmin', False)
        # Obtaining the member 'year' of a type (line 1221)
        year_46779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 28), vmin_46778, 'year')
        # Processing the call keyword arguments (line 1221)
        kwargs_46780 = {}
        # Getting the type of 'self' (line 1221)
        self_46775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 1221)
        base_46776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 15), self_46775, 'base')
        # Obtaining the member 'le' of a type (line 1221)
        le_46777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 15), base_46776, 'le')
        # Calling le(args, kwargs) (line 1221)
        le_call_result_46781 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 15), le_46777, *[year_46779], **kwargs_46780)
        
        # Assigning a type to the variable 'ymin' (line 1221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 8), 'ymin', le_call_result_46781)
        
        # Assigning a Call to a Name (line 1222):
        
        # Assigning a Call to a Name (line 1222):
        
        # Call to ge(...): (line 1222)
        # Processing the call arguments (line 1222)
        # Getting the type of 'vmax' (line 1222)
        vmax_46785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 28), 'vmax', False)
        # Obtaining the member 'year' of a type (line 1222)
        year_46786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 28), vmax_46785, 'year')
        # Processing the call keyword arguments (line 1222)
        kwargs_46787 = {}
        # Getting the type of 'self' (line 1222)
        self_46782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 1222)
        base_46783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 15), self_46782, 'base')
        # Obtaining the member 'ge' of a type (line 1222)
        ge_46784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 15), base_46783, 'ge')
        # Calling ge(args, kwargs) (line 1222)
        ge_call_result_46788 = invoke(stypy.reporting.localization.Localization(__file__, 1222, 15), ge_46784, *[year_46786], **kwargs_46787)
        
        # Assigning a type to the variable 'ymax' (line 1222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 8), 'ymax', ge_call_result_46788)
        
        # Assigning a List to a Name (line 1224):
        
        # Assigning a List to a Name (line 1224):
        
        # Obtaining an instance of the builtin type 'list' (line 1224)
        list_46789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1224)
        # Adding element type (line 1224)
        
        # Call to replace(...): (line 1224)
        # Processing the call keyword arguments (line 1224)
        # Getting the type of 'ymin' (line 1224)
        ymin_46792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 35), 'ymin', False)
        keyword_46793 = ymin_46792
        # Getting the type of 'self' (line 1224)
        self_46794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 43), 'self', False)
        # Obtaining the member 'replaced' of a type (line 1224)
        replaced_46795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 43), self_46794, 'replaced')
        kwargs_46796 = {'replaced_46795': replaced_46795, 'year': keyword_46793}
        # Getting the type of 'vmin' (line 1224)
        vmin_46790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 17), 'vmin', False)
        # Obtaining the member 'replace' of a type (line 1224)
        replace_46791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 17), vmin_46790, 'replace')
        # Calling replace(args, kwargs) (line 1224)
        replace_call_result_46797 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 17), replace_46791, *[], **kwargs_46796)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1224, 16), list_46789, replace_call_result_46797)
        
        # Assigning a type to the variable 'ticks' (line 1224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1224, 8), 'ticks', list_46789)
        
        # Getting the type of 'True' (line 1225)
        True_46798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 14), 'True')
        # Testing the type of an if condition (line 1225)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1225, 8), True_46798)
        # SSA begins for while statement (line 1225)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Subscript to a Name (line 1226):
        
        # Assigning a Subscript to a Name (line 1226):
        
        # Obtaining the type of the subscript
        int_46799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 23), 'int')
        # Getting the type of 'ticks' (line 1226)
        ticks_46800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 17), 'ticks')
        # Obtaining the member '__getitem__' of a type (line 1226)
        getitem___46801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 17), ticks_46800, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1226)
        subscript_call_result_46802 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 17), getitem___46801, int_46799)
        
        # Assigning a type to the variable 'dt' (line 1226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 12), 'dt', subscript_call_result_46802)
        
        
        # Getting the type of 'dt' (line 1227)
        dt_46803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 15), 'dt')
        # Obtaining the member 'year' of a type (line 1227)
        year_46804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 15), dt_46803, 'year')
        # Getting the type of 'ymax' (line 1227)
        ymax_46805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 26), 'ymax')
        # Applying the binary operator '>=' (line 1227)
        result_ge_46806 = python_operator(stypy.reporting.localization.Localization(__file__, 1227, 15), '>=', year_46804, ymax_46805)
        
        # Testing the type of an if condition (line 1227)
        if_condition_46807 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1227, 12), result_ge_46806)
        # Assigning a type to the variable 'if_condition_46807' (line 1227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 12), 'if_condition_46807', if_condition_46807)
        # SSA begins for if statement (line 1227)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to date2num(...): (line 1228)
        # Processing the call arguments (line 1228)
        # Getting the type of 'ticks' (line 1228)
        ticks_46809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 32), 'ticks', False)
        # Processing the call keyword arguments (line 1228)
        kwargs_46810 = {}
        # Getting the type of 'date2num' (line 1228)
        date2num_46808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 23), 'date2num', False)
        # Calling date2num(args, kwargs) (line 1228)
        date2num_call_result_46811 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 23), date2num_46808, *[ticks_46809], **kwargs_46810)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 16), 'stypy_return_type', date2num_call_result_46811)
        # SSA join for if statement (line 1227)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1229):
        
        # Assigning a BinOp to a Name (line 1229):
        # Getting the type of 'dt' (line 1229)
        dt_46812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 19), 'dt')
        # Obtaining the member 'year' of a type (line 1229)
        year_46813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 19), dt_46812, 'year')
        
        # Call to get_base(...): (line 1229)
        # Processing the call keyword arguments (line 1229)
        kwargs_46817 = {}
        # Getting the type of 'self' (line 1229)
        self_46814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 29), 'self', False)
        # Obtaining the member 'base' of a type (line 1229)
        base_46815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 29), self_46814, 'base')
        # Obtaining the member 'get_base' of a type (line 1229)
        get_base_46816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 29), base_46815, 'get_base')
        # Calling get_base(args, kwargs) (line 1229)
        get_base_call_result_46818 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 29), get_base_46816, *[], **kwargs_46817)
        
        # Applying the binary operator '+' (line 1229)
        result_add_46819 = python_operator(stypy.reporting.localization.Localization(__file__, 1229, 19), '+', year_46813, get_base_call_result_46818)
        
        # Assigning a type to the variable 'year' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'year', result_add_46819)
        
        # Call to append(...): (line 1230)
        # Processing the call arguments (line 1230)
        
        # Call to replace(...): (line 1230)
        # Processing the call keyword arguments (line 1230)
        # Getting the type of 'year' (line 1230)
        year_46824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 41), 'year', False)
        keyword_46825 = year_46824
        # Getting the type of 'self' (line 1230)
        self_46826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 49), 'self', False)
        # Obtaining the member 'replaced' of a type (line 1230)
        replaced_46827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 49), self_46826, 'replaced')
        kwargs_46828 = {'replaced_46827': replaced_46827, 'year': keyword_46825}
        # Getting the type of 'dt' (line 1230)
        dt_46822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 25), 'dt', False)
        # Obtaining the member 'replace' of a type (line 1230)
        replace_46823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 25), dt_46822, 'replace')
        # Calling replace(args, kwargs) (line 1230)
        replace_call_result_46829 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 25), replace_46823, *[], **kwargs_46828)
        
        # Processing the call keyword arguments (line 1230)
        kwargs_46830 = {}
        # Getting the type of 'ticks' (line 1230)
        ticks_46820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 12), 'ticks', False)
        # Obtaining the member 'append' of a type (line 1230)
        append_46821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 12), ticks_46820, 'append')
        # Calling append(args, kwargs) (line 1230)
        append_call_result_46831 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 12), append_46821, *[replace_call_result_46829], **kwargs_46830)
        
        # SSA join for while statement (line 1225)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1220)
        stypy_return_type_46832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46832)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_46832


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 1232, 4, False)
        # Assigning a type to the variable 'self' (line 1233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YearLocator.autoscale.__dict__.__setitem__('stypy_localization', localization)
        YearLocator.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YearLocator.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        YearLocator.autoscale.__dict__.__setitem__('stypy_function_name', 'YearLocator.autoscale')
        YearLocator.autoscale.__dict__.__setitem__('stypy_param_names_list', [])
        YearLocator.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        YearLocator.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YearLocator.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        YearLocator.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        YearLocator.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YearLocator.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YearLocator.autoscale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        unicode_46833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, (-1)), 'unicode', u'\n        Set the view limits to include the data range.\n        ')
        
        # Assigning a Call to a Tuple (line 1236):
        
        # Assigning a Call to a Name:
        
        # Call to datalim_to_dt(...): (line 1236)
        # Processing the call keyword arguments (line 1236)
        kwargs_46836 = {}
        # Getting the type of 'self' (line 1236)
        self_46834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 21), 'self', False)
        # Obtaining the member 'datalim_to_dt' of a type (line 1236)
        datalim_to_dt_46835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 21), self_46834, 'datalim_to_dt')
        # Calling datalim_to_dt(args, kwargs) (line 1236)
        datalim_to_dt_call_result_46837 = invoke(stypy.reporting.localization.Localization(__file__, 1236, 21), datalim_to_dt_46835, *[], **kwargs_46836)
        
        # Assigning a type to the variable 'call_assignment_44553' (line 1236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'call_assignment_44553', datalim_to_dt_call_result_46837)
        
        # Assigning a Call to a Name (line 1236):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 8), 'int')
        # Processing the call keyword arguments
        kwargs_46841 = {}
        # Getting the type of 'call_assignment_44553' (line 1236)
        call_assignment_44553_46838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'call_assignment_44553', False)
        # Obtaining the member '__getitem__' of a type (line 1236)
        getitem___46839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 8), call_assignment_44553_46838, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46842 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46839, *[int_46840], **kwargs_46841)
        
        # Assigning a type to the variable 'call_assignment_44554' (line 1236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'call_assignment_44554', getitem___call_result_46842)
        
        # Assigning a Name to a Name (line 1236):
        # Getting the type of 'call_assignment_44554' (line 1236)
        call_assignment_44554_46843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'call_assignment_44554')
        # Assigning a type to the variable 'dmin' (line 1236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'dmin', call_assignment_44554_46843)
        
        # Assigning a Call to a Name (line 1236):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_46846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 8), 'int')
        # Processing the call keyword arguments
        kwargs_46847 = {}
        # Getting the type of 'call_assignment_44553' (line 1236)
        call_assignment_44553_46844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'call_assignment_44553', False)
        # Obtaining the member '__getitem__' of a type (line 1236)
        getitem___46845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 8), call_assignment_44553_46844, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_46848 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___46845, *[int_46846], **kwargs_46847)
        
        # Assigning a type to the variable 'call_assignment_44555' (line 1236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'call_assignment_44555', getitem___call_result_46848)
        
        # Assigning a Name to a Name (line 1236):
        # Getting the type of 'call_assignment_44555' (line 1236)
        call_assignment_44555_46849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'call_assignment_44555')
        # Assigning a type to the variable 'dmax' (line 1236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 14), 'dmax', call_assignment_44555_46849)
        
        # Assigning a Call to a Name (line 1238):
        
        # Assigning a Call to a Name (line 1238):
        
        # Call to le(...): (line 1238)
        # Processing the call arguments (line 1238)
        # Getting the type of 'dmin' (line 1238)
        dmin_46853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 28), 'dmin', False)
        # Obtaining the member 'year' of a type (line 1238)
        year_46854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 28), dmin_46853, 'year')
        # Processing the call keyword arguments (line 1238)
        kwargs_46855 = {}
        # Getting the type of 'self' (line 1238)
        self_46850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 1238)
        base_46851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 15), self_46850, 'base')
        # Obtaining the member 'le' of a type (line 1238)
        le_46852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 15), base_46851, 'le')
        # Calling le(args, kwargs) (line 1238)
        le_call_result_46856 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 15), le_46852, *[year_46854], **kwargs_46855)
        
        # Assigning a type to the variable 'ymin' (line 1238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'ymin', le_call_result_46856)
        
        # Assigning a Call to a Name (line 1239):
        
        # Assigning a Call to a Name (line 1239):
        
        # Call to ge(...): (line 1239)
        # Processing the call arguments (line 1239)
        # Getting the type of 'dmax' (line 1239)
        dmax_46860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 28), 'dmax', False)
        # Obtaining the member 'year' of a type (line 1239)
        year_46861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 28), dmax_46860, 'year')
        # Processing the call keyword arguments (line 1239)
        kwargs_46862 = {}
        # Getting the type of 'self' (line 1239)
        self_46857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 1239)
        base_46858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 15), self_46857, 'base')
        # Obtaining the member 'ge' of a type (line 1239)
        ge_46859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 15), base_46858, 'ge')
        # Calling ge(args, kwargs) (line 1239)
        ge_call_result_46863 = invoke(stypy.reporting.localization.Localization(__file__, 1239, 15), ge_46859, *[year_46861], **kwargs_46862)
        
        # Assigning a type to the variable 'ymax' (line 1239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'ymax', ge_call_result_46863)
        
        # Assigning a Call to a Name (line 1240):
        
        # Assigning a Call to a Name (line 1240):
        
        # Call to replace(...): (line 1240)
        # Processing the call keyword arguments (line 1240)
        # Getting the type of 'ymin' (line 1240)
        ymin_46866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 33), 'ymin', False)
        keyword_46867 = ymin_46866
        # Getting the type of 'self' (line 1240)
        self_46868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 41), 'self', False)
        # Obtaining the member 'replaced' of a type (line 1240)
        replaced_46869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 41), self_46868, 'replaced')
        kwargs_46870 = {'replaced_46869': replaced_46869, 'year': keyword_46867}
        # Getting the type of 'dmin' (line 1240)
        dmin_46864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 15), 'dmin', False)
        # Obtaining the member 'replace' of a type (line 1240)
        replace_46865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 15), dmin_46864, 'replace')
        # Calling replace(args, kwargs) (line 1240)
        replace_call_result_46871 = invoke(stypy.reporting.localization.Localization(__file__, 1240, 15), replace_46865, *[], **kwargs_46870)
        
        # Assigning a type to the variable 'vmin' (line 1240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 8), 'vmin', replace_call_result_46871)
        
        # Assigning a Call to a Name (line 1241):
        
        # Assigning a Call to a Name (line 1241):
        
        # Call to replace(...): (line 1241)
        # Processing the call keyword arguments (line 1241)
        # Getting the type of 'ymax' (line 1241)
        ymax_46874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 33), 'ymax', False)
        keyword_46875 = ymax_46874
        # Getting the type of 'self' (line 1241)
        self_46876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 41), 'self', False)
        # Obtaining the member 'replaced' of a type (line 1241)
        replaced_46877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 41), self_46876, 'replaced')
        kwargs_46878 = {'replaced_46877': replaced_46877, 'year': keyword_46875}
        # Getting the type of 'dmax' (line 1241)
        dmax_46872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 15), 'dmax', False)
        # Obtaining the member 'replace' of a type (line 1241)
        replace_46873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 15), dmax_46872, 'replace')
        # Calling replace(args, kwargs) (line 1241)
        replace_call_result_46879 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 15), replace_46873, *[], **kwargs_46878)
        
        # Assigning a type to the variable 'vmax' (line 1241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 8), 'vmax', replace_call_result_46879)
        
        # Assigning a Call to a Name (line 1243):
        
        # Assigning a Call to a Name (line 1243):
        
        # Call to date2num(...): (line 1243)
        # Processing the call arguments (line 1243)
        # Getting the type of 'vmin' (line 1243)
        vmin_46881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 24), 'vmin', False)
        # Processing the call keyword arguments (line 1243)
        kwargs_46882 = {}
        # Getting the type of 'date2num' (line 1243)
        date2num_46880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 15), 'date2num', False)
        # Calling date2num(args, kwargs) (line 1243)
        date2num_call_result_46883 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 15), date2num_46880, *[vmin_46881], **kwargs_46882)
        
        # Assigning a type to the variable 'vmin' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'vmin', date2num_call_result_46883)
        
        # Assigning a Call to a Name (line 1244):
        
        # Assigning a Call to a Name (line 1244):
        
        # Call to date2num(...): (line 1244)
        # Processing the call arguments (line 1244)
        # Getting the type of 'vmax' (line 1244)
        vmax_46885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 24), 'vmax', False)
        # Processing the call keyword arguments (line 1244)
        kwargs_46886 = {}
        # Getting the type of 'date2num' (line 1244)
        date2num_46884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 15), 'date2num', False)
        # Calling date2num(args, kwargs) (line 1244)
        date2num_call_result_46887 = invoke(stypy.reporting.localization.Localization(__file__, 1244, 15), date2num_46884, *[vmax_46885], **kwargs_46886)
        
        # Assigning a type to the variable 'vmax' (line 1244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 8), 'vmax', date2num_call_result_46887)
        
        # Call to nonsingular(...): (line 1245)
        # Processing the call arguments (line 1245)
        # Getting the type of 'vmin' (line 1245)
        vmin_46890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 32), 'vmin', False)
        # Getting the type of 'vmax' (line 1245)
        vmax_46891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 38), 'vmax', False)
        # Processing the call keyword arguments (line 1245)
        kwargs_46892 = {}
        # Getting the type of 'self' (line 1245)
        self_46888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 15), 'self', False)
        # Obtaining the member 'nonsingular' of a type (line 1245)
        nonsingular_46889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 15), self_46888, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 1245)
        nonsingular_call_result_46893 = invoke(stypy.reporting.localization.Localization(__file__, 1245, 15), nonsingular_46889, *[vmin_46890, vmax_46891], **kwargs_46892)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'stypy_return_type', nonsingular_call_result_46893)
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 1232)
        stypy_return_type_46894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46894)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_46894


# Assigning a type to the variable 'YearLocator' (line 1184)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 0), 'YearLocator', YearLocator)
# Declaration of the 'MonthLocator' class
# Getting the type of 'RRuleLocator' (line 1248)
RRuleLocator_46895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 19), 'RRuleLocator')

class MonthLocator(RRuleLocator_46895, ):
    unicode_46896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1251, (-1)), 'unicode', u'\n    Make ticks on occurances of each month month, e.g., 1, 3, 12.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1252)
        None_46897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 31), 'None')
        int_46898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 48), 'int')
        int_46899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 60), 'int')
        # Getting the type of 'None' (line 1252)
        None_46900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 66), 'None')
        defaults = [None_46897, int_46898, int_46899, None_46900]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1252, 4, False)
        # Assigning a type to the variable 'self' (line 1253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MonthLocator.__init__', ['bymonth', 'bymonthday', 'interval', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['bymonth', 'bymonthday', 'interval', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_46901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1259, (-1)), 'unicode', u'\n        Mark every month in *bymonth*; *bymonth* can be an int or\n        sequence.  Default is ``range(1,13)``, i.e. every month.\n\n        *interval* is the interval between each iteration.  For\n        example, if ``interval=2``, mark every second occurance.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1260)
        # Getting the type of 'bymonth' (line 1260)
        bymonth_46902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 11), 'bymonth')
        # Getting the type of 'None' (line 1260)
        None_46903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 22), 'None')
        
        (may_be_46904, more_types_in_union_46905) = may_be_none(bymonth_46902, None_46903)

        if may_be_46904:

            if more_types_in_union_46905:
                # Runtime conditional SSA (line 1260)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1261):
            
            # Assigning a Call to a Name (line 1261):
            
            # Call to range(...): (line 1261)
            # Processing the call arguments (line 1261)
            int_46907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 28), 'int')
            int_46908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 31), 'int')
            # Processing the call keyword arguments (line 1261)
            kwargs_46909 = {}
            # Getting the type of 'range' (line 1261)
            range_46906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 22), 'range', False)
            # Calling range(args, kwargs) (line 1261)
            range_call_result_46910 = invoke(stypy.reporting.localization.Localization(__file__, 1261, 22), range_46906, *[int_46907, int_46908], **kwargs_46909)
            
            # Assigning a type to the variable 'bymonth' (line 1261)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 12), 'bymonth', range_call_result_46910)

            if more_types_in_union_46905:
                # Runtime conditional SSA for else branch (line 1260)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_46904) or more_types_in_union_46905):
            
            
            # Call to isinstance(...): (line 1262)
            # Processing the call arguments (line 1262)
            # Getting the type of 'bymonth' (line 1262)
            bymonth_46912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 24), 'bymonth', False)
            # Getting the type of 'np' (line 1262)
            np_46913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 33), 'np', False)
            # Obtaining the member 'ndarray' of a type (line 1262)
            ndarray_46914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 33), np_46913, 'ndarray')
            # Processing the call keyword arguments (line 1262)
            kwargs_46915 = {}
            # Getting the type of 'isinstance' (line 1262)
            isinstance_46911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 13), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1262)
            isinstance_call_result_46916 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 13), isinstance_46911, *[bymonth_46912, ndarray_46914], **kwargs_46915)
            
            # Testing the type of an if condition (line 1262)
            if_condition_46917 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1262, 13), isinstance_call_result_46916)
            # Assigning a type to the variable 'if_condition_46917' (line 1262)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 13), 'if_condition_46917', if_condition_46917)
            # SSA begins for if statement (line 1262)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a ListComp to a Name (line 1266):
            
            # Assigning a ListComp to a Name (line 1266):
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to astype(...): (line 1266)
            # Processing the call arguments (line 1266)
            # Getting the type of 'int' (line 1266)
            int_46924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 56), 'int', False)
            # Processing the call keyword arguments (line 1266)
            kwargs_46925 = {}
            # Getting the type of 'bymonth' (line 1266)
            bymonth_46922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 41), 'bymonth', False)
            # Obtaining the member 'astype' of a type (line 1266)
            astype_46923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 41), bymonth_46922, 'astype')
            # Calling astype(args, kwargs) (line 1266)
            astype_call_result_46926 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 41), astype_46923, *[int_46924], **kwargs_46925)
            
            comprehension_46927 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1266, 23), astype_call_result_46926)
            # Assigning a type to the variable 'x' (line 1266)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 23), 'x', comprehension_46927)
            
            # Call to item(...): (line 1266)
            # Processing the call keyword arguments (line 1266)
            kwargs_46920 = {}
            # Getting the type of 'x' (line 1266)
            x_46918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 23), 'x', False)
            # Obtaining the member 'item' of a type (line 1266)
            item_46919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 23), x_46918, 'item')
            # Calling item(args, kwargs) (line 1266)
            item_call_result_46921 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 23), item_46919, *[], **kwargs_46920)
            
            list_46928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1266, 23), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1266, 23), list_46928, item_call_result_46921)
            # Assigning a type to the variable 'bymonth' (line 1266)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 12), 'bymonth', list_46928)
            # SSA join for if statement (line 1262)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_46904 and more_types_in_union_46905):
                # SSA join for if statement (line 1260)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1268):
        
        # Assigning a Call to a Name (line 1268):
        
        # Call to rrulewrapper(...): (line 1268)
        # Processing the call arguments (line 1268)
        # Getting the type of 'MONTHLY' (line 1268)
        MONTHLY_46930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 28), 'MONTHLY', False)
        # Processing the call keyword arguments (line 1268)
        # Getting the type of 'bymonth' (line 1268)
        bymonth_46931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 45), 'bymonth', False)
        keyword_46932 = bymonth_46931
        # Getting the type of 'bymonthday' (line 1268)
        bymonthday_46933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 65), 'bymonthday', False)
        keyword_46934 = bymonthday_46933
        # Getting the type of 'interval' (line 1269)
        interval_46935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 34), 'interval', False)
        keyword_46936 = interval_46935
        # Getting the type of 'self' (line 1269)
        self_46937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 46), 'self', False)
        # Obtaining the member 'hms0d' of a type (line 1269)
        hms0d_46938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 46), self_46937, 'hms0d')
        kwargs_46939 = {'bymonth': keyword_46932, 'hms0d_46938': hms0d_46938, 'interval': keyword_46936, 'bymonthday': keyword_46934}
        # Getting the type of 'rrulewrapper' (line 1268)
        rrulewrapper_46929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 15), 'rrulewrapper', False)
        # Calling rrulewrapper(args, kwargs) (line 1268)
        rrulewrapper_call_result_46940 = invoke(stypy.reporting.localization.Localization(__file__, 1268, 15), rrulewrapper_46929, *[MONTHLY_46930], **kwargs_46939)
        
        # Assigning a type to the variable 'rule' (line 1268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1268, 8), 'rule', rrulewrapper_call_result_46940)
        
        # Call to __init__(...): (line 1270)
        # Processing the call arguments (line 1270)
        # Getting the type of 'self' (line 1270)
        self_46943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 30), 'self', False)
        # Getting the type of 'rule' (line 1270)
        rule_46944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 36), 'rule', False)
        # Getting the type of 'tz' (line 1270)
        tz_46945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 42), 'tz', False)
        # Processing the call keyword arguments (line 1270)
        kwargs_46946 = {}
        # Getting the type of 'RRuleLocator' (line 1270)
        RRuleLocator_46941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 8), 'RRuleLocator', False)
        # Obtaining the member '__init__' of a type (line 1270)
        init___46942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1270, 8), RRuleLocator_46941, '__init__')
        # Calling __init__(args, kwargs) (line 1270)
        init___call_result_46947 = invoke(stypy.reporting.localization.Localization(__file__, 1270, 8), init___46942, *[self_46943, rule_46944, tz_46945], **kwargs_46946)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'MonthLocator' (line 1248)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 0), 'MonthLocator', MonthLocator)
# Declaration of the 'WeekdayLocator' class
# Getting the type of 'RRuleLocator' (line 1273)
RRuleLocator_46948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 21), 'RRuleLocator')

class WeekdayLocator(RRuleLocator_46948, ):
    unicode_46949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, (-1)), 'unicode', u'\n    Make ticks on occurances of each weekday.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_46950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 33), 'int')
        int_46951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 45), 'int')
        # Getting the type of 'None' (line 1278)
        None_46952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 51), 'None')
        defaults = [int_46950, int_46951, None_46952]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1278, 4, False)
        # Assigning a type to the variable 'self' (line 1279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'WeekdayLocator.__init__', ['byweekday', 'interval', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['byweekday', 'interval', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_46953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1289, (-1)), 'unicode', u'\n        Mark every weekday in *byweekday*; *byweekday* can be a number or\n        sequence.\n\n        Elements of *byweekday* must be one of MO, TU, WE, TH, FR, SA,\n        SU, the constants from :mod:`dateutil.rrule`, which have been\n        imported into the :mod:`matplotlib.dates` namespace.\n\n        *interval* specifies the number of weeks to skip.  For example,\n        ``interval=2`` plots every second week.\n        ')
        
        
        # Call to isinstance(...): (line 1290)
        # Processing the call arguments (line 1290)
        # Getting the type of 'byweekday' (line 1290)
        byweekday_46955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 22), 'byweekday', False)
        # Getting the type of 'np' (line 1290)
        np_46956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 33), 'np', False)
        # Obtaining the member 'ndarray' of a type (line 1290)
        ndarray_46957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 33), np_46956, 'ndarray')
        # Processing the call keyword arguments (line 1290)
        kwargs_46958 = {}
        # Getting the type of 'isinstance' (line 1290)
        isinstance_46954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1290)
        isinstance_call_result_46959 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 11), isinstance_46954, *[byweekday_46955, ndarray_46957], **kwargs_46958)
        
        # Testing the type of an if condition (line 1290)
        if_condition_46960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1290, 8), isinstance_call_result_46959)
        # Assigning a type to the variable 'if_condition_46960' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'if_condition_46960', if_condition_46960)
        # SSA begins for if statement (line 1290)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to astype(...): (line 1294)
        # Processing the call arguments (line 1294)
        # Getting the type of 'int' (line 1294)
        int_46967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 48), 'int', False)
        # Processing the call keyword arguments (line 1294)
        kwargs_46968 = {}
        # Getting the type of 'byweekday' (line 1294)
        byweekday_46965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 31), 'byweekday', False)
        # Obtaining the member 'astype' of a type (line 1294)
        astype_46966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 31), byweekday_46965, 'astype')
        # Calling astype(args, kwargs) (line 1294)
        astype_call_result_46969 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 31), astype_46966, *[int_46967], **kwargs_46968)
        
        comprehension_46970 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1294, 13), astype_call_result_46969)
        # Assigning a type to the variable 'x' (line 1294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 13), 'x', comprehension_46970)
        
        # Call to item(...): (line 1294)
        # Processing the call keyword arguments (line 1294)
        kwargs_46963 = {}
        # Getting the type of 'x' (line 1294)
        x_46961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 13), 'x', False)
        # Obtaining the member 'item' of a type (line 1294)
        item_46962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 13), x_46961, 'item')
        # Calling item(args, kwargs) (line 1294)
        item_call_result_46964 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 13), item_46962, *[], **kwargs_46963)
        
        list_46971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 13), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1294, 13), list_46971, item_call_result_46964)
        # SSA join for if statement (line 1290)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1296):
        
        # Assigning a Call to a Name (line 1296):
        
        # Call to rrulewrapper(...): (line 1296)
        # Processing the call arguments (line 1296)
        # Getting the type of 'DAILY' (line 1296)
        DAILY_46973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 28), 'DAILY', False)
        # Processing the call keyword arguments (line 1296)
        # Getting the type of 'byweekday' (line 1296)
        byweekday_46974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 45), 'byweekday', False)
        keyword_46975 = byweekday_46974
        # Getting the type of 'interval' (line 1297)
        interval_46976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 37), 'interval', False)
        keyword_46977 = interval_46976
        # Getting the type of 'self' (line 1297)
        self_46978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 49), 'self', False)
        # Obtaining the member 'hms0d' of a type (line 1297)
        hms0d_46979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 49), self_46978, 'hms0d')
        kwargs_46980 = {'interval': keyword_46977, 'hms0d_46979': hms0d_46979, 'byweekday': keyword_46975}
        # Getting the type of 'rrulewrapper' (line 1296)
        rrulewrapper_46972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 15), 'rrulewrapper', False)
        # Calling rrulewrapper(args, kwargs) (line 1296)
        rrulewrapper_call_result_46981 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 15), rrulewrapper_46972, *[DAILY_46973], **kwargs_46980)
        
        # Assigning a type to the variable 'rule' (line 1296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 8), 'rule', rrulewrapper_call_result_46981)
        
        # Call to __init__(...): (line 1298)
        # Processing the call arguments (line 1298)
        # Getting the type of 'self' (line 1298)
        self_46984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 30), 'self', False)
        # Getting the type of 'rule' (line 1298)
        rule_46985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 36), 'rule', False)
        # Getting the type of 'tz' (line 1298)
        tz_46986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 42), 'tz', False)
        # Processing the call keyword arguments (line 1298)
        kwargs_46987 = {}
        # Getting the type of 'RRuleLocator' (line 1298)
        RRuleLocator_46982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'RRuleLocator', False)
        # Obtaining the member '__init__' of a type (line 1298)
        init___46983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 8), RRuleLocator_46982, '__init__')
        # Calling __init__(args, kwargs) (line 1298)
        init___call_result_46988 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 8), init___46983, *[self_46984, rule_46985, tz_46986], **kwargs_46987)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'WeekdayLocator' (line 1273)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 0), 'WeekdayLocator', WeekdayLocator)
# Declaration of the 'DayLocator' class
# Getting the type of 'RRuleLocator' (line 1301)
RRuleLocator_46989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 17), 'RRuleLocator')

class DayLocator(RRuleLocator_46989, ):
    unicode_46990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, (-1)), 'unicode', u'\n    Make ticks on occurances of each day of the month.  For example,\n    1, 15, 30.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1306)
        None_46991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 34), 'None')
        int_46992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1306, 49), 'int')
        # Getting the type of 'None' (line 1306)
        None_46993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 55), 'None')
        defaults = [None_46991, int_46992, None_46993]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1306, 4, False)
        # Assigning a type to the variable 'self' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DayLocator.__init__', ['bymonthday', 'interval', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['bymonthday', 'interval', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_46994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, (-1)), 'unicode', u'\n        Mark every day in *bymonthday*; *bymonthday* can be an int or\n        sequence.\n\n        Default is to tick every day of the month: ``bymonthday=range(1,32)``\n        ')
        
        
        # Evaluating a boolean operation
        
        
        # Getting the type of 'interval' (line 1313)
        interval_46995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 15), 'interval')
        
        # Call to int(...): (line 1313)
        # Processing the call arguments (line 1313)
        # Getting the type of 'interval' (line 1313)
        interval_46997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 31), 'interval', False)
        # Processing the call keyword arguments (line 1313)
        kwargs_46998 = {}
        # Getting the type of 'int' (line 1313)
        int_46996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 27), 'int', False)
        # Calling int(args, kwargs) (line 1313)
        int_call_result_46999 = invoke(stypy.reporting.localization.Localization(__file__, 1313, 27), int_46996, *[interval_46997], **kwargs_46998)
        
        # Applying the binary operator '==' (line 1313)
        result_eq_47000 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 15), '==', interval_46995, int_call_result_46999)
        
        # Applying the 'not' unary operator (line 1313)
        result_not__47001 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 11), 'not', result_eq_47000)
        
        
        # Getting the type of 'interval' (line 1313)
        interval_47002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 44), 'interval')
        int_47003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 55), 'int')
        # Applying the binary operator '<' (line 1313)
        result_lt_47004 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 44), '<', interval_47002, int_47003)
        
        # Applying the binary operator 'or' (line 1313)
        result_or_keyword_47005 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 11), 'or', result_not__47001, result_lt_47004)
        
        # Testing the type of an if condition (line 1313)
        if_condition_47006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1313, 8), result_or_keyword_47005)
        # Assigning a type to the variable 'if_condition_47006' (line 1313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 8), 'if_condition_47006', if_condition_47006)
        # SSA begins for if statement (line 1313)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1314)
        # Processing the call arguments (line 1314)
        unicode_47008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 29), 'unicode', u'interval must be an integer greater than 0')
        # Processing the call keyword arguments (line 1314)
        kwargs_47009 = {}
        # Getting the type of 'ValueError' (line 1314)
        ValueError_47007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1314)
        ValueError_call_result_47010 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 18), ValueError_47007, *[unicode_47008], **kwargs_47009)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1314, 12), ValueError_call_result_47010, 'raise parameter', BaseException)
        # SSA join for if statement (line 1313)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1315)
        # Getting the type of 'bymonthday' (line 1315)
        bymonthday_47011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 11), 'bymonthday')
        # Getting the type of 'None' (line 1315)
        None_47012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 25), 'None')
        
        (may_be_47013, more_types_in_union_47014) = may_be_none(bymonthday_47011, None_47012)

        if may_be_47013:

            if more_types_in_union_47014:
                # Runtime conditional SSA (line 1315)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1316):
            
            # Assigning a Call to a Name (line 1316):
            
            # Call to range(...): (line 1316)
            # Processing the call arguments (line 1316)
            int_47016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 31), 'int')
            int_47017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 34), 'int')
            # Processing the call keyword arguments (line 1316)
            kwargs_47018 = {}
            # Getting the type of 'range' (line 1316)
            range_47015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 25), 'range', False)
            # Calling range(args, kwargs) (line 1316)
            range_call_result_47019 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 25), range_47015, *[int_47016, int_47017], **kwargs_47018)
            
            # Assigning a type to the variable 'bymonthday' (line 1316)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 12), 'bymonthday', range_call_result_47019)

            if more_types_in_union_47014:
                # Runtime conditional SSA for else branch (line 1315)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_47013) or more_types_in_union_47014):
            
            
            # Call to isinstance(...): (line 1317)
            # Processing the call arguments (line 1317)
            # Getting the type of 'bymonthday' (line 1317)
            bymonthday_47021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 24), 'bymonthday', False)
            # Getting the type of 'np' (line 1317)
            np_47022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 36), 'np', False)
            # Obtaining the member 'ndarray' of a type (line 1317)
            ndarray_47023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 36), np_47022, 'ndarray')
            # Processing the call keyword arguments (line 1317)
            kwargs_47024 = {}
            # Getting the type of 'isinstance' (line 1317)
            isinstance_47020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 13), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1317)
            isinstance_call_result_47025 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 13), isinstance_47020, *[bymonthday_47021, ndarray_47023], **kwargs_47024)
            
            # Testing the type of an if condition (line 1317)
            if_condition_47026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1317, 13), isinstance_call_result_47025)
            # Assigning a type to the variable 'if_condition_47026' (line 1317)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 13), 'if_condition_47026', if_condition_47026)
            # SSA begins for if statement (line 1317)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a ListComp to a Name (line 1321):
            
            # Assigning a ListComp to a Name (line 1321):
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to astype(...): (line 1321)
            # Processing the call arguments (line 1321)
            # Getting the type of 'int' (line 1321)
            int_47033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 62), 'int', False)
            # Processing the call keyword arguments (line 1321)
            kwargs_47034 = {}
            # Getting the type of 'bymonthday' (line 1321)
            bymonthday_47031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 44), 'bymonthday', False)
            # Obtaining the member 'astype' of a type (line 1321)
            astype_47032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 44), bymonthday_47031, 'astype')
            # Calling astype(args, kwargs) (line 1321)
            astype_call_result_47035 = invoke(stypy.reporting.localization.Localization(__file__, 1321, 44), astype_47032, *[int_47033], **kwargs_47034)
            
            comprehension_47036 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1321, 26), astype_call_result_47035)
            # Assigning a type to the variable 'x' (line 1321)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 26), 'x', comprehension_47036)
            
            # Call to item(...): (line 1321)
            # Processing the call keyword arguments (line 1321)
            kwargs_47029 = {}
            # Getting the type of 'x' (line 1321)
            x_47027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 26), 'x', False)
            # Obtaining the member 'item' of a type (line 1321)
            item_47028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 26), x_47027, 'item')
            # Calling item(args, kwargs) (line 1321)
            item_call_result_47030 = invoke(stypy.reporting.localization.Localization(__file__, 1321, 26), item_47028, *[], **kwargs_47029)
            
            list_47037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 26), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1321, 26), list_47037, item_call_result_47030)
            # Assigning a type to the variable 'bymonthday' (line 1321)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'bymonthday', list_47037)
            # SSA join for if statement (line 1317)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_47013 and more_types_in_union_47014):
                # SSA join for if statement (line 1315)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1323):
        
        # Assigning a Call to a Name (line 1323):
        
        # Call to rrulewrapper(...): (line 1323)
        # Processing the call arguments (line 1323)
        # Getting the type of 'DAILY' (line 1323)
        DAILY_47039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 28), 'DAILY', False)
        # Processing the call keyword arguments (line 1323)
        # Getting the type of 'bymonthday' (line 1323)
        bymonthday_47040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 46), 'bymonthday', False)
        keyword_47041 = bymonthday_47040
        # Getting the type of 'interval' (line 1324)
        interval_47042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 37), 'interval', False)
        keyword_47043 = interval_47042
        # Getting the type of 'self' (line 1324)
        self_47044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 49), 'self', False)
        # Obtaining the member 'hms0d' of a type (line 1324)
        hms0d_47045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 49), self_47044, 'hms0d')
        kwargs_47046 = {'interval': keyword_47043, 'bymonthday': keyword_47041, 'hms0d_47045': hms0d_47045}
        # Getting the type of 'rrulewrapper' (line 1323)
        rrulewrapper_47038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 15), 'rrulewrapper', False)
        # Calling rrulewrapper(args, kwargs) (line 1323)
        rrulewrapper_call_result_47047 = invoke(stypy.reporting.localization.Localization(__file__, 1323, 15), rrulewrapper_47038, *[DAILY_47039], **kwargs_47046)
        
        # Assigning a type to the variable 'rule' (line 1323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 8), 'rule', rrulewrapper_call_result_47047)
        
        # Call to __init__(...): (line 1325)
        # Processing the call arguments (line 1325)
        # Getting the type of 'self' (line 1325)
        self_47050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 30), 'self', False)
        # Getting the type of 'rule' (line 1325)
        rule_47051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 36), 'rule', False)
        # Getting the type of 'tz' (line 1325)
        tz_47052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 42), 'tz', False)
        # Processing the call keyword arguments (line 1325)
        kwargs_47053 = {}
        # Getting the type of 'RRuleLocator' (line 1325)
        RRuleLocator_47048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 8), 'RRuleLocator', False)
        # Obtaining the member '__init__' of a type (line 1325)
        init___47049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 8), RRuleLocator_47048, '__init__')
        # Calling __init__(args, kwargs) (line 1325)
        init___call_result_47054 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 8), init___47049, *[self_47050, rule_47051, tz_47052], **kwargs_47053)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'DayLocator' (line 1301)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 0), 'DayLocator', DayLocator)
# Declaration of the 'HourLocator' class
# Getting the type of 'RRuleLocator' (line 1328)
RRuleLocator_47055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 18), 'RRuleLocator')

class HourLocator(RRuleLocator_47055, ):
    unicode_47056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, (-1)), 'unicode', u'\n    Make ticks on occurances of each hour.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1332)
        None_47057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 30), 'None')
        int_47058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1332, 45), 'int')
        # Getting the type of 'None' (line 1332)
        None_47059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 51), 'None')
        defaults = [None_47057, int_47058, None_47059]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1332, 4, False)
        # Assigning a type to the variable 'self' (line 1333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'HourLocator.__init__', ['byhour', 'interval', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['byhour', 'interval', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_47060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1339, (-1)), 'unicode', u'\n        Mark every hour in *byhour*; *byhour* can be an int or sequence.\n        Default is to tick every hour: ``byhour=range(24)``\n\n        *interval* is the interval between each iteration.  For\n        example, if ``interval=2``, mark every second occurrence.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1340)
        # Getting the type of 'byhour' (line 1340)
        byhour_47061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 11), 'byhour')
        # Getting the type of 'None' (line 1340)
        None_47062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 21), 'None')
        
        (may_be_47063, more_types_in_union_47064) = may_be_none(byhour_47061, None_47062)

        if may_be_47063:

            if more_types_in_union_47064:
                # Runtime conditional SSA (line 1340)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1341):
            
            # Assigning a Call to a Name (line 1341):
            
            # Call to range(...): (line 1341)
            # Processing the call arguments (line 1341)
            int_47066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 27), 'int')
            # Processing the call keyword arguments (line 1341)
            kwargs_47067 = {}
            # Getting the type of 'range' (line 1341)
            range_47065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 21), 'range', False)
            # Calling range(args, kwargs) (line 1341)
            range_call_result_47068 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 21), range_47065, *[int_47066], **kwargs_47067)
            
            # Assigning a type to the variable 'byhour' (line 1341)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 12), 'byhour', range_call_result_47068)

            if more_types_in_union_47064:
                # SSA join for if statement (line 1340)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1343):
        
        # Assigning a Call to a Name (line 1343):
        
        # Call to rrulewrapper(...): (line 1343)
        # Processing the call arguments (line 1343)
        # Getting the type of 'HOURLY' (line 1343)
        HOURLY_47070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 28), 'HOURLY', False)
        # Processing the call keyword arguments (line 1343)
        # Getting the type of 'byhour' (line 1343)
        byhour_47071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 43), 'byhour', False)
        keyword_47072 = byhour_47071
        # Getting the type of 'interval' (line 1343)
        interval_47073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 60), 'interval', False)
        keyword_47074 = interval_47073
        int_47075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 37), 'int')
        keyword_47076 = int_47075
        int_47077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 49), 'int')
        keyword_47078 = int_47077
        kwargs_47079 = {'byminute': keyword_47076, 'byhour': keyword_47072, 'bysecond': keyword_47078, 'interval': keyword_47074}
        # Getting the type of 'rrulewrapper' (line 1343)
        rrulewrapper_47069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 15), 'rrulewrapper', False)
        # Calling rrulewrapper(args, kwargs) (line 1343)
        rrulewrapper_call_result_47080 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 15), rrulewrapper_47069, *[HOURLY_47070], **kwargs_47079)
        
        # Assigning a type to the variable 'rule' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'rule', rrulewrapper_call_result_47080)
        
        # Call to __init__(...): (line 1345)
        # Processing the call arguments (line 1345)
        # Getting the type of 'self' (line 1345)
        self_47083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 30), 'self', False)
        # Getting the type of 'rule' (line 1345)
        rule_47084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 36), 'rule', False)
        # Getting the type of 'tz' (line 1345)
        tz_47085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 42), 'tz', False)
        # Processing the call keyword arguments (line 1345)
        kwargs_47086 = {}
        # Getting the type of 'RRuleLocator' (line 1345)
        RRuleLocator_47081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 8), 'RRuleLocator', False)
        # Obtaining the member '__init__' of a type (line 1345)
        init___47082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 8), RRuleLocator_47081, '__init__')
        # Calling __init__(args, kwargs) (line 1345)
        init___call_result_47087 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 8), init___47082, *[self_47083, rule_47084, tz_47085], **kwargs_47086)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'HourLocator' (line 1328)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 0), 'HourLocator', HourLocator)
# Declaration of the 'MinuteLocator' class
# Getting the type of 'RRuleLocator' (line 1348)
RRuleLocator_47088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 20), 'RRuleLocator')

class MinuteLocator(RRuleLocator_47088, ):
    unicode_47089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, (-1)), 'unicode', u'\n    Make ticks on occurances of each minute.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1352)
        None_47090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 32), 'None')
        int_47091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1352, 47), 'int')
        # Getting the type of 'None' (line 1352)
        None_47092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 53), 'None')
        defaults = [None_47090, int_47091, None_47092]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1352, 4, False)
        # Assigning a type to the variable 'self' (line 1353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MinuteLocator.__init__', ['byminute', 'interval', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['byminute', 'interval', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_47093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, (-1)), 'unicode', u'\n        Mark every minute in *byminute*; *byminute* can be an int or\n        sequence.  Default is to tick every minute: ``byminute=range(60)``\n\n        *interval* is the interval between each iteration.  For\n        example, if ``interval=2``, mark every second occurrence.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1360)
        # Getting the type of 'byminute' (line 1360)
        byminute_47094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 11), 'byminute')
        # Getting the type of 'None' (line 1360)
        None_47095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 23), 'None')
        
        (may_be_47096, more_types_in_union_47097) = may_be_none(byminute_47094, None_47095)

        if may_be_47096:

            if more_types_in_union_47097:
                # Runtime conditional SSA (line 1360)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1361):
            
            # Assigning a Call to a Name (line 1361):
            
            # Call to range(...): (line 1361)
            # Processing the call arguments (line 1361)
            int_47099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 29), 'int')
            # Processing the call keyword arguments (line 1361)
            kwargs_47100 = {}
            # Getting the type of 'range' (line 1361)
            range_47098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 23), 'range', False)
            # Calling range(args, kwargs) (line 1361)
            range_call_result_47101 = invoke(stypy.reporting.localization.Localization(__file__, 1361, 23), range_47098, *[int_47099], **kwargs_47100)
            
            # Assigning a type to the variable 'byminute' (line 1361)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 12), 'byminute', range_call_result_47101)

            if more_types_in_union_47097:
                # SSA join for if statement (line 1360)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1363):
        
        # Assigning a Call to a Name (line 1363):
        
        # Call to rrulewrapper(...): (line 1363)
        # Processing the call arguments (line 1363)
        # Getting the type of 'MINUTELY' (line 1363)
        MINUTELY_47103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 28), 'MINUTELY', False)
        # Processing the call keyword arguments (line 1363)
        # Getting the type of 'byminute' (line 1363)
        byminute_47104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 47), 'byminute', False)
        keyword_47105 = byminute_47104
        # Getting the type of 'interval' (line 1363)
        interval_47106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 66), 'interval', False)
        keyword_47107 = interval_47106
        int_47108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1364, 37), 'int')
        keyword_47109 = int_47108
        kwargs_47110 = {'byminute': keyword_47105, 'bysecond': keyword_47109, 'interval': keyword_47107}
        # Getting the type of 'rrulewrapper' (line 1363)
        rrulewrapper_47102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 15), 'rrulewrapper', False)
        # Calling rrulewrapper(args, kwargs) (line 1363)
        rrulewrapper_call_result_47111 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 15), rrulewrapper_47102, *[MINUTELY_47103], **kwargs_47110)
        
        # Assigning a type to the variable 'rule' (line 1363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 8), 'rule', rrulewrapper_call_result_47111)
        
        # Call to __init__(...): (line 1365)
        # Processing the call arguments (line 1365)
        # Getting the type of 'self' (line 1365)
        self_47114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 30), 'self', False)
        # Getting the type of 'rule' (line 1365)
        rule_47115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 36), 'rule', False)
        # Getting the type of 'tz' (line 1365)
        tz_47116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 42), 'tz', False)
        # Processing the call keyword arguments (line 1365)
        kwargs_47117 = {}
        # Getting the type of 'RRuleLocator' (line 1365)
        RRuleLocator_47112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'RRuleLocator', False)
        # Obtaining the member '__init__' of a type (line 1365)
        init___47113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 8), RRuleLocator_47112, '__init__')
        # Calling __init__(args, kwargs) (line 1365)
        init___call_result_47118 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 8), init___47113, *[self_47114, rule_47115, tz_47116], **kwargs_47117)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'MinuteLocator' (line 1348)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 0), 'MinuteLocator', MinuteLocator)
# Declaration of the 'SecondLocator' class
# Getting the type of 'RRuleLocator' (line 1368)
RRuleLocator_47119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 20), 'RRuleLocator')

class SecondLocator(RRuleLocator_47119, ):
    unicode_47120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, (-1)), 'unicode', u'\n    Make ticks on occurances of each second.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1372)
        None_47121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 32), 'None')
        int_47122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 47), 'int')
        # Getting the type of 'None' (line 1372)
        None_47123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 53), 'None')
        defaults = [None_47121, int_47122, None_47123]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1372, 4, False)
        # Assigning a type to the variable 'self' (line 1373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SecondLocator.__init__', ['bysecond', 'interval', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['bysecond', 'interval', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_47124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1380, (-1)), 'unicode', u'\n        Mark every second in *bysecond*; *bysecond* can be an int or\n        sequence.  Default is to tick every second: ``bysecond = range(60)``\n\n        *interval* is the interval between each iteration.  For\n        example, if ``interval=2``, mark every second occurrence.\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1381)
        # Getting the type of 'bysecond' (line 1381)
        bysecond_47125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 11), 'bysecond')
        # Getting the type of 'None' (line 1381)
        None_47126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 23), 'None')
        
        (may_be_47127, more_types_in_union_47128) = may_be_none(bysecond_47125, None_47126)

        if may_be_47127:

            if more_types_in_union_47128:
                # Runtime conditional SSA (line 1381)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1382):
            
            # Assigning a Call to a Name (line 1382):
            
            # Call to range(...): (line 1382)
            # Processing the call arguments (line 1382)
            int_47130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 29), 'int')
            # Processing the call keyword arguments (line 1382)
            kwargs_47131 = {}
            # Getting the type of 'range' (line 1382)
            range_47129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 23), 'range', False)
            # Calling range(args, kwargs) (line 1382)
            range_call_result_47132 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 23), range_47129, *[int_47130], **kwargs_47131)
            
            # Assigning a type to the variable 'bysecond' (line 1382)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 12), 'bysecond', range_call_result_47132)

            if more_types_in_union_47128:
                # SSA join for if statement (line 1381)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1384):
        
        # Assigning a Call to a Name (line 1384):
        
        # Call to rrulewrapper(...): (line 1384)
        # Processing the call arguments (line 1384)
        # Getting the type of 'SECONDLY' (line 1384)
        SECONDLY_47134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 28), 'SECONDLY', False)
        # Processing the call keyword arguments (line 1384)
        # Getting the type of 'bysecond' (line 1384)
        bysecond_47135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 47), 'bysecond', False)
        keyword_47136 = bysecond_47135
        # Getting the type of 'interval' (line 1384)
        interval_47137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 66), 'interval', False)
        keyword_47138 = interval_47137
        kwargs_47139 = {'interval': keyword_47138, 'bysecond': keyword_47136}
        # Getting the type of 'rrulewrapper' (line 1384)
        rrulewrapper_47133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 15), 'rrulewrapper', False)
        # Calling rrulewrapper(args, kwargs) (line 1384)
        rrulewrapper_call_result_47140 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 15), rrulewrapper_47133, *[SECONDLY_47134], **kwargs_47139)
        
        # Assigning a type to the variable 'rule' (line 1384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 8), 'rule', rrulewrapper_call_result_47140)
        
        # Call to __init__(...): (line 1385)
        # Processing the call arguments (line 1385)
        # Getting the type of 'self' (line 1385)
        self_47143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 30), 'self', False)
        # Getting the type of 'rule' (line 1385)
        rule_47144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 36), 'rule', False)
        # Getting the type of 'tz' (line 1385)
        tz_47145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 42), 'tz', False)
        # Processing the call keyword arguments (line 1385)
        kwargs_47146 = {}
        # Getting the type of 'RRuleLocator' (line 1385)
        RRuleLocator_47141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 8), 'RRuleLocator', False)
        # Obtaining the member '__init__' of a type (line 1385)
        init___47142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 8), RRuleLocator_47141, '__init__')
        # Calling __init__(args, kwargs) (line 1385)
        init___call_result_47147 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 8), init___47142, *[self_47143, rule_47144, tz_47145], **kwargs_47146)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'SecondLocator' (line 1368)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 0), 'SecondLocator', SecondLocator)
# Declaration of the 'MicrosecondLocator' class
# Getting the type of 'DateLocator' (line 1388)
DateLocator_47148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 25), 'DateLocator')

class MicrosecondLocator(DateLocator_47148, ):
    unicode_47149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, (-1)), 'unicode', u'\n    Make ticks on occurances of each microsecond.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_47150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, 32), 'int')
        # Getting the type of 'None' (line 1393)
        None_47151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 38), 'None')
        defaults = [int_47150, None_47151]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1393, 4, False)
        # Assigning a type to the variable 'self' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MicrosecondLocator.__init__', ['interval', 'tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['interval', 'tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_47152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, (-1)), 'unicode', u'\n        *interval* is the interval between each iteration.  For\n        example, if ``interval=2``, mark every second microsecond.\n\n        ')
        
        # Assigning a Name to a Attribute (line 1399):
        
        # Assigning a Name to a Attribute (line 1399):
        # Getting the type of 'interval' (line 1399)
        interval_47153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 25), 'interval')
        # Getting the type of 'self' (line 1399)
        self_47154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 8), 'self')
        # Setting the type of the member '_interval' of a type (line 1399)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1399, 8), self_47154, '_interval', interval_47153)
        
        # Assigning a Call to a Attribute (line 1400):
        
        # Assigning a Call to a Attribute (line 1400):
        
        # Call to MultipleLocator(...): (line 1400)
        # Processing the call arguments (line 1400)
        # Getting the type of 'interval' (line 1400)
        interval_47157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 55), 'interval', False)
        # Processing the call keyword arguments (line 1400)
        kwargs_47158 = {}
        # Getting the type of 'ticker' (line 1400)
        ticker_47155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 32), 'ticker', False)
        # Obtaining the member 'MultipleLocator' of a type (line 1400)
        MultipleLocator_47156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 32), ticker_47155, 'MultipleLocator')
        # Calling MultipleLocator(args, kwargs) (line 1400)
        MultipleLocator_call_result_47159 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 32), MultipleLocator_47156, *[interval_47157], **kwargs_47158)
        
        # Getting the type of 'self' (line 1400)
        self_47160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'self')
        # Setting the type of the member '_wrapped_locator' of a type (line 1400)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 8), self_47160, '_wrapped_locator', MultipleLocator_call_result_47159)
        
        # Assigning a Name to a Attribute (line 1401):
        
        # Assigning a Name to a Attribute (line 1401):
        # Getting the type of 'tz' (line 1401)
        tz_47161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 18), 'tz')
        # Getting the type of 'self' (line 1401)
        self_47162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 8), 'self')
        # Setting the type of the member 'tz' of a type (line 1401)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 8), self_47162, 'tz', tz_47161)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_axis'
        module_type_store = module_type_store.open_function_context('set_axis', 1403, 4, False)
        # Assigning a type to the variable 'self' (line 1404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_localization', localization)
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_function_name', 'MicrosecondLocator.set_axis')
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_param_names_list', ['axis'])
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_varargs_param_name', None)
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MicrosecondLocator.set_axis.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MicrosecondLocator.set_axis', ['axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_axis', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_axis(...)' code ##################

        
        # Call to set_axis(...): (line 1404)
        # Processing the call arguments (line 1404)
        # Getting the type of 'axis' (line 1404)
        axis_47166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 39), 'axis', False)
        # Processing the call keyword arguments (line 1404)
        kwargs_47167 = {}
        # Getting the type of 'self' (line 1404)
        self_47163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 8), 'self', False)
        # Obtaining the member '_wrapped_locator' of a type (line 1404)
        _wrapped_locator_47164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 8), self_47163, '_wrapped_locator')
        # Obtaining the member 'set_axis' of a type (line 1404)
        set_axis_47165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 8), _wrapped_locator_47164, 'set_axis')
        # Calling set_axis(args, kwargs) (line 1404)
        set_axis_call_result_47168 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 8), set_axis_47165, *[axis_47166], **kwargs_47167)
        
        
        # Call to set_axis(...): (line 1405)
        # Processing the call arguments (line 1405)
        # Getting the type of 'self' (line 1405)
        self_47171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 36), 'self', False)
        # Getting the type of 'axis' (line 1405)
        axis_47172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 42), 'axis', False)
        # Processing the call keyword arguments (line 1405)
        kwargs_47173 = {}
        # Getting the type of 'DateLocator' (line 1405)
        DateLocator_47169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 15), 'DateLocator', False)
        # Obtaining the member 'set_axis' of a type (line 1405)
        set_axis_47170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 15), DateLocator_47169, 'set_axis')
        # Calling set_axis(args, kwargs) (line 1405)
        set_axis_call_result_47174 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 15), set_axis_47170, *[self_47171, axis_47172], **kwargs_47173)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 8), 'stypy_return_type', set_axis_call_result_47174)
        
        # ################# End of 'set_axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_axis' in the type store
        # Getting the type of 'stypy_return_type' (line 1403)
        stypy_return_type_47175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47175)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_axis'
        return stypy_return_type_47175


    @norecursion
    def set_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_view_interval'
        module_type_store = module_type_store.open_function_context('set_view_interval', 1407, 4, False)
        # Assigning a type to the variable 'self' (line 1408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_localization', localization)
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_function_name', 'MicrosecondLocator.set_view_interval')
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MicrosecondLocator.set_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MicrosecondLocator.set_view_interval', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_view_interval', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_view_interval(...)' code ##################

        
        # Call to set_view_interval(...): (line 1408)
        # Processing the call arguments (line 1408)
        # Getting the type of 'vmin' (line 1408)
        vmin_47179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 48), 'vmin', False)
        # Getting the type of 'vmax' (line 1408)
        vmax_47180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 54), 'vmax', False)
        # Processing the call keyword arguments (line 1408)
        kwargs_47181 = {}
        # Getting the type of 'self' (line 1408)
        self_47176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 8), 'self', False)
        # Obtaining the member '_wrapped_locator' of a type (line 1408)
        _wrapped_locator_47177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 8), self_47176, '_wrapped_locator')
        # Obtaining the member 'set_view_interval' of a type (line 1408)
        set_view_interval_47178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 8), _wrapped_locator_47177, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 1408)
        set_view_interval_call_result_47182 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 8), set_view_interval_47178, *[vmin_47179, vmax_47180], **kwargs_47181)
        
        
        # Call to set_view_interval(...): (line 1409)
        # Processing the call arguments (line 1409)
        # Getting the type of 'self' (line 1409)
        self_47185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 45), 'self', False)
        # Getting the type of 'vmin' (line 1409)
        vmin_47186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 51), 'vmin', False)
        # Getting the type of 'vmax' (line 1409)
        vmax_47187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 57), 'vmax', False)
        # Processing the call keyword arguments (line 1409)
        kwargs_47188 = {}
        # Getting the type of 'DateLocator' (line 1409)
        DateLocator_47183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 15), 'DateLocator', False)
        # Obtaining the member 'set_view_interval' of a type (line 1409)
        set_view_interval_47184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 15), DateLocator_47183, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 1409)
        set_view_interval_call_result_47189 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 15), set_view_interval_47184, *[self_47185, vmin_47186, vmax_47187], **kwargs_47188)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'stypy_return_type', set_view_interval_call_result_47189)
        
        # ################# End of 'set_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 1407)
        stypy_return_type_47190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47190)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_view_interval'
        return stypy_return_type_47190


    @norecursion
    def set_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data_interval'
        module_type_store = module_type_store.open_function_context('set_data_interval', 1411, 4, False)
        # Assigning a type to the variable 'self' (line 1412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_localization', localization)
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_function_name', 'MicrosecondLocator.set_data_interval')
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MicrosecondLocator.set_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MicrosecondLocator.set_data_interval', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data_interval', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data_interval(...)' code ##################

        
        # Call to set_data_interval(...): (line 1412)
        # Processing the call arguments (line 1412)
        # Getting the type of 'vmin' (line 1412)
        vmin_47194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 48), 'vmin', False)
        # Getting the type of 'vmax' (line 1412)
        vmax_47195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 54), 'vmax', False)
        # Processing the call keyword arguments (line 1412)
        kwargs_47196 = {}
        # Getting the type of 'self' (line 1412)
        self_47191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 8), 'self', False)
        # Obtaining the member '_wrapped_locator' of a type (line 1412)
        _wrapped_locator_47192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 8), self_47191, '_wrapped_locator')
        # Obtaining the member 'set_data_interval' of a type (line 1412)
        set_data_interval_47193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 8), _wrapped_locator_47192, 'set_data_interval')
        # Calling set_data_interval(args, kwargs) (line 1412)
        set_data_interval_call_result_47197 = invoke(stypy.reporting.localization.Localization(__file__, 1412, 8), set_data_interval_47193, *[vmin_47194, vmax_47195], **kwargs_47196)
        
        
        # Call to set_data_interval(...): (line 1413)
        # Processing the call arguments (line 1413)
        # Getting the type of 'self' (line 1413)
        self_47200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 45), 'self', False)
        # Getting the type of 'vmin' (line 1413)
        vmin_47201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 51), 'vmin', False)
        # Getting the type of 'vmax' (line 1413)
        vmax_47202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 57), 'vmax', False)
        # Processing the call keyword arguments (line 1413)
        kwargs_47203 = {}
        # Getting the type of 'DateLocator' (line 1413)
        DateLocator_47198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 15), 'DateLocator', False)
        # Obtaining the member 'set_data_interval' of a type (line 1413)
        set_data_interval_47199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 15), DateLocator_47198, 'set_data_interval')
        # Calling set_data_interval(args, kwargs) (line 1413)
        set_data_interval_call_result_47204 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 15), set_data_interval_47199, *[self_47200, vmin_47201, vmax_47202], **kwargs_47203)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'stypy_return_type', set_data_interval_call_result_47204)
        
        # ################# End of 'set_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 1411)
        stypy_return_type_47205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47205)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data_interval'
        return stypy_return_type_47205


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1415, 4, False)
        # Assigning a type to the variable 'self' (line 1416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_function_name', 'MicrosecondLocator.__call__')
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MicrosecondLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MicrosecondLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # SSA begins for try-except statement (line 1417)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Tuple (line 1418):
        
        # Assigning a Call to a Name:
        
        # Call to viewlim_to_dt(...): (line 1418)
        # Processing the call keyword arguments (line 1418)
        kwargs_47208 = {}
        # Getting the type of 'self' (line 1418)
        self_47206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 25), 'self', False)
        # Obtaining the member 'viewlim_to_dt' of a type (line 1418)
        viewlim_to_dt_47207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 25), self_47206, 'viewlim_to_dt')
        # Calling viewlim_to_dt(args, kwargs) (line 1418)
        viewlim_to_dt_call_result_47209 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 25), viewlim_to_dt_47207, *[], **kwargs_47208)
        
        # Assigning a type to the variable 'call_assignment_44556' (line 1418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'call_assignment_44556', viewlim_to_dt_call_result_47209)
        
        # Assigning a Call to a Name (line 1418):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_47212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 12), 'int')
        # Processing the call keyword arguments
        kwargs_47213 = {}
        # Getting the type of 'call_assignment_44556' (line 1418)
        call_assignment_44556_47210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'call_assignment_44556', False)
        # Obtaining the member '__getitem__' of a type (line 1418)
        getitem___47211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 12), call_assignment_44556_47210, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_47214 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___47211, *[int_47212], **kwargs_47213)
        
        # Assigning a type to the variable 'call_assignment_44557' (line 1418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'call_assignment_44557', getitem___call_result_47214)
        
        # Assigning a Name to a Name (line 1418):
        # Getting the type of 'call_assignment_44557' (line 1418)
        call_assignment_44557_47215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'call_assignment_44557')
        # Assigning a type to the variable 'dmin' (line 1418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'dmin', call_assignment_44557_47215)
        
        # Assigning a Call to a Name (line 1418):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_47218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 12), 'int')
        # Processing the call keyword arguments
        kwargs_47219 = {}
        # Getting the type of 'call_assignment_44556' (line 1418)
        call_assignment_44556_47216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'call_assignment_44556', False)
        # Obtaining the member '__getitem__' of a type (line 1418)
        getitem___47217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 12), call_assignment_44556_47216, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_47220 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___47217, *[int_47218], **kwargs_47219)
        
        # Assigning a type to the variable 'call_assignment_44558' (line 1418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'call_assignment_44558', getitem___call_result_47220)
        
        # Assigning a Name to a Name (line 1418):
        # Getting the type of 'call_assignment_44558' (line 1418)
        call_assignment_44558_47221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'call_assignment_44558')
        # Assigning a type to the variable 'dmax' (line 1418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 18), 'dmax', call_assignment_44558_47221)
        # SSA branch for the except part of a try statement (line 1417)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1417)
        module_type_store.open_ssa_branch('except')
        
        # Obtaining an instance of the builtin type 'list' (line 1420)
        list_47222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1420)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 12), 'stypy_return_type', list_47222)
        # SSA join for try-except statement (line 1417)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to tick_values(...): (line 1422)
        # Processing the call arguments (line 1422)
        # Getting the type of 'dmin' (line 1422)
        dmin_47225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 32), 'dmin', False)
        # Getting the type of 'dmax' (line 1422)
        dmax_47226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 38), 'dmax', False)
        # Processing the call keyword arguments (line 1422)
        kwargs_47227 = {}
        # Getting the type of 'self' (line 1422)
        self_47223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 1422)
        tick_values_47224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 15), self_47223, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1422)
        tick_values_call_result_47228 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 15), tick_values_47224, *[dmin_47225, dmax_47226], **kwargs_47227)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 8), 'stypy_return_type', tick_values_call_result_47228)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1415)
        stypy_return_type_47229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47229)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_47229


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 1424, 4, False)
        # Assigning a type to the variable 'self' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'MicrosecondLocator.tick_values')
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MicrosecondLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MicrosecondLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        # Assigning a Call to a Tuple (line 1425):
        
        # Assigning a Call to a Name:
        
        # Call to date2num(...): (line 1425)
        # Processing the call arguments (line 1425)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1425)
        tuple_47231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1425)
        # Adding element type (line 1425)
        # Getting the type of 'vmin' (line 1425)
        vmin_47232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 31), 'vmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1425, 31), tuple_47231, vmin_47232)
        # Adding element type (line 1425)
        # Getting the type of 'vmax' (line 1425)
        vmax_47233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 37), 'vmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1425, 31), tuple_47231, vmax_47233)
        
        # Processing the call keyword arguments (line 1425)
        kwargs_47234 = {}
        # Getting the type of 'date2num' (line 1425)
        date2num_47230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 21), 'date2num', False)
        # Calling date2num(args, kwargs) (line 1425)
        date2num_call_result_47235 = invoke(stypy.reporting.localization.Localization(__file__, 1425, 21), date2num_47230, *[tuple_47231], **kwargs_47234)
        
        # Assigning a type to the variable 'call_assignment_44559' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 8), 'call_assignment_44559', date2num_call_result_47235)
        
        # Assigning a Call to a Name (line 1425):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_47238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 8), 'int')
        # Processing the call keyword arguments
        kwargs_47239 = {}
        # Getting the type of 'call_assignment_44559' (line 1425)
        call_assignment_44559_47236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 8), 'call_assignment_44559', False)
        # Obtaining the member '__getitem__' of a type (line 1425)
        getitem___47237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 8), call_assignment_44559_47236, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_47240 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___47237, *[int_47238], **kwargs_47239)
        
        # Assigning a type to the variable 'call_assignment_44560' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 8), 'call_assignment_44560', getitem___call_result_47240)
        
        # Assigning a Name to a Name (line 1425):
        # Getting the type of 'call_assignment_44560' (line 1425)
        call_assignment_44560_47241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 8), 'call_assignment_44560')
        # Assigning a type to the variable 'nmin' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 8), 'nmin', call_assignment_44560_47241)
        
        # Assigning a Call to a Name (line 1425):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_47244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 8), 'int')
        # Processing the call keyword arguments
        kwargs_47245 = {}
        # Getting the type of 'call_assignment_44559' (line 1425)
        call_assignment_44559_47242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 8), 'call_assignment_44559', False)
        # Obtaining the member '__getitem__' of a type (line 1425)
        getitem___47243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 8), call_assignment_44559_47242, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_47246 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___47243, *[int_47244], **kwargs_47245)
        
        # Assigning a type to the variable 'call_assignment_44561' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 8), 'call_assignment_44561', getitem___call_result_47246)
        
        # Assigning a Name to a Name (line 1425):
        # Getting the type of 'call_assignment_44561' (line 1425)
        call_assignment_44561_47247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 8), 'call_assignment_44561')
        # Assigning a type to the variable 'nmax' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 14), 'nmax', call_assignment_44561_47247)
        
        # Getting the type of 'nmin' (line 1426)
        nmin_47248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'nmin')
        # Getting the type of 'MUSECONDS_PER_DAY' (line 1426)
        MUSECONDS_PER_DAY_47249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 16), 'MUSECONDS_PER_DAY')
        # Applying the binary operator '*=' (line 1426)
        result_imul_47250 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 8), '*=', nmin_47248, MUSECONDS_PER_DAY_47249)
        # Assigning a type to the variable 'nmin' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'nmin', result_imul_47250)
        
        
        # Getting the type of 'nmax' (line 1427)
        nmax_47251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 8), 'nmax')
        # Getting the type of 'MUSECONDS_PER_DAY' (line 1427)
        MUSECONDS_PER_DAY_47252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 16), 'MUSECONDS_PER_DAY')
        # Applying the binary operator '*=' (line 1427)
        result_imul_47253 = python_operator(stypy.reporting.localization.Localization(__file__, 1427, 8), '*=', nmax_47251, MUSECONDS_PER_DAY_47252)
        # Assigning a type to the variable 'nmax' (line 1427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1427, 8), 'nmax', result_imul_47253)
        
        
        # Assigning a Call to a Name (line 1428):
        
        # Assigning a Call to a Name (line 1428):
        
        # Call to tick_values(...): (line 1428)
        # Processing the call arguments (line 1428)
        # Getting the type of 'nmin' (line 1428)
        nmin_47257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 50), 'nmin', False)
        # Getting the type of 'nmax' (line 1428)
        nmax_47258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 56), 'nmax', False)
        # Processing the call keyword arguments (line 1428)
        kwargs_47259 = {}
        # Getting the type of 'self' (line 1428)
        self_47254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 16), 'self', False)
        # Obtaining the member '_wrapped_locator' of a type (line 1428)
        _wrapped_locator_47255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 16), self_47254, '_wrapped_locator')
        # Obtaining the member 'tick_values' of a type (line 1428)
        tick_values_47256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 16), _wrapped_locator_47255, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1428)
        tick_values_call_result_47260 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 16), tick_values_47256, *[nmin_47257, nmax_47258], **kwargs_47259)
        
        # Assigning a type to the variable 'ticks' (line 1428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 8), 'ticks', tick_values_call_result_47260)
        
        # Assigning a ListComp to a Name (line 1429):
        
        # Assigning a ListComp to a Name (line 1429):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'ticks' (line 1429)
        ticks_47264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 54), 'ticks')
        comprehension_47265 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1429, 17), ticks_47264)
        # Assigning a type to the variable 'tick' (line 1429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1429, 17), 'tick', comprehension_47265)
        # Getting the type of 'tick' (line 1429)
        tick_47261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 17), 'tick')
        # Getting the type of 'MUSECONDS_PER_DAY' (line 1429)
        MUSECONDS_PER_DAY_47262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 24), 'MUSECONDS_PER_DAY')
        # Applying the binary operator 'div' (line 1429)
        result_div_47263 = python_operator(stypy.reporting.localization.Localization(__file__, 1429, 17), 'div', tick_47261, MUSECONDS_PER_DAY_47262)
        
        list_47266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 17), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1429, 17), list_47266, result_div_47263)
        # Assigning a type to the variable 'ticks' (line 1429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1429, 8), 'ticks', list_47266)
        # Getting the type of 'ticks' (line 1430)
        ticks_47267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 15), 'ticks')
        # Assigning a type to the variable 'stypy_return_type' (line 1430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 8), 'stypy_return_type', ticks_47267)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1424)
        stypy_return_type_47268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47268)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_47268


    @norecursion
    def _get_unit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_unit'
        module_type_store = module_type_store.open_function_context('_get_unit', 1432, 4, False)
        # Assigning a type to the variable 'self' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_localization', localization)
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_type_store', module_type_store)
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_function_name', 'MicrosecondLocator._get_unit')
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_param_names_list', [])
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_varargs_param_name', None)
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_call_defaults', defaults)
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_call_varargs', varargs)
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MicrosecondLocator._get_unit.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MicrosecondLocator._get_unit', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_unit', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_unit(...)' code ##################

        unicode_47269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, (-1)), 'unicode', u'\n        Return how many days a unit of the locator is; used for\n        intelligent autoscaling.\n        ')
        float_47270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 15), 'float')
        # Getting the type of 'MUSECONDS_PER_DAY' (line 1437)
        MUSECONDS_PER_DAY_47271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 20), 'MUSECONDS_PER_DAY')
        # Applying the binary operator 'div' (line 1437)
        result_div_47272 = python_operator(stypy.reporting.localization.Localization(__file__, 1437, 15), 'div', float_47270, MUSECONDS_PER_DAY_47271)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 8), 'stypy_return_type', result_div_47272)
        
        # ################# End of '_get_unit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_unit' in the type store
        # Getting the type of 'stypy_return_type' (line 1432)
        stypy_return_type_47273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47273)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_unit'
        return stypy_return_type_47273


    @norecursion
    def _get_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_interval'
        module_type_store = module_type_store.open_function_context('_get_interval', 1439, 4, False)
        # Assigning a type to the variable 'self' (line 1440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_localization', localization)
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_function_name', 'MicrosecondLocator._get_interval')
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_param_names_list', [])
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MicrosecondLocator._get_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MicrosecondLocator._get_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_interval(...)' code ##################

        unicode_47274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, (-1)), 'unicode', u'\n        Return the number of units for each tick.\n        ')
        # Getting the type of 'self' (line 1443)
        self_47275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 15), 'self')
        # Obtaining the member '_interval' of a type (line 1443)
        _interval_47276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 15), self_47275, '_interval')
        # Assigning a type to the variable 'stypy_return_type' (line 1443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 8), 'stypy_return_type', _interval_47276)
        
        # ################# End of '_get_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 1439)
        stypy_return_type_47277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47277)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_interval'
        return stypy_return_type_47277


# Assigning a type to the variable 'MicrosecondLocator' (line 1388)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 0), 'MicrosecondLocator', MicrosecondLocator)

@norecursion
def _close_to_dt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_47278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 33), 'int')
    defaults = [int_47278]
    # Create a new context for function '_close_to_dt'
    module_type_store = module_type_store.open_function_context('_close_to_dt', 1446, 0, False)
    
    # Passed parameters checking function
    _close_to_dt.stypy_localization = localization
    _close_to_dt.stypy_type_of_self = None
    _close_to_dt.stypy_type_store = module_type_store
    _close_to_dt.stypy_function_name = '_close_to_dt'
    _close_to_dt.stypy_param_names_list = ['d1', 'd2', 'epsilon']
    _close_to_dt.stypy_varargs_param_name = None
    _close_to_dt.stypy_kwargs_param_name = None
    _close_to_dt.stypy_call_defaults = defaults
    _close_to_dt.stypy_call_varargs = varargs
    _close_to_dt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_close_to_dt', ['d1', 'd2', 'epsilon'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_close_to_dt', localization, ['d1', 'd2', 'epsilon'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_close_to_dt(...)' code ##################

    unicode_47279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1449, (-1)), 'unicode', u'\n    Assert that datetimes *d1* and *d2* are within *epsilon* microseconds.\n    ')
    
    # Assigning a BinOp to a Name (line 1450):
    
    # Assigning a BinOp to a Name (line 1450):
    # Getting the type of 'd2' (line 1450)
    d2_47280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 12), 'd2')
    # Getting the type of 'd1' (line 1450)
    d1_47281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 17), 'd1')
    # Applying the binary operator '-' (line 1450)
    result_sub_47282 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 12), '-', d2_47280, d1_47281)
    
    # Assigning a type to the variable 'delta' (line 1450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 4), 'delta', result_sub_47282)
    
    # Assigning a Call to a Name (line 1451):
    
    # Assigning a Call to a Name (line 1451):
    
    # Call to abs(...): (line 1451)
    # Processing the call arguments (line 1451)
    
    # Call to total_seconds(...): (line 1451)
    # Processing the call keyword arguments (line 1451)
    kwargs_47286 = {}
    # Getting the type of 'delta' (line 1451)
    delta_47284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 14), 'delta', False)
    # Obtaining the member 'total_seconds' of a type (line 1451)
    total_seconds_47285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1451, 14), delta_47284, 'total_seconds')
    # Calling total_seconds(args, kwargs) (line 1451)
    total_seconds_call_result_47287 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 14), total_seconds_47285, *[], **kwargs_47286)
    
    float_47288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 38), 'float')
    # Applying the binary operator '*' (line 1451)
    result_mul_47289 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 14), '*', total_seconds_call_result_47287, float_47288)
    
    # Processing the call keyword arguments (line 1451)
    kwargs_47290 = {}
    # Getting the type of 'abs' (line 1451)
    abs_47283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 10), 'abs', False)
    # Calling abs(args, kwargs) (line 1451)
    abs_call_result_47291 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 10), abs_47283, *[result_mul_47289], **kwargs_47290)
    
    # Assigning a type to the variable 'mus' (line 1451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 4), 'mus', abs_call_result_47291)
    # Evaluating assert statement condition
    
    # Getting the type of 'mus' (line 1452)
    mus_47292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 11), 'mus')
    # Getting the type of 'epsilon' (line 1452)
    epsilon_47293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 17), 'epsilon')
    # Applying the binary operator '<' (line 1452)
    result_lt_47294 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 11), '<', mus_47292, epsilon_47293)
    
    
    # ################# End of '_close_to_dt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_close_to_dt' in the type store
    # Getting the type of 'stypy_return_type' (line 1446)
    stypy_return_type_47295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_47295)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_close_to_dt'
    return stypy_return_type_47295

# Assigning a type to the variable '_close_to_dt' (line 1446)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 0), '_close_to_dt', _close_to_dt)

@norecursion
def _close_to_num(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_47296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 34), 'int')
    defaults = [int_47296]
    # Create a new context for function '_close_to_num'
    module_type_store = module_type_store.open_function_context('_close_to_num', 1455, 0, False)
    
    # Passed parameters checking function
    _close_to_num.stypy_localization = localization
    _close_to_num.stypy_type_of_self = None
    _close_to_num.stypy_type_store = module_type_store
    _close_to_num.stypy_function_name = '_close_to_num'
    _close_to_num.stypy_param_names_list = ['o1', 'o2', 'epsilon']
    _close_to_num.stypy_varargs_param_name = None
    _close_to_num.stypy_kwargs_param_name = None
    _close_to_num.stypy_call_defaults = defaults
    _close_to_num.stypy_call_varargs = varargs
    _close_to_num.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_close_to_num', ['o1', 'o2', 'epsilon'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_close_to_num', localization, ['o1', 'o2', 'epsilon'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_close_to_num(...)' code ##################

    unicode_47297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, (-1)), 'unicode', u'\n    Assert that float ordinals *o1* and *o2* are within *epsilon*\n    microseconds.\n    ')
    
    # Assigning a Call to a Name (line 1460):
    
    # Assigning a Call to a Name (line 1460):
    
    # Call to abs(...): (line 1460)
    # Processing the call arguments (line 1460)
    # Getting the type of 'o2' (line 1460)
    o2_47299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 17), 'o2', False)
    # Getting the type of 'o1' (line 1460)
    o1_47300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 22), 'o1', False)
    # Applying the binary operator '-' (line 1460)
    result_sub_47301 = python_operator(stypy.reporting.localization.Localization(__file__, 1460, 17), '-', o2_47299, o1_47300)
    
    # Getting the type of 'MUSECONDS_PER_DAY' (line 1460)
    MUSECONDS_PER_DAY_47302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 28), 'MUSECONDS_PER_DAY', False)
    # Applying the binary operator '*' (line 1460)
    result_mul_47303 = python_operator(stypy.reporting.localization.Localization(__file__, 1460, 16), '*', result_sub_47301, MUSECONDS_PER_DAY_47302)
    
    # Processing the call keyword arguments (line 1460)
    kwargs_47304 = {}
    # Getting the type of 'abs' (line 1460)
    abs_47298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 12), 'abs', False)
    # Calling abs(args, kwargs) (line 1460)
    abs_call_result_47305 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 12), abs_47298, *[result_mul_47303], **kwargs_47304)
    
    # Assigning a type to the variable 'delta' (line 1460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 4), 'delta', abs_call_result_47305)
    # Evaluating assert statement condition
    
    # Getting the type of 'delta' (line 1461)
    delta_47306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 11), 'delta')
    # Getting the type of 'epsilon' (line 1461)
    epsilon_47307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 19), 'epsilon')
    # Applying the binary operator '<' (line 1461)
    result_lt_47308 = python_operator(stypy.reporting.localization.Localization(__file__, 1461, 11), '<', delta_47306, epsilon_47307)
    
    
    # ################# End of '_close_to_num(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_close_to_num' in the type store
    # Getting the type of 'stypy_return_type' (line 1455)
    stypy_return_type_47309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_47309)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_close_to_num'
    return stypy_return_type_47309

# Assigning a type to the variable '_close_to_num' (line 1455)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 0), '_close_to_num', _close_to_num)

@norecursion
def epoch2num(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'epoch2num'
    module_type_store = module_type_store.open_function_context('epoch2num', 1464, 0, False)
    
    # Passed parameters checking function
    epoch2num.stypy_localization = localization
    epoch2num.stypy_type_of_self = None
    epoch2num.stypy_type_store = module_type_store
    epoch2num.stypy_function_name = 'epoch2num'
    epoch2num.stypy_param_names_list = ['e']
    epoch2num.stypy_varargs_param_name = None
    epoch2num.stypy_kwargs_param_name = None
    epoch2num.stypy_call_defaults = defaults
    epoch2num.stypy_call_varargs = varargs
    epoch2num.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'epoch2num', ['e'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'epoch2num', localization, ['e'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'epoch2num(...)' code ##################

    unicode_47310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, (-1)), 'unicode', u'\n    Convert an epoch or sequence of epochs to the new date format,\n    that is days since 0001.\n    ')
    # Getting the type of 'EPOCH_OFFSET' (line 1469)
    EPOCH_OFFSET_47311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 11), 'EPOCH_OFFSET')
    
    # Call to asarray(...): (line 1469)
    # Processing the call arguments (line 1469)
    # Getting the type of 'e' (line 1469)
    e_47314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 37), 'e', False)
    # Processing the call keyword arguments (line 1469)
    kwargs_47315 = {}
    # Getting the type of 'np' (line 1469)
    np_47312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 26), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1469)
    asarray_47313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 26), np_47312, 'asarray')
    # Calling asarray(args, kwargs) (line 1469)
    asarray_call_result_47316 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 26), asarray_47313, *[e_47314], **kwargs_47315)
    
    # Getting the type of 'SEC_PER_DAY' (line 1469)
    SEC_PER_DAY_47317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 42), 'SEC_PER_DAY')
    # Applying the binary operator 'div' (line 1469)
    result_div_47318 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 26), 'div', asarray_call_result_47316, SEC_PER_DAY_47317)
    
    # Applying the binary operator '+' (line 1469)
    result_add_47319 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 11), '+', EPOCH_OFFSET_47311, result_div_47318)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 4), 'stypy_return_type', result_add_47319)
    
    # ################# End of 'epoch2num(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'epoch2num' in the type store
    # Getting the type of 'stypy_return_type' (line 1464)
    stypy_return_type_47320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_47320)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'epoch2num'
    return stypy_return_type_47320

# Assigning a type to the variable 'epoch2num' (line 1464)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 0), 'epoch2num', epoch2num)

@norecursion
def num2epoch(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'num2epoch'
    module_type_store = module_type_store.open_function_context('num2epoch', 1472, 0, False)
    
    # Passed parameters checking function
    num2epoch.stypy_localization = localization
    num2epoch.stypy_type_of_self = None
    num2epoch.stypy_type_store = module_type_store
    num2epoch.stypy_function_name = 'num2epoch'
    num2epoch.stypy_param_names_list = ['d']
    num2epoch.stypy_varargs_param_name = None
    num2epoch.stypy_kwargs_param_name = None
    num2epoch.stypy_call_defaults = defaults
    num2epoch.stypy_call_varargs = varargs
    num2epoch.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'num2epoch', ['d'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'num2epoch', localization, ['d'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'num2epoch(...)' code ##################

    unicode_47321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1475, (-1)), 'unicode', u'\n    Convert days since 0001 to epoch.  *d* can be a number or sequence.\n    ')
    
    # Call to asarray(...): (line 1476)
    # Processing the call arguments (line 1476)
    # Getting the type of 'd' (line 1476)
    d_47324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 23), 'd', False)
    # Processing the call keyword arguments (line 1476)
    kwargs_47325 = {}
    # Getting the type of 'np' (line 1476)
    np_47322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1476)
    asarray_47323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1476, 12), np_47322, 'asarray')
    # Calling asarray(args, kwargs) (line 1476)
    asarray_call_result_47326 = invoke(stypy.reporting.localization.Localization(__file__, 1476, 12), asarray_47323, *[d_47324], **kwargs_47325)
    
    # Getting the type of 'EPOCH_OFFSET' (line 1476)
    EPOCH_OFFSET_47327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 28), 'EPOCH_OFFSET')
    # Applying the binary operator '-' (line 1476)
    result_sub_47328 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 12), '-', asarray_call_result_47326, EPOCH_OFFSET_47327)
    
    # Getting the type of 'SEC_PER_DAY' (line 1476)
    SEC_PER_DAY_47329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 44), 'SEC_PER_DAY')
    # Applying the binary operator '*' (line 1476)
    result_mul_47330 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 11), '*', result_sub_47328, SEC_PER_DAY_47329)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1476)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 4), 'stypy_return_type', result_mul_47330)
    
    # ################# End of 'num2epoch(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'num2epoch' in the type store
    # Getting the type of 'stypy_return_type' (line 1472)
    stypy_return_type_47331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_47331)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'num2epoch'
    return stypy_return_type_47331

# Assigning a type to the variable 'num2epoch' (line 1472)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 0), 'num2epoch', num2epoch)

@norecursion
def mx2num(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'mx2num'
    module_type_store = module_type_store.open_function_context('mx2num', 1479, 0, False)
    
    # Passed parameters checking function
    mx2num.stypy_localization = localization
    mx2num.stypy_type_of_self = None
    mx2num.stypy_type_store = module_type_store
    mx2num.stypy_function_name = 'mx2num'
    mx2num.stypy_param_names_list = ['mxdates']
    mx2num.stypy_varargs_param_name = None
    mx2num.stypy_kwargs_param_name = None
    mx2num.stypy_call_defaults = defaults
    mx2num.stypy_call_varargs = varargs
    mx2num.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mx2num', ['mxdates'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mx2num', localization, ['mxdates'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mx2num(...)' code ##################

    unicode_47332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, (-1)), 'unicode', u'\n    Convert mx :class:`datetime` instance (or sequence of mx\n    instances) to the new date format.\n    ')
    
    # Assigning a Name to a Name (line 1484):
    
    # Assigning a Name to a Name (line 1484):
    # Getting the type of 'False' (line 1484)
    False_47333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 13), 'False')
    # Assigning a type to the variable 'scalar' (line 1484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 4), 'scalar', False_47333)
    
    
    
    # Call to iterable(...): (line 1485)
    # Processing the call arguments (line 1485)
    # Getting the type of 'mxdates' (line 1485)
    mxdates_47336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 26), 'mxdates', False)
    # Processing the call keyword arguments (line 1485)
    kwargs_47337 = {}
    # Getting the type of 'cbook' (line 1485)
    cbook_47334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 11), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 1485)
    iterable_47335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1485, 11), cbook_47334, 'iterable')
    # Calling iterable(args, kwargs) (line 1485)
    iterable_call_result_47338 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 11), iterable_47335, *[mxdates_47336], **kwargs_47337)
    
    # Applying the 'not' unary operator (line 1485)
    result_not__47339 = python_operator(stypy.reporting.localization.Localization(__file__, 1485, 7), 'not', iterable_call_result_47338)
    
    # Testing the type of an if condition (line 1485)
    if_condition_47340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1485, 4), result_not__47339)
    # Assigning a type to the variable 'if_condition_47340' (line 1485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 4), 'if_condition_47340', if_condition_47340)
    # SSA begins for if statement (line 1485)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1486):
    
    # Assigning a Name to a Name (line 1486):
    # Getting the type of 'True' (line 1486)
    True_47341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 17), 'True')
    # Assigning a type to the variable 'scalar' (line 1486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 8), 'scalar', True_47341)
    
    # Assigning a List to a Name (line 1487):
    
    # Assigning a List to a Name (line 1487):
    
    # Obtaining an instance of the builtin type 'list' (line 1487)
    list_47342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1487)
    # Adding element type (line 1487)
    # Getting the type of 'mxdates' (line 1487)
    mxdates_47343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 19), 'mxdates')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1487, 18), list_47342, mxdates_47343)
    
    # Assigning a type to the variable 'mxdates' (line 1487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 8), 'mxdates', list_47342)
    # SSA join for if statement (line 1485)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1488):
    
    # Assigning a Call to a Name (line 1488):
    
    # Call to epoch2num(...): (line 1488)
    # Processing the call arguments (line 1488)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'mxdates' (line 1488)
    mxdates_47349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 40), 'mxdates', False)
    comprehension_47350 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1488, 21), mxdates_47349)
    # Assigning a type to the variable 'm' (line 1488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 21), 'm', comprehension_47350)
    
    # Call to ticks(...): (line 1488)
    # Processing the call keyword arguments (line 1488)
    kwargs_47347 = {}
    # Getting the type of 'm' (line 1488)
    m_47345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 21), 'm', False)
    # Obtaining the member 'ticks' of a type (line 1488)
    ticks_47346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1488, 21), m_47345, 'ticks')
    # Calling ticks(args, kwargs) (line 1488)
    ticks_call_result_47348 = invoke(stypy.reporting.localization.Localization(__file__, 1488, 21), ticks_47346, *[], **kwargs_47347)
    
    list_47351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1488, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1488, 21), list_47351, ticks_call_result_47348)
    # Processing the call keyword arguments (line 1488)
    kwargs_47352 = {}
    # Getting the type of 'epoch2num' (line 1488)
    epoch2num_47344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 10), 'epoch2num', False)
    # Calling epoch2num(args, kwargs) (line 1488)
    epoch2num_call_result_47353 = invoke(stypy.reporting.localization.Localization(__file__, 1488, 10), epoch2num_47344, *[list_47351], **kwargs_47352)
    
    # Assigning a type to the variable 'ret' (line 1488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 4), 'ret', epoch2num_call_result_47353)
    
    # Getting the type of 'scalar' (line 1489)
    scalar_47354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 7), 'scalar')
    # Testing the type of an if condition (line 1489)
    if_condition_47355 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1489, 4), scalar_47354)
    # Assigning a type to the variable 'if_condition_47355' (line 1489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 4), 'if_condition_47355', if_condition_47355)
    # SSA begins for if statement (line 1489)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    int_47356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, 19), 'int')
    # Getting the type of 'ret' (line 1490)
    ret_47357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 15), 'ret')
    # Obtaining the member '__getitem__' of a type (line 1490)
    getitem___47358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 15), ret_47357, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1490)
    subscript_call_result_47359 = invoke(stypy.reporting.localization.Localization(__file__, 1490, 15), getitem___47358, int_47356)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 8), 'stypy_return_type', subscript_call_result_47359)
    # SSA branch for the else part of an if statement (line 1489)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'ret' (line 1492)
    ret_47360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 15), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 1492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'stypy_return_type', ret_47360)
    # SSA join for if statement (line 1489)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'mx2num(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mx2num' in the type store
    # Getting the type of 'stypy_return_type' (line 1479)
    stypy_return_type_47361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_47361)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mx2num'
    return stypy_return_type_47361

# Assigning a type to the variable 'mx2num' (line 1479)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 0), 'mx2num', mx2num)

@norecursion
def date_ticker_factory(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1495)
    None_47362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 33), 'None')
    int_47363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1495, 48), 'int')
    defaults = [None_47362, int_47363]
    # Create a new context for function 'date_ticker_factory'
    module_type_store = module_type_store.open_function_context('date_ticker_factory', 1495, 0, False)
    
    # Passed parameters checking function
    date_ticker_factory.stypy_localization = localization
    date_ticker_factory.stypy_type_of_self = None
    date_ticker_factory.stypy_type_store = module_type_store
    date_ticker_factory.stypy_function_name = 'date_ticker_factory'
    date_ticker_factory.stypy_param_names_list = ['span', 'tz', 'numticks']
    date_ticker_factory.stypy_varargs_param_name = None
    date_ticker_factory.stypy_kwargs_param_name = None
    date_ticker_factory.stypy_call_defaults = defaults
    date_ticker_factory.stypy_call_varargs = varargs
    date_ticker_factory.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'date_ticker_factory', ['span', 'tz', 'numticks'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'date_ticker_factory', localization, ['span', 'tz', 'numticks'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'date_ticker_factory(...)' code ##################

    unicode_47364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1499, (-1)), 'unicode', u'\n    Create a date locator with *numticks* (approx) and a date formatter\n    for *span* in days.  Return value is (locator, formatter).\n    ')
    
    
    # Getting the type of 'span' (line 1501)
    span_47365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 7), 'span')
    int_47366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, 15), 'int')
    # Applying the binary operator '==' (line 1501)
    result_eq_47367 = python_operator(stypy.reporting.localization.Localization(__file__, 1501, 7), '==', span_47365, int_47366)
    
    # Testing the type of an if condition (line 1501)
    if_condition_47368 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1501, 4), result_eq_47367)
    # Assigning a type to the variable 'if_condition_47368' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'if_condition_47368', if_condition_47368)
    # SSA begins for if statement (line 1501)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1502):
    
    # Assigning a BinOp to a Name (line 1502):
    int_47369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1502, 15), 'int')
    # Getting the type of 'HOURS_PER_DAY' (line 1502)
    HOURS_PER_DAY_47370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 19), 'HOURS_PER_DAY')
    # Applying the binary operator 'div' (line 1502)
    result_div_47371 = python_operator(stypy.reporting.localization.Localization(__file__, 1502, 15), 'div', int_47369, HOURS_PER_DAY_47370)
    
    # Assigning a type to the variable 'span' (line 1502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 8), 'span', result_div_47371)
    # SSA join for if statement (line 1501)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1504):
    
    # Assigning a BinOp to a Name (line 1504):
    # Getting the type of 'span' (line 1504)
    span_47372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 11), 'span')
    # Getting the type of 'MINUTES_PER_DAY' (line 1504)
    MINUTES_PER_DAY_47373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 18), 'MINUTES_PER_DAY')
    # Applying the binary operator '*' (line 1504)
    result_mul_47374 = python_operator(stypy.reporting.localization.Localization(__file__, 1504, 11), '*', span_47372, MINUTES_PER_DAY_47373)
    
    # Assigning a type to the variable 'mins' (line 1504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1504, 4), 'mins', result_mul_47374)
    
    # Assigning a BinOp to a Name (line 1505):
    
    # Assigning a BinOp to a Name (line 1505):
    # Getting the type of 'span' (line 1505)
    span_47375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 10), 'span')
    # Getting the type of 'HOURS_PER_DAY' (line 1505)
    HOURS_PER_DAY_47376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 17), 'HOURS_PER_DAY')
    # Applying the binary operator '*' (line 1505)
    result_mul_47377 = python_operator(stypy.reporting.localization.Localization(__file__, 1505, 10), '*', span_47375, HOURS_PER_DAY_47376)
    
    # Assigning a type to the variable 'hrs' (line 1505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 4), 'hrs', result_mul_47377)
    
    # Assigning a Name to a Name (line 1506):
    
    # Assigning a Name to a Name (line 1506):
    # Getting the type of 'span' (line 1506)
    span_47378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 11), 'span')
    # Assigning a type to the variable 'days' (line 1506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 4), 'days', span_47378)
    
    # Assigning a BinOp to a Name (line 1507):
    
    # Assigning a BinOp to a Name (line 1507):
    # Getting the type of 'span' (line 1507)
    span_47379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 10), 'span')
    # Getting the type of 'DAYS_PER_WEEK' (line 1507)
    DAYS_PER_WEEK_47380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 17), 'DAYS_PER_WEEK')
    # Applying the binary operator 'div' (line 1507)
    result_div_47381 = python_operator(stypy.reporting.localization.Localization(__file__, 1507, 10), 'div', span_47379, DAYS_PER_WEEK_47380)
    
    # Assigning a type to the variable 'wks' (line 1507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 4), 'wks', result_div_47381)
    
    # Assigning a BinOp to a Name (line 1508):
    
    # Assigning a BinOp to a Name (line 1508):
    # Getting the type of 'span' (line 1508)
    span_47382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 13), 'span')
    # Getting the type of 'DAYS_PER_MONTH' (line 1508)
    DAYS_PER_MONTH_47383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 20), 'DAYS_PER_MONTH')
    # Applying the binary operator 'div' (line 1508)
    result_div_47384 = python_operator(stypy.reporting.localization.Localization(__file__, 1508, 13), 'div', span_47382, DAYS_PER_MONTH_47383)
    
    # Assigning a type to the variable 'months' (line 1508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 4), 'months', result_div_47384)
    
    # Assigning a BinOp to a Name (line 1509):
    
    # Assigning a BinOp to a Name (line 1509):
    # Getting the type of 'span' (line 1509)
    span_47385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 12), 'span')
    # Getting the type of 'DAYS_PER_YEAR' (line 1509)
    DAYS_PER_YEAR_47386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 19), 'DAYS_PER_YEAR')
    # Applying the binary operator 'div' (line 1509)
    result_div_47387 = python_operator(stypy.reporting.localization.Localization(__file__, 1509, 12), 'div', span_47385, DAYS_PER_YEAR_47386)
    
    # Assigning a type to the variable 'years' (line 1509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 4), 'years', result_div_47387)
    
    
    # Getting the type of 'years' (line 1511)
    years_47388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 7), 'years')
    # Getting the type of 'numticks' (line 1511)
    numticks_47389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 15), 'numticks')
    # Applying the binary operator '>' (line 1511)
    result_gt_47390 = python_operator(stypy.reporting.localization.Localization(__file__, 1511, 7), '>', years_47388, numticks_47389)
    
    # Testing the type of an if condition (line 1511)
    if_condition_47391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1511, 4), result_gt_47390)
    # Assigning a type to the variable 'if_condition_47391' (line 1511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1511, 4), 'if_condition_47391', if_condition_47391)
    # SSA begins for if statement (line 1511)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1512):
    
    # Assigning a Call to a Name (line 1512):
    
    # Call to YearLocator(...): (line 1512)
    # Processing the call arguments (line 1512)
    
    # Call to int(...): (line 1512)
    # Processing the call arguments (line 1512)
    # Getting the type of 'years' (line 1512)
    years_47394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 34), 'years', False)
    # Getting the type of 'numticks' (line 1512)
    numticks_47395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 42), 'numticks', False)
    # Applying the binary operator 'div' (line 1512)
    result_div_47396 = python_operator(stypy.reporting.localization.Localization(__file__, 1512, 34), 'div', years_47394, numticks_47395)
    
    # Processing the call keyword arguments (line 1512)
    kwargs_47397 = {}
    # Getting the type of 'int' (line 1512)
    int_47393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 30), 'int', False)
    # Calling int(args, kwargs) (line 1512)
    int_call_result_47398 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 30), int_47393, *[result_div_47396], **kwargs_47397)
    
    # Processing the call keyword arguments (line 1512)
    # Getting the type of 'tz' (line 1512)
    tz_47399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 56), 'tz', False)
    keyword_47400 = tz_47399
    kwargs_47401 = {'tz': keyword_47400}
    # Getting the type of 'YearLocator' (line 1512)
    YearLocator_47392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 18), 'YearLocator', False)
    # Calling YearLocator(args, kwargs) (line 1512)
    YearLocator_call_result_47402 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 18), YearLocator_47392, *[int_call_result_47398], **kwargs_47401)
    
    # Assigning a type to the variable 'locator' (line 1512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 8), 'locator', YearLocator_call_result_47402)
    
    # Assigning a Str to a Name (line 1513):
    
    # Assigning a Str to a Name (line 1513):
    unicode_47403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1513, 14), 'unicode', u'%Y')
    # Assigning a type to the variable 'fmt' (line 1513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1513, 8), 'fmt', unicode_47403)
    # SSA branch for the else part of an if statement (line 1511)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'months' (line 1514)
    months_47404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 9), 'months')
    # Getting the type of 'numticks' (line 1514)
    numticks_47405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 18), 'numticks')
    # Applying the binary operator '>' (line 1514)
    result_gt_47406 = python_operator(stypy.reporting.localization.Localization(__file__, 1514, 9), '>', months_47404, numticks_47405)
    
    # Testing the type of an if condition (line 1514)
    if_condition_47407 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1514, 9), result_gt_47406)
    # Assigning a type to the variable 'if_condition_47407' (line 1514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 9), 'if_condition_47407', if_condition_47407)
    # SSA begins for if statement (line 1514)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1515):
    
    # Assigning a Call to a Name (line 1515):
    
    # Call to MonthLocator(...): (line 1515)
    # Processing the call keyword arguments (line 1515)
    # Getting the type of 'tz' (line 1515)
    tz_47409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 34), 'tz', False)
    keyword_47410 = tz_47409
    kwargs_47411 = {'tz': keyword_47410}
    # Getting the type of 'MonthLocator' (line 1515)
    MonthLocator_47408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 18), 'MonthLocator', False)
    # Calling MonthLocator(args, kwargs) (line 1515)
    MonthLocator_call_result_47412 = invoke(stypy.reporting.localization.Localization(__file__, 1515, 18), MonthLocator_47408, *[], **kwargs_47411)
    
    # Assigning a type to the variable 'locator' (line 1515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1515, 8), 'locator', MonthLocator_call_result_47412)
    
    # Assigning a Str to a Name (line 1516):
    
    # Assigning a Str to a Name (line 1516):
    unicode_47413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 14), 'unicode', u'%b %Y')
    # Assigning a type to the variable 'fmt' (line 1516)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 8), 'fmt', unicode_47413)
    # SSA branch for the else part of an if statement (line 1514)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'wks' (line 1517)
    wks_47414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 9), 'wks')
    # Getting the type of 'numticks' (line 1517)
    numticks_47415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 15), 'numticks')
    # Applying the binary operator '>' (line 1517)
    result_gt_47416 = python_operator(stypy.reporting.localization.Localization(__file__, 1517, 9), '>', wks_47414, numticks_47415)
    
    # Testing the type of an if condition (line 1517)
    if_condition_47417 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1517, 9), result_gt_47416)
    # Assigning a type to the variable 'if_condition_47417' (line 1517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 9), 'if_condition_47417', if_condition_47417)
    # SSA begins for if statement (line 1517)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1518):
    
    # Assigning a Call to a Name (line 1518):
    
    # Call to WeekdayLocator(...): (line 1518)
    # Processing the call keyword arguments (line 1518)
    # Getting the type of 'tz' (line 1518)
    tz_47419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 36), 'tz', False)
    keyword_47420 = tz_47419
    kwargs_47421 = {'tz': keyword_47420}
    # Getting the type of 'WeekdayLocator' (line 1518)
    WeekdayLocator_47418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 18), 'WeekdayLocator', False)
    # Calling WeekdayLocator(args, kwargs) (line 1518)
    WeekdayLocator_call_result_47422 = invoke(stypy.reporting.localization.Localization(__file__, 1518, 18), WeekdayLocator_47418, *[], **kwargs_47421)
    
    # Assigning a type to the variable 'locator' (line 1518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1518, 8), 'locator', WeekdayLocator_call_result_47422)
    
    # Assigning a Str to a Name (line 1519):
    
    # Assigning a Str to a Name (line 1519):
    unicode_47423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1519, 14), 'unicode', u'%a, %b %d')
    # Assigning a type to the variable 'fmt' (line 1519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 8), 'fmt', unicode_47423)
    # SSA branch for the else part of an if statement (line 1517)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'days' (line 1520)
    days_47424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 9), 'days')
    # Getting the type of 'numticks' (line 1520)
    numticks_47425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 16), 'numticks')
    # Applying the binary operator '>' (line 1520)
    result_gt_47426 = python_operator(stypy.reporting.localization.Localization(__file__, 1520, 9), '>', days_47424, numticks_47425)
    
    # Testing the type of an if condition (line 1520)
    if_condition_47427 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1520, 9), result_gt_47426)
    # Assigning a type to the variable 'if_condition_47427' (line 1520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1520, 9), 'if_condition_47427', if_condition_47427)
    # SSA begins for if statement (line 1520)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1521):
    
    # Assigning a Call to a Name (line 1521):
    
    # Call to DayLocator(...): (line 1521)
    # Processing the call keyword arguments (line 1521)
    
    # Call to int(...): (line 1521)
    # Processing the call arguments (line 1521)
    
    # Call to ceil(...): (line 1521)
    # Processing the call arguments (line 1521)
    # Getting the type of 'days' (line 1521)
    days_47432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 52), 'days', False)
    # Getting the type of 'numticks' (line 1521)
    numticks_47433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 59), 'numticks', False)
    # Applying the binary operator 'div' (line 1521)
    result_div_47434 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 52), 'div', days_47432, numticks_47433)
    
    # Processing the call keyword arguments (line 1521)
    kwargs_47435 = {}
    # Getting the type of 'math' (line 1521)
    math_47430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 42), 'math', False)
    # Obtaining the member 'ceil' of a type (line 1521)
    ceil_47431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1521, 42), math_47430, 'ceil')
    # Calling ceil(args, kwargs) (line 1521)
    ceil_call_result_47436 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 42), ceil_47431, *[result_div_47434], **kwargs_47435)
    
    # Processing the call keyword arguments (line 1521)
    kwargs_47437 = {}
    # Getting the type of 'int' (line 1521)
    int_47429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 38), 'int', False)
    # Calling int(args, kwargs) (line 1521)
    int_call_result_47438 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 38), int_47429, *[ceil_call_result_47436], **kwargs_47437)
    
    keyword_47439 = int_call_result_47438
    # Getting the type of 'tz' (line 1521)
    tz_47440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 74), 'tz', False)
    keyword_47441 = tz_47440
    kwargs_47442 = {'interval': keyword_47439, 'tz': keyword_47441}
    # Getting the type of 'DayLocator' (line 1521)
    DayLocator_47428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 18), 'DayLocator', False)
    # Calling DayLocator(args, kwargs) (line 1521)
    DayLocator_call_result_47443 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 18), DayLocator_47428, *[], **kwargs_47442)
    
    # Assigning a type to the variable 'locator' (line 1521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1521, 8), 'locator', DayLocator_call_result_47443)
    
    # Assigning a Str to a Name (line 1522):
    
    # Assigning a Str to a Name (line 1522):
    unicode_47444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1522, 14), 'unicode', u'%b %d')
    # Assigning a type to the variable 'fmt' (line 1522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1522, 8), 'fmt', unicode_47444)
    # SSA branch for the else part of an if statement (line 1520)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'hrs' (line 1523)
    hrs_47445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 9), 'hrs')
    # Getting the type of 'numticks' (line 1523)
    numticks_47446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 15), 'numticks')
    # Applying the binary operator '>' (line 1523)
    result_gt_47447 = python_operator(stypy.reporting.localization.Localization(__file__, 1523, 9), '>', hrs_47445, numticks_47446)
    
    # Testing the type of an if condition (line 1523)
    if_condition_47448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1523, 9), result_gt_47447)
    # Assigning a type to the variable 'if_condition_47448' (line 1523)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 9), 'if_condition_47448', if_condition_47448)
    # SSA begins for if statement (line 1523)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1524):
    
    # Assigning a Call to a Name (line 1524):
    
    # Call to HourLocator(...): (line 1524)
    # Processing the call keyword arguments (line 1524)
    
    # Call to int(...): (line 1524)
    # Processing the call arguments (line 1524)
    
    # Call to ceil(...): (line 1524)
    # Processing the call arguments (line 1524)
    # Getting the type of 'hrs' (line 1524)
    hrs_47453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 53), 'hrs', False)
    # Getting the type of 'numticks' (line 1524)
    numticks_47454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 59), 'numticks', False)
    # Applying the binary operator 'div' (line 1524)
    result_div_47455 = python_operator(stypy.reporting.localization.Localization(__file__, 1524, 53), 'div', hrs_47453, numticks_47454)
    
    # Processing the call keyword arguments (line 1524)
    kwargs_47456 = {}
    # Getting the type of 'math' (line 1524)
    math_47451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 43), 'math', False)
    # Obtaining the member 'ceil' of a type (line 1524)
    ceil_47452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 43), math_47451, 'ceil')
    # Calling ceil(args, kwargs) (line 1524)
    ceil_call_result_47457 = invoke(stypy.reporting.localization.Localization(__file__, 1524, 43), ceil_47452, *[result_div_47455], **kwargs_47456)
    
    # Processing the call keyword arguments (line 1524)
    kwargs_47458 = {}
    # Getting the type of 'int' (line 1524)
    int_47450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 39), 'int', False)
    # Calling int(args, kwargs) (line 1524)
    int_call_result_47459 = invoke(stypy.reporting.localization.Localization(__file__, 1524, 39), int_47450, *[ceil_call_result_47457], **kwargs_47458)
    
    keyword_47460 = int_call_result_47459
    # Getting the type of 'tz' (line 1524)
    tz_47461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 74), 'tz', False)
    keyword_47462 = tz_47461
    kwargs_47463 = {'interval': keyword_47460, 'tz': keyword_47462}
    # Getting the type of 'HourLocator' (line 1524)
    HourLocator_47449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 18), 'HourLocator', False)
    # Calling HourLocator(args, kwargs) (line 1524)
    HourLocator_call_result_47464 = invoke(stypy.reporting.localization.Localization(__file__, 1524, 18), HourLocator_47449, *[], **kwargs_47463)
    
    # Assigning a type to the variable 'locator' (line 1524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 8), 'locator', HourLocator_call_result_47464)
    
    # Assigning a Str to a Name (line 1525):
    
    # Assigning a Str to a Name (line 1525):
    unicode_47465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 14), 'unicode', u'%H:%M\n%b %d')
    # Assigning a type to the variable 'fmt' (line 1525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 8), 'fmt', unicode_47465)
    # SSA branch for the else part of an if statement (line 1523)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mins' (line 1526)
    mins_47466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 9), 'mins')
    # Getting the type of 'numticks' (line 1526)
    numticks_47467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 16), 'numticks')
    # Applying the binary operator '>' (line 1526)
    result_gt_47468 = python_operator(stypy.reporting.localization.Localization(__file__, 1526, 9), '>', mins_47466, numticks_47467)
    
    # Testing the type of an if condition (line 1526)
    if_condition_47469 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1526, 9), result_gt_47468)
    # Assigning a type to the variable 'if_condition_47469' (line 1526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 9), 'if_condition_47469', if_condition_47469)
    # SSA begins for if statement (line 1526)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1527):
    
    # Assigning a Call to a Name (line 1527):
    
    # Call to MinuteLocator(...): (line 1527)
    # Processing the call keyword arguments (line 1527)
    
    # Call to int(...): (line 1527)
    # Processing the call arguments (line 1527)
    
    # Call to ceil(...): (line 1527)
    # Processing the call arguments (line 1527)
    # Getting the type of 'mins' (line 1527)
    mins_47474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 55), 'mins', False)
    # Getting the type of 'numticks' (line 1527)
    numticks_47475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 62), 'numticks', False)
    # Applying the binary operator 'div' (line 1527)
    result_div_47476 = python_operator(stypy.reporting.localization.Localization(__file__, 1527, 55), 'div', mins_47474, numticks_47475)
    
    # Processing the call keyword arguments (line 1527)
    kwargs_47477 = {}
    # Getting the type of 'math' (line 1527)
    math_47472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 45), 'math', False)
    # Obtaining the member 'ceil' of a type (line 1527)
    ceil_47473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 45), math_47472, 'ceil')
    # Calling ceil(args, kwargs) (line 1527)
    ceil_call_result_47478 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 45), ceil_47473, *[result_div_47476], **kwargs_47477)
    
    # Processing the call keyword arguments (line 1527)
    kwargs_47479 = {}
    # Getting the type of 'int' (line 1527)
    int_47471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 41), 'int', False)
    # Calling int(args, kwargs) (line 1527)
    int_call_result_47480 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 41), int_47471, *[ceil_call_result_47478], **kwargs_47479)
    
    keyword_47481 = int_call_result_47480
    # Getting the type of 'tz' (line 1528)
    tz_47482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 35), 'tz', False)
    keyword_47483 = tz_47482
    kwargs_47484 = {'interval': keyword_47481, 'tz': keyword_47483}
    # Getting the type of 'MinuteLocator' (line 1527)
    MinuteLocator_47470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 18), 'MinuteLocator', False)
    # Calling MinuteLocator(args, kwargs) (line 1527)
    MinuteLocator_call_result_47485 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 18), MinuteLocator_47470, *[], **kwargs_47484)
    
    # Assigning a type to the variable 'locator' (line 1527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 8), 'locator', MinuteLocator_call_result_47485)
    
    # Assigning a Str to a Name (line 1529):
    
    # Assigning a Str to a Name (line 1529):
    unicode_47486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 14), 'unicode', u'%H:%M:%S')
    # Assigning a type to the variable 'fmt' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 8), 'fmt', unicode_47486)
    # SSA branch for the else part of an if statement (line 1526)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1531):
    
    # Assigning a Call to a Name (line 1531):
    
    # Call to MinuteLocator(...): (line 1531)
    # Processing the call keyword arguments (line 1531)
    # Getting the type of 'tz' (line 1531)
    tz_47488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 35), 'tz', False)
    keyword_47489 = tz_47488
    kwargs_47490 = {'tz': keyword_47489}
    # Getting the type of 'MinuteLocator' (line 1531)
    MinuteLocator_47487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 18), 'MinuteLocator', False)
    # Calling MinuteLocator(args, kwargs) (line 1531)
    MinuteLocator_call_result_47491 = invoke(stypy.reporting.localization.Localization(__file__, 1531, 18), MinuteLocator_47487, *[], **kwargs_47490)
    
    # Assigning a type to the variable 'locator' (line 1531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 8), 'locator', MinuteLocator_call_result_47491)
    
    # Assigning a Str to a Name (line 1532):
    
    # Assigning a Str to a Name (line 1532):
    unicode_47492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 14), 'unicode', u'%H:%M:%S')
    # Assigning a type to the variable 'fmt' (line 1532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'fmt', unicode_47492)
    # SSA join for if statement (line 1526)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1523)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1520)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1517)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1514)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1511)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1534):
    
    # Assigning a Call to a Name (line 1534):
    
    # Call to DateFormatter(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'fmt' (line 1534)
    fmt_47494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 30), 'fmt', False)
    # Processing the call keyword arguments (line 1534)
    # Getting the type of 'tz' (line 1534)
    tz_47495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 38), 'tz', False)
    keyword_47496 = tz_47495
    kwargs_47497 = {'tz': keyword_47496}
    # Getting the type of 'DateFormatter' (line 1534)
    DateFormatter_47493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 16), 'DateFormatter', False)
    # Calling DateFormatter(args, kwargs) (line 1534)
    DateFormatter_call_result_47498 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 16), DateFormatter_47493, *[fmt_47494], **kwargs_47497)
    
    # Assigning a type to the variable 'formatter' (line 1534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 4), 'formatter', DateFormatter_call_result_47498)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1535)
    tuple_47499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1535)
    # Adding element type (line 1535)
    # Getting the type of 'locator' (line 1535)
    locator_47500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 11), 'locator')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1535, 11), tuple_47499, locator_47500)
    # Adding element type (line 1535)
    # Getting the type of 'formatter' (line 1535)
    formatter_47501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 20), 'formatter')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1535, 11), tuple_47499, formatter_47501)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 4), 'stypy_return_type', tuple_47499)
    
    # ################# End of 'date_ticker_factory(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'date_ticker_factory' in the type store
    # Getting the type of 'stypy_return_type' (line 1495)
    stypy_return_type_47502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_47502)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'date_ticker_factory'
    return stypy_return_type_47502

# Assigning a type to the variable 'date_ticker_factory' (line 1495)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1495, 0), 'date_ticker_factory', date_ticker_factory)

@norecursion
def seconds(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'seconds'
    module_type_store = module_type_store.open_function_context('seconds', 1538, 0, False)
    
    # Passed parameters checking function
    seconds.stypy_localization = localization
    seconds.stypy_type_of_self = None
    seconds.stypy_type_store = module_type_store
    seconds.stypy_function_name = 'seconds'
    seconds.stypy_param_names_list = ['s']
    seconds.stypy_varargs_param_name = None
    seconds.stypy_kwargs_param_name = None
    seconds.stypy_call_defaults = defaults
    seconds.stypy_call_varargs = varargs
    seconds.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'seconds', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'seconds', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'seconds(...)' code ##################

    unicode_47503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, (-1)), 'unicode', u'\n    Return seconds as days.\n    ')
    
    # Call to float(...): (line 1542)
    # Processing the call arguments (line 1542)
    # Getting the type of 's' (line 1542)
    s_47505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 17), 's', False)
    # Processing the call keyword arguments (line 1542)
    kwargs_47506 = {}
    # Getting the type of 'float' (line 1542)
    float_47504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 11), 'float', False)
    # Calling float(args, kwargs) (line 1542)
    float_call_result_47507 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 11), float_47504, *[s_47505], **kwargs_47506)
    
    # Getting the type of 'SEC_PER_DAY' (line 1542)
    SEC_PER_DAY_47508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 22), 'SEC_PER_DAY')
    # Applying the binary operator 'div' (line 1542)
    result_div_47509 = python_operator(stypy.reporting.localization.Localization(__file__, 1542, 11), 'div', float_call_result_47507, SEC_PER_DAY_47508)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 4), 'stypy_return_type', result_div_47509)
    
    # ################# End of 'seconds(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'seconds' in the type store
    # Getting the type of 'stypy_return_type' (line 1538)
    stypy_return_type_47510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_47510)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'seconds'
    return stypy_return_type_47510

# Assigning a type to the variable 'seconds' (line 1538)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 0), 'seconds', seconds)

@norecursion
def minutes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'minutes'
    module_type_store = module_type_store.open_function_context('minutes', 1545, 0, False)
    
    # Passed parameters checking function
    minutes.stypy_localization = localization
    minutes.stypy_type_of_self = None
    minutes.stypy_type_store = module_type_store
    minutes.stypy_function_name = 'minutes'
    minutes.stypy_param_names_list = ['m']
    minutes.stypy_varargs_param_name = None
    minutes.stypy_kwargs_param_name = None
    minutes.stypy_call_defaults = defaults
    minutes.stypy_call_varargs = varargs
    minutes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'minutes', ['m'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'minutes', localization, ['m'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'minutes(...)' code ##################

    unicode_47511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, (-1)), 'unicode', u'\n    Return minutes as days.\n    ')
    
    # Call to float(...): (line 1549)
    # Processing the call arguments (line 1549)
    # Getting the type of 'm' (line 1549)
    m_47513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 17), 'm', False)
    # Processing the call keyword arguments (line 1549)
    kwargs_47514 = {}
    # Getting the type of 'float' (line 1549)
    float_47512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 11), 'float', False)
    # Calling float(args, kwargs) (line 1549)
    float_call_result_47515 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 11), float_47512, *[m_47513], **kwargs_47514)
    
    # Getting the type of 'MINUTES_PER_DAY' (line 1549)
    MINUTES_PER_DAY_47516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 22), 'MINUTES_PER_DAY')
    # Applying the binary operator 'div' (line 1549)
    result_div_47517 = python_operator(stypy.reporting.localization.Localization(__file__, 1549, 11), 'div', float_call_result_47515, MINUTES_PER_DAY_47516)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 4), 'stypy_return_type', result_div_47517)
    
    # ################# End of 'minutes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'minutes' in the type store
    # Getting the type of 'stypy_return_type' (line 1545)
    stypy_return_type_47518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_47518)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'minutes'
    return stypy_return_type_47518

# Assigning a type to the variable 'minutes' (line 1545)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 0), 'minutes', minutes)

@norecursion
def hours(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'hours'
    module_type_store = module_type_store.open_function_context('hours', 1552, 0, False)
    
    # Passed parameters checking function
    hours.stypy_localization = localization
    hours.stypy_type_of_self = None
    hours.stypy_type_store = module_type_store
    hours.stypy_function_name = 'hours'
    hours.stypy_param_names_list = ['h']
    hours.stypy_varargs_param_name = None
    hours.stypy_kwargs_param_name = None
    hours.stypy_call_defaults = defaults
    hours.stypy_call_varargs = varargs
    hours.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hours', ['h'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hours', localization, ['h'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hours(...)' code ##################

    unicode_47519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1555, (-1)), 'unicode', u'\n    Return hours as days.\n    ')
    # Getting the type of 'h' (line 1556)
    h_47520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 11), 'h')
    # Getting the type of 'HOURS_PER_DAY' (line 1556)
    HOURS_PER_DAY_47521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 15), 'HOURS_PER_DAY')
    # Applying the binary operator 'div' (line 1556)
    result_div_47522 = python_operator(stypy.reporting.localization.Localization(__file__, 1556, 11), 'div', h_47520, HOURS_PER_DAY_47521)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1556, 4), 'stypy_return_type', result_div_47522)
    
    # ################# End of 'hours(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hours' in the type store
    # Getting the type of 'stypy_return_type' (line 1552)
    stypy_return_type_47523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_47523)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hours'
    return stypy_return_type_47523

# Assigning a type to the variable 'hours' (line 1552)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 0), 'hours', hours)

@norecursion
def weeks(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'weeks'
    module_type_store = module_type_store.open_function_context('weeks', 1559, 0, False)
    
    # Passed parameters checking function
    weeks.stypy_localization = localization
    weeks.stypy_type_of_self = None
    weeks.stypy_type_store = module_type_store
    weeks.stypy_function_name = 'weeks'
    weeks.stypy_param_names_list = ['w']
    weeks.stypy_varargs_param_name = None
    weeks.stypy_kwargs_param_name = None
    weeks.stypy_call_defaults = defaults
    weeks.stypy_call_varargs = varargs
    weeks.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'weeks', ['w'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'weeks', localization, ['w'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'weeks(...)' code ##################

    unicode_47524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, (-1)), 'unicode', u'\n    Return weeks as days.\n    ')
    # Getting the type of 'w' (line 1563)
    w_47525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 11), 'w')
    # Getting the type of 'DAYS_PER_WEEK' (line 1563)
    DAYS_PER_WEEK_47526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 15), 'DAYS_PER_WEEK')
    # Applying the binary operator '*' (line 1563)
    result_mul_47527 = python_operator(stypy.reporting.localization.Localization(__file__, 1563, 11), '*', w_47525, DAYS_PER_WEEK_47526)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1563, 4), 'stypy_return_type', result_mul_47527)
    
    # ################# End of 'weeks(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'weeks' in the type store
    # Getting the type of 'stypy_return_type' (line 1559)
    stypy_return_type_47528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_47528)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'weeks'
    return stypy_return_type_47528

# Assigning a type to the variable 'weeks' (line 1559)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1559, 0), 'weeks', weeks)
# Declaration of the 'DateConverter' class
# Getting the type of 'units' (line 1566)
units_47529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 20), 'units')
# Obtaining the member 'ConversionInterface' of a type (line 1566)
ConversionInterface_47530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 20), units_47529, 'ConversionInterface')

class DateConverter(ConversionInterface_47530, ):
    unicode_47531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, (-1)), 'unicode', u"\n    Converter for datetime.date and datetime.datetime data,\n    or for date/time data represented as it would be converted\n    by :func:`date2num`.\n\n    The 'unit' tag for such data is None or a tzinfo instance.\n    ")

    @staticmethod
    @norecursion
    def axisinfo(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'axisinfo'
        module_type_store = module_type_store.open_function_context('axisinfo', 1575, 4, False)
        
        # Passed parameters checking function
        DateConverter.axisinfo.__dict__.__setitem__('stypy_localization', localization)
        DateConverter.axisinfo.__dict__.__setitem__('stypy_type_of_self', None)
        DateConverter.axisinfo.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateConverter.axisinfo.__dict__.__setitem__('stypy_function_name', 'axisinfo')
        DateConverter.axisinfo.__dict__.__setitem__('stypy_param_names_list', ['unit', 'axis'])
        DateConverter.axisinfo.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateConverter.axisinfo.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateConverter.axisinfo.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateConverter.axisinfo.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateConverter.axisinfo.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateConverter.axisinfo.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, 'axisinfo', ['unit', 'axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'axisinfo', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'axisinfo(...)' code ##################

        unicode_47532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, (-1)), 'unicode', u'\n        Return the :class:`~matplotlib.units.AxisInfo` for *unit*.\n\n        *unit* is a tzinfo instance or None.\n        The *axis* argument is required but not used.\n        ')
        
        # Assigning a Name to a Name (line 1583):
        
        # Assigning a Name to a Name (line 1583):
        # Getting the type of 'unit' (line 1583)
        unit_47533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 13), 'unit')
        # Assigning a type to the variable 'tz' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 8), 'tz', unit_47533)
        
        # Assigning a Call to a Name (line 1585):
        
        # Assigning a Call to a Name (line 1585):
        
        # Call to AutoDateLocator(...): (line 1585)
        # Processing the call keyword arguments (line 1585)
        # Getting the type of 'tz' (line 1585)
        tz_47535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 36), 'tz', False)
        keyword_47536 = tz_47535
        kwargs_47537 = {'tz': keyword_47536}
        # Getting the type of 'AutoDateLocator' (line 1585)
        AutoDateLocator_47534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 17), 'AutoDateLocator', False)
        # Calling AutoDateLocator(args, kwargs) (line 1585)
        AutoDateLocator_call_result_47538 = invoke(stypy.reporting.localization.Localization(__file__, 1585, 17), AutoDateLocator_47534, *[], **kwargs_47537)
        
        # Assigning a type to the variable 'majloc' (line 1585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 8), 'majloc', AutoDateLocator_call_result_47538)
        
        # Assigning a Call to a Name (line 1586):
        
        # Assigning a Call to a Name (line 1586):
        
        # Call to AutoDateFormatter(...): (line 1586)
        # Processing the call arguments (line 1586)
        # Getting the type of 'majloc' (line 1586)
        majloc_47540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 35), 'majloc', False)
        # Processing the call keyword arguments (line 1586)
        # Getting the type of 'tz' (line 1586)
        tz_47541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 46), 'tz', False)
        keyword_47542 = tz_47541
        kwargs_47543 = {'tz': keyword_47542}
        # Getting the type of 'AutoDateFormatter' (line 1586)
        AutoDateFormatter_47539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 17), 'AutoDateFormatter', False)
        # Calling AutoDateFormatter(args, kwargs) (line 1586)
        AutoDateFormatter_call_result_47544 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 17), AutoDateFormatter_47539, *[majloc_47540], **kwargs_47543)
        
        # Assigning a type to the variable 'majfmt' (line 1586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1586, 8), 'majfmt', AutoDateFormatter_call_result_47544)
        
        # Assigning a Call to a Name (line 1587):
        
        # Assigning a Call to a Name (line 1587):
        
        # Call to date(...): (line 1587)
        # Processing the call arguments (line 1587)
        int_47547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 32), 'int')
        int_47548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 38), 'int')
        int_47549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 41), 'int')
        # Processing the call keyword arguments (line 1587)
        kwargs_47550 = {}
        # Getting the type of 'datetime' (line 1587)
        datetime_47545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 18), 'datetime', False)
        # Obtaining the member 'date' of a type (line 1587)
        date_47546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 18), datetime_47545, 'date')
        # Calling date(args, kwargs) (line 1587)
        date_call_result_47551 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 18), date_47546, *[int_47547, int_47548, int_47549], **kwargs_47550)
        
        # Assigning a type to the variable 'datemin' (line 1587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 8), 'datemin', date_call_result_47551)
        
        # Assigning a Call to a Name (line 1588):
        
        # Assigning a Call to a Name (line 1588):
        
        # Call to date(...): (line 1588)
        # Processing the call arguments (line 1588)
        int_47554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1588, 32), 'int')
        int_47555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1588, 38), 'int')
        int_47556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1588, 41), 'int')
        # Processing the call keyword arguments (line 1588)
        kwargs_47557 = {}
        # Getting the type of 'datetime' (line 1588)
        datetime_47552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 18), 'datetime', False)
        # Obtaining the member 'date' of a type (line 1588)
        date_47553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1588, 18), datetime_47552, 'date')
        # Calling date(args, kwargs) (line 1588)
        date_call_result_47558 = invoke(stypy.reporting.localization.Localization(__file__, 1588, 18), date_47553, *[int_47554, int_47555, int_47556], **kwargs_47557)
        
        # Assigning a type to the variable 'datemax' (line 1588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 8), 'datemax', date_call_result_47558)
        
        # Call to AxisInfo(...): (line 1590)
        # Processing the call keyword arguments (line 1590)
        # Getting the type of 'majloc' (line 1590)
        majloc_47561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 37), 'majloc', False)
        keyword_47562 = majloc_47561
        # Getting the type of 'majfmt' (line 1590)
        majfmt_47563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 52), 'majfmt', False)
        keyword_47564 = majfmt_47563
        unicode_47565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1590, 66), 'unicode', u'')
        keyword_47566 = unicode_47565
        
        # Obtaining an instance of the builtin type 'tuple' (line 1591)
        tuple_47567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1591, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1591)
        # Adding element type (line 1591)
        # Getting the type of 'datemin' (line 1591)
        datemin_47568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 46), 'datemin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1591, 46), tuple_47567, datemin_47568)
        # Adding element type (line 1591)
        # Getting the type of 'datemax' (line 1591)
        datemax_47569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 55), 'datemax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1591, 46), tuple_47567, datemax_47569)
        
        keyword_47570 = tuple_47567
        kwargs_47571 = {'default_limits': keyword_47570, 'label': keyword_47566, 'majloc': keyword_47562, 'majfmt': keyword_47564}
        # Getting the type of 'units' (line 1590)
        units_47559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 15), 'units', False)
        # Obtaining the member 'AxisInfo' of a type (line 1590)
        AxisInfo_47560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 15), units_47559, 'AxisInfo')
        # Calling AxisInfo(args, kwargs) (line 1590)
        AxisInfo_call_result_47572 = invoke(stypy.reporting.localization.Localization(__file__, 1590, 15), AxisInfo_47560, *[], **kwargs_47571)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 8), 'stypy_return_type', AxisInfo_call_result_47572)
        
        # ################# End of 'axisinfo(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'axisinfo' in the type store
        # Getting the type of 'stypy_return_type' (line 1575)
        stypy_return_type_47573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47573)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'axisinfo'
        return stypy_return_type_47573


    @staticmethod
    @norecursion
    def convert(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'convert'
        module_type_store = module_type_store.open_function_context('convert', 1593, 4, False)
        
        # Passed parameters checking function
        DateConverter.convert.__dict__.__setitem__('stypy_localization', localization)
        DateConverter.convert.__dict__.__setitem__('stypy_type_of_self', None)
        DateConverter.convert.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateConverter.convert.__dict__.__setitem__('stypy_function_name', 'convert')
        DateConverter.convert.__dict__.__setitem__('stypy_param_names_list', ['value', 'unit', 'axis'])
        DateConverter.convert.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateConverter.convert.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateConverter.convert.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateConverter.convert.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateConverter.convert.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateConverter.convert.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, None, module_type_store, 'convert', ['value', 'unit', 'axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'convert', localization, ['unit', 'axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'convert(...)' code ##################

        unicode_47574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1600, (-1)), 'unicode', u'\n        If *value* is not already a number or sequence of numbers,\n        convert it with :func:`date2num`.\n\n        The *unit* and *axis* arguments are not used.\n        ')
        
        
        # Call to is_numlike(...): (line 1601)
        # Processing the call arguments (line 1601)
        # Getting the type of 'value' (line 1601)
        value_47578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 48), 'value', False)
        # Processing the call keyword arguments (line 1601)
        kwargs_47579 = {}
        # Getting the type of 'units' (line 1601)
        units_47575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 11), 'units', False)
        # Obtaining the member 'ConversionInterface' of a type (line 1601)
        ConversionInterface_47576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 11), units_47575, 'ConversionInterface')
        # Obtaining the member 'is_numlike' of a type (line 1601)
        is_numlike_47577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 11), ConversionInterface_47576, 'is_numlike')
        # Calling is_numlike(args, kwargs) (line 1601)
        is_numlike_call_result_47580 = invoke(stypy.reporting.localization.Localization(__file__, 1601, 11), is_numlike_47577, *[value_47578], **kwargs_47579)
        
        # Testing the type of an if condition (line 1601)
        if_condition_47581 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1601, 8), is_numlike_call_result_47580)
        # Assigning a type to the variable 'if_condition_47581' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 8), 'if_condition_47581', if_condition_47581)
        # SSA begins for if statement (line 1601)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'value' (line 1602)
        value_47582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 19), 'value')
        # Assigning a type to the variable 'stypy_return_type' (line 1602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1602, 12), 'stypy_return_type', value_47582)
        # SSA join for if statement (line 1601)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to date2num(...): (line 1603)
        # Processing the call arguments (line 1603)
        # Getting the type of 'value' (line 1603)
        value_47584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 24), 'value', False)
        # Processing the call keyword arguments (line 1603)
        kwargs_47585 = {}
        # Getting the type of 'date2num' (line 1603)
        date2num_47583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 15), 'date2num', False)
        # Calling date2num(args, kwargs) (line 1603)
        date2num_call_result_47586 = invoke(stypy.reporting.localization.Localization(__file__, 1603, 15), date2num_47583, *[value_47584], **kwargs_47585)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1603, 8), 'stypy_return_type', date2num_call_result_47586)
        
        # ################# End of 'convert(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'convert' in the type store
        # Getting the type of 'stypy_return_type' (line 1593)
        stypy_return_type_47587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47587)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'convert'
        return stypy_return_type_47587


    @staticmethod
    @norecursion
    def default_units(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'default_units'
        module_type_store = module_type_store.open_function_context('default_units', 1605, 4, False)
        
        # Passed parameters checking function
        DateConverter.default_units.__dict__.__setitem__('stypy_localization', localization)
        DateConverter.default_units.__dict__.__setitem__('stypy_type_of_self', None)
        DateConverter.default_units.__dict__.__setitem__('stypy_type_store', module_type_store)
        DateConverter.default_units.__dict__.__setitem__('stypy_function_name', 'default_units')
        DateConverter.default_units.__dict__.__setitem__('stypy_param_names_list', ['x', 'axis'])
        DateConverter.default_units.__dict__.__setitem__('stypy_varargs_param_name', None)
        DateConverter.default_units.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DateConverter.default_units.__dict__.__setitem__('stypy_call_defaults', defaults)
        DateConverter.default_units.__dict__.__setitem__('stypy_call_varargs', varargs)
        DateConverter.default_units.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DateConverter.default_units.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, 'default_units', ['x', 'axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'default_units', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'default_units(...)' code ##################

        unicode_47588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1609, (-1)), 'unicode', u'\n        Return the tzinfo instance of *x* or of its first element, or None\n        ')
        
        
        # Call to isinstance(...): (line 1610)
        # Processing the call arguments (line 1610)
        # Getting the type of 'x' (line 1610)
        x_47590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 22), 'x', False)
        # Getting the type of 'np' (line 1610)
        np_47591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 25), 'np', False)
        # Obtaining the member 'ndarray' of a type (line 1610)
        ndarray_47592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1610, 25), np_47591, 'ndarray')
        # Processing the call keyword arguments (line 1610)
        kwargs_47593 = {}
        # Getting the type of 'isinstance' (line 1610)
        isinstance_47589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1610)
        isinstance_call_result_47594 = invoke(stypy.reporting.localization.Localization(__file__, 1610, 11), isinstance_47589, *[x_47590, ndarray_47592], **kwargs_47593)
        
        # Testing the type of an if condition (line 1610)
        if_condition_47595 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1610, 8), isinstance_call_result_47594)
        # Assigning a type to the variable 'if_condition_47595' (line 1610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1610, 8), 'if_condition_47595', if_condition_47595)
        # SSA begins for if statement (line 1610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1611):
        
        # Assigning a Call to a Name (line 1611):
        
        # Call to ravel(...): (line 1611)
        # Processing the call keyword arguments (line 1611)
        kwargs_47598 = {}
        # Getting the type of 'x' (line 1611)
        x_47596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 16), 'x', False)
        # Obtaining the member 'ravel' of a type (line 1611)
        ravel_47597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1611, 16), x_47596, 'ravel')
        # Calling ravel(args, kwargs) (line 1611)
        ravel_call_result_47599 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 16), ravel_47597, *[], **kwargs_47598)
        
        # Assigning a type to the variable 'x' (line 1611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1611, 12), 'x', ravel_call_result_47599)
        # SSA join for if statement (line 1610)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1613)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1614):
        
        # Assigning a Call to a Name (line 1614):
        
        # Call to safe_first_element(...): (line 1614)
        # Processing the call arguments (line 1614)
        # Getting the type of 'x' (line 1614)
        x_47602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 41), 'x', False)
        # Processing the call keyword arguments (line 1614)
        kwargs_47603 = {}
        # Getting the type of 'cbook' (line 1614)
        cbook_47600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 16), 'cbook', False)
        # Obtaining the member 'safe_first_element' of a type (line 1614)
        safe_first_element_47601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1614, 16), cbook_47600, 'safe_first_element')
        # Calling safe_first_element(args, kwargs) (line 1614)
        safe_first_element_call_result_47604 = invoke(stypy.reporting.localization.Localization(__file__, 1614, 16), safe_first_element_47601, *[x_47602], **kwargs_47603)
        
        # Assigning a type to the variable 'x' (line 1614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 12), 'x', safe_first_element_call_result_47604)
        # SSA branch for the except part of a try statement (line 1613)
        # SSA branch for the except 'Tuple' branch of a try statement (line 1613)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1613)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1618)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Getting the type of 'x' (line 1619)
        x_47605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 19), 'x')
        # Obtaining the member 'tzinfo' of a type (line 1619)
        tzinfo_47606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 19), x_47605, 'tzinfo')
        # Assigning a type to the variable 'stypy_return_type' (line 1619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 12), 'stypy_return_type', tzinfo_47606)
        # SSA branch for the except part of a try statement (line 1618)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1618)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1618)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'None' (line 1622)
        None_47607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 15), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 8), 'stypy_return_type', None_47607)
        
        # ################# End of 'default_units(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'default_units' in the type store
        # Getting the type of 'stypy_return_type' (line 1605)
        stypy_return_type_47608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47608)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'default_units'
        return stypy_return_type_47608


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1566, 0, False)
        # Assigning a type to the variable 'self' (line 1567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DateConverter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'DateConverter' (line 1566)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 0), 'DateConverter', DateConverter)

# Assigning a Call to a Subscript (line 1625):

# Assigning a Call to a Subscript (line 1625):

# Call to DateConverter(...): (line 1625)
# Processing the call keyword arguments (line 1625)
kwargs_47610 = {}
# Getting the type of 'DateConverter' (line 1625)
DateConverter_47609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 32), 'DateConverter', False)
# Calling DateConverter(args, kwargs) (line 1625)
DateConverter_call_result_47611 = invoke(stypy.reporting.localization.Localization(__file__, 1625, 32), DateConverter_47609, *[], **kwargs_47610)

# Getting the type of 'units' (line 1625)
units_47612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 0), 'units')
# Obtaining the member 'registry' of a type (line 1625)
registry_47613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1625, 0), units_47612, 'registry')
# Getting the type of 'datetime' (line 1625)
datetime_47614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 15), 'datetime')
# Obtaining the member 'date' of a type (line 1625)
date_47615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1625, 15), datetime_47614, 'date')
# Storing an element on a container (line 1625)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1625, 0), registry_47613, (date_47615, DateConverter_call_result_47611))

# Assigning a Call to a Subscript (line 1626):

# Assigning a Call to a Subscript (line 1626):

# Call to DateConverter(...): (line 1626)
# Processing the call keyword arguments (line 1626)
kwargs_47617 = {}
# Getting the type of 'DateConverter' (line 1626)
DateConverter_47616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 36), 'DateConverter', False)
# Calling DateConverter(args, kwargs) (line 1626)
DateConverter_call_result_47618 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 36), DateConverter_47616, *[], **kwargs_47617)

# Getting the type of 'units' (line 1626)
units_47619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 0), 'units')
# Obtaining the member 'registry' of a type (line 1626)
registry_47620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 0), units_47619, 'registry')
# Getting the type of 'datetime' (line 1626)
datetime_47621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 15), 'datetime')
# Obtaining the member 'datetime' of a type (line 1626)
datetime_47622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 15), datetime_47621, 'datetime')
# Storing an element on a container (line 1626)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1626, 0), registry_47620, (datetime_47622, DateConverter_call_result_47618))

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
