
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Utility function to facilitate testing.
3: 
4: '''
5: from __future__ import division, absolute_import, print_function
6: 
7: import os
8: import sys
9: import re
10: import operator
11: import warnings
12: from functools import partial
13: import shutil
14: import contextlib
15: from tempfile import mkdtemp, mkstemp
16: 
17: from .nosetester import import_nose
18: from numpy.core import float32, empty, arange, array_repr, ndarray
19: from numpy.lib.utils import deprecate
20: 
21: if sys.version_info[0] >= 3:
22:     from io import StringIO
23: else:
24:     from StringIO import StringIO
25: 
26: __all__ = ['assert_equal', 'assert_almost_equal', 'assert_approx_equal',
27:            'assert_array_equal', 'assert_array_less', 'assert_string_equal',
28:            'assert_array_almost_equal', 'assert_raises', 'build_err_msg',
29:            'decorate_methods', 'jiffies', 'memusage', 'print_assert_equal',
30:            'raises', 'rand', 'rundocs', 'runstring', 'verbose', 'measure',
31:            'assert_', 'assert_array_almost_equal_nulp', 'assert_raises_regex',
32:            'assert_array_max_ulp', 'assert_warns', 'assert_no_warnings',
33:            'assert_allclose', 'IgnoreException', 'clear_and_catch_warnings',
34:            'SkipTest', 'KnownFailureException', 'temppath', 'tempdir']
35: 
36: 
37: class KnownFailureException(Exception):
38:     '''Raise this exception to mark a test as a known failing test.'''
39:     pass
40: 
41: KnownFailureTest = KnownFailureException  # backwards compat
42: 
43: 
44: # nose.SkipTest is unittest.case.SkipTest
45: # import it into the namespace, so that it's available as np.testing.SkipTest
46: try:
47:     from unittest.case import SkipTest
48: except ImportError:
49:     # on py2.6 unittest.case is not available. Ask nose for a replacement.
50:     SkipTest = import_nose().SkipTest
51: 
52: 
53: verbose = 0
54: 
55: def assert_(val, msg=''):
56:     '''
57:     Assert that works in release mode.
58:     Accepts callable msg to allow deferring evaluation until failure.
59: 
60:     The Python built-in ``assert`` does not work when executing code in
61:     optimized mode (the ``-O`` flag) - no byte-code is generated for it.
62: 
63:     For documentation on usage, refer to the Python documentation.
64: 
65:     '''
66:     if not val:
67:         try:
68:             smsg = msg()
69:         except TypeError:
70:             smsg = msg
71:         raise AssertionError(smsg)
72: 
73: def gisnan(x):
74:     '''like isnan, but always raise an error if type not supported instead of
75:     returning a TypeError object.
76: 
77:     Notes
78:     -----
79:     isnan and other ufunc sometimes return a NotImplementedType object instead
80:     of raising any exception. This function is a wrapper to make sure an
81:     exception is always raised.
82: 
83:     This should be removed once this problem is solved at the Ufunc level.'''
84:     from numpy.core import isnan
85:     st = isnan(x)
86:     if isinstance(st, type(NotImplemented)):
87:         raise TypeError("isnan not supported for this type")
88:     return st
89: 
90: def gisfinite(x):
91:     '''like isfinite, but always raise an error if type not supported instead of
92:     returning a TypeError object.
93: 
94:     Notes
95:     -----
96:     isfinite and other ufunc sometimes return a NotImplementedType object instead
97:     of raising any exception. This function is a wrapper to make sure an
98:     exception is always raised.
99: 
100:     This should be removed once this problem is solved at the Ufunc level.'''
101:     from numpy.core import isfinite, errstate
102:     with errstate(invalid='ignore'):
103:         st = isfinite(x)
104:         if isinstance(st, type(NotImplemented)):
105:             raise TypeError("isfinite not supported for this type")
106:     return st
107: 
108: def gisinf(x):
109:     '''like isinf, but always raise an error if type not supported instead of
110:     returning a TypeError object.
111: 
112:     Notes
113:     -----
114:     isinf and other ufunc sometimes return a NotImplementedType object instead
115:     of raising any exception. This function is a wrapper to make sure an
116:     exception is always raised.
117: 
118:     This should be removed once this problem is solved at the Ufunc level.'''
119:     from numpy.core import isinf, errstate
120:     with errstate(invalid='ignore'):
121:         st = isinf(x)
122:         if isinstance(st, type(NotImplemented)):
123:             raise TypeError("isinf not supported for this type")
124:     return st
125: 
126: @deprecate(message="numpy.testing.rand is deprecated in numpy 1.11. "
127:                    "Use numpy.random.rand instead.")
128: def rand(*args):
129:     '''Returns an array of random numbers with the given shape.
130: 
131:     This only uses the standard library, so it is useful for testing purposes.
132:     '''
133:     import random
134:     from numpy.core import zeros, float64
135:     results = zeros(args, float64)
136:     f = results.flat
137:     for i in range(len(f)):
138:         f[i] = random.random()
139:     return results
140: 
141: if os.name == 'nt':
142:     # Code "stolen" from enthought/debug/memusage.py
143:     def GetPerformanceAttributes(object, counter, instance=None,
144:                                  inum=-1, format=None, machine=None):
145:         # NOTE: Many counters require 2 samples to give accurate results,
146:         # including "% Processor Time" (as by definition, at any instant, a
147:         # thread's CPU usage is either 0 or 100).  To read counters like this,
148:         # you should copy this function, but keep the counter open, and call
149:         # CollectQueryData() each time you need to know.
150:         # See http://msdn.microsoft.com/library/en-us/dnperfmo/html/perfmonpt2.asp
151:         # My older explanation for this was that the "AddCounter" process forced
152:         # the CPU to 100%, but the above makes more sense :)
153:         import win32pdh
154:         if format is None:
155:             format = win32pdh.PDH_FMT_LONG
156:         path = win32pdh.MakeCounterPath( (machine, object, instance, None, inum, counter))
157:         hq = win32pdh.OpenQuery()
158:         try:
159:             hc = win32pdh.AddCounter(hq, path)
160:             try:
161:                 win32pdh.CollectQueryData(hq)
162:                 type, val = win32pdh.GetFormattedCounterValue(hc, format)
163:                 return val
164:             finally:
165:                 win32pdh.RemoveCounter(hc)
166:         finally:
167:             win32pdh.CloseQuery(hq)
168: 
169:     def memusage(processName="python", instance=0):
170:         # from win32pdhutil, part of the win32all package
171:         import win32pdh
172:         return GetPerformanceAttributes("Process", "Virtual Bytes",
173:                                         processName, instance,
174:                                         win32pdh.PDH_FMT_LONG, None)
175: elif sys.platform[:5] == 'linux':
176: 
177:     def memusage(_proc_pid_stat='/proc/%s/stat' % (os.getpid())):
178:         '''
179:         Return virtual memory size in bytes of the running python.
180: 
181:         '''
182:         try:
183:             f = open(_proc_pid_stat, 'r')
184:             l = f.readline().split(' ')
185:             f.close()
186:             return int(l[22])
187:         except:
188:             return
189: else:
190:     def memusage():
191:         '''
192:         Return memory usage of running python. [Not implemented]
193: 
194:         '''
195:         raise NotImplementedError
196: 
197: 
198: if sys.platform[:5] == 'linux':
199:     def jiffies(_proc_pid_stat='/proc/%s/stat' % (os.getpid()),
200:                 _load_time=[]):
201:         '''
202:         Return number of jiffies elapsed.
203: 
204:         Return number of jiffies (1/100ths of a second) that this
205:         process has been scheduled in user mode. See man 5 proc.
206: 
207:         '''
208:         import time
209:         if not _load_time:
210:             _load_time.append(time.time())
211:         try:
212:             f = open(_proc_pid_stat, 'r')
213:             l = f.readline().split(' ')
214:             f.close()
215:             return int(l[13])
216:         except:
217:             return int(100*(time.time()-_load_time[0]))
218: else:
219:     # os.getpid is not in all platforms available.
220:     # Using time is safe but inaccurate, especially when process
221:     # was suspended or sleeping.
222:     def jiffies(_load_time=[]):
223:         '''
224:         Return number of jiffies elapsed.
225: 
226:         Return number of jiffies (1/100ths of a second) that this
227:         process has been scheduled in user mode. See man 5 proc.
228: 
229:         '''
230:         import time
231:         if not _load_time:
232:             _load_time.append(time.time())
233:         return int(100*(time.time()-_load_time[0]))
234: 
235: 
236: def build_err_msg(arrays, err_msg, header='Items are not equal:',
237:                   verbose=True, names=('ACTUAL', 'DESIRED'), precision=8):
238:     msg = ['\n' + header]
239:     if err_msg:
240:         if err_msg.find('\n') == -1 and len(err_msg) < 79-len(header):
241:             msg = [msg[0] + ' ' + err_msg]
242:         else:
243:             msg.append(err_msg)
244:     if verbose:
245:         for i, a in enumerate(arrays):
246: 
247:             if isinstance(a, ndarray):
248:                 # precision argument is only needed if the objects are ndarrays
249:                 r_func = partial(array_repr, precision=precision)
250:             else:
251:                 r_func = repr
252: 
253:             try:
254:                 r = r_func(a)
255:             except:
256:                 r = '[repr failed]'
257:             if r.count('\n') > 3:
258:                 r = '\n'.join(r.splitlines()[:3])
259:                 r += '...'
260:             msg.append(' %s: %s' % (names[i], r))
261:     return '\n'.join(msg)
262: 
263: def assert_equal(actual,desired,err_msg='',verbose=True):
264:     '''
265:     Raises an AssertionError if two objects are not equal.
266: 
267:     Given two objects (scalars, lists, tuples, dictionaries or numpy arrays),
268:     check that all elements of these objects are equal. An exception is raised
269:     at the first conflicting values.
270: 
271:     Parameters
272:     ----------
273:     actual : array_like
274:         The object to check.
275:     desired : array_like
276:         The expected object.
277:     err_msg : str, optional
278:         The error message to be printed in case of failure.
279:     verbose : bool, optional
280:         If True, the conflicting values are appended to the error message.
281: 
282:     Raises
283:     ------
284:     AssertionError
285:         If actual and desired are not equal.
286: 
287:     Examples
288:     --------
289:     >>> np.testing.assert_equal([4,5], [4,6])
290:     ...
291:     <type 'exceptions.AssertionError'>:
292:     Items are not equal:
293:     item=1
294:      ACTUAL: 5
295:      DESIRED: 6
296: 
297:     '''
298:     __tracebackhide__ = True  # Hide traceback for py.test
299:     if isinstance(desired, dict):
300:         if not isinstance(actual, dict):
301:             raise AssertionError(repr(type(actual)))
302:         assert_equal(len(actual), len(desired), err_msg, verbose)
303:         for k, i in desired.items():
304:             if k not in actual:
305:                 raise AssertionError(repr(k))
306:             assert_equal(actual[k], desired[k], 'key=%r\n%s' % (k, err_msg), verbose)
307:         return
308:     if isinstance(desired, (list, tuple)) and isinstance(actual, (list, tuple)):
309:         assert_equal(len(actual), len(desired), err_msg, verbose)
310:         for k in range(len(desired)):
311:             assert_equal(actual[k], desired[k], 'item=%r\n%s' % (k, err_msg), verbose)
312:         return
313:     from numpy.core import ndarray, isscalar, signbit
314:     from numpy.lib import iscomplexobj, real, imag
315:     if isinstance(actual, ndarray) or isinstance(desired, ndarray):
316:         return assert_array_equal(actual, desired, err_msg, verbose)
317:     msg = build_err_msg([actual, desired], err_msg, verbose=verbose)
318: 
319:     # Handle complex numbers: separate into real/imag to handle
320:     # nan/inf/negative zero correctly
321:     # XXX: catch ValueError for subclasses of ndarray where iscomplex fail
322:     try:
323:         usecomplex = iscomplexobj(actual) or iscomplexobj(desired)
324:     except ValueError:
325:         usecomplex = False
326: 
327:     if usecomplex:
328:         if iscomplexobj(actual):
329:             actualr = real(actual)
330:             actuali = imag(actual)
331:         else:
332:             actualr = actual
333:             actuali = 0
334:         if iscomplexobj(desired):
335:             desiredr = real(desired)
336:             desiredi = imag(desired)
337:         else:
338:             desiredr = desired
339:             desiredi = 0
340:         try:
341:             assert_equal(actualr, desiredr)
342:             assert_equal(actuali, desiredi)
343:         except AssertionError:
344:             raise AssertionError(msg)
345: 
346:     # Inf/nan/negative zero handling
347:     try:
348:         # isscalar test to check cases such as [np.nan] != np.nan
349:         if isscalar(desired) != isscalar(actual):
350:             raise AssertionError(msg)
351: 
352:         # If one of desired/actual is not finite, handle it specially here:
353:         # check that both are nan if any is a nan, and test for equality
354:         # otherwise
355:         if not (gisfinite(desired) and gisfinite(actual)):
356:             isdesnan = gisnan(desired)
357:             isactnan = gisnan(actual)
358:             if isdesnan or isactnan:
359:                 if not (isdesnan and isactnan):
360:                     raise AssertionError(msg)
361:             else:
362:                 if not desired == actual:
363:                     raise AssertionError(msg)
364:             return
365:         elif desired == 0 and actual == 0:
366:             if not signbit(desired) == signbit(actual):
367:                 raise AssertionError(msg)
368:     # If TypeError or ValueError raised while using isnan and co, just handle
369:     # as before
370:     except (TypeError, ValueError, NotImplementedError):
371:         pass
372: 
373:     # Explicitly use __eq__ for comparison, ticket #2552
374:     if not (desired == actual):
375:         raise AssertionError(msg)
376: 
377: def print_assert_equal(test_string, actual, desired):
378:     '''
379:     Test if two objects are equal, and print an error message if test fails.
380: 
381:     The test is performed with ``actual == desired``.
382: 
383:     Parameters
384:     ----------
385:     test_string : str
386:         The message supplied to AssertionError.
387:     actual : object
388:         The object to test for equality against `desired`.
389:     desired : object
390:         The expected result.
391: 
392:     Examples
393:     --------
394:     >>> np.testing.print_assert_equal('Test XYZ of func xyz', [0, 1], [0, 1])
395:     >>> np.testing.print_assert_equal('Test XYZ of func xyz', [0, 1], [0, 2])
396:     Traceback (most recent call last):
397:     ...
398:     AssertionError: Test XYZ of func xyz failed
399:     ACTUAL:
400:     [0, 1]
401:     DESIRED:
402:     [0, 2]
403: 
404:     '''
405:     __tracebackhide__ = True  # Hide traceback for py.test
406:     import pprint
407: 
408:     if not (actual == desired):
409:         msg = StringIO()
410:         msg.write(test_string)
411:         msg.write(' failed\nACTUAL: \n')
412:         pprint.pprint(actual, msg)
413:         msg.write('DESIRED: \n')
414:         pprint.pprint(desired, msg)
415:         raise AssertionError(msg.getvalue())
416: 
417: def assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True):
418:     '''
419:     Raises an AssertionError if two items are not equal up to desired
420:     precision.
421: 
422:     .. note:: It is recommended to use one of `assert_allclose`,
423:               `assert_array_almost_equal_nulp` or `assert_array_max_ulp`
424:               instead of this function for more consistent floating point
425:               comparisons.
426: 
427:     The test is equivalent to ``abs(desired-actual) < 0.5 * 10**(-decimal)``.
428: 
429:     Given two objects (numbers or ndarrays), check that all elements of these
430:     objects are almost equal. An exception is raised at conflicting values.
431:     For ndarrays this delegates to assert_array_almost_equal
432: 
433:     Parameters
434:     ----------
435:     actual : array_like
436:         The object to check.
437:     desired : array_like
438:         The expected object.
439:     decimal : int, optional
440:         Desired precision, default is 7.
441:     err_msg : str, optional
442:         The error message to be printed in case of failure.
443:     verbose : bool, optional
444:         If True, the conflicting values are appended to the error message.
445: 
446:     Raises
447:     ------
448:     AssertionError
449:       If actual and desired are not equal up to specified precision.
450: 
451:     See Also
452:     --------
453:     assert_allclose: Compare two array_like objects for equality with desired
454:                      relative and/or absolute precision.
455:     assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal
456: 
457:     Examples
458:     --------
459:     >>> import numpy.testing as npt
460:     >>> npt.assert_almost_equal(2.3333333333333, 2.33333334)
461:     >>> npt.assert_almost_equal(2.3333333333333, 2.33333334, decimal=10)
462:     ...
463:     <type 'exceptions.AssertionError'>:
464:     Items are not equal:
465:      ACTUAL: 2.3333333333333002
466:      DESIRED: 2.3333333399999998
467: 
468:     >>> npt.assert_almost_equal(np.array([1.0,2.3333333333333]),
469:     ...                         np.array([1.0,2.33333334]), decimal=9)
470:     ...
471:     <type 'exceptions.AssertionError'>:
472:     Arrays are not almost equal
473:     <BLANKLINE>
474:     (mismatch 50.0%)
475:      x: array([ 1.        ,  2.33333333])
476:      y: array([ 1.        ,  2.33333334])
477: 
478:     '''
479:     __tracebackhide__ = True  # Hide traceback for py.test
480:     from numpy.core import ndarray
481:     from numpy.lib import iscomplexobj, real, imag
482: 
483:     # Handle complex numbers: separate into real/imag to handle
484:     # nan/inf/negative zero correctly
485:     # XXX: catch ValueError for subclasses of ndarray where iscomplex fail
486:     try:
487:         usecomplex = iscomplexobj(actual) or iscomplexobj(desired)
488:     except ValueError:
489:         usecomplex = False
490: 
491:     def _build_err_msg():
492:         header = ('Arrays are not almost equal to %d decimals' % decimal)
493:         return build_err_msg([actual, desired], err_msg, verbose=verbose,
494:                              header=header)
495: 
496:     if usecomplex:
497:         if iscomplexobj(actual):
498:             actualr = real(actual)
499:             actuali = imag(actual)
500:         else:
501:             actualr = actual
502:             actuali = 0
503:         if iscomplexobj(desired):
504:             desiredr = real(desired)
505:             desiredi = imag(desired)
506:         else:
507:             desiredr = desired
508:             desiredi = 0
509:         try:
510:             assert_almost_equal(actualr, desiredr, decimal=decimal)
511:             assert_almost_equal(actuali, desiredi, decimal=decimal)
512:         except AssertionError:
513:             raise AssertionError(_build_err_msg())
514: 
515:     if isinstance(actual, (ndarray, tuple, list)) \
516:             or isinstance(desired, (ndarray, tuple, list)):
517:         return assert_array_almost_equal(actual, desired, decimal, err_msg)
518:     try:
519:         # If one of desired/actual is not finite, handle it specially here:
520:         # check that both are nan if any is a nan, and test for equality
521:         # otherwise
522:         if not (gisfinite(desired) and gisfinite(actual)):
523:             if gisnan(desired) or gisnan(actual):
524:                 if not (gisnan(desired) and gisnan(actual)):
525:                     raise AssertionError(_build_err_msg())
526:             else:
527:                 if not desired == actual:
528:                     raise AssertionError(_build_err_msg())
529:             return
530:     except (NotImplementedError, TypeError):
531:         pass
532:     if round(abs(desired - actual), decimal) != 0:
533:         raise AssertionError(_build_err_msg())
534: 
535: 
536: def assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True):
537:     '''
538:     Raises an AssertionError if two items are not equal up to significant
539:     digits.
540: 
541:     .. note:: It is recommended to use one of `assert_allclose`,
542:               `assert_array_almost_equal_nulp` or `assert_array_max_ulp`
543:               instead of this function for more consistent floating point
544:               comparisons.
545: 
546:     Given two numbers, check that they are approximately equal.
547:     Approximately equal is defined as the number of significant digits
548:     that agree.
549: 
550:     Parameters
551:     ----------
552:     actual : scalar
553:         The object to check.
554:     desired : scalar
555:         The expected object.
556:     significant : int, optional
557:         Desired precision, default is 7.
558:     err_msg : str, optional
559:         The error message to be printed in case of failure.
560:     verbose : bool, optional
561:         If True, the conflicting values are appended to the error message.
562: 
563:     Raises
564:     ------
565:     AssertionError
566:       If actual and desired are not equal up to specified precision.
567: 
568:     See Also
569:     --------
570:     assert_allclose: Compare two array_like objects for equality with desired
571:                      relative and/or absolute precision.
572:     assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal
573: 
574:     Examples
575:     --------
576:     >>> np.testing.assert_approx_equal(0.12345677777777e-20, 0.1234567e-20)
577:     >>> np.testing.assert_approx_equal(0.12345670e-20, 0.12345671e-20,
578:                                        significant=8)
579:     >>> np.testing.assert_approx_equal(0.12345670e-20, 0.12345672e-20,
580:                                        significant=8)
581:     ...
582:     <type 'exceptions.AssertionError'>:
583:     Items are not equal to 8 significant digits:
584:      ACTUAL: 1.234567e-021
585:      DESIRED: 1.2345672000000001e-021
586: 
587:     the evaluated condition that raises the exception is
588: 
589:     >>> abs(0.12345670e-20/1e-21 - 0.12345672e-20/1e-21) >= 10**-(8-1)
590:     True
591: 
592:     '''
593:     __tracebackhide__ = True  # Hide traceback for py.test
594:     import numpy as np
595: 
596:     (actual, desired) = map(float, (actual, desired))
597:     if desired == actual:
598:         return
599:     # Normalized the numbers to be in range (-10.0,10.0)
600:     # scale = float(pow(10,math.floor(math.log10(0.5*(abs(desired)+abs(actual))))))
601:     with np.errstate(invalid='ignore'):
602:         scale = 0.5*(np.abs(desired) + np.abs(actual))
603:         scale = np.power(10, np.floor(np.log10(scale)))
604:     try:
605:         sc_desired = desired/scale
606:     except ZeroDivisionError:
607:         sc_desired = 0.0
608:     try:
609:         sc_actual = actual/scale
610:     except ZeroDivisionError:
611:         sc_actual = 0.0
612:     msg = build_err_msg([actual, desired], err_msg,
613:                 header='Items are not equal to %d significant digits:' %
614:                                  significant,
615:                 verbose=verbose)
616:     try:
617:         # If one of desired/actual is not finite, handle it specially here:
618:         # check that both are nan if any is a nan, and test for equality
619:         # otherwise
620:         if not (gisfinite(desired) and gisfinite(actual)):
621:             if gisnan(desired) or gisnan(actual):
622:                 if not (gisnan(desired) and gisnan(actual)):
623:                     raise AssertionError(msg)
624:             else:
625:                 if not desired == actual:
626:                     raise AssertionError(msg)
627:             return
628:     except (TypeError, NotImplementedError):
629:         pass
630:     if np.abs(sc_desired - sc_actual) >= np.power(10., -(significant-1)):
631:         raise AssertionError(msg)
632: 
633: def assert_array_compare(comparison, x, y, err_msg='', verbose=True,
634:                          header='', precision=6):
635:     __tracebackhide__ = True  # Hide traceback for py.test
636:     from numpy.core import array, isnan, isinf, any, all, inf
637:     x = array(x, copy=False, subok=True)
638:     y = array(y, copy=False, subok=True)
639: 
640:     def safe_comparison(*args, **kwargs):
641:         # There are a number of cases where comparing two arrays hits special
642:         # cases in array_richcompare, specifically around strings and void
643:         # dtypes. Basically, we just can't do comparisons involving these
644:         # types, unless both arrays have exactly the *same* type. So
645:         # e.g. you can apply == to two string arrays, or two arrays with
646:         # identical structured dtypes. But if you compare a non-string array
647:         # to a string array, or two arrays with non-identical structured
648:         # dtypes, or anything like that, then internally stuff blows up.
649:         # Currently, when things blow up, we just return a scalar False or
650:         # True. But we also emit a DeprecationWarning, b/c eventually we
651:         # should raise an error here. (Ideally we might even make this work
652:         # properly, but since that will require rewriting a bunch of how
653:         # ufuncs work then we are not counting on that.)
654:         #
655:         # The point of this little function is to let the DeprecationWarning
656:         # pass (or maybe eventually catch the errors and return False, I
657:         # dunno, that's a little trickier and we can figure that out when the
658:         # time comes).
659:         with warnings.catch_warnings():
660:             warnings.filterwarnings("ignore", category=DeprecationWarning)
661:             return comparison(*args, **kwargs)
662: 
663:     def isnumber(x):
664:         return x.dtype.char in '?bhilqpBHILQPefdgFDG'
665: 
666:     def chk_same_position(x_id, y_id, hasval='nan'):
667:         '''Handling nan/inf: check that x and y have the nan/inf at the same
668:         locations.'''
669:         try:
670:             assert_array_equal(x_id, y_id)
671:         except AssertionError:
672:             msg = build_err_msg([x, y],
673:                                 err_msg + '\nx and y %s location mismatch:'
674:                                 % (hasval), verbose=verbose, header=header,
675:                                 names=('x', 'y'), precision=precision)
676:             raise AssertionError(msg)
677: 
678:     try:
679:         cond = (x.shape == () or y.shape == ()) or x.shape == y.shape
680:         if not cond:
681:             msg = build_err_msg([x, y],
682:                                 err_msg
683:                                 + '\n(shapes %s, %s mismatch)' % (x.shape,
684:                                                                   y.shape),
685:                                 verbose=verbose, header=header,
686:                                 names=('x', 'y'), precision=precision)
687:             if not cond:
688:                 raise AssertionError(msg)
689: 
690:         if isnumber(x) and isnumber(y):
691:             x_isnan, y_isnan = isnan(x), isnan(y)
692:             x_isinf, y_isinf = isinf(x), isinf(y)
693: 
694:             # Validate that the special values are in the same place
695:             if any(x_isnan) or any(y_isnan):
696:                 chk_same_position(x_isnan, y_isnan, hasval='nan')
697:             if any(x_isinf) or any(y_isinf):
698:                 # Check +inf and -inf separately, since they are different
699:                 chk_same_position(x == +inf, y == +inf, hasval='+inf')
700:                 chk_same_position(x == -inf, y == -inf, hasval='-inf')
701: 
702:             # Combine all the special values
703:             x_id, y_id = x_isnan, y_isnan
704:             x_id |= x_isinf
705:             y_id |= y_isinf
706: 
707:             # Only do the comparison if actual values are left
708:             if all(x_id):
709:                 return
710: 
711:             if any(x_id):
712:                 val = safe_comparison(x[~x_id], y[~y_id])
713:             else:
714:                 val = safe_comparison(x, y)
715:         else:
716:             val = safe_comparison(x, y)
717: 
718:         if isinstance(val, bool):
719:             cond = val
720:             reduced = [0]
721:         else:
722:             reduced = val.ravel()
723:             cond = reduced.all()
724:             reduced = reduced.tolist()
725:         if not cond:
726:             match = 100-100.0*reduced.count(1)/len(reduced)
727:             msg = build_err_msg([x, y],
728:                                 err_msg
729:                                 + '\n(mismatch %s%%)' % (match,),
730:                                 verbose=verbose, header=header,
731:                                 names=('x', 'y'), precision=precision)
732:             if not cond:
733:                 raise AssertionError(msg)
734:     except ValueError:
735:         import traceback
736:         efmt = traceback.format_exc()
737:         header = 'error during assertion:\n\n%s\n\n%s' % (efmt, header)
738: 
739:         msg = build_err_msg([x, y], err_msg, verbose=verbose, header=header,
740:                             names=('x', 'y'), precision=precision)
741:         raise ValueError(msg)
742: 
743: def assert_array_equal(x, y, err_msg='', verbose=True):
744:     '''
745:     Raises an AssertionError if two array_like objects are not equal.
746: 
747:     Given two array_like objects, check that the shape is equal and all
748:     elements of these objects are equal. An exception is raised at
749:     shape mismatch or conflicting values. In contrast to the standard usage
750:     in numpy, NaNs are compared like numbers, no assertion is raised if
751:     both objects have NaNs in the same positions.
752: 
753:     The usual caution for verifying equality with floating point numbers is
754:     advised.
755: 
756:     Parameters
757:     ----------
758:     x : array_like
759:         The actual object to check.
760:     y : array_like
761:         The desired, expected object.
762:     err_msg : str, optional
763:         The error message to be printed in case of failure.
764:     verbose : bool, optional
765:         If True, the conflicting values are appended to the error message.
766: 
767:     Raises
768:     ------
769:     AssertionError
770:         If actual and desired objects are not equal.
771: 
772:     See Also
773:     --------
774:     assert_allclose: Compare two array_like objects for equality with desired
775:                      relative and/or absolute precision.
776:     assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal
777: 
778:     Examples
779:     --------
780:     The first assert does not raise an exception:
781: 
782:     >>> np.testing.assert_array_equal([1.0,2.33333,np.nan],
783:     ...                               [np.exp(0),2.33333, np.nan])
784: 
785:     Assert fails with numerical inprecision with floats:
786: 
787:     >>> np.testing.assert_array_equal([1.0,np.pi,np.nan],
788:     ...                               [1, np.sqrt(np.pi)**2, np.nan])
789:     ...
790:     <type 'exceptions.ValueError'>:
791:     AssertionError:
792:     Arrays are not equal
793:     <BLANKLINE>
794:     (mismatch 50.0%)
795:      x: array([ 1.        ,  3.14159265,         NaN])
796:      y: array([ 1.        ,  3.14159265,         NaN])
797: 
798:     Use `assert_allclose` or one of the nulp (number of floating point values)
799:     functions for these cases instead:
800: 
801:     >>> np.testing.assert_allclose([1.0,np.pi,np.nan],
802:     ...                            [1, np.sqrt(np.pi)**2, np.nan],
803:     ...                            rtol=1e-10, atol=0)
804: 
805:     '''
806:     assert_array_compare(operator.__eq__, x, y, err_msg=err_msg,
807:                          verbose=verbose, header='Arrays are not equal')
808: 
809: def assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True):
810:     '''
811:     Raises an AssertionError if two objects are not equal up to desired
812:     precision.
813: 
814:     .. note:: It is recommended to use one of `assert_allclose`,
815:               `assert_array_almost_equal_nulp` or `assert_array_max_ulp`
816:               instead of this function for more consistent floating point
817:               comparisons.
818: 
819:     The test verifies identical shapes and verifies values with
820:     ``abs(desired-actual) < 0.5 * 10**(-decimal)``.
821: 
822:     Given two array_like objects, check that the shape is equal and all
823:     elements of these objects are almost equal. An exception is raised at
824:     shape mismatch or conflicting values. In contrast to the standard usage
825:     in numpy, NaNs are compared like numbers, no assertion is raised if
826:     both objects have NaNs in the same positions.
827: 
828:     Parameters
829:     ----------
830:     x : array_like
831:         The actual object to check.
832:     y : array_like
833:         The desired, expected object.
834:     decimal : int, optional
835:         Desired precision, default is 6.
836:     err_msg : str, optional
837:       The error message to be printed in case of failure.
838:     verbose : bool, optional
839:         If True, the conflicting values are appended to the error message.
840: 
841:     Raises
842:     ------
843:     AssertionError
844:         If actual and desired are not equal up to specified precision.
845: 
846:     See Also
847:     --------
848:     assert_allclose: Compare two array_like objects for equality with desired
849:                      relative and/or absolute precision.
850:     assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal
851: 
852:     Examples
853:     --------
854:     the first assert does not raise an exception
855: 
856:     >>> np.testing.assert_array_almost_equal([1.0,2.333,np.nan],
857:                                              [1.0,2.333,np.nan])
858: 
859:     >>> np.testing.assert_array_almost_equal([1.0,2.33333,np.nan],
860:     ...                                      [1.0,2.33339,np.nan], decimal=5)
861:     ...
862:     <type 'exceptions.AssertionError'>:
863:     AssertionError:
864:     Arrays are not almost equal
865:     <BLANKLINE>
866:     (mismatch 50.0%)
867:      x: array([ 1.     ,  2.33333,      NaN])
868:      y: array([ 1.     ,  2.33339,      NaN])
869: 
870:     >>> np.testing.assert_array_almost_equal([1.0,2.33333,np.nan],
871:     ...                                      [1.0,2.33333, 5], decimal=5)
872:     <type 'exceptions.ValueError'>:
873:     ValueError:
874:     Arrays are not almost equal
875:      x: array([ 1.     ,  2.33333,      NaN])
876:      y: array([ 1.     ,  2.33333,  5.     ])
877: 
878:     '''
879:     __tracebackhide__ = True  # Hide traceback for py.test
880:     from numpy.core import around, number, float_, result_type, array
881:     from numpy.core.numerictypes import issubdtype
882:     from numpy.core.fromnumeric import any as npany
883: 
884:     def compare(x, y):
885:         try:
886:             if npany(gisinf(x)) or npany( gisinf(y)):
887:                 xinfid = gisinf(x)
888:                 yinfid = gisinf(y)
889:                 if not xinfid == yinfid:
890:                     return False
891:                 # if one item, x and y is +- inf
892:                 if x.size == y.size == 1:
893:                     return x == y
894:                 x = x[~xinfid]
895:                 y = y[~yinfid]
896:         except (TypeError, NotImplementedError):
897:             pass
898: 
899:         # make sure y is an inexact type to avoid abs(MIN_INT); will cause
900:         # casting of x later.
901:         dtype = result_type(y, 1.)
902:         y = array(y, dtype=dtype, copy=False, subok=True)
903:         z = abs(x-y)
904: 
905:         if not issubdtype(z.dtype, number):
906:             z = z.astype(float_)  # handle object arrays
907: 
908:         return around(z, decimal) <= 10.0**(-decimal)
909: 
910:     assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,
911:              header=('Arrays are not almost equal to %d decimals' % decimal),
912:              precision=decimal)
913: 
914: 
915: def assert_array_less(x, y, err_msg='', verbose=True):
916:     '''
917:     Raises an AssertionError if two array_like objects are not ordered by less
918:     than.
919: 
920:     Given two array_like objects, check that the shape is equal and all
921:     elements of the first object are strictly smaller than those of the
922:     second object. An exception is raised at shape mismatch or incorrectly
923:     ordered values. Shape mismatch does not raise if an object has zero
924:     dimension. In contrast to the standard usage in numpy, NaNs are
925:     compared, no assertion is raised if both objects have NaNs in the same
926:     positions.
927: 
928: 
929: 
930:     Parameters
931:     ----------
932:     x : array_like
933:       The smaller object to check.
934:     y : array_like
935:       The larger object to compare.
936:     err_msg : string
937:       The error message to be printed in case of failure.
938:     verbose : bool
939:         If True, the conflicting values are appended to the error message.
940: 
941:     Raises
942:     ------
943:     AssertionError
944:       If actual and desired objects are not equal.
945: 
946:     See Also
947:     --------
948:     assert_array_equal: tests objects for equality
949:     assert_array_almost_equal: test objects for equality up to precision
950: 
951: 
952: 
953:     Examples
954:     --------
955:     >>> np.testing.assert_array_less([1.0, 1.0, np.nan], [1.1, 2.0, np.nan])
956:     >>> np.testing.assert_array_less([1.0, 1.0, np.nan], [1, 2.0, np.nan])
957:     ...
958:     <type 'exceptions.ValueError'>:
959:     Arrays are not less-ordered
960:     (mismatch 50.0%)
961:      x: array([  1.,   1.,  NaN])
962:      y: array([  1.,   2.,  NaN])
963: 
964:     >>> np.testing.assert_array_less([1.0, 4.0], 3)
965:     ...
966:     <type 'exceptions.ValueError'>:
967:     Arrays are not less-ordered
968:     (mismatch 50.0%)
969:      x: array([ 1.,  4.])
970:      y: array(3)
971: 
972:     >>> np.testing.assert_array_less([1.0, 2.0, 3.0], [4])
973:     ...
974:     <type 'exceptions.ValueError'>:
975:     Arrays are not less-ordered
976:     (shapes (3,), (1,) mismatch)
977:      x: array([ 1.,  2.,  3.])
978:      y: array([4])
979: 
980:     '''
981:     __tracebackhide__ = True  # Hide traceback for py.test
982:     assert_array_compare(operator.__lt__, x, y, err_msg=err_msg,
983:                          verbose=verbose,
984:                          header='Arrays are not less-ordered')
985: 
986: def runstring(astr, dict):
987:     exec(astr, dict)
988: 
989: def assert_string_equal(actual, desired):
990:     '''
991:     Test if two strings are equal.
992: 
993:     If the given strings are equal, `assert_string_equal` does nothing.
994:     If they are not equal, an AssertionError is raised, and the diff
995:     between the strings is shown.
996: 
997:     Parameters
998:     ----------
999:     actual : str
1000:         The string to test for equality against the expected string.
1001:     desired : str
1002:         The expected string.
1003: 
1004:     Examples
1005:     --------
1006:     >>> np.testing.assert_string_equal('abc', 'abc')
1007:     >>> np.testing.assert_string_equal('abc', 'abcd')
1008:     Traceback (most recent call last):
1009:       File "<stdin>", line 1, in <module>
1010:     ...
1011:     AssertionError: Differences in strings:
1012:     - abc+ abcd?    +
1013: 
1014:     '''
1015:     # delay import of difflib to reduce startup time
1016:     __tracebackhide__ = True  # Hide traceback for py.test
1017:     import difflib
1018: 
1019:     if not isinstance(actual, str):
1020:         raise AssertionError(repr(type(actual)))
1021:     if not isinstance(desired, str):
1022:         raise AssertionError(repr(type(desired)))
1023:     if re.match(r'\A'+desired+r'\Z', actual, re.M):
1024:         return
1025: 
1026:     diff = list(difflib.Differ().compare(actual.splitlines(1), desired.splitlines(1)))
1027:     diff_list = []
1028:     while diff:
1029:         d1 = diff.pop(0)
1030:         if d1.startswith('  '):
1031:             continue
1032:         if d1.startswith('- '):
1033:             l = [d1]
1034:             d2 = diff.pop(0)
1035:             if d2.startswith('? '):
1036:                 l.append(d2)
1037:                 d2 = diff.pop(0)
1038:             if not d2.startswith('+ '):
1039:                 raise AssertionError(repr(d2))
1040:             l.append(d2)
1041:             if diff:
1042:                 d3 = diff.pop(0)
1043:                 if d3.startswith('? '):
1044:                     l.append(d3)
1045:                 else:
1046:                     diff.insert(0, d3)
1047:             if re.match(r'\A'+d2[2:]+r'\Z', d1[2:]):
1048:                 continue
1049:             diff_list.extend(l)
1050:             continue
1051:         raise AssertionError(repr(d1))
1052:     if not diff_list:
1053:         return
1054:     msg = 'Differences in strings:\n%s' % (''.join(diff_list)).rstrip()
1055:     if actual != desired:
1056:         raise AssertionError(msg)
1057: 
1058: 
1059: def rundocs(filename=None, raise_on_error=True):
1060:     '''
1061:     Run doctests found in the given file.
1062: 
1063:     By default `rundocs` raises an AssertionError on failure.
1064: 
1065:     Parameters
1066:     ----------
1067:     filename : str
1068:         The path to the file for which the doctests are run.
1069:     raise_on_error : bool
1070:         Whether to raise an AssertionError when a doctest fails. Default is
1071:         True.
1072: 
1073:     Notes
1074:     -----
1075:     The doctests can be run by the user/developer by adding the ``doctests``
1076:     argument to the ``test()`` call. For example, to run all tests (including
1077:     doctests) for `numpy.lib`:
1078: 
1079:     >>> np.lib.test(doctests=True) #doctest: +SKIP
1080:     '''
1081:     import doctest
1082:     import imp
1083:     if filename is None:
1084:         f = sys._getframe(1)
1085:         filename = f.f_globals['__file__']
1086:     name = os.path.splitext(os.path.basename(filename))[0]
1087:     path = [os.path.dirname(filename)]
1088:     file, pathname, description = imp.find_module(name, path)
1089:     try:
1090:         m = imp.load_module(name, file, pathname, description)
1091:     finally:
1092:         file.close()
1093: 
1094:     tests = doctest.DocTestFinder().find(m)
1095:     runner = doctest.DocTestRunner(verbose=False)
1096: 
1097:     msg = []
1098:     if raise_on_error:
1099:         out = lambda s: msg.append(s)
1100:     else:
1101:         out = None
1102: 
1103:     for test in tests:
1104:         runner.run(test, out=out)
1105: 
1106:     if runner.failures > 0 and raise_on_error:
1107:         raise AssertionError("Some doctests failed:\n%s" % "\n".join(msg))
1108: 
1109: 
1110: def raises(*args,**kwargs):
1111:     nose = import_nose()
1112:     return nose.tools.raises(*args,**kwargs)
1113: 
1114: 
1115: def assert_raises(*args,**kwargs):
1116:     '''
1117:     assert_raises(exception_class, callable, *args, **kwargs)
1118: 
1119:     Fail unless an exception of class exception_class is thrown
1120:     by callable when invoked with arguments args and keyword
1121:     arguments kwargs. If a different type of exception is
1122:     thrown, it will not be caught, and the test case will be
1123:     deemed to have suffered an error, exactly as for an
1124:     unexpected exception.
1125: 
1126:     Alternatively, `assert_raises` can be used as a context manager:
1127: 
1128:     >>> from numpy.testing import assert_raises
1129:     >>> with assert_raises(ZeroDivisionError):
1130:     ...   1 / 0
1131: 
1132:     is equivalent to
1133: 
1134:     >>> def div(x, y):
1135:     ...    return x / y
1136:     >>> assert_raises(ZeroDivisionError, div, 1, 0)
1137: 
1138:     '''
1139:     __tracebackhide__ = True  # Hide traceback for py.test
1140:     nose = import_nose()
1141:     return nose.tools.assert_raises(*args,**kwargs)
1142: 
1143: 
1144: assert_raises_regex_impl = None
1145: 
1146: 
1147: def assert_raises_regex(exception_class, expected_regexp,
1148:                         callable_obj=None, *args, **kwargs):
1149:     '''
1150:     Fail unless an exception of class exception_class and with message that
1151:     matches expected_regexp is thrown by callable when invoked with arguments
1152:     args and keyword arguments kwargs.
1153: 
1154:     Name of this function adheres to Python 3.2+ reference, but should work in
1155:     all versions down to 2.6.
1156: 
1157:     '''
1158:     __tracebackhide__ = True  # Hide traceback for py.test
1159:     nose = import_nose()
1160: 
1161:     global assert_raises_regex_impl
1162:     if assert_raises_regex_impl is None:
1163:         try:
1164:             # Python 3.2+
1165:             assert_raises_regex_impl = nose.tools.assert_raises_regex
1166:         except AttributeError:
1167:             try:
1168:                 # 2.7+
1169:                 assert_raises_regex_impl = nose.tools.assert_raises_regexp
1170:             except AttributeError:
1171:                 # 2.6
1172: 
1173:                 # This class is copied from Python2.7 stdlib almost verbatim
1174:                 class _AssertRaisesContext(object):
1175:                     '''A context manager used to implement TestCase.assertRaises* methods.'''
1176: 
1177:                     def __init__(self, expected, expected_regexp=None):
1178:                         self.expected = expected
1179:                         self.expected_regexp = expected_regexp
1180: 
1181:                     def failureException(self, msg):
1182:                         return AssertionError(msg)
1183: 
1184:                     def __enter__(self):
1185:                         return self
1186: 
1187:                     def __exit__(self, exc_type, exc_value, tb):
1188:                         if exc_type is None:
1189:                             try:
1190:                                 exc_name = self.expected.__name__
1191:                             except AttributeError:
1192:                                 exc_name = str(self.expected)
1193:                             raise self.failureException(
1194:                                 "{0} not raised".format(exc_name))
1195:                         if not issubclass(exc_type, self.expected):
1196:                             # let unexpected exceptions pass through
1197:                             return False
1198:                         self.exception = exc_value  # store for later retrieval
1199:                         if self.expected_regexp is None:
1200:                             return True
1201: 
1202:                         expected_regexp = self.expected_regexp
1203:                         if isinstance(expected_regexp, basestring):
1204:                             expected_regexp = re.compile(expected_regexp)
1205:                         if not expected_regexp.search(str(exc_value)):
1206:                             raise self.failureException(
1207:                                 '"%s" does not match "%s"' %
1208:                                 (expected_regexp.pattern, str(exc_value)))
1209:                         return True
1210: 
1211:                 def impl(cls, regex, callable_obj, *a, **kw):
1212:                     mgr = _AssertRaisesContext(cls, regex)
1213:                     if callable_obj is None:
1214:                         return mgr
1215:                     with mgr:
1216:                         callable_obj(*a, **kw)
1217:                 assert_raises_regex_impl = impl
1218: 
1219:     return assert_raises_regex_impl(exception_class, expected_regexp,
1220:                                     callable_obj, *args, **kwargs)
1221: 
1222: 
1223: def decorate_methods(cls, decorator, testmatch=None):
1224:     '''
1225:     Apply a decorator to all methods in a class matching a regular expression.
1226: 
1227:     The given decorator is applied to all public methods of `cls` that are
1228:     matched by the regular expression `testmatch`
1229:     (``testmatch.search(methodname)``). Methods that are private, i.e. start
1230:     with an underscore, are ignored.
1231: 
1232:     Parameters
1233:     ----------
1234:     cls : class
1235:         Class whose methods to decorate.
1236:     decorator : function
1237:         Decorator to apply to methods
1238:     testmatch : compiled regexp or str, optional
1239:         The regular expression. Default value is None, in which case the
1240:         nose default (``re.compile(r'(?:^|[\\b_\\.%s-])[Tt]est' % os.sep)``)
1241:         is used.
1242:         If `testmatch` is a string, it is compiled to a regular expression
1243:         first.
1244: 
1245:     '''
1246:     if testmatch is None:
1247:         testmatch = re.compile(r'(?:^|[\\b_\\.%s-])[Tt]est' % os.sep)
1248:     else:
1249:         testmatch = re.compile(testmatch)
1250:     cls_attr = cls.__dict__
1251: 
1252:     # delayed import to reduce startup time
1253:     from inspect import isfunction
1254: 
1255:     methods = [_m for _m in cls_attr.values() if isfunction(_m)]
1256:     for function in methods:
1257:         try:
1258:             if hasattr(function, 'compat_func_name'):
1259:                 funcname = function.compat_func_name
1260:             else:
1261:                 funcname = function.__name__
1262:         except AttributeError:
1263:             # not a function
1264:             continue
1265:         if testmatch.search(funcname) and not funcname.startswith('_'):
1266:             setattr(cls, funcname, decorator(function))
1267:     return
1268: 
1269: 
1270: def measure(code_str,times=1,label=None):
1271:     '''
1272:     Return elapsed time for executing code in the namespace of the caller.
1273: 
1274:     The supplied code string is compiled with the Python builtin ``compile``.
1275:     The precision of the timing is 10 milli-seconds. If the code will execute
1276:     fast on this timescale, it can be executed many times to get reasonable
1277:     timing accuracy.
1278: 
1279:     Parameters
1280:     ----------
1281:     code_str : str
1282:         The code to be timed.
1283:     times : int, optional
1284:         The number of times the code is executed. Default is 1. The code is
1285:         only compiled once.
1286:     label : str, optional
1287:         A label to identify `code_str` with. This is passed into ``compile``
1288:         as the second argument (for run-time error messages).
1289: 
1290:     Returns
1291:     -------
1292:     elapsed : float
1293:         Total elapsed time in seconds for executing `code_str` `times` times.
1294: 
1295:     Examples
1296:     --------
1297:     >>> etime = np.testing.measure('for i in range(1000): np.sqrt(i**2)',
1298:     ...                            times=times)
1299:     >>> print("Time for a single execution : ", etime / times, "s")
1300:     Time for a single execution :  0.005 s
1301: 
1302:     '''
1303:     frame = sys._getframe(1)
1304:     locs, globs = frame.f_locals, frame.f_globals
1305: 
1306:     code = compile(code_str,
1307:                    'Test name: %s ' % label,
1308:                    'exec')
1309:     i = 0
1310:     elapsed = jiffies()
1311:     while i < times:
1312:         i += 1
1313:         exec(code, globs, locs)
1314:     elapsed = jiffies() - elapsed
1315:     return 0.01*elapsed
1316: 
1317: 
1318: def _assert_valid_refcount(op):
1319:     '''
1320:     Check that ufuncs don't mishandle refcount of object `1`.
1321:     Used in a few regression tests.
1322:     '''
1323:     import numpy as np
1324: 
1325:     b = np.arange(100*100).reshape(100, 100)
1326:     c = b
1327:     i = 1
1328: 
1329:     rc = sys.getrefcount(i)
1330:     for j in range(15):
1331:         d = op(b, c)
1332:     assert_(sys.getrefcount(i) >= rc)
1333:     del d  # for pyflakes
1334: 
1335: 
1336: def assert_allclose(actual, desired, rtol=1e-7, atol=0, equal_nan=False,
1337:                     err_msg='', verbose=True):
1338:     '''
1339:     Raises an AssertionError if two objects are not equal up to desired
1340:     tolerance.
1341: 
1342:     The test is equivalent to ``allclose(actual, desired, rtol, atol)``.
1343:     It compares the difference between `actual` and `desired` to
1344:     ``atol + rtol * abs(desired)``.
1345: 
1346:     .. versionadded:: 1.5.0
1347: 
1348:     Parameters
1349:     ----------
1350:     actual : array_like
1351:         Array obtained.
1352:     desired : array_like
1353:         Array desired.
1354:     rtol : float, optional
1355:         Relative tolerance.
1356:     atol : float, optional
1357:         Absolute tolerance.
1358:     equal_nan : bool, optional.
1359:         If True, NaNs will compare equal.
1360:     err_msg : str, optional
1361:         The error message to be printed in case of failure.
1362:     verbose : bool, optional
1363:         If True, the conflicting values are appended to the error message.
1364: 
1365:     Raises
1366:     ------
1367:     AssertionError
1368:         If actual and desired are not equal up to specified precision.
1369: 
1370:     See Also
1371:     --------
1372:     assert_array_almost_equal_nulp, assert_array_max_ulp
1373: 
1374:     Examples
1375:     --------
1376:     >>> x = [1e-5, 1e-3, 1e-1]
1377:     >>> y = np.arccos(np.cos(x))
1378:     >>> assert_allclose(x, y, rtol=1e-5, atol=0)
1379: 
1380:     '''
1381:     __tracebackhide__ = True  # Hide traceback for py.test
1382:     import numpy as np
1383: 
1384:     def compare(x, y):
1385:         return np.core.numeric.isclose(x, y, rtol=rtol, atol=atol,
1386:                                        equal_nan=equal_nan)
1387: 
1388:     actual, desired = np.asanyarray(actual), np.asanyarray(desired)
1389:     header = 'Not equal to tolerance rtol=%g, atol=%g' % (rtol, atol)
1390:     assert_array_compare(compare, actual, desired, err_msg=str(err_msg),
1391:                          verbose=verbose, header=header)
1392: 
1393: def assert_array_almost_equal_nulp(x, y, nulp=1):
1394:     '''
1395:     Compare two arrays relatively to their spacing.
1396: 
1397:     This is a relatively robust method to compare two arrays whose amplitude
1398:     is variable.
1399: 
1400:     Parameters
1401:     ----------
1402:     x, y : array_like
1403:         Input arrays.
1404:     nulp : int, optional
1405:         The maximum number of unit in the last place for tolerance (see Notes).
1406:         Default is 1.
1407: 
1408:     Returns
1409:     -------
1410:     None
1411: 
1412:     Raises
1413:     ------
1414:     AssertionError
1415:         If the spacing between `x` and `y` for one or more elements is larger
1416:         than `nulp`.
1417: 
1418:     See Also
1419:     --------
1420:     assert_array_max_ulp : Check that all items of arrays differ in at most
1421:         N Units in the Last Place.
1422:     spacing : Return the distance between x and the nearest adjacent number.
1423: 
1424:     Notes
1425:     -----
1426:     An assertion is raised if the following condition is not met::
1427: 
1428:         abs(x - y) <= nulps * spacing(maximum(abs(x), abs(y)))
1429: 
1430:     Examples
1431:     --------
1432:     >>> x = np.array([1., 1e-10, 1e-20])
1433:     >>> eps = np.finfo(x.dtype).eps
1434:     >>> np.testing.assert_array_almost_equal_nulp(x, x*eps/2 + x)
1435: 
1436:     >>> np.testing.assert_array_almost_equal_nulp(x, x*eps + x)
1437:     Traceback (most recent call last):
1438:       ...
1439:     AssertionError: X and Y are not equal to 1 ULP (max is 2)
1440: 
1441:     '''
1442:     __tracebackhide__ = True  # Hide traceback for py.test
1443:     import numpy as np
1444:     ax = np.abs(x)
1445:     ay = np.abs(y)
1446:     ref = nulp * np.spacing(np.where(ax > ay, ax, ay))
1447:     if not np.all(np.abs(x-y) <= ref):
1448:         if np.iscomplexobj(x) or np.iscomplexobj(y):
1449:             msg = "X and Y are not equal to %d ULP" % nulp
1450:         else:
1451:             max_nulp = np.max(nulp_diff(x, y))
1452:             msg = "X and Y are not equal to %d ULP (max is %g)" % (nulp, max_nulp)
1453:         raise AssertionError(msg)
1454: 
1455: def assert_array_max_ulp(a, b, maxulp=1, dtype=None):
1456:     '''
1457:     Check that all items of arrays differ in at most N Units in the Last Place.
1458: 
1459:     Parameters
1460:     ----------
1461:     a, b : array_like
1462:         Input arrays to be compared.
1463:     maxulp : int, optional
1464:         The maximum number of units in the last place that elements of `a` and
1465:         `b` can differ. Default is 1.
1466:     dtype : dtype, optional
1467:         Data-type to convert `a` and `b` to if given. Default is None.
1468: 
1469:     Returns
1470:     -------
1471:     ret : ndarray
1472:         Array containing number of representable floating point numbers between
1473:         items in `a` and `b`.
1474: 
1475:     Raises
1476:     ------
1477:     AssertionError
1478:         If one or more elements differ by more than `maxulp`.
1479: 
1480:     See Also
1481:     --------
1482:     assert_array_almost_equal_nulp : Compare two arrays relatively to their
1483:         spacing.
1484: 
1485:     Examples
1486:     --------
1487:     >>> a = np.linspace(0., 1., 100)
1488:     >>> res = np.testing.assert_array_max_ulp(a, np.arcsin(np.sin(a)))
1489: 
1490:     '''
1491:     __tracebackhide__ = True  # Hide traceback for py.test
1492:     import numpy as np
1493:     ret = nulp_diff(a, b, dtype)
1494:     if not np.all(ret <= maxulp):
1495:         raise AssertionError("Arrays are not almost equal up to %g ULP" %
1496:                              maxulp)
1497:     return ret
1498: 
1499: def nulp_diff(x, y, dtype=None):
1500:     '''For each item in x and y, return the number of representable floating
1501:     points between them.
1502: 
1503:     Parameters
1504:     ----------
1505:     x : array_like
1506:         first input array
1507:     y : array_like
1508:         second input array
1509:     dtype : dtype, optional
1510:         Data-type to convert `x` and `y` to if given. Default is None.
1511: 
1512:     Returns
1513:     -------
1514:     nulp : array_like
1515:         number of representable floating point numbers between each item in x
1516:         and y.
1517: 
1518:     Examples
1519:     --------
1520:     # By definition, epsilon is the smallest number such as 1 + eps != 1, so
1521:     # there should be exactly one ULP between 1 and 1 + eps
1522:     >>> nulp_diff(1, 1 + np.finfo(x.dtype).eps)
1523:     1.0
1524:     '''
1525:     import numpy as np
1526:     if dtype:
1527:         x = np.array(x, dtype=dtype)
1528:         y = np.array(y, dtype=dtype)
1529:     else:
1530:         x = np.array(x)
1531:         y = np.array(y)
1532: 
1533:     t = np.common_type(x, y)
1534:     if np.iscomplexobj(x) or np.iscomplexobj(y):
1535:         raise NotImplementedError("_nulp not implemented for complex array")
1536: 
1537:     x = np.array(x, dtype=t)
1538:     y = np.array(y, dtype=t)
1539: 
1540:     if not x.shape == y.shape:
1541:         raise ValueError("x and y do not have the same shape: %s - %s" %
1542:                          (x.shape, y.shape))
1543: 
1544:     def _diff(rx, ry, vdt):
1545:         diff = np.array(rx-ry, dtype=vdt)
1546:         return np.abs(diff)
1547: 
1548:     rx = integer_repr(x)
1549:     ry = integer_repr(y)
1550:     return _diff(rx, ry, t)
1551: 
1552: def _integer_repr(x, vdt, comp):
1553:     # Reinterpret binary representation of the float as sign-magnitude:
1554:     # take into account two-complement representation
1555:     # See also
1556:     # http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm
1557:     rx = x.view(vdt)
1558:     if not (rx.size == 1):
1559:         rx[rx < 0] = comp - rx[rx < 0]
1560:     else:
1561:         if rx < 0:
1562:             rx = comp - rx
1563: 
1564:     return rx
1565: 
1566: def integer_repr(x):
1567:     '''Return the signed-magnitude interpretation of the binary representation of
1568:     x.'''
1569:     import numpy as np
1570:     if x.dtype == np.float32:
1571:         return _integer_repr(x, np.int32, np.int32(-2**31))
1572:     elif x.dtype == np.float64:
1573:         return _integer_repr(x, np.int64, np.int64(-2**63))
1574:     else:
1575:         raise ValueError("Unsupported dtype %s" % x.dtype)
1576: 
1577: # The following two classes are copied from python 2.6 warnings module (context
1578: # manager)
1579: class WarningMessage(object):
1580: 
1581:     '''
1582:     Holds the result of a single showwarning() call.
1583: 
1584:     Deprecated in 1.8.0
1585: 
1586:     Notes
1587:     -----
1588:     `WarningMessage` is copied from the Python 2.6 warnings module,
1589:     so it can be used in NumPy with older Python versions.
1590: 
1591:     '''
1592: 
1593:     _WARNING_DETAILS = ("message", "category", "filename", "lineno", "file",
1594:                         "line")
1595: 
1596:     def __init__(self, message, category, filename, lineno, file=None,
1597:                     line=None):
1598:         local_values = locals()
1599:         for attr in self._WARNING_DETAILS:
1600:             setattr(self, attr, local_values[attr])
1601:         if category:
1602:             self._category_name = category.__name__
1603:         else:
1604:             self._category_name = None
1605: 
1606:     def __str__(self):
1607:         return ("{message : %r, category : %r, filename : %r, lineno : %s, "
1608:                     "line : %r}" % (self.message, self._category_name,
1609:                                     self.filename, self.lineno, self.line))
1610: 
1611: class WarningManager(object):
1612:     '''
1613:     A context manager that copies and restores the warnings filter upon
1614:     exiting the context.
1615: 
1616:     The 'record' argument specifies whether warnings should be captured by a
1617:     custom implementation of ``warnings.showwarning()`` and be appended to a
1618:     list returned by the context manager. Otherwise None is returned by the
1619:     context manager. The objects appended to the list are arguments whose
1620:     attributes mirror the arguments to ``showwarning()``.
1621: 
1622:     The 'module' argument is to specify an alternative module to the module
1623:     named 'warnings' and imported under that name. This argument is only useful
1624:     when testing the warnings module itself.
1625: 
1626:     Deprecated in 1.8.0
1627: 
1628:     Notes
1629:     -----
1630:     `WarningManager` is a copy of the ``catch_warnings`` context manager
1631:     from the Python 2.6 warnings module, with slight modifications.
1632:     It is copied so it can be used in NumPy with older Python versions.
1633: 
1634:     '''
1635: 
1636:     def __init__(self, record=False, module=None):
1637:         self._record = record
1638:         if module is None:
1639:             self._module = sys.modules['warnings']
1640:         else:
1641:             self._module = module
1642:         self._entered = False
1643: 
1644:     def __enter__(self):
1645:         if self._entered:
1646:             raise RuntimeError("Cannot enter %r twice" % self)
1647:         self._entered = True
1648:         self._filters = self._module.filters
1649:         self._module.filters = self._filters[:]
1650:         self._showwarning = self._module.showwarning
1651:         if self._record:
1652:             log = []
1653: 
1654:             def showwarning(*args, **kwargs):
1655:                 log.append(WarningMessage(*args, **kwargs))
1656:             self._module.showwarning = showwarning
1657:             return log
1658:         else:
1659:             return None
1660: 
1661:     def __exit__(self):
1662:         if not self._entered:
1663:             raise RuntimeError("Cannot exit %r without entering first" % self)
1664:         self._module.filters = self._filters
1665:         self._module.showwarning = self._showwarning
1666: 
1667: 
1668: @contextlib.contextmanager
1669: def _assert_warns_context(warning_class, name=None):
1670:     __tracebackhide__ = True  # Hide traceback for py.test
1671:     with warnings.catch_warnings(record=True) as l:
1672:         warnings.simplefilter('always')
1673:         yield
1674:         if not len(l) > 0:
1675:             name_str = " when calling %s" % name if name is not None else ""
1676:             raise AssertionError("No warning raised" + name_str)
1677:         if not l[0].category is warning_class:
1678:             name_str = "%s " % name if name is not None else ""
1679:             raise AssertionError("First warning %sis not a %s (is %s)"
1680:                                  % (name_str, warning_class, l[0]))
1681: 
1682: 
1683: def assert_warns(warning_class, *args, **kwargs):
1684:     '''
1685:     Fail unless the given callable throws the specified warning.
1686: 
1687:     A warning of class warning_class should be thrown by the callable when
1688:     invoked with arguments args and keyword arguments kwargs.
1689:     If a different type of warning is thrown, it will not be caught, and the
1690:     test case will be deemed to have suffered an error.
1691: 
1692:     If called with all arguments other than the warning class omitted, may be
1693:     used as a context manager:
1694: 
1695:         with assert_warns(SomeWarning):
1696:             do_something()
1697: 
1698:     The ability to be used as a context manager is new in NumPy v1.11.0.
1699: 
1700:     .. versionadded:: 1.4.0
1701: 
1702:     Parameters
1703:     ----------
1704:     warning_class : class
1705:         The class defining the warning that `func` is expected to throw.
1706:     func : callable
1707:         The callable to test.
1708:     \\*args : Arguments
1709:         Arguments passed to `func`.
1710:     \\*\\*kwargs : Kwargs
1711:         Keyword arguments passed to `func`.
1712: 
1713:     Returns
1714:     -------
1715:     The value returned by `func`.
1716: 
1717:     '''
1718:     if not args:
1719:         return _assert_warns_context(warning_class)
1720: 
1721:     func = args[0]
1722:     args = args[1:]
1723:     with _assert_warns_context(warning_class, name=func.__name__):
1724:         return func(*args, **kwargs)
1725: 
1726: 
1727: @contextlib.contextmanager
1728: def _assert_no_warnings_context(name=None):
1729:     __tracebackhide__ = True  # Hide traceback for py.test
1730:     with warnings.catch_warnings(record=True) as l:
1731:         warnings.simplefilter('always')
1732:         yield
1733:         if len(l) > 0:
1734:             name_str = " when calling %s" % name if name is not None else ""
1735:             raise AssertionError("Got warnings%s: %s" % (name_str, l))
1736: 
1737: 
1738: def assert_no_warnings(*args, **kwargs):
1739:     '''
1740:     Fail if the given callable produces any warnings.
1741: 
1742:     If called with all arguments omitted, may be used as a context manager:
1743: 
1744:         with assert_no_warnings():
1745:             do_something()
1746: 
1747:     The ability to be used as a context manager is new in NumPy v1.11.0.
1748: 
1749:     .. versionadded:: 1.7.0
1750: 
1751:     Parameters
1752:     ----------
1753:     func : callable
1754:         The callable to test.
1755:     \\*args : Arguments
1756:         Arguments passed to `func`.
1757:     \\*\\*kwargs : Kwargs
1758:         Keyword arguments passed to `func`.
1759: 
1760:     Returns
1761:     -------
1762:     The value returned by `func`.
1763: 
1764:     '''
1765:     if not args:
1766:         return _assert_no_warnings_context()
1767: 
1768:     func = args[0]
1769:     args = args[1:]
1770:     with _assert_no_warnings_context(name=func.__name__):
1771:         return func(*args, **kwargs)
1772: 
1773: 
1774: def _gen_alignment_data(dtype=float32, type='binary', max_size=24):
1775:     '''
1776:     generator producing data with different alignment and offsets
1777:     to test simd vectorization
1778: 
1779:     Parameters
1780:     ----------
1781:     dtype : dtype
1782:         data type to produce
1783:     type : string
1784:         'unary': create data for unary operations, creates one input
1785:                  and output array
1786:         'binary': create data for unary operations, creates two input
1787:                  and output array
1788:     max_size : integer
1789:         maximum size of data to produce
1790: 
1791:     Returns
1792:     -------
1793:     if type is 'unary' yields one output, one input array and a message
1794:     containing information on the data
1795:     if type is 'binary' yields one output array, two input array and a message
1796:     containing information on the data
1797: 
1798:     '''
1799:     ufmt = 'unary offset=(%d, %d), size=%d, dtype=%r, %s'
1800:     bfmt = 'binary offset=(%d, %d, %d), size=%d, dtype=%r, %s'
1801:     for o in range(3):
1802:         for s in range(o + 2, max(o + 3, max_size)):
1803:             if type == 'unary':
1804:                 inp = lambda: arange(s, dtype=dtype)[o:]
1805:                 out = empty((s,), dtype=dtype)[o:]
1806:                 yield out, inp(), ufmt % (o, o, s, dtype, 'out of place')
1807:                 yield inp(), inp(), ufmt % (o, o, s, dtype, 'in place')
1808:                 yield out[1:], inp()[:-1], ufmt % \
1809:                     (o + 1, o, s - 1, dtype, 'out of place')
1810:                 yield out[:-1], inp()[1:], ufmt % \
1811:                     (o, o + 1, s - 1, dtype, 'out of place')
1812:                 yield inp()[:-1], inp()[1:], ufmt % \
1813:                     (o, o + 1, s - 1, dtype, 'aliased')
1814:                 yield inp()[1:], inp()[:-1], ufmt % \
1815:                     (o + 1, o, s - 1, dtype, 'aliased')
1816:             if type == 'binary':
1817:                 inp1 = lambda: arange(s, dtype=dtype)[o:]
1818:                 inp2 = lambda: arange(s, dtype=dtype)[o:]
1819:                 out = empty((s,), dtype=dtype)[o:]
1820:                 yield out, inp1(), inp2(),  bfmt % \
1821:                     (o, o, o, s, dtype, 'out of place')
1822:                 yield inp1(), inp1(), inp2(), bfmt % \
1823:                     (o, o, o, s, dtype, 'in place1')
1824:                 yield inp2(), inp1(), inp2(), bfmt % \
1825:                     (o, o, o, s, dtype, 'in place2')
1826:                 yield out[1:], inp1()[:-1], inp2()[:-1], bfmt % \
1827:                     (o + 1, o, o, s - 1, dtype, 'out of place')
1828:                 yield out[:-1], inp1()[1:], inp2()[:-1], bfmt % \
1829:                     (o, o + 1, o, s - 1, dtype, 'out of place')
1830:                 yield out[:-1], inp1()[:-1], inp2()[1:], bfmt % \
1831:                     (o, o, o + 1, s - 1, dtype, 'out of place')
1832:                 yield inp1()[1:], inp1()[:-1], inp2()[:-1], bfmt % \
1833:                     (o + 1, o, o, s - 1, dtype, 'aliased')
1834:                 yield inp1()[:-1], inp1()[1:], inp2()[:-1], bfmt % \
1835:                     (o, o + 1, o, s - 1, dtype, 'aliased')
1836:                 yield inp1()[:-1], inp1()[:-1], inp2()[1:], bfmt % \
1837:                     (o, o, o + 1, s - 1, dtype, 'aliased')
1838: 
1839: 
1840: class IgnoreException(Exception):
1841:     "Ignoring this exception due to disabled feature"
1842: 
1843: 
1844: @contextlib.contextmanager
1845: def tempdir(*args, **kwargs):
1846:     '''Context manager to provide a temporary test folder.
1847: 
1848:     All arguments are passed as this to the underlying tempfile.mkdtemp
1849:     function.
1850: 
1851:     '''
1852:     tmpdir = mkdtemp(*args, **kwargs)
1853:     try:
1854:         yield tmpdir
1855:     finally:
1856:         shutil.rmtree(tmpdir)
1857: 
1858: @contextlib.contextmanager
1859: def temppath(*args, **kwargs):
1860:     '''Context manager for temporary files.
1861: 
1862:     Context manager that returns the path to a closed temporary file. Its
1863:     parameters are the same as for tempfile.mkstemp and are passed directly
1864:     to that function. The underlying file is removed when the context is
1865:     exited, so it should be closed at that time.
1866:   
1867:     Windows does not allow a temporary file to be opened if it is already
1868:     open, so the underlying file must be closed after opening before it
1869:     can be opened again.
1870: 
1871:     '''
1872:     fd, path = mkstemp(*args, **kwargs)
1873:     os.close(fd)
1874:     try:
1875:         yield path
1876:     finally:
1877:         os.remove(path)
1878: 
1879: 
1880: class clear_and_catch_warnings(warnings.catch_warnings):
1881:     ''' Context manager that resets warning registry for catching warnings
1882: 
1883:     Warnings can be slippery, because, whenever a warning is triggered, Python
1884:     adds a ``__warningregistry__`` member to the *calling* module.  This makes
1885:     it impossible to retrigger the warning in this module, whatever you put in
1886:     the warnings filters.  This context manager accepts a sequence of `modules`
1887:     as a keyword argument to its constructor and:
1888: 
1889:     * stores and removes any ``__warningregistry__`` entries in given `modules`
1890:       on entry;
1891:     * resets ``__warningregistry__`` to its previous state on exit.
1892: 
1893:     This makes it possible to trigger any warning afresh inside the context
1894:     manager without disturbing the state of warnings outside.
1895: 
1896:     For compatibility with Python 3.0, please consider all arguments to be
1897:     keyword-only.
1898: 
1899:     Parameters
1900:     ----------
1901:     record : bool, optional
1902:         Specifies whether warnings should be captured by a custom
1903:         implementation of ``warnings.showwarning()`` and be appended to a list
1904:         returned by the context manager. Otherwise None is returned by the
1905:         context manager. The objects appended to the list are arguments whose
1906:         attributes mirror the arguments to ``showwarning()``.
1907:     modules : sequence, optional
1908:         Sequence of modules for which to reset warnings registry on entry and
1909:         restore on exit
1910: 
1911:     Examples
1912:     --------
1913:     >>> import warnings
1914:     >>> with clear_and_catch_warnings(modules=[np.core.fromnumeric]):
1915:     ...     warnings.simplefilter('always')
1916:     ...     # do something that raises a warning in np.core.fromnumeric
1917:     '''
1918:     class_modules = ()
1919: 
1920:     def __init__(self, record=False, modules=()):
1921:         self.modules = set(modules).union(self.class_modules)
1922:         self._warnreg_copies = {}
1923:         super(clear_and_catch_warnings, self).__init__(record=record)
1924: 
1925:     def __enter__(self):
1926:         for mod in self.modules:
1927:             if hasattr(mod, '__warningregistry__'):
1928:                 mod_reg = mod.__warningregistry__
1929:                 self._warnreg_copies[mod] = mod_reg.copy()
1930:                 mod_reg.clear()
1931:         return super(clear_and_catch_warnings, self).__enter__()
1932: 
1933:     def __exit__(self, *exc_info):
1934:         super(clear_and_catch_warnings, self).__exit__(*exc_info)
1935:         for mod in self.modules:
1936:             if hasattr(mod, '__warningregistry__'):
1937:                 mod.__warningregistry__.clear()
1938:             if mod in self._warnreg_copies:
1939:                 mod.__warningregistry__.update(self._warnreg_copies[mod])
1940: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_182846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4, (-1)), 'str', '\nUtility function to facilitate testing.\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import os' statement (line 7)
import os

import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import sys' statement (line 8)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import re' statement (line 9)
import re

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import operator' statement (line 10)
import operator

import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'operator', operator, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'import warnings' statement (line 11)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from functools import partial' statement (line 12)
from functools import partial

import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'functools', None, module_type_store, ['partial'], [partial])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'import shutil' statement (line 13)
import shutil

import_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'shutil', shutil, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import contextlib' statement (line 14)
import contextlib

import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'contextlib', contextlib, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from tempfile import mkdtemp, mkstemp' statement (line 15)
from tempfile import mkdtemp, mkstemp

import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'tempfile', None, module_type_store, ['mkdtemp', 'mkstemp'], [mkdtemp, mkstemp])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'from numpy.testing.nosetester import import_nose' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
import_182847 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'numpy.testing.nosetester')

if (type(import_182847) is not StypyTypeError):

    if (import_182847 != 'pyd_module'):
        __import__(import_182847)
        sys_modules_182848 = sys.modules[import_182847]
        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'numpy.testing.nosetester', sys_modules_182848.module_type_store, module_type_store, ['import_nose'])
        nest_module(stypy.reporting.localization.Localization(__file__, 17, 0), __file__, sys_modules_182848, sys_modules_182848.module_type_store, module_type_store)
    else:
        from numpy.testing.nosetester import import_nose

        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'numpy.testing.nosetester', None, module_type_store, ['import_nose'], [import_nose])

else:
    # Assigning a type to the variable 'numpy.testing.nosetester' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'numpy.testing.nosetester', import_182847)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from numpy.core import float32, empty, arange, array_repr, ndarray' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
import_182849 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'numpy.core')

if (type(import_182849) is not StypyTypeError):

    if (import_182849 != 'pyd_module'):
        __import__(import_182849)
        sys_modules_182850 = sys.modules[import_182849]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'numpy.core', sys_modules_182850.module_type_store, module_type_store, ['float32', 'empty', 'arange', 'array_repr', 'ndarray'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_182850, sys_modules_182850.module_type_store, module_type_store)
    else:
        from numpy.core import float32, empty, arange, array_repr, ndarray

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'numpy.core', None, module_type_store, ['float32', 'empty', 'arange', 'array_repr', 'ndarray'], [float32, empty, arange, array_repr, ndarray])

else:
    # Assigning a type to the variable 'numpy.core' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'numpy.core', import_182849)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from numpy.lib.utils import deprecate' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
import_182851 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'numpy.lib.utils')

if (type(import_182851) is not StypyTypeError):

    if (import_182851 != 'pyd_module'):
        __import__(import_182851)
        sys_modules_182852 = sys.modules[import_182851]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'numpy.lib.utils', sys_modules_182852.module_type_store, module_type_store, ['deprecate'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_182852, sys_modules_182852.module_type_store, module_type_store)
    else:
        from numpy.lib.utils import deprecate

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'numpy.lib.utils', None, module_type_store, ['deprecate'], [deprecate])

else:
    # Assigning a type to the variable 'numpy.lib.utils' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'numpy.lib.utils', import_182851)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')




# Obtaining the type of the subscript
int_182853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 20), 'int')
# Getting the type of 'sys' (line 21)
sys_182854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 21, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 21)
version_info_182855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 21, 3), sys_182854, 'version_info')
# Obtaining the member '__getitem__' of a type (line 21)
getitem___182856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 21, 3), version_info_182855, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 21)
subscript_call_result_182857 = invoke(stypy.reporting.localization.Localization(__file__, 21, 3), getitem___182856, int_182853)

int_182858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 26), 'int')
# Applying the binary operator '>=' (line 21)
result_ge_182859 = python_operator(stypy.reporting.localization.Localization(__file__, 21, 3), '>=', subscript_call_result_182857, int_182858)

# Testing the type of an if condition (line 21)
if_condition_182860 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 21, 0), result_ge_182859)
# Assigning a type to the variable 'if_condition_182860' (line 21)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'if_condition_182860', if_condition_182860)
# SSA begins for if statement (line 21)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 4))

# 'from io import StringIO' statement (line 22)
from io import StringIO

import_from_module(stypy.reporting.localization.Localization(__file__, 22, 4), 'io', None, module_type_store, ['StringIO'], [StringIO])

# SSA branch for the else part of an if statement (line 21)
module_type_store.open_ssa_branch('else')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 4))

# 'from StringIO import StringIO' statement (line 24)
from StringIO import StringIO

import_from_module(stypy.reporting.localization.Localization(__file__, 24, 4), 'StringIO', None, module_type_store, ['StringIO'], [StringIO])

# SSA join for if statement (line 21)
module_type_store = module_type_store.join_ssa_context()


# Assigning a List to a Name (line 26):

# Assigning a List to a Name (line 26):
__all__ = ['assert_equal', 'assert_almost_equal', 'assert_approx_equal', 'assert_array_equal', 'assert_array_less', 'assert_string_equal', 'assert_array_almost_equal', 'assert_raises', 'build_err_msg', 'decorate_methods', 'jiffies', 'memusage', 'print_assert_equal', 'raises', 'rand', 'rundocs', 'runstring', 'verbose', 'measure', 'assert_', 'assert_array_almost_equal_nulp', 'assert_raises_regex', 'assert_array_max_ulp', 'assert_warns', 'assert_no_warnings', 'assert_allclose', 'IgnoreException', 'clear_and_catch_warnings', 'SkipTest', 'KnownFailureException', 'temppath', 'tempdir']
module_type_store.set_exportable_members(['assert_equal', 'assert_almost_equal', 'assert_approx_equal', 'assert_array_equal', 'assert_array_less', 'assert_string_equal', 'assert_array_almost_equal', 'assert_raises', 'build_err_msg', 'decorate_methods', 'jiffies', 'memusage', 'print_assert_equal', 'raises', 'rand', 'rundocs', 'runstring', 'verbose', 'measure', 'assert_', 'assert_array_almost_equal_nulp', 'assert_raises_regex', 'assert_array_max_ulp', 'assert_warns', 'assert_no_warnings', 'assert_allclose', 'IgnoreException', 'clear_and_catch_warnings', 'SkipTest', 'KnownFailureException', 'temppath', 'tempdir'])

# Obtaining an instance of the builtin type 'list' (line 26)
list_182861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 26)
# Adding element type (line 26)
str_182862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 11), 'str', 'assert_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182862)
# Adding element type (line 26)
str_182863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 27), 'str', 'assert_almost_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182863)
# Adding element type (line 26)
str_182864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 50), 'str', 'assert_approx_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182864)
# Adding element type (line 26)
str_182865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 11), 'str', 'assert_array_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182865)
# Adding element type (line 26)
str_182866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 33), 'str', 'assert_array_less')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182866)
# Adding element type (line 26)
str_182867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 54), 'str', 'assert_string_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182867)
# Adding element type (line 26)
str_182868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 11), 'str', 'assert_array_almost_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182868)
# Adding element type (line 26)
str_182869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 40), 'str', 'assert_raises')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182869)
# Adding element type (line 26)
str_182870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 57), 'str', 'build_err_msg')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182870)
# Adding element type (line 26)
str_182871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 11), 'str', 'decorate_methods')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182871)
# Adding element type (line 26)
str_182872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 31), 'str', 'jiffies')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182872)
# Adding element type (line 26)
str_182873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 42), 'str', 'memusage')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182873)
# Adding element type (line 26)
str_182874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 54), 'str', 'print_assert_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182874)
# Adding element type (line 26)
str_182875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 11), 'str', 'raises')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182875)
# Adding element type (line 26)
str_182876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 21), 'str', 'rand')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182876)
# Adding element type (line 26)
str_182877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 29), 'str', 'rundocs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182877)
# Adding element type (line 26)
str_182878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 40), 'str', 'runstring')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182878)
# Adding element type (line 26)
str_182879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 53), 'str', 'verbose')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182879)
# Adding element type (line 26)
str_182880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 64), 'str', 'measure')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182880)
# Adding element type (line 26)
str_182881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 11), 'str', 'assert_')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182881)
# Adding element type (line 26)
str_182882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 22), 'str', 'assert_array_almost_equal_nulp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182882)
# Adding element type (line 26)
str_182883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 56), 'str', 'assert_raises_regex')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182883)
# Adding element type (line 26)
str_182884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 11), 'str', 'assert_array_max_ulp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182884)
# Adding element type (line 26)
str_182885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 35), 'str', 'assert_warns')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182885)
# Adding element type (line 26)
str_182886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 51), 'str', 'assert_no_warnings')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182886)
# Adding element type (line 26)
str_182887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 11), 'str', 'assert_allclose')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182887)
# Adding element type (line 26)
str_182888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 30), 'str', 'IgnoreException')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182888)
# Adding element type (line 26)
str_182889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 49), 'str', 'clear_and_catch_warnings')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182889)
# Adding element type (line 26)
str_182890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 11), 'str', 'SkipTest')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182890)
# Adding element type (line 26)
str_182891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 23), 'str', 'KnownFailureException')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182891)
# Adding element type (line 26)
str_182892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 48), 'str', 'temppath')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182892)
# Adding element type (line 26)
str_182893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 60), 'str', 'tempdir')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 26, 10), list_182861, str_182893)

# Assigning a type to the variable '__all__' (line 26)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), '__all__', list_182861)
# Declaration of the 'KnownFailureException' class
# Getting the type of 'Exception' (line 37)
Exception_182894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 28), 'Exception')

class KnownFailureException(Exception_182894, ):
    str_182895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 4), 'str', 'Raise this exception to mark a test as a known failing test.')
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 37, 0, False)
        # Assigning a type to the variable 'self' (line 38)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'KnownFailureException.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'KnownFailureException' (line 37)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'KnownFailureException', KnownFailureException)

# Assigning a Name to a Name (line 41):

# Assigning a Name to a Name (line 41):
# Getting the type of 'KnownFailureException' (line 41)
KnownFailureException_182896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 19), 'KnownFailureException')
# Assigning a type to the variable 'KnownFailureTest' (line 41)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'KnownFailureTest', KnownFailureException_182896)


# SSA begins for try-except statement (line 46)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 47, 4))

# 'from unittest.case import SkipTest' statement (line 47)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
import_182897 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 47, 4), 'unittest.case')

if (type(import_182897) is not StypyTypeError):

    if (import_182897 != 'pyd_module'):
        __import__(import_182897)
        sys_modules_182898 = sys.modules[import_182897]
        import_from_module(stypy.reporting.localization.Localization(__file__, 47, 4), 'unittest.case', sys_modules_182898.module_type_store, module_type_store, ['SkipTest'])
        nest_module(stypy.reporting.localization.Localization(__file__, 47, 4), __file__, sys_modules_182898, sys_modules_182898.module_type_store, module_type_store)
    else:
        from unittest.case import SkipTest

        import_from_module(stypy.reporting.localization.Localization(__file__, 47, 4), 'unittest.case', None, module_type_store, ['SkipTest'], [SkipTest])

else:
    # Assigning a type to the variable 'unittest.case' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 4), 'unittest.case', import_182897)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')

# SSA branch for the except part of a try statement (line 46)
# SSA branch for the except 'ImportError' branch of a try statement (line 46)
module_type_store.open_ssa_branch('except')

# Assigning a Attribute to a Name (line 50):

# Assigning a Attribute to a Name (line 50):

# Call to import_nose(...): (line 50)
# Processing the call keyword arguments (line 50)
kwargs_182900 = {}
# Getting the type of 'import_nose' (line 50)
import_nose_182899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 15), 'import_nose', False)
# Calling import_nose(args, kwargs) (line 50)
import_nose_call_result_182901 = invoke(stypy.reporting.localization.Localization(__file__, 50, 15), import_nose_182899, *[], **kwargs_182900)

# Obtaining the member 'SkipTest' of a type (line 50)
SkipTest_182902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 50, 15), import_nose_call_result_182901, 'SkipTest')
# Assigning a type to the variable 'SkipTest' (line 50)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 4), 'SkipTest', SkipTest_182902)
# SSA join for try-except statement (line 46)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Num to a Name (line 53):

# Assigning a Num to a Name (line 53):
int_182903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 10), 'int')
# Assigning a type to the variable 'verbose' (line 53)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 0), 'verbose', int_182903)

@norecursion
def assert_(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_182904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 21), 'str', '')
    defaults = [str_182904]
    # Create a new context for function 'assert_'
    module_type_store = module_type_store.open_function_context('assert_', 55, 0, False)
    
    # Passed parameters checking function
    assert_.stypy_localization = localization
    assert_.stypy_type_of_self = None
    assert_.stypy_type_store = module_type_store
    assert_.stypy_function_name = 'assert_'
    assert_.stypy_param_names_list = ['val', 'msg']
    assert_.stypy_varargs_param_name = None
    assert_.stypy_kwargs_param_name = None
    assert_.stypy_call_defaults = defaults
    assert_.stypy_call_varargs = varargs
    assert_.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_', ['val', 'msg'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_', localization, ['val', 'msg'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_(...)' code ##################

    str_182905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, (-1)), 'str', '\n    Assert that works in release mode.\n    Accepts callable msg to allow deferring evaluation until failure.\n\n    The Python built-in ``assert`` does not work when executing code in\n    optimized mode (the ``-O`` flag) - no byte-code is generated for it.\n\n    For documentation on usage, refer to the Python documentation.\n\n    ')
    
    
    # Getting the type of 'val' (line 66)
    val_182906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 11), 'val')
    # Applying the 'not' unary operator (line 66)
    result_not__182907 = python_operator(stypy.reporting.localization.Localization(__file__, 66, 7), 'not', val_182906)
    
    # Testing the type of an if condition (line 66)
    if_condition_182908 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 66, 4), result_not__182907)
    # Assigning a type to the variable 'if_condition_182908' (line 66)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 66, 4), 'if_condition_182908', if_condition_182908)
    # SSA begins for if statement (line 66)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 67)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 68):
    
    # Assigning a Call to a Name (line 68):
    
    # Call to msg(...): (line 68)
    # Processing the call keyword arguments (line 68)
    kwargs_182910 = {}
    # Getting the type of 'msg' (line 68)
    msg_182909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 19), 'msg', False)
    # Calling msg(args, kwargs) (line 68)
    msg_call_result_182911 = invoke(stypy.reporting.localization.Localization(__file__, 68, 19), msg_182909, *[], **kwargs_182910)
    
    # Assigning a type to the variable 'smsg' (line 68)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 12), 'smsg', msg_call_result_182911)
    # SSA branch for the except part of a try statement (line 67)
    # SSA branch for the except 'TypeError' branch of a try statement (line 67)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Name to a Name (line 70):
    
    # Assigning a Name to a Name (line 70):
    # Getting the type of 'msg' (line 70)
    msg_182912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 19), 'msg')
    # Assigning a type to the variable 'smsg' (line 70)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 12), 'smsg', msg_182912)
    # SSA join for try-except statement (line 67)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to AssertionError(...): (line 71)
    # Processing the call arguments (line 71)
    # Getting the type of 'smsg' (line 71)
    smsg_182914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 29), 'smsg', False)
    # Processing the call keyword arguments (line 71)
    kwargs_182915 = {}
    # Getting the type of 'AssertionError' (line 71)
    AssertionError_182913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 14), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 71)
    AssertionError_call_result_182916 = invoke(stypy.reporting.localization.Localization(__file__, 71, 14), AssertionError_182913, *[smsg_182914], **kwargs_182915)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 71, 8), AssertionError_call_result_182916, 'raise parameter', BaseException)
    # SSA join for if statement (line 66)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'assert_(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_' in the type store
    # Getting the type of 'stypy_return_type' (line 55)
    stypy_return_type_182917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_182917)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_'
    return stypy_return_type_182917

# Assigning a type to the variable 'assert_' (line 55)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 0), 'assert_', assert_)

@norecursion
def gisnan(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'gisnan'
    module_type_store = module_type_store.open_function_context('gisnan', 73, 0, False)
    
    # Passed parameters checking function
    gisnan.stypy_localization = localization
    gisnan.stypy_type_of_self = None
    gisnan.stypy_type_store = module_type_store
    gisnan.stypy_function_name = 'gisnan'
    gisnan.stypy_param_names_list = ['x']
    gisnan.stypy_varargs_param_name = None
    gisnan.stypy_kwargs_param_name = None
    gisnan.stypy_call_defaults = defaults
    gisnan.stypy_call_varargs = varargs
    gisnan.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gisnan', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gisnan', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gisnan(...)' code ##################

    str_182918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 83, (-1)), 'str', 'like isnan, but always raise an error if type not supported instead of\n    returning a TypeError object.\n\n    Notes\n    -----\n    isnan and other ufunc sometimes return a NotImplementedType object instead\n    of raising any exception. This function is a wrapper to make sure an\n    exception is always raised.\n\n    This should be removed once this problem is solved at the Ufunc level.')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 84, 4))
    
    # 'from numpy.core import isnan' statement (line 84)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_182919 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 84, 4), 'numpy.core')

    if (type(import_182919) is not StypyTypeError):

        if (import_182919 != 'pyd_module'):
            __import__(import_182919)
            sys_modules_182920 = sys.modules[import_182919]
            import_from_module(stypy.reporting.localization.Localization(__file__, 84, 4), 'numpy.core', sys_modules_182920.module_type_store, module_type_store, ['isnan'])
            nest_module(stypy.reporting.localization.Localization(__file__, 84, 4), __file__, sys_modules_182920, sys_modules_182920.module_type_store, module_type_store)
        else:
            from numpy.core import isnan

            import_from_module(stypy.reporting.localization.Localization(__file__, 84, 4), 'numpy.core', None, module_type_store, ['isnan'], [isnan])

    else:
        # Assigning a type to the variable 'numpy.core' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'numpy.core', import_182919)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Assigning a Call to a Name (line 85):
    
    # Assigning a Call to a Name (line 85):
    
    # Call to isnan(...): (line 85)
    # Processing the call arguments (line 85)
    # Getting the type of 'x' (line 85)
    x_182922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 15), 'x', False)
    # Processing the call keyword arguments (line 85)
    kwargs_182923 = {}
    # Getting the type of 'isnan' (line 85)
    isnan_182921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 9), 'isnan', False)
    # Calling isnan(args, kwargs) (line 85)
    isnan_call_result_182924 = invoke(stypy.reporting.localization.Localization(__file__, 85, 9), isnan_182921, *[x_182922], **kwargs_182923)
    
    # Assigning a type to the variable 'st' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 4), 'st', isnan_call_result_182924)
    
    # Type idiom detected: calculating its left and rigth part (line 86)
    
    # Call to type(...): (line 86)
    # Processing the call arguments (line 86)
    # Getting the type of 'NotImplemented' (line 86)
    NotImplemented_182926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 27), 'NotImplemented', False)
    # Processing the call keyword arguments (line 86)
    kwargs_182927 = {}
    # Getting the type of 'type' (line 86)
    type_182925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 22), 'type', False)
    # Calling type(args, kwargs) (line 86)
    type_call_result_182928 = invoke(stypy.reporting.localization.Localization(__file__, 86, 22), type_182925, *[NotImplemented_182926], **kwargs_182927)
    
    # Getting the type of 'st' (line 86)
    st_182929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 18), 'st')
    
    (may_be_182930, more_types_in_union_182931) = may_be_subtype(type_call_result_182928, st_182929)

    if may_be_182930:

        if more_types_in_union_182931:
            # Runtime conditional SSA (line 86)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'st' (line 86)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 4), 'st', remove_not_subtype_from_union(st_182929, type(NotImplemented)))
        
        # Call to TypeError(...): (line 87)
        # Processing the call arguments (line 87)
        str_182933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 24), 'str', 'isnan not supported for this type')
        # Processing the call keyword arguments (line 87)
        kwargs_182934 = {}
        # Getting the type of 'TypeError' (line 87)
        TypeError_182932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 14), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 87)
        TypeError_call_result_182935 = invoke(stypy.reporting.localization.Localization(__file__, 87, 14), TypeError_182932, *[str_182933], **kwargs_182934)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 87, 8), TypeError_call_result_182935, 'raise parameter', BaseException)

        if more_types_in_union_182931:
            # SSA join for if statement (line 86)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'st' (line 88)
    st_182936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 11), 'st')
    # Assigning a type to the variable 'stypy_return_type' (line 88)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 4), 'stypy_return_type', st_182936)
    
    # ################# End of 'gisnan(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gisnan' in the type store
    # Getting the type of 'stypy_return_type' (line 73)
    stypy_return_type_182937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_182937)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gisnan'
    return stypy_return_type_182937

# Assigning a type to the variable 'gisnan' (line 73)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 73, 0), 'gisnan', gisnan)

@norecursion
def gisfinite(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'gisfinite'
    module_type_store = module_type_store.open_function_context('gisfinite', 90, 0, False)
    
    # Passed parameters checking function
    gisfinite.stypy_localization = localization
    gisfinite.stypy_type_of_self = None
    gisfinite.stypy_type_store = module_type_store
    gisfinite.stypy_function_name = 'gisfinite'
    gisfinite.stypy_param_names_list = ['x']
    gisfinite.stypy_varargs_param_name = None
    gisfinite.stypy_kwargs_param_name = None
    gisfinite.stypy_call_defaults = defaults
    gisfinite.stypy_call_varargs = varargs
    gisfinite.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gisfinite', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gisfinite', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gisfinite(...)' code ##################

    str_182938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, (-1)), 'str', 'like isfinite, but always raise an error if type not supported instead of\n    returning a TypeError object.\n\n    Notes\n    -----\n    isfinite and other ufunc sometimes return a NotImplementedType object instead\n    of raising any exception. This function is a wrapper to make sure an\n    exception is always raised.\n\n    This should be removed once this problem is solved at the Ufunc level.')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 101, 4))
    
    # 'from numpy.core import isfinite, errstate' statement (line 101)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_182939 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 101, 4), 'numpy.core')

    if (type(import_182939) is not StypyTypeError):

        if (import_182939 != 'pyd_module'):
            __import__(import_182939)
            sys_modules_182940 = sys.modules[import_182939]
            import_from_module(stypy.reporting.localization.Localization(__file__, 101, 4), 'numpy.core', sys_modules_182940.module_type_store, module_type_store, ['isfinite', 'errstate'])
            nest_module(stypy.reporting.localization.Localization(__file__, 101, 4), __file__, sys_modules_182940, sys_modules_182940.module_type_store, module_type_store)
        else:
            from numpy.core import isfinite, errstate

            import_from_module(stypy.reporting.localization.Localization(__file__, 101, 4), 'numpy.core', None, module_type_store, ['isfinite', 'errstate'], [isfinite, errstate])

    else:
        # Assigning a type to the variable 'numpy.core' (line 101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 4), 'numpy.core', import_182939)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Call to errstate(...): (line 102)
    # Processing the call keyword arguments (line 102)
    str_182942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 26), 'str', 'ignore')
    keyword_182943 = str_182942
    kwargs_182944 = {'invalid': keyword_182943}
    # Getting the type of 'errstate' (line 102)
    errstate_182941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 9), 'errstate', False)
    # Calling errstate(args, kwargs) (line 102)
    errstate_call_result_182945 = invoke(stypy.reporting.localization.Localization(__file__, 102, 9), errstate_182941, *[], **kwargs_182944)
    
    with_182946 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 102, 9), errstate_call_result_182945, 'with parameter', '__enter__', '__exit__')

    if with_182946:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 102)
        enter___182947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 9), errstate_call_result_182945, '__enter__')
        with_enter_182948 = invoke(stypy.reporting.localization.Localization(__file__, 102, 9), enter___182947)
        
        # Assigning a Call to a Name (line 103):
        
        # Assigning a Call to a Name (line 103):
        
        # Call to isfinite(...): (line 103)
        # Processing the call arguments (line 103)
        # Getting the type of 'x' (line 103)
        x_182950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 22), 'x', False)
        # Processing the call keyword arguments (line 103)
        kwargs_182951 = {}
        # Getting the type of 'isfinite' (line 103)
        isfinite_182949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 13), 'isfinite', False)
        # Calling isfinite(args, kwargs) (line 103)
        isfinite_call_result_182952 = invoke(stypy.reporting.localization.Localization(__file__, 103, 13), isfinite_182949, *[x_182950], **kwargs_182951)
        
        # Assigning a type to the variable 'st' (line 103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 8), 'st', isfinite_call_result_182952)
        
        # Type idiom detected: calculating its left and rigth part (line 104)
        
        # Call to type(...): (line 104)
        # Processing the call arguments (line 104)
        # Getting the type of 'NotImplemented' (line 104)
        NotImplemented_182954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 31), 'NotImplemented', False)
        # Processing the call keyword arguments (line 104)
        kwargs_182955 = {}
        # Getting the type of 'type' (line 104)
        type_182953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 26), 'type', False)
        # Calling type(args, kwargs) (line 104)
        type_call_result_182956 = invoke(stypy.reporting.localization.Localization(__file__, 104, 26), type_182953, *[NotImplemented_182954], **kwargs_182955)
        
        # Getting the type of 'st' (line 104)
        st_182957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 22), 'st')
        
        (may_be_182958, more_types_in_union_182959) = may_be_subtype(type_call_result_182956, st_182957)

        if may_be_182958:

            if more_types_in_union_182959:
                # Runtime conditional SSA (line 104)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'st' (line 104)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 8), 'st', remove_not_subtype_from_union(st_182957, type(NotImplemented)))
            
            # Call to TypeError(...): (line 105)
            # Processing the call arguments (line 105)
            str_182961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 28), 'str', 'isfinite not supported for this type')
            # Processing the call keyword arguments (line 105)
            kwargs_182962 = {}
            # Getting the type of 'TypeError' (line 105)
            TypeError_182960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 18), 'TypeError', False)
            # Calling TypeError(args, kwargs) (line 105)
            TypeError_call_result_182963 = invoke(stypy.reporting.localization.Localization(__file__, 105, 18), TypeError_182960, *[str_182961], **kwargs_182962)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 105, 12), TypeError_call_result_182963, 'raise parameter', BaseException)

            if more_types_in_union_182959:
                # SSA join for if statement (line 104)
                module_type_store = module_type_store.join_ssa_context()


        
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 102)
        exit___182964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 9), errstate_call_result_182945, '__exit__')
        with_exit_182965 = invoke(stypy.reporting.localization.Localization(__file__, 102, 9), exit___182964, None, None, None)

    # Getting the type of 'st' (line 106)
    st_182966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 11), 'st')
    # Assigning a type to the variable 'stypy_return_type' (line 106)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 106, 4), 'stypy_return_type', st_182966)
    
    # ################# End of 'gisfinite(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gisfinite' in the type store
    # Getting the type of 'stypy_return_type' (line 90)
    stypy_return_type_182967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_182967)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gisfinite'
    return stypy_return_type_182967

# Assigning a type to the variable 'gisfinite' (line 90)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 0), 'gisfinite', gisfinite)

@norecursion
def gisinf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'gisinf'
    module_type_store = module_type_store.open_function_context('gisinf', 108, 0, False)
    
    # Passed parameters checking function
    gisinf.stypy_localization = localization
    gisinf.stypy_type_of_self = None
    gisinf.stypy_type_store = module_type_store
    gisinf.stypy_function_name = 'gisinf'
    gisinf.stypy_param_names_list = ['x']
    gisinf.stypy_varargs_param_name = None
    gisinf.stypy_kwargs_param_name = None
    gisinf.stypy_call_defaults = defaults
    gisinf.stypy_call_varargs = varargs
    gisinf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gisinf', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gisinf', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gisinf(...)' code ##################

    str_182968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, (-1)), 'str', 'like isinf, but always raise an error if type not supported instead of\n    returning a TypeError object.\n\n    Notes\n    -----\n    isinf and other ufunc sometimes return a NotImplementedType object instead\n    of raising any exception. This function is a wrapper to make sure an\n    exception is always raised.\n\n    This should be removed once this problem is solved at the Ufunc level.')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 119, 4))
    
    # 'from numpy.core import isinf, errstate' statement (line 119)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_182969 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 119, 4), 'numpy.core')

    if (type(import_182969) is not StypyTypeError):

        if (import_182969 != 'pyd_module'):
            __import__(import_182969)
            sys_modules_182970 = sys.modules[import_182969]
            import_from_module(stypy.reporting.localization.Localization(__file__, 119, 4), 'numpy.core', sys_modules_182970.module_type_store, module_type_store, ['isinf', 'errstate'])
            nest_module(stypy.reporting.localization.Localization(__file__, 119, 4), __file__, sys_modules_182970, sys_modules_182970.module_type_store, module_type_store)
        else:
            from numpy.core import isinf, errstate

            import_from_module(stypy.reporting.localization.Localization(__file__, 119, 4), 'numpy.core', None, module_type_store, ['isinf', 'errstate'], [isinf, errstate])

    else:
        # Assigning a type to the variable 'numpy.core' (line 119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 4), 'numpy.core', import_182969)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Call to errstate(...): (line 120)
    # Processing the call keyword arguments (line 120)
    str_182972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, 26), 'str', 'ignore')
    keyword_182973 = str_182972
    kwargs_182974 = {'invalid': keyword_182973}
    # Getting the type of 'errstate' (line 120)
    errstate_182971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 9), 'errstate', False)
    # Calling errstate(args, kwargs) (line 120)
    errstate_call_result_182975 = invoke(stypy.reporting.localization.Localization(__file__, 120, 9), errstate_182971, *[], **kwargs_182974)
    
    with_182976 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 120, 9), errstate_call_result_182975, 'with parameter', '__enter__', '__exit__')

    if with_182976:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 120)
        enter___182977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 9), errstate_call_result_182975, '__enter__')
        with_enter_182978 = invoke(stypy.reporting.localization.Localization(__file__, 120, 9), enter___182977)
        
        # Assigning a Call to a Name (line 121):
        
        # Assigning a Call to a Name (line 121):
        
        # Call to isinf(...): (line 121)
        # Processing the call arguments (line 121)
        # Getting the type of 'x' (line 121)
        x_182980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 19), 'x', False)
        # Processing the call keyword arguments (line 121)
        kwargs_182981 = {}
        # Getting the type of 'isinf' (line 121)
        isinf_182979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 13), 'isinf', False)
        # Calling isinf(args, kwargs) (line 121)
        isinf_call_result_182982 = invoke(stypy.reporting.localization.Localization(__file__, 121, 13), isinf_182979, *[x_182980], **kwargs_182981)
        
        # Assigning a type to the variable 'st' (line 121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 8), 'st', isinf_call_result_182982)
        
        # Type idiom detected: calculating its left and rigth part (line 122)
        
        # Call to type(...): (line 122)
        # Processing the call arguments (line 122)
        # Getting the type of 'NotImplemented' (line 122)
        NotImplemented_182984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 31), 'NotImplemented', False)
        # Processing the call keyword arguments (line 122)
        kwargs_182985 = {}
        # Getting the type of 'type' (line 122)
        type_182983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 26), 'type', False)
        # Calling type(args, kwargs) (line 122)
        type_call_result_182986 = invoke(stypy.reporting.localization.Localization(__file__, 122, 26), type_182983, *[NotImplemented_182984], **kwargs_182985)
        
        # Getting the type of 'st' (line 122)
        st_182987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 22), 'st')
        
        (may_be_182988, more_types_in_union_182989) = may_be_subtype(type_call_result_182986, st_182987)

        if may_be_182988:

            if more_types_in_union_182989:
                # Runtime conditional SSA (line 122)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'st' (line 122)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 8), 'st', remove_not_subtype_from_union(st_182987, type(NotImplemented)))
            
            # Call to TypeError(...): (line 123)
            # Processing the call arguments (line 123)
            str_182991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 28), 'str', 'isinf not supported for this type')
            # Processing the call keyword arguments (line 123)
            kwargs_182992 = {}
            # Getting the type of 'TypeError' (line 123)
            TypeError_182990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 18), 'TypeError', False)
            # Calling TypeError(args, kwargs) (line 123)
            TypeError_call_result_182993 = invoke(stypy.reporting.localization.Localization(__file__, 123, 18), TypeError_182990, *[str_182991], **kwargs_182992)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 123, 12), TypeError_call_result_182993, 'raise parameter', BaseException)

            if more_types_in_union_182989:
                # SSA join for if statement (line 122)
                module_type_store = module_type_store.join_ssa_context()


        
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 120)
        exit___182994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 9), errstate_call_result_182975, '__exit__')
        with_exit_182995 = invoke(stypy.reporting.localization.Localization(__file__, 120, 9), exit___182994, None, None, None)

    # Getting the type of 'st' (line 124)
    st_182996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 11), 'st')
    # Assigning a type to the variable 'stypy_return_type' (line 124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 4), 'stypy_return_type', st_182996)
    
    # ################# End of 'gisinf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gisinf' in the type store
    # Getting the type of 'stypy_return_type' (line 108)
    stypy_return_type_182997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_182997)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gisinf'
    return stypy_return_type_182997

# Assigning a type to the variable 'gisinf' (line 108)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 0), 'gisinf', gisinf)

@norecursion
def rand(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rand'
    module_type_store = module_type_store.open_function_context('rand', 126, 0, False)
    
    # Passed parameters checking function
    rand.stypy_localization = localization
    rand.stypy_type_of_self = None
    rand.stypy_type_store = module_type_store
    rand.stypy_function_name = 'rand'
    rand.stypy_param_names_list = []
    rand.stypy_varargs_param_name = 'args'
    rand.stypy_kwargs_param_name = None
    rand.stypy_call_defaults = defaults
    rand.stypy_call_varargs = varargs
    rand.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rand', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rand', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rand(...)' code ##################

    str_182998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, (-1)), 'str', 'Returns an array of random numbers with the given shape.\n\n    This only uses the standard library, so it is useful for testing purposes.\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 133, 4))
    
    # 'import random' statement (line 133)
    import random

    import_module(stypy.reporting.localization.Localization(__file__, 133, 4), 'random', random, module_type_store)
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 134, 4))
    
    # 'from numpy.core import zeros, float64' statement (line 134)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_182999 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 134, 4), 'numpy.core')

    if (type(import_182999) is not StypyTypeError):

        if (import_182999 != 'pyd_module'):
            __import__(import_182999)
            sys_modules_183000 = sys.modules[import_182999]
            import_from_module(stypy.reporting.localization.Localization(__file__, 134, 4), 'numpy.core', sys_modules_183000.module_type_store, module_type_store, ['zeros', 'float64'])
            nest_module(stypy.reporting.localization.Localization(__file__, 134, 4), __file__, sys_modules_183000, sys_modules_183000.module_type_store, module_type_store)
        else:
            from numpy.core import zeros, float64

            import_from_module(stypy.reporting.localization.Localization(__file__, 134, 4), 'numpy.core', None, module_type_store, ['zeros', 'float64'], [zeros, float64])

    else:
        # Assigning a type to the variable 'numpy.core' (line 134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 4), 'numpy.core', import_182999)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Assigning a Call to a Name (line 135):
    
    # Assigning a Call to a Name (line 135):
    
    # Call to zeros(...): (line 135)
    # Processing the call arguments (line 135)
    # Getting the type of 'args' (line 135)
    args_183002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 20), 'args', False)
    # Getting the type of 'float64' (line 135)
    float64_183003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 26), 'float64', False)
    # Processing the call keyword arguments (line 135)
    kwargs_183004 = {}
    # Getting the type of 'zeros' (line 135)
    zeros_183001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 14), 'zeros', False)
    # Calling zeros(args, kwargs) (line 135)
    zeros_call_result_183005 = invoke(stypy.reporting.localization.Localization(__file__, 135, 14), zeros_183001, *[args_183002, float64_183003], **kwargs_183004)
    
    # Assigning a type to the variable 'results' (line 135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 4), 'results', zeros_call_result_183005)
    
    # Assigning a Attribute to a Name (line 136):
    
    # Assigning a Attribute to a Name (line 136):
    # Getting the type of 'results' (line 136)
    results_183006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 8), 'results')
    # Obtaining the member 'flat' of a type (line 136)
    flat_183007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 8), results_183006, 'flat')
    # Assigning a type to the variable 'f' (line 136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 4), 'f', flat_183007)
    
    
    # Call to range(...): (line 137)
    # Processing the call arguments (line 137)
    
    # Call to len(...): (line 137)
    # Processing the call arguments (line 137)
    # Getting the type of 'f' (line 137)
    f_183010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 23), 'f', False)
    # Processing the call keyword arguments (line 137)
    kwargs_183011 = {}
    # Getting the type of 'len' (line 137)
    len_183009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 19), 'len', False)
    # Calling len(args, kwargs) (line 137)
    len_call_result_183012 = invoke(stypy.reporting.localization.Localization(__file__, 137, 19), len_183009, *[f_183010], **kwargs_183011)
    
    # Processing the call keyword arguments (line 137)
    kwargs_183013 = {}
    # Getting the type of 'range' (line 137)
    range_183008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 13), 'range', False)
    # Calling range(args, kwargs) (line 137)
    range_call_result_183014 = invoke(stypy.reporting.localization.Localization(__file__, 137, 13), range_183008, *[len_call_result_183012], **kwargs_183013)
    
    # Testing the type of a for loop iterable (line 137)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 137, 4), range_call_result_183014)
    # Getting the type of the for loop variable (line 137)
    for_loop_var_183015 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 137, 4), range_call_result_183014)
    # Assigning a type to the variable 'i' (line 137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 4), 'i', for_loop_var_183015)
    # SSA begins for a for statement (line 137)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 138):
    
    # Assigning a Call to a Subscript (line 138):
    
    # Call to random(...): (line 138)
    # Processing the call keyword arguments (line 138)
    kwargs_183018 = {}
    # Getting the type of 'random' (line 138)
    random_183016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 15), 'random', False)
    # Obtaining the member 'random' of a type (line 138)
    random_183017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 15), random_183016, 'random')
    # Calling random(args, kwargs) (line 138)
    random_call_result_183019 = invoke(stypy.reporting.localization.Localization(__file__, 138, 15), random_183017, *[], **kwargs_183018)
    
    # Getting the type of 'f' (line 138)
    f_183020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 8), 'f')
    # Getting the type of 'i' (line 138)
    i_183021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 10), 'i')
    # Storing an element on a container (line 138)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 138, 8), f_183020, (i_183021, random_call_result_183019))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'results' (line 139)
    results_183022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 11), 'results')
    # Assigning a type to the variable 'stypy_return_type' (line 139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 4), 'stypy_return_type', results_183022)
    
    # ################# End of 'rand(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rand' in the type store
    # Getting the type of 'stypy_return_type' (line 126)
    stypy_return_type_183023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183023)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rand'
    return stypy_return_type_183023

# Assigning a type to the variable 'rand' (line 126)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 0), 'rand', rand)


# Getting the type of 'os' (line 141)
os_183024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 3), 'os')
# Obtaining the member 'name' of a type (line 141)
name_183025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 3), os_183024, 'name')
str_183026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 14), 'str', 'nt')
# Applying the binary operator '==' (line 141)
result_eq_183027 = python_operator(stypy.reporting.localization.Localization(__file__, 141, 3), '==', name_183025, str_183026)

# Testing the type of an if condition (line 141)
if_condition_183028 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 141, 0), result_eq_183027)
# Assigning a type to the variable 'if_condition_183028' (line 141)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 0), 'if_condition_183028', if_condition_183028)
# SSA begins for if statement (line 141)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def GetPerformanceAttributes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 143)
    None_183029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 59), 'None')
    int_183030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 38), 'int')
    # Getting the type of 'None' (line 144)
    None_183031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 49), 'None')
    # Getting the type of 'None' (line 144)
    None_183032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 63), 'None')
    defaults = [None_183029, int_183030, None_183031, None_183032]
    # Create a new context for function 'GetPerformanceAttributes'
    module_type_store = module_type_store.open_function_context('GetPerformanceAttributes', 143, 4, False)
    
    # Passed parameters checking function
    GetPerformanceAttributes.stypy_localization = localization
    GetPerformanceAttributes.stypy_type_of_self = None
    GetPerformanceAttributes.stypy_type_store = module_type_store
    GetPerformanceAttributes.stypy_function_name = 'GetPerformanceAttributes'
    GetPerformanceAttributes.stypy_param_names_list = ['object', 'counter', 'instance', 'inum', 'format', 'machine']
    GetPerformanceAttributes.stypy_varargs_param_name = None
    GetPerformanceAttributes.stypy_kwargs_param_name = None
    GetPerformanceAttributes.stypy_call_defaults = defaults
    GetPerformanceAttributes.stypy_call_varargs = varargs
    GetPerformanceAttributes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'GetPerformanceAttributes', ['object', 'counter', 'instance', 'inum', 'format', 'machine'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'GetPerformanceAttributes', localization, ['object', 'counter', 'instance', 'inum', 'format', 'machine'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'GetPerformanceAttributes(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 153, 8))
    
    # 'import win32pdh' statement (line 153)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_183033 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 153, 8), 'win32pdh')

    if (type(import_183033) is not StypyTypeError):

        if (import_183033 != 'pyd_module'):
            __import__(import_183033)
            sys_modules_183034 = sys.modules[import_183033]
            import_module(stypy.reporting.localization.Localization(__file__, 153, 8), 'win32pdh', sys_modules_183034.module_type_store, module_type_store)
        else:
            import win32pdh

            import_module(stypy.reporting.localization.Localization(__file__, 153, 8), 'win32pdh', win32pdh, module_type_store)

    else:
        # Assigning a type to the variable 'win32pdh' (line 153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 8), 'win32pdh', import_183033)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Type idiom detected: calculating its left and rigth part (line 154)
    # Getting the type of 'format' (line 154)
    format_183035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 11), 'format')
    # Getting the type of 'None' (line 154)
    None_183036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 21), 'None')
    
    (may_be_183037, more_types_in_union_183038) = may_be_none(format_183035, None_183036)

    if may_be_183037:

        if more_types_in_union_183038:
            # Runtime conditional SSA (line 154)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 155):
        
        # Assigning a Attribute to a Name (line 155):
        # Getting the type of 'win32pdh' (line 155)
        win32pdh_183039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 21), 'win32pdh')
        # Obtaining the member 'PDH_FMT_LONG' of a type (line 155)
        PDH_FMT_LONG_183040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 21), win32pdh_183039, 'PDH_FMT_LONG')
        # Assigning a type to the variable 'format' (line 155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 12), 'format', PDH_FMT_LONG_183040)

        if more_types_in_union_183038:
            # SSA join for if statement (line 154)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 156):
    
    # Assigning a Call to a Name (line 156):
    
    # Call to MakeCounterPath(...): (line 156)
    # Processing the call arguments (line 156)
    
    # Obtaining an instance of the builtin type 'tuple' (line 156)
    tuple_183043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 156)
    # Adding element type (line 156)
    # Getting the type of 'machine' (line 156)
    machine_183044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 42), 'machine', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 156, 42), tuple_183043, machine_183044)
    # Adding element type (line 156)
    # Getting the type of 'object' (line 156)
    object_183045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 51), 'object', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 156, 42), tuple_183043, object_183045)
    # Adding element type (line 156)
    # Getting the type of 'instance' (line 156)
    instance_183046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 59), 'instance', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 156, 42), tuple_183043, instance_183046)
    # Adding element type (line 156)
    # Getting the type of 'None' (line 156)
    None_183047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 69), 'None', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 156, 42), tuple_183043, None_183047)
    # Adding element type (line 156)
    # Getting the type of 'inum' (line 156)
    inum_183048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 75), 'inum', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 156, 42), tuple_183043, inum_183048)
    # Adding element type (line 156)
    # Getting the type of 'counter' (line 156)
    counter_183049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 81), 'counter', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 156, 42), tuple_183043, counter_183049)
    
    # Processing the call keyword arguments (line 156)
    kwargs_183050 = {}
    # Getting the type of 'win32pdh' (line 156)
    win32pdh_183041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 15), 'win32pdh', False)
    # Obtaining the member 'MakeCounterPath' of a type (line 156)
    MakeCounterPath_183042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 15), win32pdh_183041, 'MakeCounterPath')
    # Calling MakeCounterPath(args, kwargs) (line 156)
    MakeCounterPath_call_result_183051 = invoke(stypy.reporting.localization.Localization(__file__, 156, 15), MakeCounterPath_183042, *[tuple_183043], **kwargs_183050)
    
    # Assigning a type to the variable 'path' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 8), 'path', MakeCounterPath_call_result_183051)
    
    # Assigning a Call to a Name (line 157):
    
    # Assigning a Call to a Name (line 157):
    
    # Call to OpenQuery(...): (line 157)
    # Processing the call keyword arguments (line 157)
    kwargs_183054 = {}
    # Getting the type of 'win32pdh' (line 157)
    win32pdh_183052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 13), 'win32pdh', False)
    # Obtaining the member 'OpenQuery' of a type (line 157)
    OpenQuery_183053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 13), win32pdh_183052, 'OpenQuery')
    # Calling OpenQuery(args, kwargs) (line 157)
    OpenQuery_call_result_183055 = invoke(stypy.reporting.localization.Localization(__file__, 157, 13), OpenQuery_183053, *[], **kwargs_183054)
    
    # Assigning a type to the variable 'hq' (line 157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 8), 'hq', OpenQuery_call_result_183055)
    
    # Try-finally block (line 158)
    
    # Assigning a Call to a Name (line 159):
    
    # Assigning a Call to a Name (line 159):
    
    # Call to AddCounter(...): (line 159)
    # Processing the call arguments (line 159)
    # Getting the type of 'hq' (line 159)
    hq_183058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 37), 'hq', False)
    # Getting the type of 'path' (line 159)
    path_183059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 41), 'path', False)
    # Processing the call keyword arguments (line 159)
    kwargs_183060 = {}
    # Getting the type of 'win32pdh' (line 159)
    win32pdh_183056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 17), 'win32pdh', False)
    # Obtaining the member 'AddCounter' of a type (line 159)
    AddCounter_183057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 17), win32pdh_183056, 'AddCounter')
    # Calling AddCounter(args, kwargs) (line 159)
    AddCounter_call_result_183061 = invoke(stypy.reporting.localization.Localization(__file__, 159, 17), AddCounter_183057, *[hq_183058, path_183059], **kwargs_183060)
    
    # Assigning a type to the variable 'hc' (line 159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 12), 'hc', AddCounter_call_result_183061)
    
    # Try-finally block (line 160)
    
    # Call to CollectQueryData(...): (line 161)
    # Processing the call arguments (line 161)
    # Getting the type of 'hq' (line 161)
    hq_183064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 42), 'hq', False)
    # Processing the call keyword arguments (line 161)
    kwargs_183065 = {}
    # Getting the type of 'win32pdh' (line 161)
    win32pdh_183062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 16), 'win32pdh', False)
    # Obtaining the member 'CollectQueryData' of a type (line 161)
    CollectQueryData_183063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 16), win32pdh_183062, 'CollectQueryData')
    # Calling CollectQueryData(args, kwargs) (line 161)
    CollectQueryData_call_result_183066 = invoke(stypy.reporting.localization.Localization(__file__, 161, 16), CollectQueryData_183063, *[hq_183064], **kwargs_183065)
    
    
    # Assigning a Call to a Tuple (line 162):
    
    # Assigning a Call to a Name:
    
    # Call to GetFormattedCounterValue(...): (line 162)
    # Processing the call arguments (line 162)
    # Getting the type of 'hc' (line 162)
    hc_183069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 62), 'hc', False)
    # Getting the type of 'format' (line 162)
    format_183070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 66), 'format', False)
    # Processing the call keyword arguments (line 162)
    kwargs_183071 = {}
    # Getting the type of 'win32pdh' (line 162)
    win32pdh_183067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 28), 'win32pdh', False)
    # Obtaining the member 'GetFormattedCounterValue' of a type (line 162)
    GetFormattedCounterValue_183068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 28), win32pdh_183067, 'GetFormattedCounterValue')
    # Calling GetFormattedCounterValue(args, kwargs) (line 162)
    GetFormattedCounterValue_call_result_183072 = invoke(stypy.reporting.localization.Localization(__file__, 162, 28), GetFormattedCounterValue_183068, *[hc_183069, format_183070], **kwargs_183071)
    
    # Assigning a type to the variable 'call_assignment_182823' (line 162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 16), 'call_assignment_182823', GetFormattedCounterValue_call_result_183072)
    
    # Assigning a Call to a Name (line 162):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_183075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 16), 'int')
    # Processing the call keyword arguments
    kwargs_183076 = {}
    # Getting the type of 'call_assignment_182823' (line 162)
    call_assignment_182823_183073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 16), 'call_assignment_182823', False)
    # Obtaining the member '__getitem__' of a type (line 162)
    getitem___183074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 16), call_assignment_182823_183073, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_183077 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___183074, *[int_183075], **kwargs_183076)
    
    # Assigning a type to the variable 'call_assignment_182824' (line 162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 16), 'call_assignment_182824', getitem___call_result_183077)
    
    # Assigning a Name to a Name (line 162):
    # Getting the type of 'call_assignment_182824' (line 162)
    call_assignment_182824_183078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 16), 'call_assignment_182824')
    # Assigning a type to the variable 'type' (line 162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 16), 'type', call_assignment_182824_183078)
    
    # Assigning a Call to a Name (line 162):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_183081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 16), 'int')
    # Processing the call keyword arguments
    kwargs_183082 = {}
    # Getting the type of 'call_assignment_182823' (line 162)
    call_assignment_182823_183079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 16), 'call_assignment_182823', False)
    # Obtaining the member '__getitem__' of a type (line 162)
    getitem___183080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 16), call_assignment_182823_183079, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_183083 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___183080, *[int_183081], **kwargs_183082)
    
    # Assigning a type to the variable 'call_assignment_182825' (line 162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 16), 'call_assignment_182825', getitem___call_result_183083)
    
    # Assigning a Name to a Name (line 162):
    # Getting the type of 'call_assignment_182825' (line 162)
    call_assignment_182825_183084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 16), 'call_assignment_182825')
    # Assigning a type to the variable 'val' (line 162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 22), 'val', call_assignment_182825_183084)
    # Getting the type of 'val' (line 163)
    val_183085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 23), 'val')
    # Assigning a type to the variable 'stypy_return_type' (line 163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 16), 'stypy_return_type', val_183085)
    
    # finally branch of the try-finally block (line 160)
    
    # Call to RemoveCounter(...): (line 165)
    # Processing the call arguments (line 165)
    # Getting the type of 'hc' (line 165)
    hc_183088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 39), 'hc', False)
    # Processing the call keyword arguments (line 165)
    kwargs_183089 = {}
    # Getting the type of 'win32pdh' (line 165)
    win32pdh_183086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 16), 'win32pdh', False)
    # Obtaining the member 'RemoveCounter' of a type (line 165)
    RemoveCounter_183087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 16), win32pdh_183086, 'RemoveCounter')
    # Calling RemoveCounter(args, kwargs) (line 165)
    RemoveCounter_call_result_183090 = invoke(stypy.reporting.localization.Localization(__file__, 165, 16), RemoveCounter_183087, *[hc_183088], **kwargs_183089)
    
    
    
    # finally branch of the try-finally block (line 158)
    
    # Call to CloseQuery(...): (line 167)
    # Processing the call arguments (line 167)
    # Getting the type of 'hq' (line 167)
    hq_183093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 32), 'hq', False)
    # Processing the call keyword arguments (line 167)
    kwargs_183094 = {}
    # Getting the type of 'win32pdh' (line 167)
    win32pdh_183091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'win32pdh', False)
    # Obtaining the member 'CloseQuery' of a type (line 167)
    CloseQuery_183092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 12), win32pdh_183091, 'CloseQuery')
    # Calling CloseQuery(args, kwargs) (line 167)
    CloseQuery_call_result_183095 = invoke(stypy.reporting.localization.Localization(__file__, 167, 12), CloseQuery_183092, *[hq_183093], **kwargs_183094)
    
    
    
    # ################# End of 'GetPerformanceAttributes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'GetPerformanceAttributes' in the type store
    # Getting the type of 'stypy_return_type' (line 143)
    stypy_return_type_183096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 4), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183096)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'GetPerformanceAttributes'
    return stypy_return_type_183096

# Assigning a type to the variable 'GetPerformanceAttributes' (line 143)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 4), 'GetPerformanceAttributes', GetPerformanceAttributes)

@norecursion
def memusage(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_183097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 29), 'str', 'python')
    int_183098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 48), 'int')
    defaults = [str_183097, int_183098]
    # Create a new context for function 'memusage'
    module_type_store = module_type_store.open_function_context('memusage', 169, 4, False)
    
    # Passed parameters checking function
    memusage.stypy_localization = localization
    memusage.stypy_type_of_self = None
    memusage.stypy_type_store = module_type_store
    memusage.stypy_function_name = 'memusage'
    memusage.stypy_param_names_list = ['processName', 'instance']
    memusage.stypy_varargs_param_name = None
    memusage.stypy_kwargs_param_name = None
    memusage.stypy_call_defaults = defaults
    memusage.stypy_call_varargs = varargs
    memusage.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'memusage', ['processName', 'instance'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'memusage', localization, ['processName', 'instance'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'memusage(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 171, 8))
    
    # 'import win32pdh' statement (line 171)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_183099 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 171, 8), 'win32pdh')

    if (type(import_183099) is not StypyTypeError):

        if (import_183099 != 'pyd_module'):
            __import__(import_183099)
            sys_modules_183100 = sys.modules[import_183099]
            import_module(stypy.reporting.localization.Localization(__file__, 171, 8), 'win32pdh', sys_modules_183100.module_type_store, module_type_store)
        else:
            import win32pdh

            import_module(stypy.reporting.localization.Localization(__file__, 171, 8), 'win32pdh', win32pdh, module_type_store)

    else:
        # Assigning a type to the variable 'win32pdh' (line 171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 8), 'win32pdh', import_183099)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Call to GetPerformanceAttributes(...): (line 172)
    # Processing the call arguments (line 172)
    str_183102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 40), 'str', 'Process')
    str_183103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 51), 'str', 'Virtual Bytes')
    # Getting the type of 'processName' (line 173)
    processName_183104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 40), 'processName', False)
    # Getting the type of 'instance' (line 173)
    instance_183105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 53), 'instance', False)
    # Getting the type of 'win32pdh' (line 174)
    win32pdh_183106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 40), 'win32pdh', False)
    # Obtaining the member 'PDH_FMT_LONG' of a type (line 174)
    PDH_FMT_LONG_183107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 40), win32pdh_183106, 'PDH_FMT_LONG')
    # Getting the type of 'None' (line 174)
    None_183108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 63), 'None', False)
    # Processing the call keyword arguments (line 172)
    kwargs_183109 = {}
    # Getting the type of 'GetPerformanceAttributes' (line 172)
    GetPerformanceAttributes_183101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 15), 'GetPerformanceAttributes', False)
    # Calling GetPerformanceAttributes(args, kwargs) (line 172)
    GetPerformanceAttributes_call_result_183110 = invoke(stypy.reporting.localization.Localization(__file__, 172, 15), GetPerformanceAttributes_183101, *[str_183102, str_183103, processName_183104, instance_183105, PDH_FMT_LONG_183107, None_183108], **kwargs_183109)
    
    # Assigning a type to the variable 'stypy_return_type' (line 172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'stypy_return_type', GetPerformanceAttributes_call_result_183110)
    
    # ################# End of 'memusage(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'memusage' in the type store
    # Getting the type of 'stypy_return_type' (line 169)
    stypy_return_type_183111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183111)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'memusage'
    return stypy_return_type_183111

# Assigning a type to the variable 'memusage' (line 169)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'memusage', memusage)
# SSA branch for the else part of an if statement (line 141)
module_type_store.open_ssa_branch('else')



# Obtaining the type of the subscript
int_183112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 19), 'int')
slice_183113 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 175, 5), None, int_183112, None)
# Getting the type of 'sys' (line 175)
sys_183114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 5), 'sys')
# Obtaining the member 'platform' of a type (line 175)
platform_183115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 5), sys_183114, 'platform')
# Obtaining the member '__getitem__' of a type (line 175)
getitem___183116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 5), platform_183115, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 175)
subscript_call_result_183117 = invoke(stypy.reporting.localization.Localization(__file__, 175, 5), getitem___183116, slice_183113)

str_183118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 25), 'str', 'linux')
# Applying the binary operator '==' (line 175)
result_eq_183119 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 5), '==', subscript_call_result_183117, str_183118)

# Testing the type of an if condition (line 175)
if_condition_183120 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 175, 5), result_eq_183119)
# Assigning a type to the variable 'if_condition_183120' (line 175)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 5), 'if_condition_183120', if_condition_183120)
# SSA begins for if statement (line 175)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def memusage(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_183121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 177, 32), 'str', '/proc/%s/stat')
    
    # Call to getpid(...): (line 177)
    # Processing the call keyword arguments (line 177)
    kwargs_183124 = {}
    # Getting the type of 'os' (line 177)
    os_183122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 51), 'os', False)
    # Obtaining the member 'getpid' of a type (line 177)
    getpid_183123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 177, 51), os_183122, 'getpid')
    # Calling getpid(args, kwargs) (line 177)
    getpid_call_result_183125 = invoke(stypy.reporting.localization.Localization(__file__, 177, 51), getpid_183123, *[], **kwargs_183124)
    
    # Applying the binary operator '%' (line 177)
    result_mod_183126 = python_operator(stypy.reporting.localization.Localization(__file__, 177, 32), '%', str_183121, getpid_call_result_183125)
    
    defaults = [result_mod_183126]
    # Create a new context for function 'memusage'
    module_type_store = module_type_store.open_function_context('memusage', 177, 4, False)
    
    # Passed parameters checking function
    memusage.stypy_localization = localization
    memusage.stypy_type_of_self = None
    memusage.stypy_type_store = module_type_store
    memusage.stypy_function_name = 'memusage'
    memusage.stypy_param_names_list = ['_proc_pid_stat']
    memusage.stypy_varargs_param_name = None
    memusage.stypy_kwargs_param_name = None
    memusage.stypy_call_defaults = defaults
    memusage.stypy_call_varargs = varargs
    memusage.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'memusage', ['_proc_pid_stat'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'memusage', localization, ['_proc_pid_stat'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'memusage(...)' code ##################

    str_183127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, (-1)), 'str', '\n        Return virtual memory size in bytes of the running python.\n\n        ')
    
    
    # SSA begins for try-except statement (line 182)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 183):
    
    # Assigning a Call to a Name (line 183):
    
    # Call to open(...): (line 183)
    # Processing the call arguments (line 183)
    # Getting the type of '_proc_pid_stat' (line 183)
    _proc_pid_stat_183129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 21), '_proc_pid_stat', False)
    str_183130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 37), 'str', 'r')
    # Processing the call keyword arguments (line 183)
    kwargs_183131 = {}
    # Getting the type of 'open' (line 183)
    open_183128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 16), 'open', False)
    # Calling open(args, kwargs) (line 183)
    open_call_result_183132 = invoke(stypy.reporting.localization.Localization(__file__, 183, 16), open_183128, *[_proc_pid_stat_183129, str_183130], **kwargs_183131)
    
    # Assigning a type to the variable 'f' (line 183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 12), 'f', open_call_result_183132)
    
    # Assigning a Call to a Name (line 184):
    
    # Assigning a Call to a Name (line 184):
    
    # Call to split(...): (line 184)
    # Processing the call arguments (line 184)
    str_183138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 35), 'str', ' ')
    # Processing the call keyword arguments (line 184)
    kwargs_183139 = {}
    
    # Call to readline(...): (line 184)
    # Processing the call keyword arguments (line 184)
    kwargs_183135 = {}
    # Getting the type of 'f' (line 184)
    f_183133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 16), 'f', False)
    # Obtaining the member 'readline' of a type (line 184)
    readline_183134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 16), f_183133, 'readline')
    # Calling readline(args, kwargs) (line 184)
    readline_call_result_183136 = invoke(stypy.reporting.localization.Localization(__file__, 184, 16), readline_183134, *[], **kwargs_183135)
    
    # Obtaining the member 'split' of a type (line 184)
    split_183137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 16), readline_call_result_183136, 'split')
    # Calling split(args, kwargs) (line 184)
    split_call_result_183140 = invoke(stypy.reporting.localization.Localization(__file__, 184, 16), split_183137, *[str_183138], **kwargs_183139)
    
    # Assigning a type to the variable 'l' (line 184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 12), 'l', split_call_result_183140)
    
    # Call to close(...): (line 185)
    # Processing the call keyword arguments (line 185)
    kwargs_183143 = {}
    # Getting the type of 'f' (line 185)
    f_183141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 12), 'f', False)
    # Obtaining the member 'close' of a type (line 185)
    close_183142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 12), f_183141, 'close')
    # Calling close(args, kwargs) (line 185)
    close_call_result_183144 = invoke(stypy.reporting.localization.Localization(__file__, 185, 12), close_183142, *[], **kwargs_183143)
    
    
    # Call to int(...): (line 186)
    # Processing the call arguments (line 186)
    
    # Obtaining the type of the subscript
    int_183146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 25), 'int')
    # Getting the type of 'l' (line 186)
    l_183147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 23), 'l', False)
    # Obtaining the member '__getitem__' of a type (line 186)
    getitem___183148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 23), l_183147, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 186)
    subscript_call_result_183149 = invoke(stypy.reporting.localization.Localization(__file__, 186, 23), getitem___183148, int_183146)
    
    # Processing the call keyword arguments (line 186)
    kwargs_183150 = {}
    # Getting the type of 'int' (line 186)
    int_183145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 19), 'int', False)
    # Calling int(args, kwargs) (line 186)
    int_call_result_183151 = invoke(stypy.reporting.localization.Localization(__file__, 186, 19), int_183145, *[subscript_call_result_183149], **kwargs_183150)
    
    # Assigning a type to the variable 'stypy_return_type' (line 186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 12), 'stypy_return_type', int_call_result_183151)
    # SSA branch for the except part of a try statement (line 182)
    # SSA branch for the except '<any exception>' branch of a try statement (line 182)
    module_type_store.open_ssa_branch('except')
    # Assigning a type to the variable 'stypy_return_type' (line 188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 12), 'stypy_return_type', types.NoneType)
    # SSA join for try-except statement (line 182)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'memusage(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'memusage' in the type store
    # Getting the type of 'stypy_return_type' (line 177)
    stypy_return_type_183152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 4), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183152)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'memusage'
    return stypy_return_type_183152

# Assigning a type to the variable 'memusage' (line 177)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 4), 'memusage', memusage)
# SSA branch for the else part of an if statement (line 175)
module_type_store.open_ssa_branch('else')

@norecursion
def memusage(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'memusage'
    module_type_store = module_type_store.open_function_context('memusage', 190, 4, False)
    
    # Passed parameters checking function
    memusage.stypy_localization = localization
    memusage.stypy_type_of_self = None
    memusage.stypy_type_store = module_type_store
    memusage.stypy_function_name = 'memusage'
    memusage.stypy_param_names_list = []
    memusage.stypy_varargs_param_name = None
    memusage.stypy_kwargs_param_name = None
    memusage.stypy_call_defaults = defaults
    memusage.stypy_call_varargs = varargs
    memusage.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'memusage', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'memusage', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'memusage(...)' code ##################

    str_183153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, (-1)), 'str', '\n        Return memory usage of running python. [Not implemented]\n\n        ')
    # Getting the type of 'NotImplementedError' (line 195)
    NotImplementedError_183154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 14), 'NotImplementedError')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 195, 8), NotImplementedError_183154, 'raise parameter', BaseException)
    
    # ################# End of 'memusage(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'memusage' in the type store
    # Getting the type of 'stypy_return_type' (line 190)
    stypy_return_type_183155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183155)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'memusage'
    return stypy_return_type_183155

# Assigning a type to the variable 'memusage' (line 190)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'memusage', memusage)
# SSA join for if statement (line 175)
module_type_store = module_type_store.join_ssa_context()

# SSA join for if statement (line 141)
module_type_store = module_type_store.join_ssa_context()




# Obtaining the type of the subscript
int_183156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 17), 'int')
slice_183157 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 198, 3), None, int_183156, None)
# Getting the type of 'sys' (line 198)
sys_183158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 3), 'sys')
# Obtaining the member 'platform' of a type (line 198)
platform_183159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 3), sys_183158, 'platform')
# Obtaining the member '__getitem__' of a type (line 198)
getitem___183160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 3), platform_183159, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 198)
subscript_call_result_183161 = invoke(stypy.reporting.localization.Localization(__file__, 198, 3), getitem___183160, slice_183157)

str_183162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 23), 'str', 'linux')
# Applying the binary operator '==' (line 198)
result_eq_183163 = python_operator(stypy.reporting.localization.Localization(__file__, 198, 3), '==', subscript_call_result_183161, str_183162)

# Testing the type of an if condition (line 198)
if_condition_183164 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 198, 0), result_eq_183163)
# Assigning a type to the variable 'if_condition_183164' (line 198)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 0), 'if_condition_183164', if_condition_183164)
# SSA begins for if statement (line 198)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def jiffies(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_183165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, 31), 'str', '/proc/%s/stat')
    
    # Call to getpid(...): (line 199)
    # Processing the call keyword arguments (line 199)
    kwargs_183168 = {}
    # Getting the type of 'os' (line 199)
    os_183166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 50), 'os', False)
    # Obtaining the member 'getpid' of a type (line 199)
    getpid_183167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 50), os_183166, 'getpid')
    # Calling getpid(args, kwargs) (line 199)
    getpid_call_result_183169 = invoke(stypy.reporting.localization.Localization(__file__, 199, 50), getpid_183167, *[], **kwargs_183168)
    
    # Applying the binary operator '%' (line 199)
    result_mod_183170 = python_operator(stypy.reporting.localization.Localization(__file__, 199, 31), '%', str_183165, getpid_call_result_183169)
    
    
    # Obtaining an instance of the builtin type 'list' (line 200)
    list_183171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 200)
    
    defaults = [result_mod_183170, list_183171]
    # Create a new context for function 'jiffies'
    module_type_store = module_type_store.open_function_context('jiffies', 199, 4, False)
    
    # Passed parameters checking function
    jiffies.stypy_localization = localization
    jiffies.stypy_type_of_self = None
    jiffies.stypy_type_store = module_type_store
    jiffies.stypy_function_name = 'jiffies'
    jiffies.stypy_param_names_list = ['_proc_pid_stat', '_load_time']
    jiffies.stypy_varargs_param_name = None
    jiffies.stypy_kwargs_param_name = None
    jiffies.stypy_call_defaults = defaults
    jiffies.stypy_call_varargs = varargs
    jiffies.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'jiffies', ['_proc_pid_stat', '_load_time'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'jiffies', localization, ['_proc_pid_stat', '_load_time'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'jiffies(...)' code ##################

    str_183172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, (-1)), 'str', '\n        Return number of jiffies elapsed.\n\n        Return number of jiffies (1/100ths of a second) that this\n        process has been scheduled in user mode. See man 5 proc.\n\n        ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 208, 8))
    
    # 'import time' statement (line 208)
    import time

    import_module(stypy.reporting.localization.Localization(__file__, 208, 8), 'time', time, module_type_store)
    
    
    
    # Getting the type of '_load_time' (line 209)
    _load_time_183173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 15), '_load_time')
    # Applying the 'not' unary operator (line 209)
    result_not__183174 = python_operator(stypy.reporting.localization.Localization(__file__, 209, 11), 'not', _load_time_183173)
    
    # Testing the type of an if condition (line 209)
    if_condition_183175 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 209, 8), result_not__183174)
    # Assigning a type to the variable 'if_condition_183175' (line 209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 8), 'if_condition_183175', if_condition_183175)
    # SSA begins for if statement (line 209)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 210)
    # Processing the call arguments (line 210)
    
    # Call to time(...): (line 210)
    # Processing the call keyword arguments (line 210)
    kwargs_183180 = {}
    # Getting the type of 'time' (line 210)
    time_183178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 30), 'time', False)
    # Obtaining the member 'time' of a type (line 210)
    time_183179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 30), time_183178, 'time')
    # Calling time(args, kwargs) (line 210)
    time_call_result_183181 = invoke(stypy.reporting.localization.Localization(__file__, 210, 30), time_183179, *[], **kwargs_183180)
    
    # Processing the call keyword arguments (line 210)
    kwargs_183182 = {}
    # Getting the type of '_load_time' (line 210)
    _load_time_183176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 12), '_load_time', False)
    # Obtaining the member 'append' of a type (line 210)
    append_183177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 12), _load_time_183176, 'append')
    # Calling append(args, kwargs) (line 210)
    append_call_result_183183 = invoke(stypy.reporting.localization.Localization(__file__, 210, 12), append_183177, *[time_call_result_183181], **kwargs_183182)
    
    # SSA join for if statement (line 209)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 211)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 212):
    
    # Assigning a Call to a Name (line 212):
    
    # Call to open(...): (line 212)
    # Processing the call arguments (line 212)
    # Getting the type of '_proc_pid_stat' (line 212)
    _proc_pid_stat_183185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 21), '_proc_pid_stat', False)
    str_183186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 37), 'str', 'r')
    # Processing the call keyword arguments (line 212)
    kwargs_183187 = {}
    # Getting the type of 'open' (line 212)
    open_183184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 16), 'open', False)
    # Calling open(args, kwargs) (line 212)
    open_call_result_183188 = invoke(stypy.reporting.localization.Localization(__file__, 212, 16), open_183184, *[_proc_pid_stat_183185, str_183186], **kwargs_183187)
    
    # Assigning a type to the variable 'f' (line 212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 12), 'f', open_call_result_183188)
    
    # Assigning a Call to a Name (line 213):
    
    # Assigning a Call to a Name (line 213):
    
    # Call to split(...): (line 213)
    # Processing the call arguments (line 213)
    str_183194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 35), 'str', ' ')
    # Processing the call keyword arguments (line 213)
    kwargs_183195 = {}
    
    # Call to readline(...): (line 213)
    # Processing the call keyword arguments (line 213)
    kwargs_183191 = {}
    # Getting the type of 'f' (line 213)
    f_183189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 16), 'f', False)
    # Obtaining the member 'readline' of a type (line 213)
    readline_183190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 16), f_183189, 'readline')
    # Calling readline(args, kwargs) (line 213)
    readline_call_result_183192 = invoke(stypy.reporting.localization.Localization(__file__, 213, 16), readline_183190, *[], **kwargs_183191)
    
    # Obtaining the member 'split' of a type (line 213)
    split_183193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 16), readline_call_result_183192, 'split')
    # Calling split(args, kwargs) (line 213)
    split_call_result_183196 = invoke(stypy.reporting.localization.Localization(__file__, 213, 16), split_183193, *[str_183194], **kwargs_183195)
    
    # Assigning a type to the variable 'l' (line 213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 12), 'l', split_call_result_183196)
    
    # Call to close(...): (line 214)
    # Processing the call keyword arguments (line 214)
    kwargs_183199 = {}
    # Getting the type of 'f' (line 214)
    f_183197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'f', False)
    # Obtaining the member 'close' of a type (line 214)
    close_183198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 12), f_183197, 'close')
    # Calling close(args, kwargs) (line 214)
    close_call_result_183200 = invoke(stypy.reporting.localization.Localization(__file__, 214, 12), close_183198, *[], **kwargs_183199)
    
    
    # Call to int(...): (line 215)
    # Processing the call arguments (line 215)
    
    # Obtaining the type of the subscript
    int_183202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 25), 'int')
    # Getting the type of 'l' (line 215)
    l_183203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 23), 'l', False)
    # Obtaining the member '__getitem__' of a type (line 215)
    getitem___183204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 23), l_183203, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 215)
    subscript_call_result_183205 = invoke(stypy.reporting.localization.Localization(__file__, 215, 23), getitem___183204, int_183202)
    
    # Processing the call keyword arguments (line 215)
    kwargs_183206 = {}
    # Getting the type of 'int' (line 215)
    int_183201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 19), 'int', False)
    # Calling int(args, kwargs) (line 215)
    int_call_result_183207 = invoke(stypy.reporting.localization.Localization(__file__, 215, 19), int_183201, *[subscript_call_result_183205], **kwargs_183206)
    
    # Assigning a type to the variable 'stypy_return_type' (line 215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 12), 'stypy_return_type', int_call_result_183207)
    # SSA branch for the except part of a try statement (line 211)
    # SSA branch for the except '<any exception>' branch of a try statement (line 211)
    module_type_store.open_ssa_branch('except')
    
    # Call to int(...): (line 217)
    # Processing the call arguments (line 217)
    int_183209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 23), 'int')
    
    # Call to time(...): (line 217)
    # Processing the call keyword arguments (line 217)
    kwargs_183212 = {}
    # Getting the type of 'time' (line 217)
    time_183210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 28), 'time', False)
    # Obtaining the member 'time' of a type (line 217)
    time_183211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 28), time_183210, 'time')
    # Calling time(args, kwargs) (line 217)
    time_call_result_183213 = invoke(stypy.reporting.localization.Localization(__file__, 217, 28), time_183211, *[], **kwargs_183212)
    
    
    # Obtaining the type of the subscript
    int_183214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 51), 'int')
    # Getting the type of '_load_time' (line 217)
    _load_time_183215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 40), '_load_time', False)
    # Obtaining the member '__getitem__' of a type (line 217)
    getitem___183216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 40), _load_time_183215, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 217)
    subscript_call_result_183217 = invoke(stypy.reporting.localization.Localization(__file__, 217, 40), getitem___183216, int_183214)
    
    # Applying the binary operator '-' (line 217)
    result_sub_183218 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 28), '-', time_call_result_183213, subscript_call_result_183217)
    
    # Applying the binary operator '*' (line 217)
    result_mul_183219 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 23), '*', int_183209, result_sub_183218)
    
    # Processing the call keyword arguments (line 217)
    kwargs_183220 = {}
    # Getting the type of 'int' (line 217)
    int_183208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 19), 'int', False)
    # Calling int(args, kwargs) (line 217)
    int_call_result_183221 = invoke(stypy.reporting.localization.Localization(__file__, 217, 19), int_183208, *[result_mul_183219], **kwargs_183220)
    
    # Assigning a type to the variable 'stypy_return_type' (line 217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 12), 'stypy_return_type', int_call_result_183221)
    # SSA join for try-except statement (line 211)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'jiffies(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'jiffies' in the type store
    # Getting the type of 'stypy_return_type' (line 199)
    stypy_return_type_183222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183222)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'jiffies'
    return stypy_return_type_183222

# Assigning a type to the variable 'jiffies' (line 199)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'jiffies', jiffies)
# SSA branch for the else part of an if statement (line 198)
module_type_store.open_ssa_branch('else')

@norecursion
def jiffies(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'list' (line 222)
    list_183223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 222)
    
    defaults = [list_183223]
    # Create a new context for function 'jiffies'
    module_type_store = module_type_store.open_function_context('jiffies', 222, 4, False)
    
    # Passed parameters checking function
    jiffies.stypy_localization = localization
    jiffies.stypy_type_of_self = None
    jiffies.stypy_type_store = module_type_store
    jiffies.stypy_function_name = 'jiffies'
    jiffies.stypy_param_names_list = ['_load_time']
    jiffies.stypy_varargs_param_name = None
    jiffies.stypy_kwargs_param_name = None
    jiffies.stypy_call_defaults = defaults
    jiffies.stypy_call_varargs = varargs
    jiffies.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'jiffies', ['_load_time'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'jiffies', localization, ['_load_time'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'jiffies(...)' code ##################

    str_183224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, (-1)), 'str', '\n        Return number of jiffies elapsed.\n\n        Return number of jiffies (1/100ths of a second) that this\n        process has been scheduled in user mode. See man 5 proc.\n\n        ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 230, 8))
    
    # 'import time' statement (line 230)
    import time

    import_module(stypy.reporting.localization.Localization(__file__, 230, 8), 'time', time, module_type_store)
    
    
    
    # Getting the type of '_load_time' (line 231)
    _load_time_183225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 15), '_load_time')
    # Applying the 'not' unary operator (line 231)
    result_not__183226 = python_operator(stypy.reporting.localization.Localization(__file__, 231, 11), 'not', _load_time_183225)
    
    # Testing the type of an if condition (line 231)
    if_condition_183227 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 231, 8), result_not__183226)
    # Assigning a type to the variable 'if_condition_183227' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'if_condition_183227', if_condition_183227)
    # SSA begins for if statement (line 231)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 232)
    # Processing the call arguments (line 232)
    
    # Call to time(...): (line 232)
    # Processing the call keyword arguments (line 232)
    kwargs_183232 = {}
    # Getting the type of 'time' (line 232)
    time_183230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 30), 'time', False)
    # Obtaining the member 'time' of a type (line 232)
    time_183231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 30), time_183230, 'time')
    # Calling time(args, kwargs) (line 232)
    time_call_result_183233 = invoke(stypy.reporting.localization.Localization(__file__, 232, 30), time_183231, *[], **kwargs_183232)
    
    # Processing the call keyword arguments (line 232)
    kwargs_183234 = {}
    # Getting the type of '_load_time' (line 232)
    _load_time_183228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 12), '_load_time', False)
    # Obtaining the member 'append' of a type (line 232)
    append_183229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 12), _load_time_183228, 'append')
    # Calling append(args, kwargs) (line 232)
    append_call_result_183235 = invoke(stypy.reporting.localization.Localization(__file__, 232, 12), append_183229, *[time_call_result_183233], **kwargs_183234)
    
    # SSA join for if statement (line 231)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to int(...): (line 233)
    # Processing the call arguments (line 233)
    int_183237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, 19), 'int')
    
    # Call to time(...): (line 233)
    # Processing the call keyword arguments (line 233)
    kwargs_183240 = {}
    # Getting the type of 'time' (line 233)
    time_183238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 24), 'time', False)
    # Obtaining the member 'time' of a type (line 233)
    time_183239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 24), time_183238, 'time')
    # Calling time(args, kwargs) (line 233)
    time_call_result_183241 = invoke(stypy.reporting.localization.Localization(__file__, 233, 24), time_183239, *[], **kwargs_183240)
    
    
    # Obtaining the type of the subscript
    int_183242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, 47), 'int')
    # Getting the type of '_load_time' (line 233)
    _load_time_183243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 36), '_load_time', False)
    # Obtaining the member '__getitem__' of a type (line 233)
    getitem___183244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 36), _load_time_183243, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 233)
    subscript_call_result_183245 = invoke(stypy.reporting.localization.Localization(__file__, 233, 36), getitem___183244, int_183242)
    
    # Applying the binary operator '-' (line 233)
    result_sub_183246 = python_operator(stypy.reporting.localization.Localization(__file__, 233, 24), '-', time_call_result_183241, subscript_call_result_183245)
    
    # Applying the binary operator '*' (line 233)
    result_mul_183247 = python_operator(stypy.reporting.localization.Localization(__file__, 233, 19), '*', int_183237, result_sub_183246)
    
    # Processing the call keyword arguments (line 233)
    kwargs_183248 = {}
    # Getting the type of 'int' (line 233)
    int_183236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 15), 'int', False)
    # Calling int(args, kwargs) (line 233)
    int_call_result_183249 = invoke(stypy.reporting.localization.Localization(__file__, 233, 15), int_183236, *[result_mul_183247], **kwargs_183248)
    
    # Assigning a type to the variable 'stypy_return_type' (line 233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'stypy_return_type', int_call_result_183249)
    
    # ################# End of 'jiffies(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'jiffies' in the type store
    # Getting the type of 'stypy_return_type' (line 222)
    stypy_return_type_183250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 4), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183250)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'jiffies'
    return stypy_return_type_183250

# Assigning a type to the variable 'jiffies' (line 222)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 4), 'jiffies', jiffies)
# SSA join for if statement (line 198)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def build_err_msg(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_183251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 42), 'str', 'Items are not equal:')
    # Getting the type of 'True' (line 237)
    True_183252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 26), 'True')
    
    # Obtaining an instance of the builtin type 'tuple' (line 237)
    tuple_183253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 237)
    # Adding element type (line 237)
    str_183254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 39), 'str', 'ACTUAL')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 237, 39), tuple_183253, str_183254)
    # Adding element type (line 237)
    str_183255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 49), 'str', 'DESIRED')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 237, 39), tuple_183253, str_183255)
    
    int_183256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 71), 'int')
    defaults = [str_183251, True_183252, tuple_183253, int_183256]
    # Create a new context for function 'build_err_msg'
    module_type_store = module_type_store.open_function_context('build_err_msg', 236, 0, False)
    
    # Passed parameters checking function
    build_err_msg.stypy_localization = localization
    build_err_msg.stypy_type_of_self = None
    build_err_msg.stypy_type_store = module_type_store
    build_err_msg.stypy_function_name = 'build_err_msg'
    build_err_msg.stypy_param_names_list = ['arrays', 'err_msg', 'header', 'verbose', 'names', 'precision']
    build_err_msg.stypy_varargs_param_name = None
    build_err_msg.stypy_kwargs_param_name = None
    build_err_msg.stypy_call_defaults = defaults
    build_err_msg.stypy_call_varargs = varargs
    build_err_msg.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'build_err_msg', ['arrays', 'err_msg', 'header', 'verbose', 'names', 'precision'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'build_err_msg', localization, ['arrays', 'err_msg', 'header', 'verbose', 'names', 'precision'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'build_err_msg(...)' code ##################

    
    # Assigning a List to a Name (line 238):
    
    # Assigning a List to a Name (line 238):
    
    # Obtaining an instance of the builtin type 'list' (line 238)
    list_183257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 238)
    # Adding element type (line 238)
    str_183258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 11), 'str', '\n')
    # Getting the type of 'header' (line 238)
    header_183259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 18), 'header')
    # Applying the binary operator '+' (line 238)
    result_add_183260 = python_operator(stypy.reporting.localization.Localization(__file__, 238, 11), '+', str_183258, header_183259)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 238, 10), list_183257, result_add_183260)
    
    # Assigning a type to the variable 'msg' (line 238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 4), 'msg', list_183257)
    
    # Getting the type of 'err_msg' (line 239)
    err_msg_183261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 7), 'err_msg')
    # Testing the type of an if condition (line 239)
    if_condition_183262 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 239, 4), err_msg_183261)
    # Assigning a type to the variable 'if_condition_183262' (line 239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 239, 4), 'if_condition_183262', if_condition_183262)
    # SSA begins for if statement (line 239)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    
    # Call to find(...): (line 240)
    # Processing the call arguments (line 240)
    str_183265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 24), 'str', '\n')
    # Processing the call keyword arguments (line 240)
    kwargs_183266 = {}
    # Getting the type of 'err_msg' (line 240)
    err_msg_183263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 11), 'err_msg', False)
    # Obtaining the member 'find' of a type (line 240)
    find_183264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 11), err_msg_183263, 'find')
    # Calling find(args, kwargs) (line 240)
    find_call_result_183267 = invoke(stypy.reporting.localization.Localization(__file__, 240, 11), find_183264, *[str_183265], **kwargs_183266)
    
    int_183268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 33), 'int')
    # Applying the binary operator '==' (line 240)
    result_eq_183269 = python_operator(stypy.reporting.localization.Localization(__file__, 240, 11), '==', find_call_result_183267, int_183268)
    
    
    
    # Call to len(...): (line 240)
    # Processing the call arguments (line 240)
    # Getting the type of 'err_msg' (line 240)
    err_msg_183271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 44), 'err_msg', False)
    # Processing the call keyword arguments (line 240)
    kwargs_183272 = {}
    # Getting the type of 'len' (line 240)
    len_183270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 40), 'len', False)
    # Calling len(args, kwargs) (line 240)
    len_call_result_183273 = invoke(stypy.reporting.localization.Localization(__file__, 240, 40), len_183270, *[err_msg_183271], **kwargs_183272)
    
    int_183274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 55), 'int')
    
    # Call to len(...): (line 240)
    # Processing the call arguments (line 240)
    # Getting the type of 'header' (line 240)
    header_183276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 62), 'header', False)
    # Processing the call keyword arguments (line 240)
    kwargs_183277 = {}
    # Getting the type of 'len' (line 240)
    len_183275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 58), 'len', False)
    # Calling len(args, kwargs) (line 240)
    len_call_result_183278 = invoke(stypy.reporting.localization.Localization(__file__, 240, 58), len_183275, *[header_183276], **kwargs_183277)
    
    # Applying the binary operator '-' (line 240)
    result_sub_183279 = python_operator(stypy.reporting.localization.Localization(__file__, 240, 55), '-', int_183274, len_call_result_183278)
    
    # Applying the binary operator '<' (line 240)
    result_lt_183280 = python_operator(stypy.reporting.localization.Localization(__file__, 240, 40), '<', len_call_result_183273, result_sub_183279)
    
    # Applying the binary operator 'and' (line 240)
    result_and_keyword_183281 = python_operator(stypy.reporting.localization.Localization(__file__, 240, 11), 'and', result_eq_183269, result_lt_183280)
    
    # Testing the type of an if condition (line 240)
    if_condition_183282 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 240, 8), result_and_keyword_183281)
    # Assigning a type to the variable 'if_condition_183282' (line 240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'if_condition_183282', if_condition_183282)
    # SSA begins for if statement (line 240)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 241):
    
    # Assigning a List to a Name (line 241):
    
    # Obtaining an instance of the builtin type 'list' (line 241)
    list_183283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 241)
    # Adding element type (line 241)
    
    # Obtaining the type of the subscript
    int_183284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 23), 'int')
    # Getting the type of 'msg' (line 241)
    msg_183285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 19), 'msg')
    # Obtaining the member '__getitem__' of a type (line 241)
    getitem___183286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 19), msg_183285, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 241)
    subscript_call_result_183287 = invoke(stypy.reporting.localization.Localization(__file__, 241, 19), getitem___183286, int_183284)
    
    str_183288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 28), 'str', ' ')
    # Applying the binary operator '+' (line 241)
    result_add_183289 = python_operator(stypy.reporting.localization.Localization(__file__, 241, 19), '+', subscript_call_result_183287, str_183288)
    
    # Getting the type of 'err_msg' (line 241)
    err_msg_183290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 34), 'err_msg')
    # Applying the binary operator '+' (line 241)
    result_add_183291 = python_operator(stypy.reporting.localization.Localization(__file__, 241, 32), '+', result_add_183289, err_msg_183290)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 241, 18), list_183283, result_add_183291)
    
    # Assigning a type to the variable 'msg' (line 241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 12), 'msg', list_183283)
    # SSA branch for the else part of an if statement (line 240)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 243)
    # Processing the call arguments (line 243)
    # Getting the type of 'err_msg' (line 243)
    err_msg_183294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 23), 'err_msg', False)
    # Processing the call keyword arguments (line 243)
    kwargs_183295 = {}
    # Getting the type of 'msg' (line 243)
    msg_183292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 12), 'msg', False)
    # Obtaining the member 'append' of a type (line 243)
    append_183293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 12), msg_183292, 'append')
    # Calling append(args, kwargs) (line 243)
    append_call_result_183296 = invoke(stypy.reporting.localization.Localization(__file__, 243, 12), append_183293, *[err_msg_183294], **kwargs_183295)
    
    # SSA join for if statement (line 240)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 239)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'verbose' (line 244)
    verbose_183297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 7), 'verbose')
    # Testing the type of an if condition (line 244)
    if_condition_183298 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 244, 4), verbose_183297)
    # Assigning a type to the variable 'if_condition_183298' (line 244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'if_condition_183298', if_condition_183298)
    # SSA begins for if statement (line 244)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to enumerate(...): (line 245)
    # Processing the call arguments (line 245)
    # Getting the type of 'arrays' (line 245)
    arrays_183300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 30), 'arrays', False)
    # Processing the call keyword arguments (line 245)
    kwargs_183301 = {}
    # Getting the type of 'enumerate' (line 245)
    enumerate_183299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 20), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 245)
    enumerate_call_result_183302 = invoke(stypy.reporting.localization.Localization(__file__, 245, 20), enumerate_183299, *[arrays_183300], **kwargs_183301)
    
    # Testing the type of a for loop iterable (line 245)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 245, 8), enumerate_call_result_183302)
    # Getting the type of the for loop variable (line 245)
    for_loop_var_183303 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 245, 8), enumerate_call_result_183302)
    # Assigning a type to the variable 'i' (line 245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 245, 8), for_loop_var_183303))
    # Assigning a type to the variable 'a' (line 245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 245, 8), for_loop_var_183303))
    # SSA begins for a for statement (line 245)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to isinstance(...): (line 247)
    # Processing the call arguments (line 247)
    # Getting the type of 'a' (line 247)
    a_183305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 26), 'a', False)
    # Getting the type of 'ndarray' (line 247)
    ndarray_183306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 29), 'ndarray', False)
    # Processing the call keyword arguments (line 247)
    kwargs_183307 = {}
    # Getting the type of 'isinstance' (line 247)
    isinstance_183304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 247)
    isinstance_call_result_183308 = invoke(stypy.reporting.localization.Localization(__file__, 247, 15), isinstance_183304, *[a_183305, ndarray_183306], **kwargs_183307)
    
    # Testing the type of an if condition (line 247)
    if_condition_183309 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 247, 12), isinstance_call_result_183308)
    # Assigning a type to the variable 'if_condition_183309' (line 247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'if_condition_183309', if_condition_183309)
    # SSA begins for if statement (line 247)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 249):
    
    # Assigning a Call to a Name (line 249):
    
    # Call to partial(...): (line 249)
    # Processing the call arguments (line 249)
    # Getting the type of 'array_repr' (line 249)
    array_repr_183311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 33), 'array_repr', False)
    # Processing the call keyword arguments (line 249)
    # Getting the type of 'precision' (line 249)
    precision_183312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 55), 'precision', False)
    keyword_183313 = precision_183312
    kwargs_183314 = {'precision': keyword_183313}
    # Getting the type of 'partial' (line 249)
    partial_183310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 25), 'partial', False)
    # Calling partial(args, kwargs) (line 249)
    partial_call_result_183315 = invoke(stypy.reporting.localization.Localization(__file__, 249, 25), partial_183310, *[array_repr_183311], **kwargs_183314)
    
    # Assigning a type to the variable 'r_func' (line 249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 16), 'r_func', partial_call_result_183315)
    # SSA branch for the else part of an if statement (line 247)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 251):
    
    # Assigning a Name to a Name (line 251):
    # Getting the type of 'repr' (line 251)
    repr_183316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 25), 'repr')
    # Assigning a type to the variable 'r_func' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 16), 'r_func', repr_183316)
    # SSA join for if statement (line 247)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 253)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 254):
    
    # Assigning a Call to a Name (line 254):
    
    # Call to r_func(...): (line 254)
    # Processing the call arguments (line 254)
    # Getting the type of 'a' (line 254)
    a_183318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 27), 'a', False)
    # Processing the call keyword arguments (line 254)
    kwargs_183319 = {}
    # Getting the type of 'r_func' (line 254)
    r_func_183317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 20), 'r_func', False)
    # Calling r_func(args, kwargs) (line 254)
    r_func_call_result_183320 = invoke(stypy.reporting.localization.Localization(__file__, 254, 20), r_func_183317, *[a_183318], **kwargs_183319)
    
    # Assigning a type to the variable 'r' (line 254)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 16), 'r', r_func_call_result_183320)
    # SSA branch for the except part of a try statement (line 253)
    # SSA branch for the except '<any exception>' branch of a try statement (line 253)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Str to a Name (line 256):
    
    # Assigning a Str to a Name (line 256):
    str_183321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 20), 'str', '[repr failed]')
    # Assigning a type to the variable 'r' (line 256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 16), 'r', str_183321)
    # SSA join for try-except statement (line 253)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to count(...): (line 257)
    # Processing the call arguments (line 257)
    str_183324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 23), 'str', '\n')
    # Processing the call keyword arguments (line 257)
    kwargs_183325 = {}
    # Getting the type of 'r' (line 257)
    r_183322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 15), 'r', False)
    # Obtaining the member 'count' of a type (line 257)
    count_183323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 15), r_183322, 'count')
    # Calling count(args, kwargs) (line 257)
    count_call_result_183326 = invoke(stypy.reporting.localization.Localization(__file__, 257, 15), count_183323, *[str_183324], **kwargs_183325)
    
    int_183327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 31), 'int')
    # Applying the binary operator '>' (line 257)
    result_gt_183328 = python_operator(stypy.reporting.localization.Localization(__file__, 257, 15), '>', count_call_result_183326, int_183327)
    
    # Testing the type of an if condition (line 257)
    if_condition_183329 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 257, 12), result_gt_183328)
    # Assigning a type to the variable 'if_condition_183329' (line 257)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 12), 'if_condition_183329', if_condition_183329)
    # SSA begins for if statement (line 257)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 258):
    
    # Assigning a Call to a Name (line 258):
    
    # Call to join(...): (line 258)
    # Processing the call arguments (line 258)
    
    # Obtaining the type of the subscript
    int_183332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 46), 'int')
    slice_183333 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 258, 30), None, int_183332, None)
    
    # Call to splitlines(...): (line 258)
    # Processing the call keyword arguments (line 258)
    kwargs_183336 = {}
    # Getting the type of 'r' (line 258)
    r_183334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 30), 'r', False)
    # Obtaining the member 'splitlines' of a type (line 258)
    splitlines_183335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 30), r_183334, 'splitlines')
    # Calling splitlines(args, kwargs) (line 258)
    splitlines_call_result_183337 = invoke(stypy.reporting.localization.Localization(__file__, 258, 30), splitlines_183335, *[], **kwargs_183336)
    
    # Obtaining the member '__getitem__' of a type (line 258)
    getitem___183338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 30), splitlines_call_result_183337, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 258)
    subscript_call_result_183339 = invoke(stypy.reporting.localization.Localization(__file__, 258, 30), getitem___183338, slice_183333)
    
    # Processing the call keyword arguments (line 258)
    kwargs_183340 = {}
    str_183330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 20), 'str', '\n')
    # Obtaining the member 'join' of a type (line 258)
    join_183331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 20), str_183330, 'join')
    # Calling join(args, kwargs) (line 258)
    join_call_result_183341 = invoke(stypy.reporting.localization.Localization(__file__, 258, 20), join_183331, *[subscript_call_result_183339], **kwargs_183340)
    
    # Assigning a type to the variable 'r' (line 258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 16), 'r', join_call_result_183341)
    
    # Getting the type of 'r' (line 259)
    r_183342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 16), 'r')
    str_183343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 21), 'str', '...')
    # Applying the binary operator '+=' (line 259)
    result_iadd_183344 = python_operator(stypy.reporting.localization.Localization(__file__, 259, 16), '+=', r_183342, str_183343)
    # Assigning a type to the variable 'r' (line 259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 16), 'r', result_iadd_183344)
    
    # SSA join for if statement (line 257)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 260)
    # Processing the call arguments (line 260)
    str_183347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 23), 'str', ' %s: %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 260)
    tuple_183348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 260)
    # Adding element type (line 260)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 260)
    i_183349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 42), 'i', False)
    # Getting the type of 'names' (line 260)
    names_183350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 36), 'names', False)
    # Obtaining the member '__getitem__' of a type (line 260)
    getitem___183351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 36), names_183350, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 260)
    subscript_call_result_183352 = invoke(stypy.reporting.localization.Localization(__file__, 260, 36), getitem___183351, i_183349)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 260, 36), tuple_183348, subscript_call_result_183352)
    # Adding element type (line 260)
    # Getting the type of 'r' (line 260)
    r_183353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 46), 'r', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 260, 36), tuple_183348, r_183353)
    
    # Applying the binary operator '%' (line 260)
    result_mod_183354 = python_operator(stypy.reporting.localization.Localization(__file__, 260, 23), '%', str_183347, tuple_183348)
    
    # Processing the call keyword arguments (line 260)
    kwargs_183355 = {}
    # Getting the type of 'msg' (line 260)
    msg_183345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 12), 'msg', False)
    # Obtaining the member 'append' of a type (line 260)
    append_183346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 12), msg_183345, 'append')
    # Calling append(args, kwargs) (line 260)
    append_call_result_183356 = invoke(stypy.reporting.localization.Localization(__file__, 260, 12), append_183346, *[result_mod_183354], **kwargs_183355)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 244)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to join(...): (line 261)
    # Processing the call arguments (line 261)
    # Getting the type of 'msg' (line 261)
    msg_183359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 21), 'msg', False)
    # Processing the call keyword arguments (line 261)
    kwargs_183360 = {}
    str_183357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 11), 'str', '\n')
    # Obtaining the member 'join' of a type (line 261)
    join_183358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 11), str_183357, 'join')
    # Calling join(args, kwargs) (line 261)
    join_call_result_183361 = invoke(stypy.reporting.localization.Localization(__file__, 261, 11), join_183358, *[msg_183359], **kwargs_183360)
    
    # Assigning a type to the variable 'stypy_return_type' (line 261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'stypy_return_type', join_call_result_183361)
    
    # ################# End of 'build_err_msg(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'build_err_msg' in the type store
    # Getting the type of 'stypy_return_type' (line 236)
    stypy_return_type_183362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183362)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'build_err_msg'
    return stypy_return_type_183362

# Assigning a type to the variable 'build_err_msg' (line 236)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 0), 'build_err_msg', build_err_msg)

@norecursion
def assert_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_183363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 40), 'str', '')
    # Getting the type of 'True' (line 263)
    True_183364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 51), 'True')
    defaults = [str_183363, True_183364]
    # Create a new context for function 'assert_equal'
    module_type_store = module_type_store.open_function_context('assert_equal', 263, 0, False)
    
    # Passed parameters checking function
    assert_equal.stypy_localization = localization
    assert_equal.stypy_type_of_self = None
    assert_equal.stypy_type_store = module_type_store
    assert_equal.stypy_function_name = 'assert_equal'
    assert_equal.stypy_param_names_list = ['actual', 'desired', 'err_msg', 'verbose']
    assert_equal.stypy_varargs_param_name = None
    assert_equal.stypy_kwargs_param_name = None
    assert_equal.stypy_call_defaults = defaults
    assert_equal.stypy_call_varargs = varargs
    assert_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_equal', ['actual', 'desired', 'err_msg', 'verbose'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_equal', localization, ['actual', 'desired', 'err_msg', 'verbose'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_equal(...)' code ##################

    str_183365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, (-1)), 'str', "\n    Raises an AssertionError if two objects are not equal.\n\n    Given two objects (scalars, lists, tuples, dictionaries or numpy arrays),\n    check that all elements of these objects are equal. An exception is raised\n    at the first conflicting values.\n\n    Parameters\n    ----------\n    actual : array_like\n        The object to check.\n    desired : array_like\n        The expected object.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n        If actual and desired are not equal.\n\n    Examples\n    --------\n    >>> np.testing.assert_equal([4,5], [4,6])\n    ...\n    <type 'exceptions.AssertionError'>:\n    Items are not equal:\n    item=1\n     ACTUAL: 5\n     DESIRED: 6\n\n    ")
    
    # Assigning a Name to a Name (line 298):
    
    # Assigning a Name to a Name (line 298):
    # Getting the type of 'True' (line 298)
    True_183366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 4), '__tracebackhide__', True_183366)
    
    # Type idiom detected: calculating its left and rigth part (line 299)
    # Getting the type of 'dict' (line 299)
    dict_183367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 27), 'dict')
    # Getting the type of 'desired' (line 299)
    desired_183368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 18), 'desired')
    
    (may_be_183369, more_types_in_union_183370) = may_be_subtype(dict_183367, desired_183368)

    if may_be_183369:

        if more_types_in_union_183370:
            # Runtime conditional SSA (line 299)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'desired' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'desired', remove_not_subtype_from_union(desired_183368, dict))
        
        # Type idiom detected: calculating its left and rigth part (line 300)
        # Getting the type of 'dict' (line 300)
        dict_183371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 34), 'dict')
        # Getting the type of 'actual' (line 300)
        actual_183372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 26), 'actual')
        
        (may_be_183373, more_types_in_union_183374) = may_not_be_subtype(dict_183371, actual_183372)

        if may_be_183373:

            if more_types_in_union_183374:
                # Runtime conditional SSA (line 300)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'actual' (line 300)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 8), 'actual', remove_subtype_from_union(actual_183372, dict))
            
            # Call to AssertionError(...): (line 301)
            # Processing the call arguments (line 301)
            
            # Call to repr(...): (line 301)
            # Processing the call arguments (line 301)
            
            # Call to type(...): (line 301)
            # Processing the call arguments (line 301)
            # Getting the type of 'actual' (line 301)
            actual_183378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 43), 'actual', False)
            # Processing the call keyword arguments (line 301)
            kwargs_183379 = {}
            # Getting the type of 'type' (line 301)
            type_183377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 38), 'type', False)
            # Calling type(args, kwargs) (line 301)
            type_call_result_183380 = invoke(stypy.reporting.localization.Localization(__file__, 301, 38), type_183377, *[actual_183378], **kwargs_183379)
            
            # Processing the call keyword arguments (line 301)
            kwargs_183381 = {}
            # Getting the type of 'repr' (line 301)
            repr_183376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 33), 'repr', False)
            # Calling repr(args, kwargs) (line 301)
            repr_call_result_183382 = invoke(stypy.reporting.localization.Localization(__file__, 301, 33), repr_183376, *[type_call_result_183380], **kwargs_183381)
            
            # Processing the call keyword arguments (line 301)
            kwargs_183383 = {}
            # Getting the type of 'AssertionError' (line 301)
            AssertionError_183375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 18), 'AssertionError', False)
            # Calling AssertionError(args, kwargs) (line 301)
            AssertionError_call_result_183384 = invoke(stypy.reporting.localization.Localization(__file__, 301, 18), AssertionError_183375, *[repr_call_result_183382], **kwargs_183383)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 301, 12), AssertionError_call_result_183384, 'raise parameter', BaseException)

            if more_types_in_union_183374:
                # SSA join for if statement (line 300)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to assert_equal(...): (line 302)
        # Processing the call arguments (line 302)
        
        # Call to len(...): (line 302)
        # Processing the call arguments (line 302)
        # Getting the type of 'actual' (line 302)
        actual_183387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 25), 'actual', False)
        # Processing the call keyword arguments (line 302)
        kwargs_183388 = {}
        # Getting the type of 'len' (line 302)
        len_183386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 21), 'len', False)
        # Calling len(args, kwargs) (line 302)
        len_call_result_183389 = invoke(stypy.reporting.localization.Localization(__file__, 302, 21), len_183386, *[actual_183387], **kwargs_183388)
        
        
        # Call to len(...): (line 302)
        # Processing the call arguments (line 302)
        # Getting the type of 'desired' (line 302)
        desired_183391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 38), 'desired', False)
        # Processing the call keyword arguments (line 302)
        kwargs_183392 = {}
        # Getting the type of 'len' (line 302)
        len_183390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 34), 'len', False)
        # Calling len(args, kwargs) (line 302)
        len_call_result_183393 = invoke(stypy.reporting.localization.Localization(__file__, 302, 34), len_183390, *[desired_183391], **kwargs_183392)
        
        # Getting the type of 'err_msg' (line 302)
        err_msg_183394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 48), 'err_msg', False)
        # Getting the type of 'verbose' (line 302)
        verbose_183395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 57), 'verbose', False)
        # Processing the call keyword arguments (line 302)
        kwargs_183396 = {}
        # Getting the type of 'assert_equal' (line 302)
        assert_equal_183385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 8), 'assert_equal', False)
        # Calling assert_equal(args, kwargs) (line 302)
        assert_equal_call_result_183397 = invoke(stypy.reporting.localization.Localization(__file__, 302, 8), assert_equal_183385, *[len_call_result_183389, len_call_result_183393, err_msg_183394, verbose_183395], **kwargs_183396)
        
        
        
        # Call to items(...): (line 303)
        # Processing the call keyword arguments (line 303)
        kwargs_183400 = {}
        # Getting the type of 'desired' (line 303)
        desired_183398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 20), 'desired', False)
        # Obtaining the member 'items' of a type (line 303)
        items_183399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 20), desired_183398, 'items')
        # Calling items(args, kwargs) (line 303)
        items_call_result_183401 = invoke(stypy.reporting.localization.Localization(__file__, 303, 20), items_183399, *[], **kwargs_183400)
        
        # Testing the type of a for loop iterable (line 303)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 303, 8), items_call_result_183401)
        # Getting the type of the for loop variable (line 303)
        for_loop_var_183402 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 303, 8), items_call_result_183401)
        # Assigning a type to the variable 'k' (line 303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 8), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 303, 8), for_loop_var_183402))
        # Assigning a type to the variable 'i' (line 303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 303, 8), for_loop_var_183402))
        # SSA begins for a for statement (line 303)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'k' (line 304)
        k_183403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 15), 'k')
        # Getting the type of 'actual' (line 304)
        actual_183404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 24), 'actual')
        # Applying the binary operator 'notin' (line 304)
        result_contains_183405 = python_operator(stypy.reporting.localization.Localization(__file__, 304, 15), 'notin', k_183403, actual_183404)
        
        # Testing the type of an if condition (line 304)
        if_condition_183406 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 304, 12), result_contains_183405)
        # Assigning a type to the variable 'if_condition_183406' (line 304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 12), 'if_condition_183406', if_condition_183406)
        # SSA begins for if statement (line 304)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to AssertionError(...): (line 305)
        # Processing the call arguments (line 305)
        
        # Call to repr(...): (line 305)
        # Processing the call arguments (line 305)
        # Getting the type of 'k' (line 305)
        k_183409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 42), 'k', False)
        # Processing the call keyword arguments (line 305)
        kwargs_183410 = {}
        # Getting the type of 'repr' (line 305)
        repr_183408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 37), 'repr', False)
        # Calling repr(args, kwargs) (line 305)
        repr_call_result_183411 = invoke(stypy.reporting.localization.Localization(__file__, 305, 37), repr_183408, *[k_183409], **kwargs_183410)
        
        # Processing the call keyword arguments (line 305)
        kwargs_183412 = {}
        # Getting the type of 'AssertionError' (line 305)
        AssertionError_183407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 22), 'AssertionError', False)
        # Calling AssertionError(args, kwargs) (line 305)
        AssertionError_call_result_183413 = invoke(stypy.reporting.localization.Localization(__file__, 305, 22), AssertionError_183407, *[repr_call_result_183411], **kwargs_183412)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 305, 16), AssertionError_call_result_183413, 'raise parameter', BaseException)
        # SSA join for if statement (line 304)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to assert_equal(...): (line 306)
        # Processing the call arguments (line 306)
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 306)
        k_183415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 32), 'k', False)
        # Getting the type of 'actual' (line 306)
        actual_183416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 25), 'actual', False)
        # Obtaining the member '__getitem__' of a type (line 306)
        getitem___183417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 25), actual_183416, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 306)
        subscript_call_result_183418 = invoke(stypy.reporting.localization.Localization(__file__, 306, 25), getitem___183417, k_183415)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 306)
        k_183419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 44), 'k', False)
        # Getting the type of 'desired' (line 306)
        desired_183420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 36), 'desired', False)
        # Obtaining the member '__getitem__' of a type (line 306)
        getitem___183421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 36), desired_183420, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 306)
        subscript_call_result_183422 = invoke(stypy.reporting.localization.Localization(__file__, 306, 36), getitem___183421, k_183419)
        
        str_183423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 48), 'str', 'key=%r\n%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 306)
        tuple_183424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 64), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 306)
        # Adding element type (line 306)
        # Getting the type of 'k' (line 306)
        k_183425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 64), 'k', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 306, 64), tuple_183424, k_183425)
        # Adding element type (line 306)
        # Getting the type of 'err_msg' (line 306)
        err_msg_183426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 67), 'err_msg', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 306, 64), tuple_183424, err_msg_183426)
        
        # Applying the binary operator '%' (line 306)
        result_mod_183427 = python_operator(stypy.reporting.localization.Localization(__file__, 306, 48), '%', str_183423, tuple_183424)
        
        # Getting the type of 'verbose' (line 306)
        verbose_183428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 77), 'verbose', False)
        # Processing the call keyword arguments (line 306)
        kwargs_183429 = {}
        # Getting the type of 'assert_equal' (line 306)
        assert_equal_183414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'assert_equal', False)
        # Calling assert_equal(args, kwargs) (line 306)
        assert_equal_call_result_183430 = invoke(stypy.reporting.localization.Localization(__file__, 306, 12), assert_equal_183414, *[subscript_call_result_183418, subscript_call_result_183422, result_mod_183427, verbose_183428], **kwargs_183429)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 8), 'stypy_return_type', types.NoneType)

        if more_types_in_union_183370:
            # SSA join for if statement (line 299)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 308)
    # Processing the call arguments (line 308)
    # Getting the type of 'desired' (line 308)
    desired_183432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 18), 'desired', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 308)
    tuple_183433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 308)
    # Adding element type (line 308)
    # Getting the type of 'list' (line 308)
    list_183434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 28), 'list', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 308, 28), tuple_183433, list_183434)
    # Adding element type (line 308)
    # Getting the type of 'tuple' (line 308)
    tuple_183435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 34), 'tuple', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 308, 28), tuple_183433, tuple_183435)
    
    # Processing the call keyword arguments (line 308)
    kwargs_183436 = {}
    # Getting the type of 'isinstance' (line 308)
    isinstance_183431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 308)
    isinstance_call_result_183437 = invoke(stypy.reporting.localization.Localization(__file__, 308, 7), isinstance_183431, *[desired_183432, tuple_183433], **kwargs_183436)
    
    
    # Call to isinstance(...): (line 308)
    # Processing the call arguments (line 308)
    # Getting the type of 'actual' (line 308)
    actual_183439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 57), 'actual', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 308)
    tuple_183440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 66), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 308)
    # Adding element type (line 308)
    # Getting the type of 'list' (line 308)
    list_183441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 66), 'list', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 308, 66), tuple_183440, list_183441)
    # Adding element type (line 308)
    # Getting the type of 'tuple' (line 308)
    tuple_183442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 72), 'tuple', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 308, 66), tuple_183440, tuple_183442)
    
    # Processing the call keyword arguments (line 308)
    kwargs_183443 = {}
    # Getting the type of 'isinstance' (line 308)
    isinstance_183438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 46), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 308)
    isinstance_call_result_183444 = invoke(stypy.reporting.localization.Localization(__file__, 308, 46), isinstance_183438, *[actual_183439, tuple_183440], **kwargs_183443)
    
    # Applying the binary operator 'and' (line 308)
    result_and_keyword_183445 = python_operator(stypy.reporting.localization.Localization(__file__, 308, 7), 'and', isinstance_call_result_183437, isinstance_call_result_183444)
    
    # Testing the type of an if condition (line 308)
    if_condition_183446 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 308, 4), result_and_keyword_183445)
    # Assigning a type to the variable 'if_condition_183446' (line 308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 4), 'if_condition_183446', if_condition_183446)
    # SSA begins for if statement (line 308)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to assert_equal(...): (line 309)
    # Processing the call arguments (line 309)
    
    # Call to len(...): (line 309)
    # Processing the call arguments (line 309)
    # Getting the type of 'actual' (line 309)
    actual_183449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 25), 'actual', False)
    # Processing the call keyword arguments (line 309)
    kwargs_183450 = {}
    # Getting the type of 'len' (line 309)
    len_183448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 21), 'len', False)
    # Calling len(args, kwargs) (line 309)
    len_call_result_183451 = invoke(stypy.reporting.localization.Localization(__file__, 309, 21), len_183448, *[actual_183449], **kwargs_183450)
    
    
    # Call to len(...): (line 309)
    # Processing the call arguments (line 309)
    # Getting the type of 'desired' (line 309)
    desired_183453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 38), 'desired', False)
    # Processing the call keyword arguments (line 309)
    kwargs_183454 = {}
    # Getting the type of 'len' (line 309)
    len_183452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 34), 'len', False)
    # Calling len(args, kwargs) (line 309)
    len_call_result_183455 = invoke(stypy.reporting.localization.Localization(__file__, 309, 34), len_183452, *[desired_183453], **kwargs_183454)
    
    # Getting the type of 'err_msg' (line 309)
    err_msg_183456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 48), 'err_msg', False)
    # Getting the type of 'verbose' (line 309)
    verbose_183457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 57), 'verbose', False)
    # Processing the call keyword arguments (line 309)
    kwargs_183458 = {}
    # Getting the type of 'assert_equal' (line 309)
    assert_equal_183447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'assert_equal', False)
    # Calling assert_equal(args, kwargs) (line 309)
    assert_equal_call_result_183459 = invoke(stypy.reporting.localization.Localization(__file__, 309, 8), assert_equal_183447, *[len_call_result_183451, len_call_result_183455, err_msg_183456, verbose_183457], **kwargs_183458)
    
    
    
    # Call to range(...): (line 310)
    # Processing the call arguments (line 310)
    
    # Call to len(...): (line 310)
    # Processing the call arguments (line 310)
    # Getting the type of 'desired' (line 310)
    desired_183462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 27), 'desired', False)
    # Processing the call keyword arguments (line 310)
    kwargs_183463 = {}
    # Getting the type of 'len' (line 310)
    len_183461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 23), 'len', False)
    # Calling len(args, kwargs) (line 310)
    len_call_result_183464 = invoke(stypy.reporting.localization.Localization(__file__, 310, 23), len_183461, *[desired_183462], **kwargs_183463)
    
    # Processing the call keyword arguments (line 310)
    kwargs_183465 = {}
    # Getting the type of 'range' (line 310)
    range_183460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 17), 'range', False)
    # Calling range(args, kwargs) (line 310)
    range_call_result_183466 = invoke(stypy.reporting.localization.Localization(__file__, 310, 17), range_183460, *[len_call_result_183464], **kwargs_183465)
    
    # Testing the type of a for loop iterable (line 310)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 310, 8), range_call_result_183466)
    # Getting the type of the for loop variable (line 310)
    for_loop_var_183467 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 310, 8), range_call_result_183466)
    # Assigning a type to the variable 'k' (line 310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'k', for_loop_var_183467)
    # SSA begins for a for statement (line 310)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to assert_equal(...): (line 311)
    # Processing the call arguments (line 311)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 311)
    k_183469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 32), 'k', False)
    # Getting the type of 'actual' (line 311)
    actual_183470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 25), 'actual', False)
    # Obtaining the member '__getitem__' of a type (line 311)
    getitem___183471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 25), actual_183470, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 311)
    subscript_call_result_183472 = invoke(stypy.reporting.localization.Localization(__file__, 311, 25), getitem___183471, k_183469)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 311)
    k_183473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 44), 'k', False)
    # Getting the type of 'desired' (line 311)
    desired_183474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 36), 'desired', False)
    # Obtaining the member '__getitem__' of a type (line 311)
    getitem___183475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 36), desired_183474, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 311)
    subscript_call_result_183476 = invoke(stypy.reporting.localization.Localization(__file__, 311, 36), getitem___183475, k_183473)
    
    str_183477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 48), 'str', 'item=%r\n%s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 311)
    tuple_183478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 65), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 311)
    # Adding element type (line 311)
    # Getting the type of 'k' (line 311)
    k_183479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 65), 'k', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 311, 65), tuple_183478, k_183479)
    # Adding element type (line 311)
    # Getting the type of 'err_msg' (line 311)
    err_msg_183480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 68), 'err_msg', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 311, 65), tuple_183478, err_msg_183480)
    
    # Applying the binary operator '%' (line 311)
    result_mod_183481 = python_operator(stypy.reporting.localization.Localization(__file__, 311, 48), '%', str_183477, tuple_183478)
    
    # Getting the type of 'verbose' (line 311)
    verbose_183482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 78), 'verbose', False)
    # Processing the call keyword arguments (line 311)
    kwargs_183483 = {}
    # Getting the type of 'assert_equal' (line 311)
    assert_equal_183468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 12), 'assert_equal', False)
    # Calling assert_equal(args, kwargs) (line 311)
    assert_equal_call_result_183484 = invoke(stypy.reporting.localization.Localization(__file__, 311, 12), assert_equal_183468, *[subscript_call_result_183472, subscript_call_result_183476, result_mod_183481, verbose_183482], **kwargs_183483)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Assigning a type to the variable 'stypy_return_type' (line 312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 308)
    module_type_store = module_type_store.join_ssa_context()
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 313, 4))
    
    # 'from numpy.core import ndarray, isscalar, signbit' statement (line 313)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_183485 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 313, 4), 'numpy.core')

    if (type(import_183485) is not StypyTypeError):

        if (import_183485 != 'pyd_module'):
            __import__(import_183485)
            sys_modules_183486 = sys.modules[import_183485]
            import_from_module(stypy.reporting.localization.Localization(__file__, 313, 4), 'numpy.core', sys_modules_183486.module_type_store, module_type_store, ['ndarray', 'isscalar', 'signbit'])
            nest_module(stypy.reporting.localization.Localization(__file__, 313, 4), __file__, sys_modules_183486, sys_modules_183486.module_type_store, module_type_store)
        else:
            from numpy.core import ndarray, isscalar, signbit

            import_from_module(stypy.reporting.localization.Localization(__file__, 313, 4), 'numpy.core', None, module_type_store, ['ndarray', 'isscalar', 'signbit'], [ndarray, isscalar, signbit])

    else:
        # Assigning a type to the variable 'numpy.core' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 4), 'numpy.core', import_183485)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 314, 4))
    
    # 'from numpy.lib import iscomplexobj, real, imag' statement (line 314)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_183487 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 314, 4), 'numpy.lib')

    if (type(import_183487) is not StypyTypeError):

        if (import_183487 != 'pyd_module'):
            __import__(import_183487)
            sys_modules_183488 = sys.modules[import_183487]
            import_from_module(stypy.reporting.localization.Localization(__file__, 314, 4), 'numpy.lib', sys_modules_183488.module_type_store, module_type_store, ['iscomplexobj', 'real', 'imag'])
            nest_module(stypy.reporting.localization.Localization(__file__, 314, 4), __file__, sys_modules_183488, sys_modules_183488.module_type_store, module_type_store)
        else:
            from numpy.lib import iscomplexobj, real, imag

            import_from_module(stypy.reporting.localization.Localization(__file__, 314, 4), 'numpy.lib', None, module_type_store, ['iscomplexobj', 'real', 'imag'], [iscomplexobj, real, imag])

    else:
        # Assigning a type to the variable 'numpy.lib' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 4), 'numpy.lib', import_183487)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 315)
    # Processing the call arguments (line 315)
    # Getting the type of 'actual' (line 315)
    actual_183490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 18), 'actual', False)
    # Getting the type of 'ndarray' (line 315)
    ndarray_183491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 26), 'ndarray', False)
    # Processing the call keyword arguments (line 315)
    kwargs_183492 = {}
    # Getting the type of 'isinstance' (line 315)
    isinstance_183489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 315)
    isinstance_call_result_183493 = invoke(stypy.reporting.localization.Localization(__file__, 315, 7), isinstance_183489, *[actual_183490, ndarray_183491], **kwargs_183492)
    
    
    # Call to isinstance(...): (line 315)
    # Processing the call arguments (line 315)
    # Getting the type of 'desired' (line 315)
    desired_183495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 49), 'desired', False)
    # Getting the type of 'ndarray' (line 315)
    ndarray_183496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 58), 'ndarray', False)
    # Processing the call keyword arguments (line 315)
    kwargs_183497 = {}
    # Getting the type of 'isinstance' (line 315)
    isinstance_183494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 38), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 315)
    isinstance_call_result_183498 = invoke(stypy.reporting.localization.Localization(__file__, 315, 38), isinstance_183494, *[desired_183495, ndarray_183496], **kwargs_183497)
    
    # Applying the binary operator 'or' (line 315)
    result_or_keyword_183499 = python_operator(stypy.reporting.localization.Localization(__file__, 315, 7), 'or', isinstance_call_result_183493, isinstance_call_result_183498)
    
    # Testing the type of an if condition (line 315)
    if_condition_183500 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 315, 4), result_or_keyword_183499)
    # Assigning a type to the variable 'if_condition_183500' (line 315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 4), 'if_condition_183500', if_condition_183500)
    # SSA begins for if statement (line 315)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to assert_array_equal(...): (line 316)
    # Processing the call arguments (line 316)
    # Getting the type of 'actual' (line 316)
    actual_183502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 34), 'actual', False)
    # Getting the type of 'desired' (line 316)
    desired_183503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 42), 'desired', False)
    # Getting the type of 'err_msg' (line 316)
    err_msg_183504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 51), 'err_msg', False)
    # Getting the type of 'verbose' (line 316)
    verbose_183505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 60), 'verbose', False)
    # Processing the call keyword arguments (line 316)
    kwargs_183506 = {}
    # Getting the type of 'assert_array_equal' (line 316)
    assert_array_equal_183501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 15), 'assert_array_equal', False)
    # Calling assert_array_equal(args, kwargs) (line 316)
    assert_array_equal_call_result_183507 = invoke(stypy.reporting.localization.Localization(__file__, 316, 15), assert_array_equal_183501, *[actual_183502, desired_183503, err_msg_183504, verbose_183505], **kwargs_183506)
    
    # Assigning a type to the variable 'stypy_return_type' (line 316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'stypy_return_type', assert_array_equal_call_result_183507)
    # SSA join for if statement (line 315)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 317):
    
    # Assigning a Call to a Name (line 317):
    
    # Call to build_err_msg(...): (line 317)
    # Processing the call arguments (line 317)
    
    # Obtaining an instance of the builtin type 'list' (line 317)
    list_183509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 317)
    # Adding element type (line 317)
    # Getting the type of 'actual' (line 317)
    actual_183510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 25), 'actual', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 24), list_183509, actual_183510)
    # Adding element type (line 317)
    # Getting the type of 'desired' (line 317)
    desired_183511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 33), 'desired', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 24), list_183509, desired_183511)
    
    # Getting the type of 'err_msg' (line 317)
    err_msg_183512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 43), 'err_msg', False)
    # Processing the call keyword arguments (line 317)
    # Getting the type of 'verbose' (line 317)
    verbose_183513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 60), 'verbose', False)
    keyword_183514 = verbose_183513
    kwargs_183515 = {'verbose': keyword_183514}
    # Getting the type of 'build_err_msg' (line 317)
    build_err_msg_183508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 10), 'build_err_msg', False)
    # Calling build_err_msg(args, kwargs) (line 317)
    build_err_msg_call_result_183516 = invoke(stypy.reporting.localization.Localization(__file__, 317, 10), build_err_msg_183508, *[list_183509, err_msg_183512], **kwargs_183515)
    
    # Assigning a type to the variable 'msg' (line 317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 4), 'msg', build_err_msg_call_result_183516)
    
    
    # SSA begins for try-except statement (line 322)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a BoolOp to a Name (line 323):
    
    # Assigning a BoolOp to a Name (line 323):
    
    # Evaluating a boolean operation
    
    # Call to iscomplexobj(...): (line 323)
    # Processing the call arguments (line 323)
    # Getting the type of 'actual' (line 323)
    actual_183518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 34), 'actual', False)
    # Processing the call keyword arguments (line 323)
    kwargs_183519 = {}
    # Getting the type of 'iscomplexobj' (line 323)
    iscomplexobj_183517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 21), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 323)
    iscomplexobj_call_result_183520 = invoke(stypy.reporting.localization.Localization(__file__, 323, 21), iscomplexobj_183517, *[actual_183518], **kwargs_183519)
    
    
    # Call to iscomplexobj(...): (line 323)
    # Processing the call arguments (line 323)
    # Getting the type of 'desired' (line 323)
    desired_183522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 58), 'desired', False)
    # Processing the call keyword arguments (line 323)
    kwargs_183523 = {}
    # Getting the type of 'iscomplexobj' (line 323)
    iscomplexobj_183521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 45), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 323)
    iscomplexobj_call_result_183524 = invoke(stypy.reporting.localization.Localization(__file__, 323, 45), iscomplexobj_183521, *[desired_183522], **kwargs_183523)
    
    # Applying the binary operator 'or' (line 323)
    result_or_keyword_183525 = python_operator(stypy.reporting.localization.Localization(__file__, 323, 21), 'or', iscomplexobj_call_result_183520, iscomplexobj_call_result_183524)
    
    # Assigning a type to the variable 'usecomplex' (line 323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 8), 'usecomplex', result_or_keyword_183525)
    # SSA branch for the except part of a try statement (line 322)
    # SSA branch for the except 'ValueError' branch of a try statement (line 322)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Name to a Name (line 325):
    
    # Assigning a Name to a Name (line 325):
    # Getting the type of 'False' (line 325)
    False_183526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 21), 'False')
    # Assigning a type to the variable 'usecomplex' (line 325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 8), 'usecomplex', False_183526)
    # SSA join for try-except statement (line 322)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'usecomplex' (line 327)
    usecomplex_183527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 7), 'usecomplex')
    # Testing the type of an if condition (line 327)
    if_condition_183528 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 327, 4), usecomplex_183527)
    # Assigning a type to the variable 'if_condition_183528' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'if_condition_183528', if_condition_183528)
    # SSA begins for if statement (line 327)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to iscomplexobj(...): (line 328)
    # Processing the call arguments (line 328)
    # Getting the type of 'actual' (line 328)
    actual_183530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 24), 'actual', False)
    # Processing the call keyword arguments (line 328)
    kwargs_183531 = {}
    # Getting the type of 'iscomplexobj' (line 328)
    iscomplexobj_183529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 11), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 328)
    iscomplexobj_call_result_183532 = invoke(stypy.reporting.localization.Localization(__file__, 328, 11), iscomplexobj_183529, *[actual_183530], **kwargs_183531)
    
    # Testing the type of an if condition (line 328)
    if_condition_183533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 328, 8), iscomplexobj_call_result_183532)
    # Assigning a type to the variable 'if_condition_183533' (line 328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 8), 'if_condition_183533', if_condition_183533)
    # SSA begins for if statement (line 328)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 329):
    
    # Assigning a Call to a Name (line 329):
    
    # Call to real(...): (line 329)
    # Processing the call arguments (line 329)
    # Getting the type of 'actual' (line 329)
    actual_183535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 27), 'actual', False)
    # Processing the call keyword arguments (line 329)
    kwargs_183536 = {}
    # Getting the type of 'real' (line 329)
    real_183534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 22), 'real', False)
    # Calling real(args, kwargs) (line 329)
    real_call_result_183537 = invoke(stypy.reporting.localization.Localization(__file__, 329, 22), real_183534, *[actual_183535], **kwargs_183536)
    
    # Assigning a type to the variable 'actualr' (line 329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 12), 'actualr', real_call_result_183537)
    
    # Assigning a Call to a Name (line 330):
    
    # Assigning a Call to a Name (line 330):
    
    # Call to imag(...): (line 330)
    # Processing the call arguments (line 330)
    # Getting the type of 'actual' (line 330)
    actual_183539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 27), 'actual', False)
    # Processing the call keyword arguments (line 330)
    kwargs_183540 = {}
    # Getting the type of 'imag' (line 330)
    imag_183538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 22), 'imag', False)
    # Calling imag(args, kwargs) (line 330)
    imag_call_result_183541 = invoke(stypy.reporting.localization.Localization(__file__, 330, 22), imag_183538, *[actual_183539], **kwargs_183540)
    
    # Assigning a type to the variable 'actuali' (line 330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 12), 'actuali', imag_call_result_183541)
    # SSA branch for the else part of an if statement (line 328)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 332):
    
    # Assigning a Name to a Name (line 332):
    # Getting the type of 'actual' (line 332)
    actual_183542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 22), 'actual')
    # Assigning a type to the variable 'actualr' (line 332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 12), 'actualr', actual_183542)
    
    # Assigning a Num to a Name (line 333):
    
    # Assigning a Num to a Name (line 333):
    int_183543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 22), 'int')
    # Assigning a type to the variable 'actuali' (line 333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 12), 'actuali', int_183543)
    # SSA join for if statement (line 328)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to iscomplexobj(...): (line 334)
    # Processing the call arguments (line 334)
    # Getting the type of 'desired' (line 334)
    desired_183545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 24), 'desired', False)
    # Processing the call keyword arguments (line 334)
    kwargs_183546 = {}
    # Getting the type of 'iscomplexobj' (line 334)
    iscomplexobj_183544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 11), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 334)
    iscomplexobj_call_result_183547 = invoke(stypy.reporting.localization.Localization(__file__, 334, 11), iscomplexobj_183544, *[desired_183545], **kwargs_183546)
    
    # Testing the type of an if condition (line 334)
    if_condition_183548 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 334, 8), iscomplexobj_call_result_183547)
    # Assigning a type to the variable 'if_condition_183548' (line 334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 8), 'if_condition_183548', if_condition_183548)
    # SSA begins for if statement (line 334)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 335):
    
    # Assigning a Call to a Name (line 335):
    
    # Call to real(...): (line 335)
    # Processing the call arguments (line 335)
    # Getting the type of 'desired' (line 335)
    desired_183550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 28), 'desired', False)
    # Processing the call keyword arguments (line 335)
    kwargs_183551 = {}
    # Getting the type of 'real' (line 335)
    real_183549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 23), 'real', False)
    # Calling real(args, kwargs) (line 335)
    real_call_result_183552 = invoke(stypy.reporting.localization.Localization(__file__, 335, 23), real_183549, *[desired_183550], **kwargs_183551)
    
    # Assigning a type to the variable 'desiredr' (line 335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'desiredr', real_call_result_183552)
    
    # Assigning a Call to a Name (line 336):
    
    # Assigning a Call to a Name (line 336):
    
    # Call to imag(...): (line 336)
    # Processing the call arguments (line 336)
    # Getting the type of 'desired' (line 336)
    desired_183554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 28), 'desired', False)
    # Processing the call keyword arguments (line 336)
    kwargs_183555 = {}
    # Getting the type of 'imag' (line 336)
    imag_183553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 23), 'imag', False)
    # Calling imag(args, kwargs) (line 336)
    imag_call_result_183556 = invoke(stypy.reporting.localization.Localization(__file__, 336, 23), imag_183553, *[desired_183554], **kwargs_183555)
    
    # Assigning a type to the variable 'desiredi' (line 336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 12), 'desiredi', imag_call_result_183556)
    # SSA branch for the else part of an if statement (line 334)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 338):
    
    # Assigning a Name to a Name (line 338):
    # Getting the type of 'desired' (line 338)
    desired_183557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 23), 'desired')
    # Assigning a type to the variable 'desiredr' (line 338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 12), 'desiredr', desired_183557)
    
    # Assigning a Num to a Name (line 339):
    
    # Assigning a Num to a Name (line 339):
    int_183558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, 23), 'int')
    # Assigning a type to the variable 'desiredi' (line 339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 12), 'desiredi', int_183558)
    # SSA join for if statement (line 334)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 340)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to assert_equal(...): (line 341)
    # Processing the call arguments (line 341)
    # Getting the type of 'actualr' (line 341)
    actualr_183560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 25), 'actualr', False)
    # Getting the type of 'desiredr' (line 341)
    desiredr_183561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 34), 'desiredr', False)
    # Processing the call keyword arguments (line 341)
    kwargs_183562 = {}
    # Getting the type of 'assert_equal' (line 341)
    assert_equal_183559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 12), 'assert_equal', False)
    # Calling assert_equal(args, kwargs) (line 341)
    assert_equal_call_result_183563 = invoke(stypy.reporting.localization.Localization(__file__, 341, 12), assert_equal_183559, *[actualr_183560, desiredr_183561], **kwargs_183562)
    
    
    # Call to assert_equal(...): (line 342)
    # Processing the call arguments (line 342)
    # Getting the type of 'actuali' (line 342)
    actuali_183565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 25), 'actuali', False)
    # Getting the type of 'desiredi' (line 342)
    desiredi_183566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 34), 'desiredi', False)
    # Processing the call keyword arguments (line 342)
    kwargs_183567 = {}
    # Getting the type of 'assert_equal' (line 342)
    assert_equal_183564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 12), 'assert_equal', False)
    # Calling assert_equal(args, kwargs) (line 342)
    assert_equal_call_result_183568 = invoke(stypy.reporting.localization.Localization(__file__, 342, 12), assert_equal_183564, *[actuali_183565, desiredi_183566], **kwargs_183567)
    
    # SSA branch for the except part of a try statement (line 340)
    # SSA branch for the except 'AssertionError' branch of a try statement (line 340)
    module_type_store.open_ssa_branch('except')
    
    # Call to AssertionError(...): (line 344)
    # Processing the call arguments (line 344)
    # Getting the type of 'msg' (line 344)
    msg_183570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 33), 'msg', False)
    # Processing the call keyword arguments (line 344)
    kwargs_183571 = {}
    # Getting the type of 'AssertionError' (line 344)
    AssertionError_183569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 18), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 344)
    AssertionError_call_result_183572 = invoke(stypy.reporting.localization.Localization(__file__, 344, 18), AssertionError_183569, *[msg_183570], **kwargs_183571)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 344, 12), AssertionError_call_result_183572, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 340)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 327)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 347)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    
    # Call to isscalar(...): (line 349)
    # Processing the call arguments (line 349)
    # Getting the type of 'desired' (line 349)
    desired_183574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 20), 'desired', False)
    # Processing the call keyword arguments (line 349)
    kwargs_183575 = {}
    # Getting the type of 'isscalar' (line 349)
    isscalar_183573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 349)
    isscalar_call_result_183576 = invoke(stypy.reporting.localization.Localization(__file__, 349, 11), isscalar_183573, *[desired_183574], **kwargs_183575)
    
    
    # Call to isscalar(...): (line 349)
    # Processing the call arguments (line 349)
    # Getting the type of 'actual' (line 349)
    actual_183578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 41), 'actual', False)
    # Processing the call keyword arguments (line 349)
    kwargs_183579 = {}
    # Getting the type of 'isscalar' (line 349)
    isscalar_183577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 32), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 349)
    isscalar_call_result_183580 = invoke(stypy.reporting.localization.Localization(__file__, 349, 32), isscalar_183577, *[actual_183578], **kwargs_183579)
    
    # Applying the binary operator '!=' (line 349)
    result_ne_183581 = python_operator(stypy.reporting.localization.Localization(__file__, 349, 11), '!=', isscalar_call_result_183576, isscalar_call_result_183580)
    
    # Testing the type of an if condition (line 349)
    if_condition_183582 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 349, 8), result_ne_183581)
    # Assigning a type to the variable 'if_condition_183582' (line 349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'if_condition_183582', if_condition_183582)
    # SSA begins for if statement (line 349)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 350)
    # Processing the call arguments (line 350)
    # Getting the type of 'msg' (line 350)
    msg_183584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 33), 'msg', False)
    # Processing the call keyword arguments (line 350)
    kwargs_183585 = {}
    # Getting the type of 'AssertionError' (line 350)
    AssertionError_183583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 18), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 350)
    AssertionError_call_result_183586 = invoke(stypy.reporting.localization.Localization(__file__, 350, 18), AssertionError_183583, *[msg_183584], **kwargs_183585)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 350, 12), AssertionError_call_result_183586, 'raise parameter', BaseException)
    # SSA join for if statement (line 349)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Evaluating a boolean operation
    
    # Call to gisfinite(...): (line 355)
    # Processing the call arguments (line 355)
    # Getting the type of 'desired' (line 355)
    desired_183588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 26), 'desired', False)
    # Processing the call keyword arguments (line 355)
    kwargs_183589 = {}
    # Getting the type of 'gisfinite' (line 355)
    gisfinite_183587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 16), 'gisfinite', False)
    # Calling gisfinite(args, kwargs) (line 355)
    gisfinite_call_result_183590 = invoke(stypy.reporting.localization.Localization(__file__, 355, 16), gisfinite_183587, *[desired_183588], **kwargs_183589)
    
    
    # Call to gisfinite(...): (line 355)
    # Processing the call arguments (line 355)
    # Getting the type of 'actual' (line 355)
    actual_183592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 49), 'actual', False)
    # Processing the call keyword arguments (line 355)
    kwargs_183593 = {}
    # Getting the type of 'gisfinite' (line 355)
    gisfinite_183591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 39), 'gisfinite', False)
    # Calling gisfinite(args, kwargs) (line 355)
    gisfinite_call_result_183594 = invoke(stypy.reporting.localization.Localization(__file__, 355, 39), gisfinite_183591, *[actual_183592], **kwargs_183593)
    
    # Applying the binary operator 'and' (line 355)
    result_and_keyword_183595 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 16), 'and', gisfinite_call_result_183590, gisfinite_call_result_183594)
    
    # Applying the 'not' unary operator (line 355)
    result_not__183596 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 11), 'not', result_and_keyword_183595)
    
    # Testing the type of an if condition (line 355)
    if_condition_183597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 355, 8), result_not__183596)
    # Assigning a type to the variable 'if_condition_183597' (line 355)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'if_condition_183597', if_condition_183597)
    # SSA begins for if statement (line 355)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 356):
    
    # Assigning a Call to a Name (line 356):
    
    # Call to gisnan(...): (line 356)
    # Processing the call arguments (line 356)
    # Getting the type of 'desired' (line 356)
    desired_183599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 30), 'desired', False)
    # Processing the call keyword arguments (line 356)
    kwargs_183600 = {}
    # Getting the type of 'gisnan' (line 356)
    gisnan_183598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 23), 'gisnan', False)
    # Calling gisnan(args, kwargs) (line 356)
    gisnan_call_result_183601 = invoke(stypy.reporting.localization.Localization(__file__, 356, 23), gisnan_183598, *[desired_183599], **kwargs_183600)
    
    # Assigning a type to the variable 'isdesnan' (line 356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'isdesnan', gisnan_call_result_183601)
    
    # Assigning a Call to a Name (line 357):
    
    # Assigning a Call to a Name (line 357):
    
    # Call to gisnan(...): (line 357)
    # Processing the call arguments (line 357)
    # Getting the type of 'actual' (line 357)
    actual_183603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 30), 'actual', False)
    # Processing the call keyword arguments (line 357)
    kwargs_183604 = {}
    # Getting the type of 'gisnan' (line 357)
    gisnan_183602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 23), 'gisnan', False)
    # Calling gisnan(args, kwargs) (line 357)
    gisnan_call_result_183605 = invoke(stypy.reporting.localization.Localization(__file__, 357, 23), gisnan_183602, *[actual_183603], **kwargs_183604)
    
    # Assigning a type to the variable 'isactnan' (line 357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 12), 'isactnan', gisnan_call_result_183605)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'isdesnan' (line 358)
    isdesnan_183606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 15), 'isdesnan')
    # Getting the type of 'isactnan' (line 358)
    isactnan_183607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 27), 'isactnan')
    # Applying the binary operator 'or' (line 358)
    result_or_keyword_183608 = python_operator(stypy.reporting.localization.Localization(__file__, 358, 15), 'or', isdesnan_183606, isactnan_183607)
    
    # Testing the type of an if condition (line 358)
    if_condition_183609 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 358, 12), result_or_keyword_183608)
    # Assigning a type to the variable 'if_condition_183609' (line 358)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 12), 'if_condition_183609', if_condition_183609)
    # SSA begins for if statement (line 358)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'isdesnan' (line 359)
    isdesnan_183610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 24), 'isdesnan')
    # Getting the type of 'isactnan' (line 359)
    isactnan_183611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 37), 'isactnan')
    # Applying the binary operator 'and' (line 359)
    result_and_keyword_183612 = python_operator(stypy.reporting.localization.Localization(__file__, 359, 24), 'and', isdesnan_183610, isactnan_183611)
    
    # Applying the 'not' unary operator (line 359)
    result_not__183613 = python_operator(stypy.reporting.localization.Localization(__file__, 359, 19), 'not', result_and_keyword_183612)
    
    # Testing the type of an if condition (line 359)
    if_condition_183614 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 359, 16), result_not__183613)
    # Assigning a type to the variable 'if_condition_183614' (line 359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 16), 'if_condition_183614', if_condition_183614)
    # SSA begins for if statement (line 359)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 360)
    # Processing the call arguments (line 360)
    # Getting the type of 'msg' (line 360)
    msg_183616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 41), 'msg', False)
    # Processing the call keyword arguments (line 360)
    kwargs_183617 = {}
    # Getting the type of 'AssertionError' (line 360)
    AssertionError_183615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 26), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 360)
    AssertionError_call_result_183618 = invoke(stypy.reporting.localization.Localization(__file__, 360, 26), AssertionError_183615, *[msg_183616], **kwargs_183617)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 360, 20), AssertionError_call_result_183618, 'raise parameter', BaseException)
    # SSA join for if statement (line 359)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 358)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Getting the type of 'desired' (line 362)
    desired_183619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 23), 'desired')
    # Getting the type of 'actual' (line 362)
    actual_183620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 34), 'actual')
    # Applying the binary operator '==' (line 362)
    result_eq_183621 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 23), '==', desired_183619, actual_183620)
    
    # Applying the 'not' unary operator (line 362)
    result_not__183622 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 19), 'not', result_eq_183621)
    
    # Testing the type of an if condition (line 362)
    if_condition_183623 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 362, 16), result_not__183622)
    # Assigning a type to the variable 'if_condition_183623' (line 362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 16), 'if_condition_183623', if_condition_183623)
    # SSA begins for if statement (line 362)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 363)
    # Processing the call arguments (line 363)
    # Getting the type of 'msg' (line 363)
    msg_183625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 41), 'msg', False)
    # Processing the call keyword arguments (line 363)
    kwargs_183626 = {}
    # Getting the type of 'AssertionError' (line 363)
    AssertionError_183624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 26), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 363)
    AssertionError_call_result_183627 = invoke(stypy.reporting.localization.Localization(__file__, 363, 26), AssertionError_183624, *[msg_183625], **kwargs_183626)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 363, 20), AssertionError_call_result_183627, 'raise parameter', BaseException)
    # SSA join for if statement (line 362)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 358)
    module_type_store = module_type_store.join_ssa_context()
    
    # Assigning a type to the variable 'stypy_return_type' (line 364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 12), 'stypy_return_type', types.NoneType)
    # SSA branch for the else part of an if statement (line 355)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'desired' (line 365)
    desired_183628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 13), 'desired')
    int_183629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 24), 'int')
    # Applying the binary operator '==' (line 365)
    result_eq_183630 = python_operator(stypy.reporting.localization.Localization(__file__, 365, 13), '==', desired_183628, int_183629)
    
    
    # Getting the type of 'actual' (line 365)
    actual_183631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 30), 'actual')
    int_183632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 40), 'int')
    # Applying the binary operator '==' (line 365)
    result_eq_183633 = python_operator(stypy.reporting.localization.Localization(__file__, 365, 30), '==', actual_183631, int_183632)
    
    # Applying the binary operator 'and' (line 365)
    result_and_keyword_183634 = python_operator(stypy.reporting.localization.Localization(__file__, 365, 13), 'and', result_eq_183630, result_eq_183633)
    
    # Testing the type of an if condition (line 365)
    if_condition_183635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 365, 13), result_and_keyword_183634)
    # Assigning a type to the variable 'if_condition_183635' (line 365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 13), 'if_condition_183635', if_condition_183635)
    # SSA begins for if statement (line 365)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    
    # Call to signbit(...): (line 366)
    # Processing the call arguments (line 366)
    # Getting the type of 'desired' (line 366)
    desired_183637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 27), 'desired', False)
    # Processing the call keyword arguments (line 366)
    kwargs_183638 = {}
    # Getting the type of 'signbit' (line 366)
    signbit_183636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 19), 'signbit', False)
    # Calling signbit(args, kwargs) (line 366)
    signbit_call_result_183639 = invoke(stypy.reporting.localization.Localization(__file__, 366, 19), signbit_183636, *[desired_183637], **kwargs_183638)
    
    
    # Call to signbit(...): (line 366)
    # Processing the call arguments (line 366)
    # Getting the type of 'actual' (line 366)
    actual_183641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 47), 'actual', False)
    # Processing the call keyword arguments (line 366)
    kwargs_183642 = {}
    # Getting the type of 'signbit' (line 366)
    signbit_183640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 39), 'signbit', False)
    # Calling signbit(args, kwargs) (line 366)
    signbit_call_result_183643 = invoke(stypy.reporting.localization.Localization(__file__, 366, 39), signbit_183640, *[actual_183641], **kwargs_183642)
    
    # Applying the binary operator '==' (line 366)
    result_eq_183644 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 19), '==', signbit_call_result_183639, signbit_call_result_183643)
    
    # Applying the 'not' unary operator (line 366)
    result_not__183645 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 15), 'not', result_eq_183644)
    
    # Testing the type of an if condition (line 366)
    if_condition_183646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 366, 12), result_not__183645)
    # Assigning a type to the variable 'if_condition_183646' (line 366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 12), 'if_condition_183646', if_condition_183646)
    # SSA begins for if statement (line 366)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 367)
    # Processing the call arguments (line 367)
    # Getting the type of 'msg' (line 367)
    msg_183648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 37), 'msg', False)
    # Processing the call keyword arguments (line 367)
    kwargs_183649 = {}
    # Getting the type of 'AssertionError' (line 367)
    AssertionError_183647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 22), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 367)
    AssertionError_call_result_183650 = invoke(stypy.reporting.localization.Localization(__file__, 367, 22), AssertionError_183647, *[msg_183648], **kwargs_183649)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 367, 16), AssertionError_call_result_183650, 'raise parameter', BaseException)
    # SSA join for if statement (line 366)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 365)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 355)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 347)
    # SSA branch for the except 'Tuple' branch of a try statement (line 347)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 347)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Getting the type of 'desired' (line 374)
    desired_183651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 12), 'desired')
    # Getting the type of 'actual' (line 374)
    actual_183652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 23), 'actual')
    # Applying the binary operator '==' (line 374)
    result_eq_183653 = python_operator(stypy.reporting.localization.Localization(__file__, 374, 12), '==', desired_183651, actual_183652)
    
    # Applying the 'not' unary operator (line 374)
    result_not__183654 = python_operator(stypy.reporting.localization.Localization(__file__, 374, 7), 'not', result_eq_183653)
    
    # Testing the type of an if condition (line 374)
    if_condition_183655 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 374, 4), result_not__183654)
    # Assigning a type to the variable 'if_condition_183655' (line 374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 4), 'if_condition_183655', if_condition_183655)
    # SSA begins for if statement (line 374)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 375)
    # Processing the call arguments (line 375)
    # Getting the type of 'msg' (line 375)
    msg_183657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 29), 'msg', False)
    # Processing the call keyword arguments (line 375)
    kwargs_183658 = {}
    # Getting the type of 'AssertionError' (line 375)
    AssertionError_183656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 14), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 375)
    AssertionError_call_result_183659 = invoke(stypy.reporting.localization.Localization(__file__, 375, 14), AssertionError_183656, *[msg_183657], **kwargs_183658)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 375, 8), AssertionError_call_result_183659, 'raise parameter', BaseException)
    # SSA join for if statement (line 374)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'assert_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 263)
    stypy_return_type_183660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183660)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_equal'
    return stypy_return_type_183660

# Assigning a type to the variable 'assert_equal' (line 263)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 0), 'assert_equal', assert_equal)

@norecursion
def print_assert_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'print_assert_equal'
    module_type_store = module_type_store.open_function_context('print_assert_equal', 377, 0, False)
    
    # Passed parameters checking function
    print_assert_equal.stypy_localization = localization
    print_assert_equal.stypy_type_of_self = None
    print_assert_equal.stypy_type_store = module_type_store
    print_assert_equal.stypy_function_name = 'print_assert_equal'
    print_assert_equal.stypy_param_names_list = ['test_string', 'actual', 'desired']
    print_assert_equal.stypy_varargs_param_name = None
    print_assert_equal.stypy_kwargs_param_name = None
    print_assert_equal.stypy_call_defaults = defaults
    print_assert_equal.stypy_call_varargs = varargs
    print_assert_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'print_assert_equal', ['test_string', 'actual', 'desired'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'print_assert_equal', localization, ['test_string', 'actual', 'desired'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'print_assert_equal(...)' code ##################

    str_183661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, (-1)), 'str', "\n    Test if two objects are equal, and print an error message if test fails.\n\n    The test is performed with ``actual == desired``.\n\n    Parameters\n    ----------\n    test_string : str\n        The message supplied to AssertionError.\n    actual : object\n        The object to test for equality against `desired`.\n    desired : object\n        The expected result.\n\n    Examples\n    --------\n    >>> np.testing.print_assert_equal('Test XYZ of func xyz', [0, 1], [0, 1])\n    >>> np.testing.print_assert_equal('Test XYZ of func xyz', [0, 1], [0, 2])\n    Traceback (most recent call last):\n    ...\n    AssertionError: Test XYZ of func xyz failed\n    ACTUAL:\n    [0, 1]\n    DESIRED:\n    [0, 2]\n\n    ")
    
    # Assigning a Name to a Name (line 405):
    
    # Assigning a Name to a Name (line 405):
    # Getting the type of 'True' (line 405)
    True_183662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 4), '__tracebackhide__', True_183662)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 406, 4))
    
    # 'import pprint' statement (line 406)
    import pprint

    import_module(stypy.reporting.localization.Localization(__file__, 406, 4), 'pprint', pprint, module_type_store)
    
    
    
    
    # Getting the type of 'actual' (line 408)
    actual_183663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 12), 'actual')
    # Getting the type of 'desired' (line 408)
    desired_183664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 22), 'desired')
    # Applying the binary operator '==' (line 408)
    result_eq_183665 = python_operator(stypy.reporting.localization.Localization(__file__, 408, 12), '==', actual_183663, desired_183664)
    
    # Applying the 'not' unary operator (line 408)
    result_not__183666 = python_operator(stypy.reporting.localization.Localization(__file__, 408, 7), 'not', result_eq_183665)
    
    # Testing the type of an if condition (line 408)
    if_condition_183667 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 408, 4), result_not__183666)
    # Assigning a type to the variable 'if_condition_183667' (line 408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 4), 'if_condition_183667', if_condition_183667)
    # SSA begins for if statement (line 408)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 409):
    
    # Assigning a Call to a Name (line 409):
    
    # Call to StringIO(...): (line 409)
    # Processing the call keyword arguments (line 409)
    kwargs_183669 = {}
    # Getting the type of 'StringIO' (line 409)
    StringIO_183668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 14), 'StringIO', False)
    # Calling StringIO(args, kwargs) (line 409)
    StringIO_call_result_183670 = invoke(stypy.reporting.localization.Localization(__file__, 409, 14), StringIO_183668, *[], **kwargs_183669)
    
    # Assigning a type to the variable 'msg' (line 409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'msg', StringIO_call_result_183670)
    
    # Call to write(...): (line 410)
    # Processing the call arguments (line 410)
    # Getting the type of 'test_string' (line 410)
    test_string_183673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 18), 'test_string', False)
    # Processing the call keyword arguments (line 410)
    kwargs_183674 = {}
    # Getting the type of 'msg' (line 410)
    msg_183671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'msg', False)
    # Obtaining the member 'write' of a type (line 410)
    write_183672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 8), msg_183671, 'write')
    # Calling write(args, kwargs) (line 410)
    write_call_result_183675 = invoke(stypy.reporting.localization.Localization(__file__, 410, 8), write_183672, *[test_string_183673], **kwargs_183674)
    
    
    # Call to write(...): (line 411)
    # Processing the call arguments (line 411)
    str_183678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 18), 'str', ' failed\nACTUAL: \n')
    # Processing the call keyword arguments (line 411)
    kwargs_183679 = {}
    # Getting the type of 'msg' (line 411)
    msg_183676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 8), 'msg', False)
    # Obtaining the member 'write' of a type (line 411)
    write_183677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 8), msg_183676, 'write')
    # Calling write(args, kwargs) (line 411)
    write_call_result_183680 = invoke(stypy.reporting.localization.Localization(__file__, 411, 8), write_183677, *[str_183678], **kwargs_183679)
    
    
    # Call to pprint(...): (line 412)
    # Processing the call arguments (line 412)
    # Getting the type of 'actual' (line 412)
    actual_183683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 22), 'actual', False)
    # Getting the type of 'msg' (line 412)
    msg_183684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 30), 'msg', False)
    # Processing the call keyword arguments (line 412)
    kwargs_183685 = {}
    # Getting the type of 'pprint' (line 412)
    pprint_183681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'pprint', False)
    # Obtaining the member 'pprint' of a type (line 412)
    pprint_183682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 8), pprint_183681, 'pprint')
    # Calling pprint(args, kwargs) (line 412)
    pprint_call_result_183686 = invoke(stypy.reporting.localization.Localization(__file__, 412, 8), pprint_183682, *[actual_183683, msg_183684], **kwargs_183685)
    
    
    # Call to write(...): (line 413)
    # Processing the call arguments (line 413)
    str_183689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 18), 'str', 'DESIRED: \n')
    # Processing the call keyword arguments (line 413)
    kwargs_183690 = {}
    # Getting the type of 'msg' (line 413)
    msg_183687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'msg', False)
    # Obtaining the member 'write' of a type (line 413)
    write_183688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 8), msg_183687, 'write')
    # Calling write(args, kwargs) (line 413)
    write_call_result_183691 = invoke(stypy.reporting.localization.Localization(__file__, 413, 8), write_183688, *[str_183689], **kwargs_183690)
    
    
    # Call to pprint(...): (line 414)
    # Processing the call arguments (line 414)
    # Getting the type of 'desired' (line 414)
    desired_183694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 22), 'desired', False)
    # Getting the type of 'msg' (line 414)
    msg_183695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 31), 'msg', False)
    # Processing the call keyword arguments (line 414)
    kwargs_183696 = {}
    # Getting the type of 'pprint' (line 414)
    pprint_183692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'pprint', False)
    # Obtaining the member 'pprint' of a type (line 414)
    pprint_183693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 8), pprint_183692, 'pprint')
    # Calling pprint(args, kwargs) (line 414)
    pprint_call_result_183697 = invoke(stypy.reporting.localization.Localization(__file__, 414, 8), pprint_183693, *[desired_183694, msg_183695], **kwargs_183696)
    
    
    # Call to AssertionError(...): (line 415)
    # Processing the call arguments (line 415)
    
    # Call to getvalue(...): (line 415)
    # Processing the call keyword arguments (line 415)
    kwargs_183701 = {}
    # Getting the type of 'msg' (line 415)
    msg_183699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 29), 'msg', False)
    # Obtaining the member 'getvalue' of a type (line 415)
    getvalue_183700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 29), msg_183699, 'getvalue')
    # Calling getvalue(args, kwargs) (line 415)
    getvalue_call_result_183702 = invoke(stypy.reporting.localization.Localization(__file__, 415, 29), getvalue_183700, *[], **kwargs_183701)
    
    # Processing the call keyword arguments (line 415)
    kwargs_183703 = {}
    # Getting the type of 'AssertionError' (line 415)
    AssertionError_183698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 14), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 415)
    AssertionError_call_result_183704 = invoke(stypy.reporting.localization.Localization(__file__, 415, 14), AssertionError_183698, *[getvalue_call_result_183702], **kwargs_183703)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 415, 8), AssertionError_call_result_183704, 'raise parameter', BaseException)
    # SSA join for if statement (line 408)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'print_assert_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'print_assert_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 377)
    stypy_return_type_183705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183705)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'print_assert_equal'
    return stypy_return_type_183705

# Assigning a type to the variable 'print_assert_equal' (line 377)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 0), 'print_assert_equal', print_assert_equal)

@norecursion
def assert_almost_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_183706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 47), 'int')
    str_183707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 57), 'str', '')
    # Getting the type of 'True' (line 417)
    True_183708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 68), 'True')
    defaults = [int_183706, str_183707, True_183708]
    # Create a new context for function 'assert_almost_equal'
    module_type_store = module_type_store.open_function_context('assert_almost_equal', 417, 0, False)
    
    # Passed parameters checking function
    assert_almost_equal.stypy_localization = localization
    assert_almost_equal.stypy_type_of_self = None
    assert_almost_equal.stypy_type_store = module_type_store
    assert_almost_equal.stypy_function_name = 'assert_almost_equal'
    assert_almost_equal.stypy_param_names_list = ['actual', 'desired', 'decimal', 'err_msg', 'verbose']
    assert_almost_equal.stypy_varargs_param_name = None
    assert_almost_equal.stypy_kwargs_param_name = None
    assert_almost_equal.stypy_call_defaults = defaults
    assert_almost_equal.stypy_call_varargs = varargs
    assert_almost_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_almost_equal', ['actual', 'desired', 'decimal', 'err_msg', 'verbose'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_almost_equal', localization, ['actual', 'desired', 'decimal', 'err_msg', 'verbose'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_almost_equal(...)' code ##################

    str_183709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, (-1)), 'str', "\n    Raises an AssertionError if two items are not equal up to desired\n    precision.\n\n    .. note:: It is recommended to use one of `assert_allclose`,\n              `assert_array_almost_equal_nulp` or `assert_array_max_ulp`\n              instead of this function for more consistent floating point\n              comparisons.\n\n    The test is equivalent to ``abs(desired-actual) < 0.5 * 10**(-decimal)``.\n\n    Given two objects (numbers or ndarrays), check that all elements of these\n    objects are almost equal. An exception is raised at conflicting values.\n    For ndarrays this delegates to assert_array_almost_equal\n\n    Parameters\n    ----------\n    actual : array_like\n        The object to check.\n    desired : array_like\n        The expected object.\n    decimal : int, optional\n        Desired precision, default is 7.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n      If actual and desired are not equal up to specified precision.\n\n    See Also\n    --------\n    assert_allclose: Compare two array_like objects for equality with desired\n                     relative and/or absolute precision.\n    assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal\n\n    Examples\n    --------\n    >>> import numpy.testing as npt\n    >>> npt.assert_almost_equal(2.3333333333333, 2.33333334)\n    >>> npt.assert_almost_equal(2.3333333333333, 2.33333334, decimal=10)\n    ...\n    <type 'exceptions.AssertionError'>:\n    Items are not equal:\n     ACTUAL: 2.3333333333333002\n     DESIRED: 2.3333333399999998\n\n    >>> npt.assert_almost_equal(np.array([1.0,2.3333333333333]),\n    ...                         np.array([1.0,2.33333334]), decimal=9)\n    ...\n    <type 'exceptions.AssertionError'>:\n    Arrays are not almost equal\n    <BLANKLINE>\n    (mismatch 50.0%)\n     x: array([ 1.        ,  2.33333333])\n     y: array([ 1.        ,  2.33333334])\n\n    ")
    
    # Assigning a Name to a Name (line 479):
    
    # Assigning a Name to a Name (line 479):
    # Getting the type of 'True' (line 479)
    True_183710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 4), '__tracebackhide__', True_183710)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 480, 4))
    
    # 'from numpy.core import ndarray' statement (line 480)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_183711 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 480, 4), 'numpy.core')

    if (type(import_183711) is not StypyTypeError):

        if (import_183711 != 'pyd_module'):
            __import__(import_183711)
            sys_modules_183712 = sys.modules[import_183711]
            import_from_module(stypy.reporting.localization.Localization(__file__, 480, 4), 'numpy.core', sys_modules_183712.module_type_store, module_type_store, ['ndarray'])
            nest_module(stypy.reporting.localization.Localization(__file__, 480, 4), __file__, sys_modules_183712, sys_modules_183712.module_type_store, module_type_store)
        else:
            from numpy.core import ndarray

            import_from_module(stypy.reporting.localization.Localization(__file__, 480, 4), 'numpy.core', None, module_type_store, ['ndarray'], [ndarray])

    else:
        # Assigning a type to the variable 'numpy.core' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 4), 'numpy.core', import_183711)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 481, 4))
    
    # 'from numpy.lib import iscomplexobj, real, imag' statement (line 481)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_183713 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 481, 4), 'numpy.lib')

    if (type(import_183713) is not StypyTypeError):

        if (import_183713 != 'pyd_module'):
            __import__(import_183713)
            sys_modules_183714 = sys.modules[import_183713]
            import_from_module(stypy.reporting.localization.Localization(__file__, 481, 4), 'numpy.lib', sys_modules_183714.module_type_store, module_type_store, ['iscomplexobj', 'real', 'imag'])
            nest_module(stypy.reporting.localization.Localization(__file__, 481, 4), __file__, sys_modules_183714, sys_modules_183714.module_type_store, module_type_store)
        else:
            from numpy.lib import iscomplexobj, real, imag

            import_from_module(stypy.reporting.localization.Localization(__file__, 481, 4), 'numpy.lib', None, module_type_store, ['iscomplexobj', 'real', 'imag'], [iscomplexobj, real, imag])

    else:
        # Assigning a type to the variable 'numpy.lib' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 4), 'numpy.lib', import_183713)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    
    # SSA begins for try-except statement (line 486)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a BoolOp to a Name (line 487):
    
    # Assigning a BoolOp to a Name (line 487):
    
    # Evaluating a boolean operation
    
    # Call to iscomplexobj(...): (line 487)
    # Processing the call arguments (line 487)
    # Getting the type of 'actual' (line 487)
    actual_183716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 34), 'actual', False)
    # Processing the call keyword arguments (line 487)
    kwargs_183717 = {}
    # Getting the type of 'iscomplexobj' (line 487)
    iscomplexobj_183715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 21), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 487)
    iscomplexobj_call_result_183718 = invoke(stypy.reporting.localization.Localization(__file__, 487, 21), iscomplexobj_183715, *[actual_183716], **kwargs_183717)
    
    
    # Call to iscomplexobj(...): (line 487)
    # Processing the call arguments (line 487)
    # Getting the type of 'desired' (line 487)
    desired_183720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 58), 'desired', False)
    # Processing the call keyword arguments (line 487)
    kwargs_183721 = {}
    # Getting the type of 'iscomplexobj' (line 487)
    iscomplexobj_183719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 45), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 487)
    iscomplexobj_call_result_183722 = invoke(stypy.reporting.localization.Localization(__file__, 487, 45), iscomplexobj_183719, *[desired_183720], **kwargs_183721)
    
    # Applying the binary operator 'or' (line 487)
    result_or_keyword_183723 = python_operator(stypy.reporting.localization.Localization(__file__, 487, 21), 'or', iscomplexobj_call_result_183718, iscomplexobj_call_result_183722)
    
    # Assigning a type to the variable 'usecomplex' (line 487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'usecomplex', result_or_keyword_183723)
    # SSA branch for the except part of a try statement (line 486)
    # SSA branch for the except 'ValueError' branch of a try statement (line 486)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Name to a Name (line 489):
    
    # Assigning a Name to a Name (line 489):
    # Getting the type of 'False' (line 489)
    False_183724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 21), 'False')
    # Assigning a type to the variable 'usecomplex' (line 489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'usecomplex', False_183724)
    # SSA join for try-except statement (line 486)
    module_type_store = module_type_store.join_ssa_context()
    

    @norecursion
    def _build_err_msg(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_build_err_msg'
        module_type_store = module_type_store.open_function_context('_build_err_msg', 491, 4, False)
        
        # Passed parameters checking function
        _build_err_msg.stypy_localization = localization
        _build_err_msg.stypy_type_of_self = None
        _build_err_msg.stypy_type_store = module_type_store
        _build_err_msg.stypy_function_name = '_build_err_msg'
        _build_err_msg.stypy_param_names_list = []
        _build_err_msg.stypy_varargs_param_name = None
        _build_err_msg.stypy_kwargs_param_name = None
        _build_err_msg.stypy_call_defaults = defaults
        _build_err_msg.stypy_call_varargs = varargs
        _build_err_msg.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_build_err_msg', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_build_err_msg', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_build_err_msg(...)' code ##################

        
        # Assigning a BinOp to a Name (line 492):
        
        # Assigning a BinOp to a Name (line 492):
        str_183725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 18), 'str', 'Arrays are not almost equal to %d decimals')
        # Getting the type of 'decimal' (line 492)
        decimal_183726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 65), 'decimal')
        # Applying the binary operator '%' (line 492)
        result_mod_183727 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 18), '%', str_183725, decimal_183726)
        
        # Assigning a type to the variable 'header' (line 492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'header', result_mod_183727)
        
        # Call to build_err_msg(...): (line 493)
        # Processing the call arguments (line 493)
        
        # Obtaining an instance of the builtin type 'list' (line 493)
        list_183729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 493)
        # Adding element type (line 493)
        # Getting the type of 'actual' (line 493)
        actual_183730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 30), 'actual', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 493, 29), list_183729, actual_183730)
        # Adding element type (line 493)
        # Getting the type of 'desired' (line 493)
        desired_183731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 38), 'desired', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 493, 29), list_183729, desired_183731)
        
        # Getting the type of 'err_msg' (line 493)
        err_msg_183732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 48), 'err_msg', False)
        # Processing the call keyword arguments (line 493)
        # Getting the type of 'verbose' (line 493)
        verbose_183733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 65), 'verbose', False)
        keyword_183734 = verbose_183733
        # Getting the type of 'header' (line 494)
        header_183735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 36), 'header', False)
        keyword_183736 = header_183735
        kwargs_183737 = {'header': keyword_183736, 'verbose': keyword_183734}
        # Getting the type of 'build_err_msg' (line 493)
        build_err_msg_183728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 15), 'build_err_msg', False)
        # Calling build_err_msg(args, kwargs) (line 493)
        build_err_msg_call_result_183738 = invoke(stypy.reporting.localization.Localization(__file__, 493, 15), build_err_msg_183728, *[list_183729, err_msg_183732], **kwargs_183737)
        
        # Assigning a type to the variable 'stypy_return_type' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'stypy_return_type', build_err_msg_call_result_183738)
        
        # ################# End of '_build_err_msg(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_build_err_msg' in the type store
        # Getting the type of 'stypy_return_type' (line 491)
        stypy_return_type_183739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_183739)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_build_err_msg'
        return stypy_return_type_183739

    # Assigning a type to the variable '_build_err_msg' (line 491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 4), '_build_err_msg', _build_err_msg)
    
    # Getting the type of 'usecomplex' (line 496)
    usecomplex_183740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 7), 'usecomplex')
    # Testing the type of an if condition (line 496)
    if_condition_183741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 496, 4), usecomplex_183740)
    # Assigning a type to the variable 'if_condition_183741' (line 496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 4), 'if_condition_183741', if_condition_183741)
    # SSA begins for if statement (line 496)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to iscomplexobj(...): (line 497)
    # Processing the call arguments (line 497)
    # Getting the type of 'actual' (line 497)
    actual_183743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 24), 'actual', False)
    # Processing the call keyword arguments (line 497)
    kwargs_183744 = {}
    # Getting the type of 'iscomplexobj' (line 497)
    iscomplexobj_183742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 11), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 497)
    iscomplexobj_call_result_183745 = invoke(stypy.reporting.localization.Localization(__file__, 497, 11), iscomplexobj_183742, *[actual_183743], **kwargs_183744)
    
    # Testing the type of an if condition (line 497)
    if_condition_183746 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 497, 8), iscomplexobj_call_result_183745)
    # Assigning a type to the variable 'if_condition_183746' (line 497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'if_condition_183746', if_condition_183746)
    # SSA begins for if statement (line 497)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 498):
    
    # Assigning a Call to a Name (line 498):
    
    # Call to real(...): (line 498)
    # Processing the call arguments (line 498)
    # Getting the type of 'actual' (line 498)
    actual_183748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 27), 'actual', False)
    # Processing the call keyword arguments (line 498)
    kwargs_183749 = {}
    # Getting the type of 'real' (line 498)
    real_183747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 22), 'real', False)
    # Calling real(args, kwargs) (line 498)
    real_call_result_183750 = invoke(stypy.reporting.localization.Localization(__file__, 498, 22), real_183747, *[actual_183748], **kwargs_183749)
    
    # Assigning a type to the variable 'actualr' (line 498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'actualr', real_call_result_183750)
    
    # Assigning a Call to a Name (line 499):
    
    # Assigning a Call to a Name (line 499):
    
    # Call to imag(...): (line 499)
    # Processing the call arguments (line 499)
    # Getting the type of 'actual' (line 499)
    actual_183752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 27), 'actual', False)
    # Processing the call keyword arguments (line 499)
    kwargs_183753 = {}
    # Getting the type of 'imag' (line 499)
    imag_183751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 22), 'imag', False)
    # Calling imag(args, kwargs) (line 499)
    imag_call_result_183754 = invoke(stypy.reporting.localization.Localization(__file__, 499, 22), imag_183751, *[actual_183752], **kwargs_183753)
    
    # Assigning a type to the variable 'actuali' (line 499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'actuali', imag_call_result_183754)
    # SSA branch for the else part of an if statement (line 497)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 501):
    
    # Assigning a Name to a Name (line 501):
    # Getting the type of 'actual' (line 501)
    actual_183755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 22), 'actual')
    # Assigning a type to the variable 'actualr' (line 501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 12), 'actualr', actual_183755)
    
    # Assigning a Num to a Name (line 502):
    
    # Assigning a Num to a Name (line 502):
    int_183756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 22), 'int')
    # Assigning a type to the variable 'actuali' (line 502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 12), 'actuali', int_183756)
    # SSA join for if statement (line 497)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to iscomplexobj(...): (line 503)
    # Processing the call arguments (line 503)
    # Getting the type of 'desired' (line 503)
    desired_183758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 24), 'desired', False)
    # Processing the call keyword arguments (line 503)
    kwargs_183759 = {}
    # Getting the type of 'iscomplexobj' (line 503)
    iscomplexobj_183757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 11), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 503)
    iscomplexobj_call_result_183760 = invoke(stypy.reporting.localization.Localization(__file__, 503, 11), iscomplexobj_183757, *[desired_183758], **kwargs_183759)
    
    # Testing the type of an if condition (line 503)
    if_condition_183761 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 503, 8), iscomplexobj_call_result_183760)
    # Assigning a type to the variable 'if_condition_183761' (line 503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 8), 'if_condition_183761', if_condition_183761)
    # SSA begins for if statement (line 503)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 504):
    
    # Assigning a Call to a Name (line 504):
    
    # Call to real(...): (line 504)
    # Processing the call arguments (line 504)
    # Getting the type of 'desired' (line 504)
    desired_183763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 28), 'desired', False)
    # Processing the call keyword arguments (line 504)
    kwargs_183764 = {}
    # Getting the type of 'real' (line 504)
    real_183762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 23), 'real', False)
    # Calling real(args, kwargs) (line 504)
    real_call_result_183765 = invoke(stypy.reporting.localization.Localization(__file__, 504, 23), real_183762, *[desired_183763], **kwargs_183764)
    
    # Assigning a type to the variable 'desiredr' (line 504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 12), 'desiredr', real_call_result_183765)
    
    # Assigning a Call to a Name (line 505):
    
    # Assigning a Call to a Name (line 505):
    
    # Call to imag(...): (line 505)
    # Processing the call arguments (line 505)
    # Getting the type of 'desired' (line 505)
    desired_183767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 28), 'desired', False)
    # Processing the call keyword arguments (line 505)
    kwargs_183768 = {}
    # Getting the type of 'imag' (line 505)
    imag_183766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 23), 'imag', False)
    # Calling imag(args, kwargs) (line 505)
    imag_call_result_183769 = invoke(stypy.reporting.localization.Localization(__file__, 505, 23), imag_183766, *[desired_183767], **kwargs_183768)
    
    # Assigning a type to the variable 'desiredi' (line 505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 12), 'desiredi', imag_call_result_183769)
    # SSA branch for the else part of an if statement (line 503)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 507):
    
    # Assigning a Name to a Name (line 507):
    # Getting the type of 'desired' (line 507)
    desired_183770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 23), 'desired')
    # Assigning a type to the variable 'desiredr' (line 507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 507, 12), 'desiredr', desired_183770)
    
    # Assigning a Num to a Name (line 508):
    
    # Assigning a Num to a Name (line 508):
    int_183771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 23), 'int')
    # Assigning a type to the variable 'desiredi' (line 508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 12), 'desiredi', int_183771)
    # SSA join for if statement (line 503)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 509)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to assert_almost_equal(...): (line 510)
    # Processing the call arguments (line 510)
    # Getting the type of 'actualr' (line 510)
    actualr_183773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 32), 'actualr', False)
    # Getting the type of 'desiredr' (line 510)
    desiredr_183774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 41), 'desiredr', False)
    # Processing the call keyword arguments (line 510)
    # Getting the type of 'decimal' (line 510)
    decimal_183775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 59), 'decimal', False)
    keyword_183776 = decimal_183775
    kwargs_183777 = {'decimal': keyword_183776}
    # Getting the type of 'assert_almost_equal' (line 510)
    assert_almost_equal_183772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 12), 'assert_almost_equal', False)
    # Calling assert_almost_equal(args, kwargs) (line 510)
    assert_almost_equal_call_result_183778 = invoke(stypy.reporting.localization.Localization(__file__, 510, 12), assert_almost_equal_183772, *[actualr_183773, desiredr_183774], **kwargs_183777)
    
    
    # Call to assert_almost_equal(...): (line 511)
    # Processing the call arguments (line 511)
    # Getting the type of 'actuali' (line 511)
    actuali_183780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 32), 'actuali', False)
    # Getting the type of 'desiredi' (line 511)
    desiredi_183781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 41), 'desiredi', False)
    # Processing the call keyword arguments (line 511)
    # Getting the type of 'decimal' (line 511)
    decimal_183782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 59), 'decimal', False)
    keyword_183783 = decimal_183782
    kwargs_183784 = {'decimal': keyword_183783}
    # Getting the type of 'assert_almost_equal' (line 511)
    assert_almost_equal_183779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 12), 'assert_almost_equal', False)
    # Calling assert_almost_equal(args, kwargs) (line 511)
    assert_almost_equal_call_result_183785 = invoke(stypy.reporting.localization.Localization(__file__, 511, 12), assert_almost_equal_183779, *[actuali_183780, desiredi_183781], **kwargs_183784)
    
    # SSA branch for the except part of a try statement (line 509)
    # SSA branch for the except 'AssertionError' branch of a try statement (line 509)
    module_type_store.open_ssa_branch('except')
    
    # Call to AssertionError(...): (line 513)
    # Processing the call arguments (line 513)
    
    # Call to _build_err_msg(...): (line 513)
    # Processing the call keyword arguments (line 513)
    kwargs_183788 = {}
    # Getting the type of '_build_err_msg' (line 513)
    _build_err_msg_183787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 33), '_build_err_msg', False)
    # Calling _build_err_msg(args, kwargs) (line 513)
    _build_err_msg_call_result_183789 = invoke(stypy.reporting.localization.Localization(__file__, 513, 33), _build_err_msg_183787, *[], **kwargs_183788)
    
    # Processing the call keyword arguments (line 513)
    kwargs_183790 = {}
    # Getting the type of 'AssertionError' (line 513)
    AssertionError_183786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 18), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 513)
    AssertionError_call_result_183791 = invoke(stypy.reporting.localization.Localization(__file__, 513, 18), AssertionError_183786, *[_build_err_msg_call_result_183789], **kwargs_183790)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 513, 12), AssertionError_call_result_183791, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 509)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 496)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 515)
    # Processing the call arguments (line 515)
    # Getting the type of 'actual' (line 515)
    actual_183793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 18), 'actual', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 515)
    tuple_183794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 515)
    # Adding element type (line 515)
    # Getting the type of 'ndarray' (line 515)
    ndarray_183795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 27), 'ndarray', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 515, 27), tuple_183794, ndarray_183795)
    # Adding element type (line 515)
    # Getting the type of 'tuple' (line 515)
    tuple_183796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 36), 'tuple', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 515, 27), tuple_183794, tuple_183796)
    # Adding element type (line 515)
    # Getting the type of 'list' (line 515)
    list_183797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 43), 'list', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 515, 27), tuple_183794, list_183797)
    
    # Processing the call keyword arguments (line 515)
    kwargs_183798 = {}
    # Getting the type of 'isinstance' (line 515)
    isinstance_183792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 515)
    isinstance_call_result_183799 = invoke(stypy.reporting.localization.Localization(__file__, 515, 7), isinstance_183792, *[actual_183793, tuple_183794], **kwargs_183798)
    
    
    # Call to isinstance(...): (line 516)
    # Processing the call arguments (line 516)
    # Getting the type of 'desired' (line 516)
    desired_183801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 26), 'desired', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 516)
    tuple_183802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 516)
    # Adding element type (line 516)
    # Getting the type of 'ndarray' (line 516)
    ndarray_183803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 36), 'ndarray', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 516, 36), tuple_183802, ndarray_183803)
    # Adding element type (line 516)
    # Getting the type of 'tuple' (line 516)
    tuple_183804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 45), 'tuple', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 516, 36), tuple_183802, tuple_183804)
    # Adding element type (line 516)
    # Getting the type of 'list' (line 516)
    list_183805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 52), 'list', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 516, 36), tuple_183802, list_183805)
    
    # Processing the call keyword arguments (line 516)
    kwargs_183806 = {}
    # Getting the type of 'isinstance' (line 516)
    isinstance_183800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 516)
    isinstance_call_result_183807 = invoke(stypy.reporting.localization.Localization(__file__, 516, 15), isinstance_183800, *[desired_183801, tuple_183802], **kwargs_183806)
    
    # Applying the binary operator 'or' (line 515)
    result_or_keyword_183808 = python_operator(stypy.reporting.localization.Localization(__file__, 515, 7), 'or', isinstance_call_result_183799, isinstance_call_result_183807)
    
    # Testing the type of an if condition (line 515)
    if_condition_183809 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 515, 4), result_or_keyword_183808)
    # Assigning a type to the variable 'if_condition_183809' (line 515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'if_condition_183809', if_condition_183809)
    # SSA begins for if statement (line 515)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to assert_array_almost_equal(...): (line 517)
    # Processing the call arguments (line 517)
    # Getting the type of 'actual' (line 517)
    actual_183811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 41), 'actual', False)
    # Getting the type of 'desired' (line 517)
    desired_183812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 49), 'desired', False)
    # Getting the type of 'decimal' (line 517)
    decimal_183813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 58), 'decimal', False)
    # Getting the type of 'err_msg' (line 517)
    err_msg_183814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 67), 'err_msg', False)
    # Processing the call keyword arguments (line 517)
    kwargs_183815 = {}
    # Getting the type of 'assert_array_almost_equal' (line 517)
    assert_array_almost_equal_183810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 15), 'assert_array_almost_equal', False)
    # Calling assert_array_almost_equal(args, kwargs) (line 517)
    assert_array_almost_equal_call_result_183816 = invoke(stypy.reporting.localization.Localization(__file__, 517, 15), assert_array_almost_equal_183810, *[actual_183811, desired_183812, decimal_183813, err_msg_183814], **kwargs_183815)
    
    # Assigning a type to the variable 'stypy_return_type' (line 517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 8), 'stypy_return_type', assert_array_almost_equal_call_result_183816)
    # SSA join for if statement (line 515)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 518)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    
    # Evaluating a boolean operation
    
    # Call to gisfinite(...): (line 522)
    # Processing the call arguments (line 522)
    # Getting the type of 'desired' (line 522)
    desired_183818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 26), 'desired', False)
    # Processing the call keyword arguments (line 522)
    kwargs_183819 = {}
    # Getting the type of 'gisfinite' (line 522)
    gisfinite_183817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 16), 'gisfinite', False)
    # Calling gisfinite(args, kwargs) (line 522)
    gisfinite_call_result_183820 = invoke(stypy.reporting.localization.Localization(__file__, 522, 16), gisfinite_183817, *[desired_183818], **kwargs_183819)
    
    
    # Call to gisfinite(...): (line 522)
    # Processing the call arguments (line 522)
    # Getting the type of 'actual' (line 522)
    actual_183822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 49), 'actual', False)
    # Processing the call keyword arguments (line 522)
    kwargs_183823 = {}
    # Getting the type of 'gisfinite' (line 522)
    gisfinite_183821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 39), 'gisfinite', False)
    # Calling gisfinite(args, kwargs) (line 522)
    gisfinite_call_result_183824 = invoke(stypy.reporting.localization.Localization(__file__, 522, 39), gisfinite_183821, *[actual_183822], **kwargs_183823)
    
    # Applying the binary operator 'and' (line 522)
    result_and_keyword_183825 = python_operator(stypy.reporting.localization.Localization(__file__, 522, 16), 'and', gisfinite_call_result_183820, gisfinite_call_result_183824)
    
    # Applying the 'not' unary operator (line 522)
    result_not__183826 = python_operator(stypy.reporting.localization.Localization(__file__, 522, 11), 'not', result_and_keyword_183825)
    
    # Testing the type of an if condition (line 522)
    if_condition_183827 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 522, 8), result_not__183826)
    # Assigning a type to the variable 'if_condition_183827' (line 522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'if_condition_183827', if_condition_183827)
    # SSA begins for if statement (line 522)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Call to gisnan(...): (line 523)
    # Processing the call arguments (line 523)
    # Getting the type of 'desired' (line 523)
    desired_183829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 22), 'desired', False)
    # Processing the call keyword arguments (line 523)
    kwargs_183830 = {}
    # Getting the type of 'gisnan' (line 523)
    gisnan_183828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 15), 'gisnan', False)
    # Calling gisnan(args, kwargs) (line 523)
    gisnan_call_result_183831 = invoke(stypy.reporting.localization.Localization(__file__, 523, 15), gisnan_183828, *[desired_183829], **kwargs_183830)
    
    
    # Call to gisnan(...): (line 523)
    # Processing the call arguments (line 523)
    # Getting the type of 'actual' (line 523)
    actual_183833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 41), 'actual', False)
    # Processing the call keyword arguments (line 523)
    kwargs_183834 = {}
    # Getting the type of 'gisnan' (line 523)
    gisnan_183832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 34), 'gisnan', False)
    # Calling gisnan(args, kwargs) (line 523)
    gisnan_call_result_183835 = invoke(stypy.reporting.localization.Localization(__file__, 523, 34), gisnan_183832, *[actual_183833], **kwargs_183834)
    
    # Applying the binary operator 'or' (line 523)
    result_or_keyword_183836 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 15), 'or', gisnan_call_result_183831, gisnan_call_result_183835)
    
    # Testing the type of an if condition (line 523)
    if_condition_183837 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 523, 12), result_or_keyword_183836)
    # Assigning a type to the variable 'if_condition_183837' (line 523)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 12), 'if_condition_183837', if_condition_183837)
    # SSA begins for if statement (line 523)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Evaluating a boolean operation
    
    # Call to gisnan(...): (line 524)
    # Processing the call arguments (line 524)
    # Getting the type of 'desired' (line 524)
    desired_183839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 31), 'desired', False)
    # Processing the call keyword arguments (line 524)
    kwargs_183840 = {}
    # Getting the type of 'gisnan' (line 524)
    gisnan_183838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 24), 'gisnan', False)
    # Calling gisnan(args, kwargs) (line 524)
    gisnan_call_result_183841 = invoke(stypy.reporting.localization.Localization(__file__, 524, 24), gisnan_183838, *[desired_183839], **kwargs_183840)
    
    
    # Call to gisnan(...): (line 524)
    # Processing the call arguments (line 524)
    # Getting the type of 'actual' (line 524)
    actual_183843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 51), 'actual', False)
    # Processing the call keyword arguments (line 524)
    kwargs_183844 = {}
    # Getting the type of 'gisnan' (line 524)
    gisnan_183842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 44), 'gisnan', False)
    # Calling gisnan(args, kwargs) (line 524)
    gisnan_call_result_183845 = invoke(stypy.reporting.localization.Localization(__file__, 524, 44), gisnan_183842, *[actual_183843], **kwargs_183844)
    
    # Applying the binary operator 'and' (line 524)
    result_and_keyword_183846 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 24), 'and', gisnan_call_result_183841, gisnan_call_result_183845)
    
    # Applying the 'not' unary operator (line 524)
    result_not__183847 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 19), 'not', result_and_keyword_183846)
    
    # Testing the type of an if condition (line 524)
    if_condition_183848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 524, 16), result_not__183847)
    # Assigning a type to the variable 'if_condition_183848' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 16), 'if_condition_183848', if_condition_183848)
    # SSA begins for if statement (line 524)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 525)
    # Processing the call arguments (line 525)
    
    # Call to _build_err_msg(...): (line 525)
    # Processing the call keyword arguments (line 525)
    kwargs_183851 = {}
    # Getting the type of '_build_err_msg' (line 525)
    _build_err_msg_183850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 41), '_build_err_msg', False)
    # Calling _build_err_msg(args, kwargs) (line 525)
    _build_err_msg_call_result_183852 = invoke(stypy.reporting.localization.Localization(__file__, 525, 41), _build_err_msg_183850, *[], **kwargs_183851)
    
    # Processing the call keyword arguments (line 525)
    kwargs_183853 = {}
    # Getting the type of 'AssertionError' (line 525)
    AssertionError_183849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 26), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 525)
    AssertionError_call_result_183854 = invoke(stypy.reporting.localization.Localization(__file__, 525, 26), AssertionError_183849, *[_build_err_msg_call_result_183852], **kwargs_183853)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 525, 20), AssertionError_call_result_183854, 'raise parameter', BaseException)
    # SSA join for if statement (line 524)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 523)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Getting the type of 'desired' (line 527)
    desired_183855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 23), 'desired')
    # Getting the type of 'actual' (line 527)
    actual_183856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 34), 'actual')
    # Applying the binary operator '==' (line 527)
    result_eq_183857 = python_operator(stypy.reporting.localization.Localization(__file__, 527, 23), '==', desired_183855, actual_183856)
    
    # Applying the 'not' unary operator (line 527)
    result_not__183858 = python_operator(stypy.reporting.localization.Localization(__file__, 527, 19), 'not', result_eq_183857)
    
    # Testing the type of an if condition (line 527)
    if_condition_183859 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 527, 16), result_not__183858)
    # Assigning a type to the variable 'if_condition_183859' (line 527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 16), 'if_condition_183859', if_condition_183859)
    # SSA begins for if statement (line 527)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 528)
    # Processing the call arguments (line 528)
    
    # Call to _build_err_msg(...): (line 528)
    # Processing the call keyword arguments (line 528)
    kwargs_183862 = {}
    # Getting the type of '_build_err_msg' (line 528)
    _build_err_msg_183861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 41), '_build_err_msg', False)
    # Calling _build_err_msg(args, kwargs) (line 528)
    _build_err_msg_call_result_183863 = invoke(stypy.reporting.localization.Localization(__file__, 528, 41), _build_err_msg_183861, *[], **kwargs_183862)
    
    # Processing the call keyword arguments (line 528)
    kwargs_183864 = {}
    # Getting the type of 'AssertionError' (line 528)
    AssertionError_183860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 26), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 528)
    AssertionError_call_result_183865 = invoke(stypy.reporting.localization.Localization(__file__, 528, 26), AssertionError_183860, *[_build_err_msg_call_result_183863], **kwargs_183864)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 528, 20), AssertionError_call_result_183865, 'raise parameter', BaseException)
    # SSA join for if statement (line 527)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 523)
    module_type_store = module_type_store.join_ssa_context()
    
    # Assigning a type to the variable 'stypy_return_type' (line 529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 12), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 522)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 518)
    # SSA branch for the except 'Tuple' branch of a try statement (line 518)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 518)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to round(...): (line 532)
    # Processing the call arguments (line 532)
    
    # Call to abs(...): (line 532)
    # Processing the call arguments (line 532)
    # Getting the type of 'desired' (line 532)
    desired_183868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 17), 'desired', False)
    # Getting the type of 'actual' (line 532)
    actual_183869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 27), 'actual', False)
    # Applying the binary operator '-' (line 532)
    result_sub_183870 = python_operator(stypy.reporting.localization.Localization(__file__, 532, 17), '-', desired_183868, actual_183869)
    
    # Processing the call keyword arguments (line 532)
    kwargs_183871 = {}
    # Getting the type of 'abs' (line 532)
    abs_183867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 13), 'abs', False)
    # Calling abs(args, kwargs) (line 532)
    abs_call_result_183872 = invoke(stypy.reporting.localization.Localization(__file__, 532, 13), abs_183867, *[result_sub_183870], **kwargs_183871)
    
    # Getting the type of 'decimal' (line 532)
    decimal_183873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 36), 'decimal', False)
    # Processing the call keyword arguments (line 532)
    kwargs_183874 = {}
    # Getting the type of 'round' (line 532)
    round_183866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 7), 'round', False)
    # Calling round(args, kwargs) (line 532)
    round_call_result_183875 = invoke(stypy.reporting.localization.Localization(__file__, 532, 7), round_183866, *[abs_call_result_183872, decimal_183873], **kwargs_183874)
    
    int_183876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 48), 'int')
    # Applying the binary operator '!=' (line 532)
    result_ne_183877 = python_operator(stypy.reporting.localization.Localization(__file__, 532, 7), '!=', round_call_result_183875, int_183876)
    
    # Testing the type of an if condition (line 532)
    if_condition_183878 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 532, 4), result_ne_183877)
    # Assigning a type to the variable 'if_condition_183878' (line 532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 4), 'if_condition_183878', if_condition_183878)
    # SSA begins for if statement (line 532)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 533)
    # Processing the call arguments (line 533)
    
    # Call to _build_err_msg(...): (line 533)
    # Processing the call keyword arguments (line 533)
    kwargs_183881 = {}
    # Getting the type of '_build_err_msg' (line 533)
    _build_err_msg_183880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 29), '_build_err_msg', False)
    # Calling _build_err_msg(args, kwargs) (line 533)
    _build_err_msg_call_result_183882 = invoke(stypy.reporting.localization.Localization(__file__, 533, 29), _build_err_msg_183880, *[], **kwargs_183881)
    
    # Processing the call keyword arguments (line 533)
    kwargs_183883 = {}
    # Getting the type of 'AssertionError' (line 533)
    AssertionError_183879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 14), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 533)
    AssertionError_call_result_183884 = invoke(stypy.reporting.localization.Localization(__file__, 533, 14), AssertionError_183879, *[_build_err_msg_call_result_183882], **kwargs_183883)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 533, 8), AssertionError_call_result_183884, 'raise parameter', BaseException)
    # SSA join for if statement (line 532)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'assert_almost_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_almost_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 417)
    stypy_return_type_183885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183885)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_almost_equal'
    return stypy_return_type_183885

# Assigning a type to the variable 'assert_almost_equal' (line 417)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 0), 'assert_almost_equal', assert_almost_equal)

@norecursion
def assert_approx_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_183886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 51), 'int')
    str_183887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 61), 'str', '')
    # Getting the type of 'True' (line 536)
    True_183888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 72), 'True')
    defaults = [int_183886, str_183887, True_183888]
    # Create a new context for function 'assert_approx_equal'
    module_type_store = module_type_store.open_function_context('assert_approx_equal', 536, 0, False)
    
    # Passed parameters checking function
    assert_approx_equal.stypy_localization = localization
    assert_approx_equal.stypy_type_of_self = None
    assert_approx_equal.stypy_type_store = module_type_store
    assert_approx_equal.stypy_function_name = 'assert_approx_equal'
    assert_approx_equal.stypy_param_names_list = ['actual', 'desired', 'significant', 'err_msg', 'verbose']
    assert_approx_equal.stypy_varargs_param_name = None
    assert_approx_equal.stypy_kwargs_param_name = None
    assert_approx_equal.stypy_call_defaults = defaults
    assert_approx_equal.stypy_call_varargs = varargs
    assert_approx_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_approx_equal', ['actual', 'desired', 'significant', 'err_msg', 'verbose'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_approx_equal', localization, ['actual', 'desired', 'significant', 'err_msg', 'verbose'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_approx_equal(...)' code ##################

    str_183889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, (-1)), 'str', "\n    Raises an AssertionError if two items are not equal up to significant\n    digits.\n\n    .. note:: It is recommended to use one of `assert_allclose`,\n              `assert_array_almost_equal_nulp` or `assert_array_max_ulp`\n              instead of this function for more consistent floating point\n              comparisons.\n\n    Given two numbers, check that they are approximately equal.\n    Approximately equal is defined as the number of significant digits\n    that agree.\n\n    Parameters\n    ----------\n    actual : scalar\n        The object to check.\n    desired : scalar\n        The expected object.\n    significant : int, optional\n        Desired precision, default is 7.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n      If actual and desired are not equal up to specified precision.\n\n    See Also\n    --------\n    assert_allclose: Compare two array_like objects for equality with desired\n                     relative and/or absolute precision.\n    assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal\n\n    Examples\n    --------\n    >>> np.testing.assert_approx_equal(0.12345677777777e-20, 0.1234567e-20)\n    >>> np.testing.assert_approx_equal(0.12345670e-20, 0.12345671e-20,\n                                       significant=8)\n    >>> np.testing.assert_approx_equal(0.12345670e-20, 0.12345672e-20,\n                                       significant=8)\n    ...\n    <type 'exceptions.AssertionError'>:\n    Items are not equal to 8 significant digits:\n     ACTUAL: 1.234567e-021\n     DESIRED: 1.2345672000000001e-021\n\n    the evaluated condition that raises the exception is\n\n    >>> abs(0.12345670e-20/1e-21 - 0.12345672e-20/1e-21) >= 10**-(8-1)\n    True\n\n    ")
    
    # Assigning a Name to a Name (line 593):
    
    # Assigning a Name to a Name (line 593):
    # Getting the type of 'True' (line 593)
    True_183890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 4), '__tracebackhide__', True_183890)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 594, 4))
    
    # 'import numpy' statement (line 594)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_183891 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 594, 4), 'numpy')

    if (type(import_183891) is not StypyTypeError):

        if (import_183891 != 'pyd_module'):
            __import__(import_183891)
            sys_modules_183892 = sys.modules[import_183891]
            import_module(stypy.reporting.localization.Localization(__file__, 594, 4), 'np', sys_modules_183892.module_type_store, module_type_store)
        else:
            import numpy as np

            import_module(stypy.reporting.localization.Localization(__file__, 594, 4), 'np', numpy, module_type_store)

    else:
        # Assigning a type to the variable 'numpy' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 4), 'numpy', import_183891)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Assigning a Call to a Tuple (line 596):
    
    # Assigning a Call to a Name:
    
    # Call to map(...): (line 596)
    # Processing the call arguments (line 596)
    # Getting the type of 'float' (line 596)
    float_183894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 28), 'float', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 596)
    tuple_183895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 596)
    # Adding element type (line 596)
    # Getting the type of 'actual' (line 596)
    actual_183896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 36), 'actual', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 596, 36), tuple_183895, actual_183896)
    # Adding element type (line 596)
    # Getting the type of 'desired' (line 596)
    desired_183897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 44), 'desired', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 596, 36), tuple_183895, desired_183897)
    
    # Processing the call keyword arguments (line 596)
    kwargs_183898 = {}
    # Getting the type of 'map' (line 596)
    map_183893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 24), 'map', False)
    # Calling map(args, kwargs) (line 596)
    map_call_result_183899 = invoke(stypy.reporting.localization.Localization(__file__, 596, 24), map_183893, *[float_183894, tuple_183895], **kwargs_183898)
    
    # Assigning a type to the variable 'call_assignment_182826' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'call_assignment_182826', map_call_result_183899)
    
    # Assigning a Call to a Name (line 596):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_183902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 4), 'int')
    # Processing the call keyword arguments
    kwargs_183903 = {}
    # Getting the type of 'call_assignment_182826' (line 596)
    call_assignment_182826_183900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'call_assignment_182826', False)
    # Obtaining the member '__getitem__' of a type (line 596)
    getitem___183901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 4), call_assignment_182826_183900, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_183904 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___183901, *[int_183902], **kwargs_183903)
    
    # Assigning a type to the variable 'call_assignment_182827' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'call_assignment_182827', getitem___call_result_183904)
    
    # Assigning a Name to a Name (line 596):
    # Getting the type of 'call_assignment_182827' (line 596)
    call_assignment_182827_183905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'call_assignment_182827')
    # Assigning a type to the variable 'actual' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 5), 'actual', call_assignment_182827_183905)
    
    # Assigning a Call to a Name (line 596):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_183908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 4), 'int')
    # Processing the call keyword arguments
    kwargs_183909 = {}
    # Getting the type of 'call_assignment_182826' (line 596)
    call_assignment_182826_183906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'call_assignment_182826', False)
    # Obtaining the member '__getitem__' of a type (line 596)
    getitem___183907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 4), call_assignment_182826_183906, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_183910 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___183907, *[int_183908], **kwargs_183909)
    
    # Assigning a type to the variable 'call_assignment_182828' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'call_assignment_182828', getitem___call_result_183910)
    
    # Assigning a Name to a Name (line 596):
    # Getting the type of 'call_assignment_182828' (line 596)
    call_assignment_182828_183911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'call_assignment_182828')
    # Assigning a type to the variable 'desired' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 13), 'desired', call_assignment_182828_183911)
    
    
    # Getting the type of 'desired' (line 597)
    desired_183912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 7), 'desired')
    # Getting the type of 'actual' (line 597)
    actual_183913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 18), 'actual')
    # Applying the binary operator '==' (line 597)
    result_eq_183914 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 7), '==', desired_183912, actual_183913)
    
    # Testing the type of an if condition (line 597)
    if_condition_183915 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 597, 4), result_eq_183914)
    # Assigning a type to the variable 'if_condition_183915' (line 597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 4), 'if_condition_183915', if_condition_183915)
    # SSA begins for if statement (line 597)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Assigning a type to the variable 'stypy_return_type' (line 598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 597)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to errstate(...): (line 601)
    # Processing the call keyword arguments (line 601)
    str_183918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 29), 'str', 'ignore')
    keyword_183919 = str_183918
    kwargs_183920 = {'invalid': keyword_183919}
    # Getting the type of 'np' (line 601)
    np_183916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 9), 'np', False)
    # Obtaining the member 'errstate' of a type (line 601)
    errstate_183917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 9), np_183916, 'errstate')
    # Calling errstate(args, kwargs) (line 601)
    errstate_call_result_183921 = invoke(stypy.reporting.localization.Localization(__file__, 601, 9), errstate_183917, *[], **kwargs_183920)
    
    with_183922 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 601, 9), errstate_call_result_183921, 'with parameter', '__enter__', '__exit__')

    if with_183922:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 601)
        enter___183923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 9), errstate_call_result_183921, '__enter__')
        with_enter_183924 = invoke(stypy.reporting.localization.Localization(__file__, 601, 9), enter___183923)
        
        # Assigning a BinOp to a Name (line 602):
        
        # Assigning a BinOp to a Name (line 602):
        float_183925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 16), 'float')
        
        # Call to abs(...): (line 602)
        # Processing the call arguments (line 602)
        # Getting the type of 'desired' (line 602)
        desired_183928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 28), 'desired', False)
        # Processing the call keyword arguments (line 602)
        kwargs_183929 = {}
        # Getting the type of 'np' (line 602)
        np_183926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 21), 'np', False)
        # Obtaining the member 'abs' of a type (line 602)
        abs_183927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 21), np_183926, 'abs')
        # Calling abs(args, kwargs) (line 602)
        abs_call_result_183930 = invoke(stypy.reporting.localization.Localization(__file__, 602, 21), abs_183927, *[desired_183928], **kwargs_183929)
        
        
        # Call to abs(...): (line 602)
        # Processing the call arguments (line 602)
        # Getting the type of 'actual' (line 602)
        actual_183933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 46), 'actual', False)
        # Processing the call keyword arguments (line 602)
        kwargs_183934 = {}
        # Getting the type of 'np' (line 602)
        np_183931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 39), 'np', False)
        # Obtaining the member 'abs' of a type (line 602)
        abs_183932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 39), np_183931, 'abs')
        # Calling abs(args, kwargs) (line 602)
        abs_call_result_183935 = invoke(stypy.reporting.localization.Localization(__file__, 602, 39), abs_183932, *[actual_183933], **kwargs_183934)
        
        # Applying the binary operator '+' (line 602)
        result_add_183936 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 21), '+', abs_call_result_183930, abs_call_result_183935)
        
        # Applying the binary operator '*' (line 602)
        result_mul_183937 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 16), '*', float_183925, result_add_183936)
        
        # Assigning a type to the variable 'scale' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'scale', result_mul_183937)
        
        # Assigning a Call to a Name (line 603):
        
        # Assigning a Call to a Name (line 603):
        
        # Call to power(...): (line 603)
        # Processing the call arguments (line 603)
        int_183940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 25), 'int')
        
        # Call to floor(...): (line 603)
        # Processing the call arguments (line 603)
        
        # Call to log10(...): (line 603)
        # Processing the call arguments (line 603)
        # Getting the type of 'scale' (line 603)
        scale_183945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 47), 'scale', False)
        # Processing the call keyword arguments (line 603)
        kwargs_183946 = {}
        # Getting the type of 'np' (line 603)
        np_183943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 38), 'np', False)
        # Obtaining the member 'log10' of a type (line 603)
        log10_183944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 38), np_183943, 'log10')
        # Calling log10(args, kwargs) (line 603)
        log10_call_result_183947 = invoke(stypy.reporting.localization.Localization(__file__, 603, 38), log10_183944, *[scale_183945], **kwargs_183946)
        
        # Processing the call keyword arguments (line 603)
        kwargs_183948 = {}
        # Getting the type of 'np' (line 603)
        np_183941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 29), 'np', False)
        # Obtaining the member 'floor' of a type (line 603)
        floor_183942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 29), np_183941, 'floor')
        # Calling floor(args, kwargs) (line 603)
        floor_call_result_183949 = invoke(stypy.reporting.localization.Localization(__file__, 603, 29), floor_183942, *[log10_call_result_183947], **kwargs_183948)
        
        # Processing the call keyword arguments (line 603)
        kwargs_183950 = {}
        # Getting the type of 'np' (line 603)
        np_183938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 16), 'np', False)
        # Obtaining the member 'power' of a type (line 603)
        power_183939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 16), np_183938, 'power')
        # Calling power(args, kwargs) (line 603)
        power_call_result_183951 = invoke(stypy.reporting.localization.Localization(__file__, 603, 16), power_183939, *[int_183940, floor_call_result_183949], **kwargs_183950)
        
        # Assigning a type to the variable 'scale' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'scale', power_call_result_183951)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 601)
        exit___183952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 9), errstate_call_result_183921, '__exit__')
        with_exit_183953 = invoke(stypy.reporting.localization.Localization(__file__, 601, 9), exit___183952, None, None, None)

    
    
    # SSA begins for try-except statement (line 604)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a BinOp to a Name (line 605):
    
    # Assigning a BinOp to a Name (line 605):
    # Getting the type of 'desired' (line 605)
    desired_183954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 21), 'desired')
    # Getting the type of 'scale' (line 605)
    scale_183955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 29), 'scale')
    # Applying the binary operator 'div' (line 605)
    result_div_183956 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 21), 'div', desired_183954, scale_183955)
    
    # Assigning a type to the variable 'sc_desired' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'sc_desired', result_div_183956)
    # SSA branch for the except part of a try statement (line 604)
    # SSA branch for the except 'ZeroDivisionError' branch of a try statement (line 604)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Name (line 607):
    
    # Assigning a Num to a Name (line 607):
    float_183957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 21), 'float')
    # Assigning a type to the variable 'sc_desired' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'sc_desired', float_183957)
    # SSA join for try-except statement (line 604)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 608)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a BinOp to a Name (line 609):
    
    # Assigning a BinOp to a Name (line 609):
    # Getting the type of 'actual' (line 609)
    actual_183958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 20), 'actual')
    # Getting the type of 'scale' (line 609)
    scale_183959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 27), 'scale')
    # Applying the binary operator 'div' (line 609)
    result_div_183960 = python_operator(stypy.reporting.localization.Localization(__file__, 609, 20), 'div', actual_183958, scale_183959)
    
    # Assigning a type to the variable 'sc_actual' (line 609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 8), 'sc_actual', result_div_183960)
    # SSA branch for the except part of a try statement (line 608)
    # SSA branch for the except 'ZeroDivisionError' branch of a try statement (line 608)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Name (line 611):
    
    # Assigning a Num to a Name (line 611):
    float_183961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 20), 'float')
    # Assigning a type to the variable 'sc_actual' (line 611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'sc_actual', float_183961)
    # SSA join for try-except statement (line 608)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 612):
    
    # Assigning a Call to a Name (line 612):
    
    # Call to build_err_msg(...): (line 612)
    # Processing the call arguments (line 612)
    
    # Obtaining an instance of the builtin type 'list' (line 612)
    list_183963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 612)
    # Adding element type (line 612)
    # Getting the type of 'actual' (line 612)
    actual_183964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 25), 'actual', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 612, 24), list_183963, actual_183964)
    # Adding element type (line 612)
    # Getting the type of 'desired' (line 612)
    desired_183965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 33), 'desired', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 612, 24), list_183963, desired_183965)
    
    # Getting the type of 'err_msg' (line 612)
    err_msg_183966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 43), 'err_msg', False)
    # Processing the call keyword arguments (line 612)
    str_183967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 23), 'str', 'Items are not equal to %d significant digits:')
    # Getting the type of 'significant' (line 614)
    significant_183968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 33), 'significant', False)
    # Applying the binary operator '%' (line 613)
    result_mod_183969 = python_operator(stypy.reporting.localization.Localization(__file__, 613, 23), '%', str_183967, significant_183968)
    
    keyword_183970 = result_mod_183969
    # Getting the type of 'verbose' (line 615)
    verbose_183971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 24), 'verbose', False)
    keyword_183972 = verbose_183971
    kwargs_183973 = {'header': keyword_183970, 'verbose': keyword_183972}
    # Getting the type of 'build_err_msg' (line 612)
    build_err_msg_183962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 10), 'build_err_msg', False)
    # Calling build_err_msg(args, kwargs) (line 612)
    build_err_msg_call_result_183974 = invoke(stypy.reporting.localization.Localization(__file__, 612, 10), build_err_msg_183962, *[list_183963, err_msg_183966], **kwargs_183973)
    
    # Assigning a type to the variable 'msg' (line 612)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 4), 'msg', build_err_msg_call_result_183974)
    
    
    # SSA begins for try-except statement (line 616)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    
    # Evaluating a boolean operation
    
    # Call to gisfinite(...): (line 620)
    # Processing the call arguments (line 620)
    # Getting the type of 'desired' (line 620)
    desired_183976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 26), 'desired', False)
    # Processing the call keyword arguments (line 620)
    kwargs_183977 = {}
    # Getting the type of 'gisfinite' (line 620)
    gisfinite_183975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 16), 'gisfinite', False)
    # Calling gisfinite(args, kwargs) (line 620)
    gisfinite_call_result_183978 = invoke(stypy.reporting.localization.Localization(__file__, 620, 16), gisfinite_183975, *[desired_183976], **kwargs_183977)
    
    
    # Call to gisfinite(...): (line 620)
    # Processing the call arguments (line 620)
    # Getting the type of 'actual' (line 620)
    actual_183980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 49), 'actual', False)
    # Processing the call keyword arguments (line 620)
    kwargs_183981 = {}
    # Getting the type of 'gisfinite' (line 620)
    gisfinite_183979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 39), 'gisfinite', False)
    # Calling gisfinite(args, kwargs) (line 620)
    gisfinite_call_result_183982 = invoke(stypy.reporting.localization.Localization(__file__, 620, 39), gisfinite_183979, *[actual_183980], **kwargs_183981)
    
    # Applying the binary operator 'and' (line 620)
    result_and_keyword_183983 = python_operator(stypy.reporting.localization.Localization(__file__, 620, 16), 'and', gisfinite_call_result_183978, gisfinite_call_result_183982)
    
    # Applying the 'not' unary operator (line 620)
    result_not__183984 = python_operator(stypy.reporting.localization.Localization(__file__, 620, 11), 'not', result_and_keyword_183983)
    
    # Testing the type of an if condition (line 620)
    if_condition_183985 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 620, 8), result_not__183984)
    # Assigning a type to the variable 'if_condition_183985' (line 620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'if_condition_183985', if_condition_183985)
    # SSA begins for if statement (line 620)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Call to gisnan(...): (line 621)
    # Processing the call arguments (line 621)
    # Getting the type of 'desired' (line 621)
    desired_183987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 22), 'desired', False)
    # Processing the call keyword arguments (line 621)
    kwargs_183988 = {}
    # Getting the type of 'gisnan' (line 621)
    gisnan_183986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 15), 'gisnan', False)
    # Calling gisnan(args, kwargs) (line 621)
    gisnan_call_result_183989 = invoke(stypy.reporting.localization.Localization(__file__, 621, 15), gisnan_183986, *[desired_183987], **kwargs_183988)
    
    
    # Call to gisnan(...): (line 621)
    # Processing the call arguments (line 621)
    # Getting the type of 'actual' (line 621)
    actual_183991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 41), 'actual', False)
    # Processing the call keyword arguments (line 621)
    kwargs_183992 = {}
    # Getting the type of 'gisnan' (line 621)
    gisnan_183990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 34), 'gisnan', False)
    # Calling gisnan(args, kwargs) (line 621)
    gisnan_call_result_183993 = invoke(stypy.reporting.localization.Localization(__file__, 621, 34), gisnan_183990, *[actual_183991], **kwargs_183992)
    
    # Applying the binary operator 'or' (line 621)
    result_or_keyword_183994 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 15), 'or', gisnan_call_result_183989, gisnan_call_result_183993)
    
    # Testing the type of an if condition (line 621)
    if_condition_183995 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 621, 12), result_or_keyword_183994)
    # Assigning a type to the variable 'if_condition_183995' (line 621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 12), 'if_condition_183995', if_condition_183995)
    # SSA begins for if statement (line 621)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Evaluating a boolean operation
    
    # Call to gisnan(...): (line 622)
    # Processing the call arguments (line 622)
    # Getting the type of 'desired' (line 622)
    desired_183997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 31), 'desired', False)
    # Processing the call keyword arguments (line 622)
    kwargs_183998 = {}
    # Getting the type of 'gisnan' (line 622)
    gisnan_183996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 24), 'gisnan', False)
    # Calling gisnan(args, kwargs) (line 622)
    gisnan_call_result_183999 = invoke(stypy.reporting.localization.Localization(__file__, 622, 24), gisnan_183996, *[desired_183997], **kwargs_183998)
    
    
    # Call to gisnan(...): (line 622)
    # Processing the call arguments (line 622)
    # Getting the type of 'actual' (line 622)
    actual_184001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 51), 'actual', False)
    # Processing the call keyword arguments (line 622)
    kwargs_184002 = {}
    # Getting the type of 'gisnan' (line 622)
    gisnan_184000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 44), 'gisnan', False)
    # Calling gisnan(args, kwargs) (line 622)
    gisnan_call_result_184003 = invoke(stypy.reporting.localization.Localization(__file__, 622, 44), gisnan_184000, *[actual_184001], **kwargs_184002)
    
    # Applying the binary operator 'and' (line 622)
    result_and_keyword_184004 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 24), 'and', gisnan_call_result_183999, gisnan_call_result_184003)
    
    # Applying the 'not' unary operator (line 622)
    result_not__184005 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 19), 'not', result_and_keyword_184004)
    
    # Testing the type of an if condition (line 622)
    if_condition_184006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 622, 16), result_not__184005)
    # Assigning a type to the variable 'if_condition_184006' (line 622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 16), 'if_condition_184006', if_condition_184006)
    # SSA begins for if statement (line 622)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 623)
    # Processing the call arguments (line 623)
    # Getting the type of 'msg' (line 623)
    msg_184008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 41), 'msg', False)
    # Processing the call keyword arguments (line 623)
    kwargs_184009 = {}
    # Getting the type of 'AssertionError' (line 623)
    AssertionError_184007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 26), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 623)
    AssertionError_call_result_184010 = invoke(stypy.reporting.localization.Localization(__file__, 623, 26), AssertionError_184007, *[msg_184008], **kwargs_184009)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 623, 20), AssertionError_call_result_184010, 'raise parameter', BaseException)
    # SSA join for if statement (line 622)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 621)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Getting the type of 'desired' (line 625)
    desired_184011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 23), 'desired')
    # Getting the type of 'actual' (line 625)
    actual_184012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 34), 'actual')
    # Applying the binary operator '==' (line 625)
    result_eq_184013 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 23), '==', desired_184011, actual_184012)
    
    # Applying the 'not' unary operator (line 625)
    result_not__184014 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 19), 'not', result_eq_184013)
    
    # Testing the type of an if condition (line 625)
    if_condition_184015 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 625, 16), result_not__184014)
    # Assigning a type to the variable 'if_condition_184015' (line 625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 16), 'if_condition_184015', if_condition_184015)
    # SSA begins for if statement (line 625)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 626)
    # Processing the call arguments (line 626)
    # Getting the type of 'msg' (line 626)
    msg_184017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 41), 'msg', False)
    # Processing the call keyword arguments (line 626)
    kwargs_184018 = {}
    # Getting the type of 'AssertionError' (line 626)
    AssertionError_184016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 26), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 626)
    AssertionError_call_result_184019 = invoke(stypy.reporting.localization.Localization(__file__, 626, 26), AssertionError_184016, *[msg_184017], **kwargs_184018)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 626, 20), AssertionError_call_result_184019, 'raise parameter', BaseException)
    # SSA join for if statement (line 625)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 621)
    module_type_store = module_type_store.join_ssa_context()
    
    # Assigning a type to the variable 'stypy_return_type' (line 627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 620)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 616)
    # SSA branch for the except 'Tuple' branch of a try statement (line 616)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 616)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to abs(...): (line 630)
    # Processing the call arguments (line 630)
    # Getting the type of 'sc_desired' (line 630)
    sc_desired_184022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 14), 'sc_desired', False)
    # Getting the type of 'sc_actual' (line 630)
    sc_actual_184023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 27), 'sc_actual', False)
    # Applying the binary operator '-' (line 630)
    result_sub_184024 = python_operator(stypy.reporting.localization.Localization(__file__, 630, 14), '-', sc_desired_184022, sc_actual_184023)
    
    # Processing the call keyword arguments (line 630)
    kwargs_184025 = {}
    # Getting the type of 'np' (line 630)
    np_184020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 7), 'np', False)
    # Obtaining the member 'abs' of a type (line 630)
    abs_184021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 7), np_184020, 'abs')
    # Calling abs(args, kwargs) (line 630)
    abs_call_result_184026 = invoke(stypy.reporting.localization.Localization(__file__, 630, 7), abs_184021, *[result_sub_184024], **kwargs_184025)
    
    
    # Call to power(...): (line 630)
    # Processing the call arguments (line 630)
    float_184029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 50), 'float')
    
    # Getting the type of 'significant' (line 630)
    significant_184030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 57), 'significant', False)
    int_184031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 69), 'int')
    # Applying the binary operator '-' (line 630)
    result_sub_184032 = python_operator(stypy.reporting.localization.Localization(__file__, 630, 57), '-', significant_184030, int_184031)
    
    # Applying the 'usub' unary operator (line 630)
    result___neg___184033 = python_operator(stypy.reporting.localization.Localization(__file__, 630, 55), 'usub', result_sub_184032)
    
    # Processing the call keyword arguments (line 630)
    kwargs_184034 = {}
    # Getting the type of 'np' (line 630)
    np_184027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 41), 'np', False)
    # Obtaining the member 'power' of a type (line 630)
    power_184028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 41), np_184027, 'power')
    # Calling power(args, kwargs) (line 630)
    power_call_result_184035 = invoke(stypy.reporting.localization.Localization(__file__, 630, 41), power_184028, *[float_184029, result___neg___184033], **kwargs_184034)
    
    # Applying the binary operator '>=' (line 630)
    result_ge_184036 = python_operator(stypy.reporting.localization.Localization(__file__, 630, 7), '>=', abs_call_result_184026, power_call_result_184035)
    
    # Testing the type of an if condition (line 630)
    if_condition_184037 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 630, 4), result_ge_184036)
    # Assigning a type to the variable 'if_condition_184037' (line 630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'if_condition_184037', if_condition_184037)
    # SSA begins for if statement (line 630)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 631)
    # Processing the call arguments (line 631)
    # Getting the type of 'msg' (line 631)
    msg_184039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 29), 'msg', False)
    # Processing the call keyword arguments (line 631)
    kwargs_184040 = {}
    # Getting the type of 'AssertionError' (line 631)
    AssertionError_184038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 14), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 631)
    AssertionError_call_result_184041 = invoke(stypy.reporting.localization.Localization(__file__, 631, 14), AssertionError_184038, *[msg_184039], **kwargs_184040)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 631, 8), AssertionError_call_result_184041, 'raise parameter', BaseException)
    # SSA join for if statement (line 630)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'assert_approx_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_approx_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 536)
    stypy_return_type_184042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184042)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_approx_equal'
    return stypy_return_type_184042

# Assigning a type to the variable 'assert_approx_equal' (line 536)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 0), 'assert_approx_equal', assert_approx_equal)

@norecursion
def assert_array_compare(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_184043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 633, 51), 'str', '')
    # Getting the type of 'True' (line 633)
    True_184044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 63), 'True')
    str_184045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 32), 'str', '')
    int_184046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 46), 'int')
    defaults = [str_184043, True_184044, str_184045, int_184046]
    # Create a new context for function 'assert_array_compare'
    module_type_store = module_type_store.open_function_context('assert_array_compare', 633, 0, False)
    
    # Passed parameters checking function
    assert_array_compare.stypy_localization = localization
    assert_array_compare.stypy_type_of_self = None
    assert_array_compare.stypy_type_store = module_type_store
    assert_array_compare.stypy_function_name = 'assert_array_compare'
    assert_array_compare.stypy_param_names_list = ['comparison', 'x', 'y', 'err_msg', 'verbose', 'header', 'precision']
    assert_array_compare.stypy_varargs_param_name = None
    assert_array_compare.stypy_kwargs_param_name = None
    assert_array_compare.stypy_call_defaults = defaults
    assert_array_compare.stypy_call_varargs = varargs
    assert_array_compare.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_array_compare', ['comparison', 'x', 'y', 'err_msg', 'verbose', 'header', 'precision'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_array_compare', localization, ['comparison', 'x', 'y', 'err_msg', 'verbose', 'header', 'precision'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_array_compare(...)' code ##################

    
    # Assigning a Name to a Name (line 635):
    
    # Assigning a Name to a Name (line 635):
    # Getting the type of 'True' (line 635)
    True_184047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 4), '__tracebackhide__', True_184047)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 636, 4))
    
    # 'from numpy.core import array, isnan, isinf, any, all, inf' statement (line 636)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_184048 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 636, 4), 'numpy.core')

    if (type(import_184048) is not StypyTypeError):

        if (import_184048 != 'pyd_module'):
            __import__(import_184048)
            sys_modules_184049 = sys.modules[import_184048]
            import_from_module(stypy.reporting.localization.Localization(__file__, 636, 4), 'numpy.core', sys_modules_184049.module_type_store, module_type_store, ['array', 'isnan', 'isinf', 'any', 'all', 'inf'])
            nest_module(stypy.reporting.localization.Localization(__file__, 636, 4), __file__, sys_modules_184049, sys_modules_184049.module_type_store, module_type_store)
        else:
            from numpy.core import array, isnan, isinf, any, all, inf

            import_from_module(stypy.reporting.localization.Localization(__file__, 636, 4), 'numpy.core', None, module_type_store, ['array', 'isnan', 'isinf', 'any', 'all', 'inf'], [array, isnan, isinf, any, all, inf])

    else:
        # Assigning a type to the variable 'numpy.core' (line 636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'numpy.core', import_184048)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Assigning a Call to a Name (line 637):
    
    # Assigning a Call to a Name (line 637):
    
    # Call to array(...): (line 637)
    # Processing the call arguments (line 637)
    # Getting the type of 'x' (line 637)
    x_184051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 14), 'x', False)
    # Processing the call keyword arguments (line 637)
    # Getting the type of 'False' (line 637)
    False_184052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 22), 'False', False)
    keyword_184053 = False_184052
    # Getting the type of 'True' (line 637)
    True_184054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 35), 'True', False)
    keyword_184055 = True_184054
    kwargs_184056 = {'subok': keyword_184055, 'copy': keyword_184053}
    # Getting the type of 'array' (line 637)
    array_184050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 8), 'array', False)
    # Calling array(args, kwargs) (line 637)
    array_call_result_184057 = invoke(stypy.reporting.localization.Localization(__file__, 637, 8), array_184050, *[x_184051], **kwargs_184056)
    
    # Assigning a type to the variable 'x' (line 637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 4), 'x', array_call_result_184057)
    
    # Assigning a Call to a Name (line 638):
    
    # Assigning a Call to a Name (line 638):
    
    # Call to array(...): (line 638)
    # Processing the call arguments (line 638)
    # Getting the type of 'y' (line 638)
    y_184059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 14), 'y', False)
    # Processing the call keyword arguments (line 638)
    # Getting the type of 'False' (line 638)
    False_184060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 22), 'False', False)
    keyword_184061 = False_184060
    # Getting the type of 'True' (line 638)
    True_184062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 35), 'True', False)
    keyword_184063 = True_184062
    kwargs_184064 = {'subok': keyword_184063, 'copy': keyword_184061}
    # Getting the type of 'array' (line 638)
    array_184058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'array', False)
    # Calling array(args, kwargs) (line 638)
    array_call_result_184065 = invoke(stypy.reporting.localization.Localization(__file__, 638, 8), array_184058, *[y_184059], **kwargs_184064)
    
    # Assigning a type to the variable 'y' (line 638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 4), 'y', array_call_result_184065)

    @norecursion
    def safe_comparison(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'safe_comparison'
        module_type_store = module_type_store.open_function_context('safe_comparison', 640, 4, False)
        
        # Passed parameters checking function
        safe_comparison.stypy_localization = localization
        safe_comparison.stypy_type_of_self = None
        safe_comparison.stypy_type_store = module_type_store
        safe_comparison.stypy_function_name = 'safe_comparison'
        safe_comparison.stypy_param_names_list = []
        safe_comparison.stypy_varargs_param_name = 'args'
        safe_comparison.stypy_kwargs_param_name = 'kwargs'
        safe_comparison.stypy_call_defaults = defaults
        safe_comparison.stypy_call_varargs = varargs
        safe_comparison.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'safe_comparison', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'safe_comparison', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'safe_comparison(...)' code ##################

        
        # Call to catch_warnings(...): (line 659)
        # Processing the call keyword arguments (line 659)
        kwargs_184068 = {}
        # Getting the type of 'warnings' (line 659)
        warnings_184066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 13), 'warnings', False)
        # Obtaining the member 'catch_warnings' of a type (line 659)
        catch_warnings_184067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 13), warnings_184066, 'catch_warnings')
        # Calling catch_warnings(args, kwargs) (line 659)
        catch_warnings_call_result_184069 = invoke(stypy.reporting.localization.Localization(__file__, 659, 13), catch_warnings_184067, *[], **kwargs_184068)
        
        with_184070 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 659, 13), catch_warnings_call_result_184069, 'with parameter', '__enter__', '__exit__')

        if with_184070:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 659)
            enter___184071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 13), catch_warnings_call_result_184069, '__enter__')
            with_enter_184072 = invoke(stypy.reporting.localization.Localization(__file__, 659, 13), enter___184071)
            
            # Call to filterwarnings(...): (line 660)
            # Processing the call arguments (line 660)
            str_184075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 660, 36), 'str', 'ignore')
            # Processing the call keyword arguments (line 660)
            # Getting the type of 'DeprecationWarning' (line 660)
            DeprecationWarning_184076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 55), 'DeprecationWarning', False)
            keyword_184077 = DeprecationWarning_184076
            kwargs_184078 = {'category': keyword_184077}
            # Getting the type of 'warnings' (line 660)
            warnings_184073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 12), 'warnings', False)
            # Obtaining the member 'filterwarnings' of a type (line 660)
            filterwarnings_184074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 12), warnings_184073, 'filterwarnings')
            # Calling filterwarnings(args, kwargs) (line 660)
            filterwarnings_call_result_184079 = invoke(stypy.reporting.localization.Localization(__file__, 660, 12), filterwarnings_184074, *[str_184075], **kwargs_184078)
            
            
            # Call to comparison(...): (line 661)
            # Getting the type of 'args' (line 661)
            args_184081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 31), 'args', False)
            # Processing the call keyword arguments (line 661)
            # Getting the type of 'kwargs' (line 661)
            kwargs_184082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 39), 'kwargs', False)
            kwargs_184083 = {'kwargs_184082': kwargs_184082}
            # Getting the type of 'comparison' (line 661)
            comparison_184080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 19), 'comparison', False)
            # Calling comparison(args, kwargs) (line 661)
            comparison_call_result_184084 = invoke(stypy.reporting.localization.Localization(__file__, 661, 19), comparison_184080, *[args_184081], **kwargs_184083)
            
            # Assigning a type to the variable 'stypy_return_type' (line 661)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 12), 'stypy_return_type', comparison_call_result_184084)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 659)
            exit___184085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 13), catch_warnings_call_result_184069, '__exit__')
            with_exit_184086 = invoke(stypy.reporting.localization.Localization(__file__, 659, 13), exit___184085, None, None, None)

        
        # ################# End of 'safe_comparison(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'safe_comparison' in the type store
        # Getting the type of 'stypy_return_type' (line 640)
        stypy_return_type_184087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_184087)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'safe_comparison'
        return stypy_return_type_184087

    # Assigning a type to the variable 'safe_comparison' (line 640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 4), 'safe_comparison', safe_comparison)

    @norecursion
    def isnumber(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'isnumber'
        module_type_store = module_type_store.open_function_context('isnumber', 663, 4, False)
        
        # Passed parameters checking function
        isnumber.stypy_localization = localization
        isnumber.stypy_type_of_self = None
        isnumber.stypy_type_store = module_type_store
        isnumber.stypy_function_name = 'isnumber'
        isnumber.stypy_param_names_list = ['x']
        isnumber.stypy_varargs_param_name = None
        isnumber.stypy_kwargs_param_name = None
        isnumber.stypy_call_defaults = defaults
        isnumber.stypy_call_varargs = varargs
        isnumber.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'isnumber', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'isnumber', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'isnumber(...)' code ##################

        
        # Getting the type of 'x' (line 664)
        x_184088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 15), 'x')
        # Obtaining the member 'dtype' of a type (line 664)
        dtype_184089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 15), x_184088, 'dtype')
        # Obtaining the member 'char' of a type (line 664)
        char_184090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 15), dtype_184089, 'char')
        str_184091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 31), 'str', '?bhilqpBHILQPefdgFDG')
        # Applying the binary operator 'in' (line 664)
        result_contains_184092 = python_operator(stypy.reporting.localization.Localization(__file__, 664, 15), 'in', char_184090, str_184091)
        
        # Assigning a type to the variable 'stypy_return_type' (line 664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'stypy_return_type', result_contains_184092)
        
        # ################# End of 'isnumber(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'isnumber' in the type store
        # Getting the type of 'stypy_return_type' (line 663)
        stypy_return_type_184093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_184093)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'isnumber'
        return stypy_return_type_184093

    # Assigning a type to the variable 'isnumber' (line 663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 4), 'isnumber', isnumber)

    @norecursion
    def chk_same_position(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_184094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 45), 'str', 'nan')
        defaults = [str_184094]
        # Create a new context for function 'chk_same_position'
        module_type_store = module_type_store.open_function_context('chk_same_position', 666, 4, False)
        
        # Passed parameters checking function
        chk_same_position.stypy_localization = localization
        chk_same_position.stypy_type_of_self = None
        chk_same_position.stypy_type_store = module_type_store
        chk_same_position.stypy_function_name = 'chk_same_position'
        chk_same_position.stypy_param_names_list = ['x_id', 'y_id', 'hasval']
        chk_same_position.stypy_varargs_param_name = None
        chk_same_position.stypy_kwargs_param_name = None
        chk_same_position.stypy_call_defaults = defaults
        chk_same_position.stypy_call_varargs = varargs
        chk_same_position.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'chk_same_position', ['x_id', 'y_id', 'hasval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'chk_same_position', localization, ['x_id', 'y_id', 'hasval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'chk_same_position(...)' code ##################

        str_184095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, (-1)), 'str', 'Handling nan/inf: check that x and y have the nan/inf at the same\n        locations.')
        
        
        # SSA begins for try-except statement (line 669)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to assert_array_equal(...): (line 670)
        # Processing the call arguments (line 670)
        # Getting the type of 'x_id' (line 670)
        x_id_184097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 31), 'x_id', False)
        # Getting the type of 'y_id' (line 670)
        y_id_184098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 37), 'y_id', False)
        # Processing the call keyword arguments (line 670)
        kwargs_184099 = {}
        # Getting the type of 'assert_array_equal' (line 670)
        assert_array_equal_184096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 12), 'assert_array_equal', False)
        # Calling assert_array_equal(args, kwargs) (line 670)
        assert_array_equal_call_result_184100 = invoke(stypy.reporting.localization.Localization(__file__, 670, 12), assert_array_equal_184096, *[x_id_184097, y_id_184098], **kwargs_184099)
        
        # SSA branch for the except part of a try statement (line 669)
        # SSA branch for the except 'AssertionError' branch of a try statement (line 669)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 672):
        
        # Assigning a Call to a Name (line 672):
        
        # Call to build_err_msg(...): (line 672)
        # Processing the call arguments (line 672)
        
        # Obtaining an instance of the builtin type 'list' (line 672)
        list_184102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 672)
        # Adding element type (line 672)
        # Getting the type of 'x' (line 672)
        x_184103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 33), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 672, 32), list_184102, x_184103)
        # Adding element type (line 672)
        # Getting the type of 'y' (line 672)
        y_184104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 36), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 672, 32), list_184102, y_184104)
        
        # Getting the type of 'err_msg' (line 673)
        err_msg_184105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 32), 'err_msg', False)
        str_184106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 673, 42), 'str', '\nx and y %s location mismatch:')
        # Getting the type of 'hasval' (line 674)
        hasval_184107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 35), 'hasval', False)
        # Applying the binary operator '%' (line 673)
        result_mod_184108 = python_operator(stypy.reporting.localization.Localization(__file__, 673, 42), '%', str_184106, hasval_184107)
        
        # Applying the binary operator '+' (line 673)
        result_add_184109 = python_operator(stypy.reporting.localization.Localization(__file__, 673, 32), '+', err_msg_184105, result_mod_184108)
        
        # Processing the call keyword arguments (line 672)
        # Getting the type of 'verbose' (line 674)
        verbose_184110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 52), 'verbose', False)
        keyword_184111 = verbose_184110
        # Getting the type of 'header' (line 674)
        header_184112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 68), 'header', False)
        keyword_184113 = header_184112
        
        # Obtaining an instance of the builtin type 'tuple' (line 675)
        tuple_184114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 675)
        # Adding element type (line 675)
        str_184115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 39), 'str', 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 675, 39), tuple_184114, str_184115)
        # Adding element type (line 675)
        str_184116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 44), 'str', 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 675, 39), tuple_184114, str_184116)
        
        keyword_184117 = tuple_184114
        # Getting the type of 'precision' (line 675)
        precision_184118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 60), 'precision', False)
        keyword_184119 = precision_184118
        kwargs_184120 = {'header': keyword_184113, 'verbose': keyword_184111, 'precision': keyword_184119, 'names': keyword_184117}
        # Getting the type of 'build_err_msg' (line 672)
        build_err_msg_184101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 18), 'build_err_msg', False)
        # Calling build_err_msg(args, kwargs) (line 672)
        build_err_msg_call_result_184121 = invoke(stypy.reporting.localization.Localization(__file__, 672, 18), build_err_msg_184101, *[list_184102, result_add_184109], **kwargs_184120)
        
        # Assigning a type to the variable 'msg' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 12), 'msg', build_err_msg_call_result_184121)
        
        # Call to AssertionError(...): (line 676)
        # Processing the call arguments (line 676)
        # Getting the type of 'msg' (line 676)
        msg_184123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 33), 'msg', False)
        # Processing the call keyword arguments (line 676)
        kwargs_184124 = {}
        # Getting the type of 'AssertionError' (line 676)
        AssertionError_184122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 18), 'AssertionError', False)
        # Calling AssertionError(args, kwargs) (line 676)
        AssertionError_call_result_184125 = invoke(stypy.reporting.localization.Localization(__file__, 676, 18), AssertionError_184122, *[msg_184123], **kwargs_184124)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 676, 12), AssertionError_call_result_184125, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 669)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'chk_same_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'chk_same_position' in the type store
        # Getting the type of 'stypy_return_type' (line 666)
        stypy_return_type_184126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_184126)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'chk_same_position'
        return stypy_return_type_184126

    # Assigning a type to the variable 'chk_same_position' (line 666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'chk_same_position', chk_same_position)
    
    
    # SSA begins for try-except statement (line 678)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a BoolOp to a Name (line 679):
    
    # Assigning a BoolOp to a Name (line 679):
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    
    # Getting the type of 'x' (line 679)
    x_184127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 16), 'x')
    # Obtaining the member 'shape' of a type (line 679)
    shape_184128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 16), x_184127, 'shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 679)
    tuple_184129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 679)
    
    # Applying the binary operator '==' (line 679)
    result_eq_184130 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 16), '==', shape_184128, tuple_184129)
    
    
    # Getting the type of 'y' (line 679)
    y_184131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 33), 'y')
    # Obtaining the member 'shape' of a type (line 679)
    shape_184132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 33), y_184131, 'shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 679)
    tuple_184133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 679)
    
    # Applying the binary operator '==' (line 679)
    result_eq_184134 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 33), '==', shape_184132, tuple_184133)
    
    # Applying the binary operator 'or' (line 679)
    result_or_keyword_184135 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 16), 'or', result_eq_184130, result_eq_184134)
    
    
    # Getting the type of 'x' (line 679)
    x_184136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 51), 'x')
    # Obtaining the member 'shape' of a type (line 679)
    shape_184137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 51), x_184136, 'shape')
    # Getting the type of 'y' (line 679)
    y_184138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 62), 'y')
    # Obtaining the member 'shape' of a type (line 679)
    shape_184139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 62), y_184138, 'shape')
    # Applying the binary operator '==' (line 679)
    result_eq_184140 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 51), '==', shape_184137, shape_184139)
    
    # Applying the binary operator 'or' (line 679)
    result_or_keyword_184141 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 15), 'or', result_or_keyword_184135, result_eq_184140)
    
    # Assigning a type to the variable 'cond' (line 679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'cond', result_or_keyword_184141)
    
    
    # Getting the type of 'cond' (line 680)
    cond_184142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 15), 'cond')
    # Applying the 'not' unary operator (line 680)
    result_not__184143 = python_operator(stypy.reporting.localization.Localization(__file__, 680, 11), 'not', cond_184142)
    
    # Testing the type of an if condition (line 680)
    if_condition_184144 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 680, 8), result_not__184143)
    # Assigning a type to the variable 'if_condition_184144' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'if_condition_184144', if_condition_184144)
    # SSA begins for if statement (line 680)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 681):
    
    # Assigning a Call to a Name (line 681):
    
    # Call to build_err_msg(...): (line 681)
    # Processing the call arguments (line 681)
    
    # Obtaining an instance of the builtin type 'list' (line 681)
    list_184146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 32), 'list')
    # Adding type elements to the builtin type 'list' instance (line 681)
    # Adding element type (line 681)
    # Getting the type of 'x' (line 681)
    x_184147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 33), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 681, 32), list_184146, x_184147)
    # Adding element type (line 681)
    # Getting the type of 'y' (line 681)
    y_184148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 36), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 681, 32), list_184146, y_184148)
    
    # Getting the type of 'err_msg' (line 682)
    err_msg_184149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 32), 'err_msg', False)
    str_184150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 683, 34), 'str', '\n(shapes %s, %s mismatch)')
    
    # Obtaining an instance of the builtin type 'tuple' (line 683)
    tuple_184151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 683, 66), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 683)
    # Adding element type (line 683)
    # Getting the type of 'x' (line 683)
    x_184152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 66), 'x', False)
    # Obtaining the member 'shape' of a type (line 683)
    shape_184153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 66), x_184152, 'shape')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 683, 66), tuple_184151, shape_184153)
    # Adding element type (line 683)
    # Getting the type of 'y' (line 684)
    y_184154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 66), 'y', False)
    # Obtaining the member 'shape' of a type (line 684)
    shape_184155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 66), y_184154, 'shape')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 683, 66), tuple_184151, shape_184155)
    
    # Applying the binary operator '%' (line 683)
    result_mod_184156 = python_operator(stypy.reporting.localization.Localization(__file__, 683, 34), '%', str_184150, tuple_184151)
    
    # Applying the binary operator '+' (line 682)
    result_add_184157 = python_operator(stypy.reporting.localization.Localization(__file__, 682, 32), '+', err_msg_184149, result_mod_184156)
    
    # Processing the call keyword arguments (line 681)
    # Getting the type of 'verbose' (line 685)
    verbose_184158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 40), 'verbose', False)
    keyword_184159 = verbose_184158
    # Getting the type of 'header' (line 685)
    header_184160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 56), 'header', False)
    keyword_184161 = header_184160
    
    # Obtaining an instance of the builtin type 'tuple' (line 686)
    tuple_184162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 686)
    # Adding element type (line 686)
    str_184163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 39), 'str', 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 686, 39), tuple_184162, str_184163)
    # Adding element type (line 686)
    str_184164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 44), 'str', 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 686, 39), tuple_184162, str_184164)
    
    keyword_184165 = tuple_184162
    # Getting the type of 'precision' (line 686)
    precision_184166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 60), 'precision', False)
    keyword_184167 = precision_184166
    kwargs_184168 = {'header': keyword_184161, 'verbose': keyword_184159, 'precision': keyword_184167, 'names': keyword_184165}
    # Getting the type of 'build_err_msg' (line 681)
    build_err_msg_184145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 18), 'build_err_msg', False)
    # Calling build_err_msg(args, kwargs) (line 681)
    build_err_msg_call_result_184169 = invoke(stypy.reporting.localization.Localization(__file__, 681, 18), build_err_msg_184145, *[list_184146, result_add_184157], **kwargs_184168)
    
    # Assigning a type to the variable 'msg' (line 681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 12), 'msg', build_err_msg_call_result_184169)
    
    
    # Getting the type of 'cond' (line 687)
    cond_184170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 19), 'cond')
    # Applying the 'not' unary operator (line 687)
    result_not__184171 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 15), 'not', cond_184170)
    
    # Testing the type of an if condition (line 687)
    if_condition_184172 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 687, 12), result_not__184171)
    # Assigning a type to the variable 'if_condition_184172' (line 687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 12), 'if_condition_184172', if_condition_184172)
    # SSA begins for if statement (line 687)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 688)
    # Processing the call arguments (line 688)
    # Getting the type of 'msg' (line 688)
    msg_184174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 37), 'msg', False)
    # Processing the call keyword arguments (line 688)
    kwargs_184175 = {}
    # Getting the type of 'AssertionError' (line 688)
    AssertionError_184173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 22), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 688)
    AssertionError_call_result_184176 = invoke(stypy.reporting.localization.Localization(__file__, 688, 22), AssertionError_184173, *[msg_184174], **kwargs_184175)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 688, 16), AssertionError_call_result_184176, 'raise parameter', BaseException)
    # SSA join for if statement (line 687)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 680)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to isnumber(...): (line 690)
    # Processing the call arguments (line 690)
    # Getting the type of 'x' (line 690)
    x_184178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 20), 'x', False)
    # Processing the call keyword arguments (line 690)
    kwargs_184179 = {}
    # Getting the type of 'isnumber' (line 690)
    isnumber_184177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 11), 'isnumber', False)
    # Calling isnumber(args, kwargs) (line 690)
    isnumber_call_result_184180 = invoke(stypy.reporting.localization.Localization(__file__, 690, 11), isnumber_184177, *[x_184178], **kwargs_184179)
    
    
    # Call to isnumber(...): (line 690)
    # Processing the call arguments (line 690)
    # Getting the type of 'y' (line 690)
    y_184182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 36), 'y', False)
    # Processing the call keyword arguments (line 690)
    kwargs_184183 = {}
    # Getting the type of 'isnumber' (line 690)
    isnumber_184181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 27), 'isnumber', False)
    # Calling isnumber(args, kwargs) (line 690)
    isnumber_call_result_184184 = invoke(stypy.reporting.localization.Localization(__file__, 690, 27), isnumber_184181, *[y_184182], **kwargs_184183)
    
    # Applying the binary operator 'and' (line 690)
    result_and_keyword_184185 = python_operator(stypy.reporting.localization.Localization(__file__, 690, 11), 'and', isnumber_call_result_184180, isnumber_call_result_184184)
    
    # Testing the type of an if condition (line 690)
    if_condition_184186 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 690, 8), result_and_keyword_184185)
    # Assigning a type to the variable 'if_condition_184186' (line 690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 8), 'if_condition_184186', if_condition_184186)
    # SSA begins for if statement (line 690)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 691):
    
    # Assigning a Call to a Name (line 691):
    
    # Call to isnan(...): (line 691)
    # Processing the call arguments (line 691)
    # Getting the type of 'x' (line 691)
    x_184188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 37), 'x', False)
    # Processing the call keyword arguments (line 691)
    kwargs_184189 = {}
    # Getting the type of 'isnan' (line 691)
    isnan_184187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 31), 'isnan', False)
    # Calling isnan(args, kwargs) (line 691)
    isnan_call_result_184190 = invoke(stypy.reporting.localization.Localization(__file__, 691, 31), isnan_184187, *[x_184188], **kwargs_184189)
    
    # Assigning a type to the variable 'tuple_assignment_182829' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'tuple_assignment_182829', isnan_call_result_184190)
    
    # Assigning a Call to a Name (line 691):
    
    # Call to isnan(...): (line 691)
    # Processing the call arguments (line 691)
    # Getting the type of 'y' (line 691)
    y_184192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 47), 'y', False)
    # Processing the call keyword arguments (line 691)
    kwargs_184193 = {}
    # Getting the type of 'isnan' (line 691)
    isnan_184191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 41), 'isnan', False)
    # Calling isnan(args, kwargs) (line 691)
    isnan_call_result_184194 = invoke(stypy.reporting.localization.Localization(__file__, 691, 41), isnan_184191, *[y_184192], **kwargs_184193)
    
    # Assigning a type to the variable 'tuple_assignment_182830' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'tuple_assignment_182830', isnan_call_result_184194)
    
    # Assigning a Name to a Name (line 691):
    # Getting the type of 'tuple_assignment_182829' (line 691)
    tuple_assignment_182829_184195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'tuple_assignment_182829')
    # Assigning a type to the variable 'x_isnan' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'x_isnan', tuple_assignment_182829_184195)
    
    # Assigning a Name to a Name (line 691):
    # Getting the type of 'tuple_assignment_182830' (line 691)
    tuple_assignment_182830_184196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'tuple_assignment_182830')
    # Assigning a type to the variable 'y_isnan' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 21), 'y_isnan', tuple_assignment_182830_184196)
    
    # Assigning a Tuple to a Tuple (line 692):
    
    # Assigning a Call to a Name (line 692):
    
    # Call to isinf(...): (line 692)
    # Processing the call arguments (line 692)
    # Getting the type of 'x' (line 692)
    x_184198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 37), 'x', False)
    # Processing the call keyword arguments (line 692)
    kwargs_184199 = {}
    # Getting the type of 'isinf' (line 692)
    isinf_184197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 31), 'isinf', False)
    # Calling isinf(args, kwargs) (line 692)
    isinf_call_result_184200 = invoke(stypy.reporting.localization.Localization(__file__, 692, 31), isinf_184197, *[x_184198], **kwargs_184199)
    
    # Assigning a type to the variable 'tuple_assignment_182831' (line 692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'tuple_assignment_182831', isinf_call_result_184200)
    
    # Assigning a Call to a Name (line 692):
    
    # Call to isinf(...): (line 692)
    # Processing the call arguments (line 692)
    # Getting the type of 'y' (line 692)
    y_184202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 47), 'y', False)
    # Processing the call keyword arguments (line 692)
    kwargs_184203 = {}
    # Getting the type of 'isinf' (line 692)
    isinf_184201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 41), 'isinf', False)
    # Calling isinf(args, kwargs) (line 692)
    isinf_call_result_184204 = invoke(stypy.reporting.localization.Localization(__file__, 692, 41), isinf_184201, *[y_184202], **kwargs_184203)
    
    # Assigning a type to the variable 'tuple_assignment_182832' (line 692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'tuple_assignment_182832', isinf_call_result_184204)
    
    # Assigning a Name to a Name (line 692):
    # Getting the type of 'tuple_assignment_182831' (line 692)
    tuple_assignment_182831_184205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'tuple_assignment_182831')
    # Assigning a type to the variable 'x_isinf' (line 692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'x_isinf', tuple_assignment_182831_184205)
    
    # Assigning a Name to a Name (line 692):
    # Getting the type of 'tuple_assignment_182832' (line 692)
    tuple_assignment_182832_184206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'tuple_assignment_182832')
    # Assigning a type to the variable 'y_isinf' (line 692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 21), 'y_isinf', tuple_assignment_182832_184206)
    
    
    # Evaluating a boolean operation
    
    # Call to any(...): (line 695)
    # Processing the call arguments (line 695)
    # Getting the type of 'x_isnan' (line 695)
    x_isnan_184208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 19), 'x_isnan', False)
    # Processing the call keyword arguments (line 695)
    kwargs_184209 = {}
    # Getting the type of 'any' (line 695)
    any_184207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 15), 'any', False)
    # Calling any(args, kwargs) (line 695)
    any_call_result_184210 = invoke(stypy.reporting.localization.Localization(__file__, 695, 15), any_184207, *[x_isnan_184208], **kwargs_184209)
    
    
    # Call to any(...): (line 695)
    # Processing the call arguments (line 695)
    # Getting the type of 'y_isnan' (line 695)
    y_isnan_184212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 35), 'y_isnan', False)
    # Processing the call keyword arguments (line 695)
    kwargs_184213 = {}
    # Getting the type of 'any' (line 695)
    any_184211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 31), 'any', False)
    # Calling any(args, kwargs) (line 695)
    any_call_result_184214 = invoke(stypy.reporting.localization.Localization(__file__, 695, 31), any_184211, *[y_isnan_184212], **kwargs_184213)
    
    # Applying the binary operator 'or' (line 695)
    result_or_keyword_184215 = python_operator(stypy.reporting.localization.Localization(__file__, 695, 15), 'or', any_call_result_184210, any_call_result_184214)
    
    # Testing the type of an if condition (line 695)
    if_condition_184216 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 695, 12), result_or_keyword_184215)
    # Assigning a type to the variable 'if_condition_184216' (line 695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 12), 'if_condition_184216', if_condition_184216)
    # SSA begins for if statement (line 695)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to chk_same_position(...): (line 696)
    # Processing the call arguments (line 696)
    # Getting the type of 'x_isnan' (line 696)
    x_isnan_184218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 34), 'x_isnan', False)
    # Getting the type of 'y_isnan' (line 696)
    y_isnan_184219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 43), 'y_isnan', False)
    # Processing the call keyword arguments (line 696)
    str_184220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 59), 'str', 'nan')
    keyword_184221 = str_184220
    kwargs_184222 = {'hasval': keyword_184221}
    # Getting the type of 'chk_same_position' (line 696)
    chk_same_position_184217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 16), 'chk_same_position', False)
    # Calling chk_same_position(args, kwargs) (line 696)
    chk_same_position_call_result_184223 = invoke(stypy.reporting.localization.Localization(__file__, 696, 16), chk_same_position_184217, *[x_isnan_184218, y_isnan_184219], **kwargs_184222)
    
    # SSA join for if statement (line 695)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to any(...): (line 697)
    # Processing the call arguments (line 697)
    # Getting the type of 'x_isinf' (line 697)
    x_isinf_184225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 19), 'x_isinf', False)
    # Processing the call keyword arguments (line 697)
    kwargs_184226 = {}
    # Getting the type of 'any' (line 697)
    any_184224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 15), 'any', False)
    # Calling any(args, kwargs) (line 697)
    any_call_result_184227 = invoke(stypy.reporting.localization.Localization(__file__, 697, 15), any_184224, *[x_isinf_184225], **kwargs_184226)
    
    
    # Call to any(...): (line 697)
    # Processing the call arguments (line 697)
    # Getting the type of 'y_isinf' (line 697)
    y_isinf_184229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 35), 'y_isinf', False)
    # Processing the call keyword arguments (line 697)
    kwargs_184230 = {}
    # Getting the type of 'any' (line 697)
    any_184228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 31), 'any', False)
    # Calling any(args, kwargs) (line 697)
    any_call_result_184231 = invoke(stypy.reporting.localization.Localization(__file__, 697, 31), any_184228, *[y_isinf_184229], **kwargs_184230)
    
    # Applying the binary operator 'or' (line 697)
    result_or_keyword_184232 = python_operator(stypy.reporting.localization.Localization(__file__, 697, 15), 'or', any_call_result_184227, any_call_result_184231)
    
    # Testing the type of an if condition (line 697)
    if_condition_184233 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 697, 12), result_or_keyword_184232)
    # Assigning a type to the variable 'if_condition_184233' (line 697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 12), 'if_condition_184233', if_condition_184233)
    # SSA begins for if statement (line 697)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to chk_same_position(...): (line 699)
    # Processing the call arguments (line 699)
    
    # Getting the type of 'x' (line 699)
    x_184235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 34), 'x', False)
    
    # Getting the type of 'inf' (line 699)
    inf_184236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 40), 'inf', False)
    # Applying the 'uadd' unary operator (line 699)
    result___pos___184237 = python_operator(stypy.reporting.localization.Localization(__file__, 699, 39), 'uadd', inf_184236)
    
    # Applying the binary operator '==' (line 699)
    result_eq_184238 = python_operator(stypy.reporting.localization.Localization(__file__, 699, 34), '==', x_184235, result___pos___184237)
    
    
    # Getting the type of 'y' (line 699)
    y_184239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 45), 'y', False)
    
    # Getting the type of 'inf' (line 699)
    inf_184240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 51), 'inf', False)
    # Applying the 'uadd' unary operator (line 699)
    result___pos___184241 = python_operator(stypy.reporting.localization.Localization(__file__, 699, 50), 'uadd', inf_184240)
    
    # Applying the binary operator '==' (line 699)
    result_eq_184242 = python_operator(stypy.reporting.localization.Localization(__file__, 699, 45), '==', y_184239, result___pos___184241)
    
    # Processing the call keyword arguments (line 699)
    str_184243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 63), 'str', '+inf')
    keyword_184244 = str_184243
    kwargs_184245 = {'hasval': keyword_184244}
    # Getting the type of 'chk_same_position' (line 699)
    chk_same_position_184234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 16), 'chk_same_position', False)
    # Calling chk_same_position(args, kwargs) (line 699)
    chk_same_position_call_result_184246 = invoke(stypy.reporting.localization.Localization(__file__, 699, 16), chk_same_position_184234, *[result_eq_184238, result_eq_184242], **kwargs_184245)
    
    
    # Call to chk_same_position(...): (line 700)
    # Processing the call arguments (line 700)
    
    # Getting the type of 'x' (line 700)
    x_184248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 34), 'x', False)
    
    # Getting the type of 'inf' (line 700)
    inf_184249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 40), 'inf', False)
    # Applying the 'usub' unary operator (line 700)
    result___neg___184250 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 39), 'usub', inf_184249)
    
    # Applying the binary operator '==' (line 700)
    result_eq_184251 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 34), '==', x_184248, result___neg___184250)
    
    
    # Getting the type of 'y' (line 700)
    y_184252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 45), 'y', False)
    
    # Getting the type of 'inf' (line 700)
    inf_184253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 51), 'inf', False)
    # Applying the 'usub' unary operator (line 700)
    result___neg___184254 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 50), 'usub', inf_184253)
    
    # Applying the binary operator '==' (line 700)
    result_eq_184255 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 45), '==', y_184252, result___neg___184254)
    
    # Processing the call keyword arguments (line 700)
    str_184256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 63), 'str', '-inf')
    keyword_184257 = str_184256
    kwargs_184258 = {'hasval': keyword_184257}
    # Getting the type of 'chk_same_position' (line 700)
    chk_same_position_184247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 16), 'chk_same_position', False)
    # Calling chk_same_position(args, kwargs) (line 700)
    chk_same_position_call_result_184259 = invoke(stypy.reporting.localization.Localization(__file__, 700, 16), chk_same_position_184247, *[result_eq_184251, result_eq_184255], **kwargs_184258)
    
    # SSA join for if statement (line 697)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Tuple (line 703):
    
    # Assigning a Name to a Name (line 703):
    # Getting the type of 'x_isnan' (line 703)
    x_isnan_184260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 25), 'x_isnan')
    # Assigning a type to the variable 'tuple_assignment_182833' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 12), 'tuple_assignment_182833', x_isnan_184260)
    
    # Assigning a Name to a Name (line 703):
    # Getting the type of 'y_isnan' (line 703)
    y_isnan_184261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 34), 'y_isnan')
    # Assigning a type to the variable 'tuple_assignment_182834' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 12), 'tuple_assignment_182834', y_isnan_184261)
    
    # Assigning a Name to a Name (line 703):
    # Getting the type of 'tuple_assignment_182833' (line 703)
    tuple_assignment_182833_184262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 12), 'tuple_assignment_182833')
    # Assigning a type to the variable 'x_id' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 12), 'x_id', tuple_assignment_182833_184262)
    
    # Assigning a Name to a Name (line 703):
    # Getting the type of 'tuple_assignment_182834' (line 703)
    tuple_assignment_182834_184263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 12), 'tuple_assignment_182834')
    # Assigning a type to the variable 'y_id' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 18), 'y_id', tuple_assignment_182834_184263)
    
    # Getting the type of 'x_id' (line 704)
    x_id_184264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'x_id')
    # Getting the type of 'x_isinf' (line 704)
    x_isinf_184265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 20), 'x_isinf')
    # Applying the binary operator '|=' (line 704)
    result_ior_184266 = python_operator(stypy.reporting.localization.Localization(__file__, 704, 12), '|=', x_id_184264, x_isinf_184265)
    # Assigning a type to the variable 'x_id' (line 704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'x_id', result_ior_184266)
    
    
    # Getting the type of 'y_id' (line 705)
    y_id_184267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 12), 'y_id')
    # Getting the type of 'y_isinf' (line 705)
    y_isinf_184268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 20), 'y_isinf')
    # Applying the binary operator '|=' (line 705)
    result_ior_184269 = python_operator(stypy.reporting.localization.Localization(__file__, 705, 12), '|=', y_id_184267, y_isinf_184268)
    # Assigning a type to the variable 'y_id' (line 705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 12), 'y_id', result_ior_184269)
    
    
    
    # Call to all(...): (line 708)
    # Processing the call arguments (line 708)
    # Getting the type of 'x_id' (line 708)
    x_id_184271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 19), 'x_id', False)
    # Processing the call keyword arguments (line 708)
    kwargs_184272 = {}
    # Getting the type of 'all' (line 708)
    all_184270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 15), 'all', False)
    # Calling all(args, kwargs) (line 708)
    all_call_result_184273 = invoke(stypy.reporting.localization.Localization(__file__, 708, 15), all_184270, *[x_id_184271], **kwargs_184272)
    
    # Testing the type of an if condition (line 708)
    if_condition_184274 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 708, 12), all_call_result_184273)
    # Assigning a type to the variable 'if_condition_184274' (line 708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 12), 'if_condition_184274', if_condition_184274)
    # SSA begins for if statement (line 708)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Assigning a type to the variable 'stypy_return_type' (line 709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 16), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 708)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 711)
    # Processing the call arguments (line 711)
    # Getting the type of 'x_id' (line 711)
    x_id_184276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 19), 'x_id', False)
    # Processing the call keyword arguments (line 711)
    kwargs_184277 = {}
    # Getting the type of 'any' (line 711)
    any_184275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 15), 'any', False)
    # Calling any(args, kwargs) (line 711)
    any_call_result_184278 = invoke(stypy.reporting.localization.Localization(__file__, 711, 15), any_184275, *[x_id_184276], **kwargs_184277)
    
    # Testing the type of an if condition (line 711)
    if_condition_184279 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 711, 12), any_call_result_184278)
    # Assigning a type to the variable 'if_condition_184279' (line 711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 12), 'if_condition_184279', if_condition_184279)
    # SSA begins for if statement (line 711)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 712):
    
    # Assigning a Call to a Name (line 712):
    
    # Call to safe_comparison(...): (line 712)
    # Processing the call arguments (line 712)
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'x_id' (line 712)
    x_id_184281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 41), 'x_id', False)
    # Applying the '~' unary operator (line 712)
    result_inv_184282 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 40), '~', x_id_184281)
    
    # Getting the type of 'x' (line 712)
    x_184283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 38), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 712)
    getitem___184284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 38), x_184283, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 712)
    subscript_call_result_184285 = invoke(stypy.reporting.localization.Localization(__file__, 712, 38), getitem___184284, result_inv_184282)
    
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'y_id' (line 712)
    y_id_184286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 51), 'y_id', False)
    # Applying the '~' unary operator (line 712)
    result_inv_184287 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 50), '~', y_id_184286)
    
    # Getting the type of 'y' (line 712)
    y_184288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 48), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 712)
    getitem___184289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 48), y_184288, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 712)
    subscript_call_result_184290 = invoke(stypy.reporting.localization.Localization(__file__, 712, 48), getitem___184289, result_inv_184287)
    
    # Processing the call keyword arguments (line 712)
    kwargs_184291 = {}
    # Getting the type of 'safe_comparison' (line 712)
    safe_comparison_184280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 22), 'safe_comparison', False)
    # Calling safe_comparison(args, kwargs) (line 712)
    safe_comparison_call_result_184292 = invoke(stypy.reporting.localization.Localization(__file__, 712, 22), safe_comparison_184280, *[subscript_call_result_184285, subscript_call_result_184290], **kwargs_184291)
    
    # Assigning a type to the variable 'val' (line 712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 16), 'val', safe_comparison_call_result_184292)
    # SSA branch for the else part of an if statement (line 711)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 714):
    
    # Assigning a Call to a Name (line 714):
    
    # Call to safe_comparison(...): (line 714)
    # Processing the call arguments (line 714)
    # Getting the type of 'x' (line 714)
    x_184294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 38), 'x', False)
    # Getting the type of 'y' (line 714)
    y_184295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 41), 'y', False)
    # Processing the call keyword arguments (line 714)
    kwargs_184296 = {}
    # Getting the type of 'safe_comparison' (line 714)
    safe_comparison_184293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 22), 'safe_comparison', False)
    # Calling safe_comparison(args, kwargs) (line 714)
    safe_comparison_call_result_184297 = invoke(stypy.reporting.localization.Localization(__file__, 714, 22), safe_comparison_184293, *[x_184294, y_184295], **kwargs_184296)
    
    # Assigning a type to the variable 'val' (line 714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 16), 'val', safe_comparison_call_result_184297)
    # SSA join for if statement (line 711)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 690)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 716):
    
    # Assigning a Call to a Name (line 716):
    
    # Call to safe_comparison(...): (line 716)
    # Processing the call arguments (line 716)
    # Getting the type of 'x' (line 716)
    x_184299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 34), 'x', False)
    # Getting the type of 'y' (line 716)
    y_184300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 37), 'y', False)
    # Processing the call keyword arguments (line 716)
    kwargs_184301 = {}
    # Getting the type of 'safe_comparison' (line 716)
    safe_comparison_184298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 18), 'safe_comparison', False)
    # Calling safe_comparison(args, kwargs) (line 716)
    safe_comparison_call_result_184302 = invoke(stypy.reporting.localization.Localization(__file__, 716, 18), safe_comparison_184298, *[x_184299, y_184300], **kwargs_184301)
    
    # Assigning a type to the variable 'val' (line 716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 12), 'val', safe_comparison_call_result_184302)
    # SSA join for if statement (line 690)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 718)
    # Getting the type of 'bool' (line 718)
    bool_184303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 27), 'bool')
    # Getting the type of 'val' (line 718)
    val_184304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 22), 'val')
    
    (may_be_184305, more_types_in_union_184306) = may_be_subtype(bool_184303, val_184304)

    if may_be_184305:

        if more_types_in_union_184306:
            # Runtime conditional SSA (line 718)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'val' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'val', remove_not_subtype_from_union(val_184304, bool))
        
        # Assigning a Name to a Name (line 719):
        
        # Assigning a Name to a Name (line 719):
        # Getting the type of 'val' (line 719)
        val_184307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 19), 'val')
        # Assigning a type to the variable 'cond' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 12), 'cond', val_184307)
        
        # Assigning a List to a Name (line 720):
        
        # Assigning a List to a Name (line 720):
        
        # Obtaining an instance of the builtin type 'list' (line 720)
        list_184308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 720)
        # Adding element type (line 720)
        int_184309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 720, 22), list_184308, int_184309)
        
        # Assigning a type to the variable 'reduced' (line 720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 12), 'reduced', list_184308)

        if more_types_in_union_184306:
            # Runtime conditional SSA for else branch (line 718)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_184305) or more_types_in_union_184306):
        # Assigning a type to the variable 'val' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'val', remove_subtype_from_union(val_184304, bool))
        
        # Assigning a Call to a Name (line 722):
        
        # Assigning a Call to a Name (line 722):
        
        # Call to ravel(...): (line 722)
        # Processing the call keyword arguments (line 722)
        kwargs_184312 = {}
        # Getting the type of 'val' (line 722)
        val_184310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 22), 'val', False)
        # Obtaining the member 'ravel' of a type (line 722)
        ravel_184311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 22), val_184310, 'ravel')
        # Calling ravel(args, kwargs) (line 722)
        ravel_call_result_184313 = invoke(stypy.reporting.localization.Localization(__file__, 722, 22), ravel_184311, *[], **kwargs_184312)
        
        # Assigning a type to the variable 'reduced' (line 722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 12), 'reduced', ravel_call_result_184313)
        
        # Assigning a Call to a Name (line 723):
        
        # Assigning a Call to a Name (line 723):
        
        # Call to all(...): (line 723)
        # Processing the call keyword arguments (line 723)
        kwargs_184316 = {}
        # Getting the type of 'reduced' (line 723)
        reduced_184314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 19), 'reduced', False)
        # Obtaining the member 'all' of a type (line 723)
        all_184315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 19), reduced_184314, 'all')
        # Calling all(args, kwargs) (line 723)
        all_call_result_184317 = invoke(stypy.reporting.localization.Localization(__file__, 723, 19), all_184315, *[], **kwargs_184316)
        
        # Assigning a type to the variable 'cond' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 12), 'cond', all_call_result_184317)
        
        # Assigning a Call to a Name (line 724):
        
        # Assigning a Call to a Name (line 724):
        
        # Call to tolist(...): (line 724)
        # Processing the call keyword arguments (line 724)
        kwargs_184320 = {}
        # Getting the type of 'reduced' (line 724)
        reduced_184318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 22), 'reduced', False)
        # Obtaining the member 'tolist' of a type (line 724)
        tolist_184319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 22), reduced_184318, 'tolist')
        # Calling tolist(args, kwargs) (line 724)
        tolist_call_result_184321 = invoke(stypy.reporting.localization.Localization(__file__, 724, 22), tolist_184319, *[], **kwargs_184320)
        
        # Assigning a type to the variable 'reduced' (line 724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 12), 'reduced', tolist_call_result_184321)

        if (may_be_184305 and more_types_in_union_184306):
            # SSA join for if statement (line 718)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'cond' (line 725)
    cond_184322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 15), 'cond')
    # Applying the 'not' unary operator (line 725)
    result_not__184323 = python_operator(stypy.reporting.localization.Localization(__file__, 725, 11), 'not', cond_184322)
    
    # Testing the type of an if condition (line 725)
    if_condition_184324 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 725, 8), result_not__184323)
    # Assigning a type to the variable 'if_condition_184324' (line 725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'if_condition_184324', if_condition_184324)
    # SSA begins for if statement (line 725)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 726):
    
    # Assigning a BinOp to a Name (line 726):
    int_184325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 20), 'int')
    float_184326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 24), 'float')
    
    # Call to count(...): (line 726)
    # Processing the call arguments (line 726)
    int_184329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 44), 'int')
    # Processing the call keyword arguments (line 726)
    kwargs_184330 = {}
    # Getting the type of 'reduced' (line 726)
    reduced_184327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 30), 'reduced', False)
    # Obtaining the member 'count' of a type (line 726)
    count_184328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 30), reduced_184327, 'count')
    # Calling count(args, kwargs) (line 726)
    count_call_result_184331 = invoke(stypy.reporting.localization.Localization(__file__, 726, 30), count_184328, *[int_184329], **kwargs_184330)
    
    # Applying the binary operator '*' (line 726)
    result_mul_184332 = python_operator(stypy.reporting.localization.Localization(__file__, 726, 24), '*', float_184326, count_call_result_184331)
    
    
    # Call to len(...): (line 726)
    # Processing the call arguments (line 726)
    # Getting the type of 'reduced' (line 726)
    reduced_184334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 51), 'reduced', False)
    # Processing the call keyword arguments (line 726)
    kwargs_184335 = {}
    # Getting the type of 'len' (line 726)
    len_184333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 47), 'len', False)
    # Calling len(args, kwargs) (line 726)
    len_call_result_184336 = invoke(stypy.reporting.localization.Localization(__file__, 726, 47), len_184333, *[reduced_184334], **kwargs_184335)
    
    # Applying the binary operator 'div' (line 726)
    result_div_184337 = python_operator(stypy.reporting.localization.Localization(__file__, 726, 46), 'div', result_mul_184332, len_call_result_184336)
    
    # Applying the binary operator '-' (line 726)
    result_sub_184338 = python_operator(stypy.reporting.localization.Localization(__file__, 726, 20), '-', int_184325, result_div_184337)
    
    # Assigning a type to the variable 'match' (line 726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 12), 'match', result_sub_184338)
    
    # Assigning a Call to a Name (line 727):
    
    # Assigning a Call to a Name (line 727):
    
    # Call to build_err_msg(...): (line 727)
    # Processing the call arguments (line 727)
    
    # Obtaining an instance of the builtin type 'list' (line 727)
    list_184340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 32), 'list')
    # Adding type elements to the builtin type 'list' instance (line 727)
    # Adding element type (line 727)
    # Getting the type of 'x' (line 727)
    x_184341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 33), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 32), list_184340, x_184341)
    # Adding element type (line 727)
    # Getting the type of 'y' (line 727)
    y_184342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 36), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 32), list_184340, y_184342)
    
    # Getting the type of 'err_msg' (line 728)
    err_msg_184343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 32), 'err_msg', False)
    str_184344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 34), 'str', '\n(mismatch %s%%)')
    
    # Obtaining an instance of the builtin type 'tuple' (line 729)
    tuple_184345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 57), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 729)
    # Adding element type (line 729)
    # Getting the type of 'match' (line 729)
    match_184346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 57), 'match', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 729, 57), tuple_184345, match_184346)
    
    # Applying the binary operator '%' (line 729)
    result_mod_184347 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 34), '%', str_184344, tuple_184345)
    
    # Applying the binary operator '+' (line 728)
    result_add_184348 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 32), '+', err_msg_184343, result_mod_184347)
    
    # Processing the call keyword arguments (line 727)
    # Getting the type of 'verbose' (line 730)
    verbose_184349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 40), 'verbose', False)
    keyword_184350 = verbose_184349
    # Getting the type of 'header' (line 730)
    header_184351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 56), 'header', False)
    keyword_184352 = header_184351
    
    # Obtaining an instance of the builtin type 'tuple' (line 731)
    tuple_184353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 731)
    # Adding element type (line 731)
    str_184354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 39), 'str', 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 39), tuple_184353, str_184354)
    # Adding element type (line 731)
    str_184355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 44), 'str', 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 39), tuple_184353, str_184355)
    
    keyword_184356 = tuple_184353
    # Getting the type of 'precision' (line 731)
    precision_184357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 60), 'precision', False)
    keyword_184358 = precision_184357
    kwargs_184359 = {'header': keyword_184352, 'verbose': keyword_184350, 'precision': keyword_184358, 'names': keyword_184356}
    # Getting the type of 'build_err_msg' (line 727)
    build_err_msg_184339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 18), 'build_err_msg', False)
    # Calling build_err_msg(args, kwargs) (line 727)
    build_err_msg_call_result_184360 = invoke(stypy.reporting.localization.Localization(__file__, 727, 18), build_err_msg_184339, *[list_184340, result_add_184348], **kwargs_184359)
    
    # Assigning a type to the variable 'msg' (line 727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 12), 'msg', build_err_msg_call_result_184360)
    
    
    # Getting the type of 'cond' (line 732)
    cond_184361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 19), 'cond')
    # Applying the 'not' unary operator (line 732)
    result_not__184362 = python_operator(stypy.reporting.localization.Localization(__file__, 732, 15), 'not', cond_184361)
    
    # Testing the type of an if condition (line 732)
    if_condition_184363 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 732, 12), result_not__184362)
    # Assigning a type to the variable 'if_condition_184363' (line 732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 12), 'if_condition_184363', if_condition_184363)
    # SSA begins for if statement (line 732)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 733)
    # Processing the call arguments (line 733)
    # Getting the type of 'msg' (line 733)
    msg_184365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 37), 'msg', False)
    # Processing the call keyword arguments (line 733)
    kwargs_184366 = {}
    # Getting the type of 'AssertionError' (line 733)
    AssertionError_184364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 22), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 733)
    AssertionError_call_result_184367 = invoke(stypy.reporting.localization.Localization(__file__, 733, 22), AssertionError_184364, *[msg_184365], **kwargs_184366)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 733, 16), AssertionError_call_result_184367, 'raise parameter', BaseException)
    # SSA join for if statement (line 732)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 725)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 678)
    # SSA branch for the except 'ValueError' branch of a try statement (line 678)
    module_type_store.open_ssa_branch('except')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 735, 8))
    
    # 'import traceback' statement (line 735)
    import traceback

    import_module(stypy.reporting.localization.Localization(__file__, 735, 8), 'traceback', traceback, module_type_store)
    
    
    # Assigning a Call to a Name (line 736):
    
    # Assigning a Call to a Name (line 736):
    
    # Call to format_exc(...): (line 736)
    # Processing the call keyword arguments (line 736)
    kwargs_184370 = {}
    # Getting the type of 'traceback' (line 736)
    traceback_184368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 15), 'traceback', False)
    # Obtaining the member 'format_exc' of a type (line 736)
    format_exc_184369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 15), traceback_184368, 'format_exc')
    # Calling format_exc(args, kwargs) (line 736)
    format_exc_call_result_184371 = invoke(stypy.reporting.localization.Localization(__file__, 736, 15), format_exc_184369, *[], **kwargs_184370)
    
    # Assigning a type to the variable 'efmt' (line 736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'efmt', format_exc_call_result_184371)
    
    # Assigning a BinOp to a Name (line 737):
    
    # Assigning a BinOp to a Name (line 737):
    str_184372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 17), 'str', 'error during assertion:\n\n%s\n\n%s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 737)
    tuple_184373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 58), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 737)
    # Adding element type (line 737)
    # Getting the type of 'efmt' (line 737)
    efmt_184374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 58), 'efmt')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 737, 58), tuple_184373, efmt_184374)
    # Adding element type (line 737)
    # Getting the type of 'header' (line 737)
    header_184375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 64), 'header')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 737, 58), tuple_184373, header_184375)
    
    # Applying the binary operator '%' (line 737)
    result_mod_184376 = python_operator(stypy.reporting.localization.Localization(__file__, 737, 17), '%', str_184372, tuple_184373)
    
    # Assigning a type to the variable 'header' (line 737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'header', result_mod_184376)
    
    # Assigning a Call to a Name (line 739):
    
    # Assigning a Call to a Name (line 739):
    
    # Call to build_err_msg(...): (line 739)
    # Processing the call arguments (line 739)
    
    # Obtaining an instance of the builtin type 'list' (line 739)
    list_184378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 739)
    # Adding element type (line 739)
    # Getting the type of 'x' (line 739)
    x_184379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 29), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 28), list_184378, x_184379)
    # Adding element type (line 739)
    # Getting the type of 'y' (line 739)
    y_184380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 32), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 28), list_184378, y_184380)
    
    # Getting the type of 'err_msg' (line 739)
    err_msg_184381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 36), 'err_msg', False)
    # Processing the call keyword arguments (line 739)
    # Getting the type of 'verbose' (line 739)
    verbose_184382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 53), 'verbose', False)
    keyword_184383 = verbose_184382
    # Getting the type of 'header' (line 739)
    header_184384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 69), 'header', False)
    keyword_184385 = header_184384
    
    # Obtaining an instance of the builtin type 'tuple' (line 740)
    tuple_184386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 740)
    # Adding element type (line 740)
    str_184387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 35), 'str', 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 740, 35), tuple_184386, str_184387)
    # Adding element type (line 740)
    str_184388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 40), 'str', 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 740, 35), tuple_184386, str_184388)
    
    keyword_184389 = tuple_184386
    # Getting the type of 'precision' (line 740)
    precision_184390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 56), 'precision', False)
    keyword_184391 = precision_184390
    kwargs_184392 = {'header': keyword_184385, 'verbose': keyword_184383, 'precision': keyword_184391, 'names': keyword_184389}
    # Getting the type of 'build_err_msg' (line 739)
    build_err_msg_184377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 14), 'build_err_msg', False)
    # Calling build_err_msg(args, kwargs) (line 739)
    build_err_msg_call_result_184393 = invoke(stypy.reporting.localization.Localization(__file__, 739, 14), build_err_msg_184377, *[list_184378, err_msg_184381], **kwargs_184392)
    
    # Assigning a type to the variable 'msg' (line 739)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'msg', build_err_msg_call_result_184393)
    
    # Call to ValueError(...): (line 741)
    # Processing the call arguments (line 741)
    # Getting the type of 'msg' (line 741)
    msg_184395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 25), 'msg', False)
    # Processing the call keyword arguments (line 741)
    kwargs_184396 = {}
    # Getting the type of 'ValueError' (line 741)
    ValueError_184394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 741)
    ValueError_call_result_184397 = invoke(stypy.reporting.localization.Localization(__file__, 741, 14), ValueError_184394, *[msg_184395], **kwargs_184396)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 741, 8), ValueError_call_result_184397, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 678)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'assert_array_compare(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_array_compare' in the type store
    # Getting the type of 'stypy_return_type' (line 633)
    stypy_return_type_184398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184398)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_array_compare'
    return stypy_return_type_184398

# Assigning a type to the variable 'assert_array_compare' (line 633)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 0), 'assert_array_compare', assert_array_compare)

@norecursion
def assert_array_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_184399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 37), 'str', '')
    # Getting the type of 'True' (line 743)
    True_184400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 49), 'True')
    defaults = [str_184399, True_184400]
    # Create a new context for function 'assert_array_equal'
    module_type_store = module_type_store.open_function_context('assert_array_equal', 743, 0, False)
    
    # Passed parameters checking function
    assert_array_equal.stypy_localization = localization
    assert_array_equal.stypy_type_of_self = None
    assert_array_equal.stypy_type_store = module_type_store
    assert_array_equal.stypy_function_name = 'assert_array_equal'
    assert_array_equal.stypy_param_names_list = ['x', 'y', 'err_msg', 'verbose']
    assert_array_equal.stypy_varargs_param_name = None
    assert_array_equal.stypy_kwargs_param_name = None
    assert_array_equal.stypy_call_defaults = defaults
    assert_array_equal.stypy_call_varargs = varargs
    assert_array_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_array_equal', ['x', 'y', 'err_msg', 'verbose'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_array_equal', localization, ['x', 'y', 'err_msg', 'verbose'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_array_equal(...)' code ##################

    str_184401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, (-1)), 'str', "\n    Raises an AssertionError if two array_like objects are not equal.\n\n    Given two array_like objects, check that the shape is equal and all\n    elements of these objects are equal. An exception is raised at\n    shape mismatch or conflicting values. In contrast to the standard usage\n    in numpy, NaNs are compared like numbers, no assertion is raised if\n    both objects have NaNs in the same positions.\n\n    The usual caution for verifying equality with floating point numbers is\n    advised.\n\n    Parameters\n    ----------\n    x : array_like\n        The actual object to check.\n    y : array_like\n        The desired, expected object.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n        If actual and desired objects are not equal.\n\n    See Also\n    --------\n    assert_allclose: Compare two array_like objects for equality with desired\n                     relative and/or absolute precision.\n    assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal\n\n    Examples\n    --------\n    The first assert does not raise an exception:\n\n    >>> np.testing.assert_array_equal([1.0,2.33333,np.nan],\n    ...                               [np.exp(0),2.33333, np.nan])\n\n    Assert fails with numerical inprecision with floats:\n\n    >>> np.testing.assert_array_equal([1.0,np.pi,np.nan],\n    ...                               [1, np.sqrt(np.pi)**2, np.nan])\n    ...\n    <type 'exceptions.ValueError'>:\n    AssertionError:\n    Arrays are not equal\n    <BLANKLINE>\n    (mismatch 50.0%)\n     x: array([ 1.        ,  3.14159265,         NaN])\n     y: array([ 1.        ,  3.14159265,         NaN])\n\n    Use `assert_allclose` or one of the nulp (number of floating point values)\n    functions for these cases instead:\n\n    >>> np.testing.assert_allclose([1.0,np.pi,np.nan],\n    ...                            [1, np.sqrt(np.pi)**2, np.nan],\n    ...                            rtol=1e-10, atol=0)\n\n    ")
    
    # Call to assert_array_compare(...): (line 806)
    # Processing the call arguments (line 806)
    # Getting the type of 'operator' (line 806)
    operator_184403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 25), 'operator', False)
    # Obtaining the member '__eq__' of a type (line 806)
    eq___184404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 25), operator_184403, '__eq__')
    # Getting the type of 'x' (line 806)
    x_184405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 42), 'x', False)
    # Getting the type of 'y' (line 806)
    y_184406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 45), 'y', False)
    # Processing the call keyword arguments (line 806)
    # Getting the type of 'err_msg' (line 806)
    err_msg_184407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 56), 'err_msg', False)
    keyword_184408 = err_msg_184407
    # Getting the type of 'verbose' (line 807)
    verbose_184409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 33), 'verbose', False)
    keyword_184410 = verbose_184409
    str_184411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 49), 'str', 'Arrays are not equal')
    keyword_184412 = str_184411
    kwargs_184413 = {'header': keyword_184412, 'err_msg': keyword_184408, 'verbose': keyword_184410}
    # Getting the type of 'assert_array_compare' (line 806)
    assert_array_compare_184402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 4), 'assert_array_compare', False)
    # Calling assert_array_compare(args, kwargs) (line 806)
    assert_array_compare_call_result_184414 = invoke(stypy.reporting.localization.Localization(__file__, 806, 4), assert_array_compare_184402, *[eq___184404, x_184405, y_184406], **kwargs_184413)
    
    
    # ################# End of 'assert_array_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_array_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 743)
    stypy_return_type_184415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184415)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_array_equal'
    return stypy_return_type_184415

# Assigning a type to the variable 'assert_array_equal' (line 743)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 0), 'assert_array_equal', assert_array_equal)

@norecursion
def assert_array_almost_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_184416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 44), 'int')
    str_184417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 55), 'str', '')
    # Getting the type of 'True' (line 809)
    True_184418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 67), 'True')
    defaults = [int_184416, str_184417, True_184418]
    # Create a new context for function 'assert_array_almost_equal'
    module_type_store = module_type_store.open_function_context('assert_array_almost_equal', 809, 0, False)
    
    # Passed parameters checking function
    assert_array_almost_equal.stypy_localization = localization
    assert_array_almost_equal.stypy_type_of_self = None
    assert_array_almost_equal.stypy_type_store = module_type_store
    assert_array_almost_equal.stypy_function_name = 'assert_array_almost_equal'
    assert_array_almost_equal.stypy_param_names_list = ['x', 'y', 'decimal', 'err_msg', 'verbose']
    assert_array_almost_equal.stypy_varargs_param_name = None
    assert_array_almost_equal.stypy_kwargs_param_name = None
    assert_array_almost_equal.stypy_call_defaults = defaults
    assert_array_almost_equal.stypy_call_varargs = varargs
    assert_array_almost_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_array_almost_equal', ['x', 'y', 'decimal', 'err_msg', 'verbose'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_array_almost_equal', localization, ['x', 'y', 'decimal', 'err_msg', 'verbose'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_array_almost_equal(...)' code ##################

    str_184419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, (-1)), 'str', "\n    Raises an AssertionError if two objects are not equal up to desired\n    precision.\n\n    .. note:: It is recommended to use one of `assert_allclose`,\n              `assert_array_almost_equal_nulp` or `assert_array_max_ulp`\n              instead of this function for more consistent floating point\n              comparisons.\n\n    The test verifies identical shapes and verifies values with\n    ``abs(desired-actual) < 0.5 * 10**(-decimal)``.\n\n    Given two array_like objects, check that the shape is equal and all\n    elements of these objects are almost equal. An exception is raised at\n    shape mismatch or conflicting values. In contrast to the standard usage\n    in numpy, NaNs are compared like numbers, no assertion is raised if\n    both objects have NaNs in the same positions.\n\n    Parameters\n    ----------\n    x : array_like\n        The actual object to check.\n    y : array_like\n        The desired, expected object.\n    decimal : int, optional\n        Desired precision, default is 6.\n    err_msg : str, optional\n      The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n        If actual and desired are not equal up to specified precision.\n\n    See Also\n    --------\n    assert_allclose: Compare two array_like objects for equality with desired\n                     relative and/or absolute precision.\n    assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal\n\n    Examples\n    --------\n    the first assert does not raise an exception\n\n    >>> np.testing.assert_array_almost_equal([1.0,2.333,np.nan],\n                                             [1.0,2.333,np.nan])\n\n    >>> np.testing.assert_array_almost_equal([1.0,2.33333,np.nan],\n    ...                                      [1.0,2.33339,np.nan], decimal=5)\n    ...\n    <type 'exceptions.AssertionError'>:\n    AssertionError:\n    Arrays are not almost equal\n    <BLANKLINE>\n    (mismatch 50.0%)\n     x: array([ 1.     ,  2.33333,      NaN])\n     y: array([ 1.     ,  2.33339,      NaN])\n\n    >>> np.testing.assert_array_almost_equal([1.0,2.33333,np.nan],\n    ...                                      [1.0,2.33333, 5], decimal=5)\n    <type 'exceptions.ValueError'>:\n    ValueError:\n    Arrays are not almost equal\n     x: array([ 1.     ,  2.33333,      NaN])\n     y: array([ 1.     ,  2.33333,  5.     ])\n\n    ")
    
    # Assigning a Name to a Name (line 879):
    
    # Assigning a Name to a Name (line 879):
    # Getting the type of 'True' (line 879)
    True_184420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 4), '__tracebackhide__', True_184420)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 880, 4))
    
    # 'from numpy.core import around, number, float_, result_type, array' statement (line 880)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_184421 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 880, 4), 'numpy.core')

    if (type(import_184421) is not StypyTypeError):

        if (import_184421 != 'pyd_module'):
            __import__(import_184421)
            sys_modules_184422 = sys.modules[import_184421]
            import_from_module(stypy.reporting.localization.Localization(__file__, 880, 4), 'numpy.core', sys_modules_184422.module_type_store, module_type_store, ['around', 'number', 'float_', 'result_type', 'array'])
            nest_module(stypy.reporting.localization.Localization(__file__, 880, 4), __file__, sys_modules_184422, sys_modules_184422.module_type_store, module_type_store)
        else:
            from numpy.core import around, number, float_, result_type, array

            import_from_module(stypy.reporting.localization.Localization(__file__, 880, 4), 'numpy.core', None, module_type_store, ['around', 'number', 'float_', 'result_type', 'array'], [around, number, float_, result_type, array])

    else:
        # Assigning a type to the variable 'numpy.core' (line 880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 4), 'numpy.core', import_184421)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 881, 4))
    
    # 'from numpy.core.numerictypes import issubdtype' statement (line 881)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_184423 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 881, 4), 'numpy.core.numerictypes')

    if (type(import_184423) is not StypyTypeError):

        if (import_184423 != 'pyd_module'):
            __import__(import_184423)
            sys_modules_184424 = sys.modules[import_184423]
            import_from_module(stypy.reporting.localization.Localization(__file__, 881, 4), 'numpy.core.numerictypes', sys_modules_184424.module_type_store, module_type_store, ['issubdtype'])
            nest_module(stypy.reporting.localization.Localization(__file__, 881, 4), __file__, sys_modules_184424, sys_modules_184424.module_type_store, module_type_store)
        else:
            from numpy.core.numerictypes import issubdtype

            import_from_module(stypy.reporting.localization.Localization(__file__, 881, 4), 'numpy.core.numerictypes', None, module_type_store, ['issubdtype'], [issubdtype])

    else:
        # Assigning a type to the variable 'numpy.core.numerictypes' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 4), 'numpy.core.numerictypes', import_184423)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 882, 4))
    
    # 'from numpy.core.fromnumeric import npany' statement (line 882)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_184425 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 882, 4), 'numpy.core.fromnumeric')

    if (type(import_184425) is not StypyTypeError):

        if (import_184425 != 'pyd_module'):
            __import__(import_184425)
            sys_modules_184426 = sys.modules[import_184425]
            import_from_module(stypy.reporting.localization.Localization(__file__, 882, 4), 'numpy.core.fromnumeric', sys_modules_184426.module_type_store, module_type_store, ['any'])
            nest_module(stypy.reporting.localization.Localization(__file__, 882, 4), __file__, sys_modules_184426, sys_modules_184426.module_type_store, module_type_store)
        else:
            from numpy.core.fromnumeric import any as npany

            import_from_module(stypy.reporting.localization.Localization(__file__, 882, 4), 'numpy.core.fromnumeric', None, module_type_store, ['any'], [npany])

    else:
        # Assigning a type to the variable 'numpy.core.fromnumeric' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'numpy.core.fromnumeric', import_184425)

    # Adding an alias
    module_type_store.add_alias('npany', 'any')
    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    

    @norecursion
    def compare(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'compare'
        module_type_store = module_type_store.open_function_context('compare', 884, 4, False)
        
        # Passed parameters checking function
        compare.stypy_localization = localization
        compare.stypy_type_of_self = None
        compare.stypy_type_store = module_type_store
        compare.stypy_function_name = 'compare'
        compare.stypy_param_names_list = ['x', 'y']
        compare.stypy_varargs_param_name = None
        compare.stypy_kwargs_param_name = None
        compare.stypy_call_defaults = defaults
        compare.stypy_call_varargs = varargs
        compare.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'compare', ['x', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'compare', localization, ['x', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'compare(...)' code ##################

        
        
        # SSA begins for try-except statement (line 885)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        # Evaluating a boolean operation
        
        # Call to npany(...): (line 886)
        # Processing the call arguments (line 886)
        
        # Call to gisinf(...): (line 886)
        # Processing the call arguments (line 886)
        # Getting the type of 'x' (line 886)
        x_184429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 28), 'x', False)
        # Processing the call keyword arguments (line 886)
        kwargs_184430 = {}
        # Getting the type of 'gisinf' (line 886)
        gisinf_184428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 21), 'gisinf', False)
        # Calling gisinf(args, kwargs) (line 886)
        gisinf_call_result_184431 = invoke(stypy.reporting.localization.Localization(__file__, 886, 21), gisinf_184428, *[x_184429], **kwargs_184430)
        
        # Processing the call keyword arguments (line 886)
        kwargs_184432 = {}
        # Getting the type of 'npany' (line 886)
        npany_184427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 15), 'npany', False)
        # Calling npany(args, kwargs) (line 886)
        npany_call_result_184433 = invoke(stypy.reporting.localization.Localization(__file__, 886, 15), npany_184427, *[gisinf_call_result_184431], **kwargs_184432)
        
        
        # Call to npany(...): (line 886)
        # Processing the call arguments (line 886)
        
        # Call to gisinf(...): (line 886)
        # Processing the call arguments (line 886)
        # Getting the type of 'y' (line 886)
        y_184436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 49), 'y', False)
        # Processing the call keyword arguments (line 886)
        kwargs_184437 = {}
        # Getting the type of 'gisinf' (line 886)
        gisinf_184435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 42), 'gisinf', False)
        # Calling gisinf(args, kwargs) (line 886)
        gisinf_call_result_184438 = invoke(stypy.reporting.localization.Localization(__file__, 886, 42), gisinf_184435, *[y_184436], **kwargs_184437)
        
        # Processing the call keyword arguments (line 886)
        kwargs_184439 = {}
        # Getting the type of 'npany' (line 886)
        npany_184434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 35), 'npany', False)
        # Calling npany(args, kwargs) (line 886)
        npany_call_result_184440 = invoke(stypy.reporting.localization.Localization(__file__, 886, 35), npany_184434, *[gisinf_call_result_184438], **kwargs_184439)
        
        # Applying the binary operator 'or' (line 886)
        result_or_keyword_184441 = python_operator(stypy.reporting.localization.Localization(__file__, 886, 15), 'or', npany_call_result_184433, npany_call_result_184440)
        
        # Testing the type of an if condition (line 886)
        if_condition_184442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 886, 12), result_or_keyword_184441)
        # Assigning a type to the variable 'if_condition_184442' (line 886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 12), 'if_condition_184442', if_condition_184442)
        # SSA begins for if statement (line 886)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 887):
        
        # Assigning a Call to a Name (line 887):
        
        # Call to gisinf(...): (line 887)
        # Processing the call arguments (line 887)
        # Getting the type of 'x' (line 887)
        x_184444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 32), 'x', False)
        # Processing the call keyword arguments (line 887)
        kwargs_184445 = {}
        # Getting the type of 'gisinf' (line 887)
        gisinf_184443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 25), 'gisinf', False)
        # Calling gisinf(args, kwargs) (line 887)
        gisinf_call_result_184446 = invoke(stypy.reporting.localization.Localization(__file__, 887, 25), gisinf_184443, *[x_184444], **kwargs_184445)
        
        # Assigning a type to the variable 'xinfid' (line 887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 16), 'xinfid', gisinf_call_result_184446)
        
        # Assigning a Call to a Name (line 888):
        
        # Assigning a Call to a Name (line 888):
        
        # Call to gisinf(...): (line 888)
        # Processing the call arguments (line 888)
        # Getting the type of 'y' (line 888)
        y_184448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 32), 'y', False)
        # Processing the call keyword arguments (line 888)
        kwargs_184449 = {}
        # Getting the type of 'gisinf' (line 888)
        gisinf_184447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 25), 'gisinf', False)
        # Calling gisinf(args, kwargs) (line 888)
        gisinf_call_result_184450 = invoke(stypy.reporting.localization.Localization(__file__, 888, 25), gisinf_184447, *[y_184448], **kwargs_184449)
        
        # Assigning a type to the variable 'yinfid' (line 888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 16), 'yinfid', gisinf_call_result_184450)
        
        
        
        # Getting the type of 'xinfid' (line 889)
        xinfid_184451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 23), 'xinfid')
        # Getting the type of 'yinfid' (line 889)
        yinfid_184452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 33), 'yinfid')
        # Applying the binary operator '==' (line 889)
        result_eq_184453 = python_operator(stypy.reporting.localization.Localization(__file__, 889, 23), '==', xinfid_184451, yinfid_184452)
        
        # Applying the 'not' unary operator (line 889)
        result_not__184454 = python_operator(stypy.reporting.localization.Localization(__file__, 889, 19), 'not', result_eq_184453)
        
        # Testing the type of an if condition (line 889)
        if_condition_184455 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 889, 16), result_not__184454)
        # Assigning a type to the variable 'if_condition_184455' (line 889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 16), 'if_condition_184455', if_condition_184455)
        # SSA begins for if statement (line 889)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 890)
        False_184456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 27), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 20), 'stypy_return_type', False_184456)
        # SSA join for if statement (line 889)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x' (line 892)
        x_184457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 19), 'x')
        # Obtaining the member 'size' of a type (line 892)
        size_184458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 19), x_184457, 'size')
        # Getting the type of 'y' (line 892)
        y_184459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 29), 'y')
        # Obtaining the member 'size' of a type (line 892)
        size_184460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 29), y_184459, 'size')
        # Applying the binary operator '==' (line 892)
        result_eq_184461 = python_operator(stypy.reporting.localization.Localization(__file__, 892, 19), '==', size_184458, size_184460)
        int_184462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 39), 'int')
        # Applying the binary operator '==' (line 892)
        result_eq_184463 = python_operator(stypy.reporting.localization.Localization(__file__, 892, 19), '==', size_184460, int_184462)
        # Applying the binary operator '&' (line 892)
        result_and__184464 = python_operator(stypy.reporting.localization.Localization(__file__, 892, 19), '&', result_eq_184461, result_eq_184463)
        
        # Testing the type of an if condition (line 892)
        if_condition_184465 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 892, 16), result_and__184464)
        # Assigning a type to the variable 'if_condition_184465' (line 892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 16), 'if_condition_184465', if_condition_184465)
        # SSA begins for if statement (line 892)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'x' (line 893)
        x_184466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 27), 'x')
        # Getting the type of 'y' (line 893)
        y_184467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 32), 'y')
        # Applying the binary operator '==' (line 893)
        result_eq_184468 = python_operator(stypy.reporting.localization.Localization(__file__, 893, 27), '==', x_184466, y_184467)
        
        # Assigning a type to the variable 'stypy_return_type' (line 893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 20), 'stypy_return_type', result_eq_184468)
        # SSA join for if statement (line 892)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 894):
        
        # Assigning a Subscript to a Name (line 894):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'xinfid' (line 894)
        xinfid_184469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 23), 'xinfid')
        # Applying the '~' unary operator (line 894)
        result_inv_184470 = python_operator(stypy.reporting.localization.Localization(__file__, 894, 22), '~', xinfid_184469)
        
        # Getting the type of 'x' (line 894)
        x_184471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 20), 'x')
        # Obtaining the member '__getitem__' of a type (line 894)
        getitem___184472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 20), x_184471, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 894)
        subscript_call_result_184473 = invoke(stypy.reporting.localization.Localization(__file__, 894, 20), getitem___184472, result_inv_184470)
        
        # Assigning a type to the variable 'x' (line 894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 16), 'x', subscript_call_result_184473)
        
        # Assigning a Subscript to a Name (line 895):
        
        # Assigning a Subscript to a Name (line 895):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'yinfid' (line 895)
        yinfid_184474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 23), 'yinfid')
        # Applying the '~' unary operator (line 895)
        result_inv_184475 = python_operator(stypy.reporting.localization.Localization(__file__, 895, 22), '~', yinfid_184474)
        
        # Getting the type of 'y' (line 895)
        y_184476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 20), 'y')
        # Obtaining the member '__getitem__' of a type (line 895)
        getitem___184477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 20), y_184476, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 895)
        subscript_call_result_184478 = invoke(stypy.reporting.localization.Localization(__file__, 895, 20), getitem___184477, result_inv_184475)
        
        # Assigning a type to the variable 'y' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 16), 'y', subscript_call_result_184478)
        # SSA join for if statement (line 886)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 885)
        # SSA branch for the except 'Tuple' branch of a try statement (line 885)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 885)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 901):
        
        # Assigning a Call to a Name (line 901):
        
        # Call to result_type(...): (line 901)
        # Processing the call arguments (line 901)
        # Getting the type of 'y' (line 901)
        y_184480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 28), 'y', False)
        float_184481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 31), 'float')
        # Processing the call keyword arguments (line 901)
        kwargs_184482 = {}
        # Getting the type of 'result_type' (line 901)
        result_type_184479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 16), 'result_type', False)
        # Calling result_type(args, kwargs) (line 901)
        result_type_call_result_184483 = invoke(stypy.reporting.localization.Localization(__file__, 901, 16), result_type_184479, *[y_184480, float_184481], **kwargs_184482)
        
        # Assigning a type to the variable 'dtype' (line 901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 8), 'dtype', result_type_call_result_184483)
        
        # Assigning a Call to a Name (line 902):
        
        # Assigning a Call to a Name (line 902):
        
        # Call to array(...): (line 902)
        # Processing the call arguments (line 902)
        # Getting the type of 'y' (line 902)
        y_184485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 18), 'y', False)
        # Processing the call keyword arguments (line 902)
        # Getting the type of 'dtype' (line 902)
        dtype_184486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 27), 'dtype', False)
        keyword_184487 = dtype_184486
        # Getting the type of 'False' (line 902)
        False_184488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 39), 'False', False)
        keyword_184489 = False_184488
        # Getting the type of 'True' (line 902)
        True_184490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 52), 'True', False)
        keyword_184491 = True_184490
        kwargs_184492 = {'dtype': keyword_184487, 'copy': keyword_184489, 'subok': keyword_184491}
        # Getting the type of 'array' (line 902)
        array_184484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 12), 'array', False)
        # Calling array(args, kwargs) (line 902)
        array_call_result_184493 = invoke(stypy.reporting.localization.Localization(__file__, 902, 12), array_184484, *[y_184485], **kwargs_184492)
        
        # Assigning a type to the variable 'y' (line 902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 8), 'y', array_call_result_184493)
        
        # Assigning a Call to a Name (line 903):
        
        # Assigning a Call to a Name (line 903):
        
        # Call to abs(...): (line 903)
        # Processing the call arguments (line 903)
        # Getting the type of 'x' (line 903)
        x_184495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 16), 'x', False)
        # Getting the type of 'y' (line 903)
        y_184496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 18), 'y', False)
        # Applying the binary operator '-' (line 903)
        result_sub_184497 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 16), '-', x_184495, y_184496)
        
        # Processing the call keyword arguments (line 903)
        kwargs_184498 = {}
        # Getting the type of 'abs' (line 903)
        abs_184494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 12), 'abs', False)
        # Calling abs(args, kwargs) (line 903)
        abs_call_result_184499 = invoke(stypy.reporting.localization.Localization(__file__, 903, 12), abs_184494, *[result_sub_184497], **kwargs_184498)
        
        # Assigning a type to the variable 'z' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'z', abs_call_result_184499)
        
        
        
        # Call to issubdtype(...): (line 905)
        # Processing the call arguments (line 905)
        # Getting the type of 'z' (line 905)
        z_184501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 26), 'z', False)
        # Obtaining the member 'dtype' of a type (line 905)
        dtype_184502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 26), z_184501, 'dtype')
        # Getting the type of 'number' (line 905)
        number_184503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 35), 'number', False)
        # Processing the call keyword arguments (line 905)
        kwargs_184504 = {}
        # Getting the type of 'issubdtype' (line 905)
        issubdtype_184500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 15), 'issubdtype', False)
        # Calling issubdtype(args, kwargs) (line 905)
        issubdtype_call_result_184505 = invoke(stypy.reporting.localization.Localization(__file__, 905, 15), issubdtype_184500, *[dtype_184502, number_184503], **kwargs_184504)
        
        # Applying the 'not' unary operator (line 905)
        result_not__184506 = python_operator(stypy.reporting.localization.Localization(__file__, 905, 11), 'not', issubdtype_call_result_184505)
        
        # Testing the type of an if condition (line 905)
        if_condition_184507 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 905, 8), result_not__184506)
        # Assigning a type to the variable 'if_condition_184507' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'if_condition_184507', if_condition_184507)
        # SSA begins for if statement (line 905)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 906):
        
        # Assigning a Call to a Name (line 906):
        
        # Call to astype(...): (line 906)
        # Processing the call arguments (line 906)
        # Getting the type of 'float_' (line 906)
        float__184510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 25), 'float_', False)
        # Processing the call keyword arguments (line 906)
        kwargs_184511 = {}
        # Getting the type of 'z' (line 906)
        z_184508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 16), 'z', False)
        # Obtaining the member 'astype' of a type (line 906)
        astype_184509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 906, 16), z_184508, 'astype')
        # Calling astype(args, kwargs) (line 906)
        astype_call_result_184512 = invoke(stypy.reporting.localization.Localization(__file__, 906, 16), astype_184509, *[float__184510], **kwargs_184511)
        
        # Assigning a type to the variable 'z' (line 906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 12), 'z', astype_call_result_184512)
        # SSA join for if statement (line 905)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to around(...): (line 908)
        # Processing the call arguments (line 908)
        # Getting the type of 'z' (line 908)
        z_184514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 22), 'z', False)
        # Getting the type of 'decimal' (line 908)
        decimal_184515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 25), 'decimal', False)
        # Processing the call keyword arguments (line 908)
        kwargs_184516 = {}
        # Getting the type of 'around' (line 908)
        around_184513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 15), 'around', False)
        # Calling around(args, kwargs) (line 908)
        around_call_result_184517 = invoke(stypy.reporting.localization.Localization(__file__, 908, 15), around_184513, *[z_184514, decimal_184515], **kwargs_184516)
        
        float_184518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 37), 'float')
        
        # Getting the type of 'decimal' (line 908)
        decimal_184519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 45), 'decimal')
        # Applying the 'usub' unary operator (line 908)
        result___neg___184520 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 44), 'usub', decimal_184519)
        
        # Applying the binary operator '**' (line 908)
        result_pow_184521 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 37), '**', float_184518, result___neg___184520)
        
        # Applying the binary operator '<=' (line 908)
        result_le_184522 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 15), '<=', around_call_result_184517, result_pow_184521)
        
        # Assigning a type to the variable 'stypy_return_type' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 8), 'stypy_return_type', result_le_184522)
        
        # ################# End of 'compare(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'compare' in the type store
        # Getting the type of 'stypy_return_type' (line 884)
        stypy_return_type_184523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_184523)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'compare'
        return stypy_return_type_184523

    # Assigning a type to the variable 'compare' (line 884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'compare', compare)
    
    # Call to assert_array_compare(...): (line 910)
    # Processing the call arguments (line 910)
    # Getting the type of 'compare' (line 910)
    compare_184525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 25), 'compare', False)
    # Getting the type of 'x' (line 910)
    x_184526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 34), 'x', False)
    # Getting the type of 'y' (line 910)
    y_184527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 37), 'y', False)
    # Processing the call keyword arguments (line 910)
    # Getting the type of 'err_msg' (line 910)
    err_msg_184528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 48), 'err_msg', False)
    keyword_184529 = err_msg_184528
    # Getting the type of 'verbose' (line 910)
    verbose_184530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 65), 'verbose', False)
    keyword_184531 = verbose_184530
    str_184532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 21), 'str', 'Arrays are not almost equal to %d decimals')
    # Getting the type of 'decimal' (line 911)
    decimal_184533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 68), 'decimal', False)
    # Applying the binary operator '%' (line 911)
    result_mod_184534 = python_operator(stypy.reporting.localization.Localization(__file__, 911, 21), '%', str_184532, decimal_184533)
    
    keyword_184535 = result_mod_184534
    # Getting the type of 'decimal' (line 912)
    decimal_184536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 23), 'decimal', False)
    keyword_184537 = decimal_184536
    kwargs_184538 = {'header': keyword_184535, 'err_msg': keyword_184529, 'verbose': keyword_184531, 'precision': keyword_184537}
    # Getting the type of 'assert_array_compare' (line 910)
    assert_array_compare_184524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 4), 'assert_array_compare', False)
    # Calling assert_array_compare(args, kwargs) (line 910)
    assert_array_compare_call_result_184539 = invoke(stypy.reporting.localization.Localization(__file__, 910, 4), assert_array_compare_184524, *[compare_184525, x_184526, y_184527], **kwargs_184538)
    
    
    # ################# End of 'assert_array_almost_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_array_almost_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 809)
    stypy_return_type_184540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184540)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_array_almost_equal'
    return stypy_return_type_184540

# Assigning a type to the variable 'assert_array_almost_equal' (line 809)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 0), 'assert_array_almost_equal', assert_array_almost_equal)

@norecursion
def assert_array_less(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_184541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 36), 'str', '')
    # Getting the type of 'True' (line 915)
    True_184542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 48), 'True')
    defaults = [str_184541, True_184542]
    # Create a new context for function 'assert_array_less'
    module_type_store = module_type_store.open_function_context('assert_array_less', 915, 0, False)
    
    # Passed parameters checking function
    assert_array_less.stypy_localization = localization
    assert_array_less.stypy_type_of_self = None
    assert_array_less.stypy_type_store = module_type_store
    assert_array_less.stypy_function_name = 'assert_array_less'
    assert_array_less.stypy_param_names_list = ['x', 'y', 'err_msg', 'verbose']
    assert_array_less.stypy_varargs_param_name = None
    assert_array_less.stypy_kwargs_param_name = None
    assert_array_less.stypy_call_defaults = defaults
    assert_array_less.stypy_call_varargs = varargs
    assert_array_less.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_array_less', ['x', 'y', 'err_msg', 'verbose'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_array_less', localization, ['x', 'y', 'err_msg', 'verbose'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_array_less(...)' code ##################

    str_184543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, (-1)), 'str', "\n    Raises an AssertionError if two array_like objects are not ordered by less\n    than.\n\n    Given two array_like objects, check that the shape is equal and all\n    elements of the first object are strictly smaller than those of the\n    second object. An exception is raised at shape mismatch or incorrectly\n    ordered values. Shape mismatch does not raise if an object has zero\n    dimension. In contrast to the standard usage in numpy, NaNs are\n    compared, no assertion is raised if both objects have NaNs in the same\n    positions.\n\n\n\n    Parameters\n    ----------\n    x : array_like\n      The smaller object to check.\n    y : array_like\n      The larger object to compare.\n    err_msg : string\n      The error message to be printed in case of failure.\n    verbose : bool\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n      If actual and desired objects are not equal.\n\n    See Also\n    --------\n    assert_array_equal: tests objects for equality\n    assert_array_almost_equal: test objects for equality up to precision\n\n\n\n    Examples\n    --------\n    >>> np.testing.assert_array_less([1.0, 1.0, np.nan], [1.1, 2.0, np.nan])\n    >>> np.testing.assert_array_less([1.0, 1.0, np.nan], [1, 2.0, np.nan])\n    ...\n    <type 'exceptions.ValueError'>:\n    Arrays are not less-ordered\n    (mismatch 50.0%)\n     x: array([  1.,   1.,  NaN])\n     y: array([  1.,   2.,  NaN])\n\n    >>> np.testing.assert_array_less([1.0, 4.0], 3)\n    ...\n    <type 'exceptions.ValueError'>:\n    Arrays are not less-ordered\n    (mismatch 50.0%)\n     x: array([ 1.,  4.])\n     y: array(3)\n\n    >>> np.testing.assert_array_less([1.0, 2.0, 3.0], [4])\n    ...\n    <type 'exceptions.ValueError'>:\n    Arrays are not less-ordered\n    (shapes (3,), (1,) mismatch)\n     x: array([ 1.,  2.,  3.])\n     y: array([4])\n\n    ")
    
    # Assigning a Name to a Name (line 981):
    
    # Assigning a Name to a Name (line 981):
    # Getting the type of 'True' (line 981)
    True_184544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 981)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 4), '__tracebackhide__', True_184544)
    
    # Call to assert_array_compare(...): (line 982)
    # Processing the call arguments (line 982)
    # Getting the type of 'operator' (line 982)
    operator_184546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 25), 'operator', False)
    # Obtaining the member '__lt__' of a type (line 982)
    lt___184547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 25), operator_184546, '__lt__')
    # Getting the type of 'x' (line 982)
    x_184548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 42), 'x', False)
    # Getting the type of 'y' (line 982)
    y_184549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 45), 'y', False)
    # Processing the call keyword arguments (line 982)
    # Getting the type of 'err_msg' (line 982)
    err_msg_184550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 56), 'err_msg', False)
    keyword_184551 = err_msg_184550
    # Getting the type of 'verbose' (line 983)
    verbose_184552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 33), 'verbose', False)
    keyword_184553 = verbose_184552
    str_184554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 32), 'str', 'Arrays are not less-ordered')
    keyword_184555 = str_184554
    kwargs_184556 = {'header': keyword_184555, 'err_msg': keyword_184551, 'verbose': keyword_184553}
    # Getting the type of 'assert_array_compare' (line 982)
    assert_array_compare_184545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'assert_array_compare', False)
    # Calling assert_array_compare(args, kwargs) (line 982)
    assert_array_compare_call_result_184557 = invoke(stypy.reporting.localization.Localization(__file__, 982, 4), assert_array_compare_184545, *[lt___184547, x_184548, y_184549], **kwargs_184556)
    
    
    # ################# End of 'assert_array_less(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_array_less' in the type store
    # Getting the type of 'stypy_return_type' (line 915)
    stypy_return_type_184558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184558)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_array_less'
    return stypy_return_type_184558

# Assigning a type to the variable 'assert_array_less' (line 915)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 0), 'assert_array_less', assert_array_less)

@norecursion
def runstring(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'runstring'
    module_type_store = module_type_store.open_function_context('runstring', 986, 0, False)
    
    # Passed parameters checking function
    runstring.stypy_localization = localization
    runstring.stypy_type_of_self = None
    runstring.stypy_type_store = module_type_store
    runstring.stypy_function_name = 'runstring'
    runstring.stypy_param_names_list = ['astr', 'dict']
    runstring.stypy_varargs_param_name = None
    runstring.stypy_kwargs_param_name = None
    runstring.stypy_call_defaults = defaults
    runstring.stypy_call_varargs = varargs
    runstring.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'runstring', ['astr', 'dict'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'runstring', localization, ['astr', 'dict'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'runstring(...)' code ##################

    # Dynamic code evaluation using an exec statement
    # Getting the type of 'astr' (line 987)
    astr_184559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 9), 'astr')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 987, 4), astr_184559, 'exec parameter', 'StringType', 'FileType', 'CodeType')
    enable_usage_of_dynamic_types_warning(stypy.reporting.localization.Localization(__file__, 987, 4))
    
    # ################# End of 'runstring(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'runstring' in the type store
    # Getting the type of 'stypy_return_type' (line 986)
    stypy_return_type_184560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184560)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'runstring'
    return stypy_return_type_184560

# Assigning a type to the variable 'runstring' (line 986)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 0), 'runstring', runstring)

@norecursion
def assert_string_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'assert_string_equal'
    module_type_store = module_type_store.open_function_context('assert_string_equal', 989, 0, False)
    
    # Passed parameters checking function
    assert_string_equal.stypy_localization = localization
    assert_string_equal.stypy_type_of_self = None
    assert_string_equal.stypy_type_store = module_type_store
    assert_string_equal.stypy_function_name = 'assert_string_equal'
    assert_string_equal.stypy_param_names_list = ['actual', 'desired']
    assert_string_equal.stypy_varargs_param_name = None
    assert_string_equal.stypy_kwargs_param_name = None
    assert_string_equal.stypy_call_defaults = defaults
    assert_string_equal.stypy_call_varargs = varargs
    assert_string_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_string_equal', ['actual', 'desired'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_string_equal', localization, ['actual', 'desired'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_string_equal(...)' code ##################

    str_184561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, (-1)), 'str', '\n    Test if two strings are equal.\n\n    If the given strings are equal, `assert_string_equal` does nothing.\n    If they are not equal, an AssertionError is raised, and the diff\n    between the strings is shown.\n\n    Parameters\n    ----------\n    actual : str\n        The string to test for equality against the expected string.\n    desired : str\n        The expected string.\n\n    Examples\n    --------\n    >>> np.testing.assert_string_equal(\'abc\', \'abc\')\n    >>> np.testing.assert_string_equal(\'abc\', \'abcd\')\n    Traceback (most recent call last):\n      File "<stdin>", line 1, in <module>\n    ...\n    AssertionError: Differences in strings:\n    - abc+ abcd?    +\n\n    ')
    
    # Assigning a Name to a Name (line 1016):
    
    # Assigning a Name to a Name (line 1016):
    # Getting the type of 'True' (line 1016)
    True_184562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 1016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 4), '__tracebackhide__', True_184562)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1017, 4))
    
    # 'import difflib' statement (line 1017)
    import difflib

    import_module(stypy.reporting.localization.Localization(__file__, 1017, 4), 'difflib', difflib, module_type_store)
    
    
    # Type idiom detected: calculating its left and rigth part (line 1019)
    # Getting the type of 'str' (line 1019)
    str_184563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 30), 'str')
    # Getting the type of 'actual' (line 1019)
    actual_184564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 22), 'actual')
    
    (may_be_184565, more_types_in_union_184566) = may_not_be_subtype(str_184563, actual_184564)

    if may_be_184565:

        if more_types_in_union_184566:
            # Runtime conditional SSA (line 1019)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'actual' (line 1019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 4), 'actual', remove_subtype_from_union(actual_184564, str))
        
        # Call to AssertionError(...): (line 1020)
        # Processing the call arguments (line 1020)
        
        # Call to repr(...): (line 1020)
        # Processing the call arguments (line 1020)
        
        # Call to type(...): (line 1020)
        # Processing the call arguments (line 1020)
        # Getting the type of 'actual' (line 1020)
        actual_184570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 39), 'actual', False)
        # Processing the call keyword arguments (line 1020)
        kwargs_184571 = {}
        # Getting the type of 'type' (line 1020)
        type_184569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 34), 'type', False)
        # Calling type(args, kwargs) (line 1020)
        type_call_result_184572 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 34), type_184569, *[actual_184570], **kwargs_184571)
        
        # Processing the call keyword arguments (line 1020)
        kwargs_184573 = {}
        # Getting the type of 'repr' (line 1020)
        repr_184568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 29), 'repr', False)
        # Calling repr(args, kwargs) (line 1020)
        repr_call_result_184574 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 29), repr_184568, *[type_call_result_184572], **kwargs_184573)
        
        # Processing the call keyword arguments (line 1020)
        kwargs_184575 = {}
        # Getting the type of 'AssertionError' (line 1020)
        AssertionError_184567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 14), 'AssertionError', False)
        # Calling AssertionError(args, kwargs) (line 1020)
        AssertionError_call_result_184576 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 14), AssertionError_184567, *[repr_call_result_184574], **kwargs_184575)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1020, 8), AssertionError_call_result_184576, 'raise parameter', BaseException)

        if more_types_in_union_184566:
            # SSA join for if statement (line 1019)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1021)
    # Getting the type of 'str' (line 1021)
    str_184577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 31), 'str')
    # Getting the type of 'desired' (line 1021)
    desired_184578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 22), 'desired')
    
    (may_be_184579, more_types_in_union_184580) = may_not_be_subtype(str_184577, desired_184578)

    if may_be_184579:

        if more_types_in_union_184580:
            # Runtime conditional SSA (line 1021)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'desired' (line 1021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1021, 4), 'desired', remove_subtype_from_union(desired_184578, str))
        
        # Call to AssertionError(...): (line 1022)
        # Processing the call arguments (line 1022)
        
        # Call to repr(...): (line 1022)
        # Processing the call arguments (line 1022)
        
        # Call to type(...): (line 1022)
        # Processing the call arguments (line 1022)
        # Getting the type of 'desired' (line 1022)
        desired_184584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 39), 'desired', False)
        # Processing the call keyword arguments (line 1022)
        kwargs_184585 = {}
        # Getting the type of 'type' (line 1022)
        type_184583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 34), 'type', False)
        # Calling type(args, kwargs) (line 1022)
        type_call_result_184586 = invoke(stypy.reporting.localization.Localization(__file__, 1022, 34), type_184583, *[desired_184584], **kwargs_184585)
        
        # Processing the call keyword arguments (line 1022)
        kwargs_184587 = {}
        # Getting the type of 'repr' (line 1022)
        repr_184582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 29), 'repr', False)
        # Calling repr(args, kwargs) (line 1022)
        repr_call_result_184588 = invoke(stypy.reporting.localization.Localization(__file__, 1022, 29), repr_184582, *[type_call_result_184586], **kwargs_184587)
        
        # Processing the call keyword arguments (line 1022)
        kwargs_184589 = {}
        # Getting the type of 'AssertionError' (line 1022)
        AssertionError_184581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 14), 'AssertionError', False)
        # Calling AssertionError(args, kwargs) (line 1022)
        AssertionError_call_result_184590 = invoke(stypy.reporting.localization.Localization(__file__, 1022, 14), AssertionError_184581, *[repr_call_result_184588], **kwargs_184589)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1022, 8), AssertionError_call_result_184590, 'raise parameter', BaseException)

        if more_types_in_union_184580:
            # SSA join for if statement (line 1021)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to match(...): (line 1023)
    # Processing the call arguments (line 1023)
    str_184593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 16), 'str', '\\A')
    # Getting the type of 'desired' (line 1023)
    desired_184594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 22), 'desired', False)
    # Applying the binary operator '+' (line 1023)
    result_add_184595 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 16), '+', str_184593, desired_184594)
    
    str_184596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 30), 'str', '\\Z')
    # Applying the binary operator '+' (line 1023)
    result_add_184597 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 29), '+', result_add_184595, str_184596)
    
    # Getting the type of 'actual' (line 1023)
    actual_184598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 37), 'actual', False)
    # Getting the type of 're' (line 1023)
    re_184599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 45), 're', False)
    # Obtaining the member 'M' of a type (line 1023)
    M_184600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 45), re_184599, 'M')
    # Processing the call keyword arguments (line 1023)
    kwargs_184601 = {}
    # Getting the type of 're' (line 1023)
    re_184591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 7), 're', False)
    # Obtaining the member 'match' of a type (line 1023)
    match_184592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 7), re_184591, 'match')
    # Calling match(args, kwargs) (line 1023)
    match_call_result_184602 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 7), match_184592, *[result_add_184597, actual_184598, M_184600], **kwargs_184601)
    
    # Testing the type of an if condition (line 1023)
    if_condition_184603 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1023, 4), match_call_result_184602)
    # Assigning a type to the variable 'if_condition_184603' (line 1023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 4), 'if_condition_184603', if_condition_184603)
    # SSA begins for if statement (line 1023)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Assigning a type to the variable 'stypy_return_type' (line 1024)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 8), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 1023)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1026):
    
    # Assigning a Call to a Name (line 1026):
    
    # Call to list(...): (line 1026)
    # Processing the call arguments (line 1026)
    
    # Call to compare(...): (line 1026)
    # Processing the call arguments (line 1026)
    
    # Call to splitlines(...): (line 1026)
    # Processing the call arguments (line 1026)
    int_184612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 59), 'int')
    # Processing the call keyword arguments (line 1026)
    kwargs_184613 = {}
    # Getting the type of 'actual' (line 1026)
    actual_184610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 41), 'actual', False)
    # Obtaining the member 'splitlines' of a type (line 1026)
    splitlines_184611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 41), actual_184610, 'splitlines')
    # Calling splitlines(args, kwargs) (line 1026)
    splitlines_call_result_184614 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 41), splitlines_184611, *[int_184612], **kwargs_184613)
    
    
    # Call to splitlines(...): (line 1026)
    # Processing the call arguments (line 1026)
    int_184617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 82), 'int')
    # Processing the call keyword arguments (line 1026)
    kwargs_184618 = {}
    # Getting the type of 'desired' (line 1026)
    desired_184615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 63), 'desired', False)
    # Obtaining the member 'splitlines' of a type (line 1026)
    splitlines_184616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 63), desired_184615, 'splitlines')
    # Calling splitlines(args, kwargs) (line 1026)
    splitlines_call_result_184619 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 63), splitlines_184616, *[int_184617], **kwargs_184618)
    
    # Processing the call keyword arguments (line 1026)
    kwargs_184620 = {}
    
    # Call to Differ(...): (line 1026)
    # Processing the call keyword arguments (line 1026)
    kwargs_184607 = {}
    # Getting the type of 'difflib' (line 1026)
    difflib_184605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 16), 'difflib', False)
    # Obtaining the member 'Differ' of a type (line 1026)
    Differ_184606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 16), difflib_184605, 'Differ')
    # Calling Differ(args, kwargs) (line 1026)
    Differ_call_result_184608 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 16), Differ_184606, *[], **kwargs_184607)
    
    # Obtaining the member 'compare' of a type (line 1026)
    compare_184609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 16), Differ_call_result_184608, 'compare')
    # Calling compare(args, kwargs) (line 1026)
    compare_call_result_184621 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 16), compare_184609, *[splitlines_call_result_184614, splitlines_call_result_184619], **kwargs_184620)
    
    # Processing the call keyword arguments (line 1026)
    kwargs_184622 = {}
    # Getting the type of 'list' (line 1026)
    list_184604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 11), 'list', False)
    # Calling list(args, kwargs) (line 1026)
    list_call_result_184623 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 11), list_184604, *[compare_call_result_184621], **kwargs_184622)
    
    # Assigning a type to the variable 'diff' (line 1026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 4), 'diff', list_call_result_184623)
    
    # Assigning a List to a Name (line 1027):
    
    # Assigning a List to a Name (line 1027):
    
    # Obtaining an instance of the builtin type 'list' (line 1027)
    list_184624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1027)
    
    # Assigning a type to the variable 'diff_list' (line 1027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1027, 4), 'diff_list', list_184624)
    
    # Getting the type of 'diff' (line 1028)
    diff_184625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 10), 'diff')
    # Testing the type of an if condition (line 1028)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1028, 4), diff_184625)
    # SSA begins for while statement (line 1028)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 1029):
    
    # Assigning a Call to a Name (line 1029):
    
    # Call to pop(...): (line 1029)
    # Processing the call arguments (line 1029)
    int_184628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 22), 'int')
    # Processing the call keyword arguments (line 1029)
    kwargs_184629 = {}
    # Getting the type of 'diff' (line 1029)
    diff_184626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 13), 'diff', False)
    # Obtaining the member 'pop' of a type (line 1029)
    pop_184627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 13), diff_184626, 'pop')
    # Calling pop(args, kwargs) (line 1029)
    pop_call_result_184630 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 13), pop_184627, *[int_184628], **kwargs_184629)
    
    # Assigning a type to the variable 'd1' (line 1029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 8), 'd1', pop_call_result_184630)
    
    
    # Call to startswith(...): (line 1030)
    # Processing the call arguments (line 1030)
    str_184633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 25), 'str', '  ')
    # Processing the call keyword arguments (line 1030)
    kwargs_184634 = {}
    # Getting the type of 'd1' (line 1030)
    d1_184631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 11), 'd1', False)
    # Obtaining the member 'startswith' of a type (line 1030)
    startswith_184632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 11), d1_184631, 'startswith')
    # Calling startswith(args, kwargs) (line 1030)
    startswith_call_result_184635 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 11), startswith_184632, *[str_184633], **kwargs_184634)
    
    # Testing the type of an if condition (line 1030)
    if_condition_184636 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1030, 8), startswith_call_result_184635)
    # Assigning a type to the variable 'if_condition_184636' (line 1030)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 8), 'if_condition_184636', if_condition_184636)
    # SSA begins for if statement (line 1030)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1030)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to startswith(...): (line 1032)
    # Processing the call arguments (line 1032)
    str_184639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 25), 'str', '- ')
    # Processing the call keyword arguments (line 1032)
    kwargs_184640 = {}
    # Getting the type of 'd1' (line 1032)
    d1_184637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 11), 'd1', False)
    # Obtaining the member 'startswith' of a type (line 1032)
    startswith_184638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 11), d1_184637, 'startswith')
    # Calling startswith(args, kwargs) (line 1032)
    startswith_call_result_184641 = invoke(stypy.reporting.localization.Localization(__file__, 1032, 11), startswith_184638, *[str_184639], **kwargs_184640)
    
    # Testing the type of an if condition (line 1032)
    if_condition_184642 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1032, 8), startswith_call_result_184641)
    # Assigning a type to the variable 'if_condition_184642' (line 1032)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 8), 'if_condition_184642', if_condition_184642)
    # SSA begins for if statement (line 1032)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 1033):
    
    # Assigning a List to a Name (line 1033):
    
    # Obtaining an instance of the builtin type 'list' (line 1033)
    list_184643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1033, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1033)
    # Adding element type (line 1033)
    # Getting the type of 'd1' (line 1033)
    d1_184644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 17), 'd1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1033, 16), list_184643, d1_184644)
    
    # Assigning a type to the variable 'l' (line 1033)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1033, 12), 'l', list_184643)
    
    # Assigning a Call to a Name (line 1034):
    
    # Assigning a Call to a Name (line 1034):
    
    # Call to pop(...): (line 1034)
    # Processing the call arguments (line 1034)
    int_184647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, 26), 'int')
    # Processing the call keyword arguments (line 1034)
    kwargs_184648 = {}
    # Getting the type of 'diff' (line 1034)
    diff_184645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 17), 'diff', False)
    # Obtaining the member 'pop' of a type (line 1034)
    pop_184646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 17), diff_184645, 'pop')
    # Calling pop(args, kwargs) (line 1034)
    pop_call_result_184649 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 17), pop_184646, *[int_184647], **kwargs_184648)
    
    # Assigning a type to the variable 'd2' (line 1034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 12), 'd2', pop_call_result_184649)
    
    
    # Call to startswith(...): (line 1035)
    # Processing the call arguments (line 1035)
    str_184652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 29), 'str', '? ')
    # Processing the call keyword arguments (line 1035)
    kwargs_184653 = {}
    # Getting the type of 'd2' (line 1035)
    d2_184650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 15), 'd2', False)
    # Obtaining the member 'startswith' of a type (line 1035)
    startswith_184651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 15), d2_184650, 'startswith')
    # Calling startswith(args, kwargs) (line 1035)
    startswith_call_result_184654 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 15), startswith_184651, *[str_184652], **kwargs_184653)
    
    # Testing the type of an if condition (line 1035)
    if_condition_184655 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1035, 12), startswith_call_result_184654)
    # Assigning a type to the variable 'if_condition_184655' (line 1035)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 12), 'if_condition_184655', if_condition_184655)
    # SSA begins for if statement (line 1035)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1036)
    # Processing the call arguments (line 1036)
    # Getting the type of 'd2' (line 1036)
    d2_184658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 25), 'd2', False)
    # Processing the call keyword arguments (line 1036)
    kwargs_184659 = {}
    # Getting the type of 'l' (line 1036)
    l_184656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 16), 'l', False)
    # Obtaining the member 'append' of a type (line 1036)
    append_184657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 16), l_184656, 'append')
    # Calling append(args, kwargs) (line 1036)
    append_call_result_184660 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 16), append_184657, *[d2_184658], **kwargs_184659)
    
    
    # Assigning a Call to a Name (line 1037):
    
    # Assigning a Call to a Name (line 1037):
    
    # Call to pop(...): (line 1037)
    # Processing the call arguments (line 1037)
    int_184663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 30), 'int')
    # Processing the call keyword arguments (line 1037)
    kwargs_184664 = {}
    # Getting the type of 'diff' (line 1037)
    diff_184661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 21), 'diff', False)
    # Obtaining the member 'pop' of a type (line 1037)
    pop_184662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 21), diff_184661, 'pop')
    # Calling pop(args, kwargs) (line 1037)
    pop_call_result_184665 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 21), pop_184662, *[int_184663], **kwargs_184664)
    
    # Assigning a type to the variable 'd2' (line 1037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 16), 'd2', pop_call_result_184665)
    # SSA join for if statement (line 1035)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to startswith(...): (line 1038)
    # Processing the call arguments (line 1038)
    str_184668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 33), 'str', '+ ')
    # Processing the call keyword arguments (line 1038)
    kwargs_184669 = {}
    # Getting the type of 'd2' (line 1038)
    d2_184666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 19), 'd2', False)
    # Obtaining the member 'startswith' of a type (line 1038)
    startswith_184667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 19), d2_184666, 'startswith')
    # Calling startswith(args, kwargs) (line 1038)
    startswith_call_result_184670 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 19), startswith_184667, *[str_184668], **kwargs_184669)
    
    # Applying the 'not' unary operator (line 1038)
    result_not__184671 = python_operator(stypy.reporting.localization.Localization(__file__, 1038, 15), 'not', startswith_call_result_184670)
    
    # Testing the type of an if condition (line 1038)
    if_condition_184672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1038, 12), result_not__184671)
    # Assigning a type to the variable 'if_condition_184672' (line 1038)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 12), 'if_condition_184672', if_condition_184672)
    # SSA begins for if statement (line 1038)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 1039)
    # Processing the call arguments (line 1039)
    
    # Call to repr(...): (line 1039)
    # Processing the call arguments (line 1039)
    # Getting the type of 'd2' (line 1039)
    d2_184675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 42), 'd2', False)
    # Processing the call keyword arguments (line 1039)
    kwargs_184676 = {}
    # Getting the type of 'repr' (line 1039)
    repr_184674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 37), 'repr', False)
    # Calling repr(args, kwargs) (line 1039)
    repr_call_result_184677 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 37), repr_184674, *[d2_184675], **kwargs_184676)
    
    # Processing the call keyword arguments (line 1039)
    kwargs_184678 = {}
    # Getting the type of 'AssertionError' (line 1039)
    AssertionError_184673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 22), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 1039)
    AssertionError_call_result_184679 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 22), AssertionError_184673, *[repr_call_result_184677], **kwargs_184678)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1039, 16), AssertionError_call_result_184679, 'raise parameter', BaseException)
    # SSA join for if statement (line 1038)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 1040)
    # Processing the call arguments (line 1040)
    # Getting the type of 'd2' (line 1040)
    d2_184682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 21), 'd2', False)
    # Processing the call keyword arguments (line 1040)
    kwargs_184683 = {}
    # Getting the type of 'l' (line 1040)
    l_184680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 12), 'l', False)
    # Obtaining the member 'append' of a type (line 1040)
    append_184681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 12), l_184680, 'append')
    # Calling append(args, kwargs) (line 1040)
    append_call_result_184684 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 12), append_184681, *[d2_184682], **kwargs_184683)
    
    
    # Getting the type of 'diff' (line 1041)
    diff_184685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 15), 'diff')
    # Testing the type of an if condition (line 1041)
    if_condition_184686 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1041, 12), diff_184685)
    # Assigning a type to the variable 'if_condition_184686' (line 1041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 12), 'if_condition_184686', if_condition_184686)
    # SSA begins for if statement (line 1041)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1042):
    
    # Assigning a Call to a Name (line 1042):
    
    # Call to pop(...): (line 1042)
    # Processing the call arguments (line 1042)
    int_184689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 30), 'int')
    # Processing the call keyword arguments (line 1042)
    kwargs_184690 = {}
    # Getting the type of 'diff' (line 1042)
    diff_184687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 21), 'diff', False)
    # Obtaining the member 'pop' of a type (line 1042)
    pop_184688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 21), diff_184687, 'pop')
    # Calling pop(args, kwargs) (line 1042)
    pop_call_result_184691 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 21), pop_184688, *[int_184689], **kwargs_184690)
    
    # Assigning a type to the variable 'd3' (line 1042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 16), 'd3', pop_call_result_184691)
    
    
    # Call to startswith(...): (line 1043)
    # Processing the call arguments (line 1043)
    str_184694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 33), 'str', '? ')
    # Processing the call keyword arguments (line 1043)
    kwargs_184695 = {}
    # Getting the type of 'd3' (line 1043)
    d3_184692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 19), 'd3', False)
    # Obtaining the member 'startswith' of a type (line 1043)
    startswith_184693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 19), d3_184692, 'startswith')
    # Calling startswith(args, kwargs) (line 1043)
    startswith_call_result_184696 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 19), startswith_184693, *[str_184694], **kwargs_184695)
    
    # Testing the type of an if condition (line 1043)
    if_condition_184697 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1043, 16), startswith_call_result_184696)
    # Assigning a type to the variable 'if_condition_184697' (line 1043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 16), 'if_condition_184697', if_condition_184697)
    # SSA begins for if statement (line 1043)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1044)
    # Processing the call arguments (line 1044)
    # Getting the type of 'd3' (line 1044)
    d3_184700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 29), 'd3', False)
    # Processing the call keyword arguments (line 1044)
    kwargs_184701 = {}
    # Getting the type of 'l' (line 1044)
    l_184698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 20), 'l', False)
    # Obtaining the member 'append' of a type (line 1044)
    append_184699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 20), l_184698, 'append')
    # Calling append(args, kwargs) (line 1044)
    append_call_result_184702 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 20), append_184699, *[d3_184700], **kwargs_184701)
    
    # SSA branch for the else part of an if statement (line 1043)
    module_type_store.open_ssa_branch('else')
    
    # Call to insert(...): (line 1046)
    # Processing the call arguments (line 1046)
    int_184705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 32), 'int')
    # Getting the type of 'd3' (line 1046)
    d3_184706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 35), 'd3', False)
    # Processing the call keyword arguments (line 1046)
    kwargs_184707 = {}
    # Getting the type of 'diff' (line 1046)
    diff_184703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 20), 'diff', False)
    # Obtaining the member 'insert' of a type (line 1046)
    insert_184704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 20), diff_184703, 'insert')
    # Calling insert(args, kwargs) (line 1046)
    insert_call_result_184708 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 20), insert_184704, *[int_184705, d3_184706], **kwargs_184707)
    
    # SSA join for if statement (line 1043)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1041)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to match(...): (line 1047)
    # Processing the call arguments (line 1047)
    str_184711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 24), 'str', '\\A')
    
    # Obtaining the type of the subscript
    int_184712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 33), 'int')
    slice_184713 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1047, 30), int_184712, None, None)
    # Getting the type of 'd2' (line 1047)
    d2_184714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 30), 'd2', False)
    # Obtaining the member '__getitem__' of a type (line 1047)
    getitem___184715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 30), d2_184714, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1047)
    subscript_call_result_184716 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 30), getitem___184715, slice_184713)
    
    # Applying the binary operator '+' (line 1047)
    result_add_184717 = python_operator(stypy.reporting.localization.Localization(__file__, 1047, 24), '+', str_184711, subscript_call_result_184716)
    
    str_184718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 37), 'str', '\\Z')
    # Applying the binary operator '+' (line 1047)
    result_add_184719 = python_operator(stypy.reporting.localization.Localization(__file__, 1047, 36), '+', result_add_184717, str_184718)
    
    
    # Obtaining the type of the subscript
    int_184720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 47), 'int')
    slice_184721 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1047, 44), int_184720, None, None)
    # Getting the type of 'd1' (line 1047)
    d1_184722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 44), 'd1', False)
    # Obtaining the member '__getitem__' of a type (line 1047)
    getitem___184723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 44), d1_184722, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1047)
    subscript_call_result_184724 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 44), getitem___184723, slice_184721)
    
    # Processing the call keyword arguments (line 1047)
    kwargs_184725 = {}
    # Getting the type of 're' (line 1047)
    re_184709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 15), 're', False)
    # Obtaining the member 'match' of a type (line 1047)
    match_184710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 15), re_184709, 'match')
    # Calling match(args, kwargs) (line 1047)
    match_call_result_184726 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 15), match_184710, *[result_add_184719, subscript_call_result_184724], **kwargs_184725)
    
    # Testing the type of an if condition (line 1047)
    if_condition_184727 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1047, 12), match_call_result_184726)
    # Assigning a type to the variable 'if_condition_184727' (line 1047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'if_condition_184727', if_condition_184727)
    # SSA begins for if statement (line 1047)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1047)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to extend(...): (line 1049)
    # Processing the call arguments (line 1049)
    # Getting the type of 'l' (line 1049)
    l_184730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 29), 'l', False)
    # Processing the call keyword arguments (line 1049)
    kwargs_184731 = {}
    # Getting the type of 'diff_list' (line 1049)
    diff_list_184728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 12), 'diff_list', False)
    # Obtaining the member 'extend' of a type (line 1049)
    extend_184729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 12), diff_list_184728, 'extend')
    # Calling extend(args, kwargs) (line 1049)
    extend_call_result_184732 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 12), extend_184729, *[l_184730], **kwargs_184731)
    
    # SSA join for if statement (line 1032)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to AssertionError(...): (line 1051)
    # Processing the call arguments (line 1051)
    
    # Call to repr(...): (line 1051)
    # Processing the call arguments (line 1051)
    # Getting the type of 'd1' (line 1051)
    d1_184735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 34), 'd1', False)
    # Processing the call keyword arguments (line 1051)
    kwargs_184736 = {}
    # Getting the type of 'repr' (line 1051)
    repr_184734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 29), 'repr', False)
    # Calling repr(args, kwargs) (line 1051)
    repr_call_result_184737 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 29), repr_184734, *[d1_184735], **kwargs_184736)
    
    # Processing the call keyword arguments (line 1051)
    kwargs_184738 = {}
    # Getting the type of 'AssertionError' (line 1051)
    AssertionError_184733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 14), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 1051)
    AssertionError_call_result_184739 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 14), AssertionError_184733, *[repr_call_result_184737], **kwargs_184738)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1051, 8), AssertionError_call_result_184739, 'raise parameter', BaseException)
    # SSA join for while statement (line 1028)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'diff_list' (line 1052)
    diff_list_184740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 11), 'diff_list')
    # Applying the 'not' unary operator (line 1052)
    result_not__184741 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, 7), 'not', diff_list_184740)
    
    # Testing the type of an if condition (line 1052)
    if_condition_184742 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1052, 4), result_not__184741)
    # Assigning a type to the variable 'if_condition_184742' (line 1052)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 4), 'if_condition_184742', if_condition_184742)
    # SSA begins for if statement (line 1052)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Assigning a type to the variable 'stypy_return_type' (line 1053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 8), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 1052)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1054):
    
    # Assigning a BinOp to a Name (line 1054):
    str_184743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 10), 'str', 'Differences in strings:\n%s')
    
    # Call to rstrip(...): (line 1054)
    # Processing the call keyword arguments (line 1054)
    kwargs_184750 = {}
    
    # Call to join(...): (line 1054)
    # Processing the call arguments (line 1054)
    # Getting the type of 'diff_list' (line 1054)
    diff_list_184746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 51), 'diff_list', False)
    # Processing the call keyword arguments (line 1054)
    kwargs_184747 = {}
    str_184744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 43), 'str', '')
    # Obtaining the member 'join' of a type (line 1054)
    join_184745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 43), str_184744, 'join')
    # Calling join(args, kwargs) (line 1054)
    join_call_result_184748 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 43), join_184745, *[diff_list_184746], **kwargs_184747)
    
    # Obtaining the member 'rstrip' of a type (line 1054)
    rstrip_184749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 43), join_call_result_184748, 'rstrip')
    # Calling rstrip(args, kwargs) (line 1054)
    rstrip_call_result_184751 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 43), rstrip_184749, *[], **kwargs_184750)
    
    # Applying the binary operator '%' (line 1054)
    result_mod_184752 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 10), '%', str_184743, rstrip_call_result_184751)
    
    # Assigning a type to the variable 'msg' (line 1054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 4), 'msg', result_mod_184752)
    
    
    # Getting the type of 'actual' (line 1055)
    actual_184753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 7), 'actual')
    # Getting the type of 'desired' (line 1055)
    desired_184754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 17), 'desired')
    # Applying the binary operator '!=' (line 1055)
    result_ne_184755 = python_operator(stypy.reporting.localization.Localization(__file__, 1055, 7), '!=', actual_184753, desired_184754)
    
    # Testing the type of an if condition (line 1055)
    if_condition_184756 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1055, 4), result_ne_184755)
    # Assigning a type to the variable 'if_condition_184756' (line 1055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 4), 'if_condition_184756', if_condition_184756)
    # SSA begins for if statement (line 1055)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 1056)
    # Processing the call arguments (line 1056)
    # Getting the type of 'msg' (line 1056)
    msg_184758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 29), 'msg', False)
    # Processing the call keyword arguments (line 1056)
    kwargs_184759 = {}
    # Getting the type of 'AssertionError' (line 1056)
    AssertionError_184757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 14), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 1056)
    AssertionError_call_result_184760 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 14), AssertionError_184757, *[msg_184758], **kwargs_184759)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1056, 8), AssertionError_call_result_184760, 'raise parameter', BaseException)
    # SSA join for if statement (line 1055)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'assert_string_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_string_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 989)
    stypy_return_type_184761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184761)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_string_equal'
    return stypy_return_type_184761

# Assigning a type to the variable 'assert_string_equal' (line 989)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 0), 'assert_string_equal', assert_string_equal)

@norecursion
def rundocs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1059)
    None_184762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 21), 'None')
    # Getting the type of 'True' (line 1059)
    True_184763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 42), 'True')
    defaults = [None_184762, True_184763]
    # Create a new context for function 'rundocs'
    module_type_store = module_type_store.open_function_context('rundocs', 1059, 0, False)
    
    # Passed parameters checking function
    rundocs.stypy_localization = localization
    rundocs.stypy_type_of_self = None
    rundocs.stypy_type_store = module_type_store
    rundocs.stypy_function_name = 'rundocs'
    rundocs.stypy_param_names_list = ['filename', 'raise_on_error']
    rundocs.stypy_varargs_param_name = None
    rundocs.stypy_kwargs_param_name = None
    rundocs.stypy_call_defaults = defaults
    rundocs.stypy_call_varargs = varargs
    rundocs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rundocs', ['filename', 'raise_on_error'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rundocs', localization, ['filename', 'raise_on_error'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rundocs(...)' code ##################

    str_184764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, (-1)), 'str', '\n    Run doctests found in the given file.\n\n    By default `rundocs` raises an AssertionError on failure.\n\n    Parameters\n    ----------\n    filename : str\n        The path to the file for which the doctests are run.\n    raise_on_error : bool\n        Whether to raise an AssertionError when a doctest fails. Default is\n        True.\n\n    Notes\n    -----\n    The doctests can be run by the user/developer by adding the ``doctests``\n    argument to the ``test()`` call. For example, to run all tests (including\n    doctests) for `numpy.lib`:\n\n    >>> np.lib.test(doctests=True) #doctest: +SKIP\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1081, 4))
    
    # 'import doctest' statement (line 1081)
    import doctest

    import_module(stypy.reporting.localization.Localization(__file__, 1081, 4), 'doctest', doctest, module_type_store)
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1082, 4))
    
    # 'import imp' statement (line 1082)
    import imp

    import_module(stypy.reporting.localization.Localization(__file__, 1082, 4), 'imp', imp, module_type_store)
    
    
    # Type idiom detected: calculating its left and rigth part (line 1083)
    # Getting the type of 'filename' (line 1083)
    filename_184765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 7), 'filename')
    # Getting the type of 'None' (line 1083)
    None_184766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 19), 'None')
    
    (may_be_184767, more_types_in_union_184768) = may_be_none(filename_184765, None_184766)

    if may_be_184767:

        if more_types_in_union_184768:
            # Runtime conditional SSA (line 1083)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1084):
        
        # Assigning a Call to a Name (line 1084):
        
        # Call to _getframe(...): (line 1084)
        # Processing the call arguments (line 1084)
        int_184771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1084, 26), 'int')
        # Processing the call keyword arguments (line 1084)
        kwargs_184772 = {}
        # Getting the type of 'sys' (line 1084)
        sys_184769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 12), 'sys', False)
        # Obtaining the member '_getframe' of a type (line 1084)
        _getframe_184770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 12), sys_184769, '_getframe')
        # Calling _getframe(args, kwargs) (line 1084)
        _getframe_call_result_184773 = invoke(stypy.reporting.localization.Localization(__file__, 1084, 12), _getframe_184770, *[int_184771], **kwargs_184772)
        
        # Assigning a type to the variable 'f' (line 1084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1084, 8), 'f', _getframe_call_result_184773)
        
        # Assigning a Subscript to a Name (line 1085):
        
        # Assigning a Subscript to a Name (line 1085):
        
        # Obtaining the type of the subscript
        str_184774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1085, 31), 'str', '__file__')
        # Getting the type of 'f' (line 1085)
        f_184775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 19), 'f')
        # Obtaining the member 'f_globals' of a type (line 1085)
        f_globals_184776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 19), f_184775, 'f_globals')
        # Obtaining the member '__getitem__' of a type (line 1085)
        getitem___184777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 19), f_globals_184776, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1085)
        subscript_call_result_184778 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 19), getitem___184777, str_184774)
        
        # Assigning a type to the variable 'filename' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'filename', subscript_call_result_184778)

        if more_types_in_union_184768:
            # SSA join for if statement (line 1083)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 1086):
    
    # Assigning a Subscript to a Name (line 1086):
    
    # Obtaining the type of the subscript
    int_184779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 56), 'int')
    
    # Call to splitext(...): (line 1086)
    # Processing the call arguments (line 1086)
    
    # Call to basename(...): (line 1086)
    # Processing the call arguments (line 1086)
    # Getting the type of 'filename' (line 1086)
    filename_184786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 45), 'filename', False)
    # Processing the call keyword arguments (line 1086)
    kwargs_184787 = {}
    # Getting the type of 'os' (line 1086)
    os_184783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 28), 'os', False)
    # Obtaining the member 'path' of a type (line 1086)
    path_184784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 28), os_184783, 'path')
    # Obtaining the member 'basename' of a type (line 1086)
    basename_184785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 28), path_184784, 'basename')
    # Calling basename(args, kwargs) (line 1086)
    basename_call_result_184788 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 28), basename_184785, *[filename_184786], **kwargs_184787)
    
    # Processing the call keyword arguments (line 1086)
    kwargs_184789 = {}
    # Getting the type of 'os' (line 1086)
    os_184780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 1086)
    path_184781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 11), os_184780, 'path')
    # Obtaining the member 'splitext' of a type (line 1086)
    splitext_184782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 11), path_184781, 'splitext')
    # Calling splitext(args, kwargs) (line 1086)
    splitext_call_result_184790 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 11), splitext_184782, *[basename_call_result_184788], **kwargs_184789)
    
    # Obtaining the member '__getitem__' of a type (line 1086)
    getitem___184791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 11), splitext_call_result_184790, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1086)
    subscript_call_result_184792 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 11), getitem___184791, int_184779)
    
    # Assigning a type to the variable 'name' (line 1086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 4), 'name', subscript_call_result_184792)
    
    # Assigning a List to a Name (line 1087):
    
    # Assigning a List to a Name (line 1087):
    
    # Obtaining an instance of the builtin type 'list' (line 1087)
    list_184793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1087)
    # Adding element type (line 1087)
    
    # Call to dirname(...): (line 1087)
    # Processing the call arguments (line 1087)
    # Getting the type of 'filename' (line 1087)
    filename_184797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 28), 'filename', False)
    # Processing the call keyword arguments (line 1087)
    kwargs_184798 = {}
    # Getting the type of 'os' (line 1087)
    os_184794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 12), 'os', False)
    # Obtaining the member 'path' of a type (line 1087)
    path_184795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 12), os_184794, 'path')
    # Obtaining the member 'dirname' of a type (line 1087)
    dirname_184796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 12), path_184795, 'dirname')
    # Calling dirname(args, kwargs) (line 1087)
    dirname_call_result_184799 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 12), dirname_184796, *[filename_184797], **kwargs_184798)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 11), list_184793, dirname_call_result_184799)
    
    # Assigning a type to the variable 'path' (line 1087)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 4), 'path', list_184793)
    
    # Assigning a Call to a Tuple (line 1088):
    
    # Assigning a Call to a Name:
    
    # Call to find_module(...): (line 1088)
    # Processing the call arguments (line 1088)
    # Getting the type of 'name' (line 1088)
    name_184802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 50), 'name', False)
    # Getting the type of 'path' (line 1088)
    path_184803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 56), 'path', False)
    # Processing the call keyword arguments (line 1088)
    kwargs_184804 = {}
    # Getting the type of 'imp' (line 1088)
    imp_184800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 34), 'imp', False)
    # Obtaining the member 'find_module' of a type (line 1088)
    find_module_184801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 34), imp_184800, 'find_module')
    # Calling find_module(args, kwargs) (line 1088)
    find_module_call_result_184805 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 34), find_module_184801, *[name_184802, path_184803], **kwargs_184804)
    
    # Assigning a type to the variable 'call_assignment_182835' (line 1088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'call_assignment_182835', find_module_call_result_184805)
    
    # Assigning a Call to a Name (line 1088):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_184808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 4), 'int')
    # Processing the call keyword arguments
    kwargs_184809 = {}
    # Getting the type of 'call_assignment_182835' (line 1088)
    call_assignment_182835_184806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'call_assignment_182835', False)
    # Obtaining the member '__getitem__' of a type (line 1088)
    getitem___184807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 4), call_assignment_182835_184806, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_184810 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___184807, *[int_184808], **kwargs_184809)
    
    # Assigning a type to the variable 'call_assignment_182836' (line 1088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'call_assignment_182836', getitem___call_result_184810)
    
    # Assigning a Name to a Name (line 1088):
    # Getting the type of 'call_assignment_182836' (line 1088)
    call_assignment_182836_184811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'call_assignment_182836')
    # Assigning a type to the variable 'file' (line 1088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'file', call_assignment_182836_184811)
    
    # Assigning a Call to a Name (line 1088):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_184814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 4), 'int')
    # Processing the call keyword arguments
    kwargs_184815 = {}
    # Getting the type of 'call_assignment_182835' (line 1088)
    call_assignment_182835_184812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'call_assignment_182835', False)
    # Obtaining the member '__getitem__' of a type (line 1088)
    getitem___184813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 4), call_assignment_182835_184812, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_184816 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___184813, *[int_184814], **kwargs_184815)
    
    # Assigning a type to the variable 'call_assignment_182837' (line 1088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'call_assignment_182837', getitem___call_result_184816)
    
    # Assigning a Name to a Name (line 1088):
    # Getting the type of 'call_assignment_182837' (line 1088)
    call_assignment_182837_184817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'call_assignment_182837')
    # Assigning a type to the variable 'pathname' (line 1088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 10), 'pathname', call_assignment_182837_184817)
    
    # Assigning a Call to a Name (line 1088):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_184820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 4), 'int')
    # Processing the call keyword arguments
    kwargs_184821 = {}
    # Getting the type of 'call_assignment_182835' (line 1088)
    call_assignment_182835_184818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'call_assignment_182835', False)
    # Obtaining the member '__getitem__' of a type (line 1088)
    getitem___184819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 4), call_assignment_182835_184818, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_184822 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___184819, *[int_184820], **kwargs_184821)
    
    # Assigning a type to the variable 'call_assignment_182838' (line 1088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'call_assignment_182838', getitem___call_result_184822)
    
    # Assigning a Name to a Name (line 1088):
    # Getting the type of 'call_assignment_182838' (line 1088)
    call_assignment_182838_184823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'call_assignment_182838')
    # Assigning a type to the variable 'description' (line 1088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 20), 'description', call_assignment_182838_184823)
    
    # Try-finally block (line 1089)
    
    # Assigning a Call to a Name (line 1090):
    
    # Assigning a Call to a Name (line 1090):
    
    # Call to load_module(...): (line 1090)
    # Processing the call arguments (line 1090)
    # Getting the type of 'name' (line 1090)
    name_184826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 28), 'name', False)
    # Getting the type of 'file' (line 1090)
    file_184827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 34), 'file', False)
    # Getting the type of 'pathname' (line 1090)
    pathname_184828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 40), 'pathname', False)
    # Getting the type of 'description' (line 1090)
    description_184829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 50), 'description', False)
    # Processing the call keyword arguments (line 1090)
    kwargs_184830 = {}
    # Getting the type of 'imp' (line 1090)
    imp_184824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 12), 'imp', False)
    # Obtaining the member 'load_module' of a type (line 1090)
    load_module_184825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 12), imp_184824, 'load_module')
    # Calling load_module(args, kwargs) (line 1090)
    load_module_call_result_184831 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 12), load_module_184825, *[name_184826, file_184827, pathname_184828, description_184829], **kwargs_184830)
    
    # Assigning a type to the variable 'm' (line 1090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'm', load_module_call_result_184831)
    
    # finally branch of the try-finally block (line 1089)
    
    # Call to close(...): (line 1092)
    # Processing the call keyword arguments (line 1092)
    kwargs_184834 = {}
    # Getting the type of 'file' (line 1092)
    file_184832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'file', False)
    # Obtaining the member 'close' of a type (line 1092)
    close_184833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 8), file_184832, 'close')
    # Calling close(args, kwargs) (line 1092)
    close_call_result_184835 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 8), close_184833, *[], **kwargs_184834)
    
    
    
    # Assigning a Call to a Name (line 1094):
    
    # Assigning a Call to a Name (line 1094):
    
    # Call to find(...): (line 1094)
    # Processing the call arguments (line 1094)
    # Getting the type of 'm' (line 1094)
    m_184841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 41), 'm', False)
    # Processing the call keyword arguments (line 1094)
    kwargs_184842 = {}
    
    # Call to DocTestFinder(...): (line 1094)
    # Processing the call keyword arguments (line 1094)
    kwargs_184838 = {}
    # Getting the type of 'doctest' (line 1094)
    doctest_184836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 12), 'doctest', False)
    # Obtaining the member 'DocTestFinder' of a type (line 1094)
    DocTestFinder_184837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 12), doctest_184836, 'DocTestFinder')
    # Calling DocTestFinder(args, kwargs) (line 1094)
    DocTestFinder_call_result_184839 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 12), DocTestFinder_184837, *[], **kwargs_184838)
    
    # Obtaining the member 'find' of a type (line 1094)
    find_184840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 12), DocTestFinder_call_result_184839, 'find')
    # Calling find(args, kwargs) (line 1094)
    find_call_result_184843 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 12), find_184840, *[m_184841], **kwargs_184842)
    
    # Assigning a type to the variable 'tests' (line 1094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1094, 4), 'tests', find_call_result_184843)
    
    # Assigning a Call to a Name (line 1095):
    
    # Assigning a Call to a Name (line 1095):
    
    # Call to DocTestRunner(...): (line 1095)
    # Processing the call keyword arguments (line 1095)
    # Getting the type of 'False' (line 1095)
    False_184846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 43), 'False', False)
    keyword_184847 = False_184846
    kwargs_184848 = {'verbose': keyword_184847}
    # Getting the type of 'doctest' (line 1095)
    doctest_184844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 13), 'doctest', False)
    # Obtaining the member 'DocTestRunner' of a type (line 1095)
    DocTestRunner_184845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 13), doctest_184844, 'DocTestRunner')
    # Calling DocTestRunner(args, kwargs) (line 1095)
    DocTestRunner_call_result_184849 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 13), DocTestRunner_184845, *[], **kwargs_184848)
    
    # Assigning a type to the variable 'runner' (line 1095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 4), 'runner', DocTestRunner_call_result_184849)
    
    # Assigning a List to a Name (line 1097):
    
    # Assigning a List to a Name (line 1097):
    
    # Obtaining an instance of the builtin type 'list' (line 1097)
    list_184850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1097)
    
    # Assigning a type to the variable 'msg' (line 1097)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1097, 4), 'msg', list_184850)
    
    # Getting the type of 'raise_on_error' (line 1098)
    raise_on_error_184851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 7), 'raise_on_error')
    # Testing the type of an if condition (line 1098)
    if_condition_184852 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1098, 4), raise_on_error_184851)
    # Assigning a type to the variable 'if_condition_184852' (line 1098)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 4), 'if_condition_184852', if_condition_184852)
    # SSA begins for if statement (line 1098)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Lambda to a Name (line 1099):
    
    # Assigning a Lambda to a Name (line 1099):

    @norecursion
    def _stypy_temp_lambda_48(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_48'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_48', 1099, 14, True)
        # Passed parameters checking function
        _stypy_temp_lambda_48.stypy_localization = localization
        _stypy_temp_lambda_48.stypy_type_of_self = None
        _stypy_temp_lambda_48.stypy_type_store = module_type_store
        _stypy_temp_lambda_48.stypy_function_name = '_stypy_temp_lambda_48'
        _stypy_temp_lambda_48.stypy_param_names_list = ['s']
        _stypy_temp_lambda_48.stypy_varargs_param_name = None
        _stypy_temp_lambda_48.stypy_kwargs_param_name = None
        _stypy_temp_lambda_48.stypy_call_defaults = defaults
        _stypy_temp_lambda_48.stypy_call_varargs = varargs
        _stypy_temp_lambda_48.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_48', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_48', ['s'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to append(...): (line 1099)
        # Processing the call arguments (line 1099)
        # Getting the type of 's' (line 1099)
        s_184855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 35), 's', False)
        # Processing the call keyword arguments (line 1099)
        kwargs_184856 = {}
        # Getting the type of 'msg' (line 1099)
        msg_184853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 24), 'msg', False)
        # Obtaining the member 'append' of a type (line 1099)
        append_184854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 24), msg_184853, 'append')
        # Calling append(args, kwargs) (line 1099)
        append_call_result_184857 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 24), append_184854, *[s_184855], **kwargs_184856)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 14), 'stypy_return_type', append_call_result_184857)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_48' in the type store
        # Getting the type of 'stypy_return_type' (line 1099)
        stypy_return_type_184858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 14), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_184858)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_48'
        return stypy_return_type_184858

    # Assigning a type to the variable '_stypy_temp_lambda_48' (line 1099)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 14), '_stypy_temp_lambda_48', _stypy_temp_lambda_48)
    # Getting the type of '_stypy_temp_lambda_48' (line 1099)
    _stypy_temp_lambda_48_184859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 14), '_stypy_temp_lambda_48')
    # Assigning a type to the variable 'out' (line 1099)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 8), 'out', _stypy_temp_lambda_48_184859)
    # SSA branch for the else part of an if statement (line 1098)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1101):
    
    # Assigning a Name to a Name (line 1101):
    # Getting the type of 'None' (line 1101)
    None_184860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 14), 'None')
    # Assigning a type to the variable 'out' (line 1101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 8), 'out', None_184860)
    # SSA join for if statement (line 1098)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'tests' (line 1103)
    tests_184861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 16), 'tests')
    # Testing the type of a for loop iterable (line 1103)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1103, 4), tests_184861)
    # Getting the type of the for loop variable (line 1103)
    for_loop_var_184862 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1103, 4), tests_184861)
    # Assigning a type to the variable 'test' (line 1103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 4), 'test', for_loop_var_184862)
    # SSA begins for a for statement (line 1103)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to run(...): (line 1104)
    # Processing the call arguments (line 1104)
    # Getting the type of 'test' (line 1104)
    test_184865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 19), 'test', False)
    # Processing the call keyword arguments (line 1104)
    # Getting the type of 'out' (line 1104)
    out_184866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 29), 'out', False)
    keyword_184867 = out_184866
    kwargs_184868 = {'out': keyword_184867}
    # Getting the type of 'runner' (line 1104)
    runner_184863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 8), 'runner', False)
    # Obtaining the member 'run' of a type (line 1104)
    run_184864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 8), runner_184863, 'run')
    # Calling run(args, kwargs) (line 1104)
    run_call_result_184869 = invoke(stypy.reporting.localization.Localization(__file__, 1104, 8), run_184864, *[test_184865], **kwargs_184868)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'runner' (line 1106)
    runner_184870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 7), 'runner')
    # Obtaining the member 'failures' of a type (line 1106)
    failures_184871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 7), runner_184870, 'failures')
    int_184872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, 25), 'int')
    # Applying the binary operator '>' (line 1106)
    result_gt_184873 = python_operator(stypy.reporting.localization.Localization(__file__, 1106, 7), '>', failures_184871, int_184872)
    
    # Getting the type of 'raise_on_error' (line 1106)
    raise_on_error_184874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 31), 'raise_on_error')
    # Applying the binary operator 'and' (line 1106)
    result_and_keyword_184875 = python_operator(stypy.reporting.localization.Localization(__file__, 1106, 7), 'and', result_gt_184873, raise_on_error_184874)
    
    # Testing the type of an if condition (line 1106)
    if_condition_184876 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1106, 4), result_and_keyword_184875)
    # Assigning a type to the variable 'if_condition_184876' (line 1106)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 4), 'if_condition_184876', if_condition_184876)
    # SSA begins for if statement (line 1106)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 1107)
    # Processing the call arguments (line 1107)
    str_184878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 29), 'str', 'Some doctests failed:\n%s')
    
    # Call to join(...): (line 1107)
    # Processing the call arguments (line 1107)
    # Getting the type of 'msg' (line 1107)
    msg_184881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 69), 'msg', False)
    # Processing the call keyword arguments (line 1107)
    kwargs_184882 = {}
    str_184879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 59), 'str', '\n')
    # Obtaining the member 'join' of a type (line 1107)
    join_184880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 59), str_184879, 'join')
    # Calling join(args, kwargs) (line 1107)
    join_call_result_184883 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 59), join_184880, *[msg_184881], **kwargs_184882)
    
    # Applying the binary operator '%' (line 1107)
    result_mod_184884 = python_operator(stypy.reporting.localization.Localization(__file__, 1107, 29), '%', str_184878, join_call_result_184883)
    
    # Processing the call keyword arguments (line 1107)
    kwargs_184885 = {}
    # Getting the type of 'AssertionError' (line 1107)
    AssertionError_184877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 14), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 1107)
    AssertionError_call_result_184886 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 14), AssertionError_184877, *[result_mod_184884], **kwargs_184885)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1107, 8), AssertionError_call_result_184886, 'raise parameter', BaseException)
    # SSA join for if statement (line 1106)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'rundocs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rundocs' in the type store
    # Getting the type of 'stypy_return_type' (line 1059)
    stypy_return_type_184887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184887)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rundocs'
    return stypy_return_type_184887

# Assigning a type to the variable 'rundocs' (line 1059)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 0), 'rundocs', rundocs)

@norecursion
def raises(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'raises'
    module_type_store = module_type_store.open_function_context('raises', 1110, 0, False)
    
    # Passed parameters checking function
    raises.stypy_localization = localization
    raises.stypy_type_of_self = None
    raises.stypy_type_store = module_type_store
    raises.stypy_function_name = 'raises'
    raises.stypy_param_names_list = []
    raises.stypy_varargs_param_name = 'args'
    raises.stypy_kwargs_param_name = 'kwargs'
    raises.stypy_call_defaults = defaults
    raises.stypy_call_varargs = varargs
    raises.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'raises', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'raises', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'raises(...)' code ##################

    
    # Assigning a Call to a Name (line 1111):
    
    # Assigning a Call to a Name (line 1111):
    
    # Call to import_nose(...): (line 1111)
    # Processing the call keyword arguments (line 1111)
    kwargs_184889 = {}
    # Getting the type of 'import_nose' (line 1111)
    import_nose_184888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 11), 'import_nose', False)
    # Calling import_nose(args, kwargs) (line 1111)
    import_nose_call_result_184890 = invoke(stypy.reporting.localization.Localization(__file__, 1111, 11), import_nose_184888, *[], **kwargs_184889)
    
    # Assigning a type to the variable 'nose' (line 1111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 4), 'nose', import_nose_call_result_184890)
    
    # Call to raises(...): (line 1112)
    # Getting the type of 'args' (line 1112)
    args_184894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 30), 'args', False)
    # Processing the call keyword arguments (line 1112)
    # Getting the type of 'kwargs' (line 1112)
    kwargs_184895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 37), 'kwargs', False)
    kwargs_184896 = {'kwargs_184895': kwargs_184895}
    # Getting the type of 'nose' (line 1112)
    nose_184891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 11), 'nose', False)
    # Obtaining the member 'tools' of a type (line 1112)
    tools_184892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 11), nose_184891, 'tools')
    # Obtaining the member 'raises' of a type (line 1112)
    raises_184893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 11), tools_184892, 'raises')
    # Calling raises(args, kwargs) (line 1112)
    raises_call_result_184897 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 11), raises_184893, *[args_184894], **kwargs_184896)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 4), 'stypy_return_type', raises_call_result_184897)
    
    # ################# End of 'raises(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'raises' in the type store
    # Getting the type of 'stypy_return_type' (line 1110)
    stypy_return_type_184898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184898)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'raises'
    return stypy_return_type_184898

# Assigning a type to the variable 'raises' (line 1110)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 0), 'raises', raises)

@norecursion
def assert_raises(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'assert_raises'
    module_type_store = module_type_store.open_function_context('assert_raises', 1115, 0, False)
    
    # Passed parameters checking function
    assert_raises.stypy_localization = localization
    assert_raises.stypy_type_of_self = None
    assert_raises.stypy_type_store = module_type_store
    assert_raises.stypy_function_name = 'assert_raises'
    assert_raises.stypy_param_names_list = []
    assert_raises.stypy_varargs_param_name = 'args'
    assert_raises.stypy_kwargs_param_name = 'kwargs'
    assert_raises.stypy_call_defaults = defaults
    assert_raises.stypy_call_varargs = varargs
    assert_raises.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_raises', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_raises', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_raises(...)' code ##################

    str_184899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, (-1)), 'str', '\n    assert_raises(exception_class, callable, *args, **kwargs)\n\n    Fail unless an exception of class exception_class is thrown\n    by callable when invoked with arguments args and keyword\n    arguments kwargs. If a different type of exception is\n    thrown, it will not be caught, and the test case will be\n    deemed to have suffered an error, exactly as for an\n    unexpected exception.\n\n    Alternatively, `assert_raises` can be used as a context manager:\n\n    >>> from numpy.testing import assert_raises\n    >>> with assert_raises(ZeroDivisionError):\n    ...   1 / 0\n\n    is equivalent to\n\n    >>> def div(x, y):\n    ...    return x / y\n    >>> assert_raises(ZeroDivisionError, div, 1, 0)\n\n    ')
    
    # Assigning a Name to a Name (line 1139):
    
    # Assigning a Name to a Name (line 1139):
    # Getting the type of 'True' (line 1139)
    True_184900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 1139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 4), '__tracebackhide__', True_184900)
    
    # Assigning a Call to a Name (line 1140):
    
    # Assigning a Call to a Name (line 1140):
    
    # Call to import_nose(...): (line 1140)
    # Processing the call keyword arguments (line 1140)
    kwargs_184902 = {}
    # Getting the type of 'import_nose' (line 1140)
    import_nose_184901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 11), 'import_nose', False)
    # Calling import_nose(args, kwargs) (line 1140)
    import_nose_call_result_184903 = invoke(stypy.reporting.localization.Localization(__file__, 1140, 11), import_nose_184901, *[], **kwargs_184902)
    
    # Assigning a type to the variable 'nose' (line 1140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 4), 'nose', import_nose_call_result_184903)
    
    # Call to assert_raises(...): (line 1141)
    # Getting the type of 'args' (line 1141)
    args_184907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 37), 'args', False)
    # Processing the call keyword arguments (line 1141)
    # Getting the type of 'kwargs' (line 1141)
    kwargs_184908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 44), 'kwargs', False)
    kwargs_184909 = {'kwargs_184908': kwargs_184908}
    # Getting the type of 'nose' (line 1141)
    nose_184904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 11), 'nose', False)
    # Obtaining the member 'tools' of a type (line 1141)
    tools_184905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 11), nose_184904, 'tools')
    # Obtaining the member 'assert_raises' of a type (line 1141)
    assert_raises_184906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 11), tools_184905, 'assert_raises')
    # Calling assert_raises(args, kwargs) (line 1141)
    assert_raises_call_result_184910 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 11), assert_raises_184906, *[args_184907], **kwargs_184909)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'stypy_return_type', assert_raises_call_result_184910)
    
    # ################# End of 'assert_raises(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_raises' in the type store
    # Getting the type of 'stypy_return_type' (line 1115)
    stypy_return_type_184911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184911)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_raises'
    return stypy_return_type_184911

# Assigning a type to the variable 'assert_raises' (line 1115)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 0), 'assert_raises', assert_raises)

# Assigning a Name to a Name (line 1144):

# Assigning a Name to a Name (line 1144):
# Getting the type of 'None' (line 1144)
None_184912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 27), 'None')
# Assigning a type to the variable 'assert_raises_regex_impl' (line 1144)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 0), 'assert_raises_regex_impl', None_184912)

@norecursion
def assert_raises_regex(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1148)
    None_184913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 37), 'None')
    defaults = [None_184913]
    # Create a new context for function 'assert_raises_regex'
    module_type_store = module_type_store.open_function_context('assert_raises_regex', 1147, 0, False)
    
    # Passed parameters checking function
    assert_raises_regex.stypy_localization = localization
    assert_raises_regex.stypy_type_of_self = None
    assert_raises_regex.stypy_type_store = module_type_store
    assert_raises_regex.stypy_function_name = 'assert_raises_regex'
    assert_raises_regex.stypy_param_names_list = ['exception_class', 'expected_regexp', 'callable_obj']
    assert_raises_regex.stypy_varargs_param_name = 'args'
    assert_raises_regex.stypy_kwargs_param_name = 'kwargs'
    assert_raises_regex.stypy_call_defaults = defaults
    assert_raises_regex.stypy_call_varargs = varargs
    assert_raises_regex.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_raises_regex', ['exception_class', 'expected_regexp', 'callable_obj'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_raises_regex', localization, ['exception_class', 'expected_regexp', 'callable_obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_raises_regex(...)' code ##################

    str_184914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1157, (-1)), 'str', '\n    Fail unless an exception of class exception_class and with message that\n    matches expected_regexp is thrown by callable when invoked with arguments\n    args and keyword arguments kwargs.\n\n    Name of this function adheres to Python 3.2+ reference, but should work in\n    all versions down to 2.6.\n\n    ')
    
    # Assigning a Name to a Name (line 1158):
    
    # Assigning a Name to a Name (line 1158):
    # Getting the type of 'True' (line 1158)
    True_184915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 1158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 4), '__tracebackhide__', True_184915)
    
    # Assigning a Call to a Name (line 1159):
    
    # Assigning a Call to a Name (line 1159):
    
    # Call to import_nose(...): (line 1159)
    # Processing the call keyword arguments (line 1159)
    kwargs_184917 = {}
    # Getting the type of 'import_nose' (line 1159)
    import_nose_184916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 11), 'import_nose', False)
    # Calling import_nose(args, kwargs) (line 1159)
    import_nose_call_result_184918 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 11), import_nose_184916, *[], **kwargs_184917)
    
    # Assigning a type to the variable 'nose' (line 1159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 4), 'nose', import_nose_call_result_184918)
    # Marking variables as global (line 1161)
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 1161, 4), 'assert_raises_regex_impl')
    
    # Type idiom detected: calculating its left and rigth part (line 1162)
    # Getting the type of 'assert_raises_regex_impl' (line 1162)
    assert_raises_regex_impl_184919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 7), 'assert_raises_regex_impl')
    # Getting the type of 'None' (line 1162)
    None_184920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 35), 'None')
    
    (may_be_184921, more_types_in_union_184922) = may_be_none(assert_raises_regex_impl_184919, None_184920)

    if may_be_184921:

        if more_types_in_union_184922:
            # Runtime conditional SSA (line 1162)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # SSA begins for try-except statement (line 1163)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Attribute to a Name (line 1165):
        
        # Assigning a Attribute to a Name (line 1165):
        # Getting the type of 'nose' (line 1165)
        nose_184923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 39), 'nose')
        # Obtaining the member 'tools' of a type (line 1165)
        tools_184924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 39), nose_184923, 'tools')
        # Obtaining the member 'assert_raises_regex' of a type (line 1165)
        assert_raises_regex_184925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 39), tools_184924, 'assert_raises_regex')
        # Assigning a type to the variable 'assert_raises_regex_impl' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'assert_raises_regex_impl', assert_raises_regex_184925)
        # SSA branch for the except part of a try statement (line 1163)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1163)
        module_type_store.open_ssa_branch('except')
        
        
        # SSA begins for try-except statement (line 1167)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Attribute to a Name (line 1169):
        
        # Assigning a Attribute to a Name (line 1169):
        # Getting the type of 'nose' (line 1169)
        nose_184926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 43), 'nose')
        # Obtaining the member 'tools' of a type (line 1169)
        tools_184927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 43), nose_184926, 'tools')
        # Obtaining the member 'assert_raises_regexp' of a type (line 1169)
        assert_raises_regexp_184928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 43), tools_184927, 'assert_raises_regexp')
        # Assigning a type to the variable 'assert_raises_regex_impl' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 16), 'assert_raises_regex_impl', assert_raises_regexp_184928)
        # SSA branch for the except part of a try statement (line 1167)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1167)
        module_type_store.open_ssa_branch('except')
        # Declaration of the '_AssertRaisesContext' class

        class _AssertRaisesContext(object, ):
            str_184929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 20), 'str', 'A context manager used to implement TestCase.assertRaises* methods.')

            @norecursion
            def __init__(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                # Getting the type of 'None' (line 1177)
                None_184930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 65), 'None')
                defaults = [None_184930]
                # Create a new context for function '__init__'
                module_type_store = module_type_store.open_function_context('__init__', 1177, 20, False)
                # Assigning a type to the variable 'self' (line 1178)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1178, 20), 'self', type_of_self)
                
                # Passed parameters checking function
                arguments = process_argument_values(localization, type_of_self, module_type_store, '_AssertRaisesContext.__init__', ['expected', 'expected_regexp'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return

                # Initialize method data
                init_call_information(module_type_store, '__init__', localization, ['expected', 'expected_regexp'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of '__init__(...)' code ##################

                
                # Assigning a Name to a Attribute (line 1178):
                
                # Assigning a Name to a Attribute (line 1178):
                # Getting the type of 'expected' (line 1178)
                expected_184931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 40), 'expected')
                # Getting the type of 'self' (line 1178)
                self_184932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 24), 'self')
                # Setting the type of the member 'expected' of a type (line 1178)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 24), self_184932, 'expected', expected_184931)
                
                # Assigning a Name to a Attribute (line 1179):
                
                # Assigning a Name to a Attribute (line 1179):
                # Getting the type of 'expected_regexp' (line 1179)
                expected_regexp_184933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 47), 'expected_regexp')
                # Getting the type of 'self' (line 1179)
                self_184934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 24), 'self')
                # Setting the type of the member 'expected_regexp' of a type (line 1179)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 24), self_184934, 'expected_regexp', expected_regexp_184933)
                
                # ################# End of '__init__(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()


            @norecursion
            def failureException(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'failureException'
                module_type_store = module_type_store.open_function_context('failureException', 1181, 20, False)
                # Assigning a type to the variable 'self' (line 1182)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 20), 'self', type_of_self)
                
                # Passed parameters checking function
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_localization', localization)
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_type_store', module_type_store)
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_function_name', '_AssertRaisesContext.failureException')
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_param_names_list', ['msg'])
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_varargs_param_name', None)
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_kwargs_param_name', None)
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_call_defaults', defaults)
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_call_varargs', varargs)
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                _AssertRaisesContext.failureException.__dict__.__setitem__('stypy_declared_arg_number', 2)
                arguments = process_argument_values(localization, type_of_self, module_type_store, '_AssertRaisesContext.failureException', ['msg'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'failureException', localization, ['msg'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'failureException(...)' code ##################

                
                # Call to AssertionError(...): (line 1182)
                # Processing the call arguments (line 1182)
                # Getting the type of 'msg' (line 1182)
                msg_184936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 46), 'msg', False)
                # Processing the call keyword arguments (line 1182)
                kwargs_184937 = {}
                # Getting the type of 'AssertionError' (line 1182)
                AssertionError_184935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 31), 'AssertionError', False)
                # Calling AssertionError(args, kwargs) (line 1182)
                AssertionError_call_result_184938 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 31), AssertionError_184935, *[msg_184936], **kwargs_184937)
                
                # Assigning a type to the variable 'stypy_return_type' (line 1182)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 24), 'stypy_return_type', AssertionError_call_result_184938)
                
                # ################# End of 'failureException(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'failureException' in the type store
                # Getting the type of 'stypy_return_type' (line 1181)
                stypy_return_type_184939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 20), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_184939)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'failureException'
                return stypy_return_type_184939


            @norecursion
            def __enter__(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '__enter__'
                module_type_store = module_type_store.open_function_context('__enter__', 1184, 20, False)
                # Assigning a type to the variable 'self' (line 1185)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 20), 'self', type_of_self)
                
                # Passed parameters checking function
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_localization', localization)
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_type_store', module_type_store)
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_function_name', '_AssertRaisesContext.__enter__')
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_param_names_list', [])
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_varargs_param_name', None)
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_call_defaults', defaults)
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_call_varargs', varargs)
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                _AssertRaisesContext.__enter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, '_AssertRaisesContext.__enter__', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, '__enter__', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of '__enter__(...)' code ##################

                # Getting the type of 'self' (line 1185)
                self_184940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 31), 'self')
                # Assigning a type to the variable 'stypy_return_type' (line 1185)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 24), 'stypy_return_type', self_184940)
                
                # ################# End of '__enter__(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function '__enter__' in the type store
                # Getting the type of 'stypy_return_type' (line 1184)
                stypy_return_type_184941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 20), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_184941)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '__enter__'
                return stypy_return_type_184941


            @norecursion
            def __exit__(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '__exit__'
                module_type_store = module_type_store.open_function_context('__exit__', 1187, 20, False)
                # Assigning a type to the variable 'self' (line 1188)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 20), 'self', type_of_self)
                
                # Passed parameters checking function
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_localization', localization)
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_type_store', module_type_store)
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_function_name', '_AssertRaisesContext.__exit__')
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_param_names_list', ['exc_type', 'exc_value', 'tb'])
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_varargs_param_name', None)
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_kwargs_param_name', None)
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_call_defaults', defaults)
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_call_varargs', varargs)
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                _AssertRaisesContext.__exit__.__dict__.__setitem__('stypy_declared_arg_number', 4)
                arguments = process_argument_values(localization, type_of_self, module_type_store, '_AssertRaisesContext.__exit__', ['exc_type', 'exc_value', 'tb'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, '__exit__', localization, ['exc_type', 'exc_value', 'tb'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of '__exit__(...)' code ##################

                
                # Type idiom detected: calculating its left and rigth part (line 1188)
                # Getting the type of 'exc_type' (line 1188)
                exc_type_184942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 27), 'exc_type')
                # Getting the type of 'None' (line 1188)
                None_184943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 39), 'None')
                
                (may_be_184944, more_types_in_union_184945) = may_be_none(exc_type_184942, None_184943)

                if may_be_184944:

                    if more_types_in_union_184945:
                        # Runtime conditional SSA (line 1188)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    
                    
                    # SSA begins for try-except statement (line 1189)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
                    
                    # Assigning a Attribute to a Name (line 1190):
                    
                    # Assigning a Attribute to a Name (line 1190):
                    # Getting the type of 'self' (line 1190)
                    self_184946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 43), 'self')
                    # Obtaining the member 'expected' of a type (line 1190)
                    expected_184947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 43), self_184946, 'expected')
                    # Obtaining the member '__name__' of a type (line 1190)
                    name___184948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 43), expected_184947, '__name__')
                    # Assigning a type to the variable 'exc_name' (line 1190)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 32), 'exc_name', name___184948)
                    # SSA branch for the except part of a try statement (line 1189)
                    # SSA branch for the except 'AttributeError' branch of a try statement (line 1189)
                    module_type_store.open_ssa_branch('except')
                    
                    # Assigning a Call to a Name (line 1192):
                    
                    # Assigning a Call to a Name (line 1192):
                    
                    # Call to str(...): (line 1192)
                    # Processing the call arguments (line 1192)
                    # Getting the type of 'self' (line 1192)
                    self_184950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 47), 'self', False)
                    # Obtaining the member 'expected' of a type (line 1192)
                    expected_184951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 47), self_184950, 'expected')
                    # Processing the call keyword arguments (line 1192)
                    kwargs_184952 = {}
                    # Getting the type of 'str' (line 1192)
                    str_184949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 43), 'str', False)
                    # Calling str(args, kwargs) (line 1192)
                    str_call_result_184953 = invoke(stypy.reporting.localization.Localization(__file__, 1192, 43), str_184949, *[expected_184951], **kwargs_184952)
                    
                    # Assigning a type to the variable 'exc_name' (line 1192)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1192, 32), 'exc_name', str_call_result_184953)
                    # SSA join for try-except statement (line 1189)
                    module_type_store = module_type_store.join_ssa_context()
                    
                    
                    # Call to failureException(...): (line 1193)
                    # Processing the call arguments (line 1193)
                    
                    # Call to format(...): (line 1194)
                    # Processing the call arguments (line 1194)
                    # Getting the type of 'exc_name' (line 1194)
                    exc_name_184958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 56), 'exc_name', False)
                    # Processing the call keyword arguments (line 1194)
                    kwargs_184959 = {}
                    str_184956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 32), 'str', '{0} not raised')
                    # Obtaining the member 'format' of a type (line 1194)
                    format_184957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 32), str_184956, 'format')
                    # Calling format(args, kwargs) (line 1194)
                    format_call_result_184960 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 32), format_184957, *[exc_name_184958], **kwargs_184959)
                    
                    # Processing the call keyword arguments (line 1193)
                    kwargs_184961 = {}
                    # Getting the type of 'self' (line 1193)
                    self_184954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 34), 'self', False)
                    # Obtaining the member 'failureException' of a type (line 1193)
                    failureException_184955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 34), self_184954, 'failureException')
                    # Calling failureException(args, kwargs) (line 1193)
                    failureException_call_result_184962 = invoke(stypy.reporting.localization.Localization(__file__, 1193, 34), failureException_184955, *[format_call_result_184960], **kwargs_184961)
                    
                    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1193, 28), failureException_call_result_184962, 'raise parameter', BaseException)

                    if more_types_in_union_184945:
                        # SSA join for if statement (line 1188)
                        module_type_store = module_type_store.join_ssa_context()


                
                
                
                
                # Call to issubclass(...): (line 1195)
                # Processing the call arguments (line 1195)
                # Getting the type of 'exc_type' (line 1195)
                exc_type_184964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 42), 'exc_type', False)
                # Getting the type of 'self' (line 1195)
                self_184965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 52), 'self', False)
                # Obtaining the member 'expected' of a type (line 1195)
                expected_184966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 52), self_184965, 'expected')
                # Processing the call keyword arguments (line 1195)
                kwargs_184967 = {}
                # Getting the type of 'issubclass' (line 1195)
                issubclass_184963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 31), 'issubclass', False)
                # Calling issubclass(args, kwargs) (line 1195)
                issubclass_call_result_184968 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 31), issubclass_184963, *[exc_type_184964, expected_184966], **kwargs_184967)
                
                # Applying the 'not' unary operator (line 1195)
                result_not__184969 = python_operator(stypy.reporting.localization.Localization(__file__, 1195, 27), 'not', issubclass_call_result_184968)
                
                # Testing the type of an if condition (line 1195)
                if_condition_184970 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1195, 24), result_not__184969)
                # Assigning a type to the variable 'if_condition_184970' (line 1195)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 24), 'if_condition_184970', if_condition_184970)
                # SSA begins for if statement (line 1195)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                # Getting the type of 'False' (line 1197)
                False_184971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 35), 'False')
                # Assigning a type to the variable 'stypy_return_type' (line 1197)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 28), 'stypy_return_type', False_184971)
                # SSA join for if statement (line 1195)
                module_type_store = module_type_store.join_ssa_context()
                
                
                # Assigning a Name to a Attribute (line 1198):
                
                # Assigning a Name to a Attribute (line 1198):
                # Getting the type of 'exc_value' (line 1198)
                exc_value_184972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 41), 'exc_value')
                # Getting the type of 'self' (line 1198)
                self_184973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 24), 'self')
                # Setting the type of the member 'exception' of a type (line 1198)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 24), self_184973, 'exception', exc_value_184972)
                
                # Type idiom detected: calculating its left and rigth part (line 1199)
                # Getting the type of 'self' (line 1199)
                self_184974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 27), 'self')
                # Obtaining the member 'expected_regexp' of a type (line 1199)
                expected_regexp_184975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 27), self_184974, 'expected_regexp')
                # Getting the type of 'None' (line 1199)
                None_184976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 51), 'None')
                
                (may_be_184977, more_types_in_union_184978) = may_be_none(expected_regexp_184975, None_184976)

                if may_be_184977:

                    if more_types_in_union_184978:
                        # Runtime conditional SSA (line 1199)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    # Getting the type of 'True' (line 1200)
                    True_184979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 35), 'True')
                    # Assigning a type to the variable 'stypy_return_type' (line 1200)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 28), 'stypy_return_type', True_184979)

                    if more_types_in_union_184978:
                        # SSA join for if statement (line 1199)
                        module_type_store = module_type_store.join_ssa_context()


                
                
                # Assigning a Attribute to a Name (line 1202):
                
                # Assigning a Attribute to a Name (line 1202):
                # Getting the type of 'self' (line 1202)
                self_184980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 42), 'self')
                # Obtaining the member 'expected_regexp' of a type (line 1202)
                expected_regexp_184981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 42), self_184980, 'expected_regexp')
                # Assigning a type to the variable 'expected_regexp' (line 1202)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 24), 'expected_regexp', expected_regexp_184981)
                
                # Type idiom detected: calculating its left and rigth part (line 1203)
                # Getting the type of 'basestring' (line 1203)
                basestring_184982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 55), 'basestring')
                # Getting the type of 'expected_regexp' (line 1203)
                expected_regexp_184983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 38), 'expected_regexp')
                
                (may_be_184984, more_types_in_union_184985) = may_be_subtype(basestring_184982, expected_regexp_184983)

                if may_be_184984:

                    if more_types_in_union_184985:
                        # Runtime conditional SSA (line 1203)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    # Assigning a type to the variable 'expected_regexp' (line 1203)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 24), 'expected_regexp', remove_not_subtype_from_union(expected_regexp_184983, basestring))
                    
                    # Assigning a Call to a Name (line 1204):
                    
                    # Assigning a Call to a Name (line 1204):
                    
                    # Call to compile(...): (line 1204)
                    # Processing the call arguments (line 1204)
                    # Getting the type of 'expected_regexp' (line 1204)
                    expected_regexp_184988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 57), 'expected_regexp', False)
                    # Processing the call keyword arguments (line 1204)
                    kwargs_184989 = {}
                    # Getting the type of 're' (line 1204)
                    re_184986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 46), 're', False)
                    # Obtaining the member 'compile' of a type (line 1204)
                    compile_184987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 46), re_184986, 'compile')
                    # Calling compile(args, kwargs) (line 1204)
                    compile_call_result_184990 = invoke(stypy.reporting.localization.Localization(__file__, 1204, 46), compile_184987, *[expected_regexp_184988], **kwargs_184989)
                    
                    # Assigning a type to the variable 'expected_regexp' (line 1204)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 28), 'expected_regexp', compile_call_result_184990)

                    if more_types_in_union_184985:
                        # SSA join for if statement (line 1203)
                        module_type_store = module_type_store.join_ssa_context()


                
                
                
                
                # Call to search(...): (line 1205)
                # Processing the call arguments (line 1205)
                
                # Call to str(...): (line 1205)
                # Processing the call arguments (line 1205)
                # Getting the type of 'exc_value' (line 1205)
                exc_value_184994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 58), 'exc_value', False)
                # Processing the call keyword arguments (line 1205)
                kwargs_184995 = {}
                # Getting the type of 'str' (line 1205)
                str_184993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 54), 'str', False)
                # Calling str(args, kwargs) (line 1205)
                str_call_result_184996 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 54), str_184993, *[exc_value_184994], **kwargs_184995)
                
                # Processing the call keyword arguments (line 1205)
                kwargs_184997 = {}
                # Getting the type of 'expected_regexp' (line 1205)
                expected_regexp_184991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 31), 'expected_regexp', False)
                # Obtaining the member 'search' of a type (line 1205)
                search_184992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 31), expected_regexp_184991, 'search')
                # Calling search(args, kwargs) (line 1205)
                search_call_result_184998 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 31), search_184992, *[str_call_result_184996], **kwargs_184997)
                
                # Applying the 'not' unary operator (line 1205)
                result_not__184999 = python_operator(stypy.reporting.localization.Localization(__file__, 1205, 27), 'not', search_call_result_184998)
                
                # Testing the type of an if condition (line 1205)
                if_condition_185000 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1205, 24), result_not__184999)
                # Assigning a type to the variable 'if_condition_185000' (line 1205)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 24), 'if_condition_185000', if_condition_185000)
                # SSA begins for if statement (line 1205)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Call to failureException(...): (line 1206)
                # Processing the call arguments (line 1206)
                str_185003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1207, 32), 'str', '"%s" does not match "%s"')
                
                # Obtaining an instance of the builtin type 'tuple' (line 1208)
                tuple_185004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1208, 33), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 1208)
                # Adding element type (line 1208)
                # Getting the type of 'expected_regexp' (line 1208)
                expected_regexp_185005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 33), 'expected_regexp', False)
                # Obtaining the member 'pattern' of a type (line 1208)
                pattern_185006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 33), expected_regexp_185005, 'pattern')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1208, 33), tuple_185004, pattern_185006)
                # Adding element type (line 1208)
                
                # Call to str(...): (line 1208)
                # Processing the call arguments (line 1208)
                # Getting the type of 'exc_value' (line 1208)
                exc_value_185008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 62), 'exc_value', False)
                # Processing the call keyword arguments (line 1208)
                kwargs_185009 = {}
                # Getting the type of 'str' (line 1208)
                str_185007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 58), 'str', False)
                # Calling str(args, kwargs) (line 1208)
                str_call_result_185010 = invoke(stypy.reporting.localization.Localization(__file__, 1208, 58), str_185007, *[exc_value_185008], **kwargs_185009)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1208, 33), tuple_185004, str_call_result_185010)
                
                # Applying the binary operator '%' (line 1207)
                result_mod_185011 = python_operator(stypy.reporting.localization.Localization(__file__, 1207, 32), '%', str_185003, tuple_185004)
                
                # Processing the call keyword arguments (line 1206)
                kwargs_185012 = {}
                # Getting the type of 'self' (line 1206)
                self_185001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 34), 'self', False)
                # Obtaining the member 'failureException' of a type (line 1206)
                failureException_185002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 34), self_185001, 'failureException')
                # Calling failureException(args, kwargs) (line 1206)
                failureException_call_result_185013 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 34), failureException_185002, *[result_mod_185011], **kwargs_185012)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1206, 28), failureException_call_result_185013, 'raise parameter', BaseException)
                # SSA join for if statement (line 1205)
                module_type_store = module_type_store.join_ssa_context()
                
                # Getting the type of 'True' (line 1209)
                True_185014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 31), 'True')
                # Assigning a type to the variable 'stypy_return_type' (line 1209)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 24), 'stypy_return_type', True_185014)
                
                # ################# End of '__exit__(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function '__exit__' in the type store
                # Getting the type of 'stypy_return_type' (line 1187)
                stypy_return_type_185015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 20), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_185015)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '__exit__'
                return stypy_return_type_185015

        
        # Assigning a type to the variable '_AssertRaisesContext' (line 1174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1174, 16), '_AssertRaisesContext', _AssertRaisesContext)

        @norecursion
        def impl(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'impl'
            module_type_store = module_type_store.open_function_context('impl', 1211, 16, False)
            
            # Passed parameters checking function
            impl.stypy_localization = localization
            impl.stypy_type_of_self = None
            impl.stypy_type_store = module_type_store
            impl.stypy_function_name = 'impl'
            impl.stypy_param_names_list = ['cls', 'regex', 'callable_obj']
            impl.stypy_varargs_param_name = 'a'
            impl.stypy_kwargs_param_name = 'kw'
            impl.stypy_call_defaults = defaults
            impl.stypy_call_varargs = varargs
            impl.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'impl', ['cls', 'regex', 'callable_obj'], 'a', 'kw', defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'impl', localization, ['cls', 'regex', 'callable_obj'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'impl(...)' code ##################

            
            # Assigning a Call to a Name (line 1212):
            
            # Assigning a Call to a Name (line 1212):
            
            # Call to _AssertRaisesContext(...): (line 1212)
            # Processing the call arguments (line 1212)
            # Getting the type of 'cls' (line 1212)
            cls_185017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 47), 'cls', False)
            # Getting the type of 'regex' (line 1212)
            regex_185018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 52), 'regex', False)
            # Processing the call keyword arguments (line 1212)
            kwargs_185019 = {}
            # Getting the type of '_AssertRaisesContext' (line 1212)
            _AssertRaisesContext_185016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 26), '_AssertRaisesContext', False)
            # Calling _AssertRaisesContext(args, kwargs) (line 1212)
            _AssertRaisesContext_call_result_185020 = invoke(stypy.reporting.localization.Localization(__file__, 1212, 26), _AssertRaisesContext_185016, *[cls_185017, regex_185018], **kwargs_185019)
            
            # Assigning a type to the variable 'mgr' (line 1212)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 20), 'mgr', _AssertRaisesContext_call_result_185020)
            
            # Type idiom detected: calculating its left and rigth part (line 1213)
            # Getting the type of 'callable_obj' (line 1213)
            callable_obj_185021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 23), 'callable_obj')
            # Getting the type of 'None' (line 1213)
            None_185022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 39), 'None')
            
            (may_be_185023, more_types_in_union_185024) = may_be_none(callable_obj_185021, None_185022)

            if may_be_185023:

                if more_types_in_union_185024:
                    # Runtime conditional SSA (line 1213)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Getting the type of 'mgr' (line 1214)
                mgr_185025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 31), 'mgr')
                # Assigning a type to the variable 'stypy_return_type' (line 1214)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 24), 'stypy_return_type', mgr_185025)

                if more_types_in_union_185024:
                    # SSA join for if statement (line 1213)
                    module_type_store = module_type_store.join_ssa_context()


            
            # Getting the type of 'mgr' (line 1215)
            mgr_185026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 25), 'mgr')
            with_185027 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1215, 25), mgr_185026, 'with parameter', '__enter__', '__exit__')

            if with_185027:
                # Calling the __enter__ method to initiate a with section
                # Obtaining the member '__enter__' of a type (line 1215)
                enter___185028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 25), mgr_185026, '__enter__')
                with_enter_185029 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 25), enter___185028)
                
                # Call to callable_obj(...): (line 1216)
                # Getting the type of 'a' (line 1216)
                a_185031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 38), 'a', False)
                # Processing the call keyword arguments (line 1216)
                # Getting the type of 'kw' (line 1216)
                kw_185032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 43), 'kw', False)
                kwargs_185033 = {'kw_185032': kw_185032}
                # Getting the type of 'callable_obj' (line 1216)
                callable_obj_185030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 24), 'callable_obj', False)
                # Calling callable_obj(args, kwargs) (line 1216)
                callable_obj_call_result_185034 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 24), callable_obj_185030, *[a_185031], **kwargs_185033)
                
                # Calling the __exit__ method to finish a with section
                # Obtaining the member '__exit__' of a type (line 1215)
                exit___185035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 25), mgr_185026, '__exit__')
                with_exit_185036 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 25), exit___185035, None, None, None)

            
            # ################# End of 'impl(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'impl' in the type store
            # Getting the type of 'stypy_return_type' (line 1211)
            stypy_return_type_185037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 16), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_185037)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'impl'
            return stypy_return_type_185037

        # Assigning a type to the variable 'impl' (line 1211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 16), 'impl', impl)
        
        # Assigning a Name to a Name (line 1217):
        
        # Assigning a Name to a Name (line 1217):
        # Getting the type of 'impl' (line 1217)
        impl_185038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 43), 'impl')
        # Assigning a type to the variable 'assert_raises_regex_impl' (line 1217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 16), 'assert_raises_regex_impl', impl_185038)
        # SSA join for try-except statement (line 1167)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 1163)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_184922:
            # SSA join for if statement (line 1162)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to assert_raises_regex_impl(...): (line 1219)
    # Processing the call arguments (line 1219)
    # Getting the type of 'exception_class' (line 1219)
    exception_class_185040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 36), 'exception_class', False)
    # Getting the type of 'expected_regexp' (line 1219)
    expected_regexp_185041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 53), 'expected_regexp', False)
    # Getting the type of 'callable_obj' (line 1220)
    callable_obj_185042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 36), 'callable_obj', False)
    # Getting the type of 'args' (line 1220)
    args_185043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 51), 'args', False)
    # Processing the call keyword arguments (line 1219)
    # Getting the type of 'kwargs' (line 1220)
    kwargs_185044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 59), 'kwargs', False)
    kwargs_185045 = {'kwargs_185044': kwargs_185044}
    # Getting the type of 'assert_raises_regex_impl' (line 1219)
    assert_raises_regex_impl_185039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 11), 'assert_raises_regex_impl', False)
    # Calling assert_raises_regex_impl(args, kwargs) (line 1219)
    assert_raises_regex_impl_call_result_185046 = invoke(stypy.reporting.localization.Localization(__file__, 1219, 11), assert_raises_regex_impl_185039, *[exception_class_185040, expected_regexp_185041, callable_obj_185042, args_185043], **kwargs_185045)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1219, 4), 'stypy_return_type', assert_raises_regex_impl_call_result_185046)
    
    # ################# End of 'assert_raises_regex(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_raises_regex' in the type store
    # Getting the type of 'stypy_return_type' (line 1147)
    stypy_return_type_185047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185047)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_raises_regex'
    return stypy_return_type_185047

# Assigning a type to the variable 'assert_raises_regex' (line 1147)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 0), 'assert_raises_regex', assert_raises_regex)

@norecursion
def decorate_methods(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1223)
    None_185048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 47), 'None')
    defaults = [None_185048]
    # Create a new context for function 'decorate_methods'
    module_type_store = module_type_store.open_function_context('decorate_methods', 1223, 0, False)
    
    # Passed parameters checking function
    decorate_methods.stypy_localization = localization
    decorate_methods.stypy_type_of_self = None
    decorate_methods.stypy_type_store = module_type_store
    decorate_methods.stypy_function_name = 'decorate_methods'
    decorate_methods.stypy_param_names_list = ['cls', 'decorator', 'testmatch']
    decorate_methods.stypy_varargs_param_name = None
    decorate_methods.stypy_kwargs_param_name = None
    decorate_methods.stypy_call_defaults = defaults
    decorate_methods.stypy_call_varargs = varargs
    decorate_methods.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'decorate_methods', ['cls', 'decorator', 'testmatch'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'decorate_methods', localization, ['cls', 'decorator', 'testmatch'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'decorate_methods(...)' code ##################

    str_185049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, (-1)), 'str', "\n    Apply a decorator to all methods in a class matching a regular expression.\n\n    The given decorator is applied to all public methods of `cls` that are\n    matched by the regular expression `testmatch`\n    (``testmatch.search(methodname)``). Methods that are private, i.e. start\n    with an underscore, are ignored.\n\n    Parameters\n    ----------\n    cls : class\n        Class whose methods to decorate.\n    decorator : function\n        Decorator to apply to methods\n    testmatch : compiled regexp or str, optional\n        The regular expression. Default value is None, in which case the\n        nose default (``re.compile(r'(?:^|[\\b_\\.%s-])[Tt]est' % os.sep)``)\n        is used.\n        If `testmatch` is a string, it is compiled to a regular expression\n        first.\n\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 1246)
    # Getting the type of 'testmatch' (line 1246)
    testmatch_185050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 7), 'testmatch')
    # Getting the type of 'None' (line 1246)
    None_185051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 20), 'None')
    
    (may_be_185052, more_types_in_union_185053) = may_be_none(testmatch_185050, None_185051)

    if may_be_185052:

        if more_types_in_union_185053:
            # Runtime conditional SSA (line 1246)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1247):
        
        # Assigning a Call to a Name (line 1247):
        
        # Call to compile(...): (line 1247)
        # Processing the call arguments (line 1247)
        str_185056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 31), 'str', '(?:^|[\\\\b_\\\\.%s-])[Tt]est')
        # Getting the type of 'os' (line 1247)
        os_185057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 62), 'os', False)
        # Obtaining the member 'sep' of a type (line 1247)
        sep_185058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1247, 62), os_185057, 'sep')
        # Applying the binary operator '%' (line 1247)
        result_mod_185059 = python_operator(stypy.reporting.localization.Localization(__file__, 1247, 31), '%', str_185056, sep_185058)
        
        # Processing the call keyword arguments (line 1247)
        kwargs_185060 = {}
        # Getting the type of 're' (line 1247)
        re_185054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 20), 're', False)
        # Obtaining the member 'compile' of a type (line 1247)
        compile_185055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1247, 20), re_185054, 'compile')
        # Calling compile(args, kwargs) (line 1247)
        compile_call_result_185061 = invoke(stypy.reporting.localization.Localization(__file__, 1247, 20), compile_185055, *[result_mod_185059], **kwargs_185060)
        
        # Assigning a type to the variable 'testmatch' (line 1247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 8), 'testmatch', compile_call_result_185061)

        if more_types_in_union_185053:
            # Runtime conditional SSA for else branch (line 1246)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_185052) or more_types_in_union_185053):
        
        # Assigning a Call to a Name (line 1249):
        
        # Assigning a Call to a Name (line 1249):
        
        # Call to compile(...): (line 1249)
        # Processing the call arguments (line 1249)
        # Getting the type of 'testmatch' (line 1249)
        testmatch_185064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 31), 'testmatch', False)
        # Processing the call keyword arguments (line 1249)
        kwargs_185065 = {}
        # Getting the type of 're' (line 1249)
        re_185062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 20), 're', False)
        # Obtaining the member 'compile' of a type (line 1249)
        compile_185063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 20), re_185062, 'compile')
        # Calling compile(args, kwargs) (line 1249)
        compile_call_result_185066 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 20), compile_185063, *[testmatch_185064], **kwargs_185065)
        
        # Assigning a type to the variable 'testmatch' (line 1249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 8), 'testmatch', compile_call_result_185066)

        if (may_be_185052 and more_types_in_union_185053):
            # SSA join for if statement (line 1246)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Attribute to a Name (line 1250):
    
    # Assigning a Attribute to a Name (line 1250):
    # Getting the type of 'cls' (line 1250)
    cls_185067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 15), 'cls')
    # Obtaining the member '__dict__' of a type (line 1250)
    dict___185068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 15), cls_185067, '__dict__')
    # Assigning a type to the variable 'cls_attr' (line 1250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 4), 'cls_attr', dict___185068)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1253, 4))
    
    # 'from inspect import isfunction' statement (line 1253)
    from inspect import isfunction

    import_from_module(stypy.reporting.localization.Localization(__file__, 1253, 4), 'inspect', None, module_type_store, ['isfunction'], [isfunction])
    
    
    # Assigning a ListComp to a Name (line 1255):
    
    # Assigning a ListComp to a Name (line 1255):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to values(...): (line 1255)
    # Processing the call keyword arguments (line 1255)
    kwargs_185076 = {}
    # Getting the type of 'cls_attr' (line 1255)
    cls_attr_185074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 28), 'cls_attr', False)
    # Obtaining the member 'values' of a type (line 1255)
    values_185075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 28), cls_attr_185074, 'values')
    # Calling values(args, kwargs) (line 1255)
    values_call_result_185077 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 28), values_185075, *[], **kwargs_185076)
    
    comprehension_185078 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 15), values_call_result_185077)
    # Assigning a type to the variable '_m' (line 1255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 15), '_m', comprehension_185078)
    
    # Call to isfunction(...): (line 1255)
    # Processing the call arguments (line 1255)
    # Getting the type of '_m' (line 1255)
    _m_185071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 60), '_m', False)
    # Processing the call keyword arguments (line 1255)
    kwargs_185072 = {}
    # Getting the type of 'isfunction' (line 1255)
    isfunction_185070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 49), 'isfunction', False)
    # Calling isfunction(args, kwargs) (line 1255)
    isfunction_call_result_185073 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 49), isfunction_185070, *[_m_185071], **kwargs_185072)
    
    # Getting the type of '_m' (line 1255)
    _m_185069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 15), '_m')
    list_185079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 15), list_185079, _m_185069)
    # Assigning a type to the variable 'methods' (line 1255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 4), 'methods', list_185079)
    
    # Getting the type of 'methods' (line 1256)
    methods_185080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 20), 'methods')
    # Testing the type of a for loop iterable (line 1256)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1256, 4), methods_185080)
    # Getting the type of the for loop variable (line 1256)
    for_loop_var_185081 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1256, 4), methods_185080)
    # Assigning a type to the variable 'function' (line 1256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 4), 'function', for_loop_var_185081)
    # SSA begins for a for statement (line 1256)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # SSA begins for try-except statement (line 1257)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Type idiom detected: calculating its left and rigth part (line 1258)
    str_185082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1258, 33), 'str', 'compat_func_name')
    # Getting the type of 'function' (line 1258)
    function_185083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 23), 'function')
    
    (may_be_185084, more_types_in_union_185085) = may_provide_member(str_185082, function_185083)

    if may_be_185084:

        if more_types_in_union_185085:
            # Runtime conditional SSA (line 1258)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'function' (line 1258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 12), 'function', remove_not_member_provider_from_union(function_185083, 'compat_func_name'))
        
        # Assigning a Attribute to a Name (line 1259):
        
        # Assigning a Attribute to a Name (line 1259):
        # Getting the type of 'function' (line 1259)
        function_185086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 27), 'function')
        # Obtaining the member 'compat_func_name' of a type (line 1259)
        compat_func_name_185087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 27), function_185086, 'compat_func_name')
        # Assigning a type to the variable 'funcname' (line 1259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 16), 'funcname', compat_func_name_185087)

        if more_types_in_union_185085:
            # Runtime conditional SSA for else branch (line 1258)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_185084) or more_types_in_union_185085):
        # Assigning a type to the variable 'function' (line 1258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 12), 'function', remove_member_provider_from_union(function_185083, 'compat_func_name'))
        
        # Assigning a Attribute to a Name (line 1261):
        
        # Assigning a Attribute to a Name (line 1261):
        # Getting the type of 'function' (line 1261)
        function_185088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 27), 'function')
        # Obtaining the member '__name__' of a type (line 1261)
        name___185089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 27), function_185088, '__name__')
        # Assigning a type to the variable 'funcname' (line 1261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 16), 'funcname', name___185089)

        if (may_be_185084 and more_types_in_union_185085):
            # SSA join for if statement (line 1258)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the except part of a try statement (line 1257)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 1257)
    module_type_store.open_ssa_branch('except')
    # SSA join for try-except statement (line 1257)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to search(...): (line 1265)
    # Processing the call arguments (line 1265)
    # Getting the type of 'funcname' (line 1265)
    funcname_185092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 28), 'funcname', False)
    # Processing the call keyword arguments (line 1265)
    kwargs_185093 = {}
    # Getting the type of 'testmatch' (line 1265)
    testmatch_185090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 11), 'testmatch', False)
    # Obtaining the member 'search' of a type (line 1265)
    search_185091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 11), testmatch_185090, 'search')
    # Calling search(args, kwargs) (line 1265)
    search_call_result_185094 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 11), search_185091, *[funcname_185092], **kwargs_185093)
    
    
    
    # Call to startswith(...): (line 1265)
    # Processing the call arguments (line 1265)
    str_185097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, 66), 'str', '_')
    # Processing the call keyword arguments (line 1265)
    kwargs_185098 = {}
    # Getting the type of 'funcname' (line 1265)
    funcname_185095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 46), 'funcname', False)
    # Obtaining the member 'startswith' of a type (line 1265)
    startswith_185096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 46), funcname_185095, 'startswith')
    # Calling startswith(args, kwargs) (line 1265)
    startswith_call_result_185099 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 46), startswith_185096, *[str_185097], **kwargs_185098)
    
    # Applying the 'not' unary operator (line 1265)
    result_not__185100 = python_operator(stypy.reporting.localization.Localization(__file__, 1265, 42), 'not', startswith_call_result_185099)
    
    # Applying the binary operator 'and' (line 1265)
    result_and_keyword_185101 = python_operator(stypy.reporting.localization.Localization(__file__, 1265, 11), 'and', search_call_result_185094, result_not__185100)
    
    # Testing the type of an if condition (line 1265)
    if_condition_185102 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1265, 8), result_and_keyword_185101)
    # Assigning a type to the variable 'if_condition_185102' (line 1265)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1265, 8), 'if_condition_185102', if_condition_185102)
    # SSA begins for if statement (line 1265)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to setattr(...): (line 1266)
    # Processing the call arguments (line 1266)
    # Getting the type of 'cls' (line 1266)
    cls_185104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 20), 'cls', False)
    # Getting the type of 'funcname' (line 1266)
    funcname_185105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 25), 'funcname', False)
    
    # Call to decorator(...): (line 1266)
    # Processing the call arguments (line 1266)
    # Getting the type of 'function' (line 1266)
    function_185107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 45), 'function', False)
    # Processing the call keyword arguments (line 1266)
    kwargs_185108 = {}
    # Getting the type of 'decorator' (line 1266)
    decorator_185106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 35), 'decorator', False)
    # Calling decorator(args, kwargs) (line 1266)
    decorator_call_result_185109 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 35), decorator_185106, *[function_185107], **kwargs_185108)
    
    # Processing the call keyword arguments (line 1266)
    kwargs_185110 = {}
    # Getting the type of 'setattr' (line 1266)
    setattr_185103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 12), 'setattr', False)
    # Calling setattr(args, kwargs) (line 1266)
    setattr_call_result_185111 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 12), setattr_185103, *[cls_185104, funcname_185105, decorator_call_result_185109], **kwargs_185110)
    
    # SSA join for if statement (line 1265)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Assigning a type to the variable 'stypy_return_type' (line 1267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 4), 'stypy_return_type', types.NoneType)
    
    # ################# End of 'decorate_methods(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'decorate_methods' in the type store
    # Getting the type of 'stypy_return_type' (line 1223)
    stypy_return_type_185112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185112)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'decorate_methods'
    return stypy_return_type_185112

# Assigning a type to the variable 'decorate_methods' (line 1223)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 0), 'decorate_methods', decorate_methods)

@norecursion
def measure(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_185113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, 27), 'int')
    # Getting the type of 'None' (line 1270)
    None_185114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 35), 'None')
    defaults = [int_185113, None_185114]
    # Create a new context for function 'measure'
    module_type_store = module_type_store.open_function_context('measure', 1270, 0, False)
    
    # Passed parameters checking function
    measure.stypy_localization = localization
    measure.stypy_type_of_self = None
    measure.stypy_type_store = module_type_store
    measure.stypy_function_name = 'measure'
    measure.stypy_param_names_list = ['code_str', 'times', 'label']
    measure.stypy_varargs_param_name = None
    measure.stypy_kwargs_param_name = None
    measure.stypy_call_defaults = defaults
    measure.stypy_call_varargs = varargs
    measure.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'measure', ['code_str', 'times', 'label'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'measure', localization, ['code_str', 'times', 'label'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'measure(...)' code ##################

    str_185115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, (-1)), 'str', '\n    Return elapsed time for executing code in the namespace of the caller.\n\n    The supplied code string is compiled with the Python builtin ``compile``.\n    The precision of the timing is 10 milli-seconds. If the code will execute\n    fast on this timescale, it can be executed many times to get reasonable\n    timing accuracy.\n\n    Parameters\n    ----------\n    code_str : str\n        The code to be timed.\n    times : int, optional\n        The number of times the code is executed. Default is 1. The code is\n        only compiled once.\n    label : str, optional\n        A label to identify `code_str` with. This is passed into ``compile``\n        as the second argument (for run-time error messages).\n\n    Returns\n    -------\n    elapsed : float\n        Total elapsed time in seconds for executing `code_str` `times` times.\n\n    Examples\n    --------\n    >>> etime = np.testing.measure(\'for i in range(1000): np.sqrt(i**2)\',\n    ...                            times=times)\n    >>> print("Time for a single execution : ", etime / times, "s")\n    Time for a single execution :  0.005 s\n\n    ')
    
    # Assigning a Call to a Name (line 1303):
    
    # Assigning a Call to a Name (line 1303):
    
    # Call to _getframe(...): (line 1303)
    # Processing the call arguments (line 1303)
    int_185118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 26), 'int')
    # Processing the call keyword arguments (line 1303)
    kwargs_185119 = {}
    # Getting the type of 'sys' (line 1303)
    sys_185116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 12), 'sys', False)
    # Obtaining the member '_getframe' of a type (line 1303)
    _getframe_185117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1303, 12), sys_185116, '_getframe')
    # Calling _getframe(args, kwargs) (line 1303)
    _getframe_call_result_185120 = invoke(stypy.reporting.localization.Localization(__file__, 1303, 12), _getframe_185117, *[int_185118], **kwargs_185119)
    
    # Assigning a type to the variable 'frame' (line 1303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 4), 'frame', _getframe_call_result_185120)
    
    # Assigning a Tuple to a Tuple (line 1304):
    
    # Assigning a Attribute to a Name (line 1304):
    # Getting the type of 'frame' (line 1304)
    frame_185121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 18), 'frame')
    # Obtaining the member 'f_locals' of a type (line 1304)
    f_locals_185122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 18), frame_185121, 'f_locals')
    # Assigning a type to the variable 'tuple_assignment_182839' (line 1304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'tuple_assignment_182839', f_locals_185122)
    
    # Assigning a Attribute to a Name (line 1304):
    # Getting the type of 'frame' (line 1304)
    frame_185123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 34), 'frame')
    # Obtaining the member 'f_globals' of a type (line 1304)
    f_globals_185124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 34), frame_185123, 'f_globals')
    # Assigning a type to the variable 'tuple_assignment_182840' (line 1304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'tuple_assignment_182840', f_globals_185124)
    
    # Assigning a Name to a Name (line 1304):
    # Getting the type of 'tuple_assignment_182839' (line 1304)
    tuple_assignment_182839_185125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'tuple_assignment_182839')
    # Assigning a type to the variable 'locs' (line 1304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'locs', tuple_assignment_182839_185125)
    
    # Assigning a Name to a Name (line 1304):
    # Getting the type of 'tuple_assignment_182840' (line 1304)
    tuple_assignment_182840_185126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'tuple_assignment_182840')
    # Assigning a type to the variable 'globs' (line 1304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 10), 'globs', tuple_assignment_182840_185126)
    
    # Assigning a Call to a Name (line 1306):
    
    # Assigning a Call to a Name (line 1306):
    
    # Call to compile(...): (line 1306)
    # Processing the call arguments (line 1306)
    # Getting the type of 'code_str' (line 1306)
    code_str_185128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 19), 'code_str', False)
    str_185129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 19), 'str', 'Test name: %s ')
    # Getting the type of 'label' (line 1307)
    label_185130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 38), 'label', False)
    # Applying the binary operator '%' (line 1307)
    result_mod_185131 = python_operator(stypy.reporting.localization.Localization(__file__, 1307, 19), '%', str_185129, label_185130)
    
    str_185132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 19), 'str', 'exec')
    # Processing the call keyword arguments (line 1306)
    kwargs_185133 = {}
    # Getting the type of 'compile' (line 1306)
    compile_185127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 11), 'compile', False)
    # Calling compile(args, kwargs) (line 1306)
    compile_call_result_185134 = invoke(stypy.reporting.localization.Localization(__file__, 1306, 11), compile_185127, *[code_str_185128, result_mod_185131, str_185132], **kwargs_185133)
    
    # Assigning a type to the variable 'code' (line 1306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 4), 'code', compile_call_result_185134)
    
    # Assigning a Num to a Name (line 1309):
    
    # Assigning a Num to a Name (line 1309):
    int_185135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 8), 'int')
    # Assigning a type to the variable 'i' (line 1309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 4), 'i', int_185135)
    
    # Assigning a Call to a Name (line 1310):
    
    # Assigning a Call to a Name (line 1310):
    
    # Call to jiffies(...): (line 1310)
    # Processing the call keyword arguments (line 1310)
    kwargs_185137 = {}
    # Getting the type of 'jiffies' (line 1310)
    jiffies_185136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 14), 'jiffies', False)
    # Calling jiffies(args, kwargs) (line 1310)
    jiffies_call_result_185138 = invoke(stypy.reporting.localization.Localization(__file__, 1310, 14), jiffies_185136, *[], **kwargs_185137)
    
    # Assigning a type to the variable 'elapsed' (line 1310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1310, 4), 'elapsed', jiffies_call_result_185138)
    
    
    # Getting the type of 'i' (line 1311)
    i_185139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 10), 'i')
    # Getting the type of 'times' (line 1311)
    times_185140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 14), 'times')
    # Applying the binary operator '<' (line 1311)
    result_lt_185141 = python_operator(stypy.reporting.localization.Localization(__file__, 1311, 10), '<', i_185139, times_185140)
    
    # Testing the type of an if condition (line 1311)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1311, 4), result_lt_185141)
    # SSA begins for while statement (line 1311)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'i' (line 1312)
    i_185142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 8), 'i')
    int_185143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 13), 'int')
    # Applying the binary operator '+=' (line 1312)
    result_iadd_185144 = python_operator(stypy.reporting.localization.Localization(__file__, 1312, 8), '+=', i_185142, int_185143)
    # Assigning a type to the variable 'i' (line 1312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 8), 'i', result_iadd_185144)
    
    # Dynamic code evaluation using an exec statement
    # Getting the type of 'code' (line 1313)
    code_185145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 13), 'code')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1313, 8), code_185145, 'exec parameter', 'StringType', 'FileType', 'CodeType')
    enable_usage_of_dynamic_types_warning(stypy.reporting.localization.Localization(__file__, 1313, 8))
    # SSA join for while statement (line 1311)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1314):
    
    # Assigning a BinOp to a Name (line 1314):
    
    # Call to jiffies(...): (line 1314)
    # Processing the call keyword arguments (line 1314)
    kwargs_185147 = {}
    # Getting the type of 'jiffies' (line 1314)
    jiffies_185146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 14), 'jiffies', False)
    # Calling jiffies(args, kwargs) (line 1314)
    jiffies_call_result_185148 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 14), jiffies_185146, *[], **kwargs_185147)
    
    # Getting the type of 'elapsed' (line 1314)
    elapsed_185149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 26), 'elapsed')
    # Applying the binary operator '-' (line 1314)
    result_sub_185150 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 14), '-', jiffies_call_result_185148, elapsed_185149)
    
    # Assigning a type to the variable 'elapsed' (line 1314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 4), 'elapsed', result_sub_185150)
    float_185151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 11), 'float')
    # Getting the type of 'elapsed' (line 1315)
    elapsed_185152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 16), 'elapsed')
    # Applying the binary operator '*' (line 1315)
    result_mul_185153 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 11), '*', float_185151, elapsed_185152)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 4), 'stypy_return_type', result_mul_185153)
    
    # ################# End of 'measure(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'measure' in the type store
    # Getting the type of 'stypy_return_type' (line 1270)
    stypy_return_type_185154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185154)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'measure'
    return stypy_return_type_185154

# Assigning a type to the variable 'measure' (line 1270)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 0), 'measure', measure)

@norecursion
def _assert_valid_refcount(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_assert_valid_refcount'
    module_type_store = module_type_store.open_function_context('_assert_valid_refcount', 1318, 0, False)
    
    # Passed parameters checking function
    _assert_valid_refcount.stypy_localization = localization
    _assert_valid_refcount.stypy_type_of_self = None
    _assert_valid_refcount.stypy_type_store = module_type_store
    _assert_valid_refcount.stypy_function_name = '_assert_valid_refcount'
    _assert_valid_refcount.stypy_param_names_list = ['op']
    _assert_valid_refcount.stypy_varargs_param_name = None
    _assert_valid_refcount.stypy_kwargs_param_name = None
    _assert_valid_refcount.stypy_call_defaults = defaults
    _assert_valid_refcount.stypy_call_varargs = varargs
    _assert_valid_refcount.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_assert_valid_refcount', ['op'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_assert_valid_refcount', localization, ['op'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_assert_valid_refcount(...)' code ##################

    str_185155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1322, (-1)), 'str', "\n    Check that ufuncs don't mishandle refcount of object `1`.\n    Used in a few regression tests.\n    ")
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1323, 4))
    
    # 'import numpy' statement (line 1323)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_185156 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1323, 4), 'numpy')

    if (type(import_185156) is not StypyTypeError):

        if (import_185156 != 'pyd_module'):
            __import__(import_185156)
            sys_modules_185157 = sys.modules[import_185156]
            import_module(stypy.reporting.localization.Localization(__file__, 1323, 4), 'np', sys_modules_185157.module_type_store, module_type_store)
        else:
            import numpy as np

            import_module(stypy.reporting.localization.Localization(__file__, 1323, 4), 'np', numpy, module_type_store)

    else:
        # Assigning a type to the variable 'numpy' (line 1323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 4), 'numpy', import_185156)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Assigning a Call to a Name (line 1325):
    
    # Assigning a Call to a Name (line 1325):
    
    # Call to reshape(...): (line 1325)
    # Processing the call arguments (line 1325)
    int_185166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 35), 'int')
    int_185167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 40), 'int')
    # Processing the call keyword arguments (line 1325)
    kwargs_185168 = {}
    
    # Call to arange(...): (line 1325)
    # Processing the call arguments (line 1325)
    int_185160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 18), 'int')
    int_185161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 22), 'int')
    # Applying the binary operator '*' (line 1325)
    result_mul_185162 = python_operator(stypy.reporting.localization.Localization(__file__, 1325, 18), '*', int_185160, int_185161)
    
    # Processing the call keyword arguments (line 1325)
    kwargs_185163 = {}
    # Getting the type of 'np' (line 1325)
    np_185158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 8), 'np', False)
    # Obtaining the member 'arange' of a type (line 1325)
    arange_185159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 8), np_185158, 'arange')
    # Calling arange(args, kwargs) (line 1325)
    arange_call_result_185164 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 8), arange_185159, *[result_mul_185162], **kwargs_185163)
    
    # Obtaining the member 'reshape' of a type (line 1325)
    reshape_185165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 8), arange_call_result_185164, 'reshape')
    # Calling reshape(args, kwargs) (line 1325)
    reshape_call_result_185169 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 8), reshape_185165, *[int_185166, int_185167], **kwargs_185168)
    
    # Assigning a type to the variable 'b' (line 1325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1325, 4), 'b', reshape_call_result_185169)
    
    # Assigning a Name to a Name (line 1326):
    
    # Assigning a Name to a Name (line 1326):
    # Getting the type of 'b' (line 1326)
    b_185170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 8), 'b')
    # Assigning a type to the variable 'c' (line 1326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 4), 'c', b_185170)
    
    # Assigning a Num to a Name (line 1327):
    
    # Assigning a Num to a Name (line 1327):
    int_185171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 8), 'int')
    # Assigning a type to the variable 'i' (line 1327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 4), 'i', int_185171)
    
    # Assigning a Call to a Name (line 1329):
    
    # Assigning a Call to a Name (line 1329):
    
    # Call to getrefcount(...): (line 1329)
    # Processing the call arguments (line 1329)
    # Getting the type of 'i' (line 1329)
    i_185174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 25), 'i', False)
    # Processing the call keyword arguments (line 1329)
    kwargs_185175 = {}
    # Getting the type of 'sys' (line 1329)
    sys_185172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 9), 'sys', False)
    # Obtaining the member 'getrefcount' of a type (line 1329)
    getrefcount_185173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1329, 9), sys_185172, 'getrefcount')
    # Calling getrefcount(args, kwargs) (line 1329)
    getrefcount_call_result_185176 = invoke(stypy.reporting.localization.Localization(__file__, 1329, 9), getrefcount_185173, *[i_185174], **kwargs_185175)
    
    # Assigning a type to the variable 'rc' (line 1329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 4), 'rc', getrefcount_call_result_185176)
    
    
    # Call to range(...): (line 1330)
    # Processing the call arguments (line 1330)
    int_185178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1330, 19), 'int')
    # Processing the call keyword arguments (line 1330)
    kwargs_185179 = {}
    # Getting the type of 'range' (line 1330)
    range_185177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 13), 'range', False)
    # Calling range(args, kwargs) (line 1330)
    range_call_result_185180 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 13), range_185177, *[int_185178], **kwargs_185179)
    
    # Testing the type of a for loop iterable (line 1330)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1330, 4), range_call_result_185180)
    # Getting the type of the for loop variable (line 1330)
    for_loop_var_185181 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1330, 4), range_call_result_185180)
    # Assigning a type to the variable 'j' (line 1330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 4), 'j', for_loop_var_185181)
    # SSA begins for a for statement (line 1330)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1331):
    
    # Assigning a Call to a Name (line 1331):
    
    # Call to op(...): (line 1331)
    # Processing the call arguments (line 1331)
    # Getting the type of 'b' (line 1331)
    b_185183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 15), 'b', False)
    # Getting the type of 'c' (line 1331)
    c_185184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 18), 'c', False)
    # Processing the call keyword arguments (line 1331)
    kwargs_185185 = {}
    # Getting the type of 'op' (line 1331)
    op_185182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 12), 'op', False)
    # Calling op(args, kwargs) (line 1331)
    op_call_result_185186 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 12), op_185182, *[b_185183, c_185184], **kwargs_185185)
    
    # Assigning a type to the variable 'd' (line 1331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1331, 8), 'd', op_call_result_185186)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to assert_(...): (line 1332)
    # Processing the call arguments (line 1332)
    
    
    # Call to getrefcount(...): (line 1332)
    # Processing the call arguments (line 1332)
    # Getting the type of 'i' (line 1332)
    i_185190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 28), 'i', False)
    # Processing the call keyword arguments (line 1332)
    kwargs_185191 = {}
    # Getting the type of 'sys' (line 1332)
    sys_185188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 12), 'sys', False)
    # Obtaining the member 'getrefcount' of a type (line 1332)
    getrefcount_185189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 12), sys_185188, 'getrefcount')
    # Calling getrefcount(args, kwargs) (line 1332)
    getrefcount_call_result_185192 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 12), getrefcount_185189, *[i_185190], **kwargs_185191)
    
    # Getting the type of 'rc' (line 1332)
    rc_185193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 34), 'rc', False)
    # Applying the binary operator '>=' (line 1332)
    result_ge_185194 = python_operator(stypy.reporting.localization.Localization(__file__, 1332, 12), '>=', getrefcount_call_result_185192, rc_185193)
    
    # Processing the call keyword arguments (line 1332)
    kwargs_185195 = {}
    # Getting the type of 'assert_' (line 1332)
    assert__185187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 4), 'assert_', False)
    # Calling assert_(args, kwargs) (line 1332)
    assert__call_result_185196 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 4), assert__185187, *[result_ge_185194], **kwargs_185195)
    
    # Deleting a member
    module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1333, 4), module_type_store, 'd')
    
    # ################# End of '_assert_valid_refcount(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_assert_valid_refcount' in the type store
    # Getting the type of 'stypy_return_type' (line 1318)
    stypy_return_type_185197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185197)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_assert_valid_refcount'
    return stypy_return_type_185197

# Assigning a type to the variable '_assert_valid_refcount' (line 1318)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 0), '_assert_valid_refcount', _assert_valid_refcount)

@norecursion
def assert_allclose(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_185198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 42), 'float')
    int_185199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 53), 'int')
    # Getting the type of 'False' (line 1336)
    False_185200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 66), 'False')
    str_185201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 28), 'str', '')
    # Getting the type of 'True' (line 1337)
    True_185202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 40), 'True')
    defaults = [float_185198, int_185199, False_185200, str_185201, True_185202]
    # Create a new context for function 'assert_allclose'
    module_type_store = module_type_store.open_function_context('assert_allclose', 1336, 0, False)
    
    # Passed parameters checking function
    assert_allclose.stypy_localization = localization
    assert_allclose.stypy_type_of_self = None
    assert_allclose.stypy_type_store = module_type_store
    assert_allclose.stypy_function_name = 'assert_allclose'
    assert_allclose.stypy_param_names_list = ['actual', 'desired', 'rtol', 'atol', 'equal_nan', 'err_msg', 'verbose']
    assert_allclose.stypy_varargs_param_name = None
    assert_allclose.stypy_kwargs_param_name = None
    assert_allclose.stypy_call_defaults = defaults
    assert_allclose.stypy_call_varargs = varargs
    assert_allclose.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_allclose', ['actual', 'desired', 'rtol', 'atol', 'equal_nan', 'err_msg', 'verbose'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_allclose', localization, ['actual', 'desired', 'rtol', 'atol', 'equal_nan', 'err_msg', 'verbose'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_allclose(...)' code ##################

    str_185203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1380, (-1)), 'str', '\n    Raises an AssertionError if two objects are not equal up to desired\n    tolerance.\n\n    The test is equivalent to ``allclose(actual, desired, rtol, atol)``.\n    It compares the difference between `actual` and `desired` to\n    ``atol + rtol * abs(desired)``.\n\n    .. versionadded:: 1.5.0\n\n    Parameters\n    ----------\n    actual : array_like\n        Array obtained.\n    desired : array_like\n        Array desired.\n    rtol : float, optional\n        Relative tolerance.\n    atol : float, optional\n        Absolute tolerance.\n    equal_nan : bool, optional.\n        If True, NaNs will compare equal.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n        If actual and desired are not equal up to specified precision.\n\n    See Also\n    --------\n    assert_array_almost_equal_nulp, assert_array_max_ulp\n\n    Examples\n    --------\n    >>> x = [1e-5, 1e-3, 1e-1]\n    >>> y = np.arccos(np.cos(x))\n    >>> assert_allclose(x, y, rtol=1e-5, atol=0)\n\n    ')
    
    # Assigning a Name to a Name (line 1381):
    
    # Assigning a Name to a Name (line 1381):
    # Getting the type of 'True' (line 1381)
    True_185204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 1381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 4), '__tracebackhide__', True_185204)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1382, 4))
    
    # 'import numpy' statement (line 1382)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_185205 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1382, 4), 'numpy')

    if (type(import_185205) is not StypyTypeError):

        if (import_185205 != 'pyd_module'):
            __import__(import_185205)
            sys_modules_185206 = sys.modules[import_185205]
            import_module(stypy.reporting.localization.Localization(__file__, 1382, 4), 'np', sys_modules_185206.module_type_store, module_type_store)
        else:
            import numpy as np

            import_module(stypy.reporting.localization.Localization(__file__, 1382, 4), 'np', numpy, module_type_store)

    else:
        # Assigning a type to the variable 'numpy' (line 1382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 4), 'numpy', import_185205)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    

    @norecursion
    def compare(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'compare'
        module_type_store = module_type_store.open_function_context('compare', 1384, 4, False)
        
        # Passed parameters checking function
        compare.stypy_localization = localization
        compare.stypy_type_of_self = None
        compare.stypy_type_store = module_type_store
        compare.stypy_function_name = 'compare'
        compare.stypy_param_names_list = ['x', 'y']
        compare.stypy_varargs_param_name = None
        compare.stypy_kwargs_param_name = None
        compare.stypy_call_defaults = defaults
        compare.stypy_call_varargs = varargs
        compare.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'compare', ['x', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'compare', localization, ['x', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'compare(...)' code ##################

        
        # Call to isclose(...): (line 1385)
        # Processing the call arguments (line 1385)
        # Getting the type of 'x' (line 1385)
        x_185211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 39), 'x', False)
        # Getting the type of 'y' (line 1385)
        y_185212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 42), 'y', False)
        # Processing the call keyword arguments (line 1385)
        # Getting the type of 'rtol' (line 1385)
        rtol_185213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 50), 'rtol', False)
        keyword_185214 = rtol_185213
        # Getting the type of 'atol' (line 1385)
        atol_185215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 61), 'atol', False)
        keyword_185216 = atol_185215
        # Getting the type of 'equal_nan' (line 1386)
        equal_nan_185217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 49), 'equal_nan', False)
        keyword_185218 = equal_nan_185217
        kwargs_185219 = {'rtol': keyword_185214, 'atol': keyword_185216, 'equal_nan': keyword_185218}
        # Getting the type of 'np' (line 1385)
        np_185207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 15), 'np', False)
        # Obtaining the member 'core' of a type (line 1385)
        core_185208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 15), np_185207, 'core')
        # Obtaining the member 'numeric' of a type (line 1385)
        numeric_185209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 15), core_185208, 'numeric')
        # Obtaining the member 'isclose' of a type (line 1385)
        isclose_185210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 15), numeric_185209, 'isclose')
        # Calling isclose(args, kwargs) (line 1385)
        isclose_call_result_185220 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 15), isclose_185210, *[x_185211, y_185212], **kwargs_185219)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 8), 'stypy_return_type', isclose_call_result_185220)
        
        # ################# End of 'compare(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'compare' in the type store
        # Getting the type of 'stypy_return_type' (line 1384)
        stypy_return_type_185221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_185221)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'compare'
        return stypy_return_type_185221

    # Assigning a type to the variable 'compare' (line 1384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 4), 'compare', compare)
    
    # Assigning a Tuple to a Tuple (line 1388):
    
    # Assigning a Call to a Name (line 1388):
    
    # Call to asanyarray(...): (line 1388)
    # Processing the call arguments (line 1388)
    # Getting the type of 'actual' (line 1388)
    actual_185224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 36), 'actual', False)
    # Processing the call keyword arguments (line 1388)
    kwargs_185225 = {}
    # Getting the type of 'np' (line 1388)
    np_185222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 22), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 1388)
    asanyarray_185223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 22), np_185222, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 1388)
    asanyarray_call_result_185226 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 22), asanyarray_185223, *[actual_185224], **kwargs_185225)
    
    # Assigning a type to the variable 'tuple_assignment_182841' (line 1388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'tuple_assignment_182841', asanyarray_call_result_185226)
    
    # Assigning a Call to a Name (line 1388):
    
    # Call to asanyarray(...): (line 1388)
    # Processing the call arguments (line 1388)
    # Getting the type of 'desired' (line 1388)
    desired_185229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 59), 'desired', False)
    # Processing the call keyword arguments (line 1388)
    kwargs_185230 = {}
    # Getting the type of 'np' (line 1388)
    np_185227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 45), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 1388)
    asanyarray_185228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 45), np_185227, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 1388)
    asanyarray_call_result_185231 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 45), asanyarray_185228, *[desired_185229], **kwargs_185230)
    
    # Assigning a type to the variable 'tuple_assignment_182842' (line 1388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'tuple_assignment_182842', asanyarray_call_result_185231)
    
    # Assigning a Name to a Name (line 1388):
    # Getting the type of 'tuple_assignment_182841' (line 1388)
    tuple_assignment_182841_185232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'tuple_assignment_182841')
    # Assigning a type to the variable 'actual' (line 1388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'actual', tuple_assignment_182841_185232)
    
    # Assigning a Name to a Name (line 1388):
    # Getting the type of 'tuple_assignment_182842' (line 1388)
    tuple_assignment_182842_185233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'tuple_assignment_182842')
    # Assigning a type to the variable 'desired' (line 1388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 12), 'desired', tuple_assignment_182842_185233)
    
    # Assigning a BinOp to a Name (line 1389):
    
    # Assigning a BinOp to a Name (line 1389):
    str_185234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1389, 13), 'str', 'Not equal to tolerance rtol=%g, atol=%g')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1389)
    tuple_185235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1389, 58), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1389)
    # Adding element type (line 1389)
    # Getting the type of 'rtol' (line 1389)
    rtol_185236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 58), 'rtol')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1389, 58), tuple_185235, rtol_185236)
    # Adding element type (line 1389)
    # Getting the type of 'atol' (line 1389)
    atol_185237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 64), 'atol')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1389, 58), tuple_185235, atol_185237)
    
    # Applying the binary operator '%' (line 1389)
    result_mod_185238 = python_operator(stypy.reporting.localization.Localization(__file__, 1389, 13), '%', str_185234, tuple_185235)
    
    # Assigning a type to the variable 'header' (line 1389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 4), 'header', result_mod_185238)
    
    # Call to assert_array_compare(...): (line 1390)
    # Processing the call arguments (line 1390)
    # Getting the type of 'compare' (line 1390)
    compare_185240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 25), 'compare', False)
    # Getting the type of 'actual' (line 1390)
    actual_185241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 34), 'actual', False)
    # Getting the type of 'desired' (line 1390)
    desired_185242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 42), 'desired', False)
    # Processing the call keyword arguments (line 1390)
    
    # Call to str(...): (line 1390)
    # Processing the call arguments (line 1390)
    # Getting the type of 'err_msg' (line 1390)
    err_msg_185244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 63), 'err_msg', False)
    # Processing the call keyword arguments (line 1390)
    kwargs_185245 = {}
    # Getting the type of 'str' (line 1390)
    str_185243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 59), 'str', False)
    # Calling str(args, kwargs) (line 1390)
    str_call_result_185246 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 59), str_185243, *[err_msg_185244], **kwargs_185245)
    
    keyword_185247 = str_call_result_185246
    # Getting the type of 'verbose' (line 1391)
    verbose_185248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 33), 'verbose', False)
    keyword_185249 = verbose_185248
    # Getting the type of 'header' (line 1391)
    header_185250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 49), 'header', False)
    keyword_185251 = header_185250
    kwargs_185252 = {'header': keyword_185251, 'err_msg': keyword_185247, 'verbose': keyword_185249}
    # Getting the type of 'assert_array_compare' (line 1390)
    assert_array_compare_185239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 4), 'assert_array_compare', False)
    # Calling assert_array_compare(args, kwargs) (line 1390)
    assert_array_compare_call_result_185253 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 4), assert_array_compare_185239, *[compare_185240, actual_185241, desired_185242], **kwargs_185252)
    
    
    # ################# End of 'assert_allclose(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_allclose' in the type store
    # Getting the type of 'stypy_return_type' (line 1336)
    stypy_return_type_185254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185254)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_allclose'
    return stypy_return_type_185254

# Assigning a type to the variable 'assert_allclose' (line 1336)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1336, 0), 'assert_allclose', assert_allclose)

@norecursion
def assert_array_almost_equal_nulp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_185255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, 46), 'int')
    defaults = [int_185255]
    # Create a new context for function 'assert_array_almost_equal_nulp'
    module_type_store = module_type_store.open_function_context('assert_array_almost_equal_nulp', 1393, 0, False)
    
    # Passed parameters checking function
    assert_array_almost_equal_nulp.stypy_localization = localization
    assert_array_almost_equal_nulp.stypy_type_of_self = None
    assert_array_almost_equal_nulp.stypy_type_store = module_type_store
    assert_array_almost_equal_nulp.stypy_function_name = 'assert_array_almost_equal_nulp'
    assert_array_almost_equal_nulp.stypy_param_names_list = ['x', 'y', 'nulp']
    assert_array_almost_equal_nulp.stypy_varargs_param_name = None
    assert_array_almost_equal_nulp.stypy_kwargs_param_name = None
    assert_array_almost_equal_nulp.stypy_call_defaults = defaults
    assert_array_almost_equal_nulp.stypy_call_varargs = varargs
    assert_array_almost_equal_nulp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_array_almost_equal_nulp', ['x', 'y', 'nulp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_array_almost_equal_nulp', localization, ['x', 'y', 'nulp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_array_almost_equal_nulp(...)' code ##################

    str_185256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, (-1)), 'str', '\n    Compare two arrays relatively to their spacing.\n\n    This is a relatively robust method to compare two arrays whose amplitude\n    is variable.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Input arrays.\n    nulp : int, optional\n        The maximum number of unit in the last place for tolerance (see Notes).\n        Default is 1.\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    AssertionError\n        If the spacing between `x` and `y` for one or more elements is larger\n        than `nulp`.\n\n    See Also\n    --------\n    assert_array_max_ulp : Check that all items of arrays differ in at most\n        N Units in the Last Place.\n    spacing : Return the distance between x and the nearest adjacent number.\n\n    Notes\n    -----\n    An assertion is raised if the following condition is not met::\n\n        abs(x - y) <= nulps * spacing(maximum(abs(x), abs(y)))\n\n    Examples\n    --------\n    >>> x = np.array([1., 1e-10, 1e-20])\n    >>> eps = np.finfo(x.dtype).eps\n    >>> np.testing.assert_array_almost_equal_nulp(x, x*eps/2 + x)\n\n    >>> np.testing.assert_array_almost_equal_nulp(x, x*eps + x)\n    Traceback (most recent call last):\n      ...\n    AssertionError: X and Y are not equal to 1 ULP (max is 2)\n\n    ')
    
    # Assigning a Name to a Name (line 1442):
    
    # Assigning a Name to a Name (line 1442):
    # Getting the type of 'True' (line 1442)
    True_185257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 1442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 4), '__tracebackhide__', True_185257)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1443, 4))
    
    # 'import numpy' statement (line 1443)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_185258 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1443, 4), 'numpy')

    if (type(import_185258) is not StypyTypeError):

        if (import_185258 != 'pyd_module'):
            __import__(import_185258)
            sys_modules_185259 = sys.modules[import_185258]
            import_module(stypy.reporting.localization.Localization(__file__, 1443, 4), 'np', sys_modules_185259.module_type_store, module_type_store)
        else:
            import numpy as np

            import_module(stypy.reporting.localization.Localization(__file__, 1443, 4), 'np', numpy, module_type_store)

    else:
        # Assigning a type to the variable 'numpy' (line 1443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 4), 'numpy', import_185258)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Assigning a Call to a Name (line 1444):
    
    # Assigning a Call to a Name (line 1444):
    
    # Call to abs(...): (line 1444)
    # Processing the call arguments (line 1444)
    # Getting the type of 'x' (line 1444)
    x_185262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 16), 'x', False)
    # Processing the call keyword arguments (line 1444)
    kwargs_185263 = {}
    # Getting the type of 'np' (line 1444)
    np_185260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 9), 'np', False)
    # Obtaining the member 'abs' of a type (line 1444)
    abs_185261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 9), np_185260, 'abs')
    # Calling abs(args, kwargs) (line 1444)
    abs_call_result_185264 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 9), abs_185261, *[x_185262], **kwargs_185263)
    
    # Assigning a type to the variable 'ax' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'ax', abs_call_result_185264)
    
    # Assigning a Call to a Name (line 1445):
    
    # Assigning a Call to a Name (line 1445):
    
    # Call to abs(...): (line 1445)
    # Processing the call arguments (line 1445)
    # Getting the type of 'y' (line 1445)
    y_185267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 16), 'y', False)
    # Processing the call keyword arguments (line 1445)
    kwargs_185268 = {}
    # Getting the type of 'np' (line 1445)
    np_185265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 9), 'np', False)
    # Obtaining the member 'abs' of a type (line 1445)
    abs_185266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1445, 9), np_185265, 'abs')
    # Calling abs(args, kwargs) (line 1445)
    abs_call_result_185269 = invoke(stypy.reporting.localization.Localization(__file__, 1445, 9), abs_185266, *[y_185267], **kwargs_185268)
    
    # Assigning a type to the variable 'ay' (line 1445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 4), 'ay', abs_call_result_185269)
    
    # Assigning a BinOp to a Name (line 1446):
    
    # Assigning a BinOp to a Name (line 1446):
    # Getting the type of 'nulp' (line 1446)
    nulp_185270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 10), 'nulp')
    
    # Call to spacing(...): (line 1446)
    # Processing the call arguments (line 1446)
    
    # Call to where(...): (line 1446)
    # Processing the call arguments (line 1446)
    
    # Getting the type of 'ax' (line 1446)
    ax_185275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 37), 'ax', False)
    # Getting the type of 'ay' (line 1446)
    ay_185276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 42), 'ay', False)
    # Applying the binary operator '>' (line 1446)
    result_gt_185277 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 37), '>', ax_185275, ay_185276)
    
    # Getting the type of 'ax' (line 1446)
    ax_185278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 46), 'ax', False)
    # Getting the type of 'ay' (line 1446)
    ay_185279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 50), 'ay', False)
    # Processing the call keyword arguments (line 1446)
    kwargs_185280 = {}
    # Getting the type of 'np' (line 1446)
    np_185273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 28), 'np', False)
    # Obtaining the member 'where' of a type (line 1446)
    where_185274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 28), np_185273, 'where')
    # Calling where(args, kwargs) (line 1446)
    where_call_result_185281 = invoke(stypy.reporting.localization.Localization(__file__, 1446, 28), where_185274, *[result_gt_185277, ax_185278, ay_185279], **kwargs_185280)
    
    # Processing the call keyword arguments (line 1446)
    kwargs_185282 = {}
    # Getting the type of 'np' (line 1446)
    np_185271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 17), 'np', False)
    # Obtaining the member 'spacing' of a type (line 1446)
    spacing_185272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 17), np_185271, 'spacing')
    # Calling spacing(args, kwargs) (line 1446)
    spacing_call_result_185283 = invoke(stypy.reporting.localization.Localization(__file__, 1446, 17), spacing_185272, *[where_call_result_185281], **kwargs_185282)
    
    # Applying the binary operator '*' (line 1446)
    result_mul_185284 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 10), '*', nulp_185270, spacing_call_result_185283)
    
    # Assigning a type to the variable 'ref' (line 1446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 4), 'ref', result_mul_185284)
    
    
    
    # Call to all(...): (line 1447)
    # Processing the call arguments (line 1447)
    
    
    # Call to abs(...): (line 1447)
    # Processing the call arguments (line 1447)
    # Getting the type of 'x' (line 1447)
    x_185289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 25), 'x', False)
    # Getting the type of 'y' (line 1447)
    y_185290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 27), 'y', False)
    # Applying the binary operator '-' (line 1447)
    result_sub_185291 = python_operator(stypy.reporting.localization.Localization(__file__, 1447, 25), '-', x_185289, y_185290)
    
    # Processing the call keyword arguments (line 1447)
    kwargs_185292 = {}
    # Getting the type of 'np' (line 1447)
    np_185287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 18), 'np', False)
    # Obtaining the member 'abs' of a type (line 1447)
    abs_185288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 18), np_185287, 'abs')
    # Calling abs(args, kwargs) (line 1447)
    abs_call_result_185293 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 18), abs_185288, *[result_sub_185291], **kwargs_185292)
    
    # Getting the type of 'ref' (line 1447)
    ref_185294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 33), 'ref', False)
    # Applying the binary operator '<=' (line 1447)
    result_le_185295 = python_operator(stypy.reporting.localization.Localization(__file__, 1447, 18), '<=', abs_call_result_185293, ref_185294)
    
    # Processing the call keyword arguments (line 1447)
    kwargs_185296 = {}
    # Getting the type of 'np' (line 1447)
    np_185285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 11), 'np', False)
    # Obtaining the member 'all' of a type (line 1447)
    all_185286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 11), np_185285, 'all')
    # Calling all(args, kwargs) (line 1447)
    all_call_result_185297 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 11), all_185286, *[result_le_185295], **kwargs_185296)
    
    # Applying the 'not' unary operator (line 1447)
    result_not__185298 = python_operator(stypy.reporting.localization.Localization(__file__, 1447, 7), 'not', all_call_result_185297)
    
    # Testing the type of an if condition (line 1447)
    if_condition_185299 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1447, 4), result_not__185298)
    # Assigning a type to the variable 'if_condition_185299' (line 1447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 4), 'if_condition_185299', if_condition_185299)
    # SSA begins for if statement (line 1447)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Call to iscomplexobj(...): (line 1448)
    # Processing the call arguments (line 1448)
    # Getting the type of 'x' (line 1448)
    x_185302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 27), 'x', False)
    # Processing the call keyword arguments (line 1448)
    kwargs_185303 = {}
    # Getting the type of 'np' (line 1448)
    np_185300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 11), 'np', False)
    # Obtaining the member 'iscomplexobj' of a type (line 1448)
    iscomplexobj_185301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 11), np_185300, 'iscomplexobj')
    # Calling iscomplexobj(args, kwargs) (line 1448)
    iscomplexobj_call_result_185304 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 11), iscomplexobj_185301, *[x_185302], **kwargs_185303)
    
    
    # Call to iscomplexobj(...): (line 1448)
    # Processing the call arguments (line 1448)
    # Getting the type of 'y' (line 1448)
    y_185307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 49), 'y', False)
    # Processing the call keyword arguments (line 1448)
    kwargs_185308 = {}
    # Getting the type of 'np' (line 1448)
    np_185305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 33), 'np', False)
    # Obtaining the member 'iscomplexobj' of a type (line 1448)
    iscomplexobj_185306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 33), np_185305, 'iscomplexobj')
    # Calling iscomplexobj(args, kwargs) (line 1448)
    iscomplexobj_call_result_185309 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 33), iscomplexobj_185306, *[y_185307], **kwargs_185308)
    
    # Applying the binary operator 'or' (line 1448)
    result_or_keyword_185310 = python_operator(stypy.reporting.localization.Localization(__file__, 1448, 11), 'or', iscomplexobj_call_result_185304, iscomplexobj_call_result_185309)
    
    # Testing the type of an if condition (line 1448)
    if_condition_185311 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1448, 8), result_or_keyword_185310)
    # Assigning a type to the variable 'if_condition_185311' (line 1448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 8), 'if_condition_185311', if_condition_185311)
    # SSA begins for if statement (line 1448)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1449):
    
    # Assigning a BinOp to a Name (line 1449):
    str_185312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1449, 18), 'str', 'X and Y are not equal to %d ULP')
    # Getting the type of 'nulp' (line 1449)
    nulp_185313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 54), 'nulp')
    # Applying the binary operator '%' (line 1449)
    result_mod_185314 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 18), '%', str_185312, nulp_185313)
    
    # Assigning a type to the variable 'msg' (line 1449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 12), 'msg', result_mod_185314)
    # SSA branch for the else part of an if statement (line 1448)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1451):
    
    # Assigning a Call to a Name (line 1451):
    
    # Call to max(...): (line 1451)
    # Processing the call arguments (line 1451)
    
    # Call to nulp_diff(...): (line 1451)
    # Processing the call arguments (line 1451)
    # Getting the type of 'x' (line 1451)
    x_185318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 40), 'x', False)
    # Getting the type of 'y' (line 1451)
    y_185319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 43), 'y', False)
    # Processing the call keyword arguments (line 1451)
    kwargs_185320 = {}
    # Getting the type of 'nulp_diff' (line 1451)
    nulp_diff_185317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 30), 'nulp_diff', False)
    # Calling nulp_diff(args, kwargs) (line 1451)
    nulp_diff_call_result_185321 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 30), nulp_diff_185317, *[x_185318, y_185319], **kwargs_185320)
    
    # Processing the call keyword arguments (line 1451)
    kwargs_185322 = {}
    # Getting the type of 'np' (line 1451)
    np_185315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 23), 'np', False)
    # Obtaining the member 'max' of a type (line 1451)
    max_185316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1451, 23), np_185315, 'max')
    # Calling max(args, kwargs) (line 1451)
    max_call_result_185323 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 23), max_185316, *[nulp_diff_call_result_185321], **kwargs_185322)
    
    # Assigning a type to the variable 'max_nulp' (line 1451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 12), 'max_nulp', max_call_result_185323)
    
    # Assigning a BinOp to a Name (line 1452):
    
    # Assigning a BinOp to a Name (line 1452):
    str_185324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 18), 'str', 'X and Y are not equal to %d ULP (max is %g)')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1452)
    tuple_185325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 67), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1452)
    # Adding element type (line 1452)
    # Getting the type of 'nulp' (line 1452)
    nulp_185326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 67), 'nulp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1452, 67), tuple_185325, nulp_185326)
    # Adding element type (line 1452)
    # Getting the type of 'max_nulp' (line 1452)
    max_nulp_185327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 73), 'max_nulp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1452, 67), tuple_185325, max_nulp_185327)
    
    # Applying the binary operator '%' (line 1452)
    result_mod_185328 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 18), '%', str_185324, tuple_185325)
    
    # Assigning a type to the variable 'msg' (line 1452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1452, 12), 'msg', result_mod_185328)
    # SSA join for if statement (line 1448)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to AssertionError(...): (line 1453)
    # Processing the call arguments (line 1453)
    # Getting the type of 'msg' (line 1453)
    msg_185330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 29), 'msg', False)
    # Processing the call keyword arguments (line 1453)
    kwargs_185331 = {}
    # Getting the type of 'AssertionError' (line 1453)
    AssertionError_185329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 14), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 1453)
    AssertionError_call_result_185332 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 14), AssertionError_185329, *[msg_185330], **kwargs_185331)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1453, 8), AssertionError_call_result_185332, 'raise parameter', BaseException)
    # SSA join for if statement (line 1447)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'assert_array_almost_equal_nulp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_array_almost_equal_nulp' in the type store
    # Getting the type of 'stypy_return_type' (line 1393)
    stypy_return_type_185333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185333)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_array_almost_equal_nulp'
    return stypy_return_type_185333

# Assigning a type to the variable 'assert_array_almost_equal_nulp' (line 1393)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 0), 'assert_array_almost_equal_nulp', assert_array_almost_equal_nulp)

@norecursion
def assert_array_max_ulp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_185334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 38), 'int')
    # Getting the type of 'None' (line 1455)
    None_185335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 47), 'None')
    defaults = [int_185334, None_185335]
    # Create a new context for function 'assert_array_max_ulp'
    module_type_store = module_type_store.open_function_context('assert_array_max_ulp', 1455, 0, False)
    
    # Passed parameters checking function
    assert_array_max_ulp.stypy_localization = localization
    assert_array_max_ulp.stypy_type_of_self = None
    assert_array_max_ulp.stypy_type_store = module_type_store
    assert_array_max_ulp.stypy_function_name = 'assert_array_max_ulp'
    assert_array_max_ulp.stypy_param_names_list = ['a', 'b', 'maxulp', 'dtype']
    assert_array_max_ulp.stypy_varargs_param_name = None
    assert_array_max_ulp.stypy_kwargs_param_name = None
    assert_array_max_ulp.stypy_call_defaults = defaults
    assert_array_max_ulp.stypy_call_varargs = varargs
    assert_array_max_ulp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_array_max_ulp', ['a', 'b', 'maxulp', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_array_max_ulp', localization, ['a', 'b', 'maxulp', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_array_max_ulp(...)' code ##################

    str_185336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, (-1)), 'str', '\n    Check that all items of arrays differ in at most N Units in the Last Place.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to be compared.\n    maxulp : int, optional\n        The maximum number of units in the last place that elements of `a` and\n        `b` can differ. Default is 1.\n    dtype : dtype, optional\n        Data-type to convert `a` and `b` to if given. Default is None.\n\n    Returns\n    -------\n    ret : ndarray\n        Array containing number of representable floating point numbers between\n        items in `a` and `b`.\n\n    Raises\n    ------\n    AssertionError\n        If one or more elements differ by more than `maxulp`.\n\n    See Also\n    --------\n    assert_array_almost_equal_nulp : Compare two arrays relatively to their\n        spacing.\n\n    Examples\n    --------\n    >>> a = np.linspace(0., 1., 100)\n    >>> res = np.testing.assert_array_max_ulp(a, np.arcsin(np.sin(a)))\n\n    ')
    
    # Assigning a Name to a Name (line 1491):
    
    # Assigning a Name to a Name (line 1491):
    # Getting the type of 'True' (line 1491)
    True_185337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 1491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 4), '__tracebackhide__', True_185337)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1492, 4))
    
    # 'import numpy' statement (line 1492)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_185338 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1492, 4), 'numpy')

    if (type(import_185338) is not StypyTypeError):

        if (import_185338 != 'pyd_module'):
            __import__(import_185338)
            sys_modules_185339 = sys.modules[import_185338]
            import_module(stypy.reporting.localization.Localization(__file__, 1492, 4), 'np', sys_modules_185339.module_type_store, module_type_store)
        else:
            import numpy as np

            import_module(stypy.reporting.localization.Localization(__file__, 1492, 4), 'np', numpy, module_type_store)

    else:
        # Assigning a type to the variable 'numpy' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 4), 'numpy', import_185338)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Assigning a Call to a Name (line 1493):
    
    # Assigning a Call to a Name (line 1493):
    
    # Call to nulp_diff(...): (line 1493)
    # Processing the call arguments (line 1493)
    # Getting the type of 'a' (line 1493)
    a_185341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 20), 'a', False)
    # Getting the type of 'b' (line 1493)
    b_185342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 23), 'b', False)
    # Getting the type of 'dtype' (line 1493)
    dtype_185343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 26), 'dtype', False)
    # Processing the call keyword arguments (line 1493)
    kwargs_185344 = {}
    # Getting the type of 'nulp_diff' (line 1493)
    nulp_diff_185340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 10), 'nulp_diff', False)
    # Calling nulp_diff(args, kwargs) (line 1493)
    nulp_diff_call_result_185345 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 10), nulp_diff_185340, *[a_185341, b_185342, dtype_185343], **kwargs_185344)
    
    # Assigning a type to the variable 'ret' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'ret', nulp_diff_call_result_185345)
    
    
    
    # Call to all(...): (line 1494)
    # Processing the call arguments (line 1494)
    
    # Getting the type of 'ret' (line 1494)
    ret_185348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 18), 'ret', False)
    # Getting the type of 'maxulp' (line 1494)
    maxulp_185349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 25), 'maxulp', False)
    # Applying the binary operator '<=' (line 1494)
    result_le_185350 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 18), '<=', ret_185348, maxulp_185349)
    
    # Processing the call keyword arguments (line 1494)
    kwargs_185351 = {}
    # Getting the type of 'np' (line 1494)
    np_185346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 11), 'np', False)
    # Obtaining the member 'all' of a type (line 1494)
    all_185347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 11), np_185346, 'all')
    # Calling all(args, kwargs) (line 1494)
    all_call_result_185352 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 11), all_185347, *[result_le_185350], **kwargs_185351)
    
    # Applying the 'not' unary operator (line 1494)
    result_not__185353 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 7), 'not', all_call_result_185352)
    
    # Testing the type of an if condition (line 1494)
    if_condition_185354 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1494, 4), result_not__185353)
    # Assigning a type to the variable 'if_condition_185354' (line 1494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 4), 'if_condition_185354', if_condition_185354)
    # SSA begins for if statement (line 1494)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AssertionError(...): (line 1495)
    # Processing the call arguments (line 1495)
    str_185356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1495, 29), 'str', 'Arrays are not almost equal up to %g ULP')
    # Getting the type of 'maxulp' (line 1496)
    maxulp_185357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 29), 'maxulp', False)
    # Applying the binary operator '%' (line 1495)
    result_mod_185358 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 29), '%', str_185356, maxulp_185357)
    
    # Processing the call keyword arguments (line 1495)
    kwargs_185359 = {}
    # Getting the type of 'AssertionError' (line 1495)
    AssertionError_185355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 14), 'AssertionError', False)
    # Calling AssertionError(args, kwargs) (line 1495)
    AssertionError_call_result_185360 = invoke(stypy.reporting.localization.Localization(__file__, 1495, 14), AssertionError_185355, *[result_mod_185358], **kwargs_185359)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1495, 8), AssertionError_call_result_185360, 'raise parameter', BaseException)
    # SSA join for if statement (line 1494)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ret' (line 1497)
    ret_185361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 1497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 4), 'stypy_return_type', ret_185361)
    
    # ################# End of 'assert_array_max_ulp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_array_max_ulp' in the type store
    # Getting the type of 'stypy_return_type' (line 1455)
    stypy_return_type_185362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185362)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_array_max_ulp'
    return stypy_return_type_185362

# Assigning a type to the variable 'assert_array_max_ulp' (line 1455)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 0), 'assert_array_max_ulp', assert_array_max_ulp)

@norecursion
def nulp_diff(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1499)
    None_185363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 26), 'None')
    defaults = [None_185363]
    # Create a new context for function 'nulp_diff'
    module_type_store = module_type_store.open_function_context('nulp_diff', 1499, 0, False)
    
    # Passed parameters checking function
    nulp_diff.stypy_localization = localization
    nulp_diff.stypy_type_of_self = None
    nulp_diff.stypy_type_store = module_type_store
    nulp_diff.stypy_function_name = 'nulp_diff'
    nulp_diff.stypy_param_names_list = ['x', 'y', 'dtype']
    nulp_diff.stypy_varargs_param_name = None
    nulp_diff.stypy_kwargs_param_name = None
    nulp_diff.stypy_call_defaults = defaults
    nulp_diff.stypy_call_varargs = varargs
    nulp_diff.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'nulp_diff', ['x', 'y', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'nulp_diff', localization, ['x', 'y', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'nulp_diff(...)' code ##################

    str_185364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, (-1)), 'str', 'For each item in x and y, return the number of representable floating\n    points between them.\n\n    Parameters\n    ----------\n    x : array_like\n        first input array\n    y : array_like\n        second input array\n    dtype : dtype, optional\n        Data-type to convert `x` and `y` to if given. Default is None.\n\n    Returns\n    -------\n    nulp : array_like\n        number of representable floating point numbers between each item in x\n        and y.\n\n    Examples\n    --------\n    # By definition, epsilon is the smallest number such as 1 + eps != 1, so\n    # there should be exactly one ULP between 1 and 1 + eps\n    >>> nulp_diff(1, 1 + np.finfo(x.dtype).eps)\n    1.0\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1525, 4))
    
    # 'import numpy' statement (line 1525)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_185365 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1525, 4), 'numpy')

    if (type(import_185365) is not StypyTypeError):

        if (import_185365 != 'pyd_module'):
            __import__(import_185365)
            sys_modules_185366 = sys.modules[import_185365]
            import_module(stypy.reporting.localization.Localization(__file__, 1525, 4), 'np', sys_modules_185366.module_type_store, module_type_store)
        else:
            import numpy as np

            import_module(stypy.reporting.localization.Localization(__file__, 1525, 4), 'np', numpy, module_type_store)

    else:
        # Assigning a type to the variable 'numpy' (line 1525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 4), 'numpy', import_185365)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    # Getting the type of 'dtype' (line 1526)
    dtype_185367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 7), 'dtype')
    # Testing the type of an if condition (line 1526)
    if_condition_185368 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1526, 4), dtype_185367)
    # Assigning a type to the variable 'if_condition_185368' (line 1526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 4), 'if_condition_185368', if_condition_185368)
    # SSA begins for if statement (line 1526)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1527):
    
    # Assigning a Call to a Name (line 1527):
    
    # Call to array(...): (line 1527)
    # Processing the call arguments (line 1527)
    # Getting the type of 'x' (line 1527)
    x_185371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 21), 'x', False)
    # Processing the call keyword arguments (line 1527)
    # Getting the type of 'dtype' (line 1527)
    dtype_185372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 30), 'dtype', False)
    keyword_185373 = dtype_185372
    kwargs_185374 = {'dtype': keyword_185373}
    # Getting the type of 'np' (line 1527)
    np_185369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 1527)
    array_185370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 12), np_185369, 'array')
    # Calling array(args, kwargs) (line 1527)
    array_call_result_185375 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 12), array_185370, *[x_185371], **kwargs_185374)
    
    # Assigning a type to the variable 'x' (line 1527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 8), 'x', array_call_result_185375)
    
    # Assigning a Call to a Name (line 1528):
    
    # Assigning a Call to a Name (line 1528):
    
    # Call to array(...): (line 1528)
    # Processing the call arguments (line 1528)
    # Getting the type of 'y' (line 1528)
    y_185378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 21), 'y', False)
    # Processing the call keyword arguments (line 1528)
    # Getting the type of 'dtype' (line 1528)
    dtype_185379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 30), 'dtype', False)
    keyword_185380 = dtype_185379
    kwargs_185381 = {'dtype': keyword_185380}
    # Getting the type of 'np' (line 1528)
    np_185376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 1528)
    array_185377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 12), np_185376, 'array')
    # Calling array(args, kwargs) (line 1528)
    array_call_result_185382 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 12), array_185377, *[y_185378], **kwargs_185381)
    
    # Assigning a type to the variable 'y' (line 1528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'y', array_call_result_185382)
    # SSA branch for the else part of an if statement (line 1526)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1530):
    
    # Assigning a Call to a Name (line 1530):
    
    # Call to array(...): (line 1530)
    # Processing the call arguments (line 1530)
    # Getting the type of 'x' (line 1530)
    x_185385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 21), 'x', False)
    # Processing the call keyword arguments (line 1530)
    kwargs_185386 = {}
    # Getting the type of 'np' (line 1530)
    np_185383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 1530)
    array_185384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 12), np_185383, 'array')
    # Calling array(args, kwargs) (line 1530)
    array_call_result_185387 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 12), array_185384, *[x_185385], **kwargs_185386)
    
    # Assigning a type to the variable 'x' (line 1530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 8), 'x', array_call_result_185387)
    
    # Assigning a Call to a Name (line 1531):
    
    # Assigning a Call to a Name (line 1531):
    
    # Call to array(...): (line 1531)
    # Processing the call arguments (line 1531)
    # Getting the type of 'y' (line 1531)
    y_185390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 21), 'y', False)
    # Processing the call keyword arguments (line 1531)
    kwargs_185391 = {}
    # Getting the type of 'np' (line 1531)
    np_185388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 1531)
    array_185389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1531, 12), np_185388, 'array')
    # Calling array(args, kwargs) (line 1531)
    array_call_result_185392 = invoke(stypy.reporting.localization.Localization(__file__, 1531, 12), array_185389, *[y_185390], **kwargs_185391)
    
    # Assigning a type to the variable 'y' (line 1531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 8), 'y', array_call_result_185392)
    # SSA join for if statement (line 1526)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1533):
    
    # Assigning a Call to a Name (line 1533):
    
    # Call to common_type(...): (line 1533)
    # Processing the call arguments (line 1533)
    # Getting the type of 'x' (line 1533)
    x_185395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 23), 'x', False)
    # Getting the type of 'y' (line 1533)
    y_185396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 26), 'y', False)
    # Processing the call keyword arguments (line 1533)
    kwargs_185397 = {}
    # Getting the type of 'np' (line 1533)
    np_185393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'np', False)
    # Obtaining the member 'common_type' of a type (line 1533)
    common_type_185394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 8), np_185393, 'common_type')
    # Calling common_type(args, kwargs) (line 1533)
    common_type_call_result_185398 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 8), common_type_185394, *[x_185395, y_185396], **kwargs_185397)
    
    # Assigning a type to the variable 't' (line 1533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 4), 't', common_type_call_result_185398)
    
    
    # Evaluating a boolean operation
    
    # Call to iscomplexobj(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'x' (line 1534)
    x_185401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 23), 'x', False)
    # Processing the call keyword arguments (line 1534)
    kwargs_185402 = {}
    # Getting the type of 'np' (line 1534)
    np_185399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 7), 'np', False)
    # Obtaining the member 'iscomplexobj' of a type (line 1534)
    iscomplexobj_185400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 7), np_185399, 'iscomplexobj')
    # Calling iscomplexobj(args, kwargs) (line 1534)
    iscomplexobj_call_result_185403 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 7), iscomplexobj_185400, *[x_185401], **kwargs_185402)
    
    
    # Call to iscomplexobj(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'y' (line 1534)
    y_185406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 45), 'y', False)
    # Processing the call keyword arguments (line 1534)
    kwargs_185407 = {}
    # Getting the type of 'np' (line 1534)
    np_185404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 29), 'np', False)
    # Obtaining the member 'iscomplexobj' of a type (line 1534)
    iscomplexobj_185405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 29), np_185404, 'iscomplexobj')
    # Calling iscomplexobj(args, kwargs) (line 1534)
    iscomplexobj_call_result_185408 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 29), iscomplexobj_185405, *[y_185406], **kwargs_185407)
    
    # Applying the binary operator 'or' (line 1534)
    result_or_keyword_185409 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 7), 'or', iscomplexobj_call_result_185403, iscomplexobj_call_result_185408)
    
    # Testing the type of an if condition (line 1534)
    if_condition_185410 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1534, 4), result_or_keyword_185409)
    # Assigning a type to the variable 'if_condition_185410' (line 1534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 4), 'if_condition_185410', if_condition_185410)
    # SSA begins for if statement (line 1534)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to NotImplementedError(...): (line 1535)
    # Processing the call arguments (line 1535)
    str_185412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 34), 'str', '_nulp not implemented for complex array')
    # Processing the call keyword arguments (line 1535)
    kwargs_185413 = {}
    # Getting the type of 'NotImplementedError' (line 1535)
    NotImplementedError_185411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 14), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 1535)
    NotImplementedError_call_result_185414 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 14), NotImplementedError_185411, *[str_185412], **kwargs_185413)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1535, 8), NotImplementedError_call_result_185414, 'raise parameter', BaseException)
    # SSA join for if statement (line 1534)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1537):
    
    # Assigning a Call to a Name (line 1537):
    
    # Call to array(...): (line 1537)
    # Processing the call arguments (line 1537)
    # Getting the type of 'x' (line 1537)
    x_185417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 17), 'x', False)
    # Processing the call keyword arguments (line 1537)
    # Getting the type of 't' (line 1537)
    t_185418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 26), 't', False)
    keyword_185419 = t_185418
    kwargs_185420 = {'dtype': keyword_185419}
    # Getting the type of 'np' (line 1537)
    np_185415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 1537)
    array_185416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 8), np_185415, 'array')
    # Calling array(args, kwargs) (line 1537)
    array_call_result_185421 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 8), array_185416, *[x_185417], **kwargs_185420)
    
    # Assigning a type to the variable 'x' (line 1537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 4), 'x', array_call_result_185421)
    
    # Assigning a Call to a Name (line 1538):
    
    # Assigning a Call to a Name (line 1538):
    
    # Call to array(...): (line 1538)
    # Processing the call arguments (line 1538)
    # Getting the type of 'y' (line 1538)
    y_185424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 17), 'y', False)
    # Processing the call keyword arguments (line 1538)
    # Getting the type of 't' (line 1538)
    t_185425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 26), 't', False)
    keyword_185426 = t_185425
    kwargs_185427 = {'dtype': keyword_185426}
    # Getting the type of 'np' (line 1538)
    np_185422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 1538)
    array_185423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 8), np_185422, 'array')
    # Calling array(args, kwargs) (line 1538)
    array_call_result_185428 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 8), array_185423, *[y_185424], **kwargs_185427)
    
    # Assigning a type to the variable 'y' (line 1538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 4), 'y', array_call_result_185428)
    
    
    
    # Getting the type of 'x' (line 1540)
    x_185429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 11), 'x')
    # Obtaining the member 'shape' of a type (line 1540)
    shape_185430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 11), x_185429, 'shape')
    # Getting the type of 'y' (line 1540)
    y_185431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 22), 'y')
    # Obtaining the member 'shape' of a type (line 1540)
    shape_185432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 22), y_185431, 'shape')
    # Applying the binary operator '==' (line 1540)
    result_eq_185433 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 11), '==', shape_185430, shape_185432)
    
    # Applying the 'not' unary operator (line 1540)
    result_not__185434 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 7), 'not', result_eq_185433)
    
    # Testing the type of an if condition (line 1540)
    if_condition_185435 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1540, 4), result_not__185434)
    # Assigning a type to the variable 'if_condition_185435' (line 1540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 4), 'if_condition_185435', if_condition_185435)
    # SSA begins for if statement (line 1540)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1541)
    # Processing the call arguments (line 1541)
    str_185437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, 25), 'str', 'x and y do not have the same shape: %s - %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1542)
    tuple_185438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1542)
    # Adding element type (line 1542)
    # Getting the type of 'x' (line 1542)
    x_185439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 26), 'x', False)
    # Obtaining the member 'shape' of a type (line 1542)
    shape_185440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 26), x_185439, 'shape')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 26), tuple_185438, shape_185440)
    # Adding element type (line 1542)
    # Getting the type of 'y' (line 1542)
    y_185441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 35), 'y', False)
    # Obtaining the member 'shape' of a type (line 1542)
    shape_185442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 35), y_185441, 'shape')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 26), tuple_185438, shape_185442)
    
    # Applying the binary operator '%' (line 1541)
    result_mod_185443 = python_operator(stypy.reporting.localization.Localization(__file__, 1541, 25), '%', str_185437, tuple_185438)
    
    # Processing the call keyword arguments (line 1541)
    kwargs_185444 = {}
    # Getting the type of 'ValueError' (line 1541)
    ValueError_185436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1541)
    ValueError_call_result_185445 = invoke(stypy.reporting.localization.Localization(__file__, 1541, 14), ValueError_185436, *[result_mod_185443], **kwargs_185444)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1541, 8), ValueError_call_result_185445, 'raise parameter', BaseException)
    # SSA join for if statement (line 1540)
    module_type_store = module_type_store.join_ssa_context()
    

    @norecursion
    def _diff(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_diff'
        module_type_store = module_type_store.open_function_context('_diff', 1544, 4, False)
        
        # Passed parameters checking function
        _diff.stypy_localization = localization
        _diff.stypy_type_of_self = None
        _diff.stypy_type_store = module_type_store
        _diff.stypy_function_name = '_diff'
        _diff.stypy_param_names_list = ['rx', 'ry', 'vdt']
        _diff.stypy_varargs_param_name = None
        _diff.stypy_kwargs_param_name = None
        _diff.stypy_call_defaults = defaults
        _diff.stypy_call_varargs = varargs
        _diff.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_diff', ['rx', 'ry', 'vdt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_diff', localization, ['rx', 'ry', 'vdt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_diff(...)' code ##################

        
        # Assigning a Call to a Name (line 1545):
        
        # Assigning a Call to a Name (line 1545):
        
        # Call to array(...): (line 1545)
        # Processing the call arguments (line 1545)
        # Getting the type of 'rx' (line 1545)
        rx_185448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 24), 'rx', False)
        # Getting the type of 'ry' (line 1545)
        ry_185449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 27), 'ry', False)
        # Applying the binary operator '-' (line 1545)
        result_sub_185450 = python_operator(stypy.reporting.localization.Localization(__file__, 1545, 24), '-', rx_185448, ry_185449)
        
        # Processing the call keyword arguments (line 1545)
        # Getting the type of 'vdt' (line 1545)
        vdt_185451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 37), 'vdt', False)
        keyword_185452 = vdt_185451
        kwargs_185453 = {'dtype': keyword_185452}
        # Getting the type of 'np' (line 1545)
        np_185446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 15), 'np', False)
        # Obtaining the member 'array' of a type (line 1545)
        array_185447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 15), np_185446, 'array')
        # Calling array(args, kwargs) (line 1545)
        array_call_result_185454 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 15), array_185447, *[result_sub_185450], **kwargs_185453)
        
        # Assigning a type to the variable 'diff' (line 1545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 8), 'diff', array_call_result_185454)
        
        # Call to abs(...): (line 1546)
        # Processing the call arguments (line 1546)
        # Getting the type of 'diff' (line 1546)
        diff_185457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 22), 'diff', False)
        # Processing the call keyword arguments (line 1546)
        kwargs_185458 = {}
        # Getting the type of 'np' (line 1546)
        np_185455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 15), 'np', False)
        # Obtaining the member 'abs' of a type (line 1546)
        abs_185456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 15), np_185455, 'abs')
        # Calling abs(args, kwargs) (line 1546)
        abs_call_result_185459 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 15), abs_185456, *[diff_185457], **kwargs_185458)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 8), 'stypy_return_type', abs_call_result_185459)
        
        # ################# End of '_diff(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_diff' in the type store
        # Getting the type of 'stypy_return_type' (line 1544)
        stypy_return_type_185460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_185460)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_diff'
        return stypy_return_type_185460

    # Assigning a type to the variable '_diff' (line 1544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1544, 4), '_diff', _diff)
    
    # Assigning a Call to a Name (line 1548):
    
    # Assigning a Call to a Name (line 1548):
    
    # Call to integer_repr(...): (line 1548)
    # Processing the call arguments (line 1548)
    # Getting the type of 'x' (line 1548)
    x_185462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 22), 'x', False)
    # Processing the call keyword arguments (line 1548)
    kwargs_185463 = {}
    # Getting the type of 'integer_repr' (line 1548)
    integer_repr_185461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 9), 'integer_repr', False)
    # Calling integer_repr(args, kwargs) (line 1548)
    integer_repr_call_result_185464 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 9), integer_repr_185461, *[x_185462], **kwargs_185463)
    
    # Assigning a type to the variable 'rx' (line 1548)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 4), 'rx', integer_repr_call_result_185464)
    
    # Assigning a Call to a Name (line 1549):
    
    # Assigning a Call to a Name (line 1549):
    
    # Call to integer_repr(...): (line 1549)
    # Processing the call arguments (line 1549)
    # Getting the type of 'y' (line 1549)
    y_185466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 22), 'y', False)
    # Processing the call keyword arguments (line 1549)
    kwargs_185467 = {}
    # Getting the type of 'integer_repr' (line 1549)
    integer_repr_185465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 9), 'integer_repr', False)
    # Calling integer_repr(args, kwargs) (line 1549)
    integer_repr_call_result_185468 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 9), integer_repr_185465, *[y_185466], **kwargs_185467)
    
    # Assigning a type to the variable 'ry' (line 1549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 4), 'ry', integer_repr_call_result_185468)
    
    # Call to _diff(...): (line 1550)
    # Processing the call arguments (line 1550)
    # Getting the type of 'rx' (line 1550)
    rx_185470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 17), 'rx', False)
    # Getting the type of 'ry' (line 1550)
    ry_185471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 21), 'ry', False)
    # Getting the type of 't' (line 1550)
    t_185472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 25), 't', False)
    # Processing the call keyword arguments (line 1550)
    kwargs_185473 = {}
    # Getting the type of '_diff' (line 1550)
    _diff_185469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 11), '_diff', False)
    # Calling _diff(args, kwargs) (line 1550)
    _diff_call_result_185474 = invoke(stypy.reporting.localization.Localization(__file__, 1550, 11), _diff_185469, *[rx_185470, ry_185471, t_185472], **kwargs_185473)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 4), 'stypy_return_type', _diff_call_result_185474)
    
    # ################# End of 'nulp_diff(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'nulp_diff' in the type store
    # Getting the type of 'stypy_return_type' (line 1499)
    stypy_return_type_185475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185475)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'nulp_diff'
    return stypy_return_type_185475

# Assigning a type to the variable 'nulp_diff' (line 1499)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 0), 'nulp_diff', nulp_diff)

@norecursion
def _integer_repr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_integer_repr'
    module_type_store = module_type_store.open_function_context('_integer_repr', 1552, 0, False)
    
    # Passed parameters checking function
    _integer_repr.stypy_localization = localization
    _integer_repr.stypy_type_of_self = None
    _integer_repr.stypy_type_store = module_type_store
    _integer_repr.stypy_function_name = '_integer_repr'
    _integer_repr.stypy_param_names_list = ['x', 'vdt', 'comp']
    _integer_repr.stypy_varargs_param_name = None
    _integer_repr.stypy_kwargs_param_name = None
    _integer_repr.stypy_call_defaults = defaults
    _integer_repr.stypy_call_varargs = varargs
    _integer_repr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_integer_repr', ['x', 'vdt', 'comp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_integer_repr', localization, ['x', 'vdt', 'comp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_integer_repr(...)' code ##################

    
    # Assigning a Call to a Name (line 1557):
    
    # Assigning a Call to a Name (line 1557):
    
    # Call to view(...): (line 1557)
    # Processing the call arguments (line 1557)
    # Getting the type of 'vdt' (line 1557)
    vdt_185478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 16), 'vdt', False)
    # Processing the call keyword arguments (line 1557)
    kwargs_185479 = {}
    # Getting the type of 'x' (line 1557)
    x_185476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 9), 'x', False)
    # Obtaining the member 'view' of a type (line 1557)
    view_185477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 9), x_185476, 'view')
    # Calling view(args, kwargs) (line 1557)
    view_call_result_185480 = invoke(stypy.reporting.localization.Localization(__file__, 1557, 9), view_185477, *[vdt_185478], **kwargs_185479)
    
    # Assigning a type to the variable 'rx' (line 1557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 4), 'rx', view_call_result_185480)
    
    
    
    # Getting the type of 'rx' (line 1558)
    rx_185481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 12), 'rx')
    # Obtaining the member 'size' of a type (line 1558)
    size_185482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1558, 12), rx_185481, 'size')
    int_185483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, 23), 'int')
    # Applying the binary operator '==' (line 1558)
    result_eq_185484 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 12), '==', size_185482, int_185483)
    
    # Applying the 'not' unary operator (line 1558)
    result_not__185485 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 7), 'not', result_eq_185484)
    
    # Testing the type of an if condition (line 1558)
    if_condition_185486 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1558, 4), result_not__185485)
    # Assigning a type to the variable 'if_condition_185486' (line 1558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 4), 'if_condition_185486', if_condition_185486)
    # SSA begins for if statement (line 1558)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Subscript (line 1559):
    
    # Assigning a BinOp to a Subscript (line 1559):
    # Getting the type of 'comp' (line 1559)
    comp_185487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 21), 'comp')
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'rx' (line 1559)
    rx_185488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 31), 'rx')
    int_185489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1559, 36), 'int')
    # Applying the binary operator '<' (line 1559)
    result_lt_185490 = python_operator(stypy.reporting.localization.Localization(__file__, 1559, 31), '<', rx_185488, int_185489)
    
    # Getting the type of 'rx' (line 1559)
    rx_185491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 28), 'rx')
    # Obtaining the member '__getitem__' of a type (line 1559)
    getitem___185492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1559, 28), rx_185491, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1559)
    subscript_call_result_185493 = invoke(stypy.reporting.localization.Localization(__file__, 1559, 28), getitem___185492, result_lt_185490)
    
    # Applying the binary operator '-' (line 1559)
    result_sub_185494 = python_operator(stypy.reporting.localization.Localization(__file__, 1559, 21), '-', comp_185487, subscript_call_result_185493)
    
    # Getting the type of 'rx' (line 1559)
    rx_185495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 8), 'rx')
    
    # Getting the type of 'rx' (line 1559)
    rx_185496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 11), 'rx')
    int_185497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1559, 16), 'int')
    # Applying the binary operator '<' (line 1559)
    result_lt_185498 = python_operator(stypy.reporting.localization.Localization(__file__, 1559, 11), '<', rx_185496, int_185497)
    
    # Storing an element on a container (line 1559)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1559, 8), rx_185495, (result_lt_185498, result_sub_185494))
    # SSA branch for the else part of an if statement (line 1558)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'rx' (line 1561)
    rx_185499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 11), 'rx')
    int_185500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1561, 16), 'int')
    # Applying the binary operator '<' (line 1561)
    result_lt_185501 = python_operator(stypy.reporting.localization.Localization(__file__, 1561, 11), '<', rx_185499, int_185500)
    
    # Testing the type of an if condition (line 1561)
    if_condition_185502 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1561, 8), result_lt_185501)
    # Assigning a type to the variable 'if_condition_185502' (line 1561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1561, 8), 'if_condition_185502', if_condition_185502)
    # SSA begins for if statement (line 1561)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1562):
    
    # Assigning a BinOp to a Name (line 1562):
    # Getting the type of 'comp' (line 1562)
    comp_185503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 17), 'comp')
    # Getting the type of 'rx' (line 1562)
    rx_185504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 24), 'rx')
    # Applying the binary operator '-' (line 1562)
    result_sub_185505 = python_operator(stypy.reporting.localization.Localization(__file__, 1562, 17), '-', comp_185503, rx_185504)
    
    # Assigning a type to the variable 'rx' (line 1562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 12), 'rx', result_sub_185505)
    # SSA join for if statement (line 1561)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1558)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'rx' (line 1564)
    rx_185506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 11), 'rx')
    # Assigning a type to the variable 'stypy_return_type' (line 1564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'stypy_return_type', rx_185506)
    
    # ################# End of '_integer_repr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_integer_repr' in the type store
    # Getting the type of 'stypy_return_type' (line 1552)
    stypy_return_type_185507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185507)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_integer_repr'
    return stypy_return_type_185507

# Assigning a type to the variable '_integer_repr' (line 1552)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 0), '_integer_repr', _integer_repr)

@norecursion
def integer_repr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'integer_repr'
    module_type_store = module_type_store.open_function_context('integer_repr', 1566, 0, False)
    
    # Passed parameters checking function
    integer_repr.stypy_localization = localization
    integer_repr.stypy_type_of_self = None
    integer_repr.stypy_type_store = module_type_store
    integer_repr.stypy_function_name = 'integer_repr'
    integer_repr.stypy_param_names_list = ['x']
    integer_repr.stypy_varargs_param_name = None
    integer_repr.stypy_kwargs_param_name = None
    integer_repr.stypy_call_defaults = defaults
    integer_repr.stypy_call_varargs = varargs
    integer_repr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'integer_repr', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'integer_repr', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'integer_repr(...)' code ##################

    str_185508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1568, (-1)), 'str', 'Return the signed-magnitude interpretation of the binary representation of\n    x.')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1569, 4))
    
    # 'import numpy' statement (line 1569)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/testing/')
    import_185509 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1569, 4), 'numpy')

    if (type(import_185509) is not StypyTypeError):

        if (import_185509 != 'pyd_module'):
            __import__(import_185509)
            sys_modules_185510 = sys.modules[import_185509]
            import_module(stypy.reporting.localization.Localization(__file__, 1569, 4), 'np', sys_modules_185510.module_type_store, module_type_store)
        else:
            import numpy as np

            import_module(stypy.reporting.localization.Localization(__file__, 1569, 4), 'np', numpy, module_type_store)

    else:
        # Assigning a type to the variable 'numpy' (line 1569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 4), 'numpy', import_185509)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/testing/')
    
    
    
    # Getting the type of 'x' (line 1570)
    x_185511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 7), 'x')
    # Obtaining the member 'dtype' of a type (line 1570)
    dtype_185512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1570, 7), x_185511, 'dtype')
    # Getting the type of 'np' (line 1570)
    np_185513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 18), 'np')
    # Obtaining the member 'float32' of a type (line 1570)
    float32_185514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1570, 18), np_185513, 'float32')
    # Applying the binary operator '==' (line 1570)
    result_eq_185515 = python_operator(stypy.reporting.localization.Localization(__file__, 1570, 7), '==', dtype_185512, float32_185514)
    
    # Testing the type of an if condition (line 1570)
    if_condition_185516 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1570, 4), result_eq_185515)
    # Assigning a type to the variable 'if_condition_185516' (line 1570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1570, 4), 'if_condition_185516', if_condition_185516)
    # SSA begins for if statement (line 1570)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _integer_repr(...): (line 1571)
    # Processing the call arguments (line 1571)
    # Getting the type of 'x' (line 1571)
    x_185518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 29), 'x', False)
    # Getting the type of 'np' (line 1571)
    np_185519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 32), 'np', False)
    # Obtaining the member 'int32' of a type (line 1571)
    int32_185520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 32), np_185519, 'int32')
    
    # Call to int32(...): (line 1571)
    # Processing the call arguments (line 1571)
    
    int_185523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 52), 'int')
    int_185524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 55), 'int')
    # Applying the binary operator '**' (line 1571)
    result_pow_185525 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 52), '**', int_185523, int_185524)
    
    # Applying the 'usub' unary operator (line 1571)
    result___neg___185526 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 51), 'usub', result_pow_185525)
    
    # Processing the call keyword arguments (line 1571)
    kwargs_185527 = {}
    # Getting the type of 'np' (line 1571)
    np_185521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 42), 'np', False)
    # Obtaining the member 'int32' of a type (line 1571)
    int32_185522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 42), np_185521, 'int32')
    # Calling int32(args, kwargs) (line 1571)
    int32_call_result_185528 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 42), int32_185522, *[result___neg___185526], **kwargs_185527)
    
    # Processing the call keyword arguments (line 1571)
    kwargs_185529 = {}
    # Getting the type of '_integer_repr' (line 1571)
    _integer_repr_185517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 15), '_integer_repr', False)
    # Calling _integer_repr(args, kwargs) (line 1571)
    _integer_repr_call_result_185530 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 15), _integer_repr_185517, *[x_185518, int32_185520, int32_call_result_185528], **kwargs_185529)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 8), 'stypy_return_type', _integer_repr_call_result_185530)
    # SSA branch for the else part of an if statement (line 1570)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'x' (line 1572)
    x_185531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 9), 'x')
    # Obtaining the member 'dtype' of a type (line 1572)
    dtype_185532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 9), x_185531, 'dtype')
    # Getting the type of 'np' (line 1572)
    np_185533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 20), 'np')
    # Obtaining the member 'float64' of a type (line 1572)
    float64_185534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 20), np_185533, 'float64')
    # Applying the binary operator '==' (line 1572)
    result_eq_185535 = python_operator(stypy.reporting.localization.Localization(__file__, 1572, 9), '==', dtype_185532, float64_185534)
    
    # Testing the type of an if condition (line 1572)
    if_condition_185536 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1572, 9), result_eq_185535)
    # Assigning a type to the variable 'if_condition_185536' (line 1572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 9), 'if_condition_185536', if_condition_185536)
    # SSA begins for if statement (line 1572)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _integer_repr(...): (line 1573)
    # Processing the call arguments (line 1573)
    # Getting the type of 'x' (line 1573)
    x_185538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 29), 'x', False)
    # Getting the type of 'np' (line 1573)
    np_185539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 32), 'np', False)
    # Obtaining the member 'int64' of a type (line 1573)
    int64_185540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 32), np_185539, 'int64')
    
    # Call to int64(...): (line 1573)
    # Processing the call arguments (line 1573)
    
    int_185543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 52), 'int')
    int_185544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 55), 'int')
    # Applying the binary operator '**' (line 1573)
    result_pow_185545 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 52), '**', int_185543, int_185544)
    
    # Applying the 'usub' unary operator (line 1573)
    result___neg___185546 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 51), 'usub', result_pow_185545)
    
    # Processing the call keyword arguments (line 1573)
    kwargs_185547 = {}
    # Getting the type of 'np' (line 1573)
    np_185541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 42), 'np', False)
    # Obtaining the member 'int64' of a type (line 1573)
    int64_185542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 42), np_185541, 'int64')
    # Calling int64(args, kwargs) (line 1573)
    int64_call_result_185548 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 42), int64_185542, *[result___neg___185546], **kwargs_185547)
    
    # Processing the call keyword arguments (line 1573)
    kwargs_185549 = {}
    # Getting the type of '_integer_repr' (line 1573)
    _integer_repr_185537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 15), '_integer_repr', False)
    # Calling _integer_repr(args, kwargs) (line 1573)
    _integer_repr_call_result_185550 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 15), _integer_repr_185537, *[x_185538, int64_185540, int64_call_result_185548], **kwargs_185549)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 8), 'stypy_return_type', _integer_repr_call_result_185550)
    # SSA branch for the else part of an if statement (line 1572)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1575)
    # Processing the call arguments (line 1575)
    str_185552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 25), 'str', 'Unsupported dtype %s')
    # Getting the type of 'x' (line 1575)
    x_185553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 50), 'x', False)
    # Obtaining the member 'dtype' of a type (line 1575)
    dtype_185554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 50), x_185553, 'dtype')
    # Applying the binary operator '%' (line 1575)
    result_mod_185555 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 25), '%', str_185552, dtype_185554)
    
    # Processing the call keyword arguments (line 1575)
    kwargs_185556 = {}
    # Getting the type of 'ValueError' (line 1575)
    ValueError_185551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1575)
    ValueError_call_result_185557 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 14), ValueError_185551, *[result_mod_185555], **kwargs_185556)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1575, 8), ValueError_call_result_185557, 'raise parameter', BaseException)
    # SSA join for if statement (line 1572)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1570)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'integer_repr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'integer_repr' in the type store
    # Getting the type of 'stypy_return_type' (line 1566)
    stypy_return_type_185558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185558)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'integer_repr'
    return stypy_return_type_185558

# Assigning a type to the variable 'integer_repr' (line 1566)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 0), 'integer_repr', integer_repr)
# Declaration of the 'WarningMessage' class

class WarningMessage(object, ):
    str_185559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1591, (-1)), 'str', '\n    Holds the result of a single showwarning() call.\n\n    Deprecated in 1.8.0\n\n    Notes\n    -----\n    `WarningMessage` is copied from the Python 2.6 warnings module,\n    so it can be used in NumPy with older Python versions.\n\n    ')
    
    # Assigning a Tuple to a Name (line 1593):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1596)
        None_185560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 65), 'None')
        # Getting the type of 'None' (line 1597)
        None_185561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 25), 'None')
        defaults = [None_185560, None_185561]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1596, 4, False)
        # Assigning a type to the variable 'self' (line 1597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1597, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'WarningMessage.__init__', ['message', 'category', 'filename', 'lineno', 'file', 'line'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['message', 'category', 'filename', 'lineno', 'file', 'line'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Name (line 1598):
        
        # Assigning a Call to a Name (line 1598):
        
        # Call to locals(...): (line 1598)
        # Processing the call keyword arguments (line 1598)
        kwargs_185563 = {}
        # Getting the type of 'locals' (line 1598)
        locals_185562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 23), 'locals', False)
        # Calling locals(args, kwargs) (line 1598)
        locals_call_result_185564 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 23), locals_185562, *[], **kwargs_185563)
        
        # Assigning a type to the variable 'local_values' (line 1598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 8), 'local_values', locals_call_result_185564)
        
        # Getting the type of 'self' (line 1599)
        self_185565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 20), 'self')
        # Obtaining the member '_WARNING_DETAILS' of a type (line 1599)
        _WARNING_DETAILS_185566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 20), self_185565, '_WARNING_DETAILS')
        # Testing the type of a for loop iterable (line 1599)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1599, 8), _WARNING_DETAILS_185566)
        # Getting the type of the for loop variable (line 1599)
        for_loop_var_185567 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1599, 8), _WARNING_DETAILS_185566)
        # Assigning a type to the variable 'attr' (line 1599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 8), 'attr', for_loop_var_185567)
        # SSA begins for a for statement (line 1599)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to setattr(...): (line 1600)
        # Processing the call arguments (line 1600)
        # Getting the type of 'self' (line 1600)
        self_185569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 20), 'self', False)
        # Getting the type of 'attr' (line 1600)
        attr_185570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 26), 'attr', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'attr' (line 1600)
        attr_185571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 45), 'attr', False)
        # Getting the type of 'local_values' (line 1600)
        local_values_185572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 32), 'local_values', False)
        # Obtaining the member '__getitem__' of a type (line 1600)
        getitem___185573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1600, 32), local_values_185572, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1600)
        subscript_call_result_185574 = invoke(stypy.reporting.localization.Localization(__file__, 1600, 32), getitem___185573, attr_185571)
        
        # Processing the call keyword arguments (line 1600)
        kwargs_185575 = {}
        # Getting the type of 'setattr' (line 1600)
        setattr_185568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 1600)
        setattr_call_result_185576 = invoke(stypy.reporting.localization.Localization(__file__, 1600, 12), setattr_185568, *[self_185569, attr_185570, subscript_call_result_185574], **kwargs_185575)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'category' (line 1601)
        category_185577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 11), 'category')
        # Testing the type of an if condition (line 1601)
        if_condition_185578 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1601, 8), category_185577)
        # Assigning a type to the variable 'if_condition_185578' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 8), 'if_condition_185578', if_condition_185578)
        # SSA begins for if statement (line 1601)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 1602):
        
        # Assigning a Attribute to a Attribute (line 1602):
        # Getting the type of 'category' (line 1602)
        category_185579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 34), 'category')
        # Obtaining the member '__name__' of a type (line 1602)
        name___185580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1602, 34), category_185579, '__name__')
        # Getting the type of 'self' (line 1602)
        self_185581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 12), 'self')
        # Setting the type of the member '_category_name' of a type (line 1602)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1602, 12), self_185581, '_category_name', name___185580)
        # SSA branch for the else part of an if statement (line 1601)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 1604):
        
        # Assigning a Name to a Attribute (line 1604):
        # Getting the type of 'None' (line 1604)
        None_185582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 34), 'None')
        # Getting the type of 'self' (line 1604)
        self_185583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 12), 'self')
        # Setting the type of the member '_category_name' of a type (line 1604)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1604, 12), self_185583, '_category_name', None_185582)
        # SSA join for if statement (line 1601)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1606, 4, False)
        # Assigning a type to the variable 'self' (line 1607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1607, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_function_name', 'WarningMessage.__str__')
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        WarningMessage.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'WarningMessage.__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        str_185584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1607, 16), 'str', '{message : %r, category : %r, filename : %r, lineno : %s, line : %r}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1608)
        tuple_185585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1608, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1608)
        # Adding element type (line 1608)
        # Getting the type of 'self' (line 1608)
        self_185586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 36), 'self')
        # Obtaining the member 'message' of a type (line 1608)
        message_185587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1608, 36), self_185586, 'message')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1608, 36), tuple_185585, message_185587)
        # Adding element type (line 1608)
        # Getting the type of 'self' (line 1608)
        self_185588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 50), 'self')
        # Obtaining the member '_category_name' of a type (line 1608)
        _category_name_185589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1608, 50), self_185588, '_category_name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1608, 36), tuple_185585, _category_name_185589)
        # Adding element type (line 1608)
        # Getting the type of 'self' (line 1609)
        self_185590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 36), 'self')
        # Obtaining the member 'filename' of a type (line 1609)
        filename_185591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1609, 36), self_185590, 'filename')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1608, 36), tuple_185585, filename_185591)
        # Adding element type (line 1608)
        # Getting the type of 'self' (line 1609)
        self_185592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 51), 'self')
        # Obtaining the member 'lineno' of a type (line 1609)
        lineno_185593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1609, 51), self_185592, 'lineno')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1608, 36), tuple_185585, lineno_185593)
        # Adding element type (line 1608)
        # Getting the type of 'self' (line 1609)
        self_185594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 64), 'self')
        # Obtaining the member 'line' of a type (line 1609)
        line_185595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1609, 64), self_185594, 'line')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1608, 36), tuple_185585, line_185595)
        
        # Applying the binary operator '%' (line 1607)
        result_mod_185596 = python_operator(stypy.reporting.localization.Localization(__file__, 1607, 16), '%', str_185584, tuple_185585)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1607, 8), 'stypy_return_type', result_mod_185596)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1606)
        stypy_return_type_185597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_185597)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_185597


# Assigning a type to the variable 'WarningMessage' (line 1579)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1579, 0), 'WarningMessage', WarningMessage)

# Assigning a Tuple to a Name (line 1593):

# Obtaining an instance of the builtin type 'tuple' (line 1593)
tuple_185598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 24), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1593)
# Adding element type (line 1593)
str_185599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 24), 'str', 'message')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1593, 24), tuple_185598, str_185599)
# Adding element type (line 1593)
str_185600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 35), 'str', 'category')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1593, 24), tuple_185598, str_185600)
# Adding element type (line 1593)
str_185601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 47), 'str', 'filename')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1593, 24), tuple_185598, str_185601)
# Adding element type (line 1593)
str_185602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 59), 'str', 'lineno')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1593, 24), tuple_185598, str_185602)
# Adding element type (line 1593)
str_185603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 69), 'str', 'file')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1593, 24), tuple_185598, str_185603)
# Adding element type (line 1593)
str_185604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1594, 24), 'str', 'line')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1593, 24), tuple_185598, str_185604)

# Getting the type of 'WarningMessage'
WarningMessage_185605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'WarningMessage')
# Setting the type of the member '_WARNING_DETAILS' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), WarningMessage_185605, '_WARNING_DETAILS', tuple_185598)
# Declaration of the 'WarningManager' class

class WarningManager(object, ):
    str_185606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, (-1)), 'str', "\n    A context manager that copies and restores the warnings filter upon\n    exiting the context.\n\n    The 'record' argument specifies whether warnings should be captured by a\n    custom implementation of ``warnings.showwarning()`` and be appended to a\n    list returned by the context manager. Otherwise None is returned by the\n    context manager. The objects appended to the list are arguments whose\n    attributes mirror the arguments to ``showwarning()``.\n\n    The 'module' argument is to specify an alternative module to the module\n    named 'warnings' and imported under that name. This argument is only useful\n    when testing the warnings module itself.\n\n    Deprecated in 1.8.0\n\n    Notes\n    -----\n    `WarningManager` is a copy of the ``catch_warnings`` context manager\n    from the Python 2.6 warnings module, with slight modifications.\n    It is copied so it can be used in NumPy with older Python versions.\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1636)
        False_185607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 30), 'False')
        # Getting the type of 'None' (line 1636)
        None_185608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 44), 'None')
        defaults = [False_185607, None_185608]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1636, 4, False)
        # Assigning a type to the variable 'self' (line 1637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'WarningManager.__init__', ['record', 'module'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['record', 'module'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1637):
        
        # Assigning a Name to a Attribute (line 1637):
        # Getting the type of 'record' (line 1637)
        record_185609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 23), 'record')
        # Getting the type of 'self' (line 1637)
        self_185610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 8), 'self')
        # Setting the type of the member '_record' of a type (line 1637)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 8), self_185610, '_record', record_185609)
        
        # Type idiom detected: calculating its left and rigth part (line 1638)
        # Getting the type of 'module' (line 1638)
        module_185611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 11), 'module')
        # Getting the type of 'None' (line 1638)
        None_185612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 21), 'None')
        
        (may_be_185613, more_types_in_union_185614) = may_be_none(module_185611, None_185612)

        if may_be_185613:

            if more_types_in_union_185614:
                # Runtime conditional SSA (line 1638)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Attribute (line 1639):
            
            # Assigning a Subscript to a Attribute (line 1639):
            
            # Obtaining the type of the subscript
            str_185615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1639, 39), 'str', 'warnings')
            # Getting the type of 'sys' (line 1639)
            sys_185616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 27), 'sys')
            # Obtaining the member 'modules' of a type (line 1639)
            modules_185617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 27), sys_185616, 'modules')
            # Obtaining the member '__getitem__' of a type (line 1639)
            getitem___185618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 27), modules_185617, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1639)
            subscript_call_result_185619 = invoke(stypy.reporting.localization.Localization(__file__, 1639, 27), getitem___185618, str_185615)
            
            # Getting the type of 'self' (line 1639)
            self_185620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 12), 'self')
            # Setting the type of the member '_module' of a type (line 1639)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 12), self_185620, '_module', subscript_call_result_185619)

            if more_types_in_union_185614:
                # Runtime conditional SSA for else branch (line 1638)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_185613) or more_types_in_union_185614):
            
            # Assigning a Name to a Attribute (line 1641):
            
            # Assigning a Name to a Attribute (line 1641):
            # Getting the type of 'module' (line 1641)
            module_185621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 27), 'module')
            # Getting the type of 'self' (line 1641)
            self_185622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 12), 'self')
            # Setting the type of the member '_module' of a type (line 1641)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 12), self_185622, '_module', module_185621)

            if (may_be_185613 and more_types_in_union_185614):
                # SSA join for if statement (line 1638)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1642):
        
        # Assigning a Name to a Attribute (line 1642):
        # Getting the type of 'False' (line 1642)
        False_185623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 24), 'False')
        # Getting the type of 'self' (line 1642)
        self_185624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 8), 'self')
        # Setting the type of the member '_entered' of a type (line 1642)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1642, 8), self_185624, '_entered', False_185623)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __enter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__enter__'
        module_type_store = module_type_store.open_function_context('__enter__', 1644, 4, False)
        # Assigning a type to the variable 'self' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        WarningManager.__enter__.__dict__.__setitem__('stypy_localization', localization)
        WarningManager.__enter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        WarningManager.__enter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        WarningManager.__enter__.__dict__.__setitem__('stypy_function_name', 'WarningManager.__enter__')
        WarningManager.__enter__.__dict__.__setitem__('stypy_param_names_list', [])
        WarningManager.__enter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        WarningManager.__enter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        WarningManager.__enter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        WarningManager.__enter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        WarningManager.__enter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        WarningManager.__enter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'WarningManager.__enter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__enter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__enter__(...)' code ##################

        
        # Getting the type of 'self' (line 1645)
        self_185625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 11), 'self')
        # Obtaining the member '_entered' of a type (line 1645)
        _entered_185626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 11), self_185625, '_entered')
        # Testing the type of an if condition (line 1645)
        if_condition_185627 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1645, 8), _entered_185626)
        # Assigning a type to the variable 'if_condition_185627' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'if_condition_185627', if_condition_185627)
        # SSA begins for if statement (line 1645)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 1646)
        # Processing the call arguments (line 1646)
        str_185629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 31), 'str', 'Cannot enter %r twice')
        # Getting the type of 'self' (line 1646)
        self_185630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 57), 'self', False)
        # Applying the binary operator '%' (line 1646)
        result_mod_185631 = python_operator(stypy.reporting.localization.Localization(__file__, 1646, 31), '%', str_185629, self_185630)
        
        # Processing the call keyword arguments (line 1646)
        kwargs_185632 = {}
        # Getting the type of 'RuntimeError' (line 1646)
        RuntimeError_185628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 1646)
        RuntimeError_call_result_185633 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 18), RuntimeError_185628, *[result_mod_185631], **kwargs_185632)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1646, 12), RuntimeError_call_result_185633, 'raise parameter', BaseException)
        # SSA join for if statement (line 1645)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1647):
        
        # Assigning a Name to a Attribute (line 1647):
        # Getting the type of 'True' (line 1647)
        True_185634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 24), 'True')
        # Getting the type of 'self' (line 1647)
        self_185635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 8), 'self')
        # Setting the type of the member '_entered' of a type (line 1647)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 8), self_185635, '_entered', True_185634)
        
        # Assigning a Attribute to a Attribute (line 1648):
        
        # Assigning a Attribute to a Attribute (line 1648):
        # Getting the type of 'self' (line 1648)
        self_185636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 24), 'self')
        # Obtaining the member '_module' of a type (line 1648)
        _module_185637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 24), self_185636, '_module')
        # Obtaining the member 'filters' of a type (line 1648)
        filters_185638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 24), _module_185637, 'filters')
        # Getting the type of 'self' (line 1648)
        self_185639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'self')
        # Setting the type of the member '_filters' of a type (line 1648)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 8), self_185639, '_filters', filters_185638)
        
        # Assigning a Subscript to a Attribute (line 1649):
        
        # Assigning a Subscript to a Attribute (line 1649):
        
        # Obtaining the type of the subscript
        slice_185640 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1649, 31), None, None, None)
        # Getting the type of 'self' (line 1649)
        self_185641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 31), 'self')
        # Obtaining the member '_filters' of a type (line 1649)
        _filters_185642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 31), self_185641, '_filters')
        # Obtaining the member '__getitem__' of a type (line 1649)
        getitem___185643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 31), _filters_185642, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1649)
        subscript_call_result_185644 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 31), getitem___185643, slice_185640)
        
        # Getting the type of 'self' (line 1649)
        self_185645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 8), 'self')
        # Obtaining the member '_module' of a type (line 1649)
        _module_185646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 8), self_185645, '_module')
        # Setting the type of the member 'filters' of a type (line 1649)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 8), _module_185646, 'filters', subscript_call_result_185644)
        
        # Assigning a Attribute to a Attribute (line 1650):
        
        # Assigning a Attribute to a Attribute (line 1650):
        # Getting the type of 'self' (line 1650)
        self_185647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 28), 'self')
        # Obtaining the member '_module' of a type (line 1650)
        _module_185648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 28), self_185647, '_module')
        # Obtaining the member 'showwarning' of a type (line 1650)
        showwarning_185649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 28), _module_185648, 'showwarning')
        # Getting the type of 'self' (line 1650)
        self_185650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 8), 'self')
        # Setting the type of the member '_showwarning' of a type (line 1650)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 8), self_185650, '_showwarning', showwarning_185649)
        
        # Getting the type of 'self' (line 1651)
        self_185651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 11), 'self')
        # Obtaining the member '_record' of a type (line 1651)
        _record_185652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 11), self_185651, '_record')
        # Testing the type of an if condition (line 1651)
        if_condition_185653 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1651, 8), _record_185652)
        # Assigning a type to the variable 'if_condition_185653' (line 1651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 8), 'if_condition_185653', if_condition_185653)
        # SSA begins for if statement (line 1651)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 1652):
        
        # Assigning a List to a Name (line 1652):
        
        # Obtaining an instance of the builtin type 'list' (line 1652)
        list_185654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1652, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1652)
        
        # Assigning a type to the variable 'log' (line 1652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 12), 'log', list_185654)

        @norecursion
        def showwarning(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'showwarning'
            module_type_store = module_type_store.open_function_context('showwarning', 1654, 12, False)
            
            # Passed parameters checking function
            showwarning.stypy_localization = localization
            showwarning.stypy_type_of_self = None
            showwarning.stypy_type_store = module_type_store
            showwarning.stypy_function_name = 'showwarning'
            showwarning.stypy_param_names_list = []
            showwarning.stypy_varargs_param_name = 'args'
            showwarning.stypy_kwargs_param_name = 'kwargs'
            showwarning.stypy_call_defaults = defaults
            showwarning.stypy_call_varargs = varargs
            showwarning.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'showwarning', [], 'args', 'kwargs', defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'showwarning', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'showwarning(...)' code ##################

            
            # Call to append(...): (line 1655)
            # Processing the call arguments (line 1655)
            
            # Call to WarningMessage(...): (line 1655)
            # Getting the type of 'args' (line 1655)
            args_185658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 43), 'args', False)
            # Processing the call keyword arguments (line 1655)
            # Getting the type of 'kwargs' (line 1655)
            kwargs_185659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 51), 'kwargs', False)
            kwargs_185660 = {'kwargs_185659': kwargs_185659}
            # Getting the type of 'WarningMessage' (line 1655)
            WarningMessage_185657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 27), 'WarningMessage', False)
            # Calling WarningMessage(args, kwargs) (line 1655)
            WarningMessage_call_result_185661 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 27), WarningMessage_185657, *[args_185658], **kwargs_185660)
            
            # Processing the call keyword arguments (line 1655)
            kwargs_185662 = {}
            # Getting the type of 'log' (line 1655)
            log_185655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 16), 'log', False)
            # Obtaining the member 'append' of a type (line 1655)
            append_185656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 16), log_185655, 'append')
            # Calling append(args, kwargs) (line 1655)
            append_call_result_185663 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 16), append_185656, *[WarningMessage_call_result_185661], **kwargs_185662)
            
            
            # ################# End of 'showwarning(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'showwarning' in the type store
            # Getting the type of 'stypy_return_type' (line 1654)
            stypy_return_type_185664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_185664)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'showwarning'
            return stypy_return_type_185664

        # Assigning a type to the variable 'showwarning' (line 1654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 12), 'showwarning', showwarning)
        
        # Assigning a Name to a Attribute (line 1656):
        
        # Assigning a Name to a Attribute (line 1656):
        # Getting the type of 'showwarning' (line 1656)
        showwarning_185665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 39), 'showwarning')
        # Getting the type of 'self' (line 1656)
        self_185666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 12), 'self')
        # Obtaining the member '_module' of a type (line 1656)
        _module_185667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 12), self_185666, '_module')
        # Setting the type of the member 'showwarning' of a type (line 1656)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 12), _module_185667, 'showwarning', showwarning_185665)
        # Getting the type of 'log' (line 1657)
        log_185668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 19), 'log')
        # Assigning a type to the variable 'stypy_return_type' (line 1657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1657, 12), 'stypy_return_type', log_185668)
        # SSA branch for the else part of an if statement (line 1651)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'None' (line 1659)
        None_185669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 12), 'stypy_return_type', None_185669)
        # SSA join for if statement (line 1651)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__enter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__enter__' in the type store
        # Getting the type of 'stypy_return_type' (line 1644)
        stypy_return_type_185670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_185670)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__enter__'
        return stypy_return_type_185670


    @norecursion
    def __exit__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__exit__'
        module_type_store = module_type_store.open_function_context('__exit__', 1661, 4, False)
        # Assigning a type to the variable 'self' (line 1662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        WarningManager.__exit__.__dict__.__setitem__('stypy_localization', localization)
        WarningManager.__exit__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        WarningManager.__exit__.__dict__.__setitem__('stypy_type_store', module_type_store)
        WarningManager.__exit__.__dict__.__setitem__('stypy_function_name', 'WarningManager.__exit__')
        WarningManager.__exit__.__dict__.__setitem__('stypy_param_names_list', [])
        WarningManager.__exit__.__dict__.__setitem__('stypy_varargs_param_name', None)
        WarningManager.__exit__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        WarningManager.__exit__.__dict__.__setitem__('stypy_call_defaults', defaults)
        WarningManager.__exit__.__dict__.__setitem__('stypy_call_varargs', varargs)
        WarningManager.__exit__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        WarningManager.__exit__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'WarningManager.__exit__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__exit__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__exit__(...)' code ##################

        
        
        # Getting the type of 'self' (line 1662)
        self_185671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 15), 'self')
        # Obtaining the member '_entered' of a type (line 1662)
        _entered_185672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 15), self_185671, '_entered')
        # Applying the 'not' unary operator (line 1662)
        result_not__185673 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 11), 'not', _entered_185672)
        
        # Testing the type of an if condition (line 1662)
        if_condition_185674 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1662, 8), result_not__185673)
        # Assigning a type to the variable 'if_condition_185674' (line 1662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 8), 'if_condition_185674', if_condition_185674)
        # SSA begins for if statement (line 1662)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 1663)
        # Processing the call arguments (line 1663)
        str_185676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 31), 'str', 'Cannot exit %r without entering first')
        # Getting the type of 'self' (line 1663)
        self_185677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 73), 'self', False)
        # Applying the binary operator '%' (line 1663)
        result_mod_185678 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 31), '%', str_185676, self_185677)
        
        # Processing the call keyword arguments (line 1663)
        kwargs_185679 = {}
        # Getting the type of 'RuntimeError' (line 1663)
        RuntimeError_185675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 1663)
        RuntimeError_call_result_185680 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 18), RuntimeError_185675, *[result_mod_185678], **kwargs_185679)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1663, 12), RuntimeError_call_result_185680, 'raise parameter', BaseException)
        # SSA join for if statement (line 1662)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Attribute (line 1664):
        
        # Assigning a Attribute to a Attribute (line 1664):
        # Getting the type of 'self' (line 1664)
        self_185681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 31), 'self')
        # Obtaining the member '_filters' of a type (line 1664)
        _filters_185682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 31), self_185681, '_filters')
        # Getting the type of 'self' (line 1664)
        self_185683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 8), 'self')
        # Obtaining the member '_module' of a type (line 1664)
        _module_185684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 8), self_185683, '_module')
        # Setting the type of the member 'filters' of a type (line 1664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 8), _module_185684, 'filters', _filters_185682)
        
        # Assigning a Attribute to a Attribute (line 1665):
        
        # Assigning a Attribute to a Attribute (line 1665):
        # Getting the type of 'self' (line 1665)
        self_185685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 35), 'self')
        # Obtaining the member '_showwarning' of a type (line 1665)
        _showwarning_185686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1665, 35), self_185685, '_showwarning')
        # Getting the type of 'self' (line 1665)
        self_185687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 8), 'self')
        # Obtaining the member '_module' of a type (line 1665)
        _module_185688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1665, 8), self_185687, '_module')
        # Setting the type of the member 'showwarning' of a type (line 1665)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1665, 8), _module_185688, 'showwarning', _showwarning_185686)
        
        # ################# End of '__exit__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__exit__' in the type store
        # Getting the type of 'stypy_return_type' (line 1661)
        stypy_return_type_185689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_185689)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__exit__'
        return stypy_return_type_185689


# Assigning a type to the variable 'WarningManager' (line 1611)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1611, 0), 'WarningManager', WarningManager)

@norecursion
def _assert_warns_context(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1669)
    None_185690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 46), 'None')
    defaults = [None_185690]
    # Create a new context for function '_assert_warns_context'
    module_type_store = module_type_store.open_function_context('_assert_warns_context', 1668, 0, False)
    
    # Passed parameters checking function
    _assert_warns_context.stypy_localization = localization
    _assert_warns_context.stypy_type_of_self = None
    _assert_warns_context.stypy_type_store = module_type_store
    _assert_warns_context.stypy_function_name = '_assert_warns_context'
    _assert_warns_context.stypy_param_names_list = ['warning_class', 'name']
    _assert_warns_context.stypy_varargs_param_name = None
    _assert_warns_context.stypy_kwargs_param_name = None
    _assert_warns_context.stypy_call_defaults = defaults
    _assert_warns_context.stypy_call_varargs = varargs
    _assert_warns_context.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_assert_warns_context', ['warning_class', 'name'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_assert_warns_context', localization, ['warning_class', 'name'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_assert_warns_context(...)' code ##################

    
    # Assigning a Name to a Name (line 1670):
    
    # Assigning a Name to a Name (line 1670):
    # Getting the type of 'True' (line 1670)
    True_185691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 4), '__tracebackhide__', True_185691)
    
    # Call to catch_warnings(...): (line 1671)
    # Processing the call keyword arguments (line 1671)
    # Getting the type of 'True' (line 1671)
    True_185694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 40), 'True', False)
    keyword_185695 = True_185694
    kwargs_185696 = {'record': keyword_185695}
    # Getting the type of 'warnings' (line 1671)
    warnings_185692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 9), 'warnings', False)
    # Obtaining the member 'catch_warnings' of a type (line 1671)
    catch_warnings_185693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 9), warnings_185692, 'catch_warnings')
    # Calling catch_warnings(args, kwargs) (line 1671)
    catch_warnings_call_result_185697 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 9), catch_warnings_185693, *[], **kwargs_185696)
    
    with_185698 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1671, 9), catch_warnings_call_result_185697, 'with parameter', '__enter__', '__exit__')

    if with_185698:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 1671)
        enter___185699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 9), catch_warnings_call_result_185697, '__enter__')
        with_enter_185700 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 9), enter___185699)
        # Assigning a type to the variable 'l' (line 1671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 9), 'l', with_enter_185700)
        
        # Call to simplefilter(...): (line 1672)
        # Processing the call arguments (line 1672)
        str_185703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 30), 'str', 'always')
        # Processing the call keyword arguments (line 1672)
        kwargs_185704 = {}
        # Getting the type of 'warnings' (line 1672)
        warnings_185701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 8), 'warnings', False)
        # Obtaining the member 'simplefilter' of a type (line 1672)
        simplefilter_185702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 8), warnings_185701, 'simplefilter')
        # Calling simplefilter(args, kwargs) (line 1672)
        simplefilter_call_result_185705 = invoke(stypy.reporting.localization.Localization(__file__, 1672, 8), simplefilter_185702, *[str_185703], **kwargs_185704)
        
        # Creating a generator
        GeneratorType_185706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1673, 8), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1673, 8), GeneratorType_185706, None)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 8), 'stypy_return_type', GeneratorType_185706)
        
        
        
        
        # Call to len(...): (line 1674)
        # Processing the call arguments (line 1674)
        # Getting the type of 'l' (line 1674)
        l_185708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 19), 'l', False)
        # Processing the call keyword arguments (line 1674)
        kwargs_185709 = {}
        # Getting the type of 'len' (line 1674)
        len_185707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 15), 'len', False)
        # Calling len(args, kwargs) (line 1674)
        len_call_result_185710 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 15), len_185707, *[l_185708], **kwargs_185709)
        
        int_185711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 24), 'int')
        # Applying the binary operator '>' (line 1674)
        result_gt_185712 = python_operator(stypy.reporting.localization.Localization(__file__, 1674, 15), '>', len_call_result_185710, int_185711)
        
        # Applying the 'not' unary operator (line 1674)
        result_not__185713 = python_operator(stypy.reporting.localization.Localization(__file__, 1674, 11), 'not', result_gt_185712)
        
        # Testing the type of an if condition (line 1674)
        if_condition_185714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1674, 8), result_not__185713)
        # Assigning a type to the variable 'if_condition_185714' (line 1674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 8), 'if_condition_185714', if_condition_185714)
        # SSA begins for if statement (line 1674)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a IfExp to a Name (line 1675):
        
        # Assigning a IfExp to a Name (line 1675):
        
        
        # Getting the type of 'name' (line 1675)
        name_185715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 52), 'name')
        # Getting the type of 'None' (line 1675)
        None_185716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 64), 'None')
        # Applying the binary operator 'isnot' (line 1675)
        result_is_not_185717 = python_operator(stypy.reporting.localization.Localization(__file__, 1675, 52), 'isnot', name_185715, None_185716)
        
        # Testing the type of an if expression (line 1675)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1675, 23), result_is_not_185717)
        # SSA begins for if expression (line 1675)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        str_185718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1675, 23), 'str', ' when calling %s')
        # Getting the type of 'name' (line 1675)
        name_185719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 44), 'name')
        # Applying the binary operator '%' (line 1675)
        result_mod_185720 = python_operator(stypy.reporting.localization.Localization(__file__, 1675, 23), '%', str_185718, name_185719)
        
        # SSA branch for the else part of an if expression (line 1675)
        module_type_store.open_ssa_branch('if expression else')
        str_185721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1675, 74), 'str', '')
        # SSA join for if expression (line 1675)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_185722 = union_type.UnionType.add(result_mod_185720, str_185721)
        
        # Assigning a type to the variable 'name_str' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'name_str', if_exp_185722)
        
        # Call to AssertionError(...): (line 1676)
        # Processing the call arguments (line 1676)
        str_185724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 33), 'str', 'No warning raised')
        # Getting the type of 'name_str' (line 1676)
        name_str_185725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 55), 'name_str', False)
        # Applying the binary operator '+' (line 1676)
        result_add_185726 = python_operator(stypy.reporting.localization.Localization(__file__, 1676, 33), '+', str_185724, name_str_185725)
        
        # Processing the call keyword arguments (line 1676)
        kwargs_185727 = {}
        # Getting the type of 'AssertionError' (line 1676)
        AssertionError_185723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 18), 'AssertionError', False)
        # Calling AssertionError(args, kwargs) (line 1676)
        AssertionError_call_result_185728 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 18), AssertionError_185723, *[result_add_185726], **kwargs_185727)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1676, 12), AssertionError_call_result_185728, 'raise parameter', BaseException)
        # SSA join for if statement (line 1674)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        
        # Obtaining the type of the subscript
        int_185729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 17), 'int')
        # Getting the type of 'l' (line 1677)
        l_185730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 15), 'l')
        # Obtaining the member '__getitem__' of a type (line 1677)
        getitem___185731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 15), l_185730, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1677)
        subscript_call_result_185732 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 15), getitem___185731, int_185729)
        
        # Obtaining the member 'category' of a type (line 1677)
        category_185733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 15), subscript_call_result_185732, 'category')
        # Getting the type of 'warning_class' (line 1677)
        warning_class_185734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 32), 'warning_class')
        # Applying the binary operator 'is' (line 1677)
        result_is__185735 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 15), 'is', category_185733, warning_class_185734)
        
        # Applying the 'not' unary operator (line 1677)
        result_not__185736 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 11), 'not', result_is__185735)
        
        # Testing the type of an if condition (line 1677)
        if_condition_185737 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1677, 8), result_not__185736)
        # Assigning a type to the variable 'if_condition_185737' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 8), 'if_condition_185737', if_condition_185737)
        # SSA begins for if statement (line 1677)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a IfExp to a Name (line 1678):
        
        # Assigning a IfExp to a Name (line 1678):
        
        
        # Getting the type of 'name' (line 1678)
        name_185738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 39), 'name')
        # Getting the type of 'None' (line 1678)
        None_185739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 51), 'None')
        # Applying the binary operator 'isnot' (line 1678)
        result_is_not_185740 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 39), 'isnot', name_185738, None_185739)
        
        # Testing the type of an if expression (line 1678)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1678, 23), result_is_not_185740)
        # SSA begins for if expression (line 1678)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        str_185741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1678, 23), 'str', '%s ')
        # Getting the type of 'name' (line 1678)
        name_185742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 31), 'name')
        # Applying the binary operator '%' (line 1678)
        result_mod_185743 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 23), '%', str_185741, name_185742)
        
        # SSA branch for the else part of an if expression (line 1678)
        module_type_store.open_ssa_branch('if expression else')
        str_185744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1678, 61), 'str', '')
        # SSA join for if expression (line 1678)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_185745 = union_type.UnionType.add(result_mod_185743, str_185744)
        
        # Assigning a type to the variable 'name_str' (line 1678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 12), 'name_str', if_exp_185745)
        
        # Call to AssertionError(...): (line 1679)
        # Processing the call arguments (line 1679)
        str_185747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 33), 'str', 'First warning %sis not a %s (is %s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1680)
        tuple_185748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1680)
        # Adding element type (line 1680)
        # Getting the type of 'name_str' (line 1680)
        name_str_185749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 36), 'name_str', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1680, 36), tuple_185748, name_str_185749)
        # Adding element type (line 1680)
        # Getting the type of 'warning_class' (line 1680)
        warning_class_185750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 46), 'warning_class', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1680, 36), tuple_185748, warning_class_185750)
        # Adding element type (line 1680)
        
        # Obtaining the type of the subscript
        int_185751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 63), 'int')
        # Getting the type of 'l' (line 1680)
        l_185752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 61), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1680)
        getitem___185753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 61), l_185752, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1680)
        subscript_call_result_185754 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 61), getitem___185753, int_185751)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1680, 36), tuple_185748, subscript_call_result_185754)
        
        # Applying the binary operator '%' (line 1679)
        result_mod_185755 = python_operator(stypy.reporting.localization.Localization(__file__, 1679, 33), '%', str_185747, tuple_185748)
        
        # Processing the call keyword arguments (line 1679)
        kwargs_185756 = {}
        # Getting the type of 'AssertionError' (line 1679)
        AssertionError_185746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 18), 'AssertionError', False)
        # Calling AssertionError(args, kwargs) (line 1679)
        AssertionError_call_result_185757 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 18), AssertionError_185746, *[result_mod_185755], **kwargs_185756)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1679, 12), AssertionError_call_result_185757, 'raise parameter', BaseException)
        # SSA join for if statement (line 1677)
        module_type_store = module_type_store.join_ssa_context()
        
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 1671)
        exit___185758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 9), catch_warnings_call_result_185697, '__exit__')
        with_exit_185759 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 9), exit___185758, None, None, None)

    
    # ################# End of '_assert_warns_context(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_assert_warns_context' in the type store
    # Getting the type of 'stypy_return_type' (line 1668)
    stypy_return_type_185760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185760)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_assert_warns_context'
    return stypy_return_type_185760

# Assigning a type to the variable '_assert_warns_context' (line 1668)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 0), '_assert_warns_context', _assert_warns_context)

@norecursion
def assert_warns(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'assert_warns'
    module_type_store = module_type_store.open_function_context('assert_warns', 1683, 0, False)
    
    # Passed parameters checking function
    assert_warns.stypy_localization = localization
    assert_warns.stypy_type_of_self = None
    assert_warns.stypy_type_store = module_type_store
    assert_warns.stypy_function_name = 'assert_warns'
    assert_warns.stypy_param_names_list = ['warning_class']
    assert_warns.stypy_varargs_param_name = 'args'
    assert_warns.stypy_kwargs_param_name = 'kwargs'
    assert_warns.stypy_call_defaults = defaults
    assert_warns.stypy_call_varargs = varargs
    assert_warns.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_warns', ['warning_class'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_warns', localization, ['warning_class'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_warns(...)' code ##################

    str_185761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, (-1)), 'str', '\n    Fail unless the given callable throws the specified warning.\n\n    A warning of class warning_class should be thrown by the callable when\n    invoked with arguments args and keyword arguments kwargs.\n    If a different type of warning is thrown, it will not be caught, and the\n    test case will be deemed to have suffered an error.\n\n    If called with all arguments other than the warning class omitted, may be\n    used as a context manager:\n\n        with assert_warns(SomeWarning):\n            do_something()\n\n    The ability to be used as a context manager is new in NumPy v1.11.0.\n\n    .. versionadded:: 1.4.0\n\n    Parameters\n    ----------\n    warning_class : class\n        The class defining the warning that `func` is expected to throw.\n    func : callable\n        The callable to test.\n    \\*args : Arguments\n        Arguments passed to `func`.\n    \\*\\*kwargs : Kwargs\n        Keyword arguments passed to `func`.\n\n    Returns\n    -------\n    The value returned by `func`.\n\n    ')
    
    
    # Getting the type of 'args' (line 1718)
    args_185762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 11), 'args')
    # Applying the 'not' unary operator (line 1718)
    result_not__185763 = python_operator(stypy.reporting.localization.Localization(__file__, 1718, 7), 'not', args_185762)
    
    # Testing the type of an if condition (line 1718)
    if_condition_185764 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1718, 4), result_not__185763)
    # Assigning a type to the variable 'if_condition_185764' (line 1718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 4), 'if_condition_185764', if_condition_185764)
    # SSA begins for if statement (line 1718)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _assert_warns_context(...): (line 1719)
    # Processing the call arguments (line 1719)
    # Getting the type of 'warning_class' (line 1719)
    warning_class_185766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 37), 'warning_class', False)
    # Processing the call keyword arguments (line 1719)
    kwargs_185767 = {}
    # Getting the type of '_assert_warns_context' (line 1719)
    _assert_warns_context_185765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 15), '_assert_warns_context', False)
    # Calling _assert_warns_context(args, kwargs) (line 1719)
    _assert_warns_context_call_result_185768 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 15), _assert_warns_context_185765, *[warning_class_185766], **kwargs_185767)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 8), 'stypy_return_type', _assert_warns_context_call_result_185768)
    # SSA join for if statement (line 1718)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1721):
    
    # Assigning a Subscript to a Name (line 1721):
    
    # Obtaining the type of the subscript
    int_185769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 16), 'int')
    # Getting the type of 'args' (line 1721)
    args_185770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 11), 'args')
    # Obtaining the member '__getitem__' of a type (line 1721)
    getitem___185771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 11), args_185770, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1721)
    subscript_call_result_185772 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 11), getitem___185771, int_185769)
    
    # Assigning a type to the variable 'func' (line 1721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 4), 'func', subscript_call_result_185772)
    
    # Assigning a Subscript to a Name (line 1722):
    
    # Assigning a Subscript to a Name (line 1722):
    
    # Obtaining the type of the subscript
    int_185773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 16), 'int')
    slice_185774 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1722, 11), int_185773, None, None)
    # Getting the type of 'args' (line 1722)
    args_185775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 11), 'args')
    # Obtaining the member '__getitem__' of a type (line 1722)
    getitem___185776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 11), args_185775, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1722)
    subscript_call_result_185777 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 11), getitem___185776, slice_185774)
    
    # Assigning a type to the variable 'args' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'args', subscript_call_result_185777)
    
    # Call to _assert_warns_context(...): (line 1723)
    # Processing the call arguments (line 1723)
    # Getting the type of 'warning_class' (line 1723)
    warning_class_185779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 31), 'warning_class', False)
    # Processing the call keyword arguments (line 1723)
    # Getting the type of 'func' (line 1723)
    func_185780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 51), 'func', False)
    # Obtaining the member '__name__' of a type (line 1723)
    name___185781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 51), func_185780, '__name__')
    keyword_185782 = name___185781
    kwargs_185783 = {'name': keyword_185782}
    # Getting the type of '_assert_warns_context' (line 1723)
    _assert_warns_context_185778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 9), '_assert_warns_context', False)
    # Calling _assert_warns_context(args, kwargs) (line 1723)
    _assert_warns_context_call_result_185784 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 9), _assert_warns_context_185778, *[warning_class_185779], **kwargs_185783)
    
    with_185785 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1723, 9), _assert_warns_context_call_result_185784, 'with parameter', '__enter__', '__exit__')

    if with_185785:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 1723)
        enter___185786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 9), _assert_warns_context_call_result_185784, '__enter__')
        with_enter_185787 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 9), enter___185786)
        
        # Call to func(...): (line 1724)
        # Getting the type of 'args' (line 1724)
        args_185789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 21), 'args', False)
        # Processing the call keyword arguments (line 1724)
        # Getting the type of 'kwargs' (line 1724)
        kwargs_185790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 29), 'kwargs', False)
        kwargs_185791 = {'kwargs_185790': kwargs_185790}
        # Getting the type of 'func' (line 1724)
        func_185788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 15), 'func', False)
        # Calling func(args, kwargs) (line 1724)
        func_call_result_185792 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 15), func_185788, *[args_185789], **kwargs_185791)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'stypy_return_type', func_call_result_185792)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 1723)
        exit___185793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 9), _assert_warns_context_call_result_185784, '__exit__')
        with_exit_185794 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 9), exit___185793, None, None, None)

    
    # ################# End of 'assert_warns(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_warns' in the type store
    # Getting the type of 'stypy_return_type' (line 1683)
    stypy_return_type_185795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185795)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_warns'
    return stypy_return_type_185795

# Assigning a type to the variable 'assert_warns' (line 1683)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 0), 'assert_warns', assert_warns)

@norecursion
def _assert_no_warnings_context(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1728)
    None_185796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 37), 'None')
    defaults = [None_185796]
    # Create a new context for function '_assert_no_warnings_context'
    module_type_store = module_type_store.open_function_context('_assert_no_warnings_context', 1727, 0, False)
    
    # Passed parameters checking function
    _assert_no_warnings_context.stypy_localization = localization
    _assert_no_warnings_context.stypy_type_of_self = None
    _assert_no_warnings_context.stypy_type_store = module_type_store
    _assert_no_warnings_context.stypy_function_name = '_assert_no_warnings_context'
    _assert_no_warnings_context.stypy_param_names_list = ['name']
    _assert_no_warnings_context.stypy_varargs_param_name = None
    _assert_no_warnings_context.stypy_kwargs_param_name = None
    _assert_no_warnings_context.stypy_call_defaults = defaults
    _assert_no_warnings_context.stypy_call_varargs = varargs
    _assert_no_warnings_context.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_assert_no_warnings_context', ['name'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_assert_no_warnings_context', localization, ['name'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_assert_no_warnings_context(...)' code ##################

    
    # Assigning a Name to a Name (line 1729):
    
    # Assigning a Name to a Name (line 1729):
    # Getting the type of 'True' (line 1729)
    True_185797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 24), 'True')
    # Assigning a type to the variable '__tracebackhide__' (line 1729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1729, 4), '__tracebackhide__', True_185797)
    
    # Call to catch_warnings(...): (line 1730)
    # Processing the call keyword arguments (line 1730)
    # Getting the type of 'True' (line 1730)
    True_185800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 40), 'True', False)
    keyword_185801 = True_185800
    kwargs_185802 = {'record': keyword_185801}
    # Getting the type of 'warnings' (line 1730)
    warnings_185798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 9), 'warnings', False)
    # Obtaining the member 'catch_warnings' of a type (line 1730)
    catch_warnings_185799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 9), warnings_185798, 'catch_warnings')
    # Calling catch_warnings(args, kwargs) (line 1730)
    catch_warnings_call_result_185803 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 9), catch_warnings_185799, *[], **kwargs_185802)
    
    with_185804 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1730, 9), catch_warnings_call_result_185803, 'with parameter', '__enter__', '__exit__')

    if with_185804:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 1730)
        enter___185805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 9), catch_warnings_call_result_185803, '__enter__')
        with_enter_185806 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 9), enter___185805)
        # Assigning a type to the variable 'l' (line 1730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 9), 'l', with_enter_185806)
        
        # Call to simplefilter(...): (line 1731)
        # Processing the call arguments (line 1731)
        str_185809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1731, 30), 'str', 'always')
        # Processing the call keyword arguments (line 1731)
        kwargs_185810 = {}
        # Getting the type of 'warnings' (line 1731)
        warnings_185807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 8), 'warnings', False)
        # Obtaining the member 'simplefilter' of a type (line 1731)
        simplefilter_185808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1731, 8), warnings_185807, 'simplefilter')
        # Calling simplefilter(args, kwargs) (line 1731)
        simplefilter_call_result_185811 = invoke(stypy.reporting.localization.Localization(__file__, 1731, 8), simplefilter_185808, *[str_185809], **kwargs_185810)
        
        # Creating a generator
        GeneratorType_185812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1732, 8), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1732, 8), GeneratorType_185812, None)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 8), 'stypy_return_type', GeneratorType_185812)
        
        
        
        # Call to len(...): (line 1733)
        # Processing the call arguments (line 1733)
        # Getting the type of 'l' (line 1733)
        l_185814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 15), 'l', False)
        # Processing the call keyword arguments (line 1733)
        kwargs_185815 = {}
        # Getting the type of 'len' (line 1733)
        len_185813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 11), 'len', False)
        # Calling len(args, kwargs) (line 1733)
        len_call_result_185816 = invoke(stypy.reporting.localization.Localization(__file__, 1733, 11), len_185813, *[l_185814], **kwargs_185815)
        
        int_185817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, 20), 'int')
        # Applying the binary operator '>' (line 1733)
        result_gt_185818 = python_operator(stypy.reporting.localization.Localization(__file__, 1733, 11), '>', len_call_result_185816, int_185817)
        
        # Testing the type of an if condition (line 1733)
        if_condition_185819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1733, 8), result_gt_185818)
        # Assigning a type to the variable 'if_condition_185819' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 8), 'if_condition_185819', if_condition_185819)
        # SSA begins for if statement (line 1733)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a IfExp to a Name (line 1734):
        
        # Assigning a IfExp to a Name (line 1734):
        
        
        # Getting the type of 'name' (line 1734)
        name_185820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 52), 'name')
        # Getting the type of 'None' (line 1734)
        None_185821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 64), 'None')
        # Applying the binary operator 'isnot' (line 1734)
        result_is_not_185822 = python_operator(stypy.reporting.localization.Localization(__file__, 1734, 52), 'isnot', name_185820, None_185821)
        
        # Testing the type of an if expression (line 1734)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1734, 23), result_is_not_185822)
        # SSA begins for if expression (line 1734)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        str_185823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1734, 23), 'str', ' when calling %s')
        # Getting the type of 'name' (line 1734)
        name_185824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 44), 'name')
        # Applying the binary operator '%' (line 1734)
        result_mod_185825 = python_operator(stypy.reporting.localization.Localization(__file__, 1734, 23), '%', str_185823, name_185824)
        
        # SSA branch for the else part of an if expression (line 1734)
        module_type_store.open_ssa_branch('if expression else')
        str_185826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1734, 74), 'str', '')
        # SSA join for if expression (line 1734)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_185827 = union_type.UnionType.add(result_mod_185825, str_185826)
        
        # Assigning a type to the variable 'name_str' (line 1734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 12), 'name_str', if_exp_185827)
        
        # Call to AssertionError(...): (line 1735)
        # Processing the call arguments (line 1735)
        str_185829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 33), 'str', 'Got warnings%s: %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1735)
        tuple_185830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 57), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1735)
        # Adding element type (line 1735)
        # Getting the type of 'name_str' (line 1735)
        name_str_185831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 57), 'name_str', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 57), tuple_185830, name_str_185831)
        # Adding element type (line 1735)
        # Getting the type of 'l' (line 1735)
        l_185832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 67), 'l', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 57), tuple_185830, l_185832)
        
        # Applying the binary operator '%' (line 1735)
        result_mod_185833 = python_operator(stypy.reporting.localization.Localization(__file__, 1735, 33), '%', str_185829, tuple_185830)
        
        # Processing the call keyword arguments (line 1735)
        kwargs_185834 = {}
        # Getting the type of 'AssertionError' (line 1735)
        AssertionError_185828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 18), 'AssertionError', False)
        # Calling AssertionError(args, kwargs) (line 1735)
        AssertionError_call_result_185835 = invoke(stypy.reporting.localization.Localization(__file__, 1735, 18), AssertionError_185828, *[result_mod_185833], **kwargs_185834)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1735, 12), AssertionError_call_result_185835, 'raise parameter', BaseException)
        # SSA join for if statement (line 1733)
        module_type_store = module_type_store.join_ssa_context()
        
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 1730)
        exit___185836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 9), catch_warnings_call_result_185803, '__exit__')
        with_exit_185837 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 9), exit___185836, None, None, None)

    
    # ################# End of '_assert_no_warnings_context(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_assert_no_warnings_context' in the type store
    # Getting the type of 'stypy_return_type' (line 1727)
    stypy_return_type_185838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185838)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_assert_no_warnings_context'
    return stypy_return_type_185838

# Assigning a type to the variable '_assert_no_warnings_context' (line 1727)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 0), '_assert_no_warnings_context', _assert_no_warnings_context)

@norecursion
def assert_no_warnings(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'assert_no_warnings'
    module_type_store = module_type_store.open_function_context('assert_no_warnings', 1738, 0, False)
    
    # Passed parameters checking function
    assert_no_warnings.stypy_localization = localization
    assert_no_warnings.stypy_type_of_self = None
    assert_no_warnings.stypy_type_store = module_type_store
    assert_no_warnings.stypy_function_name = 'assert_no_warnings'
    assert_no_warnings.stypy_param_names_list = []
    assert_no_warnings.stypy_varargs_param_name = 'args'
    assert_no_warnings.stypy_kwargs_param_name = 'kwargs'
    assert_no_warnings.stypy_call_defaults = defaults
    assert_no_warnings.stypy_call_varargs = varargs
    assert_no_warnings.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assert_no_warnings', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assert_no_warnings', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assert_no_warnings(...)' code ##################

    str_185839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1764, (-1)), 'str', '\n    Fail if the given callable produces any warnings.\n\n    If called with all arguments omitted, may be used as a context manager:\n\n        with assert_no_warnings():\n            do_something()\n\n    The ability to be used as a context manager is new in NumPy v1.11.0.\n\n    .. versionadded:: 1.7.0\n\n    Parameters\n    ----------\n    func : callable\n        The callable to test.\n    \\*args : Arguments\n        Arguments passed to `func`.\n    \\*\\*kwargs : Kwargs\n        Keyword arguments passed to `func`.\n\n    Returns\n    -------\n    The value returned by `func`.\n\n    ')
    
    
    # Getting the type of 'args' (line 1765)
    args_185840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 11), 'args')
    # Applying the 'not' unary operator (line 1765)
    result_not__185841 = python_operator(stypy.reporting.localization.Localization(__file__, 1765, 7), 'not', args_185840)
    
    # Testing the type of an if condition (line 1765)
    if_condition_185842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1765, 4), result_not__185841)
    # Assigning a type to the variable 'if_condition_185842' (line 1765)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1765, 4), 'if_condition_185842', if_condition_185842)
    # SSA begins for if statement (line 1765)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _assert_no_warnings_context(...): (line 1766)
    # Processing the call keyword arguments (line 1766)
    kwargs_185844 = {}
    # Getting the type of '_assert_no_warnings_context' (line 1766)
    _assert_no_warnings_context_185843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 15), '_assert_no_warnings_context', False)
    # Calling _assert_no_warnings_context(args, kwargs) (line 1766)
    _assert_no_warnings_context_call_result_185845 = invoke(stypy.reporting.localization.Localization(__file__, 1766, 15), _assert_no_warnings_context_185843, *[], **kwargs_185844)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 8), 'stypy_return_type', _assert_no_warnings_context_call_result_185845)
    # SSA join for if statement (line 1765)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1768):
    
    # Assigning a Subscript to a Name (line 1768):
    
    # Obtaining the type of the subscript
    int_185846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 16), 'int')
    # Getting the type of 'args' (line 1768)
    args_185847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 11), 'args')
    # Obtaining the member '__getitem__' of a type (line 1768)
    getitem___185848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 11), args_185847, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1768)
    subscript_call_result_185849 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 11), getitem___185848, int_185846)
    
    # Assigning a type to the variable 'func' (line 1768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 4), 'func', subscript_call_result_185849)
    
    # Assigning a Subscript to a Name (line 1769):
    
    # Assigning a Subscript to a Name (line 1769):
    
    # Obtaining the type of the subscript
    int_185850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1769, 16), 'int')
    slice_185851 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1769, 11), int_185850, None, None)
    # Getting the type of 'args' (line 1769)
    args_185852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 11), 'args')
    # Obtaining the member '__getitem__' of a type (line 1769)
    getitem___185853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1769, 11), args_185852, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1769)
    subscript_call_result_185854 = invoke(stypy.reporting.localization.Localization(__file__, 1769, 11), getitem___185853, slice_185851)
    
    # Assigning a type to the variable 'args' (line 1769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1769, 4), 'args', subscript_call_result_185854)
    
    # Call to _assert_no_warnings_context(...): (line 1770)
    # Processing the call keyword arguments (line 1770)
    # Getting the type of 'func' (line 1770)
    func_185856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 42), 'func', False)
    # Obtaining the member '__name__' of a type (line 1770)
    name___185857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 42), func_185856, '__name__')
    keyword_185858 = name___185857
    kwargs_185859 = {'name': keyword_185858}
    # Getting the type of '_assert_no_warnings_context' (line 1770)
    _assert_no_warnings_context_185855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 9), '_assert_no_warnings_context', False)
    # Calling _assert_no_warnings_context(args, kwargs) (line 1770)
    _assert_no_warnings_context_call_result_185860 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 9), _assert_no_warnings_context_185855, *[], **kwargs_185859)
    
    with_185861 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1770, 9), _assert_no_warnings_context_call_result_185860, 'with parameter', '__enter__', '__exit__')

    if with_185861:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 1770)
        enter___185862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 9), _assert_no_warnings_context_call_result_185860, '__enter__')
        with_enter_185863 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 9), enter___185862)
        
        # Call to func(...): (line 1771)
        # Getting the type of 'args' (line 1771)
        args_185865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 21), 'args', False)
        # Processing the call keyword arguments (line 1771)
        # Getting the type of 'kwargs' (line 1771)
        kwargs_185866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 29), 'kwargs', False)
        kwargs_185867 = {'kwargs_185866': kwargs_185866}
        # Getting the type of 'func' (line 1771)
        func_185864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 15), 'func', False)
        # Calling func(args, kwargs) (line 1771)
        func_call_result_185868 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 15), func_185864, *[args_185865], **kwargs_185867)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 8), 'stypy_return_type', func_call_result_185868)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 1770)
        exit___185869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 9), _assert_no_warnings_context_call_result_185860, '__exit__')
        with_exit_185870 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 9), exit___185869, None, None, None)

    
    # ################# End of 'assert_no_warnings(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assert_no_warnings' in the type store
    # Getting the type of 'stypy_return_type' (line 1738)
    stypy_return_type_185871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_185871)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assert_no_warnings'
    return stypy_return_type_185871

# Assigning a type to the variable 'assert_no_warnings' (line 1738)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 0), 'assert_no_warnings', assert_no_warnings)

@norecursion
def _gen_alignment_data(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'float32' (line 1774)
    float32_185872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 30), 'float32')
    str_185873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, 44), 'str', 'binary')
    int_185874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, 63), 'int')
    defaults = [float32_185872, str_185873, int_185874]
    # Create a new context for function '_gen_alignment_data'
    module_type_store = module_type_store.open_function_context('_gen_alignment_data', 1774, 0, False)
    
    # Passed parameters checking function
    _gen_alignment_data.stypy_localization = localization
    _gen_alignment_data.stypy_type_of_self = None
    _gen_alignment_data.stypy_type_store = module_type_store
    _gen_alignment_data.stypy_function_name = '_gen_alignment_data'
    _gen_alignment_data.stypy_param_names_list = ['dtype', 'type', 'max_size']
    _gen_alignment_data.stypy_varargs_param_name = None
    _gen_alignment_data.stypy_kwargs_param_name = None
    _gen_alignment_data.stypy_call_defaults = defaults
    _gen_alignment_data.stypy_call_varargs = varargs
    _gen_alignment_data.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_gen_alignment_data', ['dtype', 'type', 'max_size'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_gen_alignment_data', localization, ['dtype', 'type', 'max_size'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_gen_alignment_data(...)' code ##################

    str_185875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, (-1)), 'str', "\n    generator producing data with different alignment and offsets\n    to test simd vectorization\n\n    Parameters\n    ----------\n    dtype : dtype\n        data type to produce\n    type : string\n        'unary': create data for unary operations, creates one input\n                 and output array\n        'binary': create data for unary operations, creates two input\n                 and output array\n    max_size : integer\n        maximum size of data to produce\n\n    Returns\n    -------\n    if type is 'unary' yields one output, one input array and a message\n    containing information on the data\n    if type is 'binary' yields one output array, two input array and a message\n    containing information on the data\n\n    ")
    
    # Assigning a Str to a Name (line 1799):
    
    # Assigning a Str to a Name (line 1799):
    str_185876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 11), 'str', 'unary offset=(%d, %d), size=%d, dtype=%r, %s')
    # Assigning a type to the variable 'ufmt' (line 1799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 4), 'ufmt', str_185876)
    
    # Assigning a Str to a Name (line 1800):
    
    # Assigning a Str to a Name (line 1800):
    str_185877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 11), 'str', 'binary offset=(%d, %d, %d), size=%d, dtype=%r, %s')
    # Assigning a type to the variable 'bfmt' (line 1800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 4), 'bfmt', str_185877)
    
    
    # Call to range(...): (line 1801)
    # Processing the call arguments (line 1801)
    int_185879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 19), 'int')
    # Processing the call keyword arguments (line 1801)
    kwargs_185880 = {}
    # Getting the type of 'range' (line 1801)
    range_185878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 13), 'range', False)
    # Calling range(args, kwargs) (line 1801)
    range_call_result_185881 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 13), range_185878, *[int_185879], **kwargs_185880)
    
    # Testing the type of a for loop iterable (line 1801)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1801, 4), range_call_result_185881)
    # Getting the type of the for loop variable (line 1801)
    for_loop_var_185882 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1801, 4), range_call_result_185881)
    # Assigning a type to the variable 'o' (line 1801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 4), 'o', for_loop_var_185882)
    # SSA begins for a for statement (line 1801)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1802)
    # Processing the call arguments (line 1802)
    # Getting the type of 'o' (line 1802)
    o_185884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 23), 'o', False)
    int_185885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 27), 'int')
    # Applying the binary operator '+' (line 1802)
    result_add_185886 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 23), '+', o_185884, int_185885)
    
    
    # Call to max(...): (line 1802)
    # Processing the call arguments (line 1802)
    # Getting the type of 'o' (line 1802)
    o_185888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 34), 'o', False)
    int_185889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 38), 'int')
    # Applying the binary operator '+' (line 1802)
    result_add_185890 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 34), '+', o_185888, int_185889)
    
    # Getting the type of 'max_size' (line 1802)
    max_size_185891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 41), 'max_size', False)
    # Processing the call keyword arguments (line 1802)
    kwargs_185892 = {}
    # Getting the type of 'max' (line 1802)
    max_185887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 30), 'max', False)
    # Calling max(args, kwargs) (line 1802)
    max_call_result_185893 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 30), max_185887, *[result_add_185890, max_size_185891], **kwargs_185892)
    
    # Processing the call keyword arguments (line 1802)
    kwargs_185894 = {}
    # Getting the type of 'range' (line 1802)
    range_185883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 17), 'range', False)
    # Calling range(args, kwargs) (line 1802)
    range_call_result_185895 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 17), range_185883, *[result_add_185886, max_call_result_185893], **kwargs_185894)
    
    # Testing the type of a for loop iterable (line 1802)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1802, 8), range_call_result_185895)
    # Getting the type of the for loop variable (line 1802)
    for_loop_var_185896 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1802, 8), range_call_result_185895)
    # Assigning a type to the variable 's' (line 1802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1802, 8), 's', for_loop_var_185896)
    # SSA begins for a for statement (line 1802)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'type' (line 1803)
    type_185897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 15), 'type')
    str_185898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1803, 23), 'str', 'unary')
    # Applying the binary operator '==' (line 1803)
    result_eq_185899 = python_operator(stypy.reporting.localization.Localization(__file__, 1803, 15), '==', type_185897, str_185898)
    
    # Testing the type of an if condition (line 1803)
    if_condition_185900 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1803, 12), result_eq_185899)
    # Assigning a type to the variable 'if_condition_185900' (line 1803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1803, 12), 'if_condition_185900', if_condition_185900)
    # SSA begins for if statement (line 1803)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Lambda to a Name (line 1804):
    
    # Assigning a Lambda to a Name (line 1804):

    @norecursion
    def _stypy_temp_lambda_49(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_49'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_49', 1804, 22, True)
        # Passed parameters checking function
        _stypy_temp_lambda_49.stypy_localization = localization
        _stypy_temp_lambda_49.stypy_type_of_self = None
        _stypy_temp_lambda_49.stypy_type_store = module_type_store
        _stypy_temp_lambda_49.stypy_function_name = '_stypy_temp_lambda_49'
        _stypy_temp_lambda_49.stypy_param_names_list = []
        _stypy_temp_lambda_49.stypy_varargs_param_name = None
        _stypy_temp_lambda_49.stypy_kwargs_param_name = None
        _stypy_temp_lambda_49.stypy_call_defaults = defaults
        _stypy_temp_lambda_49.stypy_call_varargs = varargs
        _stypy_temp_lambda_49.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_49', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_49', [], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Obtaining the type of the subscript
        # Getting the type of 'o' (line 1804)
        o_185901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 53), 'o')
        slice_185902 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1804, 30), o_185901, None, None)
        
        # Call to arange(...): (line 1804)
        # Processing the call arguments (line 1804)
        # Getting the type of 's' (line 1804)
        s_185904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 37), 's', False)
        # Processing the call keyword arguments (line 1804)
        # Getting the type of 'dtype' (line 1804)
        dtype_185905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 46), 'dtype', False)
        keyword_185906 = dtype_185905
        kwargs_185907 = {'dtype': keyword_185906}
        # Getting the type of 'arange' (line 1804)
        arange_185903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 30), 'arange', False)
        # Calling arange(args, kwargs) (line 1804)
        arange_call_result_185908 = invoke(stypy.reporting.localization.Localization(__file__, 1804, 30), arange_185903, *[s_185904], **kwargs_185907)
        
        # Obtaining the member '__getitem__' of a type (line 1804)
        getitem___185909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1804, 30), arange_call_result_185908, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1804)
        subscript_call_result_185910 = invoke(stypy.reporting.localization.Localization(__file__, 1804, 30), getitem___185909, slice_185902)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 22), 'stypy_return_type', subscript_call_result_185910)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_49' in the type store
        # Getting the type of 'stypy_return_type' (line 1804)
        stypy_return_type_185911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 22), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_185911)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_49'
        return stypy_return_type_185911

    # Assigning a type to the variable '_stypy_temp_lambda_49' (line 1804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 22), '_stypy_temp_lambda_49', _stypy_temp_lambda_49)
    # Getting the type of '_stypy_temp_lambda_49' (line 1804)
    _stypy_temp_lambda_49_185912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 22), '_stypy_temp_lambda_49')
    # Assigning a type to the variable 'inp' (line 1804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 16), 'inp', _stypy_temp_lambda_49_185912)
    
    # Assigning a Subscript to a Name (line 1805):
    
    # Assigning a Subscript to a Name (line 1805):
    
    # Obtaining the type of the subscript
    # Getting the type of 'o' (line 1805)
    o_185913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 47), 'o')
    slice_185914 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1805, 22), o_185913, None, None)
    
    # Call to empty(...): (line 1805)
    # Processing the call arguments (line 1805)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1805)
    tuple_185916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1805, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1805)
    # Adding element type (line 1805)
    # Getting the type of 's' (line 1805)
    s_185917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 29), 's', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1805, 29), tuple_185916, s_185917)
    
    # Processing the call keyword arguments (line 1805)
    # Getting the type of 'dtype' (line 1805)
    dtype_185918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 40), 'dtype', False)
    keyword_185919 = dtype_185918
    kwargs_185920 = {'dtype': keyword_185919}
    # Getting the type of 'empty' (line 1805)
    empty_185915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 22), 'empty', False)
    # Calling empty(args, kwargs) (line 1805)
    empty_call_result_185921 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 22), empty_185915, *[tuple_185916], **kwargs_185920)
    
    # Obtaining the member '__getitem__' of a type (line 1805)
    getitem___185922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 22), empty_call_result_185921, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1805)
    subscript_call_result_185923 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 22), getitem___185922, slice_185914)
    
    # Assigning a type to the variable 'out' (line 1805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 16), 'out', subscript_call_result_185923)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1806)
    tuple_185924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1806)
    # Adding element type (line 1806)
    # Getting the type of 'out' (line 1806)
    out_185925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 22), 'out')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 22), tuple_185924, out_185925)
    # Adding element type (line 1806)
    
    # Call to inp(...): (line 1806)
    # Processing the call keyword arguments (line 1806)
    kwargs_185927 = {}
    # Getting the type of 'inp' (line 1806)
    inp_185926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 27), 'inp', False)
    # Calling inp(args, kwargs) (line 1806)
    inp_call_result_185928 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 27), inp_185926, *[], **kwargs_185927)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 22), tuple_185924, inp_call_result_185928)
    # Adding element type (line 1806)
    # Getting the type of 'ufmt' (line 1806)
    ufmt_185929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 34), 'ufmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1806)
    tuple_185930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1806)
    # Adding element type (line 1806)
    # Getting the type of 'o' (line 1806)
    o_185931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 42), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 42), tuple_185930, o_185931)
    # Adding element type (line 1806)
    # Getting the type of 'o' (line 1806)
    o_185932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 45), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 42), tuple_185930, o_185932)
    # Adding element type (line 1806)
    # Getting the type of 's' (line 1806)
    s_185933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 48), 's')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 42), tuple_185930, s_185933)
    # Adding element type (line 1806)
    # Getting the type of 'dtype' (line 1806)
    dtype_185934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 51), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 42), tuple_185930, dtype_185934)
    # Adding element type (line 1806)
    str_185935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 58), 'str', 'out of place')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 42), tuple_185930, str_185935)
    
    # Applying the binary operator '%' (line 1806)
    result_mod_185936 = python_operator(stypy.reporting.localization.Localization(__file__, 1806, 34), '%', ufmt_185929, tuple_185930)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 22), tuple_185924, result_mod_185936)
    
    GeneratorType_185937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 16), GeneratorType_185937, tuple_185924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 16), 'stypy_return_type', GeneratorType_185937)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1807)
    tuple_185938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1807)
    # Adding element type (line 1807)
    
    # Call to inp(...): (line 1807)
    # Processing the call keyword arguments (line 1807)
    kwargs_185940 = {}
    # Getting the type of 'inp' (line 1807)
    inp_185939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 22), 'inp', False)
    # Calling inp(args, kwargs) (line 1807)
    inp_call_result_185941 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 22), inp_185939, *[], **kwargs_185940)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 22), tuple_185938, inp_call_result_185941)
    # Adding element type (line 1807)
    
    # Call to inp(...): (line 1807)
    # Processing the call keyword arguments (line 1807)
    kwargs_185943 = {}
    # Getting the type of 'inp' (line 1807)
    inp_185942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 29), 'inp', False)
    # Calling inp(args, kwargs) (line 1807)
    inp_call_result_185944 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 29), inp_185942, *[], **kwargs_185943)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 22), tuple_185938, inp_call_result_185944)
    # Adding element type (line 1807)
    # Getting the type of 'ufmt' (line 1807)
    ufmt_185945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 36), 'ufmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1807)
    tuple_185946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1807)
    # Adding element type (line 1807)
    # Getting the type of 'o' (line 1807)
    o_185947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 44), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 44), tuple_185946, o_185947)
    # Adding element type (line 1807)
    # Getting the type of 'o' (line 1807)
    o_185948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 47), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 44), tuple_185946, o_185948)
    # Adding element type (line 1807)
    # Getting the type of 's' (line 1807)
    s_185949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 50), 's')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 44), tuple_185946, s_185949)
    # Adding element type (line 1807)
    # Getting the type of 'dtype' (line 1807)
    dtype_185950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 53), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 44), tuple_185946, dtype_185950)
    # Adding element type (line 1807)
    str_185951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 60), 'str', 'in place')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 44), tuple_185946, str_185951)
    
    # Applying the binary operator '%' (line 1807)
    result_mod_185952 = python_operator(stypy.reporting.localization.Localization(__file__, 1807, 36), '%', ufmt_185945, tuple_185946)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 22), tuple_185938, result_mod_185952)
    
    GeneratorType_185953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 16), GeneratorType_185953, tuple_185938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1807, 16), 'stypy_return_type', GeneratorType_185953)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1808)
    tuple_185954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1808)
    # Adding element type (line 1808)
    
    # Obtaining the type of the subscript
    int_185955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 26), 'int')
    slice_185956 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1808, 22), int_185955, None, None)
    # Getting the type of 'out' (line 1808)
    out_185957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 22), 'out')
    # Obtaining the member '__getitem__' of a type (line 1808)
    getitem___185958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 22), out_185957, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1808)
    subscript_call_result_185959 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 22), getitem___185958, slice_185956)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1808, 22), tuple_185954, subscript_call_result_185959)
    # Adding element type (line 1808)
    
    # Obtaining the type of the subscript
    int_185960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 38), 'int')
    slice_185961 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1808, 31), None, int_185960, None)
    
    # Call to inp(...): (line 1808)
    # Processing the call keyword arguments (line 1808)
    kwargs_185963 = {}
    # Getting the type of 'inp' (line 1808)
    inp_185962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 31), 'inp', False)
    # Calling inp(args, kwargs) (line 1808)
    inp_call_result_185964 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 31), inp_185962, *[], **kwargs_185963)
    
    # Obtaining the member '__getitem__' of a type (line 1808)
    getitem___185965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 31), inp_call_result_185964, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1808)
    subscript_call_result_185966 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 31), getitem___185965, slice_185961)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1808, 22), tuple_185954, subscript_call_result_185966)
    # Adding element type (line 1808)
    # Getting the type of 'ufmt' (line 1808)
    ufmt_185967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 43), 'ufmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1809)
    tuple_185968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1809)
    # Adding element type (line 1809)
    # Getting the type of 'o' (line 1809)
    o_185969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 21), 'o')
    int_185970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 25), 'int')
    # Applying the binary operator '+' (line 1809)
    result_add_185971 = python_operator(stypy.reporting.localization.Localization(__file__, 1809, 21), '+', o_185969, int_185970)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 21), tuple_185968, result_add_185971)
    # Adding element type (line 1809)
    # Getting the type of 'o' (line 1809)
    o_185972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 28), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 21), tuple_185968, o_185972)
    # Adding element type (line 1809)
    # Getting the type of 's' (line 1809)
    s_185973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 31), 's')
    int_185974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 35), 'int')
    # Applying the binary operator '-' (line 1809)
    result_sub_185975 = python_operator(stypy.reporting.localization.Localization(__file__, 1809, 31), '-', s_185973, int_185974)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 21), tuple_185968, result_sub_185975)
    # Adding element type (line 1809)
    # Getting the type of 'dtype' (line 1809)
    dtype_185976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 38), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 21), tuple_185968, dtype_185976)
    # Adding element type (line 1809)
    str_185977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 45), 'str', 'out of place')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 21), tuple_185968, str_185977)
    
    # Applying the binary operator '%' (line 1808)
    result_mod_185978 = python_operator(stypy.reporting.localization.Localization(__file__, 1808, 43), '%', ufmt_185967, tuple_185968)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1808, 22), tuple_185954, result_mod_185978)
    
    GeneratorType_185979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1808, 16), GeneratorType_185979, tuple_185954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 16), 'stypy_return_type', GeneratorType_185979)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1810)
    tuple_185980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1810)
    # Adding element type (line 1810)
    
    # Obtaining the type of the subscript
    int_185981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 27), 'int')
    slice_185982 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1810, 22), None, int_185981, None)
    # Getting the type of 'out' (line 1810)
    out_185983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 22), 'out')
    # Obtaining the member '__getitem__' of a type (line 1810)
    getitem___185984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 22), out_185983, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1810)
    subscript_call_result_185985 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 22), getitem___185984, slice_185982)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 22), tuple_185980, subscript_call_result_185985)
    # Adding element type (line 1810)
    
    # Obtaining the type of the subscript
    int_185986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 38), 'int')
    slice_185987 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1810, 32), int_185986, None, None)
    
    # Call to inp(...): (line 1810)
    # Processing the call keyword arguments (line 1810)
    kwargs_185989 = {}
    # Getting the type of 'inp' (line 1810)
    inp_185988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 32), 'inp', False)
    # Calling inp(args, kwargs) (line 1810)
    inp_call_result_185990 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 32), inp_185988, *[], **kwargs_185989)
    
    # Obtaining the member '__getitem__' of a type (line 1810)
    getitem___185991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 32), inp_call_result_185990, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1810)
    subscript_call_result_185992 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 32), getitem___185991, slice_185987)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 22), tuple_185980, subscript_call_result_185992)
    # Adding element type (line 1810)
    # Getting the type of 'ufmt' (line 1810)
    ufmt_185993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 43), 'ufmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1811)
    tuple_185994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1811)
    # Adding element type (line 1811)
    # Getting the type of 'o' (line 1811)
    o_185995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 21), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1811, 21), tuple_185994, o_185995)
    # Adding element type (line 1811)
    # Getting the type of 'o' (line 1811)
    o_185996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 24), 'o')
    int_185997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 28), 'int')
    # Applying the binary operator '+' (line 1811)
    result_add_185998 = python_operator(stypy.reporting.localization.Localization(__file__, 1811, 24), '+', o_185996, int_185997)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1811, 21), tuple_185994, result_add_185998)
    # Adding element type (line 1811)
    # Getting the type of 's' (line 1811)
    s_185999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 31), 's')
    int_186000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 35), 'int')
    # Applying the binary operator '-' (line 1811)
    result_sub_186001 = python_operator(stypy.reporting.localization.Localization(__file__, 1811, 31), '-', s_185999, int_186000)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1811, 21), tuple_185994, result_sub_186001)
    # Adding element type (line 1811)
    # Getting the type of 'dtype' (line 1811)
    dtype_186002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 38), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1811, 21), tuple_185994, dtype_186002)
    # Adding element type (line 1811)
    str_186003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 45), 'str', 'out of place')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1811, 21), tuple_185994, str_186003)
    
    # Applying the binary operator '%' (line 1810)
    result_mod_186004 = python_operator(stypy.reporting.localization.Localization(__file__, 1810, 43), '%', ufmt_185993, tuple_185994)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 22), tuple_185980, result_mod_186004)
    
    GeneratorType_186005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 16), GeneratorType_186005, tuple_185980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 16), 'stypy_return_type', GeneratorType_186005)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1812)
    tuple_186006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1812)
    # Adding element type (line 1812)
    
    # Obtaining the type of the subscript
    int_186007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 29), 'int')
    slice_186008 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1812, 22), None, int_186007, None)
    
    # Call to inp(...): (line 1812)
    # Processing the call keyword arguments (line 1812)
    kwargs_186010 = {}
    # Getting the type of 'inp' (line 1812)
    inp_186009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 22), 'inp', False)
    # Calling inp(args, kwargs) (line 1812)
    inp_call_result_186011 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 22), inp_186009, *[], **kwargs_186010)
    
    # Obtaining the member '__getitem__' of a type (line 1812)
    getitem___186012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 22), inp_call_result_186011, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1812)
    subscript_call_result_186013 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 22), getitem___186012, slice_186008)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 22), tuple_186006, subscript_call_result_186013)
    # Adding element type (line 1812)
    
    # Obtaining the type of the subscript
    int_186014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 40), 'int')
    slice_186015 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1812, 34), int_186014, None, None)
    
    # Call to inp(...): (line 1812)
    # Processing the call keyword arguments (line 1812)
    kwargs_186017 = {}
    # Getting the type of 'inp' (line 1812)
    inp_186016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 34), 'inp', False)
    # Calling inp(args, kwargs) (line 1812)
    inp_call_result_186018 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 34), inp_186016, *[], **kwargs_186017)
    
    # Obtaining the member '__getitem__' of a type (line 1812)
    getitem___186019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 34), inp_call_result_186018, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1812)
    subscript_call_result_186020 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 34), getitem___186019, slice_186015)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 22), tuple_186006, subscript_call_result_186020)
    # Adding element type (line 1812)
    # Getting the type of 'ufmt' (line 1812)
    ufmt_186021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 45), 'ufmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1813)
    tuple_186022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1813)
    # Adding element type (line 1813)
    # Getting the type of 'o' (line 1813)
    o_186023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 21), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 21), tuple_186022, o_186023)
    # Adding element type (line 1813)
    # Getting the type of 'o' (line 1813)
    o_186024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 24), 'o')
    int_186025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 28), 'int')
    # Applying the binary operator '+' (line 1813)
    result_add_186026 = python_operator(stypy.reporting.localization.Localization(__file__, 1813, 24), '+', o_186024, int_186025)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 21), tuple_186022, result_add_186026)
    # Adding element type (line 1813)
    # Getting the type of 's' (line 1813)
    s_186027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 31), 's')
    int_186028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 35), 'int')
    # Applying the binary operator '-' (line 1813)
    result_sub_186029 = python_operator(stypy.reporting.localization.Localization(__file__, 1813, 31), '-', s_186027, int_186028)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 21), tuple_186022, result_sub_186029)
    # Adding element type (line 1813)
    # Getting the type of 'dtype' (line 1813)
    dtype_186030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 38), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 21), tuple_186022, dtype_186030)
    # Adding element type (line 1813)
    str_186031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 45), 'str', 'aliased')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 21), tuple_186022, str_186031)
    
    # Applying the binary operator '%' (line 1812)
    result_mod_186032 = python_operator(stypy.reporting.localization.Localization(__file__, 1812, 45), '%', ufmt_186021, tuple_186022)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 22), tuple_186006, result_mod_186032)
    
    GeneratorType_186033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 16), GeneratorType_186033, tuple_186006)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 16), 'stypy_return_type', GeneratorType_186033)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1814)
    tuple_186034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1814)
    # Adding element type (line 1814)
    
    # Obtaining the type of the subscript
    int_186035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 28), 'int')
    slice_186036 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1814, 22), int_186035, None, None)
    
    # Call to inp(...): (line 1814)
    # Processing the call keyword arguments (line 1814)
    kwargs_186038 = {}
    # Getting the type of 'inp' (line 1814)
    inp_186037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 22), 'inp', False)
    # Calling inp(args, kwargs) (line 1814)
    inp_call_result_186039 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 22), inp_186037, *[], **kwargs_186038)
    
    # Obtaining the member '__getitem__' of a type (line 1814)
    getitem___186040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 22), inp_call_result_186039, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1814)
    subscript_call_result_186041 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 22), getitem___186040, slice_186036)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1814, 22), tuple_186034, subscript_call_result_186041)
    # Adding element type (line 1814)
    
    # Obtaining the type of the subscript
    int_186042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 40), 'int')
    slice_186043 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1814, 33), None, int_186042, None)
    
    # Call to inp(...): (line 1814)
    # Processing the call keyword arguments (line 1814)
    kwargs_186045 = {}
    # Getting the type of 'inp' (line 1814)
    inp_186044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 33), 'inp', False)
    # Calling inp(args, kwargs) (line 1814)
    inp_call_result_186046 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 33), inp_186044, *[], **kwargs_186045)
    
    # Obtaining the member '__getitem__' of a type (line 1814)
    getitem___186047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 33), inp_call_result_186046, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1814)
    subscript_call_result_186048 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 33), getitem___186047, slice_186043)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1814, 22), tuple_186034, subscript_call_result_186048)
    # Adding element type (line 1814)
    # Getting the type of 'ufmt' (line 1814)
    ufmt_186049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 45), 'ufmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1815)
    tuple_186050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1815)
    # Adding element type (line 1815)
    # Getting the type of 'o' (line 1815)
    o_186051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 21), 'o')
    int_186052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 25), 'int')
    # Applying the binary operator '+' (line 1815)
    result_add_186053 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 21), '+', o_186051, int_186052)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1815, 21), tuple_186050, result_add_186053)
    # Adding element type (line 1815)
    # Getting the type of 'o' (line 1815)
    o_186054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 28), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1815, 21), tuple_186050, o_186054)
    # Adding element type (line 1815)
    # Getting the type of 's' (line 1815)
    s_186055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 31), 's')
    int_186056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 35), 'int')
    # Applying the binary operator '-' (line 1815)
    result_sub_186057 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 31), '-', s_186055, int_186056)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1815, 21), tuple_186050, result_sub_186057)
    # Adding element type (line 1815)
    # Getting the type of 'dtype' (line 1815)
    dtype_186058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 38), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1815, 21), tuple_186050, dtype_186058)
    # Adding element type (line 1815)
    str_186059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 45), 'str', 'aliased')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1815, 21), tuple_186050, str_186059)
    
    # Applying the binary operator '%' (line 1814)
    result_mod_186060 = python_operator(stypy.reporting.localization.Localization(__file__, 1814, 45), '%', ufmt_186049, tuple_186050)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1814, 22), tuple_186034, result_mod_186060)
    
    GeneratorType_186061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1814, 16), GeneratorType_186061, tuple_186034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 16), 'stypy_return_type', GeneratorType_186061)
    # SSA join for if statement (line 1803)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'type' (line 1816)
    type_186062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 15), 'type')
    str_186063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 23), 'str', 'binary')
    # Applying the binary operator '==' (line 1816)
    result_eq_186064 = python_operator(stypy.reporting.localization.Localization(__file__, 1816, 15), '==', type_186062, str_186063)
    
    # Testing the type of an if condition (line 1816)
    if_condition_186065 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1816, 12), result_eq_186064)
    # Assigning a type to the variable 'if_condition_186065' (line 1816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 12), 'if_condition_186065', if_condition_186065)
    # SSA begins for if statement (line 1816)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Lambda to a Name (line 1817):
    
    # Assigning a Lambda to a Name (line 1817):

    @norecursion
    def _stypy_temp_lambda_50(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_50'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_50', 1817, 23, True)
        # Passed parameters checking function
        _stypy_temp_lambda_50.stypy_localization = localization
        _stypy_temp_lambda_50.stypy_type_of_self = None
        _stypy_temp_lambda_50.stypy_type_store = module_type_store
        _stypy_temp_lambda_50.stypy_function_name = '_stypy_temp_lambda_50'
        _stypy_temp_lambda_50.stypy_param_names_list = []
        _stypy_temp_lambda_50.stypy_varargs_param_name = None
        _stypy_temp_lambda_50.stypy_kwargs_param_name = None
        _stypy_temp_lambda_50.stypy_call_defaults = defaults
        _stypy_temp_lambda_50.stypy_call_varargs = varargs
        _stypy_temp_lambda_50.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_50', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_50', [], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Obtaining the type of the subscript
        # Getting the type of 'o' (line 1817)
        o_186066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 54), 'o')
        slice_186067 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1817, 31), o_186066, None, None)
        
        # Call to arange(...): (line 1817)
        # Processing the call arguments (line 1817)
        # Getting the type of 's' (line 1817)
        s_186069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 38), 's', False)
        # Processing the call keyword arguments (line 1817)
        # Getting the type of 'dtype' (line 1817)
        dtype_186070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 47), 'dtype', False)
        keyword_186071 = dtype_186070
        kwargs_186072 = {'dtype': keyword_186071}
        # Getting the type of 'arange' (line 1817)
        arange_186068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 31), 'arange', False)
        # Calling arange(args, kwargs) (line 1817)
        arange_call_result_186073 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 31), arange_186068, *[s_186069], **kwargs_186072)
        
        # Obtaining the member '__getitem__' of a type (line 1817)
        getitem___186074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 31), arange_call_result_186073, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1817)
        subscript_call_result_186075 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 31), getitem___186074, slice_186067)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 23), 'stypy_return_type', subscript_call_result_186075)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_50' in the type store
        # Getting the type of 'stypy_return_type' (line 1817)
        stypy_return_type_186076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 23), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_186076)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_50'
        return stypy_return_type_186076

    # Assigning a type to the variable '_stypy_temp_lambda_50' (line 1817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 23), '_stypy_temp_lambda_50', _stypy_temp_lambda_50)
    # Getting the type of '_stypy_temp_lambda_50' (line 1817)
    _stypy_temp_lambda_50_186077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 23), '_stypy_temp_lambda_50')
    # Assigning a type to the variable 'inp1' (line 1817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 16), 'inp1', _stypy_temp_lambda_50_186077)
    
    # Assigning a Lambda to a Name (line 1818):
    
    # Assigning a Lambda to a Name (line 1818):

    @norecursion
    def _stypy_temp_lambda_51(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_51'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_51', 1818, 23, True)
        # Passed parameters checking function
        _stypy_temp_lambda_51.stypy_localization = localization
        _stypy_temp_lambda_51.stypy_type_of_self = None
        _stypy_temp_lambda_51.stypy_type_store = module_type_store
        _stypy_temp_lambda_51.stypy_function_name = '_stypy_temp_lambda_51'
        _stypy_temp_lambda_51.stypy_param_names_list = []
        _stypy_temp_lambda_51.stypy_varargs_param_name = None
        _stypy_temp_lambda_51.stypy_kwargs_param_name = None
        _stypy_temp_lambda_51.stypy_call_defaults = defaults
        _stypy_temp_lambda_51.stypy_call_varargs = varargs
        _stypy_temp_lambda_51.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_51', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_51', [], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Obtaining the type of the subscript
        # Getting the type of 'o' (line 1818)
        o_186078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 54), 'o')
        slice_186079 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1818, 31), o_186078, None, None)
        
        # Call to arange(...): (line 1818)
        # Processing the call arguments (line 1818)
        # Getting the type of 's' (line 1818)
        s_186081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 38), 's', False)
        # Processing the call keyword arguments (line 1818)
        # Getting the type of 'dtype' (line 1818)
        dtype_186082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 47), 'dtype', False)
        keyword_186083 = dtype_186082
        kwargs_186084 = {'dtype': keyword_186083}
        # Getting the type of 'arange' (line 1818)
        arange_186080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 31), 'arange', False)
        # Calling arange(args, kwargs) (line 1818)
        arange_call_result_186085 = invoke(stypy.reporting.localization.Localization(__file__, 1818, 31), arange_186080, *[s_186081], **kwargs_186084)
        
        # Obtaining the member '__getitem__' of a type (line 1818)
        getitem___186086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1818, 31), arange_call_result_186085, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1818)
        subscript_call_result_186087 = invoke(stypy.reporting.localization.Localization(__file__, 1818, 31), getitem___186086, slice_186079)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 23), 'stypy_return_type', subscript_call_result_186087)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_51' in the type store
        # Getting the type of 'stypy_return_type' (line 1818)
        stypy_return_type_186088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 23), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_186088)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_51'
        return stypy_return_type_186088

    # Assigning a type to the variable '_stypy_temp_lambda_51' (line 1818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 23), '_stypy_temp_lambda_51', _stypy_temp_lambda_51)
    # Getting the type of '_stypy_temp_lambda_51' (line 1818)
    _stypy_temp_lambda_51_186089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 23), '_stypy_temp_lambda_51')
    # Assigning a type to the variable 'inp2' (line 1818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 16), 'inp2', _stypy_temp_lambda_51_186089)
    
    # Assigning a Subscript to a Name (line 1819):
    
    # Assigning a Subscript to a Name (line 1819):
    
    # Obtaining the type of the subscript
    # Getting the type of 'o' (line 1819)
    o_186090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 47), 'o')
    slice_186091 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1819, 22), o_186090, None, None)
    
    # Call to empty(...): (line 1819)
    # Processing the call arguments (line 1819)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1819)
    tuple_186093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1819)
    # Adding element type (line 1819)
    # Getting the type of 's' (line 1819)
    s_186094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 29), 's', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1819, 29), tuple_186093, s_186094)
    
    # Processing the call keyword arguments (line 1819)
    # Getting the type of 'dtype' (line 1819)
    dtype_186095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 40), 'dtype', False)
    keyword_186096 = dtype_186095
    kwargs_186097 = {'dtype': keyword_186096}
    # Getting the type of 'empty' (line 1819)
    empty_186092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 22), 'empty', False)
    # Calling empty(args, kwargs) (line 1819)
    empty_call_result_186098 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 22), empty_186092, *[tuple_186093], **kwargs_186097)
    
    # Obtaining the member '__getitem__' of a type (line 1819)
    getitem___186099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 22), empty_call_result_186098, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1819)
    subscript_call_result_186100 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 22), getitem___186099, slice_186091)
    
    # Assigning a type to the variable 'out' (line 1819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 16), 'out', subscript_call_result_186100)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1820)
    tuple_186101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1820, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1820)
    # Adding element type (line 1820)
    # Getting the type of 'out' (line 1820)
    out_186102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 22), 'out')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1820, 22), tuple_186101, out_186102)
    # Adding element type (line 1820)
    
    # Call to inp1(...): (line 1820)
    # Processing the call keyword arguments (line 1820)
    kwargs_186104 = {}
    # Getting the type of 'inp1' (line 1820)
    inp1_186103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 27), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1820)
    inp1_call_result_186105 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 27), inp1_186103, *[], **kwargs_186104)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1820, 22), tuple_186101, inp1_call_result_186105)
    # Adding element type (line 1820)
    
    # Call to inp2(...): (line 1820)
    # Processing the call keyword arguments (line 1820)
    kwargs_186107 = {}
    # Getting the type of 'inp2' (line 1820)
    inp2_186106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 35), 'inp2', False)
    # Calling inp2(args, kwargs) (line 1820)
    inp2_call_result_186108 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 35), inp2_186106, *[], **kwargs_186107)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1820, 22), tuple_186101, inp2_call_result_186108)
    # Adding element type (line 1820)
    # Getting the type of 'bfmt' (line 1820)
    bfmt_186109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 44), 'bfmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1821)
    tuple_186110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1821, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1821)
    # Adding element type (line 1821)
    # Getting the type of 'o' (line 1821)
    o_186111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 21), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1821, 21), tuple_186110, o_186111)
    # Adding element type (line 1821)
    # Getting the type of 'o' (line 1821)
    o_186112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 24), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1821, 21), tuple_186110, o_186112)
    # Adding element type (line 1821)
    # Getting the type of 'o' (line 1821)
    o_186113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 27), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1821, 21), tuple_186110, o_186113)
    # Adding element type (line 1821)
    # Getting the type of 's' (line 1821)
    s_186114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 30), 's')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1821, 21), tuple_186110, s_186114)
    # Adding element type (line 1821)
    # Getting the type of 'dtype' (line 1821)
    dtype_186115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 33), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1821, 21), tuple_186110, dtype_186115)
    # Adding element type (line 1821)
    str_186116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1821, 40), 'str', 'out of place')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1821, 21), tuple_186110, str_186116)
    
    # Applying the binary operator '%' (line 1820)
    result_mod_186117 = python_operator(stypy.reporting.localization.Localization(__file__, 1820, 44), '%', bfmt_186109, tuple_186110)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1820, 22), tuple_186101, result_mod_186117)
    
    GeneratorType_186118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1820, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1820, 16), GeneratorType_186118, tuple_186101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 16), 'stypy_return_type', GeneratorType_186118)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1822)
    tuple_186119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1822)
    # Adding element type (line 1822)
    
    # Call to inp1(...): (line 1822)
    # Processing the call keyword arguments (line 1822)
    kwargs_186121 = {}
    # Getting the type of 'inp1' (line 1822)
    inp1_186120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 22), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1822)
    inp1_call_result_186122 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 22), inp1_186120, *[], **kwargs_186121)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1822, 22), tuple_186119, inp1_call_result_186122)
    # Adding element type (line 1822)
    
    # Call to inp1(...): (line 1822)
    # Processing the call keyword arguments (line 1822)
    kwargs_186124 = {}
    # Getting the type of 'inp1' (line 1822)
    inp1_186123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 30), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1822)
    inp1_call_result_186125 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 30), inp1_186123, *[], **kwargs_186124)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1822, 22), tuple_186119, inp1_call_result_186125)
    # Adding element type (line 1822)
    
    # Call to inp2(...): (line 1822)
    # Processing the call keyword arguments (line 1822)
    kwargs_186127 = {}
    # Getting the type of 'inp2' (line 1822)
    inp2_186126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 38), 'inp2', False)
    # Calling inp2(args, kwargs) (line 1822)
    inp2_call_result_186128 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 38), inp2_186126, *[], **kwargs_186127)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1822, 22), tuple_186119, inp2_call_result_186128)
    # Adding element type (line 1822)
    # Getting the type of 'bfmt' (line 1822)
    bfmt_186129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 46), 'bfmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1823)
    tuple_186130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1823, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1823)
    # Adding element type (line 1823)
    # Getting the type of 'o' (line 1823)
    o_186131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 21), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1823, 21), tuple_186130, o_186131)
    # Adding element type (line 1823)
    # Getting the type of 'o' (line 1823)
    o_186132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 24), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1823, 21), tuple_186130, o_186132)
    # Adding element type (line 1823)
    # Getting the type of 'o' (line 1823)
    o_186133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 27), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1823, 21), tuple_186130, o_186133)
    # Adding element type (line 1823)
    # Getting the type of 's' (line 1823)
    s_186134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 30), 's')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1823, 21), tuple_186130, s_186134)
    # Adding element type (line 1823)
    # Getting the type of 'dtype' (line 1823)
    dtype_186135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 33), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1823, 21), tuple_186130, dtype_186135)
    # Adding element type (line 1823)
    str_186136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1823, 40), 'str', 'in place1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1823, 21), tuple_186130, str_186136)
    
    # Applying the binary operator '%' (line 1822)
    result_mod_186137 = python_operator(stypy.reporting.localization.Localization(__file__, 1822, 46), '%', bfmt_186129, tuple_186130)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1822, 22), tuple_186119, result_mod_186137)
    
    GeneratorType_186138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1822, 16), GeneratorType_186138, tuple_186119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 16), 'stypy_return_type', GeneratorType_186138)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1824)
    tuple_186139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1824, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1824)
    # Adding element type (line 1824)
    
    # Call to inp2(...): (line 1824)
    # Processing the call keyword arguments (line 1824)
    kwargs_186141 = {}
    # Getting the type of 'inp2' (line 1824)
    inp2_186140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 22), 'inp2', False)
    # Calling inp2(args, kwargs) (line 1824)
    inp2_call_result_186142 = invoke(stypy.reporting.localization.Localization(__file__, 1824, 22), inp2_186140, *[], **kwargs_186141)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1824, 22), tuple_186139, inp2_call_result_186142)
    # Adding element type (line 1824)
    
    # Call to inp1(...): (line 1824)
    # Processing the call keyword arguments (line 1824)
    kwargs_186144 = {}
    # Getting the type of 'inp1' (line 1824)
    inp1_186143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 30), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1824)
    inp1_call_result_186145 = invoke(stypy.reporting.localization.Localization(__file__, 1824, 30), inp1_186143, *[], **kwargs_186144)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1824, 22), tuple_186139, inp1_call_result_186145)
    # Adding element type (line 1824)
    
    # Call to inp2(...): (line 1824)
    # Processing the call keyword arguments (line 1824)
    kwargs_186147 = {}
    # Getting the type of 'inp2' (line 1824)
    inp2_186146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 38), 'inp2', False)
    # Calling inp2(args, kwargs) (line 1824)
    inp2_call_result_186148 = invoke(stypy.reporting.localization.Localization(__file__, 1824, 38), inp2_186146, *[], **kwargs_186147)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1824, 22), tuple_186139, inp2_call_result_186148)
    # Adding element type (line 1824)
    # Getting the type of 'bfmt' (line 1824)
    bfmt_186149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 46), 'bfmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1825)
    tuple_186150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1825)
    # Adding element type (line 1825)
    # Getting the type of 'o' (line 1825)
    o_186151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 21), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1825, 21), tuple_186150, o_186151)
    # Adding element type (line 1825)
    # Getting the type of 'o' (line 1825)
    o_186152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 24), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1825, 21), tuple_186150, o_186152)
    # Adding element type (line 1825)
    # Getting the type of 'o' (line 1825)
    o_186153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 27), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1825, 21), tuple_186150, o_186153)
    # Adding element type (line 1825)
    # Getting the type of 's' (line 1825)
    s_186154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 30), 's')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1825, 21), tuple_186150, s_186154)
    # Adding element type (line 1825)
    # Getting the type of 'dtype' (line 1825)
    dtype_186155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 33), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1825, 21), tuple_186150, dtype_186155)
    # Adding element type (line 1825)
    str_186156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 40), 'str', 'in place2')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1825, 21), tuple_186150, str_186156)
    
    # Applying the binary operator '%' (line 1824)
    result_mod_186157 = python_operator(stypy.reporting.localization.Localization(__file__, 1824, 46), '%', bfmt_186149, tuple_186150)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1824, 22), tuple_186139, result_mod_186157)
    
    GeneratorType_186158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1824, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1824, 16), GeneratorType_186158, tuple_186139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1824, 16), 'stypy_return_type', GeneratorType_186158)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1826)
    tuple_186159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1826, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1826)
    # Adding element type (line 1826)
    
    # Obtaining the type of the subscript
    int_186160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1826, 26), 'int')
    slice_186161 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1826, 22), int_186160, None, None)
    # Getting the type of 'out' (line 1826)
    out_186162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 22), 'out')
    # Obtaining the member '__getitem__' of a type (line 1826)
    getitem___186163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1826, 22), out_186162, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1826)
    subscript_call_result_186164 = invoke(stypy.reporting.localization.Localization(__file__, 1826, 22), getitem___186163, slice_186161)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1826, 22), tuple_186159, subscript_call_result_186164)
    # Adding element type (line 1826)
    
    # Obtaining the type of the subscript
    int_186165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1826, 39), 'int')
    slice_186166 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1826, 31), None, int_186165, None)
    
    # Call to inp1(...): (line 1826)
    # Processing the call keyword arguments (line 1826)
    kwargs_186168 = {}
    # Getting the type of 'inp1' (line 1826)
    inp1_186167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 31), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1826)
    inp1_call_result_186169 = invoke(stypy.reporting.localization.Localization(__file__, 1826, 31), inp1_186167, *[], **kwargs_186168)
    
    # Obtaining the member '__getitem__' of a type (line 1826)
    getitem___186170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1826, 31), inp1_call_result_186169, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1826)
    subscript_call_result_186171 = invoke(stypy.reporting.localization.Localization(__file__, 1826, 31), getitem___186170, slice_186166)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1826, 22), tuple_186159, subscript_call_result_186171)
    # Adding element type (line 1826)
    
    # Obtaining the type of the subscript
    int_186172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1826, 52), 'int')
    slice_186173 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1826, 44), None, int_186172, None)
    
    # Call to inp2(...): (line 1826)
    # Processing the call keyword arguments (line 1826)
    kwargs_186175 = {}
    # Getting the type of 'inp2' (line 1826)
    inp2_186174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 44), 'inp2', False)
    # Calling inp2(args, kwargs) (line 1826)
    inp2_call_result_186176 = invoke(stypy.reporting.localization.Localization(__file__, 1826, 44), inp2_186174, *[], **kwargs_186175)
    
    # Obtaining the member '__getitem__' of a type (line 1826)
    getitem___186177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1826, 44), inp2_call_result_186176, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1826)
    subscript_call_result_186178 = invoke(stypy.reporting.localization.Localization(__file__, 1826, 44), getitem___186177, slice_186173)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1826, 22), tuple_186159, subscript_call_result_186178)
    # Adding element type (line 1826)
    # Getting the type of 'bfmt' (line 1826)
    bfmt_186179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 57), 'bfmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1827)
    tuple_186180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1827)
    # Adding element type (line 1827)
    # Getting the type of 'o' (line 1827)
    o_186181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 21), 'o')
    int_186182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 25), 'int')
    # Applying the binary operator '+' (line 1827)
    result_add_186183 = python_operator(stypy.reporting.localization.Localization(__file__, 1827, 21), '+', o_186181, int_186182)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 21), tuple_186180, result_add_186183)
    # Adding element type (line 1827)
    # Getting the type of 'o' (line 1827)
    o_186184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 28), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 21), tuple_186180, o_186184)
    # Adding element type (line 1827)
    # Getting the type of 'o' (line 1827)
    o_186185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 31), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 21), tuple_186180, o_186185)
    # Adding element type (line 1827)
    # Getting the type of 's' (line 1827)
    s_186186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 34), 's')
    int_186187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 38), 'int')
    # Applying the binary operator '-' (line 1827)
    result_sub_186188 = python_operator(stypy.reporting.localization.Localization(__file__, 1827, 34), '-', s_186186, int_186187)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 21), tuple_186180, result_sub_186188)
    # Adding element type (line 1827)
    # Getting the type of 'dtype' (line 1827)
    dtype_186189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 41), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 21), tuple_186180, dtype_186189)
    # Adding element type (line 1827)
    str_186190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 48), 'str', 'out of place')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1827, 21), tuple_186180, str_186190)
    
    # Applying the binary operator '%' (line 1826)
    result_mod_186191 = python_operator(stypy.reporting.localization.Localization(__file__, 1826, 57), '%', bfmt_186179, tuple_186180)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1826, 22), tuple_186159, result_mod_186191)
    
    GeneratorType_186192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1826, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1826, 16), GeneratorType_186192, tuple_186159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1826, 16), 'stypy_return_type', GeneratorType_186192)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1828)
    tuple_186193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1828)
    # Adding element type (line 1828)
    
    # Obtaining the type of the subscript
    int_186194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 27), 'int')
    slice_186195 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1828, 22), None, int_186194, None)
    # Getting the type of 'out' (line 1828)
    out_186196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 22), 'out')
    # Obtaining the member '__getitem__' of a type (line 1828)
    getitem___186197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 22), out_186196, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1828)
    subscript_call_result_186198 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 22), getitem___186197, slice_186195)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1828, 22), tuple_186193, subscript_call_result_186198)
    # Adding element type (line 1828)
    
    # Obtaining the type of the subscript
    int_186199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 39), 'int')
    slice_186200 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1828, 32), int_186199, None, None)
    
    # Call to inp1(...): (line 1828)
    # Processing the call keyword arguments (line 1828)
    kwargs_186202 = {}
    # Getting the type of 'inp1' (line 1828)
    inp1_186201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 32), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1828)
    inp1_call_result_186203 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 32), inp1_186201, *[], **kwargs_186202)
    
    # Obtaining the member '__getitem__' of a type (line 1828)
    getitem___186204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 32), inp1_call_result_186203, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1828)
    subscript_call_result_186205 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 32), getitem___186204, slice_186200)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1828, 22), tuple_186193, subscript_call_result_186205)
    # Adding element type (line 1828)
    
    # Obtaining the type of the subscript
    int_186206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 52), 'int')
    slice_186207 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1828, 44), None, int_186206, None)
    
    # Call to inp2(...): (line 1828)
    # Processing the call keyword arguments (line 1828)
    kwargs_186209 = {}
    # Getting the type of 'inp2' (line 1828)
    inp2_186208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 44), 'inp2', False)
    # Calling inp2(args, kwargs) (line 1828)
    inp2_call_result_186210 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 44), inp2_186208, *[], **kwargs_186209)
    
    # Obtaining the member '__getitem__' of a type (line 1828)
    getitem___186211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 44), inp2_call_result_186210, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1828)
    subscript_call_result_186212 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 44), getitem___186211, slice_186207)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1828, 22), tuple_186193, subscript_call_result_186212)
    # Adding element type (line 1828)
    # Getting the type of 'bfmt' (line 1828)
    bfmt_186213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 57), 'bfmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1829)
    tuple_186214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1829)
    # Adding element type (line 1829)
    # Getting the type of 'o' (line 1829)
    o_186215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 21), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1829, 21), tuple_186214, o_186215)
    # Adding element type (line 1829)
    # Getting the type of 'o' (line 1829)
    o_186216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 24), 'o')
    int_186217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 28), 'int')
    # Applying the binary operator '+' (line 1829)
    result_add_186218 = python_operator(stypy.reporting.localization.Localization(__file__, 1829, 24), '+', o_186216, int_186217)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1829, 21), tuple_186214, result_add_186218)
    # Adding element type (line 1829)
    # Getting the type of 'o' (line 1829)
    o_186219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 31), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1829, 21), tuple_186214, o_186219)
    # Adding element type (line 1829)
    # Getting the type of 's' (line 1829)
    s_186220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 34), 's')
    int_186221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 38), 'int')
    # Applying the binary operator '-' (line 1829)
    result_sub_186222 = python_operator(stypy.reporting.localization.Localization(__file__, 1829, 34), '-', s_186220, int_186221)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1829, 21), tuple_186214, result_sub_186222)
    # Adding element type (line 1829)
    # Getting the type of 'dtype' (line 1829)
    dtype_186223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 41), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1829, 21), tuple_186214, dtype_186223)
    # Adding element type (line 1829)
    str_186224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 48), 'str', 'out of place')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1829, 21), tuple_186214, str_186224)
    
    # Applying the binary operator '%' (line 1828)
    result_mod_186225 = python_operator(stypy.reporting.localization.Localization(__file__, 1828, 57), '%', bfmt_186213, tuple_186214)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1828, 22), tuple_186193, result_mod_186225)
    
    GeneratorType_186226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1828, 16), GeneratorType_186226, tuple_186193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 16), 'stypy_return_type', GeneratorType_186226)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1830)
    tuple_186227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1830)
    # Adding element type (line 1830)
    
    # Obtaining the type of the subscript
    int_186228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 27), 'int')
    slice_186229 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1830, 22), None, int_186228, None)
    # Getting the type of 'out' (line 1830)
    out_186230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 22), 'out')
    # Obtaining the member '__getitem__' of a type (line 1830)
    getitem___186231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1830, 22), out_186230, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1830)
    subscript_call_result_186232 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 22), getitem___186231, slice_186229)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 22), tuple_186227, subscript_call_result_186232)
    # Adding element type (line 1830)
    
    # Obtaining the type of the subscript
    int_186233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 40), 'int')
    slice_186234 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1830, 32), None, int_186233, None)
    
    # Call to inp1(...): (line 1830)
    # Processing the call keyword arguments (line 1830)
    kwargs_186236 = {}
    # Getting the type of 'inp1' (line 1830)
    inp1_186235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 32), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1830)
    inp1_call_result_186237 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 32), inp1_186235, *[], **kwargs_186236)
    
    # Obtaining the member '__getitem__' of a type (line 1830)
    getitem___186238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1830, 32), inp1_call_result_186237, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1830)
    subscript_call_result_186239 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 32), getitem___186238, slice_186234)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 22), tuple_186227, subscript_call_result_186239)
    # Adding element type (line 1830)
    
    # Obtaining the type of the subscript
    int_186240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 52), 'int')
    slice_186241 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1830, 45), int_186240, None, None)
    
    # Call to inp2(...): (line 1830)
    # Processing the call keyword arguments (line 1830)
    kwargs_186243 = {}
    # Getting the type of 'inp2' (line 1830)
    inp2_186242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 45), 'inp2', False)
    # Calling inp2(args, kwargs) (line 1830)
    inp2_call_result_186244 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 45), inp2_186242, *[], **kwargs_186243)
    
    # Obtaining the member '__getitem__' of a type (line 1830)
    getitem___186245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1830, 45), inp2_call_result_186244, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1830)
    subscript_call_result_186246 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 45), getitem___186245, slice_186241)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 22), tuple_186227, subscript_call_result_186246)
    # Adding element type (line 1830)
    # Getting the type of 'bfmt' (line 1830)
    bfmt_186247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 57), 'bfmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1831)
    tuple_186248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1831)
    # Adding element type (line 1831)
    # Getting the type of 'o' (line 1831)
    o_186249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 21), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 21), tuple_186248, o_186249)
    # Adding element type (line 1831)
    # Getting the type of 'o' (line 1831)
    o_186250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 24), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 21), tuple_186248, o_186250)
    # Adding element type (line 1831)
    # Getting the type of 'o' (line 1831)
    o_186251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 27), 'o')
    int_186252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 31), 'int')
    # Applying the binary operator '+' (line 1831)
    result_add_186253 = python_operator(stypy.reporting.localization.Localization(__file__, 1831, 27), '+', o_186251, int_186252)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 21), tuple_186248, result_add_186253)
    # Adding element type (line 1831)
    # Getting the type of 's' (line 1831)
    s_186254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 34), 's')
    int_186255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 38), 'int')
    # Applying the binary operator '-' (line 1831)
    result_sub_186256 = python_operator(stypy.reporting.localization.Localization(__file__, 1831, 34), '-', s_186254, int_186255)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 21), tuple_186248, result_sub_186256)
    # Adding element type (line 1831)
    # Getting the type of 'dtype' (line 1831)
    dtype_186257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 41), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 21), tuple_186248, dtype_186257)
    # Adding element type (line 1831)
    str_186258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 48), 'str', 'out of place')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 21), tuple_186248, str_186258)
    
    # Applying the binary operator '%' (line 1830)
    result_mod_186259 = python_operator(stypy.reporting.localization.Localization(__file__, 1830, 57), '%', bfmt_186247, tuple_186248)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 22), tuple_186227, result_mod_186259)
    
    GeneratorType_186260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 16), GeneratorType_186260, tuple_186227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1830, 16), 'stypy_return_type', GeneratorType_186260)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1832)
    tuple_186261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1832)
    # Adding element type (line 1832)
    
    # Obtaining the type of the subscript
    int_186262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 29), 'int')
    slice_186263 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1832, 22), int_186262, None, None)
    
    # Call to inp1(...): (line 1832)
    # Processing the call keyword arguments (line 1832)
    kwargs_186265 = {}
    # Getting the type of 'inp1' (line 1832)
    inp1_186264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 22), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1832)
    inp1_call_result_186266 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 22), inp1_186264, *[], **kwargs_186265)
    
    # Obtaining the member '__getitem__' of a type (line 1832)
    getitem___186267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 22), inp1_call_result_186266, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1832)
    subscript_call_result_186268 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 22), getitem___186267, slice_186263)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1832, 22), tuple_186261, subscript_call_result_186268)
    # Adding element type (line 1832)
    
    # Obtaining the type of the subscript
    int_186269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 42), 'int')
    slice_186270 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1832, 34), None, int_186269, None)
    
    # Call to inp1(...): (line 1832)
    # Processing the call keyword arguments (line 1832)
    kwargs_186272 = {}
    # Getting the type of 'inp1' (line 1832)
    inp1_186271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 34), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1832)
    inp1_call_result_186273 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 34), inp1_186271, *[], **kwargs_186272)
    
    # Obtaining the member '__getitem__' of a type (line 1832)
    getitem___186274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 34), inp1_call_result_186273, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1832)
    subscript_call_result_186275 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 34), getitem___186274, slice_186270)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1832, 22), tuple_186261, subscript_call_result_186275)
    # Adding element type (line 1832)
    
    # Obtaining the type of the subscript
    int_186276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 55), 'int')
    slice_186277 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1832, 47), None, int_186276, None)
    
    # Call to inp2(...): (line 1832)
    # Processing the call keyword arguments (line 1832)
    kwargs_186279 = {}
    # Getting the type of 'inp2' (line 1832)
    inp2_186278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 47), 'inp2', False)
    # Calling inp2(args, kwargs) (line 1832)
    inp2_call_result_186280 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 47), inp2_186278, *[], **kwargs_186279)
    
    # Obtaining the member '__getitem__' of a type (line 1832)
    getitem___186281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 47), inp2_call_result_186280, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1832)
    subscript_call_result_186282 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 47), getitem___186281, slice_186277)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1832, 22), tuple_186261, subscript_call_result_186282)
    # Adding element type (line 1832)
    # Getting the type of 'bfmt' (line 1832)
    bfmt_186283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 60), 'bfmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1833)
    tuple_186284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1833)
    # Adding element type (line 1833)
    # Getting the type of 'o' (line 1833)
    o_186285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 21), 'o')
    int_186286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 25), 'int')
    # Applying the binary operator '+' (line 1833)
    result_add_186287 = python_operator(stypy.reporting.localization.Localization(__file__, 1833, 21), '+', o_186285, int_186286)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1833, 21), tuple_186284, result_add_186287)
    # Adding element type (line 1833)
    # Getting the type of 'o' (line 1833)
    o_186288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 28), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1833, 21), tuple_186284, o_186288)
    # Adding element type (line 1833)
    # Getting the type of 'o' (line 1833)
    o_186289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 31), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1833, 21), tuple_186284, o_186289)
    # Adding element type (line 1833)
    # Getting the type of 's' (line 1833)
    s_186290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 34), 's')
    int_186291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 38), 'int')
    # Applying the binary operator '-' (line 1833)
    result_sub_186292 = python_operator(stypy.reporting.localization.Localization(__file__, 1833, 34), '-', s_186290, int_186291)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1833, 21), tuple_186284, result_sub_186292)
    # Adding element type (line 1833)
    # Getting the type of 'dtype' (line 1833)
    dtype_186293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 41), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1833, 21), tuple_186284, dtype_186293)
    # Adding element type (line 1833)
    str_186294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 48), 'str', 'aliased')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1833, 21), tuple_186284, str_186294)
    
    # Applying the binary operator '%' (line 1832)
    result_mod_186295 = python_operator(stypy.reporting.localization.Localization(__file__, 1832, 60), '%', bfmt_186283, tuple_186284)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1832, 22), tuple_186261, result_mod_186295)
    
    GeneratorType_186296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1832, 16), GeneratorType_186296, tuple_186261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 16), 'stypy_return_type', GeneratorType_186296)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1834)
    tuple_186297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1834)
    # Adding element type (line 1834)
    
    # Obtaining the type of the subscript
    int_186298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 30), 'int')
    slice_186299 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1834, 22), None, int_186298, None)
    
    # Call to inp1(...): (line 1834)
    # Processing the call keyword arguments (line 1834)
    kwargs_186301 = {}
    # Getting the type of 'inp1' (line 1834)
    inp1_186300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 22), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1834)
    inp1_call_result_186302 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 22), inp1_186300, *[], **kwargs_186301)
    
    # Obtaining the member '__getitem__' of a type (line 1834)
    getitem___186303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1834, 22), inp1_call_result_186302, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1834)
    subscript_call_result_186304 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 22), getitem___186303, slice_186299)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 22), tuple_186297, subscript_call_result_186304)
    # Adding element type (line 1834)
    
    # Obtaining the type of the subscript
    int_186305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 42), 'int')
    slice_186306 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1834, 35), int_186305, None, None)
    
    # Call to inp1(...): (line 1834)
    # Processing the call keyword arguments (line 1834)
    kwargs_186308 = {}
    # Getting the type of 'inp1' (line 1834)
    inp1_186307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 35), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1834)
    inp1_call_result_186309 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 35), inp1_186307, *[], **kwargs_186308)
    
    # Obtaining the member '__getitem__' of a type (line 1834)
    getitem___186310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1834, 35), inp1_call_result_186309, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1834)
    subscript_call_result_186311 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 35), getitem___186310, slice_186306)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 22), tuple_186297, subscript_call_result_186311)
    # Adding element type (line 1834)
    
    # Obtaining the type of the subscript
    int_186312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 55), 'int')
    slice_186313 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1834, 47), None, int_186312, None)
    
    # Call to inp2(...): (line 1834)
    # Processing the call keyword arguments (line 1834)
    kwargs_186315 = {}
    # Getting the type of 'inp2' (line 1834)
    inp2_186314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 47), 'inp2', False)
    # Calling inp2(args, kwargs) (line 1834)
    inp2_call_result_186316 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 47), inp2_186314, *[], **kwargs_186315)
    
    # Obtaining the member '__getitem__' of a type (line 1834)
    getitem___186317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1834, 47), inp2_call_result_186316, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1834)
    subscript_call_result_186318 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 47), getitem___186317, slice_186313)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 22), tuple_186297, subscript_call_result_186318)
    # Adding element type (line 1834)
    # Getting the type of 'bfmt' (line 1834)
    bfmt_186319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 60), 'bfmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1835)
    tuple_186320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1835, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1835)
    # Adding element type (line 1835)
    # Getting the type of 'o' (line 1835)
    o_186321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 21), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1835, 21), tuple_186320, o_186321)
    # Adding element type (line 1835)
    # Getting the type of 'o' (line 1835)
    o_186322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 24), 'o')
    int_186323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1835, 28), 'int')
    # Applying the binary operator '+' (line 1835)
    result_add_186324 = python_operator(stypy.reporting.localization.Localization(__file__, 1835, 24), '+', o_186322, int_186323)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1835, 21), tuple_186320, result_add_186324)
    # Adding element type (line 1835)
    # Getting the type of 'o' (line 1835)
    o_186325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 31), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1835, 21), tuple_186320, o_186325)
    # Adding element type (line 1835)
    # Getting the type of 's' (line 1835)
    s_186326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 34), 's')
    int_186327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1835, 38), 'int')
    # Applying the binary operator '-' (line 1835)
    result_sub_186328 = python_operator(stypy.reporting.localization.Localization(__file__, 1835, 34), '-', s_186326, int_186327)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1835, 21), tuple_186320, result_sub_186328)
    # Adding element type (line 1835)
    # Getting the type of 'dtype' (line 1835)
    dtype_186329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 41), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1835, 21), tuple_186320, dtype_186329)
    # Adding element type (line 1835)
    str_186330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1835, 48), 'str', 'aliased')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1835, 21), tuple_186320, str_186330)
    
    # Applying the binary operator '%' (line 1834)
    result_mod_186331 = python_operator(stypy.reporting.localization.Localization(__file__, 1834, 60), '%', bfmt_186319, tuple_186320)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 22), tuple_186297, result_mod_186331)
    
    GeneratorType_186332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), GeneratorType_186332, tuple_186297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 16), 'stypy_return_type', GeneratorType_186332)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 1836)
    tuple_186333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1836)
    # Adding element type (line 1836)
    
    # Obtaining the type of the subscript
    int_186334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 30), 'int')
    slice_186335 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1836, 22), None, int_186334, None)
    
    # Call to inp1(...): (line 1836)
    # Processing the call keyword arguments (line 1836)
    kwargs_186337 = {}
    # Getting the type of 'inp1' (line 1836)
    inp1_186336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 22), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1836)
    inp1_call_result_186338 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 22), inp1_186336, *[], **kwargs_186337)
    
    # Obtaining the member '__getitem__' of a type (line 1836)
    getitem___186339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 22), inp1_call_result_186338, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1836)
    subscript_call_result_186340 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 22), getitem___186339, slice_186335)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1836, 22), tuple_186333, subscript_call_result_186340)
    # Adding element type (line 1836)
    
    # Obtaining the type of the subscript
    int_186341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 43), 'int')
    slice_186342 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1836, 35), None, int_186341, None)
    
    # Call to inp1(...): (line 1836)
    # Processing the call keyword arguments (line 1836)
    kwargs_186344 = {}
    # Getting the type of 'inp1' (line 1836)
    inp1_186343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 35), 'inp1', False)
    # Calling inp1(args, kwargs) (line 1836)
    inp1_call_result_186345 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 35), inp1_186343, *[], **kwargs_186344)
    
    # Obtaining the member '__getitem__' of a type (line 1836)
    getitem___186346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 35), inp1_call_result_186345, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1836)
    subscript_call_result_186347 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 35), getitem___186346, slice_186342)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1836, 22), tuple_186333, subscript_call_result_186347)
    # Adding element type (line 1836)
    
    # Obtaining the type of the subscript
    int_186348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 55), 'int')
    slice_186349 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1836, 48), int_186348, None, None)
    
    # Call to inp2(...): (line 1836)
    # Processing the call keyword arguments (line 1836)
    kwargs_186351 = {}
    # Getting the type of 'inp2' (line 1836)
    inp2_186350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 48), 'inp2', False)
    # Calling inp2(args, kwargs) (line 1836)
    inp2_call_result_186352 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 48), inp2_186350, *[], **kwargs_186351)
    
    # Obtaining the member '__getitem__' of a type (line 1836)
    getitem___186353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 48), inp2_call_result_186352, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1836)
    subscript_call_result_186354 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 48), getitem___186353, slice_186349)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1836, 22), tuple_186333, subscript_call_result_186354)
    # Adding element type (line 1836)
    # Getting the type of 'bfmt' (line 1836)
    bfmt_186355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 60), 'bfmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1837)
    tuple_186356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1837)
    # Adding element type (line 1837)
    # Getting the type of 'o' (line 1837)
    o_186357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 21), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 21), tuple_186356, o_186357)
    # Adding element type (line 1837)
    # Getting the type of 'o' (line 1837)
    o_186358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 24), 'o')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 21), tuple_186356, o_186358)
    # Adding element type (line 1837)
    # Getting the type of 'o' (line 1837)
    o_186359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 27), 'o')
    int_186360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 31), 'int')
    # Applying the binary operator '+' (line 1837)
    result_add_186361 = python_operator(stypy.reporting.localization.Localization(__file__, 1837, 27), '+', o_186359, int_186360)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 21), tuple_186356, result_add_186361)
    # Adding element type (line 1837)
    # Getting the type of 's' (line 1837)
    s_186362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 34), 's')
    int_186363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 38), 'int')
    # Applying the binary operator '-' (line 1837)
    result_sub_186364 = python_operator(stypy.reporting.localization.Localization(__file__, 1837, 34), '-', s_186362, int_186363)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 21), tuple_186356, result_sub_186364)
    # Adding element type (line 1837)
    # Getting the type of 'dtype' (line 1837)
    dtype_186365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 41), 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 21), tuple_186356, dtype_186365)
    # Adding element type (line 1837)
    str_186366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 48), 'str', 'aliased')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 21), tuple_186356, str_186366)
    
    # Applying the binary operator '%' (line 1836)
    result_mod_186367 = python_operator(stypy.reporting.localization.Localization(__file__, 1836, 60), '%', bfmt_186355, tuple_186356)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1836, 22), tuple_186333, result_mod_186367)
    
    GeneratorType_186368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1836, 16), GeneratorType_186368, tuple_186333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 16), 'stypy_return_type', GeneratorType_186368)
    # SSA join for if statement (line 1816)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_gen_alignment_data(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_gen_alignment_data' in the type store
    # Getting the type of 'stypy_return_type' (line 1774)
    stypy_return_type_186369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_186369)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_gen_alignment_data'
    return stypy_return_type_186369

# Assigning a type to the variable '_gen_alignment_data' (line 1774)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 0), '_gen_alignment_data', _gen_alignment_data)
# Declaration of the 'IgnoreException' class
# Getting the type of 'Exception' (line 1840)
Exception_186370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 22), 'Exception')

class IgnoreException(Exception_186370, ):
    str_186371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 4), 'str', 'Ignoring this exception due to disabled feature')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1840, 0, False)
        # Assigning a type to the variable 'self' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IgnoreException.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'IgnoreException' (line 1840)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 0), 'IgnoreException', IgnoreException)

@norecursion
def tempdir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'tempdir'
    module_type_store = module_type_store.open_function_context('tempdir', 1844, 0, False)
    
    # Passed parameters checking function
    tempdir.stypy_localization = localization
    tempdir.stypy_type_of_self = None
    tempdir.stypy_type_store = module_type_store
    tempdir.stypy_function_name = 'tempdir'
    tempdir.stypy_param_names_list = []
    tempdir.stypy_varargs_param_name = 'args'
    tempdir.stypy_kwargs_param_name = 'kwargs'
    tempdir.stypy_call_defaults = defaults
    tempdir.stypy_call_varargs = varargs
    tempdir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tempdir', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tempdir', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tempdir(...)' code ##################

    str_186372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, (-1)), 'str', 'Context manager to provide a temporary test folder.\n\n    All arguments are passed as this to the underlying tempfile.mkdtemp\n    function.\n\n    ')
    
    # Assigning a Call to a Name (line 1852):
    
    # Assigning a Call to a Name (line 1852):
    
    # Call to mkdtemp(...): (line 1852)
    # Getting the type of 'args' (line 1852)
    args_186374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 22), 'args', False)
    # Processing the call keyword arguments (line 1852)
    # Getting the type of 'kwargs' (line 1852)
    kwargs_186375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 30), 'kwargs', False)
    kwargs_186376 = {'kwargs_186375': kwargs_186375}
    # Getting the type of 'mkdtemp' (line 1852)
    mkdtemp_186373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 13), 'mkdtemp', False)
    # Calling mkdtemp(args, kwargs) (line 1852)
    mkdtemp_call_result_186377 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 13), mkdtemp_186373, *[args_186374], **kwargs_186376)
    
    # Assigning a type to the variable 'tmpdir' (line 1852)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 4), 'tmpdir', mkdtemp_call_result_186377)
    
    # Try-finally block (line 1853)
    # Creating a generator
    # Getting the type of 'tmpdir' (line 1854)
    tmpdir_186378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 14), 'tmpdir')
    GeneratorType_186379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 8), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 8), GeneratorType_186379, tmpdir_186378)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 8), 'stypy_return_type', GeneratorType_186379)
    
    # finally branch of the try-finally block (line 1853)
    
    # Call to rmtree(...): (line 1856)
    # Processing the call arguments (line 1856)
    # Getting the type of 'tmpdir' (line 1856)
    tmpdir_186382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 22), 'tmpdir', False)
    # Processing the call keyword arguments (line 1856)
    kwargs_186383 = {}
    # Getting the type of 'shutil' (line 1856)
    shutil_186380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 8), 'shutil', False)
    # Obtaining the member 'rmtree' of a type (line 1856)
    rmtree_186381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 8), shutil_186380, 'rmtree')
    # Calling rmtree(args, kwargs) (line 1856)
    rmtree_call_result_186384 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 8), rmtree_186381, *[tmpdir_186382], **kwargs_186383)
    
    
    
    # ################# End of 'tempdir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tempdir' in the type store
    # Getting the type of 'stypy_return_type' (line 1844)
    stypy_return_type_186385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_186385)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tempdir'
    return stypy_return_type_186385

# Assigning a type to the variable 'tempdir' (line 1844)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 0), 'tempdir', tempdir)

@norecursion
def temppath(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'temppath'
    module_type_store = module_type_store.open_function_context('temppath', 1858, 0, False)
    
    # Passed parameters checking function
    temppath.stypy_localization = localization
    temppath.stypy_type_of_self = None
    temppath.stypy_type_store = module_type_store
    temppath.stypy_function_name = 'temppath'
    temppath.stypy_param_names_list = []
    temppath.stypy_varargs_param_name = 'args'
    temppath.stypy_kwargs_param_name = 'kwargs'
    temppath.stypy_call_defaults = defaults
    temppath.stypy_call_varargs = varargs
    temppath.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'temppath', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'temppath', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'temppath(...)' code ##################

    str_186386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, (-1)), 'str', 'Context manager for temporary files.\n\n    Context manager that returns the path to a closed temporary file. Its\n    parameters are the same as for tempfile.mkstemp and are passed directly\n    to that function. The underlying file is removed when the context is\n    exited, so it should be closed at that time.\n  \n    Windows does not allow a temporary file to be opened if it is already\n    open, so the underlying file must be closed after opening before it\n    can be opened again.\n\n    ')
    
    # Assigning a Call to a Tuple (line 1872):
    
    # Assigning a Call to a Name:
    
    # Call to mkstemp(...): (line 1872)
    # Getting the type of 'args' (line 1872)
    args_186388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 24), 'args', False)
    # Processing the call keyword arguments (line 1872)
    # Getting the type of 'kwargs' (line 1872)
    kwargs_186389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 32), 'kwargs', False)
    kwargs_186390 = {'kwargs_186389': kwargs_186389}
    # Getting the type of 'mkstemp' (line 1872)
    mkstemp_186387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 15), 'mkstemp', False)
    # Calling mkstemp(args, kwargs) (line 1872)
    mkstemp_call_result_186391 = invoke(stypy.reporting.localization.Localization(__file__, 1872, 15), mkstemp_186387, *[args_186388], **kwargs_186390)
    
    # Assigning a type to the variable 'call_assignment_182843' (line 1872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'call_assignment_182843', mkstemp_call_result_186391)
    
    # Assigning a Call to a Name (line 1872):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_186394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, 4), 'int')
    # Processing the call keyword arguments
    kwargs_186395 = {}
    # Getting the type of 'call_assignment_182843' (line 1872)
    call_assignment_182843_186392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'call_assignment_182843', False)
    # Obtaining the member '__getitem__' of a type (line 1872)
    getitem___186393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 4), call_assignment_182843_186392, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_186396 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___186393, *[int_186394], **kwargs_186395)
    
    # Assigning a type to the variable 'call_assignment_182844' (line 1872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'call_assignment_182844', getitem___call_result_186396)
    
    # Assigning a Name to a Name (line 1872):
    # Getting the type of 'call_assignment_182844' (line 1872)
    call_assignment_182844_186397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'call_assignment_182844')
    # Assigning a type to the variable 'fd' (line 1872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'fd', call_assignment_182844_186397)
    
    # Assigning a Call to a Name (line 1872):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_186400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, 4), 'int')
    # Processing the call keyword arguments
    kwargs_186401 = {}
    # Getting the type of 'call_assignment_182843' (line 1872)
    call_assignment_182843_186398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'call_assignment_182843', False)
    # Obtaining the member '__getitem__' of a type (line 1872)
    getitem___186399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 4), call_assignment_182843_186398, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_186402 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___186399, *[int_186400], **kwargs_186401)
    
    # Assigning a type to the variable 'call_assignment_182845' (line 1872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'call_assignment_182845', getitem___call_result_186402)
    
    # Assigning a Name to a Name (line 1872):
    # Getting the type of 'call_assignment_182845' (line 1872)
    call_assignment_182845_186403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'call_assignment_182845')
    # Assigning a type to the variable 'path' (line 1872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 8), 'path', call_assignment_182845_186403)
    
    # Call to close(...): (line 1873)
    # Processing the call arguments (line 1873)
    # Getting the type of 'fd' (line 1873)
    fd_186406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 13), 'fd', False)
    # Processing the call keyword arguments (line 1873)
    kwargs_186407 = {}
    # Getting the type of 'os' (line 1873)
    os_186404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 4), 'os', False)
    # Obtaining the member 'close' of a type (line 1873)
    close_186405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 4), os_186404, 'close')
    # Calling close(args, kwargs) (line 1873)
    close_call_result_186408 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 4), close_186405, *[fd_186406], **kwargs_186407)
    
    
    # Try-finally block (line 1874)
    # Creating a generator
    # Getting the type of 'path' (line 1875)
    path_186409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 14), 'path')
    GeneratorType_186410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1875, 8), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1875, 8), GeneratorType_186410, path_186409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 8), 'stypy_return_type', GeneratorType_186410)
    
    # finally branch of the try-finally block (line 1874)
    
    # Call to remove(...): (line 1877)
    # Processing the call arguments (line 1877)
    # Getting the type of 'path' (line 1877)
    path_186413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 18), 'path', False)
    # Processing the call keyword arguments (line 1877)
    kwargs_186414 = {}
    # Getting the type of 'os' (line 1877)
    os_186411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'os', False)
    # Obtaining the member 'remove' of a type (line 1877)
    remove_186412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 8), os_186411, 'remove')
    # Calling remove(args, kwargs) (line 1877)
    remove_call_result_186415 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 8), remove_186412, *[path_186413], **kwargs_186414)
    
    
    
    # ################# End of 'temppath(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'temppath' in the type store
    # Getting the type of 'stypy_return_type' (line 1858)
    stypy_return_type_186416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_186416)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'temppath'
    return stypy_return_type_186416

# Assigning a type to the variable 'temppath' (line 1858)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 0), 'temppath', temppath)
# Declaration of the 'clear_and_catch_warnings' class
# Getting the type of 'warnings' (line 1880)
warnings_186417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 31), 'warnings')
# Obtaining the member 'catch_warnings' of a type (line 1880)
catch_warnings_186418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1880, 31), warnings_186417, 'catch_warnings')

class clear_and_catch_warnings(catch_warnings_186418, ):
    str_186419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, (-1)), 'str', " Context manager that resets warning registry for catching warnings\n\n    Warnings can be slippery, because, whenever a warning is triggered, Python\n    adds a ``__warningregistry__`` member to the *calling* module.  This makes\n    it impossible to retrigger the warning in this module, whatever you put in\n    the warnings filters.  This context manager accepts a sequence of `modules`\n    as a keyword argument to its constructor and:\n\n    * stores and removes any ``__warningregistry__`` entries in given `modules`\n      on entry;\n    * resets ``__warningregistry__`` to its previous state on exit.\n\n    This makes it possible to trigger any warning afresh inside the context\n    manager without disturbing the state of warnings outside.\n\n    For compatibility with Python 3.0, please consider all arguments to be\n    keyword-only.\n\n    Parameters\n    ----------\n    record : bool, optional\n        Specifies whether warnings should be captured by a custom\n        implementation of ``warnings.showwarning()`` and be appended to a list\n        returned by the context manager. Otherwise None is returned by the\n        context manager. The objects appended to the list are arguments whose\n        attributes mirror the arguments to ``showwarning()``.\n    modules : sequence, optional\n        Sequence of modules for which to reset warnings registry on entry and\n        restore on exit\n\n    Examples\n    --------\n    >>> import warnings\n    >>> with clear_and_catch_warnings(modules=[np.core.fromnumeric]):\n    ...     warnings.simplefilter('always')\n    ...     # do something that raises a warning in np.core.fromnumeric\n    ")
    
    # Assigning a Tuple to a Name (line 1918):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1920)
        False_186420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 30), 'False')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1920)
        tuple_186421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1920)
        
        defaults = [False_186420, tuple_186421]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1920, 4, False)
        # Assigning a type to the variable 'self' (line 1921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'clear_and_catch_warnings.__init__', ['record', 'modules'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['record', 'modules'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1921):
        
        # Assigning a Call to a Attribute (line 1921):
        
        # Call to union(...): (line 1921)
        # Processing the call arguments (line 1921)
        # Getting the type of 'self' (line 1921)
        self_186427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 42), 'self', False)
        # Obtaining the member 'class_modules' of a type (line 1921)
        class_modules_186428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 42), self_186427, 'class_modules')
        # Processing the call keyword arguments (line 1921)
        kwargs_186429 = {}
        
        # Call to set(...): (line 1921)
        # Processing the call arguments (line 1921)
        # Getting the type of 'modules' (line 1921)
        modules_186423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 27), 'modules', False)
        # Processing the call keyword arguments (line 1921)
        kwargs_186424 = {}
        # Getting the type of 'set' (line 1921)
        set_186422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 23), 'set', False)
        # Calling set(args, kwargs) (line 1921)
        set_call_result_186425 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 23), set_186422, *[modules_186423], **kwargs_186424)
        
        # Obtaining the member 'union' of a type (line 1921)
        union_186426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 23), set_call_result_186425, 'union')
        # Calling union(args, kwargs) (line 1921)
        union_call_result_186430 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 23), union_186426, *[class_modules_186428], **kwargs_186429)
        
        # Getting the type of 'self' (line 1921)
        self_186431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 8), 'self')
        # Setting the type of the member 'modules' of a type (line 1921)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 8), self_186431, 'modules', union_call_result_186430)
        
        # Assigning a Dict to a Attribute (line 1922):
        
        # Assigning a Dict to a Attribute (line 1922):
        
        # Obtaining an instance of the builtin type 'dict' (line 1922)
        dict_186432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, 31), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1922)
        
        # Getting the type of 'self' (line 1922)
        self_186433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 8), 'self')
        # Setting the type of the member '_warnreg_copies' of a type (line 1922)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 8), self_186433, '_warnreg_copies', dict_186432)
        
        # Call to __init__(...): (line 1923)
        # Processing the call keyword arguments (line 1923)
        # Getting the type of 'record' (line 1923)
        record_186440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 62), 'record', False)
        keyword_186441 = record_186440
        kwargs_186442 = {'record': keyword_186441}
        
        # Call to super(...): (line 1923)
        # Processing the call arguments (line 1923)
        # Getting the type of 'clear_and_catch_warnings' (line 1923)
        clear_and_catch_warnings_186435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 14), 'clear_and_catch_warnings', False)
        # Getting the type of 'self' (line 1923)
        self_186436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 40), 'self', False)
        # Processing the call keyword arguments (line 1923)
        kwargs_186437 = {}
        # Getting the type of 'super' (line 1923)
        super_186434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 8), 'super', False)
        # Calling super(args, kwargs) (line 1923)
        super_call_result_186438 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 8), super_186434, *[clear_and_catch_warnings_186435, self_186436], **kwargs_186437)
        
        # Obtaining the member '__init__' of a type (line 1923)
        init___186439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1923, 8), super_call_result_186438, '__init__')
        # Calling __init__(args, kwargs) (line 1923)
        init___call_result_186443 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 8), init___186439, *[], **kwargs_186442)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __enter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__enter__'
        module_type_store = module_type_store.open_function_context('__enter__', 1925, 4, False)
        # Assigning a type to the variable 'self' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_localization', localization)
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_function_name', 'clear_and_catch_warnings.__enter__')
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_param_names_list', [])
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        clear_and_catch_warnings.__enter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'clear_and_catch_warnings.__enter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__enter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__enter__(...)' code ##################

        
        # Getting the type of 'self' (line 1926)
        self_186444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 19), 'self')
        # Obtaining the member 'modules' of a type (line 1926)
        modules_186445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 19), self_186444, 'modules')
        # Testing the type of a for loop iterable (line 1926)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1926, 8), modules_186445)
        # Getting the type of the for loop variable (line 1926)
        for_loop_var_186446 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1926, 8), modules_186445)
        # Assigning a type to the variable 'mod' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'mod', for_loop_var_186446)
        # SSA begins for a for statement (line 1926)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 1927)
        str_186447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 28), 'str', '__warningregistry__')
        # Getting the type of 'mod' (line 1927)
        mod_186448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 23), 'mod')
        
        (may_be_186449, more_types_in_union_186450) = may_provide_member(str_186447, mod_186448)

        if may_be_186449:

            if more_types_in_union_186450:
                # Runtime conditional SSA (line 1927)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'mod' (line 1927)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 12), 'mod', remove_not_member_provider_from_union(mod_186448, '__warningregistry__'))
            
            # Assigning a Attribute to a Name (line 1928):
            
            # Assigning a Attribute to a Name (line 1928):
            # Getting the type of 'mod' (line 1928)
            mod_186451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 26), 'mod')
            # Obtaining the member '__warningregistry__' of a type (line 1928)
            warningregistry___186452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1928, 26), mod_186451, '__warningregistry__')
            # Assigning a type to the variable 'mod_reg' (line 1928)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1928, 16), 'mod_reg', warningregistry___186452)
            
            # Assigning a Call to a Subscript (line 1929):
            
            # Assigning a Call to a Subscript (line 1929):
            
            # Call to copy(...): (line 1929)
            # Processing the call keyword arguments (line 1929)
            kwargs_186455 = {}
            # Getting the type of 'mod_reg' (line 1929)
            mod_reg_186453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 44), 'mod_reg', False)
            # Obtaining the member 'copy' of a type (line 1929)
            copy_186454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1929, 44), mod_reg_186453, 'copy')
            # Calling copy(args, kwargs) (line 1929)
            copy_call_result_186456 = invoke(stypy.reporting.localization.Localization(__file__, 1929, 44), copy_186454, *[], **kwargs_186455)
            
            # Getting the type of 'self' (line 1929)
            self_186457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 16), 'self')
            # Obtaining the member '_warnreg_copies' of a type (line 1929)
            _warnreg_copies_186458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1929, 16), self_186457, '_warnreg_copies')
            # Getting the type of 'mod' (line 1929)
            mod_186459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 37), 'mod')
            # Storing an element on a container (line 1929)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1929, 16), _warnreg_copies_186458, (mod_186459, copy_call_result_186456))
            
            # Call to clear(...): (line 1930)
            # Processing the call keyword arguments (line 1930)
            kwargs_186462 = {}
            # Getting the type of 'mod_reg' (line 1930)
            mod_reg_186460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 16), 'mod_reg', False)
            # Obtaining the member 'clear' of a type (line 1930)
            clear_186461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1930, 16), mod_reg_186460, 'clear')
            # Calling clear(args, kwargs) (line 1930)
            clear_call_result_186463 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 16), clear_186461, *[], **kwargs_186462)
            

            if more_types_in_union_186450:
                # SSA join for if statement (line 1927)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __enter__(...): (line 1931)
        # Processing the call keyword arguments (line 1931)
        kwargs_186470 = {}
        
        # Call to super(...): (line 1931)
        # Processing the call arguments (line 1931)
        # Getting the type of 'clear_and_catch_warnings' (line 1931)
        clear_and_catch_warnings_186465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 21), 'clear_and_catch_warnings', False)
        # Getting the type of 'self' (line 1931)
        self_186466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 47), 'self', False)
        # Processing the call keyword arguments (line 1931)
        kwargs_186467 = {}
        # Getting the type of 'super' (line 1931)
        super_186464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 15), 'super', False)
        # Calling super(args, kwargs) (line 1931)
        super_call_result_186468 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 15), super_186464, *[clear_and_catch_warnings_186465, self_186466], **kwargs_186467)
        
        # Obtaining the member '__enter__' of a type (line 1931)
        enter___186469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 15), super_call_result_186468, '__enter__')
        # Calling __enter__(args, kwargs) (line 1931)
        enter___call_result_186471 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 15), enter___186469, *[], **kwargs_186470)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 8), 'stypy_return_type', enter___call_result_186471)
        
        # ################# End of '__enter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__enter__' in the type store
        # Getting the type of 'stypy_return_type' (line 1925)
        stypy_return_type_186472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_186472)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__enter__'
        return stypy_return_type_186472


    @norecursion
    def __exit__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__exit__'
        module_type_store = module_type_store.open_function_context('__exit__', 1933, 4, False)
        # Assigning a type to the variable 'self' (line 1934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_localization', localization)
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_type_store', module_type_store)
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_function_name', 'clear_and_catch_warnings.__exit__')
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_param_names_list', [])
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_varargs_param_name', 'exc_info')
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_call_defaults', defaults)
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_call_varargs', varargs)
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        clear_and_catch_warnings.__exit__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'clear_and_catch_warnings.__exit__', [], 'exc_info', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__exit__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__exit__(...)' code ##################

        
        # Call to __exit__(...): (line 1934)
        # Getting the type of 'exc_info' (line 1934)
        exc_info_186479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 56), 'exc_info', False)
        # Processing the call keyword arguments (line 1934)
        kwargs_186480 = {}
        
        # Call to super(...): (line 1934)
        # Processing the call arguments (line 1934)
        # Getting the type of 'clear_and_catch_warnings' (line 1934)
        clear_and_catch_warnings_186474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 14), 'clear_and_catch_warnings', False)
        # Getting the type of 'self' (line 1934)
        self_186475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 40), 'self', False)
        # Processing the call keyword arguments (line 1934)
        kwargs_186476 = {}
        # Getting the type of 'super' (line 1934)
        super_186473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 8), 'super', False)
        # Calling super(args, kwargs) (line 1934)
        super_call_result_186477 = invoke(stypy.reporting.localization.Localization(__file__, 1934, 8), super_186473, *[clear_and_catch_warnings_186474, self_186475], **kwargs_186476)
        
        # Obtaining the member '__exit__' of a type (line 1934)
        exit___186478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1934, 8), super_call_result_186477, '__exit__')
        # Calling __exit__(args, kwargs) (line 1934)
        exit___call_result_186481 = invoke(stypy.reporting.localization.Localization(__file__, 1934, 8), exit___186478, *[exc_info_186479], **kwargs_186480)
        
        
        # Getting the type of 'self' (line 1935)
        self_186482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 19), 'self')
        # Obtaining the member 'modules' of a type (line 1935)
        modules_186483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 19), self_186482, 'modules')
        # Testing the type of a for loop iterable (line 1935)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1935, 8), modules_186483)
        # Getting the type of the for loop variable (line 1935)
        for_loop_var_186484 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1935, 8), modules_186483)
        # Assigning a type to the variable 'mod' (line 1935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'mod', for_loop_var_186484)
        # SSA begins for a for statement (line 1935)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 1936)
        str_186485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 28), 'str', '__warningregistry__')
        # Getting the type of 'mod' (line 1936)
        mod_186486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 23), 'mod')
        
        (may_be_186487, more_types_in_union_186488) = may_provide_member(str_186485, mod_186486)

        if may_be_186487:

            if more_types_in_union_186488:
                # Runtime conditional SSA (line 1936)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'mod' (line 1936)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 12), 'mod', remove_not_member_provider_from_union(mod_186486, '__warningregistry__'))
            
            # Call to clear(...): (line 1937)
            # Processing the call keyword arguments (line 1937)
            kwargs_186492 = {}
            # Getting the type of 'mod' (line 1937)
            mod_186489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 16), 'mod', False)
            # Obtaining the member '__warningregistry__' of a type (line 1937)
            warningregistry___186490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 16), mod_186489, '__warningregistry__')
            # Obtaining the member 'clear' of a type (line 1937)
            clear_186491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 16), warningregistry___186490, 'clear')
            # Calling clear(args, kwargs) (line 1937)
            clear_call_result_186493 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 16), clear_186491, *[], **kwargs_186492)
            

            if more_types_in_union_186488:
                # SSA join for if statement (line 1936)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'mod' (line 1938)
        mod_186494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 15), 'mod')
        # Getting the type of 'self' (line 1938)
        self_186495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 22), 'self')
        # Obtaining the member '_warnreg_copies' of a type (line 1938)
        _warnreg_copies_186496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1938, 22), self_186495, '_warnreg_copies')
        # Applying the binary operator 'in' (line 1938)
        result_contains_186497 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 15), 'in', mod_186494, _warnreg_copies_186496)
        
        # Testing the type of an if condition (line 1938)
        if_condition_186498 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1938, 12), result_contains_186497)
        # Assigning a type to the variable 'if_condition_186498' (line 1938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1938, 12), 'if_condition_186498', if_condition_186498)
        # SSA begins for if statement (line 1938)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update(...): (line 1939)
        # Processing the call arguments (line 1939)
        
        # Obtaining the type of the subscript
        # Getting the type of 'mod' (line 1939)
        mod_186502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 68), 'mod', False)
        # Getting the type of 'self' (line 1939)
        self_186503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 47), 'self', False)
        # Obtaining the member '_warnreg_copies' of a type (line 1939)
        _warnreg_copies_186504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 47), self_186503, '_warnreg_copies')
        # Obtaining the member '__getitem__' of a type (line 1939)
        getitem___186505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 47), _warnreg_copies_186504, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1939)
        subscript_call_result_186506 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 47), getitem___186505, mod_186502)
        
        # Processing the call keyword arguments (line 1939)
        kwargs_186507 = {}
        # Getting the type of 'mod' (line 1939)
        mod_186499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 16), 'mod', False)
        # Obtaining the member '__warningregistry__' of a type (line 1939)
        warningregistry___186500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 16), mod_186499, '__warningregistry__')
        # Obtaining the member 'update' of a type (line 1939)
        update_186501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 16), warningregistry___186500, 'update')
        # Calling update(args, kwargs) (line 1939)
        update_call_result_186508 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 16), update_186501, *[subscript_call_result_186506], **kwargs_186507)
        
        # SSA join for if statement (line 1938)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__exit__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__exit__' in the type store
        # Getting the type of 'stypy_return_type' (line 1933)
        stypy_return_type_186509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_186509)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__exit__'
        return stypy_return_type_186509


# Assigning a type to the variable 'clear_and_catch_warnings' (line 1880)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1880, 0), 'clear_and_catch_warnings', clear_and_catch_warnings)

# Assigning a Tuple to a Name (line 1918):

# Obtaining an instance of the builtin type 'tuple' (line 1918)
tuple_186510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1918, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1918)

# Getting the type of 'clear_and_catch_warnings'
clear_and_catch_warnings_186511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'clear_and_catch_warnings')
# Setting the type of the member 'class_modules' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), clear_and_catch_warnings_186511, 'class_modules', tuple_186510)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
