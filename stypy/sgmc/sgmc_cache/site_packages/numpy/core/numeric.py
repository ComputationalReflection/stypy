
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: from __future__ import division, absolute_import, print_function
2: 
3: import sys
4: import operator
5: import warnings
6: import collections
7: from numpy.core import multiarray
8: from . import umath
9: from .umath import (invert, sin, UFUNC_BUFSIZE_DEFAULT, ERR_IGNORE,
10:                     ERR_WARN, ERR_RAISE, ERR_CALL, ERR_PRINT, ERR_LOG,
11:                     ERR_DEFAULT, PINF, NAN)
12: from . import numerictypes
13: from .numerictypes import longlong, intc, int_, float_, complex_, bool_
14: from ._internal import TooHardError
15: 
16: if sys.version_info[0] >= 3:
17:     import pickle
18:     basestring = str
19:     import builtins
20: else:
21:     import cPickle as pickle
22:     import __builtin__ as builtins
23: 
24: loads = pickle.loads
25: 
26: 
27: __all__ = [
28:     'newaxis', 'ndarray', 'flatiter', 'nditer', 'nested_iters', 'ufunc',
29:     'arange', 'array', 'zeros', 'count_nonzero', 'empty', 'broadcast',
30:     'dtype', 'fromstring', 'fromfile', 'frombuffer', 'int_asbuffer',
31:     'where', 'argwhere', 'copyto', 'concatenate', 'fastCopyAndTranspose',
32:     'lexsort', 'set_numeric_ops', 'can_cast', 'promote_types',
33:     'min_scalar_type', 'result_type', 'asarray', 'asanyarray',
34:     'ascontiguousarray', 'asfortranarray', 'isfortran', 'empty_like',
35:     'zeros_like', 'ones_like', 'correlate', 'convolve', 'inner', 'dot',
36:     'einsum', 'outer', 'vdot', 'alterdot', 'restoredot', 'roll',
37:     'rollaxis', 'moveaxis', 'cross', 'tensordot', 'array2string',
38:     'get_printoptions', 'set_printoptions', 'array_repr', 'array_str',
39:     'set_string_function', 'little_endian', 'require', 'fromiter',
40:     'array_equal', 'array_equiv', 'indices', 'fromfunction', 'isclose', 'load',
41:     'loads', 'isscalar', 'binary_repr', 'base_repr', 'ones', 'identity',
42:     'allclose', 'compare_chararrays', 'putmask', 'seterr', 'geterr',
43:     'setbufsize', 'getbufsize', 'seterrcall', 'geterrcall', 'errstate',
44:     'flatnonzero', 'Inf', 'inf', 'infty', 'Infinity', 'nan', 'NaN', 'False_',
45:     'True_', 'bitwise_not', 'CLIP', 'RAISE', 'WRAP', 'MAXDIMS', 'BUFSIZE',
46:     'ALLOW_THREADS', 'ComplexWarning', 'full', 'full_like', 'matmul',
47:     'shares_memory', 'may_share_memory', 'MAY_SHARE_BOUNDS', 'MAY_SHARE_EXACT',
48:     'TooHardError',
49:     ]
50: 
51: if sys.version_info[0] < 3:
52:     __all__.extend(['getbuffer', 'newbuffer'])
53: 
54: 
55: class ComplexWarning(RuntimeWarning):
56:     '''
57:     The warning raised when casting a complex dtype to a real dtype.
58: 
59:     As implemented, casting a complex number to a real discards its imaginary
60:     part, but this behavior may not be what the user actually wants.
61: 
62:     '''
63:     pass
64: 
65: bitwise_not = invert
66: 
67: CLIP = multiarray.CLIP
68: WRAP = multiarray.WRAP
69: RAISE = multiarray.RAISE
70: MAXDIMS = multiarray.MAXDIMS
71: ALLOW_THREADS = multiarray.ALLOW_THREADS
72: BUFSIZE = multiarray.BUFSIZE
73: MAY_SHARE_BOUNDS = multiarray.MAY_SHARE_BOUNDS
74: MAY_SHARE_EXACT = multiarray.MAY_SHARE_EXACT
75: 
76: ndarray = multiarray.ndarray
77: flatiter = multiarray.flatiter
78: nditer = multiarray.nditer
79: nested_iters = multiarray.nested_iters
80: broadcast = multiarray.broadcast
81: dtype = multiarray.dtype
82: copyto = multiarray.copyto
83: ufunc = type(sin)
84: 
85: 
86: def zeros_like(a, dtype=None, order='K', subok=True):
87:     '''
88:     Return an array of zeros with the same shape and type as a given array.
89: 
90:     Parameters
91:     ----------
92:     a : array_like
93:         The shape and data-type of `a` define these same attributes of
94:         the returned array.
95:     dtype : data-type, optional
96:         Overrides the data type of the result.
97: 
98:         .. versionadded:: 1.6.0
99:     order : {'C', 'F', 'A', or 'K'}, optional
100:         Overrides the memory layout of the result. 'C' means C-order,
101:         'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,
102:         'C' otherwise. 'K' means match the layout of `a` as closely
103:         as possible.
104: 
105:         .. versionadded:: 1.6.0
106:     subok : bool, optional.
107:         If True, then the newly created array will use the sub-class
108:         type of 'a', otherwise it will be a base-class array. Defaults
109:         to True.
110: 
111:     Returns
112:     -------
113:     out : ndarray
114:         Array of zeros with the same shape and type as `a`.
115: 
116:     See Also
117:     --------
118:     ones_like : Return an array of ones with shape and type of input.
119:     empty_like : Return an empty array with shape and type of input.
120:     zeros : Return a new array setting values to zero.
121:     ones : Return a new array setting values to one.
122:     empty : Return a new uninitialized array.
123: 
124:     Examples
125:     --------
126:     >>> x = np.arange(6)
127:     >>> x = x.reshape((2, 3))
128:     >>> x
129:     array([[0, 1, 2],
130:            [3, 4, 5]])
131:     >>> np.zeros_like(x)
132:     array([[0, 0, 0],
133:            [0, 0, 0]])
134: 
135:     >>> y = np.arange(3, dtype=np.float)
136:     >>> y
137:     array([ 0.,  1.,  2.])
138:     >>> np.zeros_like(y)
139:     array([ 0.,  0.,  0.])
140: 
141:     '''
142:     res = empty_like(a, dtype=dtype, order=order, subok=subok)
143:     # needed instead of a 0 to get same result as zeros for for string dtypes
144:     z = zeros(1, dtype=res.dtype)
145:     multiarray.copyto(res, z, casting='unsafe')
146:     return res
147: 
148: def ones(shape, dtype=None, order='C'):
149:     '''
150:     Return a new array of given shape and type, filled with ones.
151: 
152:     Parameters
153:     ----------
154:     shape : int or sequence of ints
155:         Shape of the new array, e.g., ``(2, 3)`` or ``2``.
156:     dtype : data-type, optional
157:         The desired data-type for the array, e.g., `numpy.int8`.  Default is
158:         `numpy.float64`.
159:     order : {'C', 'F'}, optional
160:         Whether to store multidimensional data in C- or Fortran-contiguous
161:         (row- or column-wise) order in memory.
162: 
163:     Returns
164:     -------
165:     out : ndarray
166:         Array of ones with the given shape, dtype, and order.
167: 
168:     See Also
169:     --------
170:     zeros, ones_like
171: 
172:     Examples
173:     --------
174:     >>> np.ones(5)
175:     array([ 1.,  1.,  1.,  1.,  1.])
176: 
177:     >>> np.ones((5,), dtype=np.int)
178:     array([1, 1, 1, 1, 1])
179: 
180:     >>> np.ones((2, 1))
181:     array([[ 1.],
182:            [ 1.]])
183: 
184:     >>> s = (2,2)
185:     >>> np.ones(s)
186:     array([[ 1.,  1.],
187:            [ 1.,  1.]])
188: 
189:     '''
190:     a = empty(shape, dtype, order)
191:     multiarray.copyto(a, 1, casting='unsafe')
192:     return a
193: 
194: def ones_like(a, dtype=None, order='K', subok=True):
195:     '''
196:     Return an array of ones with the same shape and type as a given array.
197: 
198:     Parameters
199:     ----------
200:     a : array_like
201:         The shape and data-type of `a` define these same attributes of
202:         the returned array.
203:     dtype : data-type, optional
204:         Overrides the data type of the result.
205: 
206:         .. versionadded:: 1.6.0
207:     order : {'C', 'F', 'A', or 'K'}, optional
208:         Overrides the memory layout of the result. 'C' means C-order,
209:         'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,
210:         'C' otherwise. 'K' means match the layout of `a` as closely
211:         as possible.
212: 
213:         .. versionadded:: 1.6.0
214:     subok : bool, optional.
215:         If True, then the newly created array will use the sub-class
216:         type of 'a', otherwise it will be a base-class array. Defaults
217:         to True.
218: 
219:     Returns
220:     -------
221:     out : ndarray
222:         Array of ones with the same shape and type as `a`.
223: 
224:     See Also
225:     --------
226:     zeros_like : Return an array of zeros with shape and type of input.
227:     empty_like : Return an empty array with shape and type of input.
228:     zeros : Return a new array setting values to zero.
229:     ones : Return a new array setting values to one.
230:     empty : Return a new uninitialized array.
231: 
232:     Examples
233:     --------
234:     >>> x = np.arange(6)
235:     >>> x = x.reshape((2, 3))
236:     >>> x
237:     array([[0, 1, 2],
238:            [3, 4, 5]])
239:     >>> np.ones_like(x)
240:     array([[1, 1, 1],
241:            [1, 1, 1]])
242: 
243:     >>> y = np.arange(3, dtype=np.float)
244:     >>> y
245:     array([ 0.,  1.,  2.])
246:     >>> np.ones_like(y)
247:     array([ 1.,  1.,  1.])
248: 
249:     '''
250:     res = empty_like(a, dtype=dtype, order=order, subok=subok)
251:     multiarray.copyto(res, 1, casting='unsafe')
252:     return res
253: 
254: def full(shape, fill_value, dtype=None, order='C'):
255:     '''
256:     Return a new array of given shape and type, filled with `fill_value`.
257: 
258:     Parameters
259:     ----------
260:     shape : int or sequence of ints
261:         Shape of the new array, e.g., ``(2, 3)`` or ``2``.
262:     fill_value : scalar
263:         Fill value.
264:     dtype : data-type, optional
265:         The desired data-type for the array, e.g., `np.int8`.  Default
266:         is `float`, but will change to `np.array(fill_value).dtype` in a
267:         future release.
268:     order : {'C', 'F'}, optional
269:         Whether to store multidimensional data in C- or Fortran-contiguous
270:         (row- or column-wise) order in memory.
271: 
272:     Returns
273:     -------
274:     out : ndarray
275:         Array of `fill_value` with the given shape, dtype, and order.
276: 
277:     See Also
278:     --------
279:     zeros_like : Return an array of zeros with shape and type of input.
280:     ones_like : Return an array of ones with shape and type of input.
281:     empty_like : Return an empty array with shape and type of input.
282:     full_like : Fill an array with shape and type of input.
283:     zeros : Return a new array setting values to zero.
284:     ones : Return a new array setting values to one.
285:     empty : Return a new uninitialized array.
286: 
287:     Examples
288:     --------
289:     >>> np.full((2, 2), np.inf)
290:     array([[ inf,  inf],
291:            [ inf,  inf]])
292:     >>> np.full((2, 2), 10, dtype=np.int)
293:     array([[10, 10],
294:            [10, 10]])
295: 
296:     '''
297:     a = empty(shape, dtype, order)
298:     if dtype is None and array(fill_value).dtype != a.dtype:
299:         warnings.warn(
300:             "in the future, full({0}, {1!r}) will return an array of {2!r}".
301:             format(shape, fill_value, array(fill_value).dtype), FutureWarning)
302:     multiarray.copyto(a, fill_value, casting='unsafe')
303:     return a
304: 
305: def full_like(a, fill_value, dtype=None, order='K', subok=True):
306:     '''
307:     Return a full array with the same shape and type as a given array.
308: 
309:     Parameters
310:     ----------
311:     a : array_like
312:         The shape and data-type of `a` define these same attributes of
313:         the returned array.
314:     fill_value : scalar
315:         Fill value.
316:     dtype : data-type, optional
317:         Overrides the data type of the result.
318:     order : {'C', 'F', 'A', or 'K'}, optional
319:         Overrides the memory layout of the result. 'C' means C-order,
320:         'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,
321:         'C' otherwise. 'K' means match the layout of `a` as closely
322:         as possible.
323:     subok : bool, optional.
324:         If True, then the newly created array will use the sub-class
325:         type of 'a', otherwise it will be a base-class array. Defaults
326:         to True.
327: 
328:     Returns
329:     -------
330:     out : ndarray
331:         Array of `fill_value` with the same shape and type as `a`.
332: 
333:     See Also
334:     --------
335:     zeros_like : Return an array of zeros with shape and type of input.
336:     ones_like : Return an array of ones with shape and type of input.
337:     empty_like : Return an empty array with shape and type of input.
338:     zeros : Return a new array setting values to zero.
339:     ones : Return a new array setting values to one.
340:     empty : Return a new uninitialized array.
341:     full : Fill a new array.
342: 
343:     Examples
344:     --------
345:     >>> x = np.arange(6, dtype=np.int)
346:     >>> np.full_like(x, 1)
347:     array([1, 1, 1, 1, 1, 1])
348:     >>> np.full_like(x, 0.1)
349:     array([0, 0, 0, 0, 0, 0])
350:     >>> np.full_like(x, 0.1, dtype=np.double)
351:     array([ 0.1,  0.1,  0.1,  0.1,  0.1,  0.1])
352:     >>> np.full_like(x, np.nan, dtype=np.double)
353:     array([ nan,  nan,  nan,  nan,  nan,  nan])
354: 
355:     >>> y = np.arange(6, dtype=np.double)
356:     >>> np.full_like(y, 0.1)
357:     array([ 0.1,  0.1,  0.1,  0.1,  0.1,  0.1])
358: 
359:     '''
360:     res = empty_like(a, dtype=dtype, order=order, subok=subok)
361:     multiarray.copyto(res, fill_value, casting='unsafe')
362:     return res
363: 
364: 
365: def extend_all(module):
366:     adict = {}
367:     for a in __all__:
368:         adict[a] = 1
369:     try:
370:         mall = getattr(module, '__all__')
371:     except AttributeError:
372:         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
373:     for a in mall:
374:         if a not in adict:
375:             __all__.append(a)
376: 
377: newaxis = None
378: 
379: 
380: arange = multiarray.arange
381: array = multiarray.array
382: zeros = multiarray.zeros
383: count_nonzero = multiarray.count_nonzero
384: empty = multiarray.empty
385: empty_like = multiarray.empty_like
386: fromstring = multiarray.fromstring
387: fromiter = multiarray.fromiter
388: fromfile = multiarray.fromfile
389: frombuffer = multiarray.frombuffer
390: shares_memory = multiarray.shares_memory
391: may_share_memory = multiarray.may_share_memory
392: if sys.version_info[0] < 3:
393:     newbuffer = multiarray.newbuffer
394:     getbuffer = multiarray.getbuffer
395: int_asbuffer = multiarray.int_asbuffer
396: where = multiarray.where
397: concatenate = multiarray.concatenate
398: fastCopyAndTranspose = multiarray._fastCopyAndTranspose
399: set_numeric_ops = multiarray.set_numeric_ops
400: can_cast = multiarray.can_cast
401: promote_types = multiarray.promote_types
402: min_scalar_type = multiarray.min_scalar_type
403: result_type = multiarray.result_type
404: lexsort = multiarray.lexsort
405: compare_chararrays = multiarray.compare_chararrays
406: putmask = multiarray.putmask
407: einsum = multiarray.einsum
408: dot = multiarray.dot
409: inner = multiarray.inner
410: vdot = multiarray.vdot
411: matmul = multiarray.matmul
412: 
413: 
414: def asarray(a, dtype=None, order=None):
415:     '''Convert the input to an array.
416: 
417:     Parameters
418:     ----------
419:     a : array_like
420:         Input data, in any form that can be converted to an array.  This
421:         includes lists, lists of tuples, tuples, tuples of tuples, tuples
422:         of lists and ndarrays.
423:     dtype : data-type, optional
424:         By default, the data-type is inferred from the input data.
425:     order : {'C', 'F'}, optional
426:         Whether to use row-major (C-style) or
427:         column-major (Fortran-style) memory representation.
428:         Defaults to 'C'.
429: 
430:     Returns
431:     -------
432:     out : ndarray
433:         Array interpretation of `a`.  No copy is performed if the input
434:         is already an ndarray.  If `a` is a subclass of ndarray, a base
435:         class ndarray is returned.
436: 
437:     See Also
438:     --------
439:     asanyarray : Similar function which passes through subclasses.
440:     ascontiguousarray : Convert input to a contiguous array.
441:     asfarray : Convert input to a floating point ndarray.
442:     asfortranarray : Convert input to an ndarray with column-major
443:                      memory order.
444:     asarray_chkfinite : Similar function which checks input for NaNs and Infs.
445:     fromiter : Create an array from an iterator.
446:     fromfunction : Construct an array by executing a function on grid
447:                    positions.
448: 
449:     Examples
450:     --------
451:     Convert a list into an array:
452: 
453:     >>> a = [1, 2]
454:     >>> np.asarray(a)
455:     array([1, 2])
456: 
457:     Existing arrays are not copied:
458: 
459:     >>> a = np.array([1, 2])
460:     >>> np.asarray(a) is a
461:     True
462: 
463:     If `dtype` is set, array is copied only if dtype does not match:
464: 
465:     >>> a = np.array([1, 2], dtype=np.float32)
466:     >>> np.asarray(a, dtype=np.float32) is a
467:     True
468:     >>> np.asarray(a, dtype=np.float64) is a
469:     False
470: 
471:     Contrary to `asanyarray`, ndarray subclasses are not passed through:
472: 
473:     >>> issubclass(np.matrix, np.ndarray)
474:     True
475:     >>> a = np.matrix([[1, 2]])
476:     >>> np.asarray(a) is a
477:     False
478:     >>> np.asanyarray(a) is a
479:     True
480: 
481:     '''
482:     return array(a, dtype, copy=False, order=order)
483: 
484: def asanyarray(a, dtype=None, order=None):
485:     '''Convert the input to an ndarray, but pass ndarray subclasses through.
486: 
487:     Parameters
488:     ----------
489:     a : array_like
490:         Input data, in any form that can be converted to an array.  This
491:         includes scalars, lists, lists of tuples, tuples, tuples of tuples,
492:         tuples of lists, and ndarrays.
493:     dtype : data-type, optional
494:         By default, the data-type is inferred from the input data.
495:     order : {'C', 'F'}, optional
496:         Whether to use row-major (C-style) or column-major
497:         (Fortran-style) memory representation.  Defaults to 'C'.
498: 
499:     Returns
500:     -------
501:     out : ndarray or an ndarray subclass
502:         Array interpretation of `a`.  If `a` is an ndarray or a subclass
503:         of ndarray, it is returned as-is and no copy is performed.
504: 
505:     See Also
506:     --------
507:     asarray : Similar function which always returns ndarrays.
508:     ascontiguousarray : Convert input to a contiguous array.
509:     asfarray : Convert input to a floating point ndarray.
510:     asfortranarray : Convert input to an ndarray with column-major
511:                      memory order.
512:     asarray_chkfinite : Similar function which checks input for NaNs and
513:                         Infs.
514:     fromiter : Create an array from an iterator.
515:     fromfunction : Construct an array by executing a function on grid
516:                    positions.
517: 
518:     Examples
519:     --------
520:     Convert a list into an array:
521: 
522:     >>> a = [1, 2]
523:     >>> np.asanyarray(a)
524:     array([1, 2])
525: 
526:     Instances of `ndarray` subclasses are passed through as-is:
527: 
528:     >>> a = np.matrix([1, 2])
529:     >>> np.asanyarray(a) is a
530:     True
531: 
532:     '''
533:     return array(a, dtype, copy=False, order=order, subok=True)
534: 
535: def ascontiguousarray(a, dtype=None):
536:     '''
537:     Return a contiguous array in memory (C order).
538: 
539:     Parameters
540:     ----------
541:     a : array_like
542:         Input array.
543:     dtype : str or dtype object, optional
544:         Data-type of returned array.
545: 
546:     Returns
547:     -------
548:     out : ndarray
549:         Contiguous array of same shape and content as `a`, with type `dtype`
550:         if specified.
551: 
552:     See Also
553:     --------
554:     asfortranarray : Convert input to an ndarray with column-major
555:                      memory order.
556:     require : Return an ndarray that satisfies requirements.
557:     ndarray.flags : Information about the memory layout of the array.
558: 
559:     Examples
560:     --------
561:     >>> x = np.arange(6).reshape(2,3)
562:     >>> np.ascontiguousarray(x, dtype=np.float32)
563:     array([[ 0.,  1.,  2.],
564:            [ 3.,  4.,  5.]], dtype=float32)
565:     >>> x.flags['C_CONTIGUOUS']
566:     True
567: 
568:     '''
569:     return array(a, dtype, copy=False, order='C', ndmin=1)
570: 
571: def asfortranarray(a, dtype=None):
572:     '''
573:     Return an array laid out in Fortran order in memory.
574: 
575:     Parameters
576:     ----------
577:     a : array_like
578:         Input array.
579:     dtype : str or dtype object, optional
580:         By default, the data-type is inferred from the input data.
581: 
582:     Returns
583:     -------
584:     out : ndarray
585:         The input `a` in Fortran, or column-major, order.
586: 
587:     See Also
588:     --------
589:     ascontiguousarray : Convert input to a contiguous (C order) array.
590:     asanyarray : Convert input to an ndarray with either row or
591:         column-major memory order.
592:     require : Return an ndarray that satisfies requirements.
593:     ndarray.flags : Information about the memory layout of the array.
594: 
595:     Examples
596:     --------
597:     >>> x = np.arange(6).reshape(2,3)
598:     >>> y = np.asfortranarray(x)
599:     >>> x.flags['F_CONTIGUOUS']
600:     False
601:     >>> y.flags['F_CONTIGUOUS']
602:     True
603: 
604:     '''
605:     return array(a, dtype, copy=False, order='F', ndmin=1)
606: 
607: def require(a, dtype=None, requirements=None):
608:     '''
609:     Return an ndarray of the provided type that satisfies requirements.
610: 
611:     This function is useful to be sure that an array with the correct flags
612:     is returned for passing to compiled code (perhaps through ctypes).
613: 
614:     Parameters
615:     ----------
616:     a : array_like
617:        The object to be converted to a type-and-requirement-satisfying array.
618:     dtype : data-type
619:        The required data-type. If None preserve the current dtype. If your
620:        application requires the data to be in native byteorder, include
621:        a byteorder specification as a part of the dtype specification.
622:     requirements : str or list of str
623:        The requirements list can be any of the following
624: 
625:        * 'F_CONTIGUOUS' ('F') - ensure a Fortran-contiguous array
626:        * 'C_CONTIGUOUS' ('C') - ensure a C-contiguous array
627:        * 'ALIGNED' ('A')      - ensure a data-type aligned array
628:        * 'WRITEABLE' ('W')    - ensure a writable array
629:        * 'OWNDATA' ('O')      - ensure an array that owns its own data
630:        * 'ENSUREARRAY', ('E') - ensure a base array, instead of a subclass
631: 
632:     See Also
633:     --------
634:     asarray : Convert input to an ndarray.
635:     asanyarray : Convert to an ndarray, but pass through ndarray subclasses.
636:     ascontiguousarray : Convert input to a contiguous array.
637:     asfortranarray : Convert input to an ndarray with column-major
638:                      memory order.
639:     ndarray.flags : Information about the memory layout of the array.
640: 
641:     Notes
642:     -----
643:     The returned array will be guaranteed to have the listed requirements
644:     by making a copy if needed.
645: 
646:     Examples
647:     --------
648:     >>> x = np.arange(6).reshape(2,3)
649:     >>> x.flags
650:       C_CONTIGUOUS : True
651:       F_CONTIGUOUS : False
652:       OWNDATA : False
653:       WRITEABLE : True
654:       ALIGNED : True
655:       UPDATEIFCOPY : False
656: 
657:     >>> y = np.require(x, dtype=np.float32, requirements=['A', 'O', 'W', 'F'])
658:     >>> y.flags
659:       C_CONTIGUOUS : False
660:       F_CONTIGUOUS : True
661:       OWNDATA : True
662:       WRITEABLE : True
663:       ALIGNED : True
664:       UPDATEIFCOPY : False
665: 
666:     '''
667:     possible_flags = {'C':'C', 'C_CONTIGUOUS':'C', 'CONTIGUOUS':'C',
668:                       'F':'F', 'F_CONTIGUOUS':'F', 'FORTRAN':'F',
669:                       'A':'A', 'ALIGNED':'A',
670:                       'W':'W', 'WRITEABLE':'W',
671:                       'O':'O', 'OWNDATA':'O',
672:                       'E':'E', 'ENSUREARRAY':'E'}
673:     if not requirements:
674:         return asanyarray(a, dtype=dtype)
675:     else:
676:         requirements = set(possible_flags[x.upper()] for x in requirements)
677: 
678:     if 'E' in requirements:
679:         requirements.remove('E')
680:         subok = False
681:     else:
682:         subok = True
683: 
684:     order = 'A'
685:     if requirements >= set(['C', 'F']):
686:         raise ValueError('Cannot specify both "C" and "F" order')
687:     elif 'F' in requirements:
688:         order = 'F'
689:         requirements.remove('F')
690:     elif 'C' in requirements:
691:         order = 'C'
692:         requirements.remove('C')
693: 
694:     arr = array(a, dtype=dtype, order=order, copy=False, subok=subok)
695: 
696:     for prop in requirements:
697:         if not arr.flags[prop]:
698:             arr = arr.copy(order)
699:             break
700:     return arr
701: 
702: def isfortran(a):
703:     '''
704:     Returns True if the array is Fortran contiguous but *not* C contiguous.
705: 
706:     This function is obsolete and, because of changes due to relaxed stride
707:     checking, its return value for the same array may differ for versions
708:     of Numpy >= 1.10 and previous versions. If you only want to check if an
709:     array is Fortran contiguous use ``a.flags.f_contiguous`` instead.
710: 
711:     Parameters
712:     ----------
713:     a : ndarray
714:         Input array.
715: 
716: 
717:     Examples
718:     --------
719: 
720:     np.array allows to specify whether the array is written in C-contiguous
721:     order (last index varies the fastest), or FORTRAN-contiguous order in
722:     memory (first index varies the fastest).
723: 
724:     >>> a = np.array([[1, 2, 3], [4, 5, 6]], order='C')
725:     >>> a
726:     array([[1, 2, 3],
727:            [4, 5, 6]])
728:     >>> np.isfortran(a)
729:     False
730: 
731:     >>> b = np.array([[1, 2, 3], [4, 5, 6]], order='FORTRAN')
732:     >>> b
733:     array([[1, 2, 3],
734:            [4, 5, 6]])
735:     >>> np.isfortran(b)
736:     True
737: 
738: 
739:     The transpose of a C-ordered array is a FORTRAN-ordered array.
740: 
741:     >>> a = np.array([[1, 2, 3], [4, 5, 6]], order='C')
742:     >>> a
743:     array([[1, 2, 3],
744:            [4, 5, 6]])
745:     >>> np.isfortran(a)
746:     False
747:     >>> b = a.T
748:     >>> b
749:     array([[1, 4],
750:            [2, 5],
751:            [3, 6]])
752:     >>> np.isfortran(b)
753:     True
754: 
755:     C-ordered arrays evaluate as False even if they are also FORTRAN-ordered.
756: 
757:     >>> np.isfortran(np.array([1, 2], order='FORTRAN'))
758:     False
759: 
760:     '''
761:     return a.flags.fnc
762: 
763: def argwhere(a):
764:     '''
765:     Find the indices of array elements that are non-zero, grouped by element.
766: 
767:     Parameters
768:     ----------
769:     a : array_like
770:         Input data.
771: 
772:     Returns
773:     -------
774:     index_array : ndarray
775:         Indices of elements that are non-zero. Indices are grouped by element.
776: 
777:     See Also
778:     --------
779:     where, nonzero
780: 
781:     Notes
782:     -----
783:     ``np.argwhere(a)`` is the same as ``np.transpose(np.nonzero(a))``.
784: 
785:     The output of ``argwhere`` is not suitable for indexing arrays.
786:     For this purpose use ``where(a)`` instead.
787: 
788:     Examples
789:     --------
790:     >>> x = np.arange(6).reshape(2,3)
791:     >>> x
792:     array([[0, 1, 2],
793:            [3, 4, 5]])
794:     >>> np.argwhere(x>1)
795:     array([[0, 2],
796:            [1, 0],
797:            [1, 1],
798:            [1, 2]])
799: 
800:     '''
801:     return transpose(nonzero(a))
802: 
803: def flatnonzero(a):
804:     '''
805:     Return indices that are non-zero in the flattened version of a.
806: 
807:     This is equivalent to a.ravel().nonzero()[0].
808: 
809:     Parameters
810:     ----------
811:     a : ndarray
812:         Input array.
813: 
814:     Returns
815:     -------
816:     res : ndarray
817:         Output array, containing the indices of the elements of `a.ravel()`
818:         that are non-zero.
819: 
820:     See Also
821:     --------
822:     nonzero : Return the indices of the non-zero elements of the input array.
823:     ravel : Return a 1-D array containing the elements of the input array.
824: 
825:     Examples
826:     --------
827:     >>> x = np.arange(-2, 3)
828:     >>> x
829:     array([-2, -1,  0,  1,  2])
830:     >>> np.flatnonzero(x)
831:     array([0, 1, 3, 4])
832: 
833:     Use the indices of the non-zero elements as an index array to extract
834:     these elements:
835: 
836:     >>> x.ravel()[np.flatnonzero(x)]
837:     array([-2, -1,  1,  2])
838: 
839:     '''
840:     return a.ravel().nonzero()[0]
841: 
842: _mode_from_name_dict = {'v': 0,
843:                         's': 1,
844:                         'f': 2}
845: 
846: def _mode_from_name(mode):
847:     if isinstance(mode, basestring):
848:         return _mode_from_name_dict[mode.lower()[0]]
849:     return mode
850: 
851: def correlate(a, v, mode='valid'):
852:     '''
853:     Cross-correlation of two 1-dimensional sequences.
854: 
855:     This function computes the correlation as generally defined in signal
856:     processing texts::
857: 
858:         c_{av}[k] = sum_n a[n+k] * conj(v[n])
859: 
860:     with a and v sequences being zero-padded where necessary and conj being
861:     the conjugate.
862: 
863:     Parameters
864:     ----------
865:     a, v : array_like
866:         Input sequences.
867:     mode : {'valid', 'same', 'full'}, optional
868:         Refer to the `convolve` docstring.  Note that the default
869:         is 'valid', unlike `convolve`, which uses 'full'.
870:     old_behavior : bool
871:         `old_behavior` was removed in NumPy 1.10. If you need the old
872:         behavior, use `multiarray.correlate`.
873: 
874:     Returns
875:     -------
876:     out : ndarray
877:         Discrete cross-correlation of `a` and `v`.
878: 
879:     See Also
880:     --------
881:     convolve : Discrete, linear convolution of two one-dimensional sequences.
882:     multiarray.correlate : Old, no conjugate, version of correlate.
883: 
884:     Notes
885:     -----
886:     The definition of correlation above is not unique and sometimes correlation
887:     may be defined differently. Another common definition is::
888: 
889:         c'_{av}[k] = sum_n a[n] conj(v[n+k])
890: 
891:     which is related to ``c_{av}[k]`` by ``c'_{av}[k] = c_{av}[-k]``.
892: 
893:     Examples
894:     --------
895:     >>> np.correlate([1, 2, 3], [0, 1, 0.5])
896:     array([ 3.5])
897:     >>> np.correlate([1, 2, 3], [0, 1, 0.5], "same")
898:     array([ 2. ,  3.5,  3. ])
899:     >>> np.correlate([1, 2, 3], [0, 1, 0.5], "full")
900:     array([ 0.5,  2. ,  3.5,  3. ,  0. ])
901: 
902:     Using complex sequences:
903: 
904:     >>> np.correlate([1+1j, 2, 3-1j], [0, 1, 0.5j], 'full')
905:     array([ 0.5-0.5j,  1.0+0.j ,  1.5-1.5j,  3.0-1.j ,  0.0+0.j ])
906: 
907:     Note that you get the time reversed, complex conjugated result
908:     when the two input sequences change places, i.e.,
909:     ``c_{va}[k] = c^{*}_{av}[-k]``:
910: 
911:     >>> np.correlate([0, 1, 0.5j], [1+1j, 2, 3-1j], 'full')
912:     array([ 0.0+0.j ,  3.0+1.j ,  1.5+1.5j,  1.0+0.j ,  0.5+0.5j])
913: 
914:     '''
915:     mode = _mode_from_name(mode)
916:     return multiarray.correlate2(a, v, mode)
917: 
918: def convolve(a,v,mode='full'):
919:     '''
920:     Returns the discrete, linear convolution of two one-dimensional sequences.
921: 
922:     The convolution operator is often seen in signal processing, where it
923:     models the effect of a linear time-invariant system on a signal [1]_.  In
924:     probability theory, the sum of two independent random variables is
925:     distributed according to the convolution of their individual
926:     distributions.
927: 
928:     If `v` is longer than `a`, the arrays are swapped before computation.
929: 
930:     Parameters
931:     ----------
932:     a : (N,) array_like
933:         First one-dimensional input array.
934:     v : (M,) array_like
935:         Second one-dimensional input array.
936:     mode : {'full', 'valid', 'same'}, optional
937:         'full':
938:           By default, mode is 'full'.  This returns the convolution
939:           at each point of overlap, with an output shape of (N+M-1,). At
940:           the end-points of the convolution, the signals do not overlap
941:           completely, and boundary effects may be seen.
942: 
943:         'same':
944:           Mode 'same' returns output of length ``max(M, N)``.  Boundary
945:           effects are still visible.
946: 
947:         'valid':
948:           Mode 'valid' returns output of length
949:           ``max(M, N) - min(M, N) + 1``.  The convolution product is only given
950:           for points where the signals overlap completely.  Values outside
951:           the signal boundary have no effect.
952: 
953:     Returns
954:     -------
955:     out : ndarray
956:         Discrete, linear convolution of `a` and `v`.
957: 
958:     See Also
959:     --------
960:     scipy.signal.fftconvolve : Convolve two arrays using the Fast Fourier
961:                                Transform.
962:     scipy.linalg.toeplitz : Used to construct the convolution operator.
963:     polymul : Polynomial multiplication. Same output as convolve, but also
964:               accepts poly1d objects as input.
965: 
966:     Notes
967:     -----
968:     The discrete convolution operation is defined as
969: 
970:     .. math:: (a * v)[n] = \\sum_{m = -\\infty}^{\\infty} a[m] v[n - m]
971: 
972:     It can be shown that a convolution :math:`x(t) * y(t)` in time/space
973:     is equivalent to the multiplication :math:`X(f) Y(f)` in the Fourier
974:     domain, after appropriate padding (padding is necessary to prevent
975:     circular convolution).  Since multiplication is more efficient (faster)
976:     than convolution, the function `scipy.signal.fftconvolve` exploits the
977:     FFT to calculate the convolution of large data-sets.
978: 
979:     References
980:     ----------
981:     .. [1] Wikipedia, "Convolution", http://en.wikipedia.org/wiki/Convolution.
982: 
983:     Examples
984:     --------
985:     Note how the convolution operator flips the second array
986:     before "sliding" the two across one another:
987: 
988:     >>> np.convolve([1, 2, 3], [0, 1, 0.5])
989:     array([ 0. ,  1. ,  2.5,  4. ,  1.5])
990: 
991:     Only return the middle values of the convolution.
992:     Contains boundary effects, where zeros are taken
993:     into account:
994: 
995:     >>> np.convolve([1,2,3],[0,1,0.5], 'same')
996:     array([ 1. ,  2.5,  4. ])
997: 
998:     The two arrays are of the same length, so there
999:     is only one position where they completely overlap:
1000: 
1001:     >>> np.convolve([1,2,3],[0,1,0.5], 'valid')
1002:     array([ 2.5])
1003: 
1004:     '''
1005:     a, v = array(a, copy=False, ndmin=1), array(v, copy=False, ndmin=1)
1006:     if (len(v) > len(a)):
1007:         a, v = v, a
1008:     if len(a) == 0:
1009:         raise ValueError('a cannot be empty')
1010:     if len(v) == 0:
1011:         raise ValueError('v cannot be empty')
1012:     mode = _mode_from_name(mode)
1013:     return multiarray.correlate(a, v[::-1], mode)
1014: 
1015: def outer(a, b, out=None):
1016:     '''
1017:     Compute the outer product of two vectors.
1018: 
1019:     Given two vectors, ``a = [a0, a1, ..., aM]`` and
1020:     ``b = [b0, b1, ..., bN]``,
1021:     the outer product [1]_ is::
1022: 
1023:       [[a0*b0  a0*b1 ... a0*bN ]
1024:        [a1*b0    .
1025:        [ ...          .
1026:        [aM*b0            aM*bN ]]
1027: 
1028:     Parameters
1029:     ----------
1030:     a : (M,) array_like
1031:         First input vector.  Input is flattened if
1032:         not already 1-dimensional.
1033:     b : (N,) array_like
1034:         Second input vector.  Input is flattened if
1035:         not already 1-dimensional.
1036:     out : (M, N) ndarray, optional
1037:         A location where the result is stored
1038: 
1039:         .. versionadded:: 1.9.0
1040: 
1041:     Returns
1042:     -------
1043:     out : (M, N) ndarray
1044:         ``out[i, j] = a[i] * b[j]``
1045: 
1046:     See also
1047:     --------
1048:     inner, einsum
1049: 
1050:     References
1051:     ----------
1052:     .. [1] : G. H. Golub and C. F. van Loan, *Matrix Computations*, 3rd
1053:              ed., Baltimore, MD, Johns Hopkins University Press, 1996,
1054:              pg. 8.
1055: 
1056:     Examples
1057:     --------
1058:     Make a (*very* coarse) grid for computing a Mandelbrot set:
1059: 
1060:     >>> rl = np.outer(np.ones((5,)), np.linspace(-2, 2, 5))
1061:     >>> rl
1062:     array([[-2., -1.,  0.,  1.,  2.],
1063:            [-2., -1.,  0.,  1.,  2.],
1064:            [-2., -1.,  0.,  1.,  2.],
1065:            [-2., -1.,  0.,  1.,  2.],
1066:            [-2., -1.,  0.,  1.,  2.]])
1067:     >>> im = np.outer(1j*np.linspace(2, -2, 5), np.ones((5,)))
1068:     >>> im
1069:     array([[ 0.+2.j,  0.+2.j,  0.+2.j,  0.+2.j,  0.+2.j],
1070:            [ 0.+1.j,  0.+1.j,  0.+1.j,  0.+1.j,  0.+1.j],
1071:            [ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j],
1072:            [ 0.-1.j,  0.-1.j,  0.-1.j,  0.-1.j,  0.-1.j],
1073:            [ 0.-2.j,  0.-2.j,  0.-2.j,  0.-2.j,  0.-2.j]])
1074:     >>> grid = rl + im
1075:     >>> grid
1076:     array([[-2.+2.j, -1.+2.j,  0.+2.j,  1.+2.j,  2.+2.j],
1077:            [-2.+1.j, -1.+1.j,  0.+1.j,  1.+1.j,  2.+1.j],
1078:            [-2.+0.j, -1.+0.j,  0.+0.j,  1.+0.j,  2.+0.j],
1079:            [-2.-1.j, -1.-1.j,  0.-1.j,  1.-1.j,  2.-1.j],
1080:            [-2.-2.j, -1.-2.j,  0.-2.j,  1.-2.j,  2.-2.j]])
1081: 
1082:     An example using a "vector" of letters:
1083: 
1084:     >>> x = np.array(['a', 'b', 'c'], dtype=object)
1085:     >>> np.outer(x, [1, 2, 3])
1086:     array([[a, aa, aaa],
1087:            [b, bb, bbb],
1088:            [c, cc, ccc]], dtype=object)
1089: 
1090:     '''
1091:     a = asarray(a)
1092:     b = asarray(b)
1093:     return multiply(a.ravel()[:, newaxis], b.ravel()[newaxis,:], out)
1094: 
1095: 
1096: def alterdot():
1097:     '''
1098:     Change `dot`, `vdot`, and `inner` to use accelerated BLAS functions.
1099: 
1100:     Typically, as a user of Numpy, you do not explicitly call this
1101:     function. If Numpy is built with an accelerated BLAS, this function is
1102:     automatically called when Numpy is imported.
1103: 
1104:     When Numpy is built with an accelerated BLAS like ATLAS, these
1105:     functions are replaced to make use of the faster implementations.  The
1106:     faster implementations only affect float32, float64, complex64, and
1107:     complex128 arrays. Furthermore, the BLAS API only includes
1108:     matrix-matrix, matrix-vector, and vector-vector products. Products of
1109:     arrays with larger dimensionalities use the built in functions and are
1110:     not accelerated.
1111: 
1112:     .. note:: Deprecated in Numpy 1.10
1113:               The cblas functions have been integrated into the multarray
1114:               module and alterdot now longer does anything. It will be
1115:               removed in Numpy 1.11.0.
1116: 
1117:     See Also
1118:     --------
1119:     restoredot : `restoredot` undoes the effects of `alterdot`.
1120: 
1121:     '''
1122:     # 2014-08-13, 1.10
1123:     warnings.warn("alterdot no longer does anything.", DeprecationWarning)
1124: 
1125: 
1126: def restoredot():
1127:     '''
1128:     Restore `dot`, `vdot`, and `innerproduct` to the default non-BLAS
1129:     implementations.
1130: 
1131:     Typically, the user will only need to call this when troubleshooting
1132:     and installation problem, reproducing the conditions of a build without
1133:     an accelerated BLAS, or when being very careful about benchmarking
1134:     linear algebra operations.
1135: 
1136:     .. note:: Deprecated in Numpy 1.10
1137:               The cblas functions have been integrated into the multarray
1138:               module and restoredot now longer does anything. It will be
1139:               removed in Numpy 1.11.0.
1140: 
1141:     See Also
1142:     --------
1143:     alterdot : `restoredot` undoes the effects of `alterdot`.
1144: 
1145:     '''
1146:     # 2014-08-13, 1.10
1147:     warnings.warn("restoredot no longer does anything.", DeprecationWarning)
1148: 
1149: 
1150: def tensordot(a, b, axes=2):
1151:     '''
1152:     Compute tensor dot product along specified axes for arrays >= 1-D.
1153: 
1154:     Given two tensors (arrays of dimension greater than or equal to one),
1155:     `a` and `b`, and an array_like object containing two array_like
1156:     objects, ``(a_axes, b_axes)``, sum the products of `a`'s and `b`'s
1157:     elements (components) over the axes specified by ``a_axes`` and
1158:     ``b_axes``. The third argument can be a single non-negative
1159:     integer_like scalar, ``N``; if it is such, then the last ``N``
1160:     dimensions of `a` and the first ``N`` dimensions of `b` are summed
1161:     over.
1162: 
1163:     Parameters
1164:     ----------
1165:     a, b : array_like, len(shape) >= 1
1166:         Tensors to "dot".
1167: 
1168:     axes : int or (2,) array_like
1169:         * integer_like
1170:           If an int N, sum over the last N axes of `a` and the first N axes
1171:           of `b` in order. The sizes of the corresponding axes must match.
1172:         * (2,) array_like
1173:           Or, a list of axes to be summed over, first sequence applying to `a`,
1174:           second to `b`. Both elements array_like must be of the same length.
1175: 
1176:     See Also
1177:     --------
1178:     dot, einsum
1179: 
1180:     Notes
1181:     -----
1182:     Three common use cases are:
1183:         ``axes = 0`` : tensor product $a\otimes b$
1184:         ``axes = 1`` : tensor dot product $a\cdot b$
1185:         ``axes = 2`` : (default) tensor double contraction $a:b$
1186: 
1187:     When `axes` is integer_like, the sequence for evaluation will be: first
1188:     the -Nth axis in `a` and 0th axis in `b`, and the -1th axis in `a` and
1189:     Nth axis in `b` last.
1190: 
1191:     When there is more than one axis to sum over - and they are not the last
1192:     (first) axes of `a` (`b`) - the argument `axes` should consist of
1193:     two sequences of the same length, with the first axis to sum over given
1194:     first in both sequences, the second axis second, and so forth.
1195: 
1196:     Examples
1197:     --------
1198:     A "traditional" example:
1199: 
1200:     >>> a = np.arange(60.).reshape(3,4,5)
1201:     >>> b = np.arange(24.).reshape(4,3,2)
1202:     >>> c = np.tensordot(a,b, axes=([1,0],[0,1]))
1203:     >>> c.shape
1204:     (5, 2)
1205:     >>> c
1206:     array([[ 4400.,  4730.],
1207:            [ 4532.,  4874.],
1208:            [ 4664.,  5018.],
1209:            [ 4796.,  5162.],
1210:            [ 4928.,  5306.]])
1211:     >>> # A slower but equivalent way of computing the same...
1212:     >>> d = np.zeros((5,2))
1213:     >>> for i in range(5):
1214:     ...   for j in range(2):
1215:     ...     for k in range(3):
1216:     ...       for n in range(4):
1217:     ...         d[i,j] += a[k,n,i] * b[n,k,j]
1218:     >>> c == d
1219:     array([[ True,  True],
1220:            [ True,  True],
1221:            [ True,  True],
1222:            [ True,  True],
1223:            [ True,  True]], dtype=bool)
1224: 
1225:     An extended example taking advantage of the overloading of + and \\*:
1226: 
1227:     >>> a = np.array(range(1, 9))
1228:     >>> a.shape = (2, 2, 2)
1229:     >>> A = np.array(('a', 'b', 'c', 'd'), dtype=object)
1230:     >>> A.shape = (2, 2)
1231:     >>> a; A
1232:     array([[[1, 2],
1233:             [3, 4]],
1234:            [[5, 6],
1235:             [7, 8]]])
1236:     array([[a, b],
1237:            [c, d]], dtype=object)
1238: 
1239:     >>> np.tensordot(a, A) # third argument default is 2 for double-contraction
1240:     array([abbcccdddd, aaaaabbbbbbcccccccdddddddd], dtype=object)
1241: 
1242:     >>> np.tensordot(a, A, 1)
1243:     array([[[acc, bdd],
1244:             [aaacccc, bbbdddd]],
1245:            [[aaaaacccccc, bbbbbdddddd],
1246:             [aaaaaaacccccccc, bbbbbbbdddddddd]]], dtype=object)
1247: 
1248:     >>> np.tensordot(a, A, 0) # tensor product (result too long to incl.)
1249:     array([[[[[a, b],
1250:               [c, d]],
1251:               ...
1252: 
1253:     >>> np.tensordot(a, A, (0, 1))
1254:     array([[[abbbbb, cddddd],
1255:             [aabbbbbb, ccdddddd]],
1256:            [[aaabbbbbbb, cccddddddd],
1257:             [aaaabbbbbbbb, ccccdddddddd]]], dtype=object)
1258: 
1259:     >>> np.tensordot(a, A, (2, 1))
1260:     array([[[abb, cdd],
1261:             [aaabbbb, cccdddd]],
1262:            [[aaaaabbbbbb, cccccdddddd],
1263:             [aaaaaaabbbbbbbb, cccccccdddddddd]]], dtype=object)
1264: 
1265:     >>> np.tensordot(a, A, ((0, 1), (0, 1)))
1266:     array([abbbcccccddddddd, aabbbbccccccdddddddd], dtype=object)
1267: 
1268:     >>> np.tensordot(a, A, ((2, 1), (1, 0)))
1269:     array([acccbbdddd, aaaaacccccccbbbbbbdddddddd], dtype=object)
1270: 
1271:     '''
1272:     try:
1273:         iter(axes)
1274:     except:
1275:         axes_a = list(range(-axes, 0))
1276:         axes_b = list(range(0, axes))
1277:     else:
1278:         axes_a, axes_b = axes
1279:     try:
1280:         na = len(axes_a)
1281:         axes_a = list(axes_a)
1282:     except TypeError:
1283:         axes_a = [axes_a]
1284:         na = 1
1285:     try:
1286:         nb = len(axes_b)
1287:         axes_b = list(axes_b)
1288:     except TypeError:
1289:         axes_b = [axes_b]
1290:         nb = 1
1291: 
1292:     a, b = asarray(a), asarray(b)
1293:     as_ = a.shape
1294:     nda = len(a.shape)
1295:     bs = b.shape
1296:     ndb = len(b.shape)
1297:     equal = True
1298:     if na != nb:
1299:         equal = False
1300:     else:
1301:         for k in range(na):
1302:             if as_[axes_a[k]] != bs[axes_b[k]]:
1303:                 equal = False
1304:                 break
1305:             if axes_a[k] < 0:
1306:                 axes_a[k] += nda
1307:             if axes_b[k] < 0:
1308:                 axes_b[k] += ndb
1309:     if not equal:
1310:         raise ValueError("shape-mismatch for sum")
1311: 
1312:     # Move the axes to sum over to the end of "a"
1313:     # and to the front of "b"
1314:     notin = [k for k in range(nda) if k not in axes_a]
1315:     newaxes_a = notin + axes_a
1316:     N2 = 1
1317:     for axis in axes_a:
1318:         N2 *= as_[axis]
1319:     newshape_a = (-1, N2)
1320:     olda = [as_[axis] for axis in notin]
1321: 
1322:     notin = [k for k in range(ndb) if k not in axes_b]
1323:     newaxes_b = axes_b + notin
1324:     N2 = 1
1325:     for axis in axes_b:
1326:         N2 *= bs[axis]
1327:     newshape_b = (N2, -1)
1328:     oldb = [bs[axis] for axis in notin]
1329: 
1330:     at = a.transpose(newaxes_a).reshape(newshape_a)
1331:     bt = b.transpose(newaxes_b).reshape(newshape_b)
1332:     res = dot(at, bt)
1333:     return res.reshape(olda + oldb)
1334: 
1335: def roll(a, shift, axis=None):
1336:     '''
1337:     Roll array elements along a given axis.
1338: 
1339:     Elements that roll beyond the last position are re-introduced at
1340:     the first.
1341: 
1342:     Parameters
1343:     ----------
1344:     a : array_like
1345:         Input array.
1346:     shift : int
1347:         The number of places by which elements are shifted.
1348:     axis : int, optional
1349:         The axis along which elements are shifted.  By default, the array
1350:         is flattened before shifting, after which the original
1351:         shape is restored.
1352: 
1353:     Returns
1354:     -------
1355:     res : ndarray
1356:         Output array, with the same shape as `a`.
1357: 
1358:     See Also
1359:     --------
1360:     rollaxis : Roll the specified axis backwards, until it lies in a
1361:                given position.
1362: 
1363:     Examples
1364:     --------
1365:     >>> x = np.arange(10)
1366:     >>> np.roll(x, 2)
1367:     array([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])
1368: 
1369:     >>> x2 = np.reshape(x, (2,5))
1370:     >>> x2
1371:     array([[0, 1, 2, 3, 4],
1372:            [5, 6, 7, 8, 9]])
1373:     >>> np.roll(x2, 1)
1374:     array([[9, 0, 1, 2, 3],
1375:            [4, 5, 6, 7, 8]])
1376:     >>> np.roll(x2, 1, axis=0)
1377:     array([[5, 6, 7, 8, 9],
1378:            [0, 1, 2, 3, 4]])
1379:     >>> np.roll(x2, 1, axis=1)
1380:     array([[4, 0, 1, 2, 3],
1381:            [9, 5, 6, 7, 8]])
1382: 
1383:     '''
1384:     a = asanyarray(a)
1385:     if axis is None:
1386:         n = a.size
1387:         reshape = True
1388:     else:
1389:         try:
1390:             n = a.shape[axis]
1391:         except IndexError:
1392:             raise ValueError('axis must be >= 0 and < %d' % a.ndim)
1393:         reshape = False
1394:     if n == 0:
1395:         return a
1396:     shift %= n
1397:     indexes = concatenate((arange(n - shift, n), arange(n - shift)))
1398:     res = a.take(indexes, axis)
1399:     if reshape:
1400:         res = res.reshape(a.shape)
1401:     return res
1402: 
1403: 
1404: def rollaxis(a, axis, start=0):
1405:     '''
1406:     Roll the specified axis backwards, until it lies in a given position.
1407: 
1408:     Parameters
1409:     ----------
1410:     a : ndarray
1411:         Input array.
1412:     axis : int
1413:         The axis to roll backwards.  The positions of the other axes do not
1414:         change relative to one another.
1415:     start : int, optional
1416:         The axis is rolled until it lies before this position.  The default,
1417:         0, results in a "complete" roll.
1418: 
1419:     Returns
1420:     -------
1421:     res : ndarray
1422:         For Numpy >= 1.10 a view of `a` is always returned. For earlier
1423:         Numpy versions a view of `a` is returned only if the order of the
1424:         axes is changed, otherwise the input array is returned.
1425: 
1426:     See Also
1427:     --------
1428:     moveaxis : Move array axes to new positions.
1429:     roll : Roll the elements of an array by a number of positions along a
1430:         given axis.
1431: 
1432:     Examples
1433:     --------
1434:     >>> a = np.ones((3,4,5,6))
1435:     >>> np.rollaxis(a, 3, 1).shape
1436:     (3, 6, 4, 5)
1437:     >>> np.rollaxis(a, 2).shape
1438:     (5, 3, 4, 6)
1439:     >>> np.rollaxis(a, 1, 4).shape
1440:     (3, 5, 6, 4)
1441: 
1442:     '''
1443:     n = a.ndim
1444:     if axis < 0:
1445:         axis += n
1446:     if start < 0:
1447:         start += n
1448:     msg = 'rollaxis: %s (%d) must be >=0 and < %d'
1449:     if not (0 <= axis < n):
1450:         raise ValueError(msg % ('axis', axis, n))
1451:     if not (0 <= start < n + 1):
1452:         raise ValueError(msg % ('start', start, n + 1))
1453:     if (axis < start):
1454:         # it's been removed
1455:         start -= 1
1456:     if axis == start:
1457:         return a[...]
1458:     axes = list(range(0, n))
1459:     axes.remove(axis)
1460:     axes.insert(start, axis)
1461:     return a.transpose(axes)
1462: 
1463: 
1464: def _validate_axis(axis, ndim, argname):
1465:     try:
1466:         axis = [operator.index(axis)]
1467:     except TypeError:
1468:         axis = list(axis)
1469:     axis = [a + ndim if a < 0 else a for a in axis]
1470:     if not builtins.all(0 <= a < ndim for a in axis):
1471:         raise ValueError('invalid axis for this array in `%s` argument' %
1472:                          argname)
1473:     if len(set(axis)) != len(axis):
1474:         raise ValueError('repeated axis in `%s` argument' % argname)
1475:     return axis
1476: 
1477: 
1478: def moveaxis(a, source, destination):
1479:     '''
1480:     Move axes of an array to new positions.
1481: 
1482:     Other axes remain in their original order.
1483: 
1484:     .. versionadded::1.11.0
1485: 
1486:     Parameters
1487:     ----------
1488:     a : np.ndarray
1489:         The array whose axes should be reordered.
1490:     source : int or sequence of int
1491:         Original positions of the axes to move. These must be unique.
1492:     destination : int or sequence of int
1493:         Destination positions for each of the original axes. These must also be
1494:         unique.
1495: 
1496:     Returns
1497:     -------
1498:     result : np.ndarray
1499:         Array with moved axes. This array is a view of the input array.
1500: 
1501:     See Also
1502:     --------
1503:     transpose: Permute the dimensions of an array.
1504:     swapaxes: Interchange two axes of an array.
1505: 
1506:     Examples
1507:     --------
1508: 
1509:     >>> x = np.zeros((3, 4, 5))
1510:     >>> np.moveaxis(x, 0, -1).shape
1511:     (4, 5, 3)
1512:     >>> np.moveaxis(x, -1, 0).shape
1513:     (5, 3, 4)
1514: 
1515:     These all achieve the same result:
1516: 
1517:     >>> np.transpose(x).shape
1518:     (5, 4, 3)
1519:     >>> np.swapaxis(x, 0, -1).shape
1520:     (5, 4, 3)
1521:     >>> np.moveaxis(x, [0, 1], [-1, -2]).shape
1522:     (5, 4, 3)
1523:     >>> np.moveaxis(x, [0, 1, 2], [-1, -2, -3]).shape
1524:     (5, 4, 3)
1525: 
1526:     '''
1527:     try:
1528:         # allow duck-array types if they define transpose
1529:         transpose = a.transpose
1530:     except AttributeError:
1531:         a = asarray(a)
1532:         transpose = a.transpose
1533: 
1534:     source = _validate_axis(source, a.ndim, 'source')
1535:     destination = _validate_axis(destination, a.ndim, 'destination')
1536:     if len(source) != len(destination):
1537:         raise ValueError('`source` and `destination` arguments must have '
1538:                          'the same number of elements')
1539: 
1540:     order = [n for n in range(a.ndim) if n not in source]
1541: 
1542:     for dest, src in sorted(zip(destination, source)):
1543:         order.insert(dest, src)
1544: 
1545:     result = transpose(order)
1546:     return result
1547: 
1548: 
1549: # fix hack in scipy which imports this function
1550: def _move_axis_to_0(a, axis):
1551:     return rollaxis(a, axis, 0)
1552: 
1553: def cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None):
1554:     '''
1555:     Return the cross product of two (arrays of) vectors.
1556: 
1557:     The cross product of `a` and `b` in :math:`R^3` is a vector perpendicular
1558:     to both `a` and `b`.  If `a` and `b` are arrays of vectors, the vectors
1559:     are defined by the last axis of `a` and `b` by default, and these axes
1560:     can have dimensions 2 or 3.  Where the dimension of either `a` or `b` is
1561:     2, the third component of the input vector is assumed to be zero and the
1562:     cross product calculated accordingly.  In cases where both input vectors
1563:     have dimension 2, the z-component of the cross product is returned.
1564: 
1565:     Parameters
1566:     ----------
1567:     a : array_like
1568:         Components of the first vector(s).
1569:     b : array_like
1570:         Components of the second vector(s).
1571:     axisa : int, optional
1572:         Axis of `a` that defines the vector(s).  By default, the last axis.
1573:     axisb : int, optional
1574:         Axis of `b` that defines the vector(s).  By default, the last axis.
1575:     axisc : int, optional
1576:         Axis of `c` containing the cross product vector(s).  Ignored if
1577:         both input vectors have dimension 2, as the return is scalar.
1578:         By default, the last axis.
1579:     axis : int, optional
1580:         If defined, the axis of `a`, `b` and `c` that defines the vector(s)
1581:         and cross product(s).  Overrides `axisa`, `axisb` and `axisc`.
1582: 
1583:     Returns
1584:     -------
1585:     c : ndarray
1586:         Vector cross product(s).
1587: 
1588:     Raises
1589:     ------
1590:     ValueError
1591:         When the dimension of the vector(s) in `a` and/or `b` does not
1592:         equal 2 or 3.
1593: 
1594:     See Also
1595:     --------
1596:     inner : Inner product
1597:     outer : Outer product.
1598:     ix_ : Construct index arrays.
1599: 
1600:     Notes
1601:     -----
1602:     .. versionadded:: 1.9.0
1603: 
1604:     Supports full broadcasting of the inputs.
1605: 
1606:     Examples
1607:     --------
1608:     Vector cross-product.
1609: 
1610:     >>> x = [1, 2, 3]
1611:     >>> y = [4, 5, 6]
1612:     >>> np.cross(x, y)
1613:     array([-3,  6, -3])
1614: 
1615:     One vector with dimension 2.
1616: 
1617:     >>> x = [1, 2]
1618:     >>> y = [4, 5, 6]
1619:     >>> np.cross(x, y)
1620:     array([12, -6, -3])
1621: 
1622:     Equivalently:
1623: 
1624:     >>> x = [1, 2, 0]
1625:     >>> y = [4, 5, 6]
1626:     >>> np.cross(x, y)
1627:     array([12, -6, -3])
1628: 
1629:     Both vectors with dimension 2.
1630: 
1631:     >>> x = [1,2]
1632:     >>> y = [4,5]
1633:     >>> np.cross(x, y)
1634:     -3
1635: 
1636:     Multiple vector cross-products. Note that the direction of the cross
1637:     product vector is defined by the `right-hand rule`.
1638: 
1639:     >>> x = np.array([[1,2,3], [4,5,6]])
1640:     >>> y = np.array([[4,5,6], [1,2,3]])
1641:     >>> np.cross(x, y)
1642:     array([[-3,  6, -3],
1643:            [ 3, -6,  3]])
1644: 
1645:     The orientation of `c` can be changed using the `axisc` keyword.
1646: 
1647:     >>> np.cross(x, y, axisc=0)
1648:     array([[-3,  3],
1649:            [ 6, -6],
1650:            [-3,  3]])
1651: 
1652:     Change the vector definition of `x` and `y` using `axisa` and `axisb`.
1653: 
1654:     >>> x = np.array([[1,2,3], [4,5,6], [7, 8, 9]])
1655:     >>> y = np.array([[7, 8, 9], [4,5,6], [1,2,3]])
1656:     >>> np.cross(x, y)
1657:     array([[ -6,  12,  -6],
1658:            [  0,   0,   0],
1659:            [  6, -12,   6]])
1660:     >>> np.cross(x, y, axisa=0, axisb=0)
1661:     array([[-24,  48, -24],
1662:            [-30,  60, -30],
1663:            [-36,  72, -36]])
1664: 
1665:     '''
1666:     if axis is not None:
1667:         axisa, axisb, axisc = (axis,) * 3
1668:     a = asarray(a)
1669:     b = asarray(b)
1670:     # Check axisa and axisb are within bounds
1671:     axis_msg = "'axis{0}' out of bounds"
1672:     if axisa < -a.ndim or axisa >= a.ndim:
1673:         raise ValueError(axis_msg.format('a'))
1674:     if axisb < -b.ndim or axisb >= b.ndim:
1675:         raise ValueError(axis_msg.format('b'))
1676:     # Move working axis to the end of the shape
1677:     a = rollaxis(a, axisa, a.ndim)
1678:     b = rollaxis(b, axisb, b.ndim)
1679:     msg = ("incompatible dimensions for cross product\n"
1680:            "(dimension must be 2 or 3)")
1681:     if a.shape[-1] not in (2, 3) or b.shape[-1] not in (2, 3):
1682:         raise ValueError(msg)
1683: 
1684:     # Create the output array
1685:     shape = broadcast(a[..., 0], b[..., 0]).shape
1686:     if a.shape[-1] == 3 or b.shape[-1] == 3:
1687:         shape += (3,)
1688:         # Check axisc is within bounds
1689:         if axisc < -len(shape) or axisc >= len(shape):
1690:             raise ValueError(axis_msg.format('c'))
1691:     dtype = promote_types(a.dtype, b.dtype)
1692:     cp = empty(shape, dtype)
1693: 
1694:     # create local aliases for readability
1695:     a0 = a[..., 0]
1696:     a1 = a[..., 1]
1697:     if a.shape[-1] == 3:
1698:         a2 = a[..., 2]
1699:     b0 = b[..., 0]
1700:     b1 = b[..., 1]
1701:     if b.shape[-1] == 3:
1702:         b2 = b[..., 2]
1703:     if cp.ndim != 0 and cp.shape[-1] == 3:
1704:         cp0 = cp[..., 0]
1705:         cp1 = cp[..., 1]
1706:         cp2 = cp[..., 2]
1707: 
1708:     if a.shape[-1] == 2:
1709:         if b.shape[-1] == 2:
1710:             # a0 * b1 - a1 * b0
1711:             multiply(a0, b1, out=cp)
1712:             cp -= a1 * b0
1713:             return cp
1714:         else:
1715:             assert b.shape[-1] == 3
1716:             # cp0 = a1 * b2 - 0  (a2 = 0)
1717:             # cp1 = 0 - a0 * b2  (a2 = 0)
1718:             # cp2 = a0 * b1 - a1 * b0
1719:             multiply(a1, b2, out=cp0)
1720:             multiply(a0, b2, out=cp1)
1721:             negative(cp1, out=cp1)
1722:             multiply(a0, b1, out=cp2)
1723:             cp2 -= a1 * b0
1724:     else:
1725:         assert a.shape[-1] == 3
1726:         if b.shape[-1] == 3:
1727:             # cp0 = a1 * b2 - a2 * b1
1728:             # cp1 = a2 * b0 - a0 * b2
1729:             # cp2 = a0 * b1 - a1 * b0
1730:             multiply(a1, b2, out=cp0)
1731:             tmp = array(a2 * b1)
1732:             cp0 -= tmp
1733:             multiply(a2, b0, out=cp1)
1734:             multiply(a0, b2, out=tmp)
1735:             cp1 -= tmp
1736:             multiply(a0, b1, out=cp2)
1737:             multiply(a1, b0, out=tmp)
1738:             cp2 -= tmp
1739:         else:
1740:             assert b.shape[-1] == 2
1741:             # cp0 = 0 - a2 * b1  (b2 = 0)
1742:             # cp1 = a2 * b0 - 0  (b2 = 0)
1743:             # cp2 = a0 * b1 - a1 * b0
1744:             multiply(a2, b1, out=cp0)
1745:             negative(cp0, out=cp0)
1746:             multiply(a2, b0, out=cp1)
1747:             multiply(a0, b1, out=cp2)
1748:             cp2 -= a1 * b0
1749: 
1750:     # This works because we are moving the last axis
1751:     return rollaxis(cp, -1, axisc)
1752: 
1753: #Use numarray's printing function
1754: from .arrayprint import array2string, get_printoptions, set_printoptions
1755: 
1756: _typelessdata = [int_, float_, complex_]
1757: if issubclass(intc, int):
1758:     _typelessdata.append(intc)
1759: 
1760: if issubclass(longlong, int):
1761:     _typelessdata.append(longlong)
1762: 
1763: def array_repr(arr, max_line_width=None, precision=None, suppress_small=None):
1764:     '''
1765:     Return the string representation of an array.
1766: 
1767:     Parameters
1768:     ----------
1769:     arr : ndarray
1770:         Input array.
1771:     max_line_width : int, optional
1772:         The maximum number of columns the string should span. Newline
1773:         characters split the string appropriately after array elements.
1774:     precision : int, optional
1775:         Floating point precision. Default is the current printing precision
1776:         (usually 8), which can be altered using `set_printoptions`.
1777:     suppress_small : bool, optional
1778:         Represent very small numbers as zero, default is False. Very small
1779:         is defined by `precision`, if the precision is 8 then
1780:         numbers smaller than 5e-9 are represented as zero.
1781: 
1782:     Returns
1783:     -------
1784:     string : str
1785:       The string representation of an array.
1786: 
1787:     See Also
1788:     --------
1789:     array_str, array2string, set_printoptions
1790: 
1791:     Examples
1792:     --------
1793:     >>> np.array_repr(np.array([1,2]))
1794:     'array([1, 2])'
1795:     >>> np.array_repr(np.ma.array([0.]))
1796:     'MaskedArray([ 0.])'
1797:     >>> np.array_repr(np.array([], np.int32))
1798:     'array([], dtype=int32)'
1799: 
1800:     >>> x = np.array([1e-6, 4e-7, 2, 3])
1801:     >>> np.array_repr(x, precision=6, suppress_small=True)
1802:     'array([ 0.000001,  0.      ,  2.      ,  3.      ])'
1803: 
1804:     '''
1805:     if arr.size > 0 or arr.shape == (0,):
1806:         lst = array2string(arr, max_line_width, precision, suppress_small,
1807:                            ', ', "array(")
1808:     else:  # show zero-length shape unless it is (0,)
1809:         lst = "[], shape=%s" % (repr(arr.shape),)
1810: 
1811:     if arr.__class__ is not ndarray:
1812:         cName = arr.__class__.__name__
1813:     else:
1814:         cName = "array"
1815: 
1816:     skipdtype = (arr.dtype.type in _typelessdata) and arr.size > 0
1817: 
1818:     if skipdtype:
1819:         return "%s(%s)" % (cName, lst)
1820:     else:
1821:         typename = arr.dtype.name
1822:         # Quote typename in the output if it is "complex".
1823:         if typename and not (typename[0].isalpha() and typename.isalnum()):
1824:             typename = "'%s'" % typename
1825: 
1826:         lf = ''
1827:         if issubclass(arr.dtype.type, flexible):
1828:             if arr.dtype.names:
1829:                 typename = "%s" % str(arr.dtype)
1830:             else:
1831:                 typename = "'%s'" % str(arr.dtype)
1832:             lf = '\n'+' '*len("array(")
1833:         return cName + "(%s, %sdtype=%s)" % (lst, lf, typename)
1834: 
1835: def array_str(a, max_line_width=None, precision=None, suppress_small=None):
1836:     '''
1837:     Return a string representation of the data in an array.
1838: 
1839:     The data in the array is returned as a single string.  This function is
1840:     similar to `array_repr`, the difference being that `array_repr` also
1841:     returns information on the kind of array and its data type.
1842: 
1843:     Parameters
1844:     ----------
1845:     a : ndarray
1846:         Input array.
1847:     max_line_width : int, optional
1848:         Inserts newlines if text is longer than `max_line_width`.  The
1849:         default is, indirectly, 75.
1850:     precision : int, optional
1851:         Floating point precision.  Default is the current printing precision
1852:         (usually 8), which can be altered using `set_printoptions`.
1853:     suppress_small : bool, optional
1854:         Represent numbers "very close" to zero as zero; default is False.
1855:         Very close is defined by precision: if the precision is 8, e.g.,
1856:         numbers smaller (in absolute value) than 5e-9 are represented as
1857:         zero.
1858: 
1859:     See Also
1860:     --------
1861:     array2string, array_repr, set_printoptions
1862: 
1863:     Examples
1864:     --------
1865:     >>> np.array_str(np.arange(3))
1866:     '[0 1 2]'
1867: 
1868:     '''
1869:     return array2string(a, max_line_width, precision, suppress_small, ' ', "", str)
1870: 
1871: def set_string_function(f, repr=True):
1872:     '''
1873:     Set a Python function to be used when pretty printing arrays.
1874: 
1875:     Parameters
1876:     ----------
1877:     f : function or None
1878:         Function to be used to pretty print arrays. The function should expect
1879:         a single array argument and return a string of the representation of
1880:         the array. If None, the function is reset to the default NumPy function
1881:         to print arrays.
1882:     repr : bool, optional
1883:         If True (default), the function for pretty printing (``__repr__``)
1884:         is set, if False the function that returns the default string
1885:         representation (``__str__``) is set.
1886: 
1887:     See Also
1888:     --------
1889:     set_printoptions, get_printoptions
1890: 
1891:     Examples
1892:     --------
1893:     >>> def pprint(arr):
1894:     ...     return 'HA! - What are you going to do now?'
1895:     ...
1896:     >>> np.set_string_function(pprint)
1897:     >>> a = np.arange(10)
1898:     >>> a
1899:     HA! - What are you going to do now?
1900:     >>> print(a)
1901:     [0 1 2 3 4 5 6 7 8 9]
1902: 
1903:     We can reset the function to the default:
1904: 
1905:     >>> np.set_string_function(None)
1906:     >>> a
1907:     array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
1908: 
1909:     `repr` affects either pretty printing or normal string representation.
1910:     Note that ``__repr__`` is still affected by setting ``__str__``
1911:     because the width of each array element in the returned string becomes
1912:     equal to the length of the result of ``__str__()``.
1913: 
1914:     >>> x = np.arange(4)
1915:     >>> np.set_string_function(lambda x:'random', repr=False)
1916:     >>> x.__str__()
1917:     'random'
1918:     >>> x.__repr__()
1919:     'array([     0,      1,      2,      3])'
1920: 
1921:     '''
1922:     if f is None:
1923:         if repr:
1924:             return multiarray.set_string_function(array_repr, 1)
1925:         else:
1926:             return multiarray.set_string_function(array_str, 0)
1927:     else:
1928:         return multiarray.set_string_function(f, repr)
1929: 
1930: set_string_function(array_str, 0)
1931: set_string_function(array_repr, 1)
1932: 
1933: little_endian = (sys.byteorder == 'little')
1934: 
1935: 
1936: def indices(dimensions, dtype=int):
1937:     '''
1938:     Return an array representing the indices of a grid.
1939: 
1940:     Compute an array where the subarrays contain index values 0,1,...
1941:     varying only along the corresponding axis.
1942: 
1943:     Parameters
1944:     ----------
1945:     dimensions : sequence of ints
1946:         The shape of the grid.
1947:     dtype : dtype, optional
1948:         Data type of the result.
1949: 
1950:     Returns
1951:     -------
1952:     grid : ndarray
1953:         The array of grid indices,
1954:         ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
1955: 
1956:     See Also
1957:     --------
1958:     mgrid, meshgrid
1959: 
1960:     Notes
1961:     -----
1962:     The output shape is obtained by prepending the number of dimensions
1963:     in front of the tuple of dimensions, i.e. if `dimensions` is a tuple
1964:     ``(r0, ..., rN-1)`` of length ``N``, the output shape is
1965:     ``(N,r0,...,rN-1)``.
1966: 
1967:     The subarrays ``grid[k]`` contains the N-D array of indices along the
1968:     ``k-th`` axis. Explicitly::
1969: 
1970:         grid[k,i0,i1,...,iN-1] = ik
1971: 
1972:     Examples
1973:     --------
1974:     >>> grid = np.indices((2, 3))
1975:     >>> grid.shape
1976:     (2, 2, 3)
1977:     >>> grid[0]        # row indices
1978:     array([[0, 0, 0],
1979:            [1, 1, 1]])
1980:     >>> grid[1]        # column indices
1981:     array([[0, 1, 2],
1982:            [0, 1, 2]])
1983: 
1984:     The indices can be used as an index into an array.
1985: 
1986:     >>> x = np.arange(20).reshape(5, 4)
1987:     >>> row, col = np.indices((2, 3))
1988:     >>> x[row, col]
1989:     array([[0, 1, 2],
1990:            [4, 5, 6]])
1991: 
1992:     Note that it would be more straightforward in the above example to
1993:     extract the required elements directly with ``x[:2, :3]``.
1994: 
1995:     '''
1996:     dimensions = tuple(dimensions)
1997:     N = len(dimensions)
1998:     if N == 0:
1999:         return array([], dtype=dtype)
2000:     res = empty((N,)+dimensions, dtype=dtype)
2001:     for i, dim in enumerate(dimensions):
2002:         tmp = arange(dim, dtype=dtype)
2003:         tmp.shape = (1,)*i + (dim,)+(1,)*(N-i-1)
2004:         newdim = dimensions[:i] + (1,) + dimensions[i+1:]
2005:         val = zeros(newdim, dtype)
2006:         add(tmp, val, res[i])
2007:     return res
2008: 
2009: def fromfunction(function, shape, **kwargs):
2010:     '''
2011:     Construct an array by executing a function over each coordinate.
2012: 
2013:     The resulting array therefore has a value ``fn(x, y, z)`` at
2014:     coordinate ``(x, y, z)``.
2015: 
2016:     Parameters
2017:     ----------
2018:     function : callable
2019:         The function is called with N parameters, where N is the rank of
2020:         `shape`.  Each parameter represents the coordinates of the array
2021:         varying along a specific axis.  For example, if `shape`
2022:         were ``(2, 2)``, then the parameters in turn be (0, 0), (0, 1),
2023:         (1, 0), (1, 1).
2024:     shape : (N,) tuple of ints
2025:         Shape of the output array, which also determines the shape of
2026:         the coordinate arrays passed to `function`.
2027:     dtype : data-type, optional
2028:         Data-type of the coordinate arrays passed to `function`.
2029:         By default, `dtype` is float.
2030: 
2031:     Returns
2032:     -------
2033:     fromfunction : any
2034:         The result of the call to `function` is passed back directly.
2035:         Therefore the shape of `fromfunction` is completely determined by
2036:         `function`.  If `function` returns a scalar value, the shape of
2037:         `fromfunction` would match the `shape` parameter.
2038: 
2039:     See Also
2040:     --------
2041:     indices, meshgrid
2042: 
2043:     Notes
2044:     -----
2045:     Keywords other than `dtype` are passed to `function`.
2046: 
2047:     Examples
2048:     --------
2049:     >>> np.fromfunction(lambda i, j: i == j, (3, 3), dtype=int)
2050:     array([[ True, False, False],
2051:            [False,  True, False],
2052:            [False, False,  True]], dtype=bool)
2053: 
2054:     >>> np.fromfunction(lambda i, j: i + j, (3, 3), dtype=int)
2055:     array([[0, 1, 2],
2056:            [1, 2, 3],
2057:            [2, 3, 4]])
2058: 
2059:     '''
2060:     dtype = kwargs.pop('dtype', float)
2061:     args = indices(shape, dtype=dtype)
2062:     return function(*args,**kwargs)
2063: 
2064: def isscalar(num):
2065:     '''
2066:     Returns True if the type of `num` is a scalar type.
2067: 
2068:     Parameters
2069:     ----------
2070:     num : any
2071:         Input argument, can be of any type and shape.
2072: 
2073:     Returns
2074:     -------
2075:     val : bool
2076:         True if `num` is a scalar type, False if it is not.
2077: 
2078:     Examples
2079:     --------
2080:     >>> np.isscalar(3.1)
2081:     True
2082:     >>> np.isscalar([3.1])
2083:     False
2084:     >>> np.isscalar(False)
2085:     True
2086: 
2087:     '''
2088:     if isinstance(num, generic):
2089:         return True
2090:     else:
2091:         return type(num) in ScalarType
2092: 
2093: _lkup = {
2094:     '0':'0000',
2095:     '1':'0001',
2096:     '2':'0010',
2097:     '3':'0011',
2098:     '4':'0100',
2099:     '5':'0101',
2100:     '6':'0110',
2101:     '7':'0111',
2102:     '8':'1000',
2103:     '9':'1001',
2104:     'a':'1010',
2105:     'b':'1011',
2106:     'c':'1100',
2107:     'd':'1101',
2108:     'e':'1110',
2109:     'f':'1111',
2110:     'A':'1010',
2111:     'B':'1011',
2112:     'C':'1100',
2113:     'D':'1101',
2114:     'E':'1110',
2115:     'F':'1111',
2116:     'L':''}
2117: 
2118: def binary_repr(num, width=None):
2119:     '''
2120:     Return the binary representation of the input number as a string.
2121: 
2122:     For negative numbers, if width is not given, a minus sign is added to the
2123:     front. If width is given, the two's complement of the number is
2124:     returned, with respect to that width.
2125: 
2126:     In a two's-complement system negative numbers are represented by the two's
2127:     complement of the absolute value. This is the most common method of
2128:     representing signed integers on computers [1]_. A N-bit two's-complement
2129:     system can represent every integer in the range
2130:     :math:`-2^{N-1}` to :math:`+2^{N-1}-1`.
2131: 
2132:     Parameters
2133:     ----------
2134:     num : int
2135:         Only an integer decimal number can be used.
2136:     width : int, optional
2137:         The length of the returned string if `num` is positive, the length of
2138:         the two's complement if `num` is negative.
2139: 
2140:     Returns
2141:     -------
2142:     bin : str
2143:         Binary representation of `num` or two's complement of `num`.
2144: 
2145:     See Also
2146:     --------
2147:     base_repr: Return a string representation of a number in the given base
2148:                system.
2149: 
2150:     Notes
2151:     -----
2152:     `binary_repr` is equivalent to using `base_repr` with base 2, but about 25x
2153:     faster.
2154: 
2155:     References
2156:     ----------
2157:     .. [1] Wikipedia, "Two's complement",
2158:         http://en.wikipedia.org/wiki/Two's_complement
2159: 
2160:     Examples
2161:     --------
2162:     >>> np.binary_repr(3)
2163:     '11'
2164:     >>> np.binary_repr(-3)
2165:     '-11'
2166:     >>> np.binary_repr(3, width=4)
2167:     '0011'
2168: 
2169:     The two's complement is returned when the input number is negative and
2170:     width is specified:
2171: 
2172:     >>> np.binary_repr(-3, width=4)
2173:     '1101'
2174: 
2175:     '''
2176:     # ' <-- unbreak Emacs fontification
2177:     sign = ''
2178:     if num < 0:
2179:         if width is None:
2180:             sign = '-'
2181:             num = -num
2182:         else:
2183:             # replace num with its 2-complement
2184:             num = 2**width + num
2185:     elif num == 0:
2186:         return '0'*(width or 1)
2187:     ostr = hex(num)
2188:     bin = ''.join([_lkup[ch] for ch in ostr[2:]])
2189:     bin = bin.lstrip('0')
2190:     if width is not None:
2191:         bin = bin.zfill(width)
2192:     return sign + bin
2193: 
2194: def base_repr(number, base=2, padding=0):
2195:     '''
2196:     Return a string representation of a number in the given base system.
2197: 
2198:     Parameters
2199:     ----------
2200:     number : int
2201:         The value to convert. Only positive values are handled.
2202:     base : int, optional
2203:         Convert `number` to the `base` number system. The valid range is 2-36,
2204:         the default value is 2.
2205:     padding : int, optional
2206:         Number of zeros padded on the left. Default is 0 (no padding).
2207: 
2208:     Returns
2209:     -------
2210:     out : str
2211:         String representation of `number` in `base` system.
2212: 
2213:     See Also
2214:     --------
2215:     binary_repr : Faster version of `base_repr` for base 2.
2216: 
2217:     Examples
2218:     --------
2219:     >>> np.base_repr(5)
2220:     '101'
2221:     >>> np.base_repr(6, 5)
2222:     '11'
2223:     >>> np.base_repr(7, base=5, padding=3)
2224:     '00012'
2225: 
2226:     >>> np.base_repr(10, base=16)
2227:     'A'
2228:     >>> np.base_repr(32, base=16)
2229:     '20'
2230: 
2231:     '''
2232:     digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
2233:     if base > len(digits):
2234:         raise ValueError("Bases greater than 36 not handled in base_repr.")
2235: 
2236:     num = abs(number)
2237:     res = []
2238:     while num:
2239:         res.append(digits[num % base])
2240:         num //= base
2241:     if padding:
2242:         res.append('0' * padding)
2243:     if number < 0:
2244:         res.append('-')
2245:     return ''.join(reversed(res or '0'))
2246: 
2247: 
2248: def load(file):
2249:     '''
2250:     Wrapper around cPickle.load which accepts either a file-like object or
2251:     a filename.
2252: 
2253:     Note that the NumPy binary format is not based on pickle/cPickle anymore.
2254:     For details on the preferred way of loading and saving files, see `load`
2255:     and `save`.
2256: 
2257:     See Also
2258:     --------
2259:     load, save
2260: 
2261:     '''
2262:     if isinstance(file, type("")):
2263:         file = open(file, "rb")
2264:     return pickle.load(file)
2265: 
2266: # These are all essentially abbreviations
2267: # These might wind up in a special abbreviations module
2268: 
2269: def _maketup(descr, val):
2270:     dt = dtype(descr)
2271:     # Place val in all scalar tuples:
2272:     fields = dt.fields
2273:     if fields is None:
2274:         return val
2275:     else:
2276:         res = [_maketup(fields[name][0], val) for name in dt.names]
2277:         return tuple(res)
2278: 
2279: def identity(n, dtype=None):
2280:     '''
2281:     Return the identity array.
2282: 
2283:     The identity array is a square array with ones on
2284:     the main diagonal.
2285: 
2286:     Parameters
2287:     ----------
2288:     n : int
2289:         Number of rows (and columns) in `n` x `n` output.
2290:     dtype : data-type, optional
2291:         Data-type of the output.  Defaults to ``float``.
2292: 
2293:     Returns
2294:     -------
2295:     out : ndarray
2296:         `n` x `n` array with its main diagonal set to one,
2297:         and all other elements 0.
2298: 
2299:     Examples
2300:     --------
2301:     >>> np.identity(3)
2302:     array([[ 1.,  0.,  0.],
2303:            [ 0.,  1.,  0.],
2304:            [ 0.,  0.,  1.]])
2305: 
2306:     '''
2307:     from numpy import eye
2308:     return eye(n, dtype=dtype)
2309: 
2310: def allclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):
2311:     '''
2312:     Returns True if two arrays are element-wise equal within a tolerance.
2313: 
2314:     The tolerance values are positive, typically very small numbers.  The
2315:     relative difference (`rtol` * abs(`b`)) and the absolute difference
2316:     `atol` are added together to compare against the absolute difference
2317:     between `a` and `b`.
2318: 
2319:     If either array contains one or more NaNs, False is returned.
2320:     Infs are treated as equal if they are in the same place and of the same
2321:     sign in both arrays.
2322: 
2323:     Parameters
2324:     ----------
2325:     a, b : array_like
2326:         Input arrays to compare.
2327:     rtol : float
2328:         The relative tolerance parameter (see Notes).
2329:     atol : float
2330:         The absolute tolerance parameter (see Notes).
2331:     equal_nan : bool
2332:         Whether to compare NaN's as equal.  If True, NaN's in `a` will be
2333:         considered equal to NaN's in `b` in the output array.
2334: 
2335:         .. versionadded:: 1.10.0
2336: 
2337:     Returns
2338:     -------
2339:     allclose : bool
2340:         Returns True if the two arrays are equal within the given
2341:         tolerance; False otherwise.
2342: 
2343:     See Also
2344:     --------
2345:     isclose, all, any
2346: 
2347:     Notes
2348:     -----
2349:     If the following equation is element-wise True, then allclose returns
2350:     True.
2351: 
2352:      absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))
2353: 
2354:     The above equation is not symmetric in `a` and `b`, so that
2355:     `allclose(a, b)` might be different from `allclose(b, a)` in
2356:     some rare cases.
2357: 
2358:     Examples
2359:     --------
2360:     >>> np.allclose([1e10,1e-7], [1.00001e10,1e-8])
2361:     False
2362:     >>> np.allclose([1e10,1e-8], [1.00001e10,1e-9])
2363:     True
2364:     >>> np.allclose([1e10,1e-8], [1.0001e10,1e-9])
2365:     False
2366:     >>> np.allclose([1.0, np.nan], [1.0, np.nan])
2367:     False
2368:     >>> np.allclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)
2369:     True
2370: 
2371:     '''
2372:     res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))
2373:     return bool(res)
2374: 
2375: def isclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):
2376:     '''
2377:     Returns a boolean array where two arrays are element-wise equal within a
2378:     tolerance.
2379: 
2380:     The tolerance values are positive, typically very small numbers.  The
2381:     relative difference (`rtol` * abs(`b`)) and the absolute difference
2382:     `atol` are added together to compare against the absolute difference
2383:     between `a` and `b`.
2384: 
2385:     Parameters
2386:     ----------
2387:     a, b : array_like
2388:         Input arrays to compare.
2389:     rtol : float
2390:         The relative tolerance parameter (see Notes).
2391:     atol : float
2392:         The absolute tolerance parameter (see Notes).
2393:     equal_nan : bool
2394:         Whether to compare NaN's as equal.  If True, NaN's in `a` will be
2395:         considered equal to NaN's in `b` in the output array.
2396: 
2397:     Returns
2398:     -------
2399:     y : array_like
2400:         Returns a boolean array of where `a` and `b` are equal within the
2401:         given tolerance. If both `a` and `b` are scalars, returns a single
2402:         boolean value.
2403: 
2404:     See Also
2405:     --------
2406:     allclose
2407: 
2408:     Notes
2409:     -----
2410:     .. versionadded:: 1.7.0
2411: 
2412:     For finite values, isclose uses the following equation to test whether
2413:     two floating point values are equivalent.
2414: 
2415:      absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))
2416: 
2417:     The above equation is not symmetric in `a` and `b`, so that
2418:     `isclose(a, b)` might be different from `isclose(b, a)` in
2419:     some rare cases.
2420: 
2421:     Examples
2422:     --------
2423:     >>> np.isclose([1e10,1e-7], [1.00001e10,1e-8])
2424:     array([True, False])
2425:     >>> np.isclose([1e10,1e-8], [1.00001e10,1e-9])
2426:     array([True, True])
2427:     >>> np.isclose([1e10,1e-8], [1.0001e10,1e-9])
2428:     array([False, True])
2429:     >>> np.isclose([1.0, np.nan], [1.0, np.nan])
2430:     array([True, False])
2431:     >>> np.isclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)
2432:     array([True, True])
2433:     '''
2434:     def within_tol(x, y, atol, rtol):
2435:         with errstate(invalid='ignore'):
2436:             result = less_equal(abs(x-y), atol + rtol * abs(y))
2437:         if isscalar(a) and isscalar(b):
2438:             result = bool(result)
2439:         return result
2440: 
2441:     x = array(a, copy=False, subok=True, ndmin=1)
2442:     y = array(b, copy=False, subok=True, ndmin=1)
2443: 
2444:     # Make sure y is an inexact type to avoid bad behavior on abs(MIN_INT).
2445:     # This will cause casting of x later. Also, make sure to allow subclasses
2446:     # (e.g., for numpy.ma).
2447:     dt = multiarray.result_type(y, 1.)
2448:     y = array(y, dtype=dt, copy=False, subok=True)
2449: 
2450:     xfin = isfinite(x)
2451:     yfin = isfinite(y)
2452:     if all(xfin) and all(yfin):
2453:         return within_tol(x, y, atol, rtol)
2454:     else:
2455:         finite = xfin & yfin
2456:         cond = zeros_like(finite, subok=True)
2457:         # Because we're using boolean indexing, x & y must be the same shape.
2458:         # Ideally, we'd just do x, y = broadcast_arrays(x, y). It's in
2459:         # lib.stride_tricks, though, so we can't import it here.
2460:         x = x * ones_like(cond)
2461:         y = y * ones_like(cond)
2462:         # Avoid subtraction with infinite/nan values...
2463:         cond[finite] = within_tol(x[finite], y[finite], atol, rtol)
2464:         # Check for equality of infinite values...
2465:         cond[~finite] = (x[~finite] == y[~finite])
2466:         if equal_nan:
2467:             # Make NaN == NaN
2468:             both_nan = isnan(x) & isnan(y)
2469:             cond[both_nan] = both_nan[both_nan]
2470: 
2471:         if isscalar(a) and isscalar(b):
2472:             return bool(cond)
2473:         else:
2474:             return cond
2475: 
2476: def array_equal(a1, a2):
2477:     '''
2478:     True if two arrays have the same shape and elements, False otherwise.
2479: 
2480:     Parameters
2481:     ----------
2482:     a1, a2 : array_like
2483:         Input arrays.
2484: 
2485:     Returns
2486:     -------
2487:     b : bool
2488:         Returns True if the arrays are equal.
2489: 
2490:     See Also
2491:     --------
2492:     allclose: Returns True if two arrays are element-wise equal within a
2493:               tolerance.
2494:     array_equiv: Returns True if input arrays are shape consistent and all
2495:                  elements equal.
2496: 
2497:     Examples
2498:     --------
2499:     >>> np.array_equal([1, 2], [1, 2])
2500:     True
2501:     >>> np.array_equal(np.array([1, 2]), np.array([1, 2]))
2502:     True
2503:     >>> np.array_equal([1, 2], [1, 2, 3])
2504:     False
2505:     >>> np.array_equal([1, 2], [1, 4])
2506:     False
2507: 
2508:     '''
2509:     try:
2510:         a1, a2 = asarray(a1), asarray(a2)
2511:     except:
2512:         return False
2513:     if a1.shape != a2.shape:
2514:         return False
2515:     return bool(asarray(a1 == a2).all())
2516: 
2517: def array_equiv(a1, a2):
2518:     '''
2519:     Returns True if input arrays are shape consistent and all elements equal.
2520: 
2521:     Shape consistent means they are either the same shape, or one input array
2522:     can be broadcasted to create the same shape as the other one.
2523: 
2524:     Parameters
2525:     ----------
2526:     a1, a2 : array_like
2527:         Input arrays.
2528: 
2529:     Returns
2530:     -------
2531:     out : bool
2532:         True if equivalent, False otherwise.
2533: 
2534:     Examples
2535:     --------
2536:     >>> np.array_equiv([1, 2], [1, 2])
2537:     True
2538:     >>> np.array_equiv([1, 2], [1, 3])
2539:     False
2540: 
2541:     Showing the shape equivalence:
2542: 
2543:     >>> np.array_equiv([1, 2], [[1, 2], [1, 2]])
2544:     True
2545:     >>> np.array_equiv([1, 2], [[1, 2, 1, 2], [1, 2, 1, 2]])
2546:     False
2547: 
2548:     >>> np.array_equiv([1, 2], [[1, 2], [1, 3]])
2549:     False
2550: 
2551:     '''
2552:     try:
2553:         a1, a2 = asarray(a1), asarray(a2)
2554:     except:
2555:         return False
2556:     try:
2557:         multiarray.broadcast(a1, a2)
2558:     except:
2559:         return False
2560: 
2561:     return bool(asarray(a1 == a2).all())
2562: 
2563: 
2564: _errdict = {"ignore":ERR_IGNORE,
2565:             "warn":ERR_WARN,
2566:             "raise":ERR_RAISE,
2567:             "call":ERR_CALL,
2568:             "print":ERR_PRINT,
2569:             "log":ERR_LOG}
2570: 
2571: _errdict_rev = {}
2572: for key in _errdict.keys():
2573:     _errdict_rev[_errdict[key]] = key
2574: del key
2575: 
2576: def seterr(all=None, divide=None, over=None, under=None, invalid=None):
2577:     '''
2578:     Set how floating-point errors are handled.
2579: 
2580:     Note that operations on integer scalar types (such as `int16`) are
2581:     handled like floating point, and are affected by these settings.
2582: 
2583:     Parameters
2584:     ----------
2585:     all : {'ignore', 'warn', 'raise', 'call', 'print', 'log'}, optional
2586:         Set treatment for all types of floating-point errors at once:
2587: 
2588:         - ignore: Take no action when the exception occurs.
2589:         - warn: Print a `RuntimeWarning` (via the Python `warnings` module).
2590:         - raise: Raise a `FloatingPointError`.
2591:         - call: Call a function specified using the `seterrcall` function.
2592:         - print: Print a warning directly to ``stdout``.
2593:         - log: Record error in a Log object specified by `seterrcall`.
2594: 
2595:         The default is not to change the current behavior.
2596:     divide : {'ignore', 'warn', 'raise', 'call', 'print', 'log'}, optional
2597:         Treatment for division by zero.
2598:     over : {'ignore', 'warn', 'raise', 'call', 'print', 'log'}, optional
2599:         Treatment for floating-point overflow.
2600:     under : {'ignore', 'warn', 'raise', 'call', 'print', 'log'}, optional
2601:         Treatment for floating-point underflow.
2602:     invalid : {'ignore', 'warn', 'raise', 'call', 'print', 'log'}, optional
2603:         Treatment for invalid floating-point operation.
2604: 
2605:     Returns
2606:     -------
2607:     old_settings : dict
2608:         Dictionary containing the old settings.
2609: 
2610:     See also
2611:     --------
2612:     seterrcall : Set a callback function for the 'call' mode.
2613:     geterr, geterrcall, errstate
2614: 
2615:     Notes
2616:     -----
2617:     The floating-point exceptions are defined in the IEEE 754 standard [1]:
2618: 
2619:     - Division by zero: infinite result obtained from finite numbers.
2620:     - Overflow: result too large to be expressed.
2621:     - Underflow: result so close to zero that some precision
2622:       was lost.
2623:     - Invalid operation: result is not an expressible number, typically
2624:       indicates that a NaN was produced.
2625: 
2626:     .. [1] http://en.wikipedia.org/wiki/IEEE_754
2627: 
2628:     Examples
2629:     --------
2630:     >>> old_settings = np.seterr(all='ignore')  #seterr to known value
2631:     >>> np.seterr(over='raise')
2632:     {'over': 'ignore', 'divide': 'ignore', 'invalid': 'ignore',
2633:      'under': 'ignore'}
2634:     >>> np.seterr(**old_settings)  # reset to default
2635:     {'over': 'raise', 'divide': 'ignore', 'invalid': 'ignore', 'under': 'ignore'}
2636: 
2637:     >>> np.int16(32000) * np.int16(3)
2638:     30464
2639:     >>> old_settings = np.seterr(all='warn', over='raise')
2640:     >>> np.int16(32000) * np.int16(3)
2641:     Traceback (most recent call last):
2642:       File "<stdin>", line 1, in <module>
2643:     FloatingPointError: overflow encountered in short_scalars
2644: 
2645:     >>> old_settings = np.seterr(all='print')
2646:     >>> np.geterr()
2647:     {'over': 'print', 'divide': 'print', 'invalid': 'print', 'under': 'print'}
2648:     >>> np.int16(32000) * np.int16(3)
2649:     Warning: overflow encountered in short_scalars
2650:     30464
2651: 
2652:     '''
2653: 
2654:     pyvals = umath.geterrobj()
2655:     old = geterr()
2656: 
2657:     if divide is None:
2658:         divide = all or old['divide']
2659:     if over is None:
2660:         over = all or old['over']
2661:     if under is None:
2662:         under = all or old['under']
2663:     if invalid is None:
2664:         invalid = all or old['invalid']
2665: 
2666:     maskvalue = ((_errdict[divide] << SHIFT_DIVIDEBYZERO) +
2667:                  (_errdict[over] << SHIFT_OVERFLOW) +
2668:                  (_errdict[under] << SHIFT_UNDERFLOW) +
2669:                  (_errdict[invalid] << SHIFT_INVALID))
2670: 
2671:     pyvals[1] = maskvalue
2672:     umath.seterrobj(pyvals)
2673:     return old
2674: 
2675: 
2676: def geterr():
2677:     '''
2678:     Get the current way of handling floating-point errors.
2679: 
2680:     Returns
2681:     -------
2682:     res : dict
2683:         A dictionary with keys "divide", "over", "under", and "invalid",
2684:         whose values are from the strings "ignore", "print", "log", "warn",
2685:         "raise", and "call". The keys represent possible floating-point
2686:         exceptions, and the values define how these exceptions are handled.
2687: 
2688:     See Also
2689:     --------
2690:     geterrcall, seterr, seterrcall
2691: 
2692:     Notes
2693:     -----
2694:     For complete documentation of the types of floating-point exceptions and
2695:     treatment options, see `seterr`.
2696: 
2697:     Examples
2698:     --------
2699:     >>> np.geterr()
2700:     {'over': 'warn', 'divide': 'warn', 'invalid': 'warn',
2701:     'under': 'ignore'}
2702:     >>> np.arange(3.) / np.arange(3.)
2703:     array([ NaN,   1.,   1.])
2704: 
2705:     >>> oldsettings = np.seterr(all='warn', over='raise')
2706:     >>> np.geterr()
2707:     {'over': 'raise', 'divide': 'warn', 'invalid': 'warn', 'under': 'warn'}
2708:     >>> np.arange(3.) / np.arange(3.)
2709:     __main__:1: RuntimeWarning: invalid value encountered in divide
2710:     array([ NaN,   1.,   1.])
2711: 
2712:     '''
2713:     maskvalue = umath.geterrobj()[1]
2714:     mask = 7
2715:     res = {}
2716:     val = (maskvalue >> SHIFT_DIVIDEBYZERO) & mask
2717:     res['divide'] = _errdict_rev[val]
2718:     val = (maskvalue >> SHIFT_OVERFLOW) & mask
2719:     res['over'] = _errdict_rev[val]
2720:     val = (maskvalue >> SHIFT_UNDERFLOW) & mask
2721:     res['under'] = _errdict_rev[val]
2722:     val = (maskvalue >> SHIFT_INVALID) & mask
2723:     res['invalid'] = _errdict_rev[val]
2724:     return res
2725: 
2726: def setbufsize(size):
2727:     '''
2728:     Set the size of the buffer used in ufuncs.
2729: 
2730:     Parameters
2731:     ----------
2732:     size : int
2733:         Size of buffer.
2734: 
2735:     '''
2736:     if size > 10e6:
2737:         raise ValueError("Buffer size, %s, is too big." % size)
2738:     if size < 5:
2739:         raise ValueError("Buffer size, %s, is too small." % size)
2740:     if size % 16 != 0:
2741:         raise ValueError("Buffer size, %s, is not a multiple of 16." % size)
2742: 
2743:     pyvals = umath.geterrobj()
2744:     old = getbufsize()
2745:     pyvals[0] = size
2746:     umath.seterrobj(pyvals)
2747:     return old
2748: 
2749: def getbufsize():
2750:     '''
2751:     Return the size of the buffer used in ufuncs.
2752: 
2753:     Returns
2754:     -------
2755:     getbufsize : int
2756:         Size of ufunc buffer in bytes.
2757: 
2758:     '''
2759:     return umath.geterrobj()[0]
2760: 
2761: def seterrcall(func):
2762:     '''
2763:     Set the floating-point error callback function or log object.
2764: 
2765:     There are two ways to capture floating-point error messages.  The first
2766:     is to set the error-handler to 'call', using `seterr`.  Then, set
2767:     the function to call using this function.
2768: 
2769:     The second is to set the error-handler to 'log', using `seterr`.
2770:     Floating-point errors then trigger a call to the 'write' method of
2771:     the provided object.
2772: 
2773:     Parameters
2774:     ----------
2775:     func : callable f(err, flag) or object with write method
2776:         Function to call upon floating-point errors ('call'-mode) or
2777:         object whose 'write' method is used to log such message ('log'-mode).
2778: 
2779:         The call function takes two arguments. The first is a string describing the
2780:         type of error (such as "divide by zero", "overflow", "underflow", or "invalid value"),
2781:         and the second is the status flag.  The flag is a byte, whose four
2782:         least-significant bits indicate the type of error, one of "divide", "over",
2783:         "under", "invalid"::
2784: 
2785:           [0 0 0 0 divide over under invalid]
2786: 
2787:         In other words, ``flags = divide + 2*over + 4*under + 8*invalid``.
2788: 
2789:         If an object is provided, its write method should take one argument,
2790:         a string.
2791: 
2792:     Returns
2793:     -------
2794:     h : callable, log instance or None
2795:         The old error handler.
2796: 
2797:     See Also
2798:     --------
2799:     seterr, geterr, geterrcall
2800: 
2801:     Examples
2802:     --------
2803:     Callback upon error:
2804: 
2805:     >>> def err_handler(type, flag):
2806:     ...     print("Floating point error (%s), with flag %s" % (type, flag))
2807:     ...
2808: 
2809:     >>> saved_handler = np.seterrcall(err_handler)
2810:     >>> save_err = np.seterr(all='call')
2811: 
2812:     >>> np.array([1, 2, 3]) / 0.0
2813:     Floating point error (divide by zero), with flag 1
2814:     array([ Inf,  Inf,  Inf])
2815: 
2816:     >>> np.seterrcall(saved_handler)
2817:     <function err_handler at 0x...>
2818:     >>> np.seterr(**save_err)
2819:     {'over': 'call', 'divide': 'call', 'invalid': 'call', 'under': 'call'}
2820: 
2821:     Log error message:
2822: 
2823:     >>> class Log(object):
2824:     ...     def write(self, msg):
2825:     ...         print("LOG: %s" % msg)
2826:     ...
2827: 
2828:     >>> log = Log()
2829:     >>> saved_handler = np.seterrcall(log)
2830:     >>> save_err = np.seterr(all='log')
2831: 
2832:     >>> np.array([1, 2, 3]) / 0.0
2833:     LOG: Warning: divide by zero encountered in divide
2834:     <BLANKLINE>
2835:     array([ Inf,  Inf,  Inf])
2836: 
2837:     >>> np.seterrcall(saved_handler)
2838:     <__main__.Log object at 0x...>
2839:     >>> np.seterr(**save_err)
2840:     {'over': 'log', 'divide': 'log', 'invalid': 'log', 'under': 'log'}
2841: 
2842:     '''
2843:     if func is not None and not isinstance(func, collections.Callable):
2844:         if not hasattr(func, 'write') or not isinstance(func.write, collections.Callable):
2845:             raise ValueError("Only callable can be used as callback")
2846:     pyvals = umath.geterrobj()
2847:     old = geterrcall()
2848:     pyvals[2] = func
2849:     umath.seterrobj(pyvals)
2850:     return old
2851: 
2852: def geterrcall():
2853:     '''
2854:     Return the current callback function used on floating-point errors.
2855: 
2856:     When the error handling for a floating-point error (one of "divide",
2857:     "over", "under", or "invalid") is set to 'call' or 'log', the function
2858:     that is called or the log instance that is written to is returned by
2859:     `geterrcall`. This function or log instance has been set with
2860:     `seterrcall`.
2861: 
2862:     Returns
2863:     -------
2864:     errobj : callable, log instance or None
2865:         The current error handler. If no handler was set through `seterrcall`,
2866:         ``None`` is returned.
2867: 
2868:     See Also
2869:     --------
2870:     seterrcall, seterr, geterr
2871: 
2872:     Notes
2873:     -----
2874:     For complete documentation of the types of floating-point exceptions and
2875:     treatment options, see `seterr`.
2876: 
2877:     Examples
2878:     --------
2879:     >>> np.geterrcall()  # we did not yet set a handler, returns None
2880: 
2881:     >>> oldsettings = np.seterr(all='call')
2882:     >>> def err_handler(type, flag):
2883:     ...     print("Floating point error (%s), with flag %s" % (type, flag))
2884:     >>> oldhandler = np.seterrcall(err_handler)
2885:     >>> np.array([1, 2, 3]) / 0.0
2886:     Floating point error (divide by zero), with flag 1
2887:     array([ Inf,  Inf,  Inf])
2888: 
2889:     >>> cur_handler = np.geterrcall()
2890:     >>> cur_handler is err_handler
2891:     True
2892: 
2893:     '''
2894:     return umath.geterrobj()[2]
2895: 
2896: class _unspecified(object):
2897:     pass
2898: _Unspecified = _unspecified()
2899: 
2900: class errstate(object):
2901:     '''
2902:     errstate(**kwargs)
2903: 
2904:     Context manager for floating-point error handling.
2905: 
2906:     Using an instance of `errstate` as a context manager allows statements in
2907:     that context to execute with a known error handling behavior. Upon entering
2908:     the context the error handling is set with `seterr` and `seterrcall`, and
2909:     upon exiting it is reset to what it was before.
2910: 
2911:     Parameters
2912:     ----------
2913:     kwargs : {divide, over, under, invalid}
2914:         Keyword arguments. The valid keywords are the possible floating-point
2915:         exceptions. Each keyword should have a string value that defines the
2916:         treatment for the particular error. Possible values are
2917:         {'ignore', 'warn', 'raise', 'call', 'print', 'log'}.
2918: 
2919:     See Also
2920:     --------
2921:     seterr, geterr, seterrcall, geterrcall
2922: 
2923:     Notes
2924:     -----
2925:     The ``with`` statement was introduced in Python 2.5, and can only be used
2926:     there by importing it: ``from __future__ import with_statement``. In
2927:     earlier Python versions the ``with`` statement is not available.
2928: 
2929:     For complete documentation of the types of floating-point exceptions and
2930:     treatment options, see `seterr`.
2931: 
2932:     Examples
2933:     --------
2934:     >>> from __future__ import with_statement  # use 'with' in Python 2.5
2935:     >>> olderr = np.seterr(all='ignore')  # Set error handling to known state.
2936: 
2937:     >>> np.arange(3) / 0.
2938:     array([ NaN,  Inf,  Inf])
2939:     >>> with np.errstate(divide='warn'):
2940:     ...     np.arange(3) / 0.
2941:     ...
2942:     __main__:2: RuntimeWarning: divide by zero encountered in divide
2943:     array([ NaN,  Inf,  Inf])
2944: 
2945:     >>> np.sqrt(-1)
2946:     nan
2947:     >>> with np.errstate(invalid='raise'):
2948:     ...     np.sqrt(-1)
2949:     Traceback (most recent call last):
2950:       File "<stdin>", line 2, in <module>
2951:     FloatingPointError: invalid value encountered in sqrt
2952: 
2953:     Outside the context the error handling behavior has not changed:
2954: 
2955:     >>> np.geterr()
2956:     {'over': 'warn', 'divide': 'warn', 'invalid': 'warn',
2957:     'under': 'ignore'}
2958: 
2959:     '''
2960:     # Note that we don't want to run the above doctests because they will fail
2961:     # without a from __future__ import with_statement
2962: 
2963:     def __init__(self, **kwargs):
2964:         self.call = kwargs.pop('call', _Unspecified)
2965:         self.kwargs = kwargs
2966: 
2967:     def __enter__(self):
2968:         self.oldstate = seterr(**self.kwargs)
2969:         if self.call is not _Unspecified:
2970:             self.oldcall = seterrcall(self.call)
2971: 
2972:     def __exit__(self, *exc_info):
2973:         seterr(**self.oldstate)
2974:         if self.call is not _Unspecified:
2975:             seterrcall(self.oldcall)
2976: 
2977: 
2978: def _setdef():
2979:     defval = [UFUNC_BUFSIZE_DEFAULT, ERR_DEFAULT, None]
2980:     umath.seterrobj(defval)
2981: 
2982: # set the default values
2983: _setdef()
2984: 
2985: Inf = inf = infty = Infinity = PINF
2986: nan = NaN = NAN
2987: False_ = bool_(False)
2988: True_ = bool_(True)
2989: 
2990: from .umath import *
2991: from .numerictypes import *
2992: from . import fromnumeric
2993: from .fromnumeric import *
2994: extend_all(fromnumeric)
2995: extend_all(umath)
2996: extend_all(numerictypes)
2997: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3, 0))

# 'import sys' statement (line 3)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 3, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4, 0))

# 'import operator' statement (line 4)
import operator

import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'operator', operator, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 5, 0))

# 'import warnings' statement (line 5)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 5, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'import collections' statement (line 6)
import collections

import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'collections', collections, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'from numpy.core import multiarray' statement (line 7)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_7446 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'numpy.core')

if (type(import_7446) is not StypyTypeError):

    if (import_7446 != 'pyd_module'):
        __import__(import_7446)
        sys_modules_7447 = sys.modules[import_7446]
        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'numpy.core', sys_modules_7447.module_type_store, module_type_store, ['multiarray'])
        nest_module(stypy.reporting.localization.Localization(__file__, 7, 0), __file__, sys_modules_7447, sys_modules_7447.module_type_store, module_type_store)
    else:
        from numpy.core import multiarray

        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'numpy.core', None, module_type_store, ['multiarray'], [multiarray])

else:
    # Assigning a type to the variable 'numpy.core' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'numpy.core', import_7446)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'from numpy.core import umath' statement (line 8)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_7448 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy.core')

if (type(import_7448) is not StypyTypeError):

    if (import_7448 != 'pyd_module'):
        __import__(import_7448)
        sys_modules_7449 = sys.modules[import_7448]
        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy.core', sys_modules_7449.module_type_store, module_type_store, ['umath'])
        nest_module(stypy.reporting.localization.Localization(__file__, 8, 0), __file__, sys_modules_7449, sys_modules_7449.module_type_store, module_type_store)
    else:
        from numpy.core import umath

        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy.core', None, module_type_store, ['umath'], [umath])

else:
    # Assigning a type to the variable 'numpy.core' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy.core', import_7448)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'from numpy.core.umath import invert, sin, UFUNC_BUFSIZE_DEFAULT, ERR_IGNORE, ERR_WARN, ERR_RAISE, ERR_CALL, ERR_PRINT, ERR_LOG, ERR_DEFAULT, PINF, NAN' statement (line 9)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_7450 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'numpy.core.umath')

if (type(import_7450) is not StypyTypeError):

    if (import_7450 != 'pyd_module'):
        __import__(import_7450)
        sys_modules_7451 = sys.modules[import_7450]
        import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'numpy.core.umath', sys_modules_7451.module_type_store, module_type_store, ['invert', 'sin', 'UFUNC_BUFSIZE_DEFAULT', 'ERR_IGNORE', 'ERR_WARN', 'ERR_RAISE', 'ERR_CALL', 'ERR_PRINT', 'ERR_LOG', 'ERR_DEFAULT', 'PINF', 'NAN'])
        nest_module(stypy.reporting.localization.Localization(__file__, 9, 0), __file__, sys_modules_7451, sys_modules_7451.module_type_store, module_type_store)
    else:
        from numpy.core.umath import invert, sin, UFUNC_BUFSIZE_DEFAULT, ERR_IGNORE, ERR_WARN, ERR_RAISE, ERR_CALL, ERR_PRINT, ERR_LOG, ERR_DEFAULT, PINF, NAN

        import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'numpy.core.umath', None, module_type_store, ['invert', 'sin', 'UFUNC_BUFSIZE_DEFAULT', 'ERR_IGNORE', 'ERR_WARN', 'ERR_RAISE', 'ERR_CALL', 'ERR_PRINT', 'ERR_LOG', 'ERR_DEFAULT', 'PINF', 'NAN'], [invert, sin, UFUNC_BUFSIZE_DEFAULT, ERR_IGNORE, ERR_WARN, ERR_RAISE, ERR_CALL, ERR_PRINT, ERR_LOG, ERR_DEFAULT, PINF, NAN])

else:
    # Assigning a type to the variable 'numpy.core.umath' (line 9)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'numpy.core.umath', import_7450)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from numpy.core import numerictypes' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_7452 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.core')

if (type(import_7452) is not StypyTypeError):

    if (import_7452 != 'pyd_module'):
        __import__(import_7452)
        sys_modules_7453 = sys.modules[import_7452]
        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.core', sys_modules_7453.module_type_store, module_type_store, ['numerictypes'])
        nest_module(stypy.reporting.localization.Localization(__file__, 12, 0), __file__, sys_modules_7453, sys_modules_7453.module_type_store, module_type_store)
    else:
        from numpy.core import numerictypes

        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.core', None, module_type_store, ['numerictypes'], [numerictypes])

else:
    # Assigning a type to the variable 'numpy.core' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.core', import_7452)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from numpy.core.numerictypes import longlong, intc, int_, float_, complex_, bool_' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_7454 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy.core.numerictypes')

if (type(import_7454) is not StypyTypeError):

    if (import_7454 != 'pyd_module'):
        __import__(import_7454)
        sys_modules_7455 = sys.modules[import_7454]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy.core.numerictypes', sys_modules_7455.module_type_store, module_type_store, ['longlong', 'intc', 'int_', 'float_', 'complex_', 'bool_'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_7455, sys_modules_7455.module_type_store, module_type_store)
    else:
        from numpy.core.numerictypes import longlong, intc, int_, float_, complex_, bool_

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy.core.numerictypes', None, module_type_store, ['longlong', 'intc', 'int_', 'float_', 'complex_', 'bool_'], [longlong, intc, int_, float_, complex_, bool_])

else:
    # Assigning a type to the variable 'numpy.core.numerictypes' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy.core.numerictypes', import_7454)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from numpy.core._internal import TooHardError' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_7456 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.core._internal')

if (type(import_7456) is not StypyTypeError):

    if (import_7456 != 'pyd_module'):
        __import__(import_7456)
        sys_modules_7457 = sys.modules[import_7456]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.core._internal', sys_modules_7457.module_type_store, module_type_store, ['TooHardError'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_7457, sys_modules_7457.module_type_store, module_type_store)
    else:
        from numpy.core._internal import TooHardError

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.core._internal', None, module_type_store, ['TooHardError'], [TooHardError])

else:
    # Assigning a type to the variable 'numpy.core._internal' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.core._internal', import_7456)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')




# Obtaining the type of the subscript
int_7458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 20), 'int')
# Getting the type of 'sys' (line 16)
sys_7459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 16, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 16)
version_info_7460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 16, 3), sys_7459, 'version_info')
# Obtaining the member '__getitem__' of a type (line 16)
getitem___7461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 16, 3), version_info_7460, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 16)
subscript_call_result_7462 = invoke(stypy.reporting.localization.Localization(__file__, 16, 3), getitem___7461, int_7458)

int_7463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 26), 'int')
# Applying the binary operator '>=' (line 16)
result_ge_7464 = python_operator(stypy.reporting.localization.Localization(__file__, 16, 3), '>=', subscript_call_result_7462, int_7463)

# Testing the type of an if condition (line 16)
if_condition_7465 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 16, 0), result_ge_7464)
# Assigning a type to the variable 'if_condition_7465' (line 16)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'if_condition_7465', if_condition_7465)
# SSA begins for if statement (line 16)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 4))

# 'import pickle' statement (line 17)
import pickle

import_module(stypy.reporting.localization.Localization(__file__, 17, 4), 'pickle', pickle, module_type_store)


# Assigning a Name to a Name (line 18):

# Assigning a Name to a Name (line 18):
# Getting the type of 'str' (line 18)
str_7466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 18, 17), 'str')
# Assigning a type to the variable 'basestring' (line 18)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 4), 'basestring', str_7466)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 4))

# 'import builtins' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_7467 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 4), 'builtins')

if (type(import_7467) is not StypyTypeError):

    if (import_7467 != 'pyd_module'):
        __import__(import_7467)
        sys_modules_7468 = sys.modules[import_7467]
        import_module(stypy.reporting.localization.Localization(__file__, 19, 4), 'builtins', sys_modules_7468.module_type_store, module_type_store)
    else:
        import builtins

        import_module(stypy.reporting.localization.Localization(__file__, 19, 4), 'builtins', builtins, module_type_store)

else:
    # Assigning a type to the variable 'builtins' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 4), 'builtins', import_7467)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')

# SSA branch for the else part of an if statement (line 16)
module_type_store.open_ssa_branch('else')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 4))

# 'import cPickle' statement (line 21)
import cPickle as pickle

import_module(stypy.reporting.localization.Localization(__file__, 21, 4), 'pickle', pickle, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 4))

# 'import __builtin__' statement (line 22)
import __builtin__ as builtins

import_module(stypy.reporting.localization.Localization(__file__, 22, 4), 'builtins', builtins, module_type_store)

# SSA join for if statement (line 16)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Attribute to a Name (line 24):

# Assigning a Attribute to a Name (line 24):
# Getting the type of 'pickle' (line 24)
pickle_7469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 24, 8), 'pickle')
# Obtaining the member 'loads' of a type (line 24)
loads_7470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 24, 8), pickle_7469, 'loads')
# Assigning a type to the variable 'loads' (line 24)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'loads', loads_7470)

# Assigning a List to a Name (line 27):

# Assigning a List to a Name (line 27):
__all__ = ['newaxis', 'ndarray', 'flatiter', 'nditer', 'nested_iters', 'ufunc', 'arange', 'array', 'zeros', 'count_nonzero', 'empty', 'broadcast', 'dtype', 'fromstring', 'fromfile', 'frombuffer', 'int_asbuffer', 'where', 'argwhere', 'copyto', 'concatenate', 'fastCopyAndTranspose', 'lexsort', 'set_numeric_ops', 'can_cast', 'promote_types', 'min_scalar_type', 'result_type', 'asarray', 'asanyarray', 'ascontiguousarray', 'asfortranarray', 'isfortran', 'empty_like', 'zeros_like', 'ones_like', 'correlate', 'convolve', 'inner', 'dot', 'einsum', 'outer', 'vdot', 'alterdot', 'restoredot', 'roll', 'rollaxis', 'moveaxis', 'cross', 'tensordot', 'array2string', 'get_printoptions', 'set_printoptions', 'array_repr', 'array_str', 'set_string_function', 'little_endian', 'require', 'fromiter', 'array_equal', 'array_equiv', 'indices', 'fromfunction', 'isclose', 'load', 'loads', 'isscalar', 'binary_repr', 'base_repr', 'ones', 'identity', 'allclose', 'compare_chararrays', 'putmask', 'seterr', 'geterr', 'setbufsize', 'getbufsize', 'seterrcall', 'geterrcall', 'errstate', 'flatnonzero', 'Inf', 'inf', 'infty', 'Infinity', 'nan', 'NaN', 'False_', 'True_', 'bitwise_not', 'CLIP', 'RAISE', 'WRAP', 'MAXDIMS', 'BUFSIZE', 'ALLOW_THREADS', 'ComplexWarning', 'full', 'full_like', 'matmul', 'shares_memory', 'may_share_memory', 'MAY_SHARE_BOUNDS', 'MAY_SHARE_EXACT', 'TooHardError']
module_type_store.set_exportable_members(['newaxis', 'ndarray', 'flatiter', 'nditer', 'nested_iters', 'ufunc', 'arange', 'array', 'zeros', 'count_nonzero', 'empty', 'broadcast', 'dtype', 'fromstring', 'fromfile', 'frombuffer', 'int_asbuffer', 'where', 'argwhere', 'copyto', 'concatenate', 'fastCopyAndTranspose', 'lexsort', 'set_numeric_ops', 'can_cast', 'promote_types', 'min_scalar_type', 'result_type', 'asarray', 'asanyarray', 'ascontiguousarray', 'asfortranarray', 'isfortran', 'empty_like', 'zeros_like', 'ones_like', 'correlate', 'convolve', 'inner', 'dot', 'einsum', 'outer', 'vdot', 'alterdot', 'restoredot', 'roll', 'rollaxis', 'moveaxis', 'cross', 'tensordot', 'array2string', 'get_printoptions', 'set_printoptions', 'array_repr', 'array_str', 'set_string_function', 'little_endian', 'require', 'fromiter', 'array_equal', 'array_equiv', 'indices', 'fromfunction', 'isclose', 'load', 'loads', 'isscalar', 'binary_repr', 'base_repr', 'ones', 'identity', 'allclose', 'compare_chararrays', 'putmask', 'seterr', 'geterr', 'setbufsize', 'getbufsize', 'seterrcall', 'geterrcall', 'errstate', 'flatnonzero', 'Inf', 'inf', 'infty', 'Infinity', 'nan', 'NaN', 'False_', 'True_', 'bitwise_not', 'CLIP', 'RAISE', 'WRAP', 'MAXDIMS', 'BUFSIZE', 'ALLOW_THREADS', 'ComplexWarning', 'full', 'full_like', 'matmul', 'shares_memory', 'may_share_memory', 'MAY_SHARE_BOUNDS', 'MAY_SHARE_EXACT', 'TooHardError'])

# Obtaining an instance of the builtin type 'list' (line 27)
list_7471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 27)
# Adding element type (line 27)
str_7472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 4), 'str', 'newaxis')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7472)
# Adding element type (line 27)
str_7473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 15), 'str', 'ndarray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7473)
# Adding element type (line 27)
str_7474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 26), 'str', 'flatiter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7474)
# Adding element type (line 27)
str_7475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 38), 'str', 'nditer')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7475)
# Adding element type (line 27)
str_7476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 48), 'str', 'nested_iters')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7476)
# Adding element type (line 27)
str_7477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 64), 'str', 'ufunc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7477)
# Adding element type (line 27)
str_7478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 4), 'str', 'arange')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7478)
# Adding element type (line 27)
str_7479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 14), 'str', 'array')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7479)
# Adding element type (line 27)
str_7480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 23), 'str', 'zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7480)
# Adding element type (line 27)
str_7481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 32), 'str', 'count_nonzero')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7481)
# Adding element type (line 27)
str_7482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 49), 'str', 'empty')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7482)
# Adding element type (line 27)
str_7483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 58), 'str', 'broadcast')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7483)
# Adding element type (line 27)
str_7484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 4), 'str', 'dtype')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7484)
# Adding element type (line 27)
str_7485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 13), 'str', 'fromstring')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7485)
# Adding element type (line 27)
str_7486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 27), 'str', 'fromfile')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7486)
# Adding element type (line 27)
str_7487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 39), 'str', 'frombuffer')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7487)
# Adding element type (line 27)
str_7488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 53), 'str', 'int_asbuffer')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7488)
# Adding element type (line 27)
str_7489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 4), 'str', 'where')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7489)
# Adding element type (line 27)
str_7490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 13), 'str', 'argwhere')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7490)
# Adding element type (line 27)
str_7491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 25), 'str', 'copyto')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7491)
# Adding element type (line 27)
str_7492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 35), 'str', 'concatenate')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7492)
# Adding element type (line 27)
str_7493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 50), 'str', 'fastCopyAndTranspose')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7493)
# Adding element type (line 27)
str_7494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 4), 'str', 'lexsort')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7494)
# Adding element type (line 27)
str_7495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 15), 'str', 'set_numeric_ops')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7495)
# Adding element type (line 27)
str_7496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 34), 'str', 'can_cast')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7496)
# Adding element type (line 27)
str_7497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 46), 'str', 'promote_types')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7497)
# Adding element type (line 27)
str_7498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 4), 'str', 'min_scalar_type')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7498)
# Adding element type (line 27)
str_7499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 23), 'str', 'result_type')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7499)
# Adding element type (line 27)
str_7500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 38), 'str', 'asarray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7500)
# Adding element type (line 27)
str_7501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 49), 'str', 'asanyarray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7501)
# Adding element type (line 27)
str_7502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 4), 'str', 'ascontiguousarray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7502)
# Adding element type (line 27)
str_7503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 25), 'str', 'asfortranarray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7503)
# Adding element type (line 27)
str_7504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 43), 'str', 'isfortran')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7504)
# Adding element type (line 27)
str_7505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 56), 'str', 'empty_like')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7505)
# Adding element type (line 27)
str_7506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 4), 'str', 'zeros_like')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7506)
# Adding element type (line 27)
str_7507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 18), 'str', 'ones_like')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7507)
# Adding element type (line 27)
str_7508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 31), 'str', 'correlate')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7508)
# Adding element type (line 27)
str_7509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 44), 'str', 'convolve')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7509)
# Adding element type (line 27)
str_7510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 56), 'str', 'inner')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7510)
# Adding element type (line 27)
str_7511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 65), 'str', 'dot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7511)
# Adding element type (line 27)
str_7512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 4), 'str', 'einsum')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7512)
# Adding element type (line 27)
str_7513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 14), 'str', 'outer')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7513)
# Adding element type (line 27)
str_7514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 23), 'str', 'vdot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7514)
# Adding element type (line 27)
str_7515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 31), 'str', 'alterdot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7515)
# Adding element type (line 27)
str_7516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 43), 'str', 'restoredot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7516)
# Adding element type (line 27)
str_7517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 57), 'str', 'roll')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7517)
# Adding element type (line 27)
str_7518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 4), 'str', 'rollaxis')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7518)
# Adding element type (line 27)
str_7519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 16), 'str', 'moveaxis')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7519)
# Adding element type (line 27)
str_7520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 28), 'str', 'cross')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7520)
# Adding element type (line 27)
str_7521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 37), 'str', 'tensordot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7521)
# Adding element type (line 27)
str_7522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 50), 'str', 'array2string')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7522)
# Adding element type (line 27)
str_7523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 4), 'str', 'get_printoptions')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7523)
# Adding element type (line 27)
str_7524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 24), 'str', 'set_printoptions')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7524)
# Adding element type (line 27)
str_7525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 44), 'str', 'array_repr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7525)
# Adding element type (line 27)
str_7526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 58), 'str', 'array_str')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7526)
# Adding element type (line 27)
str_7527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 4), 'str', 'set_string_function')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7527)
# Adding element type (line 27)
str_7528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 27), 'str', 'little_endian')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7528)
# Adding element type (line 27)
str_7529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 44), 'str', 'require')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7529)
# Adding element type (line 27)
str_7530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 55), 'str', 'fromiter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7530)
# Adding element type (line 27)
str_7531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 4), 'str', 'array_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7531)
# Adding element type (line 27)
str_7532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 19), 'str', 'array_equiv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7532)
# Adding element type (line 27)
str_7533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 34), 'str', 'indices')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7533)
# Adding element type (line 27)
str_7534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 45), 'str', 'fromfunction')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7534)
# Adding element type (line 27)
str_7535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 61), 'str', 'isclose')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7535)
# Adding element type (line 27)
str_7536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 72), 'str', 'load')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7536)
# Adding element type (line 27)
str_7537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 4), 'str', 'loads')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7537)
# Adding element type (line 27)
str_7538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 13), 'str', 'isscalar')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7538)
# Adding element type (line 27)
str_7539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 25), 'str', 'binary_repr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7539)
# Adding element type (line 27)
str_7540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 40), 'str', 'base_repr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7540)
# Adding element type (line 27)
str_7541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 53), 'str', 'ones')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7541)
# Adding element type (line 27)
str_7542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 61), 'str', 'identity')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7542)
# Adding element type (line 27)
str_7543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 4), 'str', 'allclose')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7543)
# Adding element type (line 27)
str_7544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 16), 'str', 'compare_chararrays')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7544)
# Adding element type (line 27)
str_7545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 38), 'str', 'putmask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7545)
# Adding element type (line 27)
str_7546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 49), 'str', 'seterr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7546)
# Adding element type (line 27)
str_7547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 59), 'str', 'geterr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7547)
# Adding element type (line 27)
str_7548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 4), 'str', 'setbufsize')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7548)
# Adding element type (line 27)
str_7549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 18), 'str', 'getbufsize')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7549)
# Adding element type (line 27)
str_7550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 32), 'str', 'seterrcall')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7550)
# Adding element type (line 27)
str_7551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 46), 'str', 'geterrcall')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7551)
# Adding element type (line 27)
str_7552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 60), 'str', 'errstate')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7552)
# Adding element type (line 27)
str_7553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 4), 'str', 'flatnonzero')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7553)
# Adding element type (line 27)
str_7554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 19), 'str', 'Inf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7554)
# Adding element type (line 27)
str_7555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 26), 'str', 'inf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7555)
# Adding element type (line 27)
str_7556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 33), 'str', 'infty')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7556)
# Adding element type (line 27)
str_7557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 42), 'str', 'Infinity')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7557)
# Adding element type (line 27)
str_7558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 54), 'str', 'nan')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7558)
# Adding element type (line 27)
str_7559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 61), 'str', 'NaN')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7559)
# Adding element type (line 27)
str_7560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 68), 'str', 'False_')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7560)
# Adding element type (line 27)
str_7561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 4), 'str', 'True_')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7561)
# Adding element type (line 27)
str_7562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 13), 'str', 'bitwise_not')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7562)
# Adding element type (line 27)
str_7563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 28), 'str', 'CLIP')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7563)
# Adding element type (line 27)
str_7564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 36), 'str', 'RAISE')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7564)
# Adding element type (line 27)
str_7565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 45), 'str', 'WRAP')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7565)
# Adding element type (line 27)
str_7566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 53), 'str', 'MAXDIMS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7566)
# Adding element type (line 27)
str_7567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 64), 'str', 'BUFSIZE')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7567)
# Adding element type (line 27)
str_7568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 4), 'str', 'ALLOW_THREADS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7568)
# Adding element type (line 27)
str_7569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 21), 'str', 'ComplexWarning')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7569)
# Adding element type (line 27)
str_7570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 39), 'str', 'full')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7570)
# Adding element type (line 27)
str_7571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 47), 'str', 'full_like')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7571)
# Adding element type (line 27)
str_7572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 60), 'str', 'matmul')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7572)
# Adding element type (line 27)
str_7573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 4), 'str', 'shares_memory')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7573)
# Adding element type (line 27)
str_7574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 21), 'str', 'may_share_memory')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7574)
# Adding element type (line 27)
str_7575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 41), 'str', 'MAY_SHARE_BOUNDS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7575)
# Adding element type (line 27)
str_7576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 61), 'str', 'MAY_SHARE_EXACT')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7576)
# Adding element type (line 27)
str_7577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 4), 'str', 'TooHardError')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_7471, str_7577)

# Assigning a type to the variable '__all__' (line 27)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), '__all__', list_7471)



# Obtaining the type of the subscript
int_7578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 20), 'int')
# Getting the type of 'sys' (line 51)
sys_7579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 51)
version_info_7580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 3), sys_7579, 'version_info')
# Obtaining the member '__getitem__' of a type (line 51)
getitem___7581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 3), version_info_7580, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 51)
subscript_call_result_7582 = invoke(stypy.reporting.localization.Localization(__file__, 51, 3), getitem___7581, int_7578)

int_7583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 25), 'int')
# Applying the binary operator '<' (line 51)
result_lt_7584 = python_operator(stypy.reporting.localization.Localization(__file__, 51, 3), '<', subscript_call_result_7582, int_7583)

# Testing the type of an if condition (line 51)
if_condition_7585 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 51, 0), result_lt_7584)
# Assigning a type to the variable 'if_condition_7585' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'if_condition_7585', if_condition_7585)
# SSA begins for if statement (line 51)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to extend(...): (line 52)
# Processing the call arguments (line 52)

# Obtaining an instance of the builtin type 'list' (line 52)
list_7588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 19), 'list')
# Adding type elements to the builtin type 'list' instance (line 52)
# Adding element type (line 52)
str_7589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 20), 'str', 'getbuffer')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 52, 19), list_7588, str_7589)
# Adding element type (line 52)
str_7590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 33), 'str', 'newbuffer')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 52, 19), list_7588, str_7590)

# Processing the call keyword arguments (line 52)
kwargs_7591 = {}
# Getting the type of '__all__' (line 52)
all___7586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 4), '__all__', False)
# Obtaining the member 'extend' of a type (line 52)
extend_7587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 4), all___7586, 'extend')
# Calling extend(args, kwargs) (line 52)
extend_call_result_7592 = invoke(stypy.reporting.localization.Localization(__file__, 52, 4), extend_7587, *[list_7588], **kwargs_7591)

# SSA join for if statement (line 51)
module_type_store = module_type_store.join_ssa_context()

# Declaration of the 'ComplexWarning' class
# Getting the type of 'RuntimeWarning' (line 55)
RuntimeWarning_7593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 21), 'RuntimeWarning')

class ComplexWarning(RuntimeWarning_7593, ):
    str_7594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, (-1)), 'str', '\n    The warning raised when casting a complex dtype to a real dtype.\n\n    As implemented, casting a complex number to a real discards its imaginary\n    part, but this behavior may not be what the user actually wants.\n\n    ')
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 55, 0, False)
        # Assigning a type to the variable 'self' (line 56)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ComplexWarning.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ComplexWarning' (line 55)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 0), 'ComplexWarning', ComplexWarning)

# Assigning a Name to a Name (line 65):

# Assigning a Name to a Name (line 65):
# Getting the type of 'invert' (line 65)
invert_7595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 14), 'invert')
# Assigning a type to the variable 'bitwise_not' (line 65)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 0), 'bitwise_not', invert_7595)

# Assigning a Attribute to a Name (line 67):

# Assigning a Attribute to a Name (line 67):
# Getting the type of 'multiarray' (line 67)
multiarray_7596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 7), 'multiarray')
# Obtaining the member 'CLIP' of a type (line 67)
CLIP_7597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 67, 7), multiarray_7596, 'CLIP')
# Assigning a type to the variable 'CLIP' (line 67)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 0), 'CLIP', CLIP_7597)

# Assigning a Attribute to a Name (line 68):

# Assigning a Attribute to a Name (line 68):
# Getting the type of 'multiarray' (line 68)
multiarray_7598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 7), 'multiarray')
# Obtaining the member 'WRAP' of a type (line 68)
WRAP_7599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 68, 7), multiarray_7598, 'WRAP')
# Assigning a type to the variable 'WRAP' (line 68)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 0), 'WRAP', WRAP_7599)

# Assigning a Attribute to a Name (line 69):

# Assigning a Attribute to a Name (line 69):
# Getting the type of 'multiarray' (line 69)
multiarray_7600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 8), 'multiarray')
# Obtaining the member 'RAISE' of a type (line 69)
RAISE_7601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 69, 8), multiarray_7600, 'RAISE')
# Assigning a type to the variable 'RAISE' (line 69)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 0), 'RAISE', RAISE_7601)

# Assigning a Attribute to a Name (line 70):

# Assigning a Attribute to a Name (line 70):
# Getting the type of 'multiarray' (line 70)
multiarray_7602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 10), 'multiarray')
# Obtaining the member 'MAXDIMS' of a type (line 70)
MAXDIMS_7603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 70, 10), multiarray_7602, 'MAXDIMS')
# Assigning a type to the variable 'MAXDIMS' (line 70)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 0), 'MAXDIMS', MAXDIMS_7603)

# Assigning a Attribute to a Name (line 71):

# Assigning a Attribute to a Name (line 71):
# Getting the type of 'multiarray' (line 71)
multiarray_7604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 16), 'multiarray')
# Obtaining the member 'ALLOW_THREADS' of a type (line 71)
ALLOW_THREADS_7605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 16), multiarray_7604, 'ALLOW_THREADS')
# Assigning a type to the variable 'ALLOW_THREADS' (line 71)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 0), 'ALLOW_THREADS', ALLOW_THREADS_7605)

# Assigning a Attribute to a Name (line 72):

# Assigning a Attribute to a Name (line 72):
# Getting the type of 'multiarray' (line 72)
multiarray_7606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 10), 'multiarray')
# Obtaining the member 'BUFSIZE' of a type (line 72)
BUFSIZE_7607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 72, 10), multiarray_7606, 'BUFSIZE')
# Assigning a type to the variable 'BUFSIZE' (line 72)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 72, 0), 'BUFSIZE', BUFSIZE_7607)

# Assigning a Attribute to a Name (line 73):

# Assigning a Attribute to a Name (line 73):
# Getting the type of 'multiarray' (line 73)
multiarray_7608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 19), 'multiarray')
# Obtaining the member 'MAY_SHARE_BOUNDS' of a type (line 73)
MAY_SHARE_BOUNDS_7609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 73, 19), multiarray_7608, 'MAY_SHARE_BOUNDS')
# Assigning a type to the variable 'MAY_SHARE_BOUNDS' (line 73)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 73, 0), 'MAY_SHARE_BOUNDS', MAY_SHARE_BOUNDS_7609)

# Assigning a Attribute to a Name (line 74):

# Assigning a Attribute to a Name (line 74):
# Getting the type of 'multiarray' (line 74)
multiarray_7610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 18), 'multiarray')
# Obtaining the member 'MAY_SHARE_EXACT' of a type (line 74)
MAY_SHARE_EXACT_7611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 18), multiarray_7610, 'MAY_SHARE_EXACT')
# Assigning a type to the variable 'MAY_SHARE_EXACT' (line 74)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 0), 'MAY_SHARE_EXACT', MAY_SHARE_EXACT_7611)

# Assigning a Attribute to a Name (line 76):

# Assigning a Attribute to a Name (line 76):
# Getting the type of 'multiarray' (line 76)
multiarray_7612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 10), 'multiarray')
# Obtaining the member 'ndarray' of a type (line 76)
ndarray_7613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 76, 10), multiarray_7612, 'ndarray')
# Assigning a type to the variable 'ndarray' (line 76)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 0), 'ndarray', ndarray_7613)

# Assigning a Attribute to a Name (line 77):

# Assigning a Attribute to a Name (line 77):
# Getting the type of 'multiarray' (line 77)
multiarray_7614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 11), 'multiarray')
# Obtaining the member 'flatiter' of a type (line 77)
flatiter_7615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 77, 11), multiarray_7614, 'flatiter')
# Assigning a type to the variable 'flatiter' (line 77)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 0), 'flatiter', flatiter_7615)

# Assigning a Attribute to a Name (line 78):

# Assigning a Attribute to a Name (line 78):
# Getting the type of 'multiarray' (line 78)
multiarray_7616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 9), 'multiarray')
# Obtaining the member 'nditer' of a type (line 78)
nditer_7617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 78, 9), multiarray_7616, 'nditer')
# Assigning a type to the variable 'nditer' (line 78)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 0), 'nditer', nditer_7617)

# Assigning a Attribute to a Name (line 79):

# Assigning a Attribute to a Name (line 79):
# Getting the type of 'multiarray' (line 79)
multiarray_7618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 15), 'multiarray')
# Obtaining the member 'nested_iters' of a type (line 79)
nested_iters_7619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 79, 15), multiarray_7618, 'nested_iters')
# Assigning a type to the variable 'nested_iters' (line 79)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 0), 'nested_iters', nested_iters_7619)

# Assigning a Attribute to a Name (line 80):

# Assigning a Attribute to a Name (line 80):
# Getting the type of 'multiarray' (line 80)
multiarray_7620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 12), 'multiarray')
# Obtaining the member 'broadcast' of a type (line 80)
broadcast_7621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 12), multiarray_7620, 'broadcast')
# Assigning a type to the variable 'broadcast' (line 80)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 0), 'broadcast', broadcast_7621)

# Assigning a Attribute to a Name (line 81):

# Assigning a Attribute to a Name (line 81):
# Getting the type of 'multiarray' (line 81)
multiarray_7622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 8), 'multiarray')
# Obtaining the member 'dtype' of a type (line 81)
dtype_7623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 81, 8), multiarray_7622, 'dtype')
# Assigning a type to the variable 'dtype' (line 81)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 81, 0), 'dtype', dtype_7623)

# Assigning a Attribute to a Name (line 82):

# Assigning a Attribute to a Name (line 82):
# Getting the type of 'multiarray' (line 82)
multiarray_7624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 9), 'multiarray')
# Obtaining the member 'copyto' of a type (line 82)
copyto_7625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 9), multiarray_7624, 'copyto')
# Assigning a type to the variable 'copyto' (line 82)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 0), 'copyto', copyto_7625)

# Assigning a Call to a Name (line 83):

# Assigning a Call to a Name (line 83):

# Call to type(...): (line 83)
# Processing the call arguments (line 83)
# Getting the type of 'sin' (line 83)
sin_7627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 13), 'sin', False)
# Processing the call keyword arguments (line 83)
kwargs_7628 = {}
# Getting the type of 'type' (line 83)
type_7626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 8), 'type', False)
# Calling type(args, kwargs) (line 83)
type_call_result_7629 = invoke(stypy.reporting.localization.Localization(__file__, 83, 8), type_7626, *[sin_7627], **kwargs_7628)

# Assigning a type to the variable 'ufunc' (line 83)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 0), 'ufunc', type_call_result_7629)

@norecursion
def zeros_like(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 86)
    None_7630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 24), 'None')
    str_7631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 36), 'str', 'K')
    # Getting the type of 'True' (line 86)
    True_7632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 47), 'True')
    defaults = [None_7630, str_7631, True_7632]
    # Create a new context for function 'zeros_like'
    module_type_store = module_type_store.open_function_context('zeros_like', 86, 0, False)
    
    # Passed parameters checking function
    zeros_like.stypy_localization = localization
    zeros_like.stypy_type_of_self = None
    zeros_like.stypy_type_store = module_type_store
    zeros_like.stypy_function_name = 'zeros_like'
    zeros_like.stypy_param_names_list = ['a', 'dtype', 'order', 'subok']
    zeros_like.stypy_varargs_param_name = None
    zeros_like.stypy_kwargs_param_name = None
    zeros_like.stypy_call_defaults = defaults
    zeros_like.stypy_call_varargs = varargs
    zeros_like.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'zeros_like', ['a', 'dtype', 'order', 'subok'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'zeros_like', localization, ['a', 'dtype', 'order', 'subok'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'zeros_like(...)' code ##################

    str_7633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, (-1)), 'str', "\n    Return an array of zeros with the same shape and type as a given array.\n\n    Parameters\n    ----------\n    a : array_like\n        The shape and data-type of `a` define these same attributes of\n        the returned array.\n    dtype : data-type, optional\n        Overrides the data type of the result.\n\n        .. versionadded:: 1.6.0\n    order : {'C', 'F', 'A', or 'K'}, optional\n        Overrides the memory layout of the result. 'C' means C-order,\n        'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n        'C' otherwise. 'K' means match the layout of `a` as closely\n        as possible.\n\n        .. versionadded:: 1.6.0\n    subok : bool, optional.\n        If True, then the newly created array will use the sub-class\n        type of 'a', otherwise it will be a base-class array. Defaults\n        to True.\n\n    Returns\n    -------\n    out : ndarray\n        Array of zeros with the same shape and type as `a`.\n\n    See Also\n    --------\n    ones_like : Return an array of ones with shape and type of input.\n    empty_like : Return an empty array with shape and type of input.\n    zeros : Return a new array setting values to zero.\n    ones : Return a new array setting values to one.\n    empty : Return a new uninitialized array.\n\n    Examples\n    --------\n    >>> x = np.arange(6)\n    >>> x = x.reshape((2, 3))\n    >>> x\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.zeros_like(x)\n    array([[0, 0, 0],\n           [0, 0, 0]])\n\n    >>> y = np.arange(3, dtype=np.float)\n    >>> y\n    array([ 0.,  1.,  2.])\n    >>> np.zeros_like(y)\n    array([ 0.,  0.,  0.])\n\n    ")
    
    # Assigning a Call to a Name (line 142):
    
    # Assigning a Call to a Name (line 142):
    
    # Call to empty_like(...): (line 142)
    # Processing the call arguments (line 142)
    # Getting the type of 'a' (line 142)
    a_7635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 21), 'a', False)
    # Processing the call keyword arguments (line 142)
    # Getting the type of 'dtype' (line 142)
    dtype_7636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 30), 'dtype', False)
    keyword_7637 = dtype_7636
    # Getting the type of 'order' (line 142)
    order_7638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 43), 'order', False)
    keyword_7639 = order_7638
    # Getting the type of 'subok' (line 142)
    subok_7640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 56), 'subok', False)
    keyword_7641 = subok_7640
    kwargs_7642 = {'dtype': keyword_7637, 'order': keyword_7639, 'subok': keyword_7641}
    # Getting the type of 'empty_like' (line 142)
    empty_like_7634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 10), 'empty_like', False)
    # Calling empty_like(args, kwargs) (line 142)
    empty_like_call_result_7643 = invoke(stypy.reporting.localization.Localization(__file__, 142, 10), empty_like_7634, *[a_7635], **kwargs_7642)
    
    # Assigning a type to the variable 'res' (line 142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 4), 'res', empty_like_call_result_7643)
    
    # Assigning a Call to a Name (line 144):
    
    # Assigning a Call to a Name (line 144):
    
    # Call to zeros(...): (line 144)
    # Processing the call arguments (line 144)
    int_7645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 14), 'int')
    # Processing the call keyword arguments (line 144)
    # Getting the type of 'res' (line 144)
    res_7646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 23), 'res', False)
    # Obtaining the member 'dtype' of a type (line 144)
    dtype_7647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 23), res_7646, 'dtype')
    keyword_7648 = dtype_7647
    kwargs_7649 = {'dtype': keyword_7648}
    # Getting the type of 'zeros' (line 144)
    zeros_7644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'zeros', False)
    # Calling zeros(args, kwargs) (line 144)
    zeros_call_result_7650 = invoke(stypy.reporting.localization.Localization(__file__, 144, 8), zeros_7644, *[int_7645], **kwargs_7649)
    
    # Assigning a type to the variable 'z' (line 144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 4), 'z', zeros_call_result_7650)
    
    # Call to copyto(...): (line 145)
    # Processing the call arguments (line 145)
    # Getting the type of 'res' (line 145)
    res_7653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 22), 'res', False)
    # Getting the type of 'z' (line 145)
    z_7654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 27), 'z', False)
    # Processing the call keyword arguments (line 145)
    str_7655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, 38), 'str', 'unsafe')
    keyword_7656 = str_7655
    kwargs_7657 = {'casting': keyword_7656}
    # Getting the type of 'multiarray' (line 145)
    multiarray_7651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 4), 'multiarray', False)
    # Obtaining the member 'copyto' of a type (line 145)
    copyto_7652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 4), multiarray_7651, 'copyto')
    # Calling copyto(args, kwargs) (line 145)
    copyto_call_result_7658 = invoke(stypy.reporting.localization.Localization(__file__, 145, 4), copyto_7652, *[res_7653, z_7654], **kwargs_7657)
    
    # Getting the type of 'res' (line 146)
    res_7659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 4), 'stypy_return_type', res_7659)
    
    # ################# End of 'zeros_like(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'zeros_like' in the type store
    # Getting the type of 'stypy_return_type' (line 86)
    stypy_return_type_7660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_7660)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'zeros_like'
    return stypy_return_type_7660

# Assigning a type to the variable 'zeros_like' (line 86)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 0), 'zeros_like', zeros_like)

@norecursion
def ones(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 148)
    None_7661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 22), 'None')
    str_7662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 34), 'str', 'C')
    defaults = [None_7661, str_7662]
    # Create a new context for function 'ones'
    module_type_store = module_type_store.open_function_context('ones', 148, 0, False)
    
    # Passed parameters checking function
    ones.stypy_localization = localization
    ones.stypy_type_of_self = None
    ones.stypy_type_store = module_type_store
    ones.stypy_function_name = 'ones'
    ones.stypy_param_names_list = ['shape', 'dtype', 'order']
    ones.stypy_varargs_param_name = None
    ones.stypy_kwargs_param_name = None
    ones.stypy_call_defaults = defaults
    ones.stypy_call_varargs = varargs
    ones.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ones', ['shape', 'dtype', 'order'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ones', localization, ['shape', 'dtype', 'order'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ones(...)' code ##################

    str_7663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, (-1)), 'str', "\n    Return a new array of given shape and type, filled with ones.\n\n    Parameters\n    ----------\n    shape : int or sequence of ints\n        Shape of the new array, e.g., ``(2, 3)`` or ``2``.\n    dtype : data-type, optional\n        The desired data-type for the array, e.g., `numpy.int8`.  Default is\n        `numpy.float64`.\n    order : {'C', 'F'}, optional\n        Whether to store multidimensional data in C- or Fortran-contiguous\n        (row- or column-wise) order in memory.\n\n    Returns\n    -------\n    out : ndarray\n        Array of ones with the given shape, dtype, and order.\n\n    See Also\n    --------\n    zeros, ones_like\n\n    Examples\n    --------\n    >>> np.ones(5)\n    array([ 1.,  1.,  1.,  1.,  1.])\n\n    >>> np.ones((5,), dtype=np.int)\n    array([1, 1, 1, 1, 1])\n\n    >>> np.ones((2, 1))\n    array([[ 1.],\n           [ 1.]])\n\n    >>> s = (2,2)\n    >>> np.ones(s)\n    array([[ 1.,  1.],\n           [ 1.,  1.]])\n\n    ")
    
    # Assigning a Call to a Name (line 190):
    
    # Assigning a Call to a Name (line 190):
    
    # Call to empty(...): (line 190)
    # Processing the call arguments (line 190)
    # Getting the type of 'shape' (line 190)
    shape_7665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 14), 'shape', False)
    # Getting the type of 'dtype' (line 190)
    dtype_7666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 21), 'dtype', False)
    # Getting the type of 'order' (line 190)
    order_7667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 28), 'order', False)
    # Processing the call keyword arguments (line 190)
    kwargs_7668 = {}
    # Getting the type of 'empty' (line 190)
    empty_7664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 8), 'empty', False)
    # Calling empty(args, kwargs) (line 190)
    empty_call_result_7669 = invoke(stypy.reporting.localization.Localization(__file__, 190, 8), empty_7664, *[shape_7665, dtype_7666, order_7667], **kwargs_7668)
    
    # Assigning a type to the variable 'a' (line 190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'a', empty_call_result_7669)
    
    # Call to copyto(...): (line 191)
    # Processing the call arguments (line 191)
    # Getting the type of 'a' (line 191)
    a_7672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 22), 'a', False)
    int_7673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 25), 'int')
    # Processing the call keyword arguments (line 191)
    str_7674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 36), 'str', 'unsafe')
    keyword_7675 = str_7674
    kwargs_7676 = {'casting': keyword_7675}
    # Getting the type of 'multiarray' (line 191)
    multiarray_7670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 4), 'multiarray', False)
    # Obtaining the member 'copyto' of a type (line 191)
    copyto_7671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 4), multiarray_7670, 'copyto')
    # Calling copyto(args, kwargs) (line 191)
    copyto_call_result_7677 = invoke(stypy.reporting.localization.Localization(__file__, 191, 4), copyto_7671, *[a_7672, int_7673], **kwargs_7676)
    
    # Getting the type of 'a' (line 192)
    a_7678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 192)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 4), 'stypy_return_type', a_7678)
    
    # ################# End of 'ones(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ones' in the type store
    # Getting the type of 'stypy_return_type' (line 148)
    stypy_return_type_7679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_7679)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ones'
    return stypy_return_type_7679

# Assigning a type to the variable 'ones' (line 148)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 0), 'ones', ones)

@norecursion
def ones_like(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 194)
    None_7680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 23), 'None')
    str_7681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 35), 'str', 'K')
    # Getting the type of 'True' (line 194)
    True_7682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 46), 'True')
    defaults = [None_7680, str_7681, True_7682]
    # Create a new context for function 'ones_like'
    module_type_store = module_type_store.open_function_context('ones_like', 194, 0, False)
    
    # Passed parameters checking function
    ones_like.stypy_localization = localization
    ones_like.stypy_type_of_self = None
    ones_like.stypy_type_store = module_type_store
    ones_like.stypy_function_name = 'ones_like'
    ones_like.stypy_param_names_list = ['a', 'dtype', 'order', 'subok']
    ones_like.stypy_varargs_param_name = None
    ones_like.stypy_kwargs_param_name = None
    ones_like.stypy_call_defaults = defaults
    ones_like.stypy_call_varargs = varargs
    ones_like.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ones_like', ['a', 'dtype', 'order', 'subok'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ones_like', localization, ['a', 'dtype', 'order', 'subok'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ones_like(...)' code ##################

    str_7683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, (-1)), 'str', "\n    Return an array of ones with the same shape and type as a given array.\n\n    Parameters\n    ----------\n    a : array_like\n        The shape and data-type of `a` define these same attributes of\n        the returned array.\n    dtype : data-type, optional\n        Overrides the data type of the result.\n\n        .. versionadded:: 1.6.0\n    order : {'C', 'F', 'A', or 'K'}, optional\n        Overrides the memory layout of the result. 'C' means C-order,\n        'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n        'C' otherwise. 'K' means match the layout of `a` as closely\n        as possible.\n\n        .. versionadded:: 1.6.0\n    subok : bool, optional.\n        If True, then the newly created array will use the sub-class\n        type of 'a', otherwise it will be a base-class array. Defaults\n        to True.\n\n    Returns\n    -------\n    out : ndarray\n        Array of ones with the same shape and type as `a`.\n\n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    empty_like : Return an empty array with shape and type of input.\n    zeros : Return a new array setting values to zero.\n    ones : Return a new array setting values to one.\n    empty : Return a new uninitialized array.\n\n    Examples\n    --------\n    >>> x = np.arange(6)\n    >>> x = x.reshape((2, 3))\n    >>> x\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.ones_like(x)\n    array([[1, 1, 1],\n           [1, 1, 1]])\n\n    >>> y = np.arange(3, dtype=np.float)\n    >>> y\n    array([ 0.,  1.,  2.])\n    >>> np.ones_like(y)\n    array([ 1.,  1.,  1.])\n\n    ")
    
    # Assigning a Call to a Name (line 250):
    
    # Assigning a Call to a Name (line 250):
    
    # Call to empty_like(...): (line 250)
    # Processing the call arguments (line 250)
    # Getting the type of 'a' (line 250)
    a_7685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 21), 'a', False)
    # Processing the call keyword arguments (line 250)
    # Getting the type of 'dtype' (line 250)
    dtype_7686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 30), 'dtype', False)
    keyword_7687 = dtype_7686
    # Getting the type of 'order' (line 250)
    order_7688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 43), 'order', False)
    keyword_7689 = order_7688
    # Getting the type of 'subok' (line 250)
    subok_7690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 56), 'subok', False)
    keyword_7691 = subok_7690
    kwargs_7692 = {'dtype': keyword_7687, 'order': keyword_7689, 'subok': keyword_7691}
    # Getting the type of 'empty_like' (line 250)
    empty_like_7684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 10), 'empty_like', False)
    # Calling empty_like(args, kwargs) (line 250)
    empty_like_call_result_7693 = invoke(stypy.reporting.localization.Localization(__file__, 250, 10), empty_like_7684, *[a_7685], **kwargs_7692)
    
    # Assigning a type to the variable 'res' (line 250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 4), 'res', empty_like_call_result_7693)
    
    # Call to copyto(...): (line 251)
    # Processing the call arguments (line 251)
    # Getting the type of 'res' (line 251)
    res_7696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 22), 'res', False)
    int_7697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 27), 'int')
    # Processing the call keyword arguments (line 251)
    str_7698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 38), 'str', 'unsafe')
    keyword_7699 = str_7698
    kwargs_7700 = {'casting': keyword_7699}
    # Getting the type of 'multiarray' (line 251)
    multiarray_7694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 4), 'multiarray', False)
    # Obtaining the member 'copyto' of a type (line 251)
    copyto_7695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 4), multiarray_7694, 'copyto')
    # Calling copyto(args, kwargs) (line 251)
    copyto_call_result_7701 = invoke(stypy.reporting.localization.Localization(__file__, 251, 4), copyto_7695, *[res_7696, int_7697], **kwargs_7700)
    
    # Getting the type of 'res' (line 252)
    res_7702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 4), 'stypy_return_type', res_7702)
    
    # ################# End of 'ones_like(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ones_like' in the type store
    # Getting the type of 'stypy_return_type' (line 194)
    stypy_return_type_7703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_7703)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ones_like'
    return stypy_return_type_7703

# Assigning a type to the variable 'ones_like' (line 194)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 0), 'ones_like', ones_like)

@norecursion
def full(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 254)
    None_7704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 34), 'None')
    str_7705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 46), 'str', 'C')
    defaults = [None_7704, str_7705]
    # Create a new context for function 'full'
    module_type_store = module_type_store.open_function_context('full', 254, 0, False)
    
    # Passed parameters checking function
    full.stypy_localization = localization
    full.stypy_type_of_self = None
    full.stypy_type_store = module_type_store
    full.stypy_function_name = 'full'
    full.stypy_param_names_list = ['shape', 'fill_value', 'dtype', 'order']
    full.stypy_varargs_param_name = None
    full.stypy_kwargs_param_name = None
    full.stypy_call_defaults = defaults
    full.stypy_call_varargs = varargs
    full.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'full', ['shape', 'fill_value', 'dtype', 'order'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'full', localization, ['shape', 'fill_value', 'dtype', 'order'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'full(...)' code ##################

    str_7706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, (-1)), 'str', "\n    Return a new array of given shape and type, filled with `fill_value`.\n\n    Parameters\n    ----------\n    shape : int or sequence of ints\n        Shape of the new array, e.g., ``(2, 3)`` or ``2``.\n    fill_value : scalar\n        Fill value.\n    dtype : data-type, optional\n        The desired data-type for the array, e.g., `np.int8`.  Default\n        is `float`, but will change to `np.array(fill_value).dtype` in a\n        future release.\n    order : {'C', 'F'}, optional\n        Whether to store multidimensional data in C- or Fortran-contiguous\n        (row- or column-wise) order in memory.\n\n    Returns\n    -------\n    out : ndarray\n        Array of `fill_value` with the given shape, dtype, and order.\n\n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    ones_like : Return an array of ones with shape and type of input.\n    empty_like : Return an empty array with shape and type of input.\n    full_like : Fill an array with shape and type of input.\n    zeros : Return a new array setting values to zero.\n    ones : Return a new array setting values to one.\n    empty : Return a new uninitialized array.\n\n    Examples\n    --------\n    >>> np.full((2, 2), np.inf)\n    array([[ inf,  inf],\n           [ inf,  inf]])\n    >>> np.full((2, 2), 10, dtype=np.int)\n    array([[10, 10],\n           [10, 10]])\n\n    ")
    
    # Assigning a Call to a Name (line 297):
    
    # Assigning a Call to a Name (line 297):
    
    # Call to empty(...): (line 297)
    # Processing the call arguments (line 297)
    # Getting the type of 'shape' (line 297)
    shape_7708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 14), 'shape', False)
    # Getting the type of 'dtype' (line 297)
    dtype_7709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 21), 'dtype', False)
    # Getting the type of 'order' (line 297)
    order_7710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 28), 'order', False)
    # Processing the call keyword arguments (line 297)
    kwargs_7711 = {}
    # Getting the type of 'empty' (line 297)
    empty_7707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'empty', False)
    # Calling empty(args, kwargs) (line 297)
    empty_call_result_7712 = invoke(stypy.reporting.localization.Localization(__file__, 297, 8), empty_7707, *[shape_7708, dtype_7709, order_7710], **kwargs_7711)
    
    # Assigning a type to the variable 'a' (line 297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 4), 'a', empty_call_result_7712)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'dtype' (line 298)
    dtype_7713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 7), 'dtype')
    # Getting the type of 'None' (line 298)
    None_7714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 16), 'None')
    # Applying the binary operator 'is' (line 298)
    result_is__7715 = python_operator(stypy.reporting.localization.Localization(__file__, 298, 7), 'is', dtype_7713, None_7714)
    
    
    
    # Call to array(...): (line 298)
    # Processing the call arguments (line 298)
    # Getting the type of 'fill_value' (line 298)
    fill_value_7717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 31), 'fill_value', False)
    # Processing the call keyword arguments (line 298)
    kwargs_7718 = {}
    # Getting the type of 'array' (line 298)
    array_7716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 25), 'array', False)
    # Calling array(args, kwargs) (line 298)
    array_call_result_7719 = invoke(stypy.reporting.localization.Localization(__file__, 298, 25), array_7716, *[fill_value_7717], **kwargs_7718)
    
    # Obtaining the member 'dtype' of a type (line 298)
    dtype_7720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 25), array_call_result_7719, 'dtype')
    # Getting the type of 'a' (line 298)
    a_7721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 52), 'a')
    # Obtaining the member 'dtype' of a type (line 298)
    dtype_7722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 52), a_7721, 'dtype')
    # Applying the binary operator '!=' (line 298)
    result_ne_7723 = python_operator(stypy.reporting.localization.Localization(__file__, 298, 25), '!=', dtype_7720, dtype_7722)
    
    # Applying the binary operator 'and' (line 298)
    result_and_keyword_7724 = python_operator(stypy.reporting.localization.Localization(__file__, 298, 7), 'and', result_is__7715, result_ne_7723)
    
    # Testing the type of an if condition (line 298)
    if_condition_7725 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 298, 4), result_and_keyword_7724)
    # Assigning a type to the variable 'if_condition_7725' (line 298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 4), 'if_condition_7725', if_condition_7725)
    # SSA begins for if statement (line 298)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 299)
    # Processing the call arguments (line 299)
    
    # Call to format(...): (line 300)
    # Processing the call arguments (line 300)
    # Getting the type of 'shape' (line 301)
    shape_7730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 19), 'shape', False)
    # Getting the type of 'fill_value' (line 301)
    fill_value_7731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 26), 'fill_value', False)
    
    # Call to array(...): (line 301)
    # Processing the call arguments (line 301)
    # Getting the type of 'fill_value' (line 301)
    fill_value_7733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 44), 'fill_value', False)
    # Processing the call keyword arguments (line 301)
    kwargs_7734 = {}
    # Getting the type of 'array' (line 301)
    array_7732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 38), 'array', False)
    # Calling array(args, kwargs) (line 301)
    array_call_result_7735 = invoke(stypy.reporting.localization.Localization(__file__, 301, 38), array_7732, *[fill_value_7733], **kwargs_7734)
    
    # Obtaining the member 'dtype' of a type (line 301)
    dtype_7736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 38), array_call_result_7735, 'dtype')
    # Processing the call keyword arguments (line 300)
    kwargs_7737 = {}
    str_7728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 12), 'str', 'in the future, full({0}, {1!r}) will return an array of {2!r}')
    # Obtaining the member 'format' of a type (line 300)
    format_7729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 12), str_7728, 'format')
    # Calling format(args, kwargs) (line 300)
    format_call_result_7738 = invoke(stypy.reporting.localization.Localization(__file__, 300, 12), format_7729, *[shape_7730, fill_value_7731, dtype_7736], **kwargs_7737)
    
    # Getting the type of 'FutureWarning' (line 301)
    FutureWarning_7739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 64), 'FutureWarning', False)
    # Processing the call keyword arguments (line 299)
    kwargs_7740 = {}
    # Getting the type of 'warnings' (line 299)
    warnings_7726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 299)
    warn_7727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 8), warnings_7726, 'warn')
    # Calling warn(args, kwargs) (line 299)
    warn_call_result_7741 = invoke(stypy.reporting.localization.Localization(__file__, 299, 8), warn_7727, *[format_call_result_7738, FutureWarning_7739], **kwargs_7740)
    
    # SSA join for if statement (line 298)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to copyto(...): (line 302)
    # Processing the call arguments (line 302)
    # Getting the type of 'a' (line 302)
    a_7744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 22), 'a', False)
    # Getting the type of 'fill_value' (line 302)
    fill_value_7745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 25), 'fill_value', False)
    # Processing the call keyword arguments (line 302)
    str_7746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 45), 'str', 'unsafe')
    keyword_7747 = str_7746
    kwargs_7748 = {'casting': keyword_7747}
    # Getting the type of 'multiarray' (line 302)
    multiarray_7742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 4), 'multiarray', False)
    # Obtaining the member 'copyto' of a type (line 302)
    copyto_7743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 4), multiarray_7742, 'copyto')
    # Calling copyto(args, kwargs) (line 302)
    copyto_call_result_7749 = invoke(stypy.reporting.localization.Localization(__file__, 302, 4), copyto_7743, *[a_7744, fill_value_7745], **kwargs_7748)
    
    # Getting the type of 'a' (line 303)
    a_7750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 4), 'stypy_return_type', a_7750)
    
    # ################# End of 'full(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'full' in the type store
    # Getting the type of 'stypy_return_type' (line 254)
    stypy_return_type_7751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_7751)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'full'
    return stypy_return_type_7751

# Assigning a type to the variable 'full' (line 254)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 0), 'full', full)

@norecursion
def full_like(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 305)
    None_7752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 35), 'None')
    str_7753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, 47), 'str', 'K')
    # Getting the type of 'True' (line 305)
    True_7754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 58), 'True')
    defaults = [None_7752, str_7753, True_7754]
    # Create a new context for function 'full_like'
    module_type_store = module_type_store.open_function_context('full_like', 305, 0, False)
    
    # Passed parameters checking function
    full_like.stypy_localization = localization
    full_like.stypy_type_of_self = None
    full_like.stypy_type_store = module_type_store
    full_like.stypy_function_name = 'full_like'
    full_like.stypy_param_names_list = ['a', 'fill_value', 'dtype', 'order', 'subok']
    full_like.stypy_varargs_param_name = None
    full_like.stypy_kwargs_param_name = None
    full_like.stypy_call_defaults = defaults
    full_like.stypy_call_varargs = varargs
    full_like.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'full_like', ['a', 'fill_value', 'dtype', 'order', 'subok'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'full_like', localization, ['a', 'fill_value', 'dtype', 'order', 'subok'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'full_like(...)' code ##################

    str_7755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, (-1)), 'str', "\n    Return a full array with the same shape and type as a given array.\n\n    Parameters\n    ----------\n    a : array_like\n        The shape and data-type of `a` define these same attributes of\n        the returned array.\n    fill_value : scalar\n        Fill value.\n    dtype : data-type, optional\n        Overrides the data type of the result.\n    order : {'C', 'F', 'A', or 'K'}, optional\n        Overrides the memory layout of the result. 'C' means C-order,\n        'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n        'C' otherwise. 'K' means match the layout of `a` as closely\n        as possible.\n    subok : bool, optional.\n        If True, then the newly created array will use the sub-class\n        type of 'a', otherwise it will be a base-class array. Defaults\n        to True.\n\n    Returns\n    -------\n    out : ndarray\n        Array of `fill_value` with the same shape and type as `a`.\n\n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    ones_like : Return an array of ones with shape and type of input.\n    empty_like : Return an empty array with shape and type of input.\n    zeros : Return a new array setting values to zero.\n    ones : Return a new array setting values to one.\n    empty : Return a new uninitialized array.\n    full : Fill a new array.\n\n    Examples\n    --------\n    >>> x = np.arange(6, dtype=np.int)\n    >>> np.full_like(x, 1)\n    array([1, 1, 1, 1, 1, 1])\n    >>> np.full_like(x, 0.1)\n    array([0, 0, 0, 0, 0, 0])\n    >>> np.full_like(x, 0.1, dtype=np.double)\n    array([ 0.1,  0.1,  0.1,  0.1,  0.1,  0.1])\n    >>> np.full_like(x, np.nan, dtype=np.double)\n    array([ nan,  nan,  nan,  nan,  nan,  nan])\n\n    >>> y = np.arange(6, dtype=np.double)\n    >>> np.full_like(y, 0.1)\n    array([ 0.1,  0.1,  0.1,  0.1,  0.1,  0.1])\n\n    ")
    
    # Assigning a Call to a Name (line 360):
    
    # Assigning a Call to a Name (line 360):
    
    # Call to empty_like(...): (line 360)
    # Processing the call arguments (line 360)
    # Getting the type of 'a' (line 360)
    a_7757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 21), 'a', False)
    # Processing the call keyword arguments (line 360)
    # Getting the type of 'dtype' (line 360)
    dtype_7758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 30), 'dtype', False)
    keyword_7759 = dtype_7758
    # Getting the type of 'order' (line 360)
    order_7760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 43), 'order', False)
    keyword_7761 = order_7760
    # Getting the type of 'subok' (line 360)
    subok_7762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 56), 'subok', False)
    keyword_7763 = subok_7762
    kwargs_7764 = {'dtype': keyword_7759, 'order': keyword_7761, 'subok': keyword_7763}
    # Getting the type of 'empty_like' (line 360)
    empty_like_7756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 10), 'empty_like', False)
    # Calling empty_like(args, kwargs) (line 360)
    empty_like_call_result_7765 = invoke(stypy.reporting.localization.Localization(__file__, 360, 10), empty_like_7756, *[a_7757], **kwargs_7764)
    
    # Assigning a type to the variable 'res' (line 360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'res', empty_like_call_result_7765)
    
    # Call to copyto(...): (line 361)
    # Processing the call arguments (line 361)
    # Getting the type of 'res' (line 361)
    res_7768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 22), 'res', False)
    # Getting the type of 'fill_value' (line 361)
    fill_value_7769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 27), 'fill_value', False)
    # Processing the call keyword arguments (line 361)
    str_7770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 47), 'str', 'unsafe')
    keyword_7771 = str_7770
    kwargs_7772 = {'casting': keyword_7771}
    # Getting the type of 'multiarray' (line 361)
    multiarray_7766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 4), 'multiarray', False)
    # Obtaining the member 'copyto' of a type (line 361)
    copyto_7767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 4), multiarray_7766, 'copyto')
    # Calling copyto(args, kwargs) (line 361)
    copyto_call_result_7773 = invoke(stypy.reporting.localization.Localization(__file__, 361, 4), copyto_7767, *[res_7768, fill_value_7769], **kwargs_7772)
    
    # Getting the type of 'res' (line 362)
    res_7774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 4), 'stypy_return_type', res_7774)
    
    # ################# End of 'full_like(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'full_like' in the type store
    # Getting the type of 'stypy_return_type' (line 305)
    stypy_return_type_7775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_7775)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'full_like'
    return stypy_return_type_7775

# Assigning a type to the variable 'full_like' (line 305)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 0), 'full_like', full_like)

@norecursion
def extend_all(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'extend_all'
    module_type_store = module_type_store.open_function_context('extend_all', 365, 0, False)
    
    # Passed parameters checking function
    extend_all.stypy_localization = localization
    extend_all.stypy_type_of_self = None
    extend_all.stypy_type_store = module_type_store
    extend_all.stypy_function_name = 'extend_all'
    extend_all.stypy_param_names_list = ['module']
    extend_all.stypy_varargs_param_name = None
    extend_all.stypy_kwargs_param_name = None
    extend_all.stypy_call_defaults = defaults
    extend_all.stypy_call_varargs = varargs
    extend_all.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'extend_all', ['module'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'extend_all', localization, ['module'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'extend_all(...)' code ##################

    
    # Assigning a Dict to a Name (line 366):
    
    # Assigning a Dict to a Name (line 366):
    
    # Obtaining an instance of the builtin type 'dict' (line 366)
    dict_7776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 366, 12), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 366)
    
    # Assigning a type to the variable 'adict' (line 366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 4), 'adict', dict_7776)
    
    # Getting the type of '__all__' (line 367)
    all___7777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 13), '__all__')
    # Testing the type of a for loop iterable (line 367)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 367, 4), all___7777)
    # Getting the type of the for loop variable (line 367)
    for_loop_var_7778 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 367, 4), all___7777)
    # Assigning a type to the variable 'a' (line 367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 4), 'a', for_loop_var_7778)
    # SSA begins for a for statement (line 367)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Num to a Subscript (line 368):
    
    # Assigning a Num to a Subscript (line 368):
    int_7779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 368, 19), 'int')
    # Getting the type of 'adict' (line 368)
    adict_7780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'adict')
    # Getting the type of 'a' (line 368)
    a_7781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 14), 'a')
    # Storing an element on a container (line 368)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 368, 8), adict_7780, (a_7781, int_7779))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 369)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 370):
    
    # Assigning a Call to a Name (line 370):
    
    # Call to getattr(...): (line 370)
    # Processing the call arguments (line 370)
    # Getting the type of 'module' (line 370)
    module_7783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 23), 'module', False)
    str_7784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 31), 'str', '__all__')
    # Processing the call keyword arguments (line 370)
    kwargs_7785 = {}
    # Getting the type of 'getattr' (line 370)
    getattr_7782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 15), 'getattr', False)
    # Calling getattr(args, kwargs) (line 370)
    getattr_call_result_7786 = invoke(stypy.reporting.localization.Localization(__file__, 370, 15), getattr_7782, *[module_7783, str_7784], **kwargs_7785)
    
    # Assigning a type to the variable 'mall' (line 370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 8), 'mall', getattr_call_result_7786)
    # SSA branch for the except part of a try statement (line 369)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 369)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a ListComp to a Name (line 372):
    
    # Assigning a ListComp to a Name (line 372):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to keys(...): (line 372)
    # Processing the call keyword arguments (line 372)
    kwargs_7797 = {}
    # Getting the type of 'module' (line 372)
    module_7794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 27), 'module', False)
    # Obtaining the member '__dict__' of a type (line 372)
    dict___7795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 27), module_7794, '__dict__')
    # Obtaining the member 'keys' of a type (line 372)
    keys_7796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 27), dict___7795, 'keys')
    # Calling keys(args, kwargs) (line 372)
    keys_call_result_7798 = invoke(stypy.reporting.localization.Localization(__file__, 372, 27), keys_7796, *[], **kwargs_7797)
    
    comprehension_7799 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 372, 16), keys_call_result_7798)
    # Assigning a type to the variable 'k' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 16), 'k', comprehension_7799)
    
    
    # Call to startswith(...): (line 372)
    # Processing the call arguments (line 372)
    str_7790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 372, 70), 'str', '_')
    # Processing the call keyword arguments (line 372)
    kwargs_7791 = {}
    # Getting the type of 'k' (line 372)
    k_7788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 57), 'k', False)
    # Obtaining the member 'startswith' of a type (line 372)
    startswith_7789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 57), k_7788, 'startswith')
    # Calling startswith(args, kwargs) (line 372)
    startswith_call_result_7792 = invoke(stypy.reporting.localization.Localization(__file__, 372, 57), startswith_7789, *[str_7790], **kwargs_7791)
    
    # Applying the 'not' unary operator (line 372)
    result_not__7793 = python_operator(stypy.reporting.localization.Localization(__file__, 372, 53), 'not', startswith_call_result_7792)
    
    # Getting the type of 'k' (line 372)
    k_7787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 16), 'k')
    list_7800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 372, 16), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 372, 16), list_7800, k_7787)
    # Assigning a type to the variable 'mall' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 8), 'mall', list_7800)
    # SSA join for try-except statement (line 369)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'mall' (line 373)
    mall_7801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 13), 'mall')
    # Testing the type of a for loop iterable (line 373)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 373, 4), mall_7801)
    # Getting the type of the for loop variable (line 373)
    for_loop_var_7802 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 373, 4), mall_7801)
    # Assigning a type to the variable 'a' (line 373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 4), 'a', for_loop_var_7802)
    # SSA begins for a for statement (line 373)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'a' (line 374)
    a_7803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 11), 'a')
    # Getting the type of 'adict' (line 374)
    adict_7804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 20), 'adict')
    # Applying the binary operator 'notin' (line 374)
    result_contains_7805 = python_operator(stypy.reporting.localization.Localization(__file__, 374, 11), 'notin', a_7803, adict_7804)
    
    # Testing the type of an if condition (line 374)
    if_condition_7806 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 374, 8), result_contains_7805)
    # Assigning a type to the variable 'if_condition_7806' (line 374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 8), 'if_condition_7806', if_condition_7806)
    # SSA begins for if statement (line 374)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 375)
    # Processing the call arguments (line 375)
    # Getting the type of 'a' (line 375)
    a_7809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 27), 'a', False)
    # Processing the call keyword arguments (line 375)
    kwargs_7810 = {}
    # Getting the type of '__all__' (line 375)
    all___7807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 12), '__all__', False)
    # Obtaining the member 'append' of a type (line 375)
    append_7808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 12), all___7807, 'append')
    # Calling append(args, kwargs) (line 375)
    append_call_result_7811 = invoke(stypy.reporting.localization.Localization(__file__, 375, 12), append_7808, *[a_7809], **kwargs_7810)
    
    # SSA join for if statement (line 374)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'extend_all(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'extend_all' in the type store
    # Getting the type of 'stypy_return_type' (line 365)
    stypy_return_type_7812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_7812)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'extend_all'
    return stypy_return_type_7812

# Assigning a type to the variable 'extend_all' (line 365)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 0), 'extend_all', extend_all)

# Assigning a Name to a Name (line 377):

# Assigning a Name to a Name (line 377):
# Getting the type of 'None' (line 377)
None_7813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 10), 'None')
# Assigning a type to the variable 'newaxis' (line 377)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 0), 'newaxis', None_7813)

# Assigning a Attribute to a Name (line 380):

# Assigning a Attribute to a Name (line 380):
# Getting the type of 'multiarray' (line 380)
multiarray_7814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 9), 'multiarray')
# Obtaining the member 'arange' of a type (line 380)
arange_7815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 9), multiarray_7814, 'arange')
# Assigning a type to the variable 'arange' (line 380)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 0), 'arange', arange_7815)

# Assigning a Attribute to a Name (line 381):

# Assigning a Attribute to a Name (line 381):
# Getting the type of 'multiarray' (line 381)
multiarray_7816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 8), 'multiarray')
# Obtaining the member 'array' of a type (line 381)
array_7817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 8), multiarray_7816, 'array')
# Assigning a type to the variable 'array' (line 381)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 0), 'array', array_7817)

# Assigning a Attribute to a Name (line 382):

# Assigning a Attribute to a Name (line 382):
# Getting the type of 'multiarray' (line 382)
multiarray_7818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'multiarray')
# Obtaining the member 'zeros' of a type (line 382)
zeros_7819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 8), multiarray_7818, 'zeros')
# Assigning a type to the variable 'zeros' (line 382)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 0), 'zeros', zeros_7819)

# Assigning a Attribute to a Name (line 383):

# Assigning a Attribute to a Name (line 383):
# Getting the type of 'multiarray' (line 383)
multiarray_7820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 16), 'multiarray')
# Obtaining the member 'count_nonzero' of a type (line 383)
count_nonzero_7821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 16), multiarray_7820, 'count_nonzero')
# Assigning a type to the variable 'count_nonzero' (line 383)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 0), 'count_nonzero', count_nonzero_7821)

# Assigning a Attribute to a Name (line 384):

# Assigning a Attribute to a Name (line 384):
# Getting the type of 'multiarray' (line 384)
multiarray_7822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'multiarray')
# Obtaining the member 'empty' of a type (line 384)
empty_7823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 8), multiarray_7822, 'empty')
# Assigning a type to the variable 'empty' (line 384)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 0), 'empty', empty_7823)

# Assigning a Attribute to a Name (line 385):

# Assigning a Attribute to a Name (line 385):
# Getting the type of 'multiarray' (line 385)
multiarray_7824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 13), 'multiarray')
# Obtaining the member 'empty_like' of a type (line 385)
empty_like_7825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 13), multiarray_7824, 'empty_like')
# Assigning a type to the variable 'empty_like' (line 385)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 0), 'empty_like', empty_like_7825)

# Assigning a Attribute to a Name (line 386):

# Assigning a Attribute to a Name (line 386):
# Getting the type of 'multiarray' (line 386)
multiarray_7826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 13), 'multiarray')
# Obtaining the member 'fromstring' of a type (line 386)
fromstring_7827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 13), multiarray_7826, 'fromstring')
# Assigning a type to the variable 'fromstring' (line 386)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 0), 'fromstring', fromstring_7827)

# Assigning a Attribute to a Name (line 387):

# Assigning a Attribute to a Name (line 387):
# Getting the type of 'multiarray' (line 387)
multiarray_7828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 11), 'multiarray')
# Obtaining the member 'fromiter' of a type (line 387)
fromiter_7829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 11), multiarray_7828, 'fromiter')
# Assigning a type to the variable 'fromiter' (line 387)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 0), 'fromiter', fromiter_7829)

# Assigning a Attribute to a Name (line 388):

# Assigning a Attribute to a Name (line 388):
# Getting the type of 'multiarray' (line 388)
multiarray_7830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 11), 'multiarray')
# Obtaining the member 'fromfile' of a type (line 388)
fromfile_7831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 11), multiarray_7830, 'fromfile')
# Assigning a type to the variable 'fromfile' (line 388)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 0), 'fromfile', fromfile_7831)

# Assigning a Attribute to a Name (line 389):

# Assigning a Attribute to a Name (line 389):
# Getting the type of 'multiarray' (line 389)
multiarray_7832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 13), 'multiarray')
# Obtaining the member 'frombuffer' of a type (line 389)
frombuffer_7833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 13), multiarray_7832, 'frombuffer')
# Assigning a type to the variable 'frombuffer' (line 389)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 0), 'frombuffer', frombuffer_7833)

# Assigning a Attribute to a Name (line 390):

# Assigning a Attribute to a Name (line 390):
# Getting the type of 'multiarray' (line 390)
multiarray_7834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 16), 'multiarray')
# Obtaining the member 'shares_memory' of a type (line 390)
shares_memory_7835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 16), multiarray_7834, 'shares_memory')
# Assigning a type to the variable 'shares_memory' (line 390)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 0), 'shares_memory', shares_memory_7835)

# Assigning a Attribute to a Name (line 391):

# Assigning a Attribute to a Name (line 391):
# Getting the type of 'multiarray' (line 391)
multiarray_7836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 19), 'multiarray')
# Obtaining the member 'may_share_memory' of a type (line 391)
may_share_memory_7837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 19), multiarray_7836, 'may_share_memory')
# Assigning a type to the variable 'may_share_memory' (line 391)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 0), 'may_share_memory', may_share_memory_7837)



# Obtaining the type of the subscript
int_7838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 20), 'int')
# Getting the type of 'sys' (line 392)
sys_7839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 392)
version_info_7840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 3), sys_7839, 'version_info')
# Obtaining the member '__getitem__' of a type (line 392)
getitem___7841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 3), version_info_7840, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 392)
subscript_call_result_7842 = invoke(stypy.reporting.localization.Localization(__file__, 392, 3), getitem___7841, int_7838)

int_7843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 25), 'int')
# Applying the binary operator '<' (line 392)
result_lt_7844 = python_operator(stypy.reporting.localization.Localization(__file__, 392, 3), '<', subscript_call_result_7842, int_7843)

# Testing the type of an if condition (line 392)
if_condition_7845 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 392, 0), result_lt_7844)
# Assigning a type to the variable 'if_condition_7845' (line 392)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 0), 'if_condition_7845', if_condition_7845)
# SSA begins for if statement (line 392)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Attribute to a Name (line 393):

# Assigning a Attribute to a Name (line 393):
# Getting the type of 'multiarray' (line 393)
multiarray_7846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 16), 'multiarray')
# Obtaining the member 'newbuffer' of a type (line 393)
newbuffer_7847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 16), multiarray_7846, 'newbuffer')
# Assigning a type to the variable 'newbuffer' (line 393)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 4), 'newbuffer', newbuffer_7847)

# Assigning a Attribute to a Name (line 394):

# Assigning a Attribute to a Name (line 394):
# Getting the type of 'multiarray' (line 394)
multiarray_7848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 16), 'multiarray')
# Obtaining the member 'getbuffer' of a type (line 394)
getbuffer_7849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 16), multiarray_7848, 'getbuffer')
# Assigning a type to the variable 'getbuffer' (line 394)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 4), 'getbuffer', getbuffer_7849)
# SSA join for if statement (line 392)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Attribute to a Name (line 395):

# Assigning a Attribute to a Name (line 395):
# Getting the type of 'multiarray' (line 395)
multiarray_7850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 15), 'multiarray')
# Obtaining the member 'int_asbuffer' of a type (line 395)
int_asbuffer_7851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 395, 15), multiarray_7850, 'int_asbuffer')
# Assigning a type to the variable 'int_asbuffer' (line 395)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 0), 'int_asbuffer', int_asbuffer_7851)

# Assigning a Attribute to a Name (line 396):

# Assigning a Attribute to a Name (line 396):
# Getting the type of 'multiarray' (line 396)
multiarray_7852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'multiarray')
# Obtaining the member 'where' of a type (line 396)
where_7853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 8), multiarray_7852, 'where')
# Assigning a type to the variable 'where' (line 396)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 0), 'where', where_7853)

# Assigning a Attribute to a Name (line 397):

# Assigning a Attribute to a Name (line 397):
# Getting the type of 'multiarray' (line 397)
multiarray_7854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 14), 'multiarray')
# Obtaining the member 'concatenate' of a type (line 397)
concatenate_7855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 14), multiarray_7854, 'concatenate')
# Assigning a type to the variable 'concatenate' (line 397)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 0), 'concatenate', concatenate_7855)

# Assigning a Attribute to a Name (line 398):

# Assigning a Attribute to a Name (line 398):
# Getting the type of 'multiarray' (line 398)
multiarray_7856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 23), 'multiarray')
# Obtaining the member '_fastCopyAndTranspose' of a type (line 398)
_fastCopyAndTranspose_7857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 23), multiarray_7856, '_fastCopyAndTranspose')
# Assigning a type to the variable 'fastCopyAndTranspose' (line 398)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 0), 'fastCopyAndTranspose', _fastCopyAndTranspose_7857)

# Assigning a Attribute to a Name (line 399):

# Assigning a Attribute to a Name (line 399):
# Getting the type of 'multiarray' (line 399)
multiarray_7858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 18), 'multiarray')
# Obtaining the member 'set_numeric_ops' of a type (line 399)
set_numeric_ops_7859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 18), multiarray_7858, 'set_numeric_ops')
# Assigning a type to the variable 'set_numeric_ops' (line 399)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 0), 'set_numeric_ops', set_numeric_ops_7859)

# Assigning a Attribute to a Name (line 400):

# Assigning a Attribute to a Name (line 400):
# Getting the type of 'multiarray' (line 400)
multiarray_7860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 11), 'multiarray')
# Obtaining the member 'can_cast' of a type (line 400)
can_cast_7861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 11), multiarray_7860, 'can_cast')
# Assigning a type to the variable 'can_cast' (line 400)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 0), 'can_cast', can_cast_7861)

# Assigning a Attribute to a Name (line 401):

# Assigning a Attribute to a Name (line 401):
# Getting the type of 'multiarray' (line 401)
multiarray_7862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 16), 'multiarray')
# Obtaining the member 'promote_types' of a type (line 401)
promote_types_7863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 16), multiarray_7862, 'promote_types')
# Assigning a type to the variable 'promote_types' (line 401)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 0), 'promote_types', promote_types_7863)

# Assigning a Attribute to a Name (line 402):

# Assigning a Attribute to a Name (line 402):
# Getting the type of 'multiarray' (line 402)
multiarray_7864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 18), 'multiarray')
# Obtaining the member 'min_scalar_type' of a type (line 402)
min_scalar_type_7865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 18), multiarray_7864, 'min_scalar_type')
# Assigning a type to the variable 'min_scalar_type' (line 402)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 0), 'min_scalar_type', min_scalar_type_7865)

# Assigning a Attribute to a Name (line 403):

# Assigning a Attribute to a Name (line 403):
# Getting the type of 'multiarray' (line 403)
multiarray_7866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 14), 'multiarray')
# Obtaining the member 'result_type' of a type (line 403)
result_type_7867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 14), multiarray_7866, 'result_type')
# Assigning a type to the variable 'result_type' (line 403)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 0), 'result_type', result_type_7867)

# Assigning a Attribute to a Name (line 404):

# Assigning a Attribute to a Name (line 404):
# Getting the type of 'multiarray' (line 404)
multiarray_7868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 10), 'multiarray')
# Obtaining the member 'lexsort' of a type (line 404)
lexsort_7869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 10), multiarray_7868, 'lexsort')
# Assigning a type to the variable 'lexsort' (line 404)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 0), 'lexsort', lexsort_7869)

# Assigning a Attribute to a Name (line 405):

# Assigning a Attribute to a Name (line 405):
# Getting the type of 'multiarray' (line 405)
multiarray_7870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 21), 'multiarray')
# Obtaining the member 'compare_chararrays' of a type (line 405)
compare_chararrays_7871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 21), multiarray_7870, 'compare_chararrays')
# Assigning a type to the variable 'compare_chararrays' (line 405)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 0), 'compare_chararrays', compare_chararrays_7871)

# Assigning a Attribute to a Name (line 406):

# Assigning a Attribute to a Name (line 406):
# Getting the type of 'multiarray' (line 406)
multiarray_7872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 10), 'multiarray')
# Obtaining the member 'putmask' of a type (line 406)
putmask_7873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 10), multiarray_7872, 'putmask')
# Assigning a type to the variable 'putmask' (line 406)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 0), 'putmask', putmask_7873)

# Assigning a Attribute to a Name (line 407):

# Assigning a Attribute to a Name (line 407):
# Getting the type of 'multiarray' (line 407)
multiarray_7874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 9), 'multiarray')
# Obtaining the member 'einsum' of a type (line 407)
einsum_7875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 407, 9), multiarray_7874, 'einsum')
# Assigning a type to the variable 'einsum' (line 407)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 407, 0), 'einsum', einsum_7875)

# Assigning a Attribute to a Name (line 408):

# Assigning a Attribute to a Name (line 408):
# Getting the type of 'multiarray' (line 408)
multiarray_7876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 6), 'multiarray')
# Obtaining the member 'dot' of a type (line 408)
dot_7877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 6), multiarray_7876, 'dot')
# Assigning a type to the variable 'dot' (line 408)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 0), 'dot', dot_7877)

# Assigning a Attribute to a Name (line 409):

# Assigning a Attribute to a Name (line 409):
# Getting the type of 'multiarray' (line 409)
multiarray_7878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'multiarray')
# Obtaining the member 'inner' of a type (line 409)
inner_7879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 8), multiarray_7878, 'inner')
# Assigning a type to the variable 'inner' (line 409)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 0), 'inner', inner_7879)

# Assigning a Attribute to a Name (line 410):

# Assigning a Attribute to a Name (line 410):
# Getting the type of 'multiarray' (line 410)
multiarray_7880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 7), 'multiarray')
# Obtaining the member 'vdot' of a type (line 410)
vdot_7881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 7), multiarray_7880, 'vdot')
# Assigning a type to the variable 'vdot' (line 410)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 0), 'vdot', vdot_7881)

# Assigning a Attribute to a Name (line 411):

# Assigning a Attribute to a Name (line 411):
# Getting the type of 'multiarray' (line 411)
multiarray_7882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 9), 'multiarray')
# Obtaining the member 'matmul' of a type (line 411)
matmul_7883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 9), multiarray_7882, 'matmul')
# Assigning a type to the variable 'matmul' (line 411)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 0), 'matmul', matmul_7883)

@norecursion
def asarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 414)
    None_7884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 21), 'None')
    # Getting the type of 'None' (line 414)
    None_7885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 33), 'None')
    defaults = [None_7884, None_7885]
    # Create a new context for function 'asarray'
    module_type_store = module_type_store.open_function_context('asarray', 414, 0, False)
    
    # Passed parameters checking function
    asarray.stypy_localization = localization
    asarray.stypy_type_of_self = None
    asarray.stypy_type_store = module_type_store
    asarray.stypy_function_name = 'asarray'
    asarray.stypy_param_names_list = ['a', 'dtype', 'order']
    asarray.stypy_varargs_param_name = None
    asarray.stypy_kwargs_param_name = None
    asarray.stypy_call_defaults = defaults
    asarray.stypy_call_varargs = varargs
    asarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'asarray', ['a', 'dtype', 'order'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'asarray', localization, ['a', 'dtype', 'order'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'asarray(...)' code ##################

    str_7886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, (-1)), 'str', "Convert the input to an array.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to an array.  This\n        includes lists, lists of tuples, tuples, tuples of tuples, tuples\n        of lists and ndarrays.\n    dtype : data-type, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major (C-style) or\n        column-major (Fortran-style) memory representation.\n        Defaults to 'C'.\n\n    Returns\n    -------\n    out : ndarray\n        Array interpretation of `a`.  No copy is performed if the input\n        is already an ndarray.  If `a` is a subclass of ndarray, a base\n        class ndarray is returned.\n\n    See Also\n    --------\n    asanyarray : Similar function which passes through subclasses.\n    ascontiguousarray : Convert input to a contiguous array.\n    asfarray : Convert input to a floating point ndarray.\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    asarray_chkfinite : Similar function which checks input for NaNs and Infs.\n    fromiter : Create an array from an iterator.\n    fromfunction : Construct an array by executing a function on grid\n                   positions.\n\n    Examples\n    --------\n    Convert a list into an array:\n\n    >>> a = [1, 2]\n    >>> np.asarray(a)\n    array([1, 2])\n\n    Existing arrays are not copied:\n\n    >>> a = np.array([1, 2])\n    >>> np.asarray(a) is a\n    True\n\n    If `dtype` is set, array is copied only if dtype does not match:\n\n    >>> a = np.array([1, 2], dtype=np.float32)\n    >>> np.asarray(a, dtype=np.float32) is a\n    True\n    >>> np.asarray(a, dtype=np.float64) is a\n    False\n\n    Contrary to `asanyarray`, ndarray subclasses are not passed through:\n\n    >>> issubclass(np.matrix, np.ndarray)\n    True\n    >>> a = np.matrix([[1, 2]])\n    >>> np.asarray(a) is a\n    False\n    >>> np.asanyarray(a) is a\n    True\n\n    ")
    
    # Call to array(...): (line 482)
    # Processing the call arguments (line 482)
    # Getting the type of 'a' (line 482)
    a_7888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 17), 'a', False)
    # Getting the type of 'dtype' (line 482)
    dtype_7889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 20), 'dtype', False)
    # Processing the call keyword arguments (line 482)
    # Getting the type of 'False' (line 482)
    False_7890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 32), 'False', False)
    keyword_7891 = False_7890
    # Getting the type of 'order' (line 482)
    order_7892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 45), 'order', False)
    keyword_7893 = order_7892
    kwargs_7894 = {'copy': keyword_7891, 'order': keyword_7893}
    # Getting the type of 'array' (line 482)
    array_7887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 11), 'array', False)
    # Calling array(args, kwargs) (line 482)
    array_call_result_7895 = invoke(stypy.reporting.localization.Localization(__file__, 482, 11), array_7887, *[a_7888, dtype_7889], **kwargs_7894)
    
    # Assigning a type to the variable 'stypy_return_type' (line 482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'stypy_return_type', array_call_result_7895)
    
    # ################# End of 'asarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'asarray' in the type store
    # Getting the type of 'stypy_return_type' (line 414)
    stypy_return_type_7896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_7896)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'asarray'
    return stypy_return_type_7896

# Assigning a type to the variable 'asarray' (line 414)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 0), 'asarray', asarray)

@norecursion
def asanyarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 484)
    None_7897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 24), 'None')
    # Getting the type of 'None' (line 484)
    None_7898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 36), 'None')
    defaults = [None_7897, None_7898]
    # Create a new context for function 'asanyarray'
    module_type_store = module_type_store.open_function_context('asanyarray', 484, 0, False)
    
    # Passed parameters checking function
    asanyarray.stypy_localization = localization
    asanyarray.stypy_type_of_self = None
    asanyarray.stypy_type_store = module_type_store
    asanyarray.stypy_function_name = 'asanyarray'
    asanyarray.stypy_param_names_list = ['a', 'dtype', 'order']
    asanyarray.stypy_varargs_param_name = None
    asanyarray.stypy_kwargs_param_name = None
    asanyarray.stypy_call_defaults = defaults
    asanyarray.stypy_call_varargs = varargs
    asanyarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'asanyarray', ['a', 'dtype', 'order'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'asanyarray', localization, ['a', 'dtype', 'order'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'asanyarray(...)' code ##################

    str_7899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, (-1)), 'str', "Convert the input to an ndarray, but pass ndarray subclasses through.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to an array.  This\n        includes scalars, lists, lists of tuples, tuples, tuples of tuples,\n        tuples of lists, and ndarrays.\n    dtype : data-type, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major (C-style) or column-major\n        (Fortran-style) memory representation.  Defaults to 'C'.\n\n    Returns\n    -------\n    out : ndarray or an ndarray subclass\n        Array interpretation of `a`.  If `a` is an ndarray or a subclass\n        of ndarray, it is returned as-is and no copy is performed.\n\n    See Also\n    --------\n    asarray : Similar function which always returns ndarrays.\n    ascontiguousarray : Convert input to a contiguous array.\n    asfarray : Convert input to a floating point ndarray.\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    asarray_chkfinite : Similar function which checks input for NaNs and\n                        Infs.\n    fromiter : Create an array from an iterator.\n    fromfunction : Construct an array by executing a function on grid\n                   positions.\n\n    Examples\n    --------\n    Convert a list into an array:\n\n    >>> a = [1, 2]\n    >>> np.asanyarray(a)\n    array([1, 2])\n\n    Instances of `ndarray` subclasses are passed through as-is:\n\n    >>> a = np.matrix([1, 2])\n    >>> np.asanyarray(a) is a\n    True\n\n    ")
    
    # Call to array(...): (line 533)
    # Processing the call arguments (line 533)
    # Getting the type of 'a' (line 533)
    a_7901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 17), 'a', False)
    # Getting the type of 'dtype' (line 533)
    dtype_7902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 20), 'dtype', False)
    # Processing the call keyword arguments (line 533)
    # Getting the type of 'False' (line 533)
    False_7903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 32), 'False', False)
    keyword_7904 = False_7903
    # Getting the type of 'order' (line 533)
    order_7905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 45), 'order', False)
    keyword_7906 = order_7905
    # Getting the type of 'True' (line 533)
    True_7907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 58), 'True', False)
    keyword_7908 = True_7907
    kwargs_7909 = {'subok': keyword_7908, 'copy': keyword_7904, 'order': keyword_7906}
    # Getting the type of 'array' (line 533)
    array_7900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 11), 'array', False)
    # Calling array(args, kwargs) (line 533)
    array_call_result_7910 = invoke(stypy.reporting.localization.Localization(__file__, 533, 11), array_7900, *[a_7901, dtype_7902], **kwargs_7909)
    
    # Assigning a type to the variable 'stypy_return_type' (line 533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 4), 'stypy_return_type', array_call_result_7910)
    
    # ################# End of 'asanyarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'asanyarray' in the type store
    # Getting the type of 'stypy_return_type' (line 484)
    stypy_return_type_7911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_7911)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'asanyarray'
    return stypy_return_type_7911

# Assigning a type to the variable 'asanyarray' (line 484)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 0), 'asanyarray', asanyarray)

@norecursion
def ascontiguousarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 535)
    None_7912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 31), 'None')
    defaults = [None_7912]
    # Create a new context for function 'ascontiguousarray'
    module_type_store = module_type_store.open_function_context('ascontiguousarray', 535, 0, False)
    
    # Passed parameters checking function
    ascontiguousarray.stypy_localization = localization
    ascontiguousarray.stypy_type_of_self = None
    ascontiguousarray.stypy_type_store = module_type_store
    ascontiguousarray.stypy_function_name = 'ascontiguousarray'
    ascontiguousarray.stypy_param_names_list = ['a', 'dtype']
    ascontiguousarray.stypy_varargs_param_name = None
    ascontiguousarray.stypy_kwargs_param_name = None
    ascontiguousarray.stypy_call_defaults = defaults
    ascontiguousarray.stypy_call_varargs = varargs
    ascontiguousarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ascontiguousarray', ['a', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ascontiguousarray', localization, ['a', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ascontiguousarray(...)' code ##################

    str_7913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, (-1)), 'str', "\n    Return a contiguous array in memory (C order).\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    dtype : str or dtype object, optional\n        Data-type of returned array.\n\n    Returns\n    -------\n    out : ndarray\n        Contiguous array of same shape and content as `a`, with type `dtype`\n        if specified.\n\n    See Also\n    --------\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    require : Return an ndarray that satisfies requirements.\n    ndarray.flags : Information about the memory layout of the array.\n\n    Examples\n    --------\n    >>> x = np.arange(6).reshape(2,3)\n    >>> np.ascontiguousarray(x, dtype=np.float32)\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4.,  5.]], dtype=float32)\n    >>> x.flags['C_CONTIGUOUS']\n    True\n\n    ")
    
    # Call to array(...): (line 569)
    # Processing the call arguments (line 569)
    # Getting the type of 'a' (line 569)
    a_7915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 17), 'a', False)
    # Getting the type of 'dtype' (line 569)
    dtype_7916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 20), 'dtype', False)
    # Processing the call keyword arguments (line 569)
    # Getting the type of 'False' (line 569)
    False_7917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 32), 'False', False)
    keyword_7918 = False_7917
    str_7919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 45), 'str', 'C')
    keyword_7920 = str_7919
    int_7921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 56), 'int')
    keyword_7922 = int_7921
    kwargs_7923 = {'copy': keyword_7918, 'order': keyword_7920, 'ndmin': keyword_7922}
    # Getting the type of 'array' (line 569)
    array_7914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 11), 'array', False)
    # Calling array(args, kwargs) (line 569)
    array_call_result_7924 = invoke(stypy.reporting.localization.Localization(__file__, 569, 11), array_7914, *[a_7915, dtype_7916], **kwargs_7923)
    
    # Assigning a type to the variable 'stypy_return_type' (line 569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 4), 'stypy_return_type', array_call_result_7924)
    
    # ################# End of 'ascontiguousarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ascontiguousarray' in the type store
    # Getting the type of 'stypy_return_type' (line 535)
    stypy_return_type_7925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_7925)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ascontiguousarray'
    return stypy_return_type_7925

# Assigning a type to the variable 'ascontiguousarray' (line 535)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 0), 'ascontiguousarray', ascontiguousarray)

@norecursion
def asfortranarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 571)
    None_7926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 28), 'None')
    defaults = [None_7926]
    # Create a new context for function 'asfortranarray'
    module_type_store = module_type_store.open_function_context('asfortranarray', 571, 0, False)
    
    # Passed parameters checking function
    asfortranarray.stypy_localization = localization
    asfortranarray.stypy_type_of_self = None
    asfortranarray.stypy_type_store = module_type_store
    asfortranarray.stypy_function_name = 'asfortranarray'
    asfortranarray.stypy_param_names_list = ['a', 'dtype']
    asfortranarray.stypy_varargs_param_name = None
    asfortranarray.stypy_kwargs_param_name = None
    asfortranarray.stypy_call_defaults = defaults
    asfortranarray.stypy_call_varargs = varargs
    asfortranarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'asfortranarray', ['a', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'asfortranarray', localization, ['a', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'asfortranarray(...)' code ##################

    str_7927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, (-1)), 'str', "\n    Return an array laid out in Fortran order in memory.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    dtype : str or dtype object, optional\n        By default, the data-type is inferred from the input data.\n\n    Returns\n    -------\n    out : ndarray\n        The input `a` in Fortran, or column-major, order.\n\n    See Also\n    --------\n    ascontiguousarray : Convert input to a contiguous (C order) array.\n    asanyarray : Convert input to an ndarray with either row or\n        column-major memory order.\n    require : Return an ndarray that satisfies requirements.\n    ndarray.flags : Information about the memory layout of the array.\n\n    Examples\n    --------\n    >>> x = np.arange(6).reshape(2,3)\n    >>> y = np.asfortranarray(x)\n    >>> x.flags['F_CONTIGUOUS']\n    False\n    >>> y.flags['F_CONTIGUOUS']\n    True\n\n    ")
    
    # Call to array(...): (line 605)
    # Processing the call arguments (line 605)
    # Getting the type of 'a' (line 605)
    a_7929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 17), 'a', False)
    # Getting the type of 'dtype' (line 605)
    dtype_7930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 20), 'dtype', False)
    # Processing the call keyword arguments (line 605)
    # Getting the type of 'False' (line 605)
    False_7931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 32), 'False', False)
    keyword_7932 = False_7931
    str_7933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 45), 'str', 'F')
    keyword_7934 = str_7933
    int_7935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 56), 'int')
    keyword_7936 = int_7935
    kwargs_7937 = {'copy': keyword_7932, 'order': keyword_7934, 'ndmin': keyword_7936}
    # Getting the type of 'array' (line 605)
    array_7928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 11), 'array', False)
    # Calling array(args, kwargs) (line 605)
    array_call_result_7938 = invoke(stypy.reporting.localization.Localization(__file__, 605, 11), array_7928, *[a_7929, dtype_7930], **kwargs_7937)
    
    # Assigning a type to the variable 'stypy_return_type' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 4), 'stypy_return_type', array_call_result_7938)
    
    # ################# End of 'asfortranarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'asfortranarray' in the type store
    # Getting the type of 'stypy_return_type' (line 571)
    stypy_return_type_7939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_7939)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'asfortranarray'
    return stypy_return_type_7939

# Assigning a type to the variable 'asfortranarray' (line 571)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 0), 'asfortranarray', asfortranarray)

@norecursion
def require(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 607)
    None_7940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 21), 'None')
    # Getting the type of 'None' (line 607)
    None_7941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 40), 'None')
    defaults = [None_7940, None_7941]
    # Create a new context for function 'require'
    module_type_store = module_type_store.open_function_context('require', 607, 0, False)
    
    # Passed parameters checking function
    require.stypy_localization = localization
    require.stypy_type_of_self = None
    require.stypy_type_store = module_type_store
    require.stypy_function_name = 'require'
    require.stypy_param_names_list = ['a', 'dtype', 'requirements']
    require.stypy_varargs_param_name = None
    require.stypy_kwargs_param_name = None
    require.stypy_call_defaults = defaults
    require.stypy_call_varargs = varargs
    require.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'require', ['a', 'dtype', 'requirements'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'require', localization, ['a', 'dtype', 'requirements'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'require(...)' code ##################

    str_7942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, (-1)), 'str', "\n    Return an ndarray of the provided type that satisfies requirements.\n\n    This function is useful to be sure that an array with the correct flags\n    is returned for passing to compiled code (perhaps through ctypes).\n\n    Parameters\n    ----------\n    a : array_like\n       The object to be converted to a type-and-requirement-satisfying array.\n    dtype : data-type\n       The required data-type. If None preserve the current dtype. If your\n       application requires the data to be in native byteorder, include\n       a byteorder specification as a part of the dtype specification.\n    requirements : str or list of str\n       The requirements list can be any of the following\n\n       * 'F_CONTIGUOUS' ('F') - ensure a Fortran-contiguous array\n       * 'C_CONTIGUOUS' ('C') - ensure a C-contiguous array\n       * 'ALIGNED' ('A')      - ensure a data-type aligned array\n       * 'WRITEABLE' ('W')    - ensure a writable array\n       * 'OWNDATA' ('O')      - ensure an array that owns its own data\n       * 'ENSUREARRAY', ('E') - ensure a base array, instead of a subclass\n\n    See Also\n    --------\n    asarray : Convert input to an ndarray.\n    asanyarray : Convert to an ndarray, but pass through ndarray subclasses.\n    ascontiguousarray : Convert input to a contiguous array.\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    ndarray.flags : Information about the memory layout of the array.\n\n    Notes\n    -----\n    The returned array will be guaranteed to have the listed requirements\n    by making a copy if needed.\n\n    Examples\n    --------\n    >>> x = np.arange(6).reshape(2,3)\n    >>> x.flags\n      C_CONTIGUOUS : True\n      F_CONTIGUOUS : False\n      OWNDATA : False\n      WRITEABLE : True\n      ALIGNED : True\n      UPDATEIFCOPY : False\n\n    >>> y = np.require(x, dtype=np.float32, requirements=['A', 'O', 'W', 'F'])\n    >>> y.flags\n      C_CONTIGUOUS : False\n      F_CONTIGUOUS : True\n      OWNDATA : True\n      WRITEABLE : True\n      ALIGNED : True\n      UPDATEIFCOPY : False\n\n    ")
    
    # Assigning a Dict to a Name (line 667):
    
    # Assigning a Dict to a Name (line 667):
    
    # Obtaining an instance of the builtin type 'dict' (line 667)
    dict_7943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 21), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 667)
    # Adding element type (key, value) (line 667)
    str_7944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 22), 'str', 'C')
    str_7945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 26), 'str', 'C')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7944, str_7945))
    # Adding element type (key, value) (line 667)
    str_7946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 31), 'str', 'C_CONTIGUOUS')
    str_7947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 46), 'str', 'C')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7946, str_7947))
    # Adding element type (key, value) (line 667)
    str_7948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 51), 'str', 'CONTIGUOUS')
    str_7949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 64), 'str', 'C')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7948, str_7949))
    # Adding element type (key, value) (line 667)
    str_7950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 22), 'str', 'F')
    str_7951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 26), 'str', 'F')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7950, str_7951))
    # Adding element type (key, value) (line 667)
    str_7952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 31), 'str', 'F_CONTIGUOUS')
    str_7953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 46), 'str', 'F')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7952, str_7953))
    # Adding element type (key, value) (line 667)
    str_7954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 51), 'str', 'FORTRAN')
    str_7955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 61), 'str', 'F')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7954, str_7955))
    # Adding element type (key, value) (line 667)
    str_7956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 22), 'str', 'A')
    str_7957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 26), 'str', 'A')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7956, str_7957))
    # Adding element type (key, value) (line 667)
    str_7958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 31), 'str', 'ALIGNED')
    str_7959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 41), 'str', 'A')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7958, str_7959))
    # Adding element type (key, value) (line 667)
    str_7960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 22), 'str', 'W')
    str_7961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 26), 'str', 'W')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7960, str_7961))
    # Adding element type (key, value) (line 667)
    str_7962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 31), 'str', 'WRITEABLE')
    str_7963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 43), 'str', 'W')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7962, str_7963))
    # Adding element type (key, value) (line 667)
    str_7964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 22), 'str', 'O')
    str_7965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 26), 'str', 'O')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7964, str_7965))
    # Adding element type (key, value) (line 667)
    str_7966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 31), 'str', 'OWNDATA')
    str_7967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 41), 'str', 'O')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7966, str_7967))
    # Adding element type (key, value) (line 667)
    str_7968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 22), 'str', 'E')
    str_7969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 26), 'str', 'E')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7968, str_7969))
    # Adding element type (key, value) (line 667)
    str_7970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 31), 'str', 'ENSUREARRAY')
    str_7971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 45), 'str', 'E')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 21), dict_7943, (str_7970, str_7971))
    
    # Assigning a type to the variable 'possible_flags' (line 667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 4), 'possible_flags', dict_7943)
    
    
    # Getting the type of 'requirements' (line 673)
    requirements_7972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 11), 'requirements')
    # Applying the 'not' unary operator (line 673)
    result_not__7973 = python_operator(stypy.reporting.localization.Localization(__file__, 673, 7), 'not', requirements_7972)
    
    # Testing the type of an if condition (line 673)
    if_condition_7974 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 673, 4), result_not__7973)
    # Assigning a type to the variable 'if_condition_7974' (line 673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 4), 'if_condition_7974', if_condition_7974)
    # SSA begins for if statement (line 673)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to asanyarray(...): (line 674)
    # Processing the call arguments (line 674)
    # Getting the type of 'a' (line 674)
    a_7976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 26), 'a', False)
    # Processing the call keyword arguments (line 674)
    # Getting the type of 'dtype' (line 674)
    dtype_7977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 35), 'dtype', False)
    keyword_7978 = dtype_7977
    kwargs_7979 = {'dtype': keyword_7978}
    # Getting the type of 'asanyarray' (line 674)
    asanyarray_7975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 15), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 674)
    asanyarray_call_result_7980 = invoke(stypy.reporting.localization.Localization(__file__, 674, 15), asanyarray_7975, *[a_7976], **kwargs_7979)
    
    # Assigning a type to the variable 'stypy_return_type' (line 674)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'stypy_return_type', asanyarray_call_result_7980)
    # SSA branch for the else part of an if statement (line 673)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 676):
    
    # Assigning a Call to a Name (line 676):
    
    # Call to set(...): (line 676)
    # Processing the call arguments (line 676)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 676, 27, True)
    # Calculating comprehension expression
    # Getting the type of 'requirements' (line 676)
    requirements_7989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 62), 'requirements', False)
    comprehension_7990 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 676, 27), requirements_7989)
    # Assigning a type to the variable 'x' (line 676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 27), 'x', comprehension_7990)
    
    # Obtaining the type of the subscript
    
    # Call to upper(...): (line 676)
    # Processing the call keyword arguments (line 676)
    kwargs_7984 = {}
    # Getting the type of 'x' (line 676)
    x_7982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 42), 'x', False)
    # Obtaining the member 'upper' of a type (line 676)
    upper_7983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 42), x_7982, 'upper')
    # Calling upper(args, kwargs) (line 676)
    upper_call_result_7985 = invoke(stypy.reporting.localization.Localization(__file__, 676, 42), upper_7983, *[], **kwargs_7984)
    
    # Getting the type of 'possible_flags' (line 676)
    possible_flags_7986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 27), 'possible_flags', False)
    # Obtaining the member '__getitem__' of a type (line 676)
    getitem___7987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 27), possible_flags_7986, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 676)
    subscript_call_result_7988 = invoke(stypy.reporting.localization.Localization(__file__, 676, 27), getitem___7987, upper_call_result_7985)
    
    list_7991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 27), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 676, 27), list_7991, subscript_call_result_7988)
    # Processing the call keyword arguments (line 676)
    kwargs_7992 = {}
    # Getting the type of 'set' (line 676)
    set_7981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 23), 'set', False)
    # Calling set(args, kwargs) (line 676)
    set_call_result_7993 = invoke(stypy.reporting.localization.Localization(__file__, 676, 23), set_7981, *[list_7991], **kwargs_7992)
    
    # Assigning a type to the variable 'requirements' (line 676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 8), 'requirements', set_call_result_7993)
    # SSA join for if statement (line 673)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    str_7994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 7), 'str', 'E')
    # Getting the type of 'requirements' (line 678)
    requirements_7995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 14), 'requirements')
    # Applying the binary operator 'in' (line 678)
    result_contains_7996 = python_operator(stypy.reporting.localization.Localization(__file__, 678, 7), 'in', str_7994, requirements_7995)
    
    # Testing the type of an if condition (line 678)
    if_condition_7997 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 678, 4), result_contains_7996)
    # Assigning a type to the variable 'if_condition_7997' (line 678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 4), 'if_condition_7997', if_condition_7997)
    # SSA begins for if statement (line 678)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to remove(...): (line 679)
    # Processing the call arguments (line 679)
    str_8000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 28), 'str', 'E')
    # Processing the call keyword arguments (line 679)
    kwargs_8001 = {}
    # Getting the type of 'requirements' (line 679)
    requirements_7998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'requirements', False)
    # Obtaining the member 'remove' of a type (line 679)
    remove_7999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 8), requirements_7998, 'remove')
    # Calling remove(args, kwargs) (line 679)
    remove_call_result_8002 = invoke(stypy.reporting.localization.Localization(__file__, 679, 8), remove_7999, *[str_8000], **kwargs_8001)
    
    
    # Assigning a Name to a Name (line 680):
    
    # Assigning a Name to a Name (line 680):
    # Getting the type of 'False' (line 680)
    False_8003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 16), 'False')
    # Assigning a type to the variable 'subok' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'subok', False_8003)
    # SSA branch for the else part of an if statement (line 678)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 682):
    
    # Assigning a Name to a Name (line 682):
    # Getting the type of 'True' (line 682)
    True_8004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 16), 'True')
    # Assigning a type to the variable 'subok' (line 682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'subok', True_8004)
    # SSA join for if statement (line 678)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Str to a Name (line 684):
    
    # Assigning a Str to a Name (line 684):
    str_8005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, 12), 'str', 'A')
    # Assigning a type to the variable 'order' (line 684)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 4), 'order', str_8005)
    
    
    # Getting the type of 'requirements' (line 685)
    requirements_8006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 7), 'requirements')
    
    # Call to set(...): (line 685)
    # Processing the call arguments (line 685)
    
    # Obtaining an instance of the builtin type 'list' (line 685)
    list_8008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 685)
    # Adding element type (line 685)
    str_8009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 28), 'str', 'C')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 685, 27), list_8008, str_8009)
    # Adding element type (line 685)
    str_8010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 33), 'str', 'F')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 685, 27), list_8008, str_8010)
    
    # Processing the call keyword arguments (line 685)
    kwargs_8011 = {}
    # Getting the type of 'set' (line 685)
    set_8007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 23), 'set', False)
    # Calling set(args, kwargs) (line 685)
    set_call_result_8012 = invoke(stypy.reporting.localization.Localization(__file__, 685, 23), set_8007, *[list_8008], **kwargs_8011)
    
    # Applying the binary operator '>=' (line 685)
    result_ge_8013 = python_operator(stypy.reporting.localization.Localization(__file__, 685, 7), '>=', requirements_8006, set_call_result_8012)
    
    # Testing the type of an if condition (line 685)
    if_condition_8014 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 685, 4), result_ge_8013)
    # Assigning a type to the variable 'if_condition_8014' (line 685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 4), 'if_condition_8014', if_condition_8014)
    # SSA begins for if statement (line 685)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 686)
    # Processing the call arguments (line 686)
    str_8016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 25), 'str', 'Cannot specify both "C" and "F" order')
    # Processing the call keyword arguments (line 686)
    kwargs_8017 = {}
    # Getting the type of 'ValueError' (line 686)
    ValueError_8015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 686)
    ValueError_call_result_8018 = invoke(stypy.reporting.localization.Localization(__file__, 686, 14), ValueError_8015, *[str_8016], **kwargs_8017)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 686, 8), ValueError_call_result_8018, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 685)
    module_type_store.open_ssa_branch('else')
    
    
    str_8019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 9), 'str', 'F')
    # Getting the type of 'requirements' (line 687)
    requirements_8020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 16), 'requirements')
    # Applying the binary operator 'in' (line 687)
    result_contains_8021 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 9), 'in', str_8019, requirements_8020)
    
    # Testing the type of an if condition (line 687)
    if_condition_8022 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 687, 9), result_contains_8021)
    # Assigning a type to the variable 'if_condition_8022' (line 687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 9), 'if_condition_8022', if_condition_8022)
    # SSA begins for if statement (line 687)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 688):
    
    # Assigning a Str to a Name (line 688):
    str_8023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 16), 'str', 'F')
    # Assigning a type to the variable 'order' (line 688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 8), 'order', str_8023)
    
    # Call to remove(...): (line 689)
    # Processing the call arguments (line 689)
    str_8026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 28), 'str', 'F')
    # Processing the call keyword arguments (line 689)
    kwargs_8027 = {}
    # Getting the type of 'requirements' (line 689)
    requirements_8024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 8), 'requirements', False)
    # Obtaining the member 'remove' of a type (line 689)
    remove_8025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 8), requirements_8024, 'remove')
    # Calling remove(args, kwargs) (line 689)
    remove_call_result_8028 = invoke(stypy.reporting.localization.Localization(__file__, 689, 8), remove_8025, *[str_8026], **kwargs_8027)
    
    # SSA branch for the else part of an if statement (line 687)
    module_type_store.open_ssa_branch('else')
    
    
    str_8029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, 9), 'str', 'C')
    # Getting the type of 'requirements' (line 690)
    requirements_8030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 16), 'requirements')
    # Applying the binary operator 'in' (line 690)
    result_contains_8031 = python_operator(stypy.reporting.localization.Localization(__file__, 690, 9), 'in', str_8029, requirements_8030)
    
    # Testing the type of an if condition (line 690)
    if_condition_8032 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 690, 9), result_contains_8031)
    # Assigning a type to the variable 'if_condition_8032' (line 690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 9), 'if_condition_8032', if_condition_8032)
    # SSA begins for if statement (line 690)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 691):
    
    # Assigning a Str to a Name (line 691):
    str_8033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 691, 16), 'str', 'C')
    # Assigning a type to the variable 'order' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 8), 'order', str_8033)
    
    # Call to remove(...): (line 692)
    # Processing the call arguments (line 692)
    str_8036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 28), 'str', 'C')
    # Processing the call keyword arguments (line 692)
    kwargs_8037 = {}
    # Getting the type of 'requirements' (line 692)
    requirements_8034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 8), 'requirements', False)
    # Obtaining the member 'remove' of a type (line 692)
    remove_8035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 8), requirements_8034, 'remove')
    # Calling remove(args, kwargs) (line 692)
    remove_call_result_8038 = invoke(stypy.reporting.localization.Localization(__file__, 692, 8), remove_8035, *[str_8036], **kwargs_8037)
    
    # SSA join for if statement (line 690)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 687)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 685)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 694):
    
    # Assigning a Call to a Name (line 694):
    
    # Call to array(...): (line 694)
    # Processing the call arguments (line 694)
    # Getting the type of 'a' (line 694)
    a_8040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 16), 'a', False)
    # Processing the call keyword arguments (line 694)
    # Getting the type of 'dtype' (line 694)
    dtype_8041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 25), 'dtype', False)
    keyword_8042 = dtype_8041
    # Getting the type of 'order' (line 694)
    order_8043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 38), 'order', False)
    keyword_8044 = order_8043
    # Getting the type of 'False' (line 694)
    False_8045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 50), 'False', False)
    keyword_8046 = False_8045
    # Getting the type of 'subok' (line 694)
    subok_8047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 63), 'subok', False)
    keyword_8048 = subok_8047
    kwargs_8049 = {'dtype': keyword_8042, 'copy': keyword_8046, 'order': keyword_8044, 'subok': keyword_8048}
    # Getting the type of 'array' (line 694)
    array_8039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 10), 'array', False)
    # Calling array(args, kwargs) (line 694)
    array_call_result_8050 = invoke(stypy.reporting.localization.Localization(__file__, 694, 10), array_8039, *[a_8040], **kwargs_8049)
    
    # Assigning a type to the variable 'arr' (line 694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 4), 'arr', array_call_result_8050)
    
    # Getting the type of 'requirements' (line 696)
    requirements_8051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 16), 'requirements')
    # Testing the type of a for loop iterable (line 696)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 696, 4), requirements_8051)
    # Getting the type of the for loop variable (line 696)
    for_loop_var_8052 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 696, 4), requirements_8051)
    # Assigning a type to the variable 'prop' (line 696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 4), 'prop', for_loop_var_8052)
    # SSA begins for a for statement (line 696)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'prop' (line 697)
    prop_8053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 25), 'prop')
    # Getting the type of 'arr' (line 697)
    arr_8054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 15), 'arr')
    # Obtaining the member 'flags' of a type (line 697)
    flags_8055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 15), arr_8054, 'flags')
    # Obtaining the member '__getitem__' of a type (line 697)
    getitem___8056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 15), flags_8055, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 697)
    subscript_call_result_8057 = invoke(stypy.reporting.localization.Localization(__file__, 697, 15), getitem___8056, prop_8053)
    
    # Applying the 'not' unary operator (line 697)
    result_not__8058 = python_operator(stypy.reporting.localization.Localization(__file__, 697, 11), 'not', subscript_call_result_8057)
    
    # Testing the type of an if condition (line 697)
    if_condition_8059 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 697, 8), result_not__8058)
    # Assigning a type to the variable 'if_condition_8059' (line 697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'if_condition_8059', if_condition_8059)
    # SSA begins for if statement (line 697)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 698):
    
    # Assigning a Call to a Name (line 698):
    
    # Call to copy(...): (line 698)
    # Processing the call arguments (line 698)
    # Getting the type of 'order' (line 698)
    order_8062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 27), 'order', False)
    # Processing the call keyword arguments (line 698)
    kwargs_8063 = {}
    # Getting the type of 'arr' (line 698)
    arr_8060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 18), 'arr', False)
    # Obtaining the member 'copy' of a type (line 698)
    copy_8061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 18), arr_8060, 'copy')
    # Calling copy(args, kwargs) (line 698)
    copy_call_result_8064 = invoke(stypy.reporting.localization.Localization(__file__, 698, 18), copy_8061, *[order_8062], **kwargs_8063)
    
    # Assigning a type to the variable 'arr' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'arr', copy_call_result_8064)
    # SSA join for if statement (line 697)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'arr' (line 700)
    arr_8065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 11), 'arr')
    # Assigning a type to the variable 'stypy_return_type' (line 700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 4), 'stypy_return_type', arr_8065)
    
    # ################# End of 'require(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'require' in the type store
    # Getting the type of 'stypy_return_type' (line 607)
    stypy_return_type_8066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8066)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'require'
    return stypy_return_type_8066

# Assigning a type to the variable 'require' (line 607)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 0), 'require', require)

@norecursion
def isfortran(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'isfortran'
    module_type_store = module_type_store.open_function_context('isfortran', 702, 0, False)
    
    # Passed parameters checking function
    isfortran.stypy_localization = localization
    isfortran.stypy_type_of_self = None
    isfortran.stypy_type_store = module_type_store
    isfortran.stypy_function_name = 'isfortran'
    isfortran.stypy_param_names_list = ['a']
    isfortran.stypy_varargs_param_name = None
    isfortran.stypy_kwargs_param_name = None
    isfortran.stypy_call_defaults = defaults
    isfortran.stypy_call_varargs = varargs
    isfortran.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'isfortran', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'isfortran', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'isfortran(...)' code ##################

    str_8067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, (-1)), 'str', "\n    Returns True if the array is Fortran contiguous but *not* C contiguous.\n\n    This function is obsolete and, because of changes due to relaxed stride\n    checking, its return value for the same array may differ for versions\n    of Numpy >= 1.10 and previous versions. If you only want to check if an\n    array is Fortran contiguous use ``a.flags.f_contiguous`` instead.\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array.\n\n\n    Examples\n    --------\n\n    np.array allows to specify whether the array is written in C-contiguous\n    order (last index varies the fastest), or FORTRAN-contiguous order in\n    memory (first index varies the fastest).\n\n    >>> a = np.array([[1, 2, 3], [4, 5, 6]], order='C')\n    >>> a\n    array([[1, 2, 3],\n           [4, 5, 6]])\n    >>> np.isfortran(a)\n    False\n\n    >>> b = np.array([[1, 2, 3], [4, 5, 6]], order='FORTRAN')\n    >>> b\n    array([[1, 2, 3],\n           [4, 5, 6]])\n    >>> np.isfortran(b)\n    True\n\n\n    The transpose of a C-ordered array is a FORTRAN-ordered array.\n\n    >>> a = np.array([[1, 2, 3], [4, 5, 6]], order='C')\n    >>> a\n    array([[1, 2, 3],\n           [4, 5, 6]])\n    >>> np.isfortran(a)\n    False\n    >>> b = a.T\n    >>> b\n    array([[1, 4],\n           [2, 5],\n           [3, 6]])\n    >>> np.isfortran(b)\n    True\n\n    C-ordered arrays evaluate as False even if they are also FORTRAN-ordered.\n\n    >>> np.isfortran(np.array([1, 2], order='FORTRAN'))\n    False\n\n    ")
    # Getting the type of 'a' (line 761)
    a_8068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 11), 'a')
    # Obtaining the member 'flags' of a type (line 761)
    flags_8069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 11), a_8068, 'flags')
    # Obtaining the member 'fnc' of a type (line 761)
    fnc_8070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 11), flags_8069, 'fnc')
    # Assigning a type to the variable 'stypy_return_type' (line 761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 4), 'stypy_return_type', fnc_8070)
    
    # ################# End of 'isfortran(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'isfortran' in the type store
    # Getting the type of 'stypy_return_type' (line 702)
    stypy_return_type_8071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8071)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'isfortran'
    return stypy_return_type_8071

# Assigning a type to the variable 'isfortran' (line 702)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 702, 0), 'isfortran', isfortran)

@norecursion
def argwhere(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'argwhere'
    module_type_store = module_type_store.open_function_context('argwhere', 763, 0, False)
    
    # Passed parameters checking function
    argwhere.stypy_localization = localization
    argwhere.stypy_type_of_self = None
    argwhere.stypy_type_store = module_type_store
    argwhere.stypy_function_name = 'argwhere'
    argwhere.stypy_param_names_list = ['a']
    argwhere.stypy_varargs_param_name = None
    argwhere.stypy_kwargs_param_name = None
    argwhere.stypy_call_defaults = defaults
    argwhere.stypy_call_varargs = varargs
    argwhere.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'argwhere', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'argwhere', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'argwhere(...)' code ##################

    str_8072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, (-1)), 'str', '\n    Find the indices of array elements that are non-zero, grouped by element.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n\n    Returns\n    -------\n    index_array : ndarray\n        Indices of elements that are non-zero. Indices are grouped by element.\n\n    See Also\n    --------\n    where, nonzero\n\n    Notes\n    -----\n    ``np.argwhere(a)`` is the same as ``np.transpose(np.nonzero(a))``.\n\n    The output of ``argwhere`` is not suitable for indexing arrays.\n    For this purpose use ``where(a)`` instead.\n\n    Examples\n    --------\n    >>> x = np.arange(6).reshape(2,3)\n    >>> x\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.argwhere(x>1)\n    array([[0, 2],\n           [1, 0],\n           [1, 1],\n           [1, 2]])\n\n    ')
    
    # Call to transpose(...): (line 801)
    # Processing the call arguments (line 801)
    
    # Call to nonzero(...): (line 801)
    # Processing the call arguments (line 801)
    # Getting the type of 'a' (line 801)
    a_8075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 29), 'a', False)
    # Processing the call keyword arguments (line 801)
    kwargs_8076 = {}
    # Getting the type of 'nonzero' (line 801)
    nonzero_8074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 21), 'nonzero', False)
    # Calling nonzero(args, kwargs) (line 801)
    nonzero_call_result_8077 = invoke(stypy.reporting.localization.Localization(__file__, 801, 21), nonzero_8074, *[a_8075], **kwargs_8076)
    
    # Processing the call keyword arguments (line 801)
    kwargs_8078 = {}
    # Getting the type of 'transpose' (line 801)
    transpose_8073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 11), 'transpose', False)
    # Calling transpose(args, kwargs) (line 801)
    transpose_call_result_8079 = invoke(stypy.reporting.localization.Localization(__file__, 801, 11), transpose_8073, *[nonzero_call_result_8077], **kwargs_8078)
    
    # Assigning a type to the variable 'stypy_return_type' (line 801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 4), 'stypy_return_type', transpose_call_result_8079)
    
    # ################# End of 'argwhere(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'argwhere' in the type store
    # Getting the type of 'stypy_return_type' (line 763)
    stypy_return_type_8080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8080)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'argwhere'
    return stypy_return_type_8080

# Assigning a type to the variable 'argwhere' (line 763)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 0), 'argwhere', argwhere)

@norecursion
def flatnonzero(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'flatnonzero'
    module_type_store = module_type_store.open_function_context('flatnonzero', 803, 0, False)
    
    # Passed parameters checking function
    flatnonzero.stypy_localization = localization
    flatnonzero.stypy_type_of_self = None
    flatnonzero.stypy_type_store = module_type_store
    flatnonzero.stypy_function_name = 'flatnonzero'
    flatnonzero.stypy_param_names_list = ['a']
    flatnonzero.stypy_varargs_param_name = None
    flatnonzero.stypy_kwargs_param_name = None
    flatnonzero.stypy_call_defaults = defaults
    flatnonzero.stypy_call_varargs = varargs
    flatnonzero.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'flatnonzero', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'flatnonzero', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'flatnonzero(...)' code ##################

    str_8081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, (-1)), 'str', '\n    Return indices that are non-zero in the flattened version of a.\n\n    This is equivalent to a.ravel().nonzero()[0].\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array.\n\n    Returns\n    -------\n    res : ndarray\n        Output array, containing the indices of the elements of `a.ravel()`\n        that are non-zero.\n\n    See Also\n    --------\n    nonzero : Return the indices of the non-zero elements of the input array.\n    ravel : Return a 1-D array containing the elements of the input array.\n\n    Examples\n    --------\n    >>> x = np.arange(-2, 3)\n    >>> x\n    array([-2, -1,  0,  1,  2])\n    >>> np.flatnonzero(x)\n    array([0, 1, 3, 4])\n\n    Use the indices of the non-zero elements as an index array to extract\n    these elements:\n\n    >>> x.ravel()[np.flatnonzero(x)]\n    array([-2, -1,  1,  2])\n\n    ')
    
    # Obtaining the type of the subscript
    int_8082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 31), 'int')
    
    # Call to nonzero(...): (line 840)
    # Processing the call keyword arguments (line 840)
    kwargs_8088 = {}
    
    # Call to ravel(...): (line 840)
    # Processing the call keyword arguments (line 840)
    kwargs_8085 = {}
    # Getting the type of 'a' (line 840)
    a_8083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 11), 'a', False)
    # Obtaining the member 'ravel' of a type (line 840)
    ravel_8084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 11), a_8083, 'ravel')
    # Calling ravel(args, kwargs) (line 840)
    ravel_call_result_8086 = invoke(stypy.reporting.localization.Localization(__file__, 840, 11), ravel_8084, *[], **kwargs_8085)
    
    # Obtaining the member 'nonzero' of a type (line 840)
    nonzero_8087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 11), ravel_call_result_8086, 'nonzero')
    # Calling nonzero(args, kwargs) (line 840)
    nonzero_call_result_8089 = invoke(stypy.reporting.localization.Localization(__file__, 840, 11), nonzero_8087, *[], **kwargs_8088)
    
    # Obtaining the member '__getitem__' of a type (line 840)
    getitem___8090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 11), nonzero_call_result_8089, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 840)
    subscript_call_result_8091 = invoke(stypy.reporting.localization.Localization(__file__, 840, 11), getitem___8090, int_8082)
    
    # Assigning a type to the variable 'stypy_return_type' (line 840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 4), 'stypy_return_type', subscript_call_result_8091)
    
    # ################# End of 'flatnonzero(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'flatnonzero' in the type store
    # Getting the type of 'stypy_return_type' (line 803)
    stypy_return_type_8092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8092)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'flatnonzero'
    return stypy_return_type_8092

# Assigning a type to the variable 'flatnonzero' (line 803)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 0), 'flatnonzero', flatnonzero)

# Assigning a Dict to a Name (line 842):

# Assigning a Dict to a Name (line 842):

# Obtaining an instance of the builtin type 'dict' (line 842)
dict_8093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 23), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 842)
# Adding element type (key, value) (line 842)
str_8094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 24), 'str', 'v')
int_8095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 29), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 842, 23), dict_8093, (str_8094, int_8095))
# Adding element type (key, value) (line 842)
str_8096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 24), 'str', 's')
int_8097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 29), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 842, 23), dict_8093, (str_8096, int_8097))
# Adding element type (key, value) (line 842)
str_8098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 24), 'str', 'f')
int_8099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 29), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 842, 23), dict_8093, (str_8098, int_8099))

# Assigning a type to the variable '_mode_from_name_dict' (line 842)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 0), '_mode_from_name_dict', dict_8093)

@norecursion
def _mode_from_name(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_mode_from_name'
    module_type_store = module_type_store.open_function_context('_mode_from_name', 846, 0, False)
    
    # Passed parameters checking function
    _mode_from_name.stypy_localization = localization
    _mode_from_name.stypy_type_of_self = None
    _mode_from_name.stypy_type_store = module_type_store
    _mode_from_name.stypy_function_name = '_mode_from_name'
    _mode_from_name.stypy_param_names_list = ['mode']
    _mode_from_name.stypy_varargs_param_name = None
    _mode_from_name.stypy_kwargs_param_name = None
    _mode_from_name.stypy_call_defaults = defaults
    _mode_from_name.stypy_call_varargs = varargs
    _mode_from_name.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_mode_from_name', ['mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_mode_from_name', localization, ['mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_mode_from_name(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 847)
    # Getting the type of 'basestring' (line 847)
    basestring_8100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 24), 'basestring')
    # Getting the type of 'mode' (line 847)
    mode_8101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 18), 'mode')
    
    (may_be_8102, more_types_in_union_8103) = may_be_subtype(basestring_8100, mode_8101)

    if may_be_8102:

        if more_types_in_union_8103:
            # Runtime conditional SSA (line 847)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'mode' (line 847)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 4), 'mode', remove_not_subtype_from_union(mode_8101, basestring))
        
        # Obtaining the type of the subscript
        
        # Obtaining the type of the subscript
        int_8104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, 49), 'int')
        
        # Call to lower(...): (line 848)
        # Processing the call keyword arguments (line 848)
        kwargs_8107 = {}
        # Getting the type of 'mode' (line 848)
        mode_8105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 36), 'mode', False)
        # Obtaining the member 'lower' of a type (line 848)
        lower_8106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 36), mode_8105, 'lower')
        # Calling lower(args, kwargs) (line 848)
        lower_call_result_8108 = invoke(stypy.reporting.localization.Localization(__file__, 848, 36), lower_8106, *[], **kwargs_8107)
        
        # Obtaining the member '__getitem__' of a type (line 848)
        getitem___8109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 36), lower_call_result_8108, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 848)
        subscript_call_result_8110 = invoke(stypy.reporting.localization.Localization(__file__, 848, 36), getitem___8109, int_8104)
        
        # Getting the type of '_mode_from_name_dict' (line 848)
        _mode_from_name_dict_8111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 15), '_mode_from_name_dict')
        # Obtaining the member '__getitem__' of a type (line 848)
        getitem___8112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 15), _mode_from_name_dict_8111, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 848)
        subscript_call_result_8113 = invoke(stypy.reporting.localization.Localization(__file__, 848, 15), getitem___8112, subscript_call_result_8110)
        
        # Assigning a type to the variable 'stypy_return_type' (line 848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 8), 'stypy_return_type', subscript_call_result_8113)

        if more_types_in_union_8103:
            # SSA join for if statement (line 847)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'mode' (line 849)
    mode_8114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 11), 'mode')
    # Assigning a type to the variable 'stypy_return_type' (line 849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 4), 'stypy_return_type', mode_8114)
    
    # ################# End of '_mode_from_name(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_mode_from_name' in the type store
    # Getting the type of 'stypy_return_type' (line 846)
    stypy_return_type_8115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8115)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_mode_from_name'
    return stypy_return_type_8115

# Assigning a type to the variable '_mode_from_name' (line 846)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 0), '_mode_from_name', _mode_from_name)

@norecursion
def correlate(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_8116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 851, 25), 'str', 'valid')
    defaults = [str_8116]
    # Create a new context for function 'correlate'
    module_type_store = module_type_store.open_function_context('correlate', 851, 0, False)
    
    # Passed parameters checking function
    correlate.stypy_localization = localization
    correlate.stypy_type_of_self = None
    correlate.stypy_type_store = module_type_store
    correlate.stypy_function_name = 'correlate'
    correlate.stypy_param_names_list = ['a', 'v', 'mode']
    correlate.stypy_varargs_param_name = None
    correlate.stypy_kwargs_param_name = None
    correlate.stypy_call_defaults = defaults
    correlate.stypy_call_varargs = varargs
    correlate.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'correlate', ['a', 'v', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'correlate', localization, ['a', 'v', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'correlate(...)' code ##################

    str_8117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, (-1)), 'str', '\n    Cross-correlation of two 1-dimensional sequences.\n\n    This function computes the correlation as generally defined in signal\n    processing texts::\n\n        c_{av}[k] = sum_n a[n+k] * conj(v[n])\n\n    with a and v sequences being zero-padded where necessary and conj being\n    the conjugate.\n\n    Parameters\n    ----------\n    a, v : array_like\n        Input sequences.\n    mode : {\'valid\', \'same\', \'full\'}, optional\n        Refer to the `convolve` docstring.  Note that the default\n        is \'valid\', unlike `convolve`, which uses \'full\'.\n    old_behavior : bool\n        `old_behavior` was removed in NumPy 1.10. If you need the old\n        behavior, use `multiarray.correlate`.\n\n    Returns\n    -------\n    out : ndarray\n        Discrete cross-correlation of `a` and `v`.\n\n    See Also\n    --------\n    convolve : Discrete, linear convolution of two one-dimensional sequences.\n    multiarray.correlate : Old, no conjugate, version of correlate.\n\n    Notes\n    -----\n    The definition of correlation above is not unique and sometimes correlation\n    may be defined differently. Another common definition is::\n\n        c\'_{av}[k] = sum_n a[n] conj(v[n+k])\n\n    which is related to ``c_{av}[k]`` by ``c\'_{av}[k] = c_{av}[-k]``.\n\n    Examples\n    --------\n    >>> np.correlate([1, 2, 3], [0, 1, 0.5])\n    array([ 3.5])\n    >>> np.correlate([1, 2, 3], [0, 1, 0.5], "same")\n    array([ 2. ,  3.5,  3. ])\n    >>> np.correlate([1, 2, 3], [0, 1, 0.5], "full")\n    array([ 0.5,  2. ,  3.5,  3. ,  0. ])\n\n    Using complex sequences:\n\n    >>> np.correlate([1+1j, 2, 3-1j], [0, 1, 0.5j], \'full\')\n    array([ 0.5-0.5j,  1.0+0.j ,  1.5-1.5j,  3.0-1.j ,  0.0+0.j ])\n\n    Note that you get the time reversed, complex conjugated result\n    when the two input sequences change places, i.e.,\n    ``c_{va}[k] = c^{*}_{av}[-k]``:\n\n    >>> np.correlate([0, 1, 0.5j], [1+1j, 2, 3-1j], \'full\')\n    array([ 0.0+0.j ,  3.0+1.j ,  1.5+1.5j,  1.0+0.j ,  0.5+0.5j])\n\n    ')
    
    # Assigning a Call to a Name (line 915):
    
    # Assigning a Call to a Name (line 915):
    
    # Call to _mode_from_name(...): (line 915)
    # Processing the call arguments (line 915)
    # Getting the type of 'mode' (line 915)
    mode_8119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 27), 'mode', False)
    # Processing the call keyword arguments (line 915)
    kwargs_8120 = {}
    # Getting the type of '_mode_from_name' (line 915)
    _mode_from_name_8118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 11), '_mode_from_name', False)
    # Calling _mode_from_name(args, kwargs) (line 915)
    _mode_from_name_call_result_8121 = invoke(stypy.reporting.localization.Localization(__file__, 915, 11), _mode_from_name_8118, *[mode_8119], **kwargs_8120)
    
    # Assigning a type to the variable 'mode' (line 915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 4), 'mode', _mode_from_name_call_result_8121)
    
    # Call to correlate2(...): (line 916)
    # Processing the call arguments (line 916)
    # Getting the type of 'a' (line 916)
    a_8124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 33), 'a', False)
    # Getting the type of 'v' (line 916)
    v_8125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 36), 'v', False)
    # Getting the type of 'mode' (line 916)
    mode_8126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 39), 'mode', False)
    # Processing the call keyword arguments (line 916)
    kwargs_8127 = {}
    # Getting the type of 'multiarray' (line 916)
    multiarray_8122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 11), 'multiarray', False)
    # Obtaining the member 'correlate2' of a type (line 916)
    correlate2_8123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 11), multiarray_8122, 'correlate2')
    # Calling correlate2(args, kwargs) (line 916)
    correlate2_call_result_8128 = invoke(stypy.reporting.localization.Localization(__file__, 916, 11), correlate2_8123, *[a_8124, v_8125, mode_8126], **kwargs_8127)
    
    # Assigning a type to the variable 'stypy_return_type' (line 916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 4), 'stypy_return_type', correlate2_call_result_8128)
    
    # ################# End of 'correlate(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'correlate' in the type store
    # Getting the type of 'stypy_return_type' (line 851)
    stypy_return_type_8129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8129)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'correlate'
    return stypy_return_type_8129

# Assigning a type to the variable 'correlate' (line 851)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 0), 'correlate', correlate)

@norecursion
def convolve(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_8130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 22), 'str', 'full')
    defaults = [str_8130]
    # Create a new context for function 'convolve'
    module_type_store = module_type_store.open_function_context('convolve', 918, 0, False)
    
    # Passed parameters checking function
    convolve.stypy_localization = localization
    convolve.stypy_type_of_self = None
    convolve.stypy_type_store = module_type_store
    convolve.stypy_function_name = 'convolve'
    convolve.stypy_param_names_list = ['a', 'v', 'mode']
    convolve.stypy_varargs_param_name = None
    convolve.stypy_kwargs_param_name = None
    convolve.stypy_call_defaults = defaults
    convolve.stypy_call_varargs = varargs
    convolve.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'convolve', ['a', 'v', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'convolve', localization, ['a', 'v', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'convolve(...)' code ##################

    str_8131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1004, (-1)), 'str', '\n    Returns the discrete, linear convolution of two one-dimensional sequences.\n\n    The convolution operator is often seen in signal processing, where it\n    models the effect of a linear time-invariant system on a signal [1]_.  In\n    probability theory, the sum of two independent random variables is\n    distributed according to the convolution of their individual\n    distributions.\n\n    If `v` is longer than `a`, the arrays are swapped before computation.\n\n    Parameters\n    ----------\n    a : (N,) array_like\n        First one-dimensional input array.\n    v : (M,) array_like\n        Second one-dimensional input array.\n    mode : {\'full\', \'valid\', \'same\'}, optional\n        \'full\':\n          By default, mode is \'full\'.  This returns the convolution\n          at each point of overlap, with an output shape of (N+M-1,). At\n          the end-points of the convolution, the signals do not overlap\n          completely, and boundary effects may be seen.\n\n        \'same\':\n          Mode \'same\' returns output of length ``max(M, N)``.  Boundary\n          effects are still visible.\n\n        \'valid\':\n          Mode \'valid\' returns output of length\n          ``max(M, N) - min(M, N) + 1``.  The convolution product is only given\n          for points where the signals overlap completely.  Values outside\n          the signal boundary have no effect.\n\n    Returns\n    -------\n    out : ndarray\n        Discrete, linear convolution of `a` and `v`.\n\n    See Also\n    --------\n    scipy.signal.fftconvolve : Convolve two arrays using the Fast Fourier\n                               Transform.\n    scipy.linalg.toeplitz : Used to construct the convolution operator.\n    polymul : Polynomial multiplication. Same output as convolve, but also\n              accepts poly1d objects as input.\n\n    Notes\n    -----\n    The discrete convolution operation is defined as\n\n    .. math:: (a * v)[n] = \\sum_{m = -\\infty}^{\\infty} a[m] v[n - m]\n\n    It can be shown that a convolution :math:`x(t) * y(t)` in time/space\n    is equivalent to the multiplication :math:`X(f) Y(f)` in the Fourier\n    domain, after appropriate padding (padding is necessary to prevent\n    circular convolution).  Since multiplication is more efficient (faster)\n    than convolution, the function `scipy.signal.fftconvolve` exploits the\n    FFT to calculate the convolution of large data-sets.\n\n    References\n    ----------\n    .. [1] Wikipedia, "Convolution", http://en.wikipedia.org/wiki/Convolution.\n\n    Examples\n    --------\n    Note how the convolution operator flips the second array\n    before "sliding" the two across one another:\n\n    >>> np.convolve([1, 2, 3], [0, 1, 0.5])\n    array([ 0. ,  1. ,  2.5,  4. ,  1.5])\n\n    Only return the middle values of the convolution.\n    Contains boundary effects, where zeros are taken\n    into account:\n\n    >>> np.convolve([1,2,3],[0,1,0.5], \'same\')\n    array([ 1. ,  2.5,  4. ])\n\n    The two arrays are of the same length, so there\n    is only one position where they completely overlap:\n\n    >>> np.convolve([1,2,3],[0,1,0.5], \'valid\')\n    array([ 2.5])\n\n    ')
    
    # Assigning a Tuple to a Tuple (line 1005):
    
    # Assigning a Call to a Name (line 1005):
    
    # Call to array(...): (line 1005)
    # Processing the call arguments (line 1005)
    # Getting the type of 'a' (line 1005)
    a_8133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 17), 'a', False)
    # Processing the call keyword arguments (line 1005)
    # Getting the type of 'False' (line 1005)
    False_8134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 25), 'False', False)
    keyword_8135 = False_8134
    int_8136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 38), 'int')
    keyword_8137 = int_8136
    kwargs_8138 = {'copy': keyword_8135, 'ndmin': keyword_8137}
    # Getting the type of 'array' (line 1005)
    array_8132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 11), 'array', False)
    # Calling array(args, kwargs) (line 1005)
    array_call_result_8139 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 11), array_8132, *[a_8133], **kwargs_8138)
    
    # Assigning a type to the variable 'tuple_assignment_7431' (line 1005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'tuple_assignment_7431', array_call_result_8139)
    
    # Assigning a Call to a Name (line 1005):
    
    # Call to array(...): (line 1005)
    # Processing the call arguments (line 1005)
    # Getting the type of 'v' (line 1005)
    v_8141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 48), 'v', False)
    # Processing the call keyword arguments (line 1005)
    # Getting the type of 'False' (line 1005)
    False_8142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 56), 'False', False)
    keyword_8143 = False_8142
    int_8144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 69), 'int')
    keyword_8145 = int_8144
    kwargs_8146 = {'copy': keyword_8143, 'ndmin': keyword_8145}
    # Getting the type of 'array' (line 1005)
    array_8140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 42), 'array', False)
    # Calling array(args, kwargs) (line 1005)
    array_call_result_8147 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 42), array_8140, *[v_8141], **kwargs_8146)
    
    # Assigning a type to the variable 'tuple_assignment_7432' (line 1005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'tuple_assignment_7432', array_call_result_8147)
    
    # Assigning a Name to a Name (line 1005):
    # Getting the type of 'tuple_assignment_7431' (line 1005)
    tuple_assignment_7431_8148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'tuple_assignment_7431')
    # Assigning a type to the variable 'a' (line 1005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'a', tuple_assignment_7431_8148)
    
    # Assigning a Name to a Name (line 1005):
    # Getting the type of 'tuple_assignment_7432' (line 1005)
    tuple_assignment_7432_8149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'tuple_assignment_7432')
    # Assigning a type to the variable 'v' (line 1005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 7), 'v', tuple_assignment_7432_8149)
    
    
    
    # Call to len(...): (line 1006)
    # Processing the call arguments (line 1006)
    # Getting the type of 'v' (line 1006)
    v_8151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 12), 'v', False)
    # Processing the call keyword arguments (line 1006)
    kwargs_8152 = {}
    # Getting the type of 'len' (line 1006)
    len_8150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 8), 'len', False)
    # Calling len(args, kwargs) (line 1006)
    len_call_result_8153 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 8), len_8150, *[v_8151], **kwargs_8152)
    
    
    # Call to len(...): (line 1006)
    # Processing the call arguments (line 1006)
    # Getting the type of 'a' (line 1006)
    a_8155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 21), 'a', False)
    # Processing the call keyword arguments (line 1006)
    kwargs_8156 = {}
    # Getting the type of 'len' (line 1006)
    len_8154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 17), 'len', False)
    # Calling len(args, kwargs) (line 1006)
    len_call_result_8157 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 17), len_8154, *[a_8155], **kwargs_8156)
    
    # Applying the binary operator '>' (line 1006)
    result_gt_8158 = python_operator(stypy.reporting.localization.Localization(__file__, 1006, 8), '>', len_call_result_8153, len_call_result_8157)
    
    # Testing the type of an if condition (line 1006)
    if_condition_8159 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1006, 4), result_gt_8158)
    # Assigning a type to the variable 'if_condition_8159' (line 1006)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 4), 'if_condition_8159', if_condition_8159)
    # SSA begins for if statement (line 1006)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1007):
    
    # Assigning a Name to a Name (line 1007):
    # Getting the type of 'v' (line 1007)
    v_8160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 15), 'v')
    # Assigning a type to the variable 'tuple_assignment_7433' (line 1007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 8), 'tuple_assignment_7433', v_8160)
    
    # Assigning a Name to a Name (line 1007):
    # Getting the type of 'a' (line 1007)
    a_8161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 18), 'a')
    # Assigning a type to the variable 'tuple_assignment_7434' (line 1007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 8), 'tuple_assignment_7434', a_8161)
    
    # Assigning a Name to a Name (line 1007):
    # Getting the type of 'tuple_assignment_7433' (line 1007)
    tuple_assignment_7433_8162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 8), 'tuple_assignment_7433')
    # Assigning a type to the variable 'a' (line 1007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 8), 'a', tuple_assignment_7433_8162)
    
    # Assigning a Name to a Name (line 1007):
    # Getting the type of 'tuple_assignment_7434' (line 1007)
    tuple_assignment_7434_8163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 8), 'tuple_assignment_7434')
    # Assigning a type to the variable 'v' (line 1007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 11), 'v', tuple_assignment_7434_8163)
    # SSA join for if statement (line 1006)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1008)
    # Processing the call arguments (line 1008)
    # Getting the type of 'a' (line 1008)
    a_8165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 11), 'a', False)
    # Processing the call keyword arguments (line 1008)
    kwargs_8166 = {}
    # Getting the type of 'len' (line 1008)
    len_8164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 7), 'len', False)
    # Calling len(args, kwargs) (line 1008)
    len_call_result_8167 = invoke(stypy.reporting.localization.Localization(__file__, 1008, 7), len_8164, *[a_8165], **kwargs_8166)
    
    int_8168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1008, 17), 'int')
    # Applying the binary operator '==' (line 1008)
    result_eq_8169 = python_operator(stypy.reporting.localization.Localization(__file__, 1008, 7), '==', len_call_result_8167, int_8168)
    
    # Testing the type of an if condition (line 1008)
    if_condition_8170 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1008, 4), result_eq_8169)
    # Assigning a type to the variable 'if_condition_8170' (line 1008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'if_condition_8170', if_condition_8170)
    # SSA begins for if statement (line 1008)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1009)
    # Processing the call arguments (line 1009)
    str_8172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1009, 25), 'str', 'a cannot be empty')
    # Processing the call keyword arguments (line 1009)
    kwargs_8173 = {}
    # Getting the type of 'ValueError' (line 1009)
    ValueError_8171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1009)
    ValueError_call_result_8174 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 14), ValueError_8171, *[str_8172], **kwargs_8173)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1009, 8), ValueError_call_result_8174, 'raise parameter', BaseException)
    # SSA join for if statement (line 1008)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1010)
    # Processing the call arguments (line 1010)
    # Getting the type of 'v' (line 1010)
    v_8176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 11), 'v', False)
    # Processing the call keyword arguments (line 1010)
    kwargs_8177 = {}
    # Getting the type of 'len' (line 1010)
    len_8175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 7), 'len', False)
    # Calling len(args, kwargs) (line 1010)
    len_call_result_8178 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 7), len_8175, *[v_8176], **kwargs_8177)
    
    int_8179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, 17), 'int')
    # Applying the binary operator '==' (line 1010)
    result_eq_8180 = python_operator(stypy.reporting.localization.Localization(__file__, 1010, 7), '==', len_call_result_8178, int_8179)
    
    # Testing the type of an if condition (line 1010)
    if_condition_8181 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1010, 4), result_eq_8180)
    # Assigning a type to the variable 'if_condition_8181' (line 1010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'if_condition_8181', if_condition_8181)
    # SSA begins for if statement (line 1010)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1011)
    # Processing the call arguments (line 1011)
    str_8183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 25), 'str', 'v cannot be empty')
    # Processing the call keyword arguments (line 1011)
    kwargs_8184 = {}
    # Getting the type of 'ValueError' (line 1011)
    ValueError_8182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1011)
    ValueError_call_result_8185 = invoke(stypy.reporting.localization.Localization(__file__, 1011, 14), ValueError_8182, *[str_8183], **kwargs_8184)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1011, 8), ValueError_call_result_8185, 'raise parameter', BaseException)
    # SSA join for if statement (line 1010)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1012):
    
    # Assigning a Call to a Name (line 1012):
    
    # Call to _mode_from_name(...): (line 1012)
    # Processing the call arguments (line 1012)
    # Getting the type of 'mode' (line 1012)
    mode_8187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 27), 'mode', False)
    # Processing the call keyword arguments (line 1012)
    kwargs_8188 = {}
    # Getting the type of '_mode_from_name' (line 1012)
    _mode_from_name_8186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 11), '_mode_from_name', False)
    # Calling _mode_from_name(args, kwargs) (line 1012)
    _mode_from_name_call_result_8189 = invoke(stypy.reporting.localization.Localization(__file__, 1012, 11), _mode_from_name_8186, *[mode_8187], **kwargs_8188)
    
    # Assigning a type to the variable 'mode' (line 1012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 4), 'mode', _mode_from_name_call_result_8189)
    
    # Call to correlate(...): (line 1013)
    # Processing the call arguments (line 1013)
    # Getting the type of 'a' (line 1013)
    a_8192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 32), 'a', False)
    
    # Obtaining the type of the subscript
    int_8193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 39), 'int')
    slice_8194 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1013, 35), None, None, int_8193)
    # Getting the type of 'v' (line 1013)
    v_8195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 35), 'v', False)
    # Obtaining the member '__getitem__' of a type (line 1013)
    getitem___8196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 35), v_8195, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1013)
    subscript_call_result_8197 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 35), getitem___8196, slice_8194)
    
    # Getting the type of 'mode' (line 1013)
    mode_8198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 44), 'mode', False)
    # Processing the call keyword arguments (line 1013)
    kwargs_8199 = {}
    # Getting the type of 'multiarray' (line 1013)
    multiarray_8190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 11), 'multiarray', False)
    # Obtaining the member 'correlate' of a type (line 1013)
    correlate_8191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 11), multiarray_8190, 'correlate')
    # Calling correlate(args, kwargs) (line 1013)
    correlate_call_result_8200 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 11), correlate_8191, *[a_8192, subscript_call_result_8197, mode_8198], **kwargs_8199)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1013)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 4), 'stypy_return_type', correlate_call_result_8200)
    
    # ################# End of 'convolve(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'convolve' in the type store
    # Getting the type of 'stypy_return_type' (line 918)
    stypy_return_type_8201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8201)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'convolve'
    return stypy_return_type_8201

# Assigning a type to the variable 'convolve' (line 918)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 0), 'convolve', convolve)

@norecursion
def outer(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1015)
    None_8202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 20), 'None')
    defaults = [None_8202]
    # Create a new context for function 'outer'
    module_type_store = module_type_store.open_function_context('outer', 1015, 0, False)
    
    # Passed parameters checking function
    outer.stypy_localization = localization
    outer.stypy_type_of_self = None
    outer.stypy_type_store = module_type_store
    outer.stypy_function_name = 'outer'
    outer.stypy_param_names_list = ['a', 'b', 'out']
    outer.stypy_varargs_param_name = None
    outer.stypy_kwargs_param_name = None
    outer.stypy_call_defaults = defaults
    outer.stypy_call_varargs = varargs
    outer.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'outer', ['a', 'b', 'out'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'outer', localization, ['a', 'b', 'out'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'outer(...)' code ##################

    str_8203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, (-1)), 'str', '\n    Compute the outer product of two vectors.\n\n    Given two vectors, ``a = [a0, a1, ..., aM]`` and\n    ``b = [b0, b1, ..., bN]``,\n    the outer product [1]_ is::\n\n      [[a0*b0  a0*b1 ... a0*bN ]\n       [a1*b0    .\n       [ ...          .\n       [aM*b0            aM*bN ]]\n\n    Parameters\n    ----------\n    a : (M,) array_like\n        First input vector.  Input is flattened if\n        not already 1-dimensional.\n    b : (N,) array_like\n        Second input vector.  Input is flattened if\n        not already 1-dimensional.\n    out : (M, N) ndarray, optional\n        A location where the result is stored\n\n        .. versionadded:: 1.9.0\n\n    Returns\n    -------\n    out : (M, N) ndarray\n        ``out[i, j] = a[i] * b[j]``\n\n    See also\n    --------\n    inner, einsum\n\n    References\n    ----------\n    .. [1] : G. H. Golub and C. F. van Loan, *Matrix Computations*, 3rd\n             ed., Baltimore, MD, Johns Hopkins University Press, 1996,\n             pg. 8.\n\n    Examples\n    --------\n    Make a (*very* coarse) grid for computing a Mandelbrot set:\n\n    >>> rl = np.outer(np.ones((5,)), np.linspace(-2, 2, 5))\n    >>> rl\n    array([[-2., -1.,  0.,  1.,  2.],\n           [-2., -1.,  0.,  1.,  2.],\n           [-2., -1.,  0.,  1.,  2.],\n           [-2., -1.,  0.,  1.,  2.],\n           [-2., -1.,  0.,  1.,  2.]])\n    >>> im = np.outer(1j*np.linspace(2, -2, 5), np.ones((5,)))\n    >>> im\n    array([[ 0.+2.j,  0.+2.j,  0.+2.j,  0.+2.j,  0.+2.j],\n           [ 0.+1.j,  0.+1.j,  0.+1.j,  0.+1.j,  0.+1.j],\n           [ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j],\n           [ 0.-1.j,  0.-1.j,  0.-1.j,  0.-1.j,  0.-1.j],\n           [ 0.-2.j,  0.-2.j,  0.-2.j,  0.-2.j,  0.-2.j]])\n    >>> grid = rl + im\n    >>> grid\n    array([[-2.+2.j, -1.+2.j,  0.+2.j,  1.+2.j,  2.+2.j],\n           [-2.+1.j, -1.+1.j,  0.+1.j,  1.+1.j,  2.+1.j],\n           [-2.+0.j, -1.+0.j,  0.+0.j,  1.+0.j,  2.+0.j],\n           [-2.-1.j, -1.-1.j,  0.-1.j,  1.-1.j,  2.-1.j],\n           [-2.-2.j, -1.-2.j,  0.-2.j,  1.-2.j,  2.-2.j]])\n\n    An example using a "vector" of letters:\n\n    >>> x = np.array([\'a\', \'b\', \'c\'], dtype=object)\n    >>> np.outer(x, [1, 2, 3])\n    array([[a, aa, aaa],\n           [b, bb, bbb],\n           [c, cc, ccc]], dtype=object)\n\n    ')
    
    # Assigning a Call to a Name (line 1091):
    
    # Assigning a Call to a Name (line 1091):
    
    # Call to asarray(...): (line 1091)
    # Processing the call arguments (line 1091)
    # Getting the type of 'a' (line 1091)
    a_8205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 16), 'a', False)
    # Processing the call keyword arguments (line 1091)
    kwargs_8206 = {}
    # Getting the type of 'asarray' (line 1091)
    asarray_8204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1091)
    asarray_call_result_8207 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 8), asarray_8204, *[a_8205], **kwargs_8206)
    
    # Assigning a type to the variable 'a' (line 1091)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 4), 'a', asarray_call_result_8207)
    
    # Assigning a Call to a Name (line 1092):
    
    # Assigning a Call to a Name (line 1092):
    
    # Call to asarray(...): (line 1092)
    # Processing the call arguments (line 1092)
    # Getting the type of 'b' (line 1092)
    b_8209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 16), 'b', False)
    # Processing the call keyword arguments (line 1092)
    kwargs_8210 = {}
    # Getting the type of 'asarray' (line 1092)
    asarray_8208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1092)
    asarray_call_result_8211 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 8), asarray_8208, *[b_8209], **kwargs_8210)
    
    # Assigning a type to the variable 'b' (line 1092)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 4), 'b', asarray_call_result_8211)
    
    # Call to multiply(...): (line 1093)
    # Processing the call arguments (line 1093)
    
    # Obtaining the type of the subscript
    slice_8213 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1093, 20), None, None, None)
    # Getting the type of 'newaxis' (line 1093)
    newaxis_8214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 33), 'newaxis', False)
    
    # Call to ravel(...): (line 1093)
    # Processing the call keyword arguments (line 1093)
    kwargs_8217 = {}
    # Getting the type of 'a' (line 1093)
    a_8215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 20), 'a', False)
    # Obtaining the member 'ravel' of a type (line 1093)
    ravel_8216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 20), a_8215, 'ravel')
    # Calling ravel(args, kwargs) (line 1093)
    ravel_call_result_8218 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 20), ravel_8216, *[], **kwargs_8217)
    
    # Obtaining the member '__getitem__' of a type (line 1093)
    getitem___8219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 20), ravel_call_result_8218, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1093)
    subscript_call_result_8220 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 20), getitem___8219, (slice_8213, newaxis_8214))
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'newaxis' (line 1093)
    newaxis_8221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 53), 'newaxis', False)
    slice_8222 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1093, 43), None, None, None)
    
    # Call to ravel(...): (line 1093)
    # Processing the call keyword arguments (line 1093)
    kwargs_8225 = {}
    # Getting the type of 'b' (line 1093)
    b_8223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 43), 'b', False)
    # Obtaining the member 'ravel' of a type (line 1093)
    ravel_8224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 43), b_8223, 'ravel')
    # Calling ravel(args, kwargs) (line 1093)
    ravel_call_result_8226 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 43), ravel_8224, *[], **kwargs_8225)
    
    # Obtaining the member '__getitem__' of a type (line 1093)
    getitem___8227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 43), ravel_call_result_8226, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1093)
    subscript_call_result_8228 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 43), getitem___8227, (newaxis_8221, slice_8222))
    
    # Getting the type of 'out' (line 1093)
    out_8229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 65), 'out', False)
    # Processing the call keyword arguments (line 1093)
    kwargs_8230 = {}
    # Getting the type of 'multiply' (line 1093)
    multiply_8212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 11), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1093)
    multiply_call_result_8231 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 11), multiply_8212, *[subscript_call_result_8220, subscript_call_result_8228, out_8229], **kwargs_8230)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 4), 'stypy_return_type', multiply_call_result_8231)
    
    # ################# End of 'outer(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'outer' in the type store
    # Getting the type of 'stypy_return_type' (line 1015)
    stypy_return_type_8232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8232)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'outer'
    return stypy_return_type_8232

# Assigning a type to the variable 'outer' (line 1015)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1015, 0), 'outer', outer)

@norecursion
def alterdot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'alterdot'
    module_type_store = module_type_store.open_function_context('alterdot', 1096, 0, False)
    
    # Passed parameters checking function
    alterdot.stypy_localization = localization
    alterdot.stypy_type_of_self = None
    alterdot.stypy_type_store = module_type_store
    alterdot.stypy_function_name = 'alterdot'
    alterdot.stypy_param_names_list = []
    alterdot.stypy_varargs_param_name = None
    alterdot.stypy_kwargs_param_name = None
    alterdot.stypy_call_defaults = defaults
    alterdot.stypy_call_varargs = varargs
    alterdot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'alterdot', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'alterdot', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'alterdot(...)' code ##################

    str_8233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1121, (-1)), 'str', '\n    Change `dot`, `vdot`, and `inner` to use accelerated BLAS functions.\n\n    Typically, as a user of Numpy, you do not explicitly call this\n    function. If Numpy is built with an accelerated BLAS, this function is\n    automatically called when Numpy is imported.\n\n    When Numpy is built with an accelerated BLAS like ATLAS, these\n    functions are replaced to make use of the faster implementations.  The\n    faster implementations only affect float32, float64, complex64, and\n    complex128 arrays. Furthermore, the BLAS API only includes\n    matrix-matrix, matrix-vector, and vector-vector products. Products of\n    arrays with larger dimensionalities use the built in functions and are\n    not accelerated.\n\n    .. note:: Deprecated in Numpy 1.10\n              The cblas functions have been integrated into the multarray\n              module and alterdot now longer does anything. It will be\n              removed in Numpy 1.11.0.\n\n    See Also\n    --------\n    restoredot : `restoredot` undoes the effects of `alterdot`.\n\n    ')
    
    # Call to warn(...): (line 1123)
    # Processing the call arguments (line 1123)
    str_8236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 18), 'str', 'alterdot no longer does anything.')
    # Getting the type of 'DeprecationWarning' (line 1123)
    DeprecationWarning_8237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 55), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 1123)
    kwargs_8238 = {}
    # Getting the type of 'warnings' (line 1123)
    warnings_8234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1123)
    warn_8235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 4), warnings_8234, 'warn')
    # Calling warn(args, kwargs) (line 1123)
    warn_call_result_8239 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 4), warn_8235, *[str_8236, DeprecationWarning_8237], **kwargs_8238)
    
    
    # ################# End of 'alterdot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'alterdot' in the type store
    # Getting the type of 'stypy_return_type' (line 1096)
    stypy_return_type_8240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8240)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'alterdot'
    return stypy_return_type_8240

# Assigning a type to the variable 'alterdot' (line 1096)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 0), 'alterdot', alterdot)

@norecursion
def restoredot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'restoredot'
    module_type_store = module_type_store.open_function_context('restoredot', 1126, 0, False)
    
    # Passed parameters checking function
    restoredot.stypy_localization = localization
    restoredot.stypy_type_of_self = None
    restoredot.stypy_type_store = module_type_store
    restoredot.stypy_function_name = 'restoredot'
    restoredot.stypy_param_names_list = []
    restoredot.stypy_varargs_param_name = None
    restoredot.stypy_kwargs_param_name = None
    restoredot.stypy_call_defaults = defaults
    restoredot.stypy_call_varargs = varargs
    restoredot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'restoredot', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'restoredot', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'restoredot(...)' code ##################

    str_8241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, (-1)), 'str', '\n    Restore `dot`, `vdot`, and `innerproduct` to the default non-BLAS\n    implementations.\n\n    Typically, the user will only need to call this when troubleshooting\n    and installation problem, reproducing the conditions of a build without\n    an accelerated BLAS, or when being very careful about benchmarking\n    linear algebra operations.\n\n    .. note:: Deprecated in Numpy 1.10\n              The cblas functions have been integrated into the multarray\n              module and restoredot now longer does anything. It will be\n              removed in Numpy 1.11.0.\n\n    See Also\n    --------\n    alterdot : `restoredot` undoes the effects of `alterdot`.\n\n    ')
    
    # Call to warn(...): (line 1147)
    # Processing the call arguments (line 1147)
    str_8244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 18), 'str', 'restoredot no longer does anything.')
    # Getting the type of 'DeprecationWarning' (line 1147)
    DeprecationWarning_8245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 57), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 1147)
    kwargs_8246 = {}
    # Getting the type of 'warnings' (line 1147)
    warnings_8242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 4), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1147)
    warn_8243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 4), warnings_8242, 'warn')
    # Calling warn(args, kwargs) (line 1147)
    warn_call_result_8247 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 4), warn_8243, *[str_8244, DeprecationWarning_8245], **kwargs_8246)
    
    
    # ################# End of 'restoredot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'restoredot' in the type store
    # Getting the type of 'stypy_return_type' (line 1126)
    stypy_return_type_8248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8248)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'restoredot'
    return stypy_return_type_8248

# Assigning a type to the variable 'restoredot' (line 1126)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 0), 'restoredot', restoredot)

@norecursion
def tensordot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_8249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 25), 'int')
    defaults = [int_8249]
    # Create a new context for function 'tensordot'
    module_type_store = module_type_store.open_function_context('tensordot', 1150, 0, False)
    
    # Passed parameters checking function
    tensordot.stypy_localization = localization
    tensordot.stypy_type_of_self = None
    tensordot.stypy_type_store = module_type_store
    tensordot.stypy_function_name = 'tensordot'
    tensordot.stypy_param_names_list = ['a', 'b', 'axes']
    tensordot.stypy_varargs_param_name = None
    tensordot.stypy_kwargs_param_name = None
    tensordot.stypy_call_defaults = defaults
    tensordot.stypy_call_varargs = varargs
    tensordot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tensordot', ['a', 'b', 'axes'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tensordot', localization, ['a', 'b', 'axes'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tensordot(...)' code ##################

    str_8250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1271, (-1)), 'str', '\n    Compute tensor dot product along specified axes for arrays >= 1-D.\n\n    Given two tensors (arrays of dimension greater than or equal to one),\n    `a` and `b`, and an array_like object containing two array_like\n    objects, ``(a_axes, b_axes)``, sum the products of `a`\'s and `b`\'s\n    elements (components) over the axes specified by ``a_axes`` and\n    ``b_axes``. The third argument can be a single non-negative\n    integer_like scalar, ``N``; if it is such, then the last ``N``\n    dimensions of `a` and the first ``N`` dimensions of `b` are summed\n    over.\n\n    Parameters\n    ----------\n    a, b : array_like, len(shape) >= 1\n        Tensors to "dot".\n\n    axes : int or (2,) array_like\n        * integer_like\n          If an int N, sum over the last N axes of `a` and the first N axes\n          of `b` in order. The sizes of the corresponding axes must match.\n        * (2,) array_like\n          Or, a list of axes to be summed over, first sequence applying to `a`,\n          second to `b`. Both elements array_like must be of the same length.\n\n    See Also\n    --------\n    dot, einsum\n\n    Notes\n    -----\n    Three common use cases are:\n        ``axes = 0`` : tensor product $a\\otimes b$\n        ``axes = 1`` : tensor dot product $a\\cdot b$\n        ``axes = 2`` : (default) tensor double contraction $a:b$\n\n    When `axes` is integer_like, the sequence for evaluation will be: first\n    the -Nth axis in `a` and 0th axis in `b`, and the -1th axis in `a` and\n    Nth axis in `b` last.\n\n    When there is more than one axis to sum over - and they are not the last\n    (first) axes of `a` (`b`) - the argument `axes` should consist of\n    two sequences of the same length, with the first axis to sum over given\n    first in both sequences, the second axis second, and so forth.\n\n    Examples\n    --------\n    A "traditional" example:\n\n    >>> a = np.arange(60.).reshape(3,4,5)\n    >>> b = np.arange(24.).reshape(4,3,2)\n    >>> c = np.tensordot(a,b, axes=([1,0],[0,1]))\n    >>> c.shape\n    (5, 2)\n    >>> c\n    array([[ 4400.,  4730.],\n           [ 4532.,  4874.],\n           [ 4664.,  5018.],\n           [ 4796.,  5162.],\n           [ 4928.,  5306.]])\n    >>> # A slower but equivalent way of computing the same...\n    >>> d = np.zeros((5,2))\n    >>> for i in range(5):\n    ...   for j in range(2):\n    ...     for k in range(3):\n    ...       for n in range(4):\n    ...         d[i,j] += a[k,n,i] * b[n,k,j]\n    >>> c == d\n    array([[ True,  True],\n           [ True,  True],\n           [ True,  True],\n           [ True,  True],\n           [ True,  True]], dtype=bool)\n\n    An extended example taking advantage of the overloading of + and \\*:\n\n    >>> a = np.array(range(1, 9))\n    >>> a.shape = (2, 2, 2)\n    >>> A = np.array((\'a\', \'b\', \'c\', \'d\'), dtype=object)\n    >>> A.shape = (2, 2)\n    >>> a; A\n    array([[[1, 2],\n            [3, 4]],\n           [[5, 6],\n            [7, 8]]])\n    array([[a, b],\n           [c, d]], dtype=object)\n\n    >>> np.tensordot(a, A) # third argument default is 2 for double-contraction\n    array([abbcccdddd, aaaaabbbbbbcccccccdddddddd], dtype=object)\n\n    >>> np.tensordot(a, A, 1)\n    array([[[acc, bdd],\n            [aaacccc, bbbdddd]],\n           [[aaaaacccccc, bbbbbdddddd],\n            [aaaaaaacccccccc, bbbbbbbdddddddd]]], dtype=object)\n\n    >>> np.tensordot(a, A, 0) # tensor product (result too long to incl.)\n    array([[[[[a, b],\n              [c, d]],\n              ...\n\n    >>> np.tensordot(a, A, (0, 1))\n    array([[[abbbbb, cddddd],\n            [aabbbbbb, ccdddddd]],\n           [[aaabbbbbbb, cccddddddd],\n            [aaaabbbbbbbb, ccccdddddddd]]], dtype=object)\n\n    >>> np.tensordot(a, A, (2, 1))\n    array([[[abb, cdd],\n            [aaabbbb, cccdddd]],\n           [[aaaaabbbbbb, cccccdddddd],\n            [aaaaaaabbbbbbbb, cccccccdddddddd]]], dtype=object)\n\n    >>> np.tensordot(a, A, ((0, 1), (0, 1)))\n    array([abbbcccccddddddd, aabbbbccccccdddddddd], dtype=object)\n\n    >>> np.tensordot(a, A, ((2, 1), (1, 0)))\n    array([acccbbdddd, aaaaacccccccbbbbbbdddddddd], dtype=object)\n\n    ')
    
    
    # SSA begins for try-except statement (line 1272)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to iter(...): (line 1273)
    # Processing the call arguments (line 1273)
    # Getting the type of 'axes' (line 1273)
    axes_8252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 13), 'axes', False)
    # Processing the call keyword arguments (line 1273)
    kwargs_8253 = {}
    # Getting the type of 'iter' (line 1273)
    iter_8251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 8), 'iter', False)
    # Calling iter(args, kwargs) (line 1273)
    iter_call_result_8254 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 8), iter_8251, *[axes_8252], **kwargs_8253)
    
    # SSA branch for the except part of a try statement (line 1272)
    # SSA branch for the except '<any exception>' branch of a try statement (line 1272)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 1275):
    
    # Assigning a Call to a Name (line 1275):
    
    # Call to list(...): (line 1275)
    # Processing the call arguments (line 1275)
    
    # Call to range(...): (line 1275)
    # Processing the call arguments (line 1275)
    
    # Getting the type of 'axes' (line 1275)
    axes_8257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 29), 'axes', False)
    # Applying the 'usub' unary operator (line 1275)
    result___neg___8258 = python_operator(stypy.reporting.localization.Localization(__file__, 1275, 28), 'usub', axes_8257)
    
    int_8259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, 35), 'int')
    # Processing the call keyword arguments (line 1275)
    kwargs_8260 = {}
    # Getting the type of 'range' (line 1275)
    range_8256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 22), 'range', False)
    # Calling range(args, kwargs) (line 1275)
    range_call_result_8261 = invoke(stypy.reporting.localization.Localization(__file__, 1275, 22), range_8256, *[result___neg___8258, int_8259], **kwargs_8260)
    
    # Processing the call keyword arguments (line 1275)
    kwargs_8262 = {}
    # Getting the type of 'list' (line 1275)
    list_8255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 17), 'list', False)
    # Calling list(args, kwargs) (line 1275)
    list_call_result_8263 = invoke(stypy.reporting.localization.Localization(__file__, 1275, 17), list_8255, *[range_call_result_8261], **kwargs_8262)
    
    # Assigning a type to the variable 'axes_a' (line 1275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 8), 'axes_a', list_call_result_8263)
    
    # Assigning a Call to a Name (line 1276):
    
    # Assigning a Call to a Name (line 1276):
    
    # Call to list(...): (line 1276)
    # Processing the call arguments (line 1276)
    
    # Call to range(...): (line 1276)
    # Processing the call arguments (line 1276)
    int_8266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 28), 'int')
    # Getting the type of 'axes' (line 1276)
    axes_8267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 31), 'axes', False)
    # Processing the call keyword arguments (line 1276)
    kwargs_8268 = {}
    # Getting the type of 'range' (line 1276)
    range_8265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 22), 'range', False)
    # Calling range(args, kwargs) (line 1276)
    range_call_result_8269 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 22), range_8265, *[int_8266, axes_8267], **kwargs_8268)
    
    # Processing the call keyword arguments (line 1276)
    kwargs_8270 = {}
    # Getting the type of 'list' (line 1276)
    list_8264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 17), 'list', False)
    # Calling list(args, kwargs) (line 1276)
    list_call_result_8271 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 17), list_8264, *[range_call_result_8269], **kwargs_8270)
    
    # Assigning a type to the variable 'axes_b' (line 1276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 8), 'axes_b', list_call_result_8271)
    # SSA branch for the else branch of a try statement (line 1272)
    module_type_store.open_ssa_branch('except else')
    
    # Assigning a Name to a Tuple (line 1278):
    
    # Assigning a Subscript to a Name (line 1278):
    
    # Obtaining the type of the subscript
    int_8272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 8), 'int')
    # Getting the type of 'axes' (line 1278)
    axes_8273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 25), 'axes')
    # Obtaining the member '__getitem__' of a type (line 1278)
    getitem___8274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 8), axes_8273, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1278)
    subscript_call_result_8275 = invoke(stypy.reporting.localization.Localization(__file__, 1278, 8), getitem___8274, int_8272)
    
    # Assigning a type to the variable 'tuple_var_assignment_7435' (line 1278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 8), 'tuple_var_assignment_7435', subscript_call_result_8275)
    
    # Assigning a Subscript to a Name (line 1278):
    
    # Obtaining the type of the subscript
    int_8276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 8), 'int')
    # Getting the type of 'axes' (line 1278)
    axes_8277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 25), 'axes')
    # Obtaining the member '__getitem__' of a type (line 1278)
    getitem___8278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 8), axes_8277, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1278)
    subscript_call_result_8279 = invoke(stypy.reporting.localization.Localization(__file__, 1278, 8), getitem___8278, int_8276)
    
    # Assigning a type to the variable 'tuple_var_assignment_7436' (line 1278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 8), 'tuple_var_assignment_7436', subscript_call_result_8279)
    
    # Assigning a Name to a Name (line 1278):
    # Getting the type of 'tuple_var_assignment_7435' (line 1278)
    tuple_var_assignment_7435_8280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 8), 'tuple_var_assignment_7435')
    # Assigning a type to the variable 'axes_a' (line 1278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 8), 'axes_a', tuple_var_assignment_7435_8280)
    
    # Assigning a Name to a Name (line 1278):
    # Getting the type of 'tuple_var_assignment_7436' (line 1278)
    tuple_var_assignment_7436_8281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 8), 'tuple_var_assignment_7436')
    # Assigning a type to the variable 'axes_b' (line 1278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 16), 'axes_b', tuple_var_assignment_7436_8281)
    # SSA join for try-except statement (line 1272)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1279)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1280):
    
    # Assigning a Call to a Name (line 1280):
    
    # Call to len(...): (line 1280)
    # Processing the call arguments (line 1280)
    # Getting the type of 'axes_a' (line 1280)
    axes_a_8283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 17), 'axes_a', False)
    # Processing the call keyword arguments (line 1280)
    kwargs_8284 = {}
    # Getting the type of 'len' (line 1280)
    len_8282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 13), 'len', False)
    # Calling len(args, kwargs) (line 1280)
    len_call_result_8285 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 13), len_8282, *[axes_a_8283], **kwargs_8284)
    
    # Assigning a type to the variable 'na' (line 1280)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 8), 'na', len_call_result_8285)
    
    # Assigning a Call to a Name (line 1281):
    
    # Assigning a Call to a Name (line 1281):
    
    # Call to list(...): (line 1281)
    # Processing the call arguments (line 1281)
    # Getting the type of 'axes_a' (line 1281)
    axes_a_8287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 22), 'axes_a', False)
    # Processing the call keyword arguments (line 1281)
    kwargs_8288 = {}
    # Getting the type of 'list' (line 1281)
    list_8286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 17), 'list', False)
    # Calling list(args, kwargs) (line 1281)
    list_call_result_8289 = invoke(stypy.reporting.localization.Localization(__file__, 1281, 17), list_8286, *[axes_a_8287], **kwargs_8288)
    
    # Assigning a type to the variable 'axes_a' (line 1281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 8), 'axes_a', list_call_result_8289)
    # SSA branch for the except part of a try statement (line 1279)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1279)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a List to a Name (line 1283):
    
    # Assigning a List to a Name (line 1283):
    
    # Obtaining an instance of the builtin type 'list' (line 1283)
    list_8290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1283)
    # Adding element type (line 1283)
    # Getting the type of 'axes_a' (line 1283)
    axes_a_8291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 18), 'axes_a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1283, 17), list_8290, axes_a_8291)
    
    # Assigning a type to the variable 'axes_a' (line 1283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 8), 'axes_a', list_8290)
    
    # Assigning a Num to a Name (line 1284):
    
    # Assigning a Num to a Name (line 1284):
    int_8292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 13), 'int')
    # Assigning a type to the variable 'na' (line 1284)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1284, 8), 'na', int_8292)
    # SSA join for try-except statement (line 1279)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1285)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1286):
    
    # Assigning a Call to a Name (line 1286):
    
    # Call to len(...): (line 1286)
    # Processing the call arguments (line 1286)
    # Getting the type of 'axes_b' (line 1286)
    axes_b_8294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 17), 'axes_b', False)
    # Processing the call keyword arguments (line 1286)
    kwargs_8295 = {}
    # Getting the type of 'len' (line 1286)
    len_8293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 13), 'len', False)
    # Calling len(args, kwargs) (line 1286)
    len_call_result_8296 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 13), len_8293, *[axes_b_8294], **kwargs_8295)
    
    # Assigning a type to the variable 'nb' (line 1286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 8), 'nb', len_call_result_8296)
    
    # Assigning a Call to a Name (line 1287):
    
    # Assigning a Call to a Name (line 1287):
    
    # Call to list(...): (line 1287)
    # Processing the call arguments (line 1287)
    # Getting the type of 'axes_b' (line 1287)
    axes_b_8298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 22), 'axes_b', False)
    # Processing the call keyword arguments (line 1287)
    kwargs_8299 = {}
    # Getting the type of 'list' (line 1287)
    list_8297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 17), 'list', False)
    # Calling list(args, kwargs) (line 1287)
    list_call_result_8300 = invoke(stypy.reporting.localization.Localization(__file__, 1287, 17), list_8297, *[axes_b_8298], **kwargs_8299)
    
    # Assigning a type to the variable 'axes_b' (line 1287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 8), 'axes_b', list_call_result_8300)
    # SSA branch for the except part of a try statement (line 1285)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1285)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a List to a Name (line 1289):
    
    # Assigning a List to a Name (line 1289):
    
    # Obtaining an instance of the builtin type 'list' (line 1289)
    list_8301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1289, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1289)
    # Adding element type (line 1289)
    # Getting the type of 'axes_b' (line 1289)
    axes_b_8302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 18), 'axes_b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1289, 17), list_8301, axes_b_8302)
    
    # Assigning a type to the variable 'axes_b' (line 1289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'axes_b', list_8301)
    
    # Assigning a Num to a Name (line 1290):
    
    # Assigning a Num to a Name (line 1290):
    int_8303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 13), 'int')
    # Assigning a type to the variable 'nb' (line 1290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'nb', int_8303)
    # SSA join for try-except statement (line 1285)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Tuple (line 1292):
    
    # Assigning a Call to a Name (line 1292):
    
    # Call to asarray(...): (line 1292)
    # Processing the call arguments (line 1292)
    # Getting the type of 'a' (line 1292)
    a_8305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 19), 'a', False)
    # Processing the call keyword arguments (line 1292)
    kwargs_8306 = {}
    # Getting the type of 'asarray' (line 1292)
    asarray_8304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 11), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1292)
    asarray_call_result_8307 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 11), asarray_8304, *[a_8305], **kwargs_8306)
    
    # Assigning a type to the variable 'tuple_assignment_7437' (line 1292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 4), 'tuple_assignment_7437', asarray_call_result_8307)
    
    # Assigning a Call to a Name (line 1292):
    
    # Call to asarray(...): (line 1292)
    # Processing the call arguments (line 1292)
    # Getting the type of 'b' (line 1292)
    b_8309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 31), 'b', False)
    # Processing the call keyword arguments (line 1292)
    kwargs_8310 = {}
    # Getting the type of 'asarray' (line 1292)
    asarray_8308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 23), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1292)
    asarray_call_result_8311 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 23), asarray_8308, *[b_8309], **kwargs_8310)
    
    # Assigning a type to the variable 'tuple_assignment_7438' (line 1292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 4), 'tuple_assignment_7438', asarray_call_result_8311)
    
    # Assigning a Name to a Name (line 1292):
    # Getting the type of 'tuple_assignment_7437' (line 1292)
    tuple_assignment_7437_8312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 4), 'tuple_assignment_7437')
    # Assigning a type to the variable 'a' (line 1292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 4), 'a', tuple_assignment_7437_8312)
    
    # Assigning a Name to a Name (line 1292):
    # Getting the type of 'tuple_assignment_7438' (line 1292)
    tuple_assignment_7438_8313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 4), 'tuple_assignment_7438')
    # Assigning a type to the variable 'b' (line 1292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 7), 'b', tuple_assignment_7438_8313)
    
    # Assigning a Attribute to a Name (line 1293):
    
    # Assigning a Attribute to a Name (line 1293):
    # Getting the type of 'a' (line 1293)
    a_8314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 10), 'a')
    # Obtaining the member 'shape' of a type (line 1293)
    shape_8315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 10), a_8314, 'shape')
    # Assigning a type to the variable 'as_' (line 1293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 4), 'as_', shape_8315)
    
    # Assigning a Call to a Name (line 1294):
    
    # Assigning a Call to a Name (line 1294):
    
    # Call to len(...): (line 1294)
    # Processing the call arguments (line 1294)
    # Getting the type of 'a' (line 1294)
    a_8317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 14), 'a', False)
    # Obtaining the member 'shape' of a type (line 1294)
    shape_8318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 14), a_8317, 'shape')
    # Processing the call keyword arguments (line 1294)
    kwargs_8319 = {}
    # Getting the type of 'len' (line 1294)
    len_8316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 10), 'len', False)
    # Calling len(args, kwargs) (line 1294)
    len_call_result_8320 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 10), len_8316, *[shape_8318], **kwargs_8319)
    
    # Assigning a type to the variable 'nda' (line 1294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 4), 'nda', len_call_result_8320)
    
    # Assigning a Attribute to a Name (line 1295):
    
    # Assigning a Attribute to a Name (line 1295):
    # Getting the type of 'b' (line 1295)
    b_8321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 9), 'b')
    # Obtaining the member 'shape' of a type (line 1295)
    shape_8322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 9), b_8321, 'shape')
    # Assigning a type to the variable 'bs' (line 1295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 4), 'bs', shape_8322)
    
    # Assigning a Call to a Name (line 1296):
    
    # Assigning a Call to a Name (line 1296):
    
    # Call to len(...): (line 1296)
    # Processing the call arguments (line 1296)
    # Getting the type of 'b' (line 1296)
    b_8324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 14), 'b', False)
    # Obtaining the member 'shape' of a type (line 1296)
    shape_8325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 14), b_8324, 'shape')
    # Processing the call keyword arguments (line 1296)
    kwargs_8326 = {}
    # Getting the type of 'len' (line 1296)
    len_8323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 10), 'len', False)
    # Calling len(args, kwargs) (line 1296)
    len_call_result_8327 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 10), len_8323, *[shape_8325], **kwargs_8326)
    
    # Assigning a type to the variable 'ndb' (line 1296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 4), 'ndb', len_call_result_8327)
    
    # Assigning a Name to a Name (line 1297):
    
    # Assigning a Name to a Name (line 1297):
    # Getting the type of 'True' (line 1297)
    True_8328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'True')
    # Assigning a type to the variable 'equal' (line 1297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 4), 'equal', True_8328)
    
    
    # Getting the type of 'na' (line 1298)
    na_8329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 7), 'na')
    # Getting the type of 'nb' (line 1298)
    nb_8330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 13), 'nb')
    # Applying the binary operator '!=' (line 1298)
    result_ne_8331 = python_operator(stypy.reporting.localization.Localization(__file__, 1298, 7), '!=', na_8329, nb_8330)
    
    # Testing the type of an if condition (line 1298)
    if_condition_8332 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1298, 4), result_ne_8331)
    # Assigning a type to the variable 'if_condition_8332' (line 1298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'if_condition_8332', if_condition_8332)
    # SSA begins for if statement (line 1298)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1299):
    
    # Assigning a Name to a Name (line 1299):
    # Getting the type of 'False' (line 1299)
    False_8333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 16), 'False')
    # Assigning a type to the variable 'equal' (line 1299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 8), 'equal', False_8333)
    # SSA branch for the else part of an if statement (line 1298)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to range(...): (line 1301)
    # Processing the call arguments (line 1301)
    # Getting the type of 'na' (line 1301)
    na_8335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 23), 'na', False)
    # Processing the call keyword arguments (line 1301)
    kwargs_8336 = {}
    # Getting the type of 'range' (line 1301)
    range_8334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 17), 'range', False)
    # Calling range(args, kwargs) (line 1301)
    range_call_result_8337 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 17), range_8334, *[na_8335], **kwargs_8336)
    
    # Testing the type of a for loop iterable (line 1301)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1301, 8), range_call_result_8337)
    # Getting the type of the for loop variable (line 1301)
    for_loop_var_8338 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1301, 8), range_call_result_8337)
    # Assigning a type to the variable 'k' (line 1301)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 8), 'k', for_loop_var_8338)
    # SSA begins for a for statement (line 1301)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1302)
    k_8339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 26), 'k')
    # Getting the type of 'axes_a' (line 1302)
    axes_a_8340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 19), 'axes_a')
    # Obtaining the member '__getitem__' of a type (line 1302)
    getitem___8341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 19), axes_a_8340, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1302)
    subscript_call_result_8342 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 19), getitem___8341, k_8339)
    
    # Getting the type of 'as_' (line 1302)
    as__8343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 15), 'as_')
    # Obtaining the member '__getitem__' of a type (line 1302)
    getitem___8344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 15), as__8343, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1302)
    subscript_call_result_8345 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 15), getitem___8344, subscript_call_result_8342)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1302)
    k_8346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 43), 'k')
    # Getting the type of 'axes_b' (line 1302)
    axes_b_8347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 36), 'axes_b')
    # Obtaining the member '__getitem__' of a type (line 1302)
    getitem___8348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 36), axes_b_8347, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1302)
    subscript_call_result_8349 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 36), getitem___8348, k_8346)
    
    # Getting the type of 'bs' (line 1302)
    bs_8350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 33), 'bs')
    # Obtaining the member '__getitem__' of a type (line 1302)
    getitem___8351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 33), bs_8350, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1302)
    subscript_call_result_8352 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 33), getitem___8351, subscript_call_result_8349)
    
    # Applying the binary operator '!=' (line 1302)
    result_ne_8353 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 15), '!=', subscript_call_result_8345, subscript_call_result_8352)
    
    # Testing the type of an if condition (line 1302)
    if_condition_8354 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1302, 12), result_ne_8353)
    # Assigning a type to the variable 'if_condition_8354' (line 1302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 12), 'if_condition_8354', if_condition_8354)
    # SSA begins for if statement (line 1302)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1303):
    
    # Assigning a Name to a Name (line 1303):
    # Getting the type of 'False' (line 1303)
    False_8355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 24), 'False')
    # Assigning a type to the variable 'equal' (line 1303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 16), 'equal', False_8355)
    # SSA join for if statement (line 1302)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1305)
    k_8356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 22), 'k')
    # Getting the type of 'axes_a' (line 1305)
    axes_a_8357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 15), 'axes_a')
    # Obtaining the member '__getitem__' of a type (line 1305)
    getitem___8358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 15), axes_a_8357, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
    subscript_call_result_8359 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 15), getitem___8358, k_8356)
    
    int_8360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 27), 'int')
    # Applying the binary operator '<' (line 1305)
    result_lt_8361 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 15), '<', subscript_call_result_8359, int_8360)
    
    # Testing the type of an if condition (line 1305)
    if_condition_8362 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1305, 12), result_lt_8361)
    # Assigning a type to the variable 'if_condition_8362' (line 1305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 12), 'if_condition_8362', if_condition_8362)
    # SSA begins for if statement (line 1305)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'axes_a' (line 1306)
    axes_a_8363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 16), 'axes_a')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1306)
    k_8364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 23), 'k')
    # Getting the type of 'axes_a' (line 1306)
    axes_a_8365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 16), 'axes_a')
    # Obtaining the member '__getitem__' of a type (line 1306)
    getitem___8366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 16), axes_a_8365, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1306)
    subscript_call_result_8367 = invoke(stypy.reporting.localization.Localization(__file__, 1306, 16), getitem___8366, k_8364)
    
    # Getting the type of 'nda' (line 1306)
    nda_8368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 29), 'nda')
    # Applying the binary operator '+=' (line 1306)
    result_iadd_8369 = python_operator(stypy.reporting.localization.Localization(__file__, 1306, 16), '+=', subscript_call_result_8367, nda_8368)
    # Getting the type of 'axes_a' (line 1306)
    axes_a_8370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 16), 'axes_a')
    # Getting the type of 'k' (line 1306)
    k_8371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 23), 'k')
    # Storing an element on a container (line 1306)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1306, 16), axes_a_8370, (k_8371, result_iadd_8369))
    
    # SSA join for if statement (line 1305)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1307)
    k_8372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 22), 'k')
    # Getting the type of 'axes_b' (line 1307)
    axes_b_8373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 15), 'axes_b')
    # Obtaining the member '__getitem__' of a type (line 1307)
    getitem___8374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 15), axes_b_8373, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1307)
    subscript_call_result_8375 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 15), getitem___8374, k_8372)
    
    int_8376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 27), 'int')
    # Applying the binary operator '<' (line 1307)
    result_lt_8377 = python_operator(stypy.reporting.localization.Localization(__file__, 1307, 15), '<', subscript_call_result_8375, int_8376)
    
    # Testing the type of an if condition (line 1307)
    if_condition_8378 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1307, 12), result_lt_8377)
    # Assigning a type to the variable 'if_condition_8378' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'if_condition_8378', if_condition_8378)
    # SSA begins for if statement (line 1307)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'axes_b' (line 1308)
    axes_b_8379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 16), 'axes_b')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1308)
    k_8380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 23), 'k')
    # Getting the type of 'axes_b' (line 1308)
    axes_b_8381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 16), 'axes_b')
    # Obtaining the member '__getitem__' of a type (line 1308)
    getitem___8382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 16), axes_b_8381, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1308)
    subscript_call_result_8383 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 16), getitem___8382, k_8380)
    
    # Getting the type of 'ndb' (line 1308)
    ndb_8384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 29), 'ndb')
    # Applying the binary operator '+=' (line 1308)
    result_iadd_8385 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 16), '+=', subscript_call_result_8383, ndb_8384)
    # Getting the type of 'axes_b' (line 1308)
    axes_b_8386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 16), 'axes_b')
    # Getting the type of 'k' (line 1308)
    k_8387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 23), 'k')
    # Storing an element on a container (line 1308)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1308, 16), axes_b_8386, (k_8387, result_iadd_8385))
    
    # SSA join for if statement (line 1307)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1298)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'equal' (line 1309)
    equal_8388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 11), 'equal')
    # Applying the 'not' unary operator (line 1309)
    result_not__8389 = python_operator(stypy.reporting.localization.Localization(__file__, 1309, 7), 'not', equal_8388)
    
    # Testing the type of an if condition (line 1309)
    if_condition_8390 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1309, 4), result_not__8389)
    # Assigning a type to the variable 'if_condition_8390' (line 1309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 4), 'if_condition_8390', if_condition_8390)
    # SSA begins for if statement (line 1309)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1310)
    # Processing the call arguments (line 1310)
    str_8392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 25), 'str', 'shape-mismatch for sum')
    # Processing the call keyword arguments (line 1310)
    kwargs_8393 = {}
    # Getting the type of 'ValueError' (line 1310)
    ValueError_8391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1310)
    ValueError_call_result_8394 = invoke(stypy.reporting.localization.Localization(__file__, 1310, 14), ValueError_8391, *[str_8392], **kwargs_8393)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1310, 8), ValueError_call_result_8394, 'raise parameter', BaseException)
    # SSA join for if statement (line 1309)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 1314):
    
    # Assigning a ListComp to a Name (line 1314):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 1314)
    # Processing the call arguments (line 1314)
    # Getting the type of 'nda' (line 1314)
    nda_8400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 30), 'nda', False)
    # Processing the call keyword arguments (line 1314)
    kwargs_8401 = {}
    # Getting the type of 'range' (line 1314)
    range_8399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 24), 'range', False)
    # Calling range(args, kwargs) (line 1314)
    range_call_result_8402 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 24), range_8399, *[nda_8400], **kwargs_8401)
    
    comprehension_8403 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 13), range_call_result_8402)
    # Assigning a type to the variable 'k' (line 1314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 13), 'k', comprehension_8403)
    
    # Getting the type of 'k' (line 1314)
    k_8396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 38), 'k')
    # Getting the type of 'axes_a' (line 1314)
    axes_a_8397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 47), 'axes_a')
    # Applying the binary operator 'notin' (line 1314)
    result_contains_8398 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 38), 'notin', k_8396, axes_a_8397)
    
    # Getting the type of 'k' (line 1314)
    k_8395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 13), 'k')
    list_8404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 13), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 13), list_8404, k_8395)
    # Assigning a type to the variable 'notin' (line 1314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 4), 'notin', list_8404)
    
    # Assigning a BinOp to a Name (line 1315):
    
    # Assigning a BinOp to a Name (line 1315):
    # Getting the type of 'notin' (line 1315)
    notin_8405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 16), 'notin')
    # Getting the type of 'axes_a' (line 1315)
    axes_a_8406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 24), 'axes_a')
    # Applying the binary operator '+' (line 1315)
    result_add_8407 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 16), '+', notin_8405, axes_a_8406)
    
    # Assigning a type to the variable 'newaxes_a' (line 1315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 4), 'newaxes_a', result_add_8407)
    
    # Assigning a Num to a Name (line 1316):
    
    # Assigning a Num to a Name (line 1316):
    int_8408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 9), 'int')
    # Assigning a type to the variable 'N2' (line 1316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 4), 'N2', int_8408)
    
    # Getting the type of 'axes_a' (line 1317)
    axes_a_8409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 16), 'axes_a')
    # Testing the type of a for loop iterable (line 1317)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1317, 4), axes_a_8409)
    # Getting the type of the for loop variable (line 1317)
    for_loop_var_8410 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1317, 4), axes_a_8409)
    # Assigning a type to the variable 'axis' (line 1317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 4), 'axis', for_loop_var_8410)
    # SSA begins for a for statement (line 1317)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'N2' (line 1318)
    N2_8411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 8), 'N2')
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1318)
    axis_8412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 18), 'axis')
    # Getting the type of 'as_' (line 1318)
    as__8413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 14), 'as_')
    # Obtaining the member '__getitem__' of a type (line 1318)
    getitem___8414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 14), as__8413, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
    subscript_call_result_8415 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 14), getitem___8414, axis_8412)
    
    # Applying the binary operator '*=' (line 1318)
    result_imul_8416 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 8), '*=', N2_8411, subscript_call_result_8415)
    # Assigning a type to the variable 'N2' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 8), 'N2', result_imul_8416)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Name (line 1319):
    
    # Assigning a Tuple to a Name (line 1319):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1319)
    tuple_8417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1319)
    # Adding element type (line 1319)
    int_8418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1319, 18), tuple_8417, int_8418)
    # Adding element type (line 1319)
    # Getting the type of 'N2' (line 1319)
    N2_8419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 22), 'N2')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1319, 18), tuple_8417, N2_8419)
    
    # Assigning a type to the variable 'newshape_a' (line 1319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 4), 'newshape_a', tuple_8417)
    
    # Assigning a ListComp to a Name (line 1320):
    
    # Assigning a ListComp to a Name (line 1320):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'notin' (line 1320)
    notin_8424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 34), 'notin')
    comprehension_8425 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1320, 12), notin_8424)
    # Assigning a type to the variable 'axis' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'axis', comprehension_8425)
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1320)
    axis_8420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 16), 'axis')
    # Getting the type of 'as_' (line 1320)
    as__8421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'as_')
    # Obtaining the member '__getitem__' of a type (line 1320)
    getitem___8422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 12), as__8421, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1320)
    subscript_call_result_8423 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 12), getitem___8422, axis_8420)
    
    list_8426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1320, 12), list_8426, subscript_call_result_8423)
    # Assigning a type to the variable 'olda' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 4), 'olda', list_8426)
    
    # Assigning a ListComp to a Name (line 1322):
    
    # Assigning a ListComp to a Name (line 1322):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 1322)
    # Processing the call arguments (line 1322)
    # Getting the type of 'ndb' (line 1322)
    ndb_8432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 30), 'ndb', False)
    # Processing the call keyword arguments (line 1322)
    kwargs_8433 = {}
    # Getting the type of 'range' (line 1322)
    range_8431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 24), 'range', False)
    # Calling range(args, kwargs) (line 1322)
    range_call_result_8434 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 24), range_8431, *[ndb_8432], **kwargs_8433)
    
    comprehension_8435 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1322, 13), range_call_result_8434)
    # Assigning a type to the variable 'k' (line 1322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1322, 13), 'k', comprehension_8435)
    
    # Getting the type of 'k' (line 1322)
    k_8428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 38), 'k')
    # Getting the type of 'axes_b' (line 1322)
    axes_b_8429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 47), 'axes_b')
    # Applying the binary operator 'notin' (line 1322)
    result_contains_8430 = python_operator(stypy.reporting.localization.Localization(__file__, 1322, 38), 'notin', k_8428, axes_b_8429)
    
    # Getting the type of 'k' (line 1322)
    k_8427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 13), 'k')
    list_8436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1322, 13), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1322, 13), list_8436, k_8427)
    # Assigning a type to the variable 'notin' (line 1322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1322, 4), 'notin', list_8436)
    
    # Assigning a BinOp to a Name (line 1323):
    
    # Assigning a BinOp to a Name (line 1323):
    # Getting the type of 'axes_b' (line 1323)
    axes_b_8437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 16), 'axes_b')
    # Getting the type of 'notin' (line 1323)
    notin_8438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 25), 'notin')
    # Applying the binary operator '+' (line 1323)
    result_add_8439 = python_operator(stypy.reporting.localization.Localization(__file__, 1323, 16), '+', axes_b_8437, notin_8438)
    
    # Assigning a type to the variable 'newaxes_b' (line 1323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 4), 'newaxes_b', result_add_8439)
    
    # Assigning a Num to a Name (line 1324):
    
    # Assigning a Num to a Name (line 1324):
    int_8440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, 9), 'int')
    # Assigning a type to the variable 'N2' (line 1324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 4), 'N2', int_8440)
    
    # Getting the type of 'axes_b' (line 1325)
    axes_b_8441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 16), 'axes_b')
    # Testing the type of a for loop iterable (line 1325)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1325, 4), axes_b_8441)
    # Getting the type of the for loop variable (line 1325)
    for_loop_var_8442 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1325, 4), axes_b_8441)
    # Assigning a type to the variable 'axis' (line 1325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1325, 4), 'axis', for_loop_var_8442)
    # SSA begins for a for statement (line 1325)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'N2' (line 1326)
    N2_8443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 8), 'N2')
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1326)
    axis_8444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 17), 'axis')
    # Getting the type of 'bs' (line 1326)
    bs_8445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 14), 'bs')
    # Obtaining the member '__getitem__' of a type (line 1326)
    getitem___8446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 14), bs_8445, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1326)
    subscript_call_result_8447 = invoke(stypy.reporting.localization.Localization(__file__, 1326, 14), getitem___8446, axis_8444)
    
    # Applying the binary operator '*=' (line 1326)
    result_imul_8448 = python_operator(stypy.reporting.localization.Localization(__file__, 1326, 8), '*=', N2_8443, subscript_call_result_8447)
    # Assigning a type to the variable 'N2' (line 1326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 8), 'N2', result_imul_8448)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Name (line 1327):
    
    # Assigning a Tuple to a Name (line 1327):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1327)
    tuple_8449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1327)
    # Adding element type (line 1327)
    # Getting the type of 'N2' (line 1327)
    N2_8450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 18), 'N2')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1327, 18), tuple_8449, N2_8450)
    # Adding element type (line 1327)
    int_8451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1327, 18), tuple_8449, int_8451)
    
    # Assigning a type to the variable 'newshape_b' (line 1327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 4), 'newshape_b', tuple_8449)
    
    # Assigning a ListComp to a Name (line 1328):
    
    # Assigning a ListComp to a Name (line 1328):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'notin' (line 1328)
    notin_8456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 33), 'notin')
    comprehension_8457 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 12), notin_8456)
    # Assigning a type to the variable 'axis' (line 1328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 12), 'axis', comprehension_8457)
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1328)
    axis_8452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 15), 'axis')
    # Getting the type of 'bs' (line 1328)
    bs_8453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 12), 'bs')
    # Obtaining the member '__getitem__' of a type (line 1328)
    getitem___8454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1328, 12), bs_8453, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1328)
    subscript_call_result_8455 = invoke(stypy.reporting.localization.Localization(__file__, 1328, 12), getitem___8454, axis_8452)
    
    list_8458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 12), list_8458, subscript_call_result_8455)
    # Assigning a type to the variable 'oldb' (line 1328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 4), 'oldb', list_8458)
    
    # Assigning a Call to a Name (line 1330):
    
    # Assigning a Call to a Name (line 1330):
    
    # Call to reshape(...): (line 1330)
    # Processing the call arguments (line 1330)
    # Getting the type of 'newshape_a' (line 1330)
    newshape_a_8465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 40), 'newshape_a', False)
    # Processing the call keyword arguments (line 1330)
    kwargs_8466 = {}
    
    # Call to transpose(...): (line 1330)
    # Processing the call arguments (line 1330)
    # Getting the type of 'newaxes_a' (line 1330)
    newaxes_a_8461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 21), 'newaxes_a', False)
    # Processing the call keyword arguments (line 1330)
    kwargs_8462 = {}
    # Getting the type of 'a' (line 1330)
    a_8459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 9), 'a', False)
    # Obtaining the member 'transpose' of a type (line 1330)
    transpose_8460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 9), a_8459, 'transpose')
    # Calling transpose(args, kwargs) (line 1330)
    transpose_call_result_8463 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 9), transpose_8460, *[newaxes_a_8461], **kwargs_8462)
    
    # Obtaining the member 'reshape' of a type (line 1330)
    reshape_8464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 9), transpose_call_result_8463, 'reshape')
    # Calling reshape(args, kwargs) (line 1330)
    reshape_call_result_8467 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 9), reshape_8464, *[newshape_a_8465], **kwargs_8466)
    
    # Assigning a type to the variable 'at' (line 1330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 4), 'at', reshape_call_result_8467)
    
    # Assigning a Call to a Name (line 1331):
    
    # Assigning a Call to a Name (line 1331):
    
    # Call to reshape(...): (line 1331)
    # Processing the call arguments (line 1331)
    # Getting the type of 'newshape_b' (line 1331)
    newshape_b_8474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 40), 'newshape_b', False)
    # Processing the call keyword arguments (line 1331)
    kwargs_8475 = {}
    
    # Call to transpose(...): (line 1331)
    # Processing the call arguments (line 1331)
    # Getting the type of 'newaxes_b' (line 1331)
    newaxes_b_8470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 21), 'newaxes_b', False)
    # Processing the call keyword arguments (line 1331)
    kwargs_8471 = {}
    # Getting the type of 'b' (line 1331)
    b_8468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 9), 'b', False)
    # Obtaining the member 'transpose' of a type (line 1331)
    transpose_8469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 9), b_8468, 'transpose')
    # Calling transpose(args, kwargs) (line 1331)
    transpose_call_result_8472 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 9), transpose_8469, *[newaxes_b_8470], **kwargs_8471)
    
    # Obtaining the member 'reshape' of a type (line 1331)
    reshape_8473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 9), transpose_call_result_8472, 'reshape')
    # Calling reshape(args, kwargs) (line 1331)
    reshape_call_result_8476 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 9), reshape_8473, *[newshape_b_8474], **kwargs_8475)
    
    # Assigning a type to the variable 'bt' (line 1331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1331, 4), 'bt', reshape_call_result_8476)
    
    # Assigning a Call to a Name (line 1332):
    
    # Assigning a Call to a Name (line 1332):
    
    # Call to dot(...): (line 1332)
    # Processing the call arguments (line 1332)
    # Getting the type of 'at' (line 1332)
    at_8478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 14), 'at', False)
    # Getting the type of 'bt' (line 1332)
    bt_8479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 18), 'bt', False)
    # Processing the call keyword arguments (line 1332)
    kwargs_8480 = {}
    # Getting the type of 'dot' (line 1332)
    dot_8477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 10), 'dot', False)
    # Calling dot(args, kwargs) (line 1332)
    dot_call_result_8481 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 10), dot_8477, *[at_8478, bt_8479], **kwargs_8480)
    
    # Assigning a type to the variable 'res' (line 1332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 4), 'res', dot_call_result_8481)
    
    # Call to reshape(...): (line 1333)
    # Processing the call arguments (line 1333)
    # Getting the type of 'olda' (line 1333)
    olda_8484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 23), 'olda', False)
    # Getting the type of 'oldb' (line 1333)
    oldb_8485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 30), 'oldb', False)
    # Applying the binary operator '+' (line 1333)
    result_add_8486 = python_operator(stypy.reporting.localization.Localization(__file__, 1333, 23), '+', olda_8484, oldb_8485)
    
    # Processing the call keyword arguments (line 1333)
    kwargs_8487 = {}
    # Getting the type of 'res' (line 1333)
    res_8482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 11), 'res', False)
    # Obtaining the member 'reshape' of a type (line 1333)
    reshape_8483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1333, 11), res_8482, 'reshape')
    # Calling reshape(args, kwargs) (line 1333)
    reshape_call_result_8488 = invoke(stypy.reporting.localization.Localization(__file__, 1333, 11), reshape_8483, *[result_add_8486], **kwargs_8487)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 4), 'stypy_return_type', reshape_call_result_8488)
    
    # ################# End of 'tensordot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tensordot' in the type store
    # Getting the type of 'stypy_return_type' (line 1150)
    stypy_return_type_8489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8489)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tensordot'
    return stypy_return_type_8489

# Assigning a type to the variable 'tensordot' (line 1150)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 0), 'tensordot', tensordot)

@norecursion
def roll(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1335)
    None_8490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 24), 'None')
    defaults = [None_8490]
    # Create a new context for function 'roll'
    module_type_store = module_type_store.open_function_context('roll', 1335, 0, False)
    
    # Passed parameters checking function
    roll.stypy_localization = localization
    roll.stypy_type_of_self = None
    roll.stypy_type_store = module_type_store
    roll.stypy_function_name = 'roll'
    roll.stypy_param_names_list = ['a', 'shift', 'axis']
    roll.stypy_varargs_param_name = None
    roll.stypy_kwargs_param_name = None
    roll.stypy_call_defaults = defaults
    roll.stypy_call_varargs = varargs
    roll.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roll', ['a', 'shift', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roll', localization, ['a', 'shift', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roll(...)' code ##################

    str_8491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, (-1)), 'str', '\n    Roll array elements along a given axis.\n\n    Elements that roll beyond the last position are re-introduced at\n    the first.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    shift : int\n        The number of places by which elements are shifted.\n    axis : int, optional\n        The axis along which elements are shifted.  By default, the array\n        is flattened before shifting, after which the original\n        shape is restored.\n\n    Returns\n    -------\n    res : ndarray\n        Output array, with the same shape as `a`.\n\n    See Also\n    --------\n    rollaxis : Roll the specified axis backwards, until it lies in a\n               given position.\n\n    Examples\n    --------\n    >>> x = np.arange(10)\n    >>> np.roll(x, 2)\n    array([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])\n\n    >>> x2 = np.reshape(x, (2,5))\n    >>> x2\n    array([[0, 1, 2, 3, 4],\n           [5, 6, 7, 8, 9]])\n    >>> np.roll(x2, 1)\n    array([[9, 0, 1, 2, 3],\n           [4, 5, 6, 7, 8]])\n    >>> np.roll(x2, 1, axis=0)\n    array([[5, 6, 7, 8, 9],\n           [0, 1, 2, 3, 4]])\n    >>> np.roll(x2, 1, axis=1)\n    array([[4, 0, 1, 2, 3],\n           [9, 5, 6, 7, 8]])\n\n    ')
    
    # Assigning a Call to a Name (line 1384):
    
    # Assigning a Call to a Name (line 1384):
    
    # Call to asanyarray(...): (line 1384)
    # Processing the call arguments (line 1384)
    # Getting the type of 'a' (line 1384)
    a_8493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 19), 'a', False)
    # Processing the call keyword arguments (line 1384)
    kwargs_8494 = {}
    # Getting the type of 'asanyarray' (line 1384)
    asanyarray_8492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 8), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 1384)
    asanyarray_call_result_8495 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 8), asanyarray_8492, *[a_8493], **kwargs_8494)
    
    # Assigning a type to the variable 'a' (line 1384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 4), 'a', asanyarray_call_result_8495)
    
    # Type idiom detected: calculating its left and rigth part (line 1385)
    # Getting the type of 'axis' (line 1385)
    axis_8496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 7), 'axis')
    # Getting the type of 'None' (line 1385)
    None_8497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 15), 'None')
    
    (may_be_8498, more_types_in_union_8499) = may_be_none(axis_8496, None_8497)

    if may_be_8498:

        if more_types_in_union_8499:
            # Runtime conditional SSA (line 1385)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 1386):
        
        # Assigning a Attribute to a Name (line 1386):
        # Getting the type of 'a' (line 1386)
        a_8500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 12), 'a')
        # Obtaining the member 'size' of a type (line 1386)
        size_8501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1386, 12), a_8500, 'size')
        # Assigning a type to the variable 'n' (line 1386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 8), 'n', size_8501)
        
        # Assigning a Name to a Name (line 1387):
        
        # Assigning a Name to a Name (line 1387):
        # Getting the type of 'True' (line 1387)
        True_8502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 18), 'True')
        # Assigning a type to the variable 'reshape' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'reshape', True_8502)

        if more_types_in_union_8499:
            # Runtime conditional SSA for else branch (line 1385)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_8498) or more_types_in_union_8499):
        
        
        # SSA begins for try-except statement (line 1389)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 1390):
        
        # Assigning a Subscript to a Name (line 1390):
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 1390)
        axis_8503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 24), 'axis')
        # Getting the type of 'a' (line 1390)
        a_8504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 16), 'a')
        # Obtaining the member 'shape' of a type (line 1390)
        shape_8505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 16), a_8504, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1390)
        getitem___8506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 16), shape_8505, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1390)
        subscript_call_result_8507 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 16), getitem___8506, axis_8503)
        
        # Assigning a type to the variable 'n' (line 1390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 12), 'n', subscript_call_result_8507)
        # SSA branch for the except part of a try statement (line 1389)
        # SSA branch for the except 'IndexError' branch of a try statement (line 1389)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1392)
        # Processing the call arguments (line 1392)
        str_8509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 29), 'str', 'axis must be >= 0 and < %d')
        # Getting the type of 'a' (line 1392)
        a_8510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 60), 'a', False)
        # Obtaining the member 'ndim' of a type (line 1392)
        ndim_8511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 60), a_8510, 'ndim')
        # Applying the binary operator '%' (line 1392)
        result_mod_8512 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 29), '%', str_8509, ndim_8511)
        
        # Processing the call keyword arguments (line 1392)
        kwargs_8513 = {}
        # Getting the type of 'ValueError' (line 1392)
        ValueError_8508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1392)
        ValueError_call_result_8514 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 18), ValueError_8508, *[result_mod_8512], **kwargs_8513)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1392, 12), ValueError_call_result_8514, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1389)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1393):
        
        # Assigning a Name to a Name (line 1393):
        # Getting the type of 'False' (line 1393)
        False_8515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 18), 'False')
        # Assigning a type to the variable 'reshape' (line 1393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 8), 'reshape', False_8515)

        if (may_be_8498 and more_types_in_union_8499):
            # SSA join for if statement (line 1385)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'n' (line 1394)
    n_8516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 7), 'n')
    int_8517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 12), 'int')
    # Applying the binary operator '==' (line 1394)
    result_eq_8518 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 7), '==', n_8516, int_8517)
    
    # Testing the type of an if condition (line 1394)
    if_condition_8519 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1394, 4), result_eq_8518)
    # Assigning a type to the variable 'if_condition_8519' (line 1394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 4), 'if_condition_8519', if_condition_8519)
    # SSA begins for if statement (line 1394)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'a' (line 1395)
    a_8520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 15), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 1395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 8), 'stypy_return_type', a_8520)
    # SSA join for if statement (line 1394)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'shift' (line 1396)
    shift_8521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 4), 'shift')
    # Getting the type of 'n' (line 1396)
    n_8522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 13), 'n')
    # Applying the binary operator '%=' (line 1396)
    result_imod_8523 = python_operator(stypy.reporting.localization.Localization(__file__, 1396, 4), '%=', shift_8521, n_8522)
    # Assigning a type to the variable 'shift' (line 1396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1396, 4), 'shift', result_imod_8523)
    
    
    # Assigning a Call to a Name (line 1397):
    
    # Assigning a Call to a Name (line 1397):
    
    # Call to concatenate(...): (line 1397)
    # Processing the call arguments (line 1397)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1397)
    tuple_8525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1397)
    # Adding element type (line 1397)
    
    # Call to arange(...): (line 1397)
    # Processing the call arguments (line 1397)
    # Getting the type of 'n' (line 1397)
    n_8527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 34), 'n', False)
    # Getting the type of 'shift' (line 1397)
    shift_8528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 38), 'shift', False)
    # Applying the binary operator '-' (line 1397)
    result_sub_8529 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 34), '-', n_8527, shift_8528)
    
    # Getting the type of 'n' (line 1397)
    n_8530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 45), 'n', False)
    # Processing the call keyword arguments (line 1397)
    kwargs_8531 = {}
    # Getting the type of 'arange' (line 1397)
    arange_8526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 27), 'arange', False)
    # Calling arange(args, kwargs) (line 1397)
    arange_call_result_8532 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 27), arange_8526, *[result_sub_8529, n_8530], **kwargs_8531)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1397, 27), tuple_8525, arange_call_result_8532)
    # Adding element type (line 1397)
    
    # Call to arange(...): (line 1397)
    # Processing the call arguments (line 1397)
    # Getting the type of 'n' (line 1397)
    n_8534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 56), 'n', False)
    # Getting the type of 'shift' (line 1397)
    shift_8535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 60), 'shift', False)
    # Applying the binary operator '-' (line 1397)
    result_sub_8536 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 56), '-', n_8534, shift_8535)
    
    # Processing the call keyword arguments (line 1397)
    kwargs_8537 = {}
    # Getting the type of 'arange' (line 1397)
    arange_8533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 49), 'arange', False)
    # Calling arange(args, kwargs) (line 1397)
    arange_call_result_8538 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 49), arange_8533, *[result_sub_8536], **kwargs_8537)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1397, 27), tuple_8525, arange_call_result_8538)
    
    # Processing the call keyword arguments (line 1397)
    kwargs_8539 = {}
    # Getting the type of 'concatenate' (line 1397)
    concatenate_8524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 14), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 1397)
    concatenate_call_result_8540 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 14), concatenate_8524, *[tuple_8525], **kwargs_8539)
    
    # Assigning a type to the variable 'indexes' (line 1397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 4), 'indexes', concatenate_call_result_8540)
    
    # Assigning a Call to a Name (line 1398):
    
    # Assigning a Call to a Name (line 1398):
    
    # Call to take(...): (line 1398)
    # Processing the call arguments (line 1398)
    # Getting the type of 'indexes' (line 1398)
    indexes_8543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 17), 'indexes', False)
    # Getting the type of 'axis' (line 1398)
    axis_8544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 26), 'axis', False)
    # Processing the call keyword arguments (line 1398)
    kwargs_8545 = {}
    # Getting the type of 'a' (line 1398)
    a_8541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 10), 'a', False)
    # Obtaining the member 'take' of a type (line 1398)
    take_8542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 10), a_8541, 'take')
    # Calling take(args, kwargs) (line 1398)
    take_call_result_8546 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 10), take_8542, *[indexes_8543, axis_8544], **kwargs_8545)
    
    # Assigning a type to the variable 'res' (line 1398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 4), 'res', take_call_result_8546)
    
    # Getting the type of 'reshape' (line 1399)
    reshape_8547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 7), 'reshape')
    # Testing the type of an if condition (line 1399)
    if_condition_8548 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1399, 4), reshape_8547)
    # Assigning a type to the variable 'if_condition_8548' (line 1399)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1399, 4), 'if_condition_8548', if_condition_8548)
    # SSA begins for if statement (line 1399)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1400):
    
    # Assigning a Call to a Name (line 1400):
    
    # Call to reshape(...): (line 1400)
    # Processing the call arguments (line 1400)
    # Getting the type of 'a' (line 1400)
    a_8551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 26), 'a', False)
    # Obtaining the member 'shape' of a type (line 1400)
    shape_8552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 26), a_8551, 'shape')
    # Processing the call keyword arguments (line 1400)
    kwargs_8553 = {}
    # Getting the type of 'res' (line 1400)
    res_8549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 14), 'res', False)
    # Obtaining the member 'reshape' of a type (line 1400)
    reshape_8550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 14), res_8549, 'reshape')
    # Calling reshape(args, kwargs) (line 1400)
    reshape_call_result_8554 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 14), reshape_8550, *[shape_8552], **kwargs_8553)
    
    # Assigning a type to the variable 'res' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'res', reshape_call_result_8554)
    # SSA join for if statement (line 1399)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'res' (line 1401)
    res_8555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 1401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 4), 'stypy_return_type', res_8555)
    
    # ################# End of 'roll(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roll' in the type store
    # Getting the type of 'stypy_return_type' (line 1335)
    stypy_return_type_8556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8556)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roll'
    return stypy_return_type_8556

# Assigning a type to the variable 'roll' (line 1335)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 0), 'roll', roll)

@norecursion
def rollaxis(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_8557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 28), 'int')
    defaults = [int_8557]
    # Create a new context for function 'rollaxis'
    module_type_store = module_type_store.open_function_context('rollaxis', 1404, 0, False)
    
    # Passed parameters checking function
    rollaxis.stypy_localization = localization
    rollaxis.stypy_type_of_self = None
    rollaxis.stypy_type_store = module_type_store
    rollaxis.stypy_function_name = 'rollaxis'
    rollaxis.stypy_param_names_list = ['a', 'axis', 'start']
    rollaxis.stypy_varargs_param_name = None
    rollaxis.stypy_kwargs_param_name = None
    rollaxis.stypy_call_defaults = defaults
    rollaxis.stypy_call_varargs = varargs
    rollaxis.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rollaxis', ['a', 'axis', 'start'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rollaxis', localization, ['a', 'axis', 'start'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rollaxis(...)' code ##################

    str_8558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, (-1)), 'str', '\n    Roll the specified axis backwards, until it lies in a given position.\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array.\n    axis : int\n        The axis to roll backwards.  The positions of the other axes do not\n        change relative to one another.\n    start : int, optional\n        The axis is rolled until it lies before this position.  The default,\n        0, results in a "complete" roll.\n\n    Returns\n    -------\n    res : ndarray\n        For Numpy >= 1.10 a view of `a` is always returned. For earlier\n        Numpy versions a view of `a` is returned only if the order of the\n        axes is changed, otherwise the input array is returned.\n\n    See Also\n    --------\n    moveaxis : Move array axes to new positions.\n    roll : Roll the elements of an array by a number of positions along a\n        given axis.\n\n    Examples\n    --------\n    >>> a = np.ones((3,4,5,6))\n    >>> np.rollaxis(a, 3, 1).shape\n    (3, 6, 4, 5)\n    >>> np.rollaxis(a, 2).shape\n    (5, 3, 4, 6)\n    >>> np.rollaxis(a, 1, 4).shape\n    (3, 5, 6, 4)\n\n    ')
    
    # Assigning a Attribute to a Name (line 1443):
    
    # Assigning a Attribute to a Name (line 1443):
    # Getting the type of 'a' (line 1443)
    a_8559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 8), 'a')
    # Obtaining the member 'ndim' of a type (line 1443)
    ndim_8560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 8), a_8559, 'ndim')
    # Assigning a type to the variable 'n' (line 1443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 4), 'n', ndim_8560)
    
    
    # Getting the type of 'axis' (line 1444)
    axis_8561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 7), 'axis')
    int_8562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 14), 'int')
    # Applying the binary operator '<' (line 1444)
    result_lt_8563 = python_operator(stypy.reporting.localization.Localization(__file__, 1444, 7), '<', axis_8561, int_8562)
    
    # Testing the type of an if condition (line 1444)
    if_condition_8564 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1444, 4), result_lt_8563)
    # Assigning a type to the variable 'if_condition_8564' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'if_condition_8564', if_condition_8564)
    # SSA begins for if statement (line 1444)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'axis' (line 1445)
    axis_8565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 8), 'axis')
    # Getting the type of 'n' (line 1445)
    n_8566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 16), 'n')
    # Applying the binary operator '+=' (line 1445)
    result_iadd_8567 = python_operator(stypy.reporting.localization.Localization(__file__, 1445, 8), '+=', axis_8565, n_8566)
    # Assigning a type to the variable 'axis' (line 1445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 8), 'axis', result_iadd_8567)
    
    # SSA join for if statement (line 1444)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'start' (line 1446)
    start_8568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 7), 'start')
    int_8569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 15), 'int')
    # Applying the binary operator '<' (line 1446)
    result_lt_8570 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 7), '<', start_8568, int_8569)
    
    # Testing the type of an if condition (line 1446)
    if_condition_8571 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1446, 4), result_lt_8570)
    # Assigning a type to the variable 'if_condition_8571' (line 1446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 4), 'if_condition_8571', if_condition_8571)
    # SSA begins for if statement (line 1446)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'start' (line 1447)
    start_8572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'start')
    # Getting the type of 'n' (line 1447)
    n_8573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 17), 'n')
    # Applying the binary operator '+=' (line 1447)
    result_iadd_8574 = python_operator(stypy.reporting.localization.Localization(__file__, 1447, 8), '+=', start_8572, n_8573)
    # Assigning a type to the variable 'start' (line 1447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'start', result_iadd_8574)
    
    # SSA join for if statement (line 1446)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Str to a Name (line 1448):
    
    # Assigning a Str to a Name (line 1448):
    str_8575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 10), 'str', 'rollaxis: %s (%d) must be >=0 and < %d')
    # Assigning a type to the variable 'msg' (line 1448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 4), 'msg', str_8575)
    
    
    
    int_8576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1449, 12), 'int')
    # Getting the type of 'axis' (line 1449)
    axis_8577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 17), 'axis')
    # Applying the binary operator '<=' (line 1449)
    result_le_8578 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 12), '<=', int_8576, axis_8577)
    # Getting the type of 'n' (line 1449)
    n_8579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 24), 'n')
    # Applying the binary operator '<' (line 1449)
    result_lt_8580 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 12), '<', axis_8577, n_8579)
    # Applying the binary operator '&' (line 1449)
    result_and__8581 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 12), '&', result_le_8578, result_lt_8580)
    
    # Applying the 'not' unary operator (line 1449)
    result_not__8582 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 7), 'not', result_and__8581)
    
    # Testing the type of an if condition (line 1449)
    if_condition_8583 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1449, 4), result_not__8582)
    # Assigning a type to the variable 'if_condition_8583' (line 1449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 4), 'if_condition_8583', if_condition_8583)
    # SSA begins for if statement (line 1449)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1450)
    # Processing the call arguments (line 1450)
    # Getting the type of 'msg' (line 1450)
    msg_8585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 25), 'msg', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1450)
    tuple_8586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1450)
    # Adding element type (line 1450)
    str_8587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 32), 'str', 'axis')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1450, 32), tuple_8586, str_8587)
    # Adding element type (line 1450)
    # Getting the type of 'axis' (line 1450)
    axis_8588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 40), 'axis', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1450, 32), tuple_8586, axis_8588)
    # Adding element type (line 1450)
    # Getting the type of 'n' (line 1450)
    n_8589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 46), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1450, 32), tuple_8586, n_8589)
    
    # Applying the binary operator '%' (line 1450)
    result_mod_8590 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 25), '%', msg_8585, tuple_8586)
    
    # Processing the call keyword arguments (line 1450)
    kwargs_8591 = {}
    # Getting the type of 'ValueError' (line 1450)
    ValueError_8584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1450)
    ValueError_call_result_8592 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 14), ValueError_8584, *[result_mod_8590], **kwargs_8591)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1450, 8), ValueError_call_result_8592, 'raise parameter', BaseException)
    # SSA join for if statement (line 1449)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    int_8593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 12), 'int')
    # Getting the type of 'start' (line 1451)
    start_8594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 17), 'start')
    # Applying the binary operator '<=' (line 1451)
    result_le_8595 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 12), '<=', int_8593, start_8594)
    # Getting the type of 'n' (line 1451)
    n_8596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 25), 'n')
    int_8597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 29), 'int')
    # Applying the binary operator '+' (line 1451)
    result_add_8598 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 25), '+', n_8596, int_8597)
    
    # Applying the binary operator '<' (line 1451)
    result_lt_8599 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 12), '<', start_8594, result_add_8598)
    # Applying the binary operator '&' (line 1451)
    result_and__8600 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 12), '&', result_le_8595, result_lt_8599)
    
    # Applying the 'not' unary operator (line 1451)
    result_not__8601 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 7), 'not', result_and__8600)
    
    # Testing the type of an if condition (line 1451)
    if_condition_8602 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1451, 4), result_not__8601)
    # Assigning a type to the variable 'if_condition_8602' (line 1451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 4), 'if_condition_8602', if_condition_8602)
    # SSA begins for if statement (line 1451)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1452)
    # Processing the call arguments (line 1452)
    # Getting the type of 'msg' (line 1452)
    msg_8604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 25), 'msg', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1452)
    tuple_8605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1452)
    # Adding element type (line 1452)
    str_8606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 32), 'str', 'start')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1452, 32), tuple_8605, str_8606)
    # Adding element type (line 1452)
    # Getting the type of 'start' (line 1452)
    start_8607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 41), 'start', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1452, 32), tuple_8605, start_8607)
    # Adding element type (line 1452)
    # Getting the type of 'n' (line 1452)
    n_8608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 48), 'n', False)
    int_8609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 52), 'int')
    # Applying the binary operator '+' (line 1452)
    result_add_8610 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 48), '+', n_8608, int_8609)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1452, 32), tuple_8605, result_add_8610)
    
    # Applying the binary operator '%' (line 1452)
    result_mod_8611 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 25), '%', msg_8604, tuple_8605)
    
    # Processing the call keyword arguments (line 1452)
    kwargs_8612 = {}
    # Getting the type of 'ValueError' (line 1452)
    ValueError_8603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1452)
    ValueError_call_result_8613 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 14), ValueError_8603, *[result_mod_8611], **kwargs_8612)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1452, 8), ValueError_call_result_8613, 'raise parameter', BaseException)
    # SSA join for if statement (line 1451)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'axis' (line 1453)
    axis_8614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 8), 'axis')
    # Getting the type of 'start' (line 1453)
    start_8615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 15), 'start')
    # Applying the binary operator '<' (line 1453)
    result_lt_8616 = python_operator(stypy.reporting.localization.Localization(__file__, 1453, 8), '<', axis_8614, start_8615)
    
    # Testing the type of an if condition (line 1453)
    if_condition_8617 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1453, 4), result_lt_8616)
    # Assigning a type to the variable 'if_condition_8617' (line 1453)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1453, 4), 'if_condition_8617', if_condition_8617)
    # SSA begins for if statement (line 1453)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'start' (line 1455)
    start_8618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 8), 'start')
    int_8619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 17), 'int')
    # Applying the binary operator '-=' (line 1455)
    result_isub_8620 = python_operator(stypy.reporting.localization.Localization(__file__, 1455, 8), '-=', start_8618, int_8619)
    # Assigning a type to the variable 'start' (line 1455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 8), 'start', result_isub_8620)
    
    # SSA join for if statement (line 1453)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'axis' (line 1456)
    axis_8621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 7), 'axis')
    # Getting the type of 'start' (line 1456)
    start_8622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 15), 'start')
    # Applying the binary operator '==' (line 1456)
    result_eq_8623 = python_operator(stypy.reporting.localization.Localization(__file__, 1456, 7), '==', axis_8621, start_8622)
    
    # Testing the type of an if condition (line 1456)
    if_condition_8624 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1456, 4), result_eq_8623)
    # Assigning a type to the variable 'if_condition_8624' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'if_condition_8624', if_condition_8624)
    # SSA begins for if statement (line 1456)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    Ellipsis_8625 = Ellipsis
    # Getting the type of 'a' (line 1457)
    a_8626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 15), 'a')
    # Obtaining the member '__getitem__' of a type (line 1457)
    getitem___8627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1457, 15), a_8626, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1457)
    subscript_call_result_8628 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 15), getitem___8627, Ellipsis_8625)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1457)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1457, 8), 'stypy_return_type', subscript_call_result_8628)
    # SSA join for if statement (line 1456)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1458):
    
    # Assigning a Call to a Name (line 1458):
    
    # Call to list(...): (line 1458)
    # Processing the call arguments (line 1458)
    
    # Call to range(...): (line 1458)
    # Processing the call arguments (line 1458)
    int_8631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 22), 'int')
    # Getting the type of 'n' (line 1458)
    n_8632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 25), 'n', False)
    # Processing the call keyword arguments (line 1458)
    kwargs_8633 = {}
    # Getting the type of 'range' (line 1458)
    range_8630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 16), 'range', False)
    # Calling range(args, kwargs) (line 1458)
    range_call_result_8634 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 16), range_8630, *[int_8631, n_8632], **kwargs_8633)
    
    # Processing the call keyword arguments (line 1458)
    kwargs_8635 = {}
    # Getting the type of 'list' (line 1458)
    list_8629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 11), 'list', False)
    # Calling list(args, kwargs) (line 1458)
    list_call_result_8636 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 11), list_8629, *[range_call_result_8634], **kwargs_8635)
    
    # Assigning a type to the variable 'axes' (line 1458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 4), 'axes', list_call_result_8636)
    
    # Call to remove(...): (line 1459)
    # Processing the call arguments (line 1459)
    # Getting the type of 'axis' (line 1459)
    axis_8639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 16), 'axis', False)
    # Processing the call keyword arguments (line 1459)
    kwargs_8640 = {}
    # Getting the type of 'axes' (line 1459)
    axes_8637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 4), 'axes', False)
    # Obtaining the member 'remove' of a type (line 1459)
    remove_8638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 4), axes_8637, 'remove')
    # Calling remove(args, kwargs) (line 1459)
    remove_call_result_8641 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 4), remove_8638, *[axis_8639], **kwargs_8640)
    
    
    # Call to insert(...): (line 1460)
    # Processing the call arguments (line 1460)
    # Getting the type of 'start' (line 1460)
    start_8644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 16), 'start', False)
    # Getting the type of 'axis' (line 1460)
    axis_8645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 23), 'axis', False)
    # Processing the call keyword arguments (line 1460)
    kwargs_8646 = {}
    # Getting the type of 'axes' (line 1460)
    axes_8642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 4), 'axes', False)
    # Obtaining the member 'insert' of a type (line 1460)
    insert_8643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 4), axes_8642, 'insert')
    # Calling insert(args, kwargs) (line 1460)
    insert_call_result_8647 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 4), insert_8643, *[start_8644, axis_8645], **kwargs_8646)
    
    
    # Call to transpose(...): (line 1461)
    # Processing the call arguments (line 1461)
    # Getting the type of 'axes' (line 1461)
    axes_8650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 23), 'axes', False)
    # Processing the call keyword arguments (line 1461)
    kwargs_8651 = {}
    # Getting the type of 'a' (line 1461)
    a_8648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 11), 'a', False)
    # Obtaining the member 'transpose' of a type (line 1461)
    transpose_8649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 11), a_8648, 'transpose')
    # Calling transpose(args, kwargs) (line 1461)
    transpose_call_result_8652 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 11), transpose_8649, *[axes_8650], **kwargs_8651)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'stypy_return_type', transpose_call_result_8652)
    
    # ################# End of 'rollaxis(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rollaxis' in the type store
    # Getting the type of 'stypy_return_type' (line 1404)
    stypy_return_type_8653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8653)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rollaxis'
    return stypy_return_type_8653

# Assigning a type to the variable 'rollaxis' (line 1404)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 0), 'rollaxis', rollaxis)

@norecursion
def _validate_axis(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_validate_axis'
    module_type_store = module_type_store.open_function_context('_validate_axis', 1464, 0, False)
    
    # Passed parameters checking function
    _validate_axis.stypy_localization = localization
    _validate_axis.stypy_type_of_self = None
    _validate_axis.stypy_type_store = module_type_store
    _validate_axis.stypy_function_name = '_validate_axis'
    _validate_axis.stypy_param_names_list = ['axis', 'ndim', 'argname']
    _validate_axis.stypy_varargs_param_name = None
    _validate_axis.stypy_kwargs_param_name = None
    _validate_axis.stypy_call_defaults = defaults
    _validate_axis.stypy_call_varargs = varargs
    _validate_axis.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_validate_axis', ['axis', 'ndim', 'argname'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_validate_axis', localization, ['axis', 'ndim', 'argname'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_validate_axis(...)' code ##################

    
    
    # SSA begins for try-except statement (line 1465)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a List to a Name (line 1466):
    
    # Assigning a List to a Name (line 1466):
    
    # Obtaining an instance of the builtin type 'list' (line 1466)
    list_8654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1466, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1466)
    # Adding element type (line 1466)
    
    # Call to index(...): (line 1466)
    # Processing the call arguments (line 1466)
    # Getting the type of 'axis' (line 1466)
    axis_8657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 31), 'axis', False)
    # Processing the call keyword arguments (line 1466)
    kwargs_8658 = {}
    # Getting the type of 'operator' (line 1466)
    operator_8655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 16), 'operator', False)
    # Obtaining the member 'index' of a type (line 1466)
    index_8656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1466, 16), operator_8655, 'index')
    # Calling index(args, kwargs) (line 1466)
    index_call_result_8659 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 16), index_8656, *[axis_8657], **kwargs_8658)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1466, 15), list_8654, index_call_result_8659)
    
    # Assigning a type to the variable 'axis' (line 1466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 8), 'axis', list_8654)
    # SSA branch for the except part of a try statement (line 1465)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1465)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 1468):
    
    # Assigning a Call to a Name (line 1468):
    
    # Call to list(...): (line 1468)
    # Processing the call arguments (line 1468)
    # Getting the type of 'axis' (line 1468)
    axis_8661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 20), 'axis', False)
    # Processing the call keyword arguments (line 1468)
    kwargs_8662 = {}
    # Getting the type of 'list' (line 1468)
    list_8660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 15), 'list', False)
    # Calling list(args, kwargs) (line 1468)
    list_call_result_8663 = invoke(stypy.reporting.localization.Localization(__file__, 1468, 15), list_8660, *[axis_8661], **kwargs_8662)
    
    # Assigning a type to the variable 'axis' (line 1468)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1468, 8), 'axis', list_call_result_8663)
    # SSA join for try-except statement (line 1465)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 1469):
    
    # Assigning a ListComp to a Name (line 1469):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'axis' (line 1469)
    axis_8672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 46), 'axis')
    comprehension_8673 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1469, 12), axis_8672)
    # Assigning a type to the variable 'a' (line 1469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 12), 'a', comprehension_8673)
    
    
    # Getting the type of 'a' (line 1469)
    a_8664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 24), 'a')
    int_8665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 28), 'int')
    # Applying the binary operator '<' (line 1469)
    result_lt_8666 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 24), '<', a_8664, int_8665)
    
    # Testing the type of an if expression (line 1469)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1469, 12), result_lt_8666)
    # SSA begins for if expression (line 1469)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'a' (line 1469)
    a_8667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 12), 'a')
    # Getting the type of 'ndim' (line 1469)
    ndim_8668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 16), 'ndim')
    # Applying the binary operator '+' (line 1469)
    result_add_8669 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 12), '+', a_8667, ndim_8668)
    
    # SSA branch for the else part of an if expression (line 1469)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'a' (line 1469)
    a_8670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 35), 'a')
    # SSA join for if expression (line 1469)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_8671 = union_type.UnionType.add(result_add_8669, a_8670)
    
    list_8674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1469, 12), list_8674, if_exp_8671)
    # Assigning a type to the variable 'axis' (line 1469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 4), 'axis', list_8674)
    
    
    
    # Call to all(...): (line 1470)
    # Processing the call arguments (line 1470)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 1470, 24, True)
    # Calculating comprehension expression
    # Getting the type of 'axis' (line 1470)
    axis_8683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 47), 'axis', False)
    comprehension_8684 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1470, 24), axis_8683)
    # Assigning a type to the variable 'a' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 24), 'a', comprehension_8684)
    
    int_8677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 24), 'int')
    # Getting the type of 'a' (line 1470)
    a_8678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 29), 'a', False)
    # Applying the binary operator '<=' (line 1470)
    result_le_8679 = python_operator(stypy.reporting.localization.Localization(__file__, 1470, 24), '<=', int_8677, a_8678)
    # Getting the type of 'ndim' (line 1470)
    ndim_8680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 33), 'ndim', False)
    # Applying the binary operator '<' (line 1470)
    result_lt_8681 = python_operator(stypy.reporting.localization.Localization(__file__, 1470, 24), '<', a_8678, ndim_8680)
    # Applying the binary operator '&' (line 1470)
    result_and__8682 = python_operator(stypy.reporting.localization.Localization(__file__, 1470, 24), '&', result_le_8679, result_lt_8681)
    
    list_8685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 24), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1470, 24), list_8685, result_and__8682)
    # Processing the call keyword arguments (line 1470)
    kwargs_8686 = {}
    # Getting the type of 'builtins' (line 1470)
    builtins_8675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 11), 'builtins', False)
    # Obtaining the member 'all' of a type (line 1470)
    all_8676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 11), builtins_8675, 'all')
    # Calling all(args, kwargs) (line 1470)
    all_call_result_8687 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 11), all_8676, *[list_8685], **kwargs_8686)
    
    # Applying the 'not' unary operator (line 1470)
    result_not__8688 = python_operator(stypy.reporting.localization.Localization(__file__, 1470, 7), 'not', all_call_result_8687)
    
    # Testing the type of an if condition (line 1470)
    if_condition_8689 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1470, 4), result_not__8688)
    # Assigning a type to the variable 'if_condition_8689' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 4), 'if_condition_8689', if_condition_8689)
    # SSA begins for if statement (line 1470)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1471)
    # Processing the call arguments (line 1471)
    str_8691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 25), 'str', 'invalid axis for this array in `%s` argument')
    # Getting the type of 'argname' (line 1472)
    argname_8692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 25), 'argname', False)
    # Applying the binary operator '%' (line 1471)
    result_mod_8693 = python_operator(stypy.reporting.localization.Localization(__file__, 1471, 25), '%', str_8691, argname_8692)
    
    # Processing the call keyword arguments (line 1471)
    kwargs_8694 = {}
    # Getting the type of 'ValueError' (line 1471)
    ValueError_8690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1471)
    ValueError_call_result_8695 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 14), ValueError_8690, *[result_mod_8693], **kwargs_8694)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1471, 8), ValueError_call_result_8695, 'raise parameter', BaseException)
    # SSA join for if statement (line 1470)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1473)
    # Processing the call arguments (line 1473)
    
    # Call to set(...): (line 1473)
    # Processing the call arguments (line 1473)
    # Getting the type of 'axis' (line 1473)
    axis_8698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 15), 'axis', False)
    # Processing the call keyword arguments (line 1473)
    kwargs_8699 = {}
    # Getting the type of 'set' (line 1473)
    set_8697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 11), 'set', False)
    # Calling set(args, kwargs) (line 1473)
    set_call_result_8700 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 11), set_8697, *[axis_8698], **kwargs_8699)
    
    # Processing the call keyword arguments (line 1473)
    kwargs_8701 = {}
    # Getting the type of 'len' (line 1473)
    len_8696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 7), 'len', False)
    # Calling len(args, kwargs) (line 1473)
    len_call_result_8702 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 7), len_8696, *[set_call_result_8700], **kwargs_8701)
    
    
    # Call to len(...): (line 1473)
    # Processing the call arguments (line 1473)
    # Getting the type of 'axis' (line 1473)
    axis_8704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 29), 'axis', False)
    # Processing the call keyword arguments (line 1473)
    kwargs_8705 = {}
    # Getting the type of 'len' (line 1473)
    len_8703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 25), 'len', False)
    # Calling len(args, kwargs) (line 1473)
    len_call_result_8706 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 25), len_8703, *[axis_8704], **kwargs_8705)
    
    # Applying the binary operator '!=' (line 1473)
    result_ne_8707 = python_operator(stypy.reporting.localization.Localization(__file__, 1473, 7), '!=', len_call_result_8702, len_call_result_8706)
    
    # Testing the type of an if condition (line 1473)
    if_condition_8708 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1473, 4), result_ne_8707)
    # Assigning a type to the variable 'if_condition_8708' (line 1473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'if_condition_8708', if_condition_8708)
    # SSA begins for if statement (line 1473)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1474)
    # Processing the call arguments (line 1474)
    str_8710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1474, 25), 'str', 'repeated axis in `%s` argument')
    # Getting the type of 'argname' (line 1474)
    argname_8711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 60), 'argname', False)
    # Applying the binary operator '%' (line 1474)
    result_mod_8712 = python_operator(stypy.reporting.localization.Localization(__file__, 1474, 25), '%', str_8710, argname_8711)
    
    # Processing the call keyword arguments (line 1474)
    kwargs_8713 = {}
    # Getting the type of 'ValueError' (line 1474)
    ValueError_8709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1474)
    ValueError_call_result_8714 = invoke(stypy.reporting.localization.Localization(__file__, 1474, 14), ValueError_8709, *[result_mod_8712], **kwargs_8713)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1474, 8), ValueError_call_result_8714, 'raise parameter', BaseException)
    # SSA join for if statement (line 1473)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'axis' (line 1475)
    axis_8715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 11), 'axis')
    # Assigning a type to the variable 'stypy_return_type' (line 1475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1475, 4), 'stypy_return_type', axis_8715)
    
    # ################# End of '_validate_axis(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_validate_axis' in the type store
    # Getting the type of 'stypy_return_type' (line 1464)
    stypy_return_type_8716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8716)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_validate_axis'
    return stypy_return_type_8716

# Assigning a type to the variable '_validate_axis' (line 1464)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 0), '_validate_axis', _validate_axis)

@norecursion
def moveaxis(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'moveaxis'
    module_type_store = module_type_store.open_function_context('moveaxis', 1478, 0, False)
    
    # Passed parameters checking function
    moveaxis.stypy_localization = localization
    moveaxis.stypy_type_of_self = None
    moveaxis.stypy_type_store = module_type_store
    moveaxis.stypy_function_name = 'moveaxis'
    moveaxis.stypy_param_names_list = ['a', 'source', 'destination']
    moveaxis.stypy_varargs_param_name = None
    moveaxis.stypy_kwargs_param_name = None
    moveaxis.stypy_call_defaults = defaults
    moveaxis.stypy_call_varargs = varargs
    moveaxis.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'moveaxis', ['a', 'source', 'destination'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'moveaxis', localization, ['a', 'source', 'destination'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'moveaxis(...)' code ##################

    str_8717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, (-1)), 'str', '\n    Move axes of an array to new positions.\n\n    Other axes remain in their original order.\n\n    .. versionadded::1.11.0\n\n    Parameters\n    ----------\n    a : np.ndarray\n        The array whose axes should be reordered.\n    source : int or sequence of int\n        Original positions of the axes to move. These must be unique.\n    destination : int or sequence of int\n        Destination positions for each of the original axes. These must also be\n        unique.\n\n    Returns\n    -------\n    result : np.ndarray\n        Array with moved axes. This array is a view of the input array.\n\n    See Also\n    --------\n    transpose: Permute the dimensions of an array.\n    swapaxes: Interchange two axes of an array.\n\n    Examples\n    --------\n\n    >>> x = np.zeros((3, 4, 5))\n    >>> np.moveaxis(x, 0, -1).shape\n    (4, 5, 3)\n    >>> np.moveaxis(x, -1, 0).shape\n    (5, 3, 4)\n\n    These all achieve the same result:\n\n    >>> np.transpose(x).shape\n    (5, 4, 3)\n    >>> np.swapaxis(x, 0, -1).shape\n    (5, 4, 3)\n    >>> np.moveaxis(x, [0, 1], [-1, -2]).shape\n    (5, 4, 3)\n    >>> np.moveaxis(x, [0, 1, 2], [-1, -2, -3]).shape\n    (5, 4, 3)\n\n    ')
    
    
    # SSA begins for try-except statement (line 1527)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Attribute to a Name (line 1529):
    
    # Assigning a Attribute to a Name (line 1529):
    # Getting the type of 'a' (line 1529)
    a_8718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 20), 'a')
    # Obtaining the member 'transpose' of a type (line 1529)
    transpose_8719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 20), a_8718, 'transpose')
    # Assigning a type to the variable 'transpose' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 8), 'transpose', transpose_8719)
    # SSA branch for the except part of a try statement (line 1527)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 1527)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 1531):
    
    # Assigning a Call to a Name (line 1531):
    
    # Call to asarray(...): (line 1531)
    # Processing the call arguments (line 1531)
    # Getting the type of 'a' (line 1531)
    a_8721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 20), 'a', False)
    # Processing the call keyword arguments (line 1531)
    kwargs_8722 = {}
    # Getting the type of 'asarray' (line 1531)
    asarray_8720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1531)
    asarray_call_result_8723 = invoke(stypy.reporting.localization.Localization(__file__, 1531, 12), asarray_8720, *[a_8721], **kwargs_8722)
    
    # Assigning a type to the variable 'a' (line 1531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 8), 'a', asarray_call_result_8723)
    
    # Assigning a Attribute to a Name (line 1532):
    
    # Assigning a Attribute to a Name (line 1532):
    # Getting the type of 'a' (line 1532)
    a_8724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 20), 'a')
    # Obtaining the member 'transpose' of a type (line 1532)
    transpose_8725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 20), a_8724, 'transpose')
    # Assigning a type to the variable 'transpose' (line 1532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'transpose', transpose_8725)
    # SSA join for try-except statement (line 1527)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1534):
    
    # Assigning a Call to a Name (line 1534):
    
    # Call to _validate_axis(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'source' (line 1534)
    source_8727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 28), 'source', False)
    # Getting the type of 'a' (line 1534)
    a_8728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 36), 'a', False)
    # Obtaining the member 'ndim' of a type (line 1534)
    ndim_8729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 36), a_8728, 'ndim')
    str_8730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 44), 'str', 'source')
    # Processing the call keyword arguments (line 1534)
    kwargs_8731 = {}
    # Getting the type of '_validate_axis' (line 1534)
    _validate_axis_8726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 13), '_validate_axis', False)
    # Calling _validate_axis(args, kwargs) (line 1534)
    _validate_axis_call_result_8732 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 13), _validate_axis_8726, *[source_8727, ndim_8729, str_8730], **kwargs_8731)
    
    # Assigning a type to the variable 'source' (line 1534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 4), 'source', _validate_axis_call_result_8732)
    
    # Assigning a Call to a Name (line 1535):
    
    # Assigning a Call to a Name (line 1535):
    
    # Call to _validate_axis(...): (line 1535)
    # Processing the call arguments (line 1535)
    # Getting the type of 'destination' (line 1535)
    destination_8734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 33), 'destination', False)
    # Getting the type of 'a' (line 1535)
    a_8735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 46), 'a', False)
    # Obtaining the member 'ndim' of a type (line 1535)
    ndim_8736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 46), a_8735, 'ndim')
    str_8737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 54), 'str', 'destination')
    # Processing the call keyword arguments (line 1535)
    kwargs_8738 = {}
    # Getting the type of '_validate_axis' (line 1535)
    _validate_axis_8733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 18), '_validate_axis', False)
    # Calling _validate_axis(args, kwargs) (line 1535)
    _validate_axis_call_result_8739 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 18), _validate_axis_8733, *[destination_8734, ndim_8736, str_8737], **kwargs_8738)
    
    # Assigning a type to the variable 'destination' (line 1535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 4), 'destination', _validate_axis_call_result_8739)
    
    
    
    # Call to len(...): (line 1536)
    # Processing the call arguments (line 1536)
    # Getting the type of 'source' (line 1536)
    source_8741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 11), 'source', False)
    # Processing the call keyword arguments (line 1536)
    kwargs_8742 = {}
    # Getting the type of 'len' (line 1536)
    len_8740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 7), 'len', False)
    # Calling len(args, kwargs) (line 1536)
    len_call_result_8743 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 7), len_8740, *[source_8741], **kwargs_8742)
    
    
    # Call to len(...): (line 1536)
    # Processing the call arguments (line 1536)
    # Getting the type of 'destination' (line 1536)
    destination_8745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 26), 'destination', False)
    # Processing the call keyword arguments (line 1536)
    kwargs_8746 = {}
    # Getting the type of 'len' (line 1536)
    len_8744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 22), 'len', False)
    # Calling len(args, kwargs) (line 1536)
    len_call_result_8747 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 22), len_8744, *[destination_8745], **kwargs_8746)
    
    # Applying the binary operator '!=' (line 1536)
    result_ne_8748 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 7), '!=', len_call_result_8743, len_call_result_8747)
    
    # Testing the type of an if condition (line 1536)
    if_condition_8749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1536, 4), result_ne_8748)
    # Assigning a type to the variable 'if_condition_8749' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'if_condition_8749', if_condition_8749)
    # SSA begins for if statement (line 1536)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1537)
    # Processing the call arguments (line 1537)
    str_8751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 25), 'str', '`source` and `destination` arguments must have the same number of elements')
    # Processing the call keyword arguments (line 1537)
    kwargs_8752 = {}
    # Getting the type of 'ValueError' (line 1537)
    ValueError_8750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1537)
    ValueError_call_result_8753 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 14), ValueError_8750, *[str_8751], **kwargs_8752)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1537, 8), ValueError_call_result_8753, 'raise parameter', BaseException)
    # SSA join for if statement (line 1536)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 1540):
    
    # Assigning a ListComp to a Name (line 1540):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 1540)
    # Processing the call arguments (line 1540)
    # Getting the type of 'a' (line 1540)
    a_8759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 30), 'a', False)
    # Obtaining the member 'ndim' of a type (line 1540)
    ndim_8760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 30), a_8759, 'ndim')
    # Processing the call keyword arguments (line 1540)
    kwargs_8761 = {}
    # Getting the type of 'range' (line 1540)
    range_8758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 24), 'range', False)
    # Calling range(args, kwargs) (line 1540)
    range_call_result_8762 = invoke(stypy.reporting.localization.Localization(__file__, 1540, 24), range_8758, *[ndim_8760], **kwargs_8761)
    
    comprehension_8763 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1540, 13), range_call_result_8762)
    # Assigning a type to the variable 'n' (line 1540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 13), 'n', comprehension_8763)
    
    # Getting the type of 'n' (line 1540)
    n_8755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 41), 'n')
    # Getting the type of 'source' (line 1540)
    source_8756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 50), 'source')
    # Applying the binary operator 'notin' (line 1540)
    result_contains_8757 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 41), 'notin', n_8755, source_8756)
    
    # Getting the type of 'n' (line 1540)
    n_8754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 13), 'n')
    list_8764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 13), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1540, 13), list_8764, n_8754)
    # Assigning a type to the variable 'order' (line 1540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 4), 'order', list_8764)
    
    
    # Call to sorted(...): (line 1542)
    # Processing the call arguments (line 1542)
    
    # Call to zip(...): (line 1542)
    # Processing the call arguments (line 1542)
    # Getting the type of 'destination' (line 1542)
    destination_8767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 32), 'destination', False)
    # Getting the type of 'source' (line 1542)
    source_8768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 45), 'source', False)
    # Processing the call keyword arguments (line 1542)
    kwargs_8769 = {}
    # Getting the type of 'zip' (line 1542)
    zip_8766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 28), 'zip', False)
    # Calling zip(args, kwargs) (line 1542)
    zip_call_result_8770 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 28), zip_8766, *[destination_8767, source_8768], **kwargs_8769)
    
    # Processing the call keyword arguments (line 1542)
    kwargs_8771 = {}
    # Getting the type of 'sorted' (line 1542)
    sorted_8765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 21), 'sorted', False)
    # Calling sorted(args, kwargs) (line 1542)
    sorted_call_result_8772 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 21), sorted_8765, *[zip_call_result_8770], **kwargs_8771)
    
    # Testing the type of a for loop iterable (line 1542)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1542, 4), sorted_call_result_8772)
    # Getting the type of the for loop variable (line 1542)
    for_loop_var_8773 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1542, 4), sorted_call_result_8772)
    # Assigning a type to the variable 'dest' (line 1542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 4), 'dest', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 4), for_loop_var_8773))
    # Assigning a type to the variable 'src' (line 1542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 4), 'src', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 4), for_loop_var_8773))
    # SSA begins for a for statement (line 1542)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to insert(...): (line 1543)
    # Processing the call arguments (line 1543)
    # Getting the type of 'dest' (line 1543)
    dest_8776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 21), 'dest', False)
    # Getting the type of 'src' (line 1543)
    src_8777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 27), 'src', False)
    # Processing the call keyword arguments (line 1543)
    kwargs_8778 = {}
    # Getting the type of 'order' (line 1543)
    order_8774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 8), 'order', False)
    # Obtaining the member 'insert' of a type (line 1543)
    insert_8775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 8), order_8774, 'insert')
    # Calling insert(args, kwargs) (line 1543)
    insert_call_result_8779 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 8), insert_8775, *[dest_8776, src_8777], **kwargs_8778)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1545):
    
    # Assigning a Call to a Name (line 1545):
    
    # Call to transpose(...): (line 1545)
    # Processing the call arguments (line 1545)
    # Getting the type of 'order' (line 1545)
    order_8781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 23), 'order', False)
    # Processing the call keyword arguments (line 1545)
    kwargs_8782 = {}
    # Getting the type of 'transpose' (line 1545)
    transpose_8780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 13), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1545)
    transpose_call_result_8783 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 13), transpose_8780, *[order_8781], **kwargs_8782)
    
    # Assigning a type to the variable 'result' (line 1545)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 4), 'result', transpose_call_result_8783)
    # Getting the type of 'result' (line 1546)
    result_8784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 4), 'stypy_return_type', result_8784)
    
    # ################# End of 'moveaxis(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'moveaxis' in the type store
    # Getting the type of 'stypy_return_type' (line 1478)
    stypy_return_type_8785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8785)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'moveaxis'
    return stypy_return_type_8785

# Assigning a type to the variable 'moveaxis' (line 1478)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 0), 'moveaxis', moveaxis)

@norecursion
def _move_axis_to_0(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_move_axis_to_0'
    module_type_store = module_type_store.open_function_context('_move_axis_to_0', 1550, 0, False)
    
    # Passed parameters checking function
    _move_axis_to_0.stypy_localization = localization
    _move_axis_to_0.stypy_type_of_self = None
    _move_axis_to_0.stypy_type_store = module_type_store
    _move_axis_to_0.stypy_function_name = '_move_axis_to_0'
    _move_axis_to_0.stypy_param_names_list = ['a', 'axis']
    _move_axis_to_0.stypy_varargs_param_name = None
    _move_axis_to_0.stypy_kwargs_param_name = None
    _move_axis_to_0.stypy_call_defaults = defaults
    _move_axis_to_0.stypy_call_varargs = varargs
    _move_axis_to_0.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_move_axis_to_0', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_move_axis_to_0', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_move_axis_to_0(...)' code ##################

    
    # Call to rollaxis(...): (line 1551)
    # Processing the call arguments (line 1551)
    # Getting the type of 'a' (line 1551)
    a_8787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 20), 'a', False)
    # Getting the type of 'axis' (line 1551)
    axis_8788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 23), 'axis', False)
    int_8789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 29), 'int')
    # Processing the call keyword arguments (line 1551)
    kwargs_8790 = {}
    # Getting the type of 'rollaxis' (line 1551)
    rollaxis_8786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 11), 'rollaxis', False)
    # Calling rollaxis(args, kwargs) (line 1551)
    rollaxis_call_result_8791 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 11), rollaxis_8786, *[a_8787, axis_8788, int_8789], **kwargs_8790)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 4), 'stypy_return_type', rollaxis_call_result_8791)
    
    # ################# End of '_move_axis_to_0(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_move_axis_to_0' in the type store
    # Getting the type of 'stypy_return_type' (line 1550)
    stypy_return_type_8792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_8792)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_move_axis_to_0'
    return stypy_return_type_8792

# Assigning a type to the variable '_move_axis_to_0' (line 1550)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 0), '_move_axis_to_0', _move_axis_to_0)

@norecursion
def cross(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_8793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1553, 22), 'int')
    int_8794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1553, 32), 'int')
    int_8795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1553, 42), 'int')
    # Getting the type of 'None' (line 1553)
    None_8796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 51), 'None')
    defaults = [int_8793, int_8794, int_8795, None_8796]
    # Create a new context for function 'cross'
    module_type_store = module_type_store.open_function_context('cross', 1553, 0, False)
    
    # Passed parameters checking function
    cross.stypy_localization = localization
    cross.stypy_type_of_self = None
    cross.stypy_type_store = module_type_store
    cross.stypy_function_name = 'cross'
    cross.stypy_param_names_list = ['a', 'b', 'axisa', 'axisb', 'axisc', 'axis']
    cross.stypy_varargs_param_name = None
    cross.stypy_kwargs_param_name = None
    cross.stypy_call_defaults = defaults
    cross.stypy_call_varargs = varargs
    cross.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cross', ['a', 'b', 'axisa', 'axisb', 'axisc', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cross', localization, ['a', 'b', 'axisa', 'axisb', 'axisc', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cross(...)' code ##################

    str_8797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, (-1)), 'str', '\n    Return the cross product of two (arrays of) vectors.\n\n    The cross product of `a` and `b` in :math:`R^3` is a vector perpendicular\n    to both `a` and `b`.  If `a` and `b` are arrays of vectors, the vectors\n    are defined by the last axis of `a` and `b` by default, and these axes\n    can have dimensions 2 or 3.  Where the dimension of either `a` or `b` is\n    2, the third component of the input vector is assumed to be zero and the\n    cross product calculated accordingly.  In cases where both input vectors\n    have dimension 2, the z-component of the cross product is returned.\n\n    Parameters\n    ----------\n    a : array_like\n        Components of the first vector(s).\n    b : array_like\n        Components of the second vector(s).\n    axisa : int, optional\n        Axis of `a` that defines the vector(s).  By default, the last axis.\n    axisb : int, optional\n        Axis of `b` that defines the vector(s).  By default, the last axis.\n    axisc : int, optional\n        Axis of `c` containing the cross product vector(s).  Ignored if\n        both input vectors have dimension 2, as the return is scalar.\n        By default, the last axis.\n    axis : int, optional\n        If defined, the axis of `a`, `b` and `c` that defines the vector(s)\n        and cross product(s).  Overrides `axisa`, `axisb` and `axisc`.\n\n    Returns\n    -------\n    c : ndarray\n        Vector cross product(s).\n\n    Raises\n    ------\n    ValueError\n        When the dimension of the vector(s) in `a` and/or `b` does not\n        equal 2 or 3.\n\n    See Also\n    --------\n    inner : Inner product\n    outer : Outer product.\n    ix_ : Construct index arrays.\n\n    Notes\n    -----\n    .. versionadded:: 1.9.0\n\n    Supports full broadcasting of the inputs.\n\n    Examples\n    --------\n    Vector cross-product.\n\n    >>> x = [1, 2, 3]\n    >>> y = [4, 5, 6]\n    >>> np.cross(x, y)\n    array([-3,  6, -3])\n\n    One vector with dimension 2.\n\n    >>> x = [1, 2]\n    >>> y = [4, 5, 6]\n    >>> np.cross(x, y)\n    array([12, -6, -3])\n\n    Equivalently:\n\n    >>> x = [1, 2, 0]\n    >>> y = [4, 5, 6]\n    >>> np.cross(x, y)\n    array([12, -6, -3])\n\n    Both vectors with dimension 2.\n\n    >>> x = [1,2]\n    >>> y = [4,5]\n    >>> np.cross(x, y)\n    -3\n\n    Multiple vector cross-products. Note that the direction of the cross\n    product vector is defined by the `right-hand rule`.\n\n    >>> x = np.array([[1,2,3], [4,5,6]])\n    >>> y = np.array([[4,5,6], [1,2,3]])\n    >>> np.cross(x, y)\n    array([[-3,  6, -3],\n           [ 3, -6,  3]])\n\n    The orientation of `c` can be changed using the `axisc` keyword.\n\n    >>> np.cross(x, y, axisc=0)\n    array([[-3,  3],\n           [ 6, -6],\n           [-3,  3]])\n\n    Change the vector definition of `x` and `y` using `axisa` and `axisb`.\n\n    >>> x = np.array([[1,2,3], [4,5,6], [7, 8, 9]])\n    >>> y = np.array([[7, 8, 9], [4,5,6], [1,2,3]])\n    >>> np.cross(x, y)\n    array([[ -6,  12,  -6],\n           [  0,   0,   0],\n           [  6, -12,   6]])\n    >>> np.cross(x, y, axisa=0, axisb=0)\n    array([[-24,  48, -24],\n           [-30,  60, -30],\n           [-36,  72, -36]])\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 1666)
    # Getting the type of 'axis' (line 1666)
    axis_8798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 4), 'axis')
    # Getting the type of 'None' (line 1666)
    None_8799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 19), 'None')
    
    (may_be_8800, more_types_in_union_8801) = may_not_be_none(axis_8798, None_8799)

    if may_be_8800:

        if more_types_in_union_8801:
            # Runtime conditional SSA (line 1666)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Tuple (line 1667):
        
        # Assigning a Subscript to a Name (line 1667):
        
        # Obtaining the type of the subscript
        int_8802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 8), 'int')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1667)
        tuple_8803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1667)
        # Adding element type (line 1667)
        # Getting the type of 'axis' (line 1667)
        axis_8804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 31), 'axis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 31), tuple_8803, axis_8804)
        
        int_8805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 40), 'int')
        # Applying the binary operator '*' (line 1667)
        result_mul_8806 = python_operator(stypy.reporting.localization.Localization(__file__, 1667, 30), '*', tuple_8803, int_8805)
        
        # Obtaining the member '__getitem__' of a type (line 1667)
        getitem___8807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 8), result_mul_8806, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1667)
        subscript_call_result_8808 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 8), getitem___8807, int_8802)
        
        # Assigning a type to the variable 'tuple_var_assignment_7439' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'tuple_var_assignment_7439', subscript_call_result_8808)
        
        # Assigning a Subscript to a Name (line 1667):
        
        # Obtaining the type of the subscript
        int_8809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 8), 'int')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1667)
        tuple_8810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1667)
        # Adding element type (line 1667)
        # Getting the type of 'axis' (line 1667)
        axis_8811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 31), 'axis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 31), tuple_8810, axis_8811)
        
        int_8812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 40), 'int')
        # Applying the binary operator '*' (line 1667)
        result_mul_8813 = python_operator(stypy.reporting.localization.Localization(__file__, 1667, 30), '*', tuple_8810, int_8812)
        
        # Obtaining the member '__getitem__' of a type (line 1667)
        getitem___8814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 8), result_mul_8813, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1667)
        subscript_call_result_8815 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 8), getitem___8814, int_8809)
        
        # Assigning a type to the variable 'tuple_var_assignment_7440' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'tuple_var_assignment_7440', subscript_call_result_8815)
        
        # Assigning a Subscript to a Name (line 1667):
        
        # Obtaining the type of the subscript
        int_8816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 8), 'int')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1667)
        tuple_8817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1667)
        # Adding element type (line 1667)
        # Getting the type of 'axis' (line 1667)
        axis_8818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 31), 'axis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 31), tuple_8817, axis_8818)
        
        int_8819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 40), 'int')
        # Applying the binary operator '*' (line 1667)
        result_mul_8820 = python_operator(stypy.reporting.localization.Localization(__file__, 1667, 30), '*', tuple_8817, int_8819)
        
        # Obtaining the member '__getitem__' of a type (line 1667)
        getitem___8821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 8), result_mul_8820, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1667)
        subscript_call_result_8822 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 8), getitem___8821, int_8816)
        
        # Assigning a type to the variable 'tuple_var_assignment_7441' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'tuple_var_assignment_7441', subscript_call_result_8822)
        
        # Assigning a Name to a Name (line 1667):
        # Getting the type of 'tuple_var_assignment_7439' (line 1667)
        tuple_var_assignment_7439_8823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'tuple_var_assignment_7439')
        # Assigning a type to the variable 'axisa' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'axisa', tuple_var_assignment_7439_8823)
        
        # Assigning a Name to a Name (line 1667):
        # Getting the type of 'tuple_var_assignment_7440' (line 1667)
        tuple_var_assignment_7440_8824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'tuple_var_assignment_7440')
        # Assigning a type to the variable 'axisb' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 15), 'axisb', tuple_var_assignment_7440_8824)
        
        # Assigning a Name to a Name (line 1667):
        # Getting the type of 'tuple_var_assignment_7441' (line 1667)
        tuple_var_assignment_7441_8825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'tuple_var_assignment_7441')
        # Assigning a type to the variable 'axisc' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 22), 'axisc', tuple_var_assignment_7441_8825)

        if more_types_in_union_8801:
            # SSA join for if statement (line 1666)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1668):
    
    # Assigning a Call to a Name (line 1668):
    
    # Call to asarray(...): (line 1668)
    # Processing the call arguments (line 1668)
    # Getting the type of 'a' (line 1668)
    a_8827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 16), 'a', False)
    # Processing the call keyword arguments (line 1668)
    kwargs_8828 = {}
    # Getting the type of 'asarray' (line 1668)
    asarray_8826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1668)
    asarray_call_result_8829 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 8), asarray_8826, *[a_8827], **kwargs_8828)
    
    # Assigning a type to the variable 'a' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'a', asarray_call_result_8829)
    
    # Assigning a Call to a Name (line 1669):
    
    # Assigning a Call to a Name (line 1669):
    
    # Call to asarray(...): (line 1669)
    # Processing the call arguments (line 1669)
    # Getting the type of 'b' (line 1669)
    b_8831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 16), 'b', False)
    # Processing the call keyword arguments (line 1669)
    kwargs_8832 = {}
    # Getting the type of 'asarray' (line 1669)
    asarray_8830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1669)
    asarray_call_result_8833 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 8), asarray_8830, *[b_8831], **kwargs_8832)
    
    # Assigning a type to the variable 'b' (line 1669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 4), 'b', asarray_call_result_8833)
    
    # Assigning a Str to a Name (line 1671):
    
    # Assigning a Str to a Name (line 1671):
    str_8834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 15), 'str', "'axis{0}' out of bounds")
    # Assigning a type to the variable 'axis_msg' (line 1671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'axis_msg', str_8834)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axisa' (line 1672)
    axisa_8835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 7), 'axisa')
    
    # Getting the type of 'a' (line 1672)
    a_8836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 16), 'a')
    # Obtaining the member 'ndim' of a type (line 1672)
    ndim_8837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 16), a_8836, 'ndim')
    # Applying the 'usub' unary operator (line 1672)
    result___neg___8838 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 15), 'usub', ndim_8837)
    
    # Applying the binary operator '<' (line 1672)
    result_lt_8839 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 7), '<', axisa_8835, result___neg___8838)
    
    
    # Getting the type of 'axisa' (line 1672)
    axisa_8840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 26), 'axisa')
    # Getting the type of 'a' (line 1672)
    a_8841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 35), 'a')
    # Obtaining the member 'ndim' of a type (line 1672)
    ndim_8842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 35), a_8841, 'ndim')
    # Applying the binary operator '>=' (line 1672)
    result_ge_8843 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 26), '>=', axisa_8840, ndim_8842)
    
    # Applying the binary operator 'or' (line 1672)
    result_or_keyword_8844 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 7), 'or', result_lt_8839, result_ge_8843)
    
    # Testing the type of an if condition (line 1672)
    if_condition_8845 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1672, 4), result_or_keyword_8844)
    # Assigning a type to the variable 'if_condition_8845' (line 1672)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 4), 'if_condition_8845', if_condition_8845)
    # SSA begins for if statement (line 1672)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1673)
    # Processing the call arguments (line 1673)
    
    # Call to format(...): (line 1673)
    # Processing the call arguments (line 1673)
    str_8849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1673, 41), 'str', 'a')
    # Processing the call keyword arguments (line 1673)
    kwargs_8850 = {}
    # Getting the type of 'axis_msg' (line 1673)
    axis_msg_8847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 25), 'axis_msg', False)
    # Obtaining the member 'format' of a type (line 1673)
    format_8848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1673, 25), axis_msg_8847, 'format')
    # Calling format(args, kwargs) (line 1673)
    format_call_result_8851 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 25), format_8848, *[str_8849], **kwargs_8850)
    
    # Processing the call keyword arguments (line 1673)
    kwargs_8852 = {}
    # Getting the type of 'ValueError' (line 1673)
    ValueError_8846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1673)
    ValueError_call_result_8853 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 14), ValueError_8846, *[format_call_result_8851], **kwargs_8852)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1673, 8), ValueError_call_result_8853, 'raise parameter', BaseException)
    # SSA join for if statement (line 1672)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axisb' (line 1674)
    axisb_8854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 7), 'axisb')
    
    # Getting the type of 'b' (line 1674)
    b_8855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 16), 'b')
    # Obtaining the member 'ndim' of a type (line 1674)
    ndim_8856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 16), b_8855, 'ndim')
    # Applying the 'usub' unary operator (line 1674)
    result___neg___8857 = python_operator(stypy.reporting.localization.Localization(__file__, 1674, 15), 'usub', ndim_8856)
    
    # Applying the binary operator '<' (line 1674)
    result_lt_8858 = python_operator(stypy.reporting.localization.Localization(__file__, 1674, 7), '<', axisb_8854, result___neg___8857)
    
    
    # Getting the type of 'axisb' (line 1674)
    axisb_8859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 26), 'axisb')
    # Getting the type of 'b' (line 1674)
    b_8860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 35), 'b')
    # Obtaining the member 'ndim' of a type (line 1674)
    ndim_8861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 35), b_8860, 'ndim')
    # Applying the binary operator '>=' (line 1674)
    result_ge_8862 = python_operator(stypy.reporting.localization.Localization(__file__, 1674, 26), '>=', axisb_8859, ndim_8861)
    
    # Applying the binary operator 'or' (line 1674)
    result_or_keyword_8863 = python_operator(stypy.reporting.localization.Localization(__file__, 1674, 7), 'or', result_lt_8858, result_ge_8862)
    
    # Testing the type of an if condition (line 1674)
    if_condition_8864 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1674, 4), result_or_keyword_8863)
    # Assigning a type to the variable 'if_condition_8864' (line 1674)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 4), 'if_condition_8864', if_condition_8864)
    # SSA begins for if statement (line 1674)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1675)
    # Processing the call arguments (line 1675)
    
    # Call to format(...): (line 1675)
    # Processing the call arguments (line 1675)
    str_8868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1675, 41), 'str', 'b')
    # Processing the call keyword arguments (line 1675)
    kwargs_8869 = {}
    # Getting the type of 'axis_msg' (line 1675)
    axis_msg_8866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 25), 'axis_msg', False)
    # Obtaining the member 'format' of a type (line 1675)
    format_8867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 25), axis_msg_8866, 'format')
    # Calling format(args, kwargs) (line 1675)
    format_call_result_8870 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 25), format_8867, *[str_8868], **kwargs_8869)
    
    # Processing the call keyword arguments (line 1675)
    kwargs_8871 = {}
    # Getting the type of 'ValueError' (line 1675)
    ValueError_8865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1675)
    ValueError_call_result_8872 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 14), ValueError_8865, *[format_call_result_8870], **kwargs_8871)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1675, 8), ValueError_call_result_8872, 'raise parameter', BaseException)
    # SSA join for if statement (line 1674)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1677):
    
    # Assigning a Call to a Name (line 1677):
    
    # Call to rollaxis(...): (line 1677)
    # Processing the call arguments (line 1677)
    # Getting the type of 'a' (line 1677)
    a_8874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 17), 'a', False)
    # Getting the type of 'axisa' (line 1677)
    axisa_8875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 20), 'axisa', False)
    # Getting the type of 'a' (line 1677)
    a_8876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 27), 'a', False)
    # Obtaining the member 'ndim' of a type (line 1677)
    ndim_8877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 27), a_8876, 'ndim')
    # Processing the call keyword arguments (line 1677)
    kwargs_8878 = {}
    # Getting the type of 'rollaxis' (line 1677)
    rollaxis_8873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 8), 'rollaxis', False)
    # Calling rollaxis(args, kwargs) (line 1677)
    rollaxis_call_result_8879 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 8), rollaxis_8873, *[a_8874, axisa_8875, ndim_8877], **kwargs_8878)
    
    # Assigning a type to the variable 'a' (line 1677)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 4), 'a', rollaxis_call_result_8879)
    
    # Assigning a Call to a Name (line 1678):
    
    # Assigning a Call to a Name (line 1678):
    
    # Call to rollaxis(...): (line 1678)
    # Processing the call arguments (line 1678)
    # Getting the type of 'b' (line 1678)
    b_8881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 17), 'b', False)
    # Getting the type of 'axisb' (line 1678)
    axisb_8882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 20), 'axisb', False)
    # Getting the type of 'b' (line 1678)
    b_8883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 27), 'b', False)
    # Obtaining the member 'ndim' of a type (line 1678)
    ndim_8884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 27), b_8883, 'ndim')
    # Processing the call keyword arguments (line 1678)
    kwargs_8885 = {}
    # Getting the type of 'rollaxis' (line 1678)
    rollaxis_8880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 8), 'rollaxis', False)
    # Calling rollaxis(args, kwargs) (line 1678)
    rollaxis_call_result_8886 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 8), rollaxis_8880, *[b_8881, axisb_8882, ndim_8884], **kwargs_8885)
    
    # Assigning a type to the variable 'b' (line 1678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 4), 'b', rollaxis_call_result_8886)
    
    # Assigning a Str to a Name (line 1679):
    
    # Assigning a Str to a Name (line 1679):
    str_8887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 11), 'str', 'incompatible dimensions for cross product\n(dimension must be 2 or 3)')
    # Assigning a type to the variable 'msg' (line 1679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 4), 'msg', str_8887)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_8888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 15), 'int')
    # Getting the type of 'a' (line 1681)
    a_8889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 7), 'a')
    # Obtaining the member 'shape' of a type (line 1681)
    shape_8890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 7), a_8889, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1681)
    getitem___8891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 7), shape_8890, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1681)
    subscript_call_result_8892 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 7), getitem___8891, int_8888)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1681)
    tuple_8893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1681)
    # Adding element type (line 1681)
    int_8894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 27), tuple_8893, int_8894)
    # Adding element type (line 1681)
    int_8895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 27), tuple_8893, int_8895)
    
    # Applying the binary operator 'notin' (line 1681)
    result_contains_8896 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 7), 'notin', subscript_call_result_8892, tuple_8893)
    
    
    
    # Obtaining the type of the subscript
    int_8897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 44), 'int')
    # Getting the type of 'b' (line 1681)
    b_8898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 36), 'b')
    # Obtaining the member 'shape' of a type (line 1681)
    shape_8899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 36), b_8898, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1681)
    getitem___8900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 36), shape_8899, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1681)
    subscript_call_result_8901 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 36), getitem___8900, int_8897)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1681)
    tuple_8902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 56), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1681)
    # Adding element type (line 1681)
    int_8903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 56), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 56), tuple_8902, int_8903)
    # Adding element type (line 1681)
    int_8904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 59), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 56), tuple_8902, int_8904)
    
    # Applying the binary operator 'notin' (line 1681)
    result_contains_8905 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 36), 'notin', subscript_call_result_8901, tuple_8902)
    
    # Applying the binary operator 'or' (line 1681)
    result_or_keyword_8906 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 7), 'or', result_contains_8896, result_contains_8905)
    
    # Testing the type of an if condition (line 1681)
    if_condition_8907 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1681, 4), result_or_keyword_8906)
    # Assigning a type to the variable 'if_condition_8907' (line 1681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 4), 'if_condition_8907', if_condition_8907)
    # SSA begins for if statement (line 1681)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1682)
    # Processing the call arguments (line 1682)
    # Getting the type of 'msg' (line 1682)
    msg_8909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 25), 'msg', False)
    # Processing the call keyword arguments (line 1682)
    kwargs_8910 = {}
    # Getting the type of 'ValueError' (line 1682)
    ValueError_8908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1682)
    ValueError_call_result_8911 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 14), ValueError_8908, *[msg_8909], **kwargs_8910)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1682, 8), ValueError_call_result_8911, 'raise parameter', BaseException)
    # SSA join for if statement (line 1681)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 1685):
    
    # Assigning a Attribute to a Name (line 1685):
    
    # Call to broadcast(...): (line 1685)
    # Processing the call arguments (line 1685)
    
    # Obtaining the type of the subscript
    Ellipsis_8913 = Ellipsis
    int_8914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1685, 29), 'int')
    # Getting the type of 'a' (line 1685)
    a_8915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 22), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 1685)
    getitem___8916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 22), a_8915, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1685)
    subscript_call_result_8917 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 22), getitem___8916, (Ellipsis_8913, int_8914))
    
    
    # Obtaining the type of the subscript
    Ellipsis_8918 = Ellipsis
    int_8919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1685, 40), 'int')
    # Getting the type of 'b' (line 1685)
    b_8920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 33), 'b', False)
    # Obtaining the member '__getitem__' of a type (line 1685)
    getitem___8921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 33), b_8920, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1685)
    subscript_call_result_8922 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 33), getitem___8921, (Ellipsis_8918, int_8919))
    
    # Processing the call keyword arguments (line 1685)
    kwargs_8923 = {}
    # Getting the type of 'broadcast' (line 1685)
    broadcast_8912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 12), 'broadcast', False)
    # Calling broadcast(args, kwargs) (line 1685)
    broadcast_call_result_8924 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 12), broadcast_8912, *[subscript_call_result_8917, subscript_call_result_8922], **kwargs_8923)
    
    # Obtaining the member 'shape' of a type (line 1685)
    shape_8925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 12), broadcast_call_result_8924, 'shape')
    # Assigning a type to the variable 'shape' (line 1685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 4), 'shape', shape_8925)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_8926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 15), 'int')
    # Getting the type of 'a' (line 1686)
    a_8927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 7), 'a')
    # Obtaining the member 'shape' of a type (line 1686)
    shape_8928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 7), a_8927, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1686)
    getitem___8929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 7), shape_8928, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1686)
    subscript_call_result_8930 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 7), getitem___8929, int_8926)
    
    int_8931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 22), 'int')
    # Applying the binary operator '==' (line 1686)
    result_eq_8932 = python_operator(stypy.reporting.localization.Localization(__file__, 1686, 7), '==', subscript_call_result_8930, int_8931)
    
    
    
    # Obtaining the type of the subscript
    int_8933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 35), 'int')
    # Getting the type of 'b' (line 1686)
    b_8934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 27), 'b')
    # Obtaining the member 'shape' of a type (line 1686)
    shape_8935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 27), b_8934, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1686)
    getitem___8936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 27), shape_8935, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1686)
    subscript_call_result_8937 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 27), getitem___8936, int_8933)
    
    int_8938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 42), 'int')
    # Applying the binary operator '==' (line 1686)
    result_eq_8939 = python_operator(stypy.reporting.localization.Localization(__file__, 1686, 27), '==', subscript_call_result_8937, int_8938)
    
    # Applying the binary operator 'or' (line 1686)
    result_or_keyword_8940 = python_operator(stypy.reporting.localization.Localization(__file__, 1686, 7), 'or', result_eq_8932, result_eq_8939)
    
    # Testing the type of an if condition (line 1686)
    if_condition_8941 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1686, 4), result_or_keyword_8940)
    # Assigning a type to the variable 'if_condition_8941' (line 1686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 4), 'if_condition_8941', if_condition_8941)
    # SSA begins for if statement (line 1686)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'shape' (line 1687)
    shape_8942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 8), 'shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1687)
    tuple_8943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1687)
    # Adding element type (line 1687)
    int_8944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1687, 18), tuple_8943, int_8944)
    
    # Applying the binary operator '+=' (line 1687)
    result_iadd_8945 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 8), '+=', shape_8942, tuple_8943)
    # Assigning a type to the variable 'shape' (line 1687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 8), 'shape', result_iadd_8945)
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axisc' (line 1689)
    axisc_8946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 11), 'axisc')
    
    
    # Call to len(...): (line 1689)
    # Processing the call arguments (line 1689)
    # Getting the type of 'shape' (line 1689)
    shape_8948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 24), 'shape', False)
    # Processing the call keyword arguments (line 1689)
    kwargs_8949 = {}
    # Getting the type of 'len' (line 1689)
    len_8947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 20), 'len', False)
    # Calling len(args, kwargs) (line 1689)
    len_call_result_8950 = invoke(stypy.reporting.localization.Localization(__file__, 1689, 20), len_8947, *[shape_8948], **kwargs_8949)
    
    # Applying the 'usub' unary operator (line 1689)
    result___neg___8951 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 19), 'usub', len_call_result_8950)
    
    # Applying the binary operator '<' (line 1689)
    result_lt_8952 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 11), '<', axisc_8946, result___neg___8951)
    
    
    # Getting the type of 'axisc' (line 1689)
    axisc_8953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 34), 'axisc')
    
    # Call to len(...): (line 1689)
    # Processing the call arguments (line 1689)
    # Getting the type of 'shape' (line 1689)
    shape_8955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 47), 'shape', False)
    # Processing the call keyword arguments (line 1689)
    kwargs_8956 = {}
    # Getting the type of 'len' (line 1689)
    len_8954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 43), 'len', False)
    # Calling len(args, kwargs) (line 1689)
    len_call_result_8957 = invoke(stypy.reporting.localization.Localization(__file__, 1689, 43), len_8954, *[shape_8955], **kwargs_8956)
    
    # Applying the binary operator '>=' (line 1689)
    result_ge_8958 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 34), '>=', axisc_8953, len_call_result_8957)
    
    # Applying the binary operator 'or' (line 1689)
    result_or_keyword_8959 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 11), 'or', result_lt_8952, result_ge_8958)
    
    # Testing the type of an if condition (line 1689)
    if_condition_8960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1689, 8), result_or_keyword_8959)
    # Assigning a type to the variable 'if_condition_8960' (line 1689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 8), 'if_condition_8960', if_condition_8960)
    # SSA begins for if statement (line 1689)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1690)
    # Processing the call arguments (line 1690)
    
    # Call to format(...): (line 1690)
    # Processing the call arguments (line 1690)
    str_8964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 45), 'str', 'c')
    # Processing the call keyword arguments (line 1690)
    kwargs_8965 = {}
    # Getting the type of 'axis_msg' (line 1690)
    axis_msg_8962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 29), 'axis_msg', False)
    # Obtaining the member 'format' of a type (line 1690)
    format_8963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 29), axis_msg_8962, 'format')
    # Calling format(args, kwargs) (line 1690)
    format_call_result_8966 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 29), format_8963, *[str_8964], **kwargs_8965)
    
    # Processing the call keyword arguments (line 1690)
    kwargs_8967 = {}
    # Getting the type of 'ValueError' (line 1690)
    ValueError_8961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1690)
    ValueError_call_result_8968 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 18), ValueError_8961, *[format_call_result_8966], **kwargs_8967)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1690, 12), ValueError_call_result_8968, 'raise parameter', BaseException)
    # SSA join for if statement (line 1689)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1686)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1691):
    
    # Assigning a Call to a Name (line 1691):
    
    # Call to promote_types(...): (line 1691)
    # Processing the call arguments (line 1691)
    # Getting the type of 'a' (line 1691)
    a_8970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 26), 'a', False)
    # Obtaining the member 'dtype' of a type (line 1691)
    dtype_8971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 26), a_8970, 'dtype')
    # Getting the type of 'b' (line 1691)
    b_8972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 35), 'b', False)
    # Obtaining the member 'dtype' of a type (line 1691)
    dtype_8973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 35), b_8972, 'dtype')
    # Processing the call keyword arguments (line 1691)
    kwargs_8974 = {}
    # Getting the type of 'promote_types' (line 1691)
    promote_types_8969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 12), 'promote_types', False)
    # Calling promote_types(args, kwargs) (line 1691)
    promote_types_call_result_8975 = invoke(stypy.reporting.localization.Localization(__file__, 1691, 12), promote_types_8969, *[dtype_8971, dtype_8973], **kwargs_8974)
    
    # Assigning a type to the variable 'dtype' (line 1691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 4), 'dtype', promote_types_call_result_8975)
    
    # Assigning a Call to a Name (line 1692):
    
    # Assigning a Call to a Name (line 1692):
    
    # Call to empty(...): (line 1692)
    # Processing the call arguments (line 1692)
    # Getting the type of 'shape' (line 1692)
    shape_8977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 15), 'shape', False)
    # Getting the type of 'dtype' (line 1692)
    dtype_8978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 22), 'dtype', False)
    # Processing the call keyword arguments (line 1692)
    kwargs_8979 = {}
    # Getting the type of 'empty' (line 1692)
    empty_8976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 9), 'empty', False)
    # Calling empty(args, kwargs) (line 1692)
    empty_call_result_8980 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 9), empty_8976, *[shape_8977, dtype_8978], **kwargs_8979)
    
    # Assigning a type to the variable 'cp' (line 1692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 4), 'cp', empty_call_result_8980)
    
    # Assigning a Subscript to a Name (line 1695):
    
    # Assigning a Subscript to a Name (line 1695):
    
    # Obtaining the type of the subscript
    Ellipsis_8981 = Ellipsis
    int_8982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1695, 16), 'int')
    # Getting the type of 'a' (line 1695)
    a_8983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 9), 'a')
    # Obtaining the member '__getitem__' of a type (line 1695)
    getitem___8984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1695, 9), a_8983, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1695)
    subscript_call_result_8985 = invoke(stypy.reporting.localization.Localization(__file__, 1695, 9), getitem___8984, (Ellipsis_8981, int_8982))
    
    # Assigning a type to the variable 'a0' (line 1695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 4), 'a0', subscript_call_result_8985)
    
    # Assigning a Subscript to a Name (line 1696):
    
    # Assigning a Subscript to a Name (line 1696):
    
    # Obtaining the type of the subscript
    Ellipsis_8986 = Ellipsis
    int_8987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1696, 16), 'int')
    # Getting the type of 'a' (line 1696)
    a_8988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 9), 'a')
    # Obtaining the member '__getitem__' of a type (line 1696)
    getitem___8989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1696, 9), a_8988, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1696)
    subscript_call_result_8990 = invoke(stypy.reporting.localization.Localization(__file__, 1696, 9), getitem___8989, (Ellipsis_8986, int_8987))
    
    # Assigning a type to the variable 'a1' (line 1696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1696, 4), 'a1', subscript_call_result_8990)
    
    
    
    # Obtaining the type of the subscript
    int_8991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1697, 15), 'int')
    # Getting the type of 'a' (line 1697)
    a_8992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 7), 'a')
    # Obtaining the member 'shape' of a type (line 1697)
    shape_8993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1697, 7), a_8992, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1697)
    getitem___8994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1697, 7), shape_8993, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1697)
    subscript_call_result_8995 = invoke(stypy.reporting.localization.Localization(__file__, 1697, 7), getitem___8994, int_8991)
    
    int_8996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1697, 22), 'int')
    # Applying the binary operator '==' (line 1697)
    result_eq_8997 = python_operator(stypy.reporting.localization.Localization(__file__, 1697, 7), '==', subscript_call_result_8995, int_8996)
    
    # Testing the type of an if condition (line 1697)
    if_condition_8998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1697, 4), result_eq_8997)
    # Assigning a type to the variable 'if_condition_8998' (line 1697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 4), 'if_condition_8998', if_condition_8998)
    # SSA begins for if statement (line 1697)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1698):
    
    # Assigning a Subscript to a Name (line 1698):
    
    # Obtaining the type of the subscript
    Ellipsis_8999 = Ellipsis
    int_9000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1698, 20), 'int')
    # Getting the type of 'a' (line 1698)
    a_9001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 13), 'a')
    # Obtaining the member '__getitem__' of a type (line 1698)
    getitem___9002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 13), a_9001, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1698)
    subscript_call_result_9003 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 13), getitem___9002, (Ellipsis_8999, int_9000))
    
    # Assigning a type to the variable 'a2' (line 1698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1698, 8), 'a2', subscript_call_result_9003)
    # SSA join for if statement (line 1697)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1699):
    
    # Assigning a Subscript to a Name (line 1699):
    
    # Obtaining the type of the subscript
    Ellipsis_9004 = Ellipsis
    int_9005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1699, 16), 'int')
    # Getting the type of 'b' (line 1699)
    b_9006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 9), 'b')
    # Obtaining the member '__getitem__' of a type (line 1699)
    getitem___9007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1699, 9), b_9006, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1699)
    subscript_call_result_9008 = invoke(stypy.reporting.localization.Localization(__file__, 1699, 9), getitem___9007, (Ellipsis_9004, int_9005))
    
    # Assigning a type to the variable 'b0' (line 1699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1699, 4), 'b0', subscript_call_result_9008)
    
    # Assigning a Subscript to a Name (line 1700):
    
    # Assigning a Subscript to a Name (line 1700):
    
    # Obtaining the type of the subscript
    Ellipsis_9009 = Ellipsis
    int_9010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1700, 16), 'int')
    # Getting the type of 'b' (line 1700)
    b_9011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 9), 'b')
    # Obtaining the member '__getitem__' of a type (line 1700)
    getitem___9012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 9), b_9011, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1700)
    subscript_call_result_9013 = invoke(stypy.reporting.localization.Localization(__file__, 1700, 9), getitem___9012, (Ellipsis_9009, int_9010))
    
    # Assigning a type to the variable 'b1' (line 1700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 4), 'b1', subscript_call_result_9013)
    
    
    
    # Obtaining the type of the subscript
    int_9014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1701, 15), 'int')
    # Getting the type of 'b' (line 1701)
    b_9015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 7), 'b')
    # Obtaining the member 'shape' of a type (line 1701)
    shape_9016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 7), b_9015, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1701)
    getitem___9017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 7), shape_9016, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1701)
    subscript_call_result_9018 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 7), getitem___9017, int_9014)
    
    int_9019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1701, 22), 'int')
    # Applying the binary operator '==' (line 1701)
    result_eq_9020 = python_operator(stypy.reporting.localization.Localization(__file__, 1701, 7), '==', subscript_call_result_9018, int_9019)
    
    # Testing the type of an if condition (line 1701)
    if_condition_9021 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1701, 4), result_eq_9020)
    # Assigning a type to the variable 'if_condition_9021' (line 1701)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 4), 'if_condition_9021', if_condition_9021)
    # SSA begins for if statement (line 1701)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1702):
    
    # Assigning a Subscript to a Name (line 1702):
    
    # Obtaining the type of the subscript
    Ellipsis_9022 = Ellipsis
    int_9023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1702, 20), 'int')
    # Getting the type of 'b' (line 1702)
    b_9024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 13), 'b')
    # Obtaining the member '__getitem__' of a type (line 1702)
    getitem___9025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 13), b_9024, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1702)
    subscript_call_result_9026 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 13), getitem___9025, (Ellipsis_9022, int_9023))
    
    # Assigning a type to the variable 'b2' (line 1702)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 8), 'b2', subscript_call_result_9026)
    # SSA join for if statement (line 1701)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'cp' (line 1703)
    cp_9027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 7), 'cp')
    # Obtaining the member 'ndim' of a type (line 1703)
    ndim_9028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 7), cp_9027, 'ndim')
    int_9029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 18), 'int')
    # Applying the binary operator '!=' (line 1703)
    result_ne_9030 = python_operator(stypy.reporting.localization.Localization(__file__, 1703, 7), '!=', ndim_9028, int_9029)
    
    
    
    # Obtaining the type of the subscript
    int_9031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 33), 'int')
    # Getting the type of 'cp' (line 1703)
    cp_9032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 24), 'cp')
    # Obtaining the member 'shape' of a type (line 1703)
    shape_9033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 24), cp_9032, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1703)
    getitem___9034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 24), shape_9033, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1703)
    subscript_call_result_9035 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 24), getitem___9034, int_9031)
    
    int_9036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 40), 'int')
    # Applying the binary operator '==' (line 1703)
    result_eq_9037 = python_operator(stypy.reporting.localization.Localization(__file__, 1703, 24), '==', subscript_call_result_9035, int_9036)
    
    # Applying the binary operator 'and' (line 1703)
    result_and_keyword_9038 = python_operator(stypy.reporting.localization.Localization(__file__, 1703, 7), 'and', result_ne_9030, result_eq_9037)
    
    # Testing the type of an if condition (line 1703)
    if_condition_9039 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1703, 4), result_and_keyword_9038)
    # Assigning a type to the variable 'if_condition_9039' (line 1703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 4), 'if_condition_9039', if_condition_9039)
    # SSA begins for if statement (line 1703)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1704):
    
    # Assigning a Subscript to a Name (line 1704):
    
    # Obtaining the type of the subscript
    Ellipsis_9040 = Ellipsis
    int_9041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 22), 'int')
    # Getting the type of 'cp' (line 1704)
    cp_9042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 14), 'cp')
    # Obtaining the member '__getitem__' of a type (line 1704)
    getitem___9043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 14), cp_9042, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1704)
    subscript_call_result_9044 = invoke(stypy.reporting.localization.Localization(__file__, 1704, 14), getitem___9043, (Ellipsis_9040, int_9041))
    
    # Assigning a type to the variable 'cp0' (line 1704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1704, 8), 'cp0', subscript_call_result_9044)
    
    # Assigning a Subscript to a Name (line 1705):
    
    # Assigning a Subscript to a Name (line 1705):
    
    # Obtaining the type of the subscript
    Ellipsis_9045 = Ellipsis
    int_9046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, 22), 'int')
    # Getting the type of 'cp' (line 1705)
    cp_9047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 14), 'cp')
    # Obtaining the member '__getitem__' of a type (line 1705)
    getitem___9048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1705, 14), cp_9047, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1705)
    subscript_call_result_9049 = invoke(stypy.reporting.localization.Localization(__file__, 1705, 14), getitem___9048, (Ellipsis_9045, int_9046))
    
    # Assigning a type to the variable 'cp1' (line 1705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1705, 8), 'cp1', subscript_call_result_9049)
    
    # Assigning a Subscript to a Name (line 1706):
    
    # Assigning a Subscript to a Name (line 1706):
    
    # Obtaining the type of the subscript
    Ellipsis_9050 = Ellipsis
    int_9051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1706, 22), 'int')
    # Getting the type of 'cp' (line 1706)
    cp_9052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 14), 'cp')
    # Obtaining the member '__getitem__' of a type (line 1706)
    getitem___9053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 14), cp_9052, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1706)
    subscript_call_result_9054 = invoke(stypy.reporting.localization.Localization(__file__, 1706, 14), getitem___9053, (Ellipsis_9050, int_9051))
    
    # Assigning a type to the variable 'cp2' (line 1706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1706, 8), 'cp2', subscript_call_result_9054)
    # SSA join for if statement (line 1703)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_9055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1708, 15), 'int')
    # Getting the type of 'a' (line 1708)
    a_9056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 7), 'a')
    # Obtaining the member 'shape' of a type (line 1708)
    shape_9057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 7), a_9056, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1708)
    getitem___9058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 7), shape_9057, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1708)
    subscript_call_result_9059 = invoke(stypy.reporting.localization.Localization(__file__, 1708, 7), getitem___9058, int_9055)
    
    int_9060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1708, 22), 'int')
    # Applying the binary operator '==' (line 1708)
    result_eq_9061 = python_operator(stypy.reporting.localization.Localization(__file__, 1708, 7), '==', subscript_call_result_9059, int_9060)
    
    # Testing the type of an if condition (line 1708)
    if_condition_9062 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1708, 4), result_eq_9061)
    # Assigning a type to the variable 'if_condition_9062' (line 1708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 4), 'if_condition_9062', if_condition_9062)
    # SSA begins for if statement (line 1708)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Obtaining the type of the subscript
    int_9063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 19), 'int')
    # Getting the type of 'b' (line 1709)
    b_9064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 11), 'b')
    # Obtaining the member 'shape' of a type (line 1709)
    shape_9065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1709, 11), b_9064, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1709)
    getitem___9066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1709, 11), shape_9065, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1709)
    subscript_call_result_9067 = invoke(stypy.reporting.localization.Localization(__file__, 1709, 11), getitem___9066, int_9063)
    
    int_9068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 26), 'int')
    # Applying the binary operator '==' (line 1709)
    result_eq_9069 = python_operator(stypy.reporting.localization.Localization(__file__, 1709, 11), '==', subscript_call_result_9067, int_9068)
    
    # Testing the type of an if condition (line 1709)
    if_condition_9070 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1709, 8), result_eq_9069)
    # Assigning a type to the variable 'if_condition_9070' (line 1709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 8), 'if_condition_9070', if_condition_9070)
    # SSA begins for if statement (line 1709)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to multiply(...): (line 1711)
    # Processing the call arguments (line 1711)
    # Getting the type of 'a0' (line 1711)
    a0_9072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 21), 'a0', False)
    # Getting the type of 'b1' (line 1711)
    b1_9073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 25), 'b1', False)
    # Processing the call keyword arguments (line 1711)
    # Getting the type of 'cp' (line 1711)
    cp_9074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 33), 'cp', False)
    keyword_9075 = cp_9074
    kwargs_9076 = {'out': keyword_9075}
    # Getting the type of 'multiply' (line 1711)
    multiply_9071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1711)
    multiply_call_result_9077 = invoke(stypy.reporting.localization.Localization(__file__, 1711, 12), multiply_9071, *[a0_9072, b1_9073], **kwargs_9076)
    
    
    # Getting the type of 'cp' (line 1712)
    cp_9078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 12), 'cp')
    # Getting the type of 'a1' (line 1712)
    a1_9079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 18), 'a1')
    # Getting the type of 'b0' (line 1712)
    b0_9080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 23), 'b0')
    # Applying the binary operator '*' (line 1712)
    result_mul_9081 = python_operator(stypy.reporting.localization.Localization(__file__, 1712, 18), '*', a1_9079, b0_9080)
    
    # Applying the binary operator '-=' (line 1712)
    result_isub_9082 = python_operator(stypy.reporting.localization.Localization(__file__, 1712, 12), '-=', cp_9078, result_mul_9081)
    # Assigning a type to the variable 'cp' (line 1712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 12), 'cp', result_isub_9082)
    
    # Getting the type of 'cp' (line 1713)
    cp_9083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 19), 'cp')
    # Assigning a type to the variable 'stypy_return_type' (line 1713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1713, 12), 'stypy_return_type', cp_9083)
    # SSA branch for the else part of an if statement (line 1709)
    module_type_store.open_ssa_branch('else')
    # Evaluating assert statement condition
    
    
    # Obtaining the type of the subscript
    int_9084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 27), 'int')
    # Getting the type of 'b' (line 1715)
    b_9085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 19), 'b')
    # Obtaining the member 'shape' of a type (line 1715)
    shape_9086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 19), b_9085, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1715)
    getitem___9087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 19), shape_9086, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1715)
    subscript_call_result_9088 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 19), getitem___9087, int_9084)
    
    int_9089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 34), 'int')
    # Applying the binary operator '==' (line 1715)
    result_eq_9090 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 19), '==', subscript_call_result_9088, int_9089)
    
    
    # Call to multiply(...): (line 1719)
    # Processing the call arguments (line 1719)
    # Getting the type of 'a1' (line 1719)
    a1_9092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 21), 'a1', False)
    # Getting the type of 'b2' (line 1719)
    b2_9093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 25), 'b2', False)
    # Processing the call keyword arguments (line 1719)
    # Getting the type of 'cp0' (line 1719)
    cp0_9094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 33), 'cp0', False)
    keyword_9095 = cp0_9094
    kwargs_9096 = {'out': keyword_9095}
    # Getting the type of 'multiply' (line 1719)
    multiply_9091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1719)
    multiply_call_result_9097 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 12), multiply_9091, *[a1_9092, b2_9093], **kwargs_9096)
    
    
    # Call to multiply(...): (line 1720)
    # Processing the call arguments (line 1720)
    # Getting the type of 'a0' (line 1720)
    a0_9099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 21), 'a0', False)
    # Getting the type of 'b2' (line 1720)
    b2_9100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 25), 'b2', False)
    # Processing the call keyword arguments (line 1720)
    # Getting the type of 'cp1' (line 1720)
    cp1_9101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 33), 'cp1', False)
    keyword_9102 = cp1_9101
    kwargs_9103 = {'out': keyword_9102}
    # Getting the type of 'multiply' (line 1720)
    multiply_9098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1720)
    multiply_call_result_9104 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 12), multiply_9098, *[a0_9099, b2_9100], **kwargs_9103)
    
    
    # Call to negative(...): (line 1721)
    # Processing the call arguments (line 1721)
    # Getting the type of 'cp1' (line 1721)
    cp1_9106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 21), 'cp1', False)
    # Processing the call keyword arguments (line 1721)
    # Getting the type of 'cp1' (line 1721)
    cp1_9107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 30), 'cp1', False)
    keyword_9108 = cp1_9107
    kwargs_9109 = {'out': keyword_9108}
    # Getting the type of 'negative' (line 1721)
    negative_9105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 12), 'negative', False)
    # Calling negative(args, kwargs) (line 1721)
    negative_call_result_9110 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 12), negative_9105, *[cp1_9106], **kwargs_9109)
    
    
    # Call to multiply(...): (line 1722)
    # Processing the call arguments (line 1722)
    # Getting the type of 'a0' (line 1722)
    a0_9112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 21), 'a0', False)
    # Getting the type of 'b1' (line 1722)
    b1_9113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 25), 'b1', False)
    # Processing the call keyword arguments (line 1722)
    # Getting the type of 'cp2' (line 1722)
    cp2_9114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 33), 'cp2', False)
    keyword_9115 = cp2_9114
    kwargs_9116 = {'out': keyword_9115}
    # Getting the type of 'multiply' (line 1722)
    multiply_9111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1722)
    multiply_call_result_9117 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 12), multiply_9111, *[a0_9112, b1_9113], **kwargs_9116)
    
    
    # Getting the type of 'cp2' (line 1723)
    cp2_9118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 12), 'cp2')
    # Getting the type of 'a1' (line 1723)
    a1_9119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 19), 'a1')
    # Getting the type of 'b0' (line 1723)
    b0_9120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 24), 'b0')
    # Applying the binary operator '*' (line 1723)
    result_mul_9121 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 19), '*', a1_9119, b0_9120)
    
    # Applying the binary operator '-=' (line 1723)
    result_isub_9122 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 12), '-=', cp2_9118, result_mul_9121)
    # Assigning a type to the variable 'cp2' (line 1723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 12), 'cp2', result_isub_9122)
    
    # SSA join for if statement (line 1709)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1708)
    module_type_store.open_ssa_branch('else')
    # Evaluating assert statement condition
    
    
    # Obtaining the type of the subscript
    int_9123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1725, 23), 'int')
    # Getting the type of 'a' (line 1725)
    a_9124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 15), 'a')
    # Obtaining the member 'shape' of a type (line 1725)
    shape_9125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1725, 15), a_9124, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1725)
    getitem___9126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1725, 15), shape_9125, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1725)
    subscript_call_result_9127 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 15), getitem___9126, int_9123)
    
    int_9128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1725, 30), 'int')
    # Applying the binary operator '==' (line 1725)
    result_eq_9129 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 15), '==', subscript_call_result_9127, int_9128)
    
    
    
    
    # Obtaining the type of the subscript
    int_9130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, 19), 'int')
    # Getting the type of 'b' (line 1726)
    b_9131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 11), 'b')
    # Obtaining the member 'shape' of a type (line 1726)
    shape_9132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 11), b_9131, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1726)
    getitem___9133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 11), shape_9132, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1726)
    subscript_call_result_9134 = invoke(stypy.reporting.localization.Localization(__file__, 1726, 11), getitem___9133, int_9130)
    
    int_9135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, 26), 'int')
    # Applying the binary operator '==' (line 1726)
    result_eq_9136 = python_operator(stypy.reporting.localization.Localization(__file__, 1726, 11), '==', subscript_call_result_9134, int_9135)
    
    # Testing the type of an if condition (line 1726)
    if_condition_9137 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1726, 8), result_eq_9136)
    # Assigning a type to the variable 'if_condition_9137' (line 1726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'if_condition_9137', if_condition_9137)
    # SSA begins for if statement (line 1726)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to multiply(...): (line 1730)
    # Processing the call arguments (line 1730)
    # Getting the type of 'a1' (line 1730)
    a1_9139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 21), 'a1', False)
    # Getting the type of 'b2' (line 1730)
    b2_9140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 25), 'b2', False)
    # Processing the call keyword arguments (line 1730)
    # Getting the type of 'cp0' (line 1730)
    cp0_9141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 33), 'cp0', False)
    keyword_9142 = cp0_9141
    kwargs_9143 = {'out': keyword_9142}
    # Getting the type of 'multiply' (line 1730)
    multiply_9138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1730)
    multiply_call_result_9144 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 12), multiply_9138, *[a1_9139, b2_9140], **kwargs_9143)
    
    
    # Assigning a Call to a Name (line 1731):
    
    # Assigning a Call to a Name (line 1731):
    
    # Call to array(...): (line 1731)
    # Processing the call arguments (line 1731)
    # Getting the type of 'a2' (line 1731)
    a2_9146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 24), 'a2', False)
    # Getting the type of 'b1' (line 1731)
    b1_9147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 29), 'b1', False)
    # Applying the binary operator '*' (line 1731)
    result_mul_9148 = python_operator(stypy.reporting.localization.Localization(__file__, 1731, 24), '*', a2_9146, b1_9147)
    
    # Processing the call keyword arguments (line 1731)
    kwargs_9149 = {}
    # Getting the type of 'array' (line 1731)
    array_9145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 18), 'array', False)
    # Calling array(args, kwargs) (line 1731)
    array_call_result_9150 = invoke(stypy.reporting.localization.Localization(__file__, 1731, 18), array_9145, *[result_mul_9148], **kwargs_9149)
    
    # Assigning a type to the variable 'tmp' (line 1731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 12), 'tmp', array_call_result_9150)
    
    # Getting the type of 'cp0' (line 1732)
    cp0_9151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 12), 'cp0')
    # Getting the type of 'tmp' (line 1732)
    tmp_9152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 19), 'tmp')
    # Applying the binary operator '-=' (line 1732)
    result_isub_9153 = python_operator(stypy.reporting.localization.Localization(__file__, 1732, 12), '-=', cp0_9151, tmp_9152)
    # Assigning a type to the variable 'cp0' (line 1732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 12), 'cp0', result_isub_9153)
    
    
    # Call to multiply(...): (line 1733)
    # Processing the call arguments (line 1733)
    # Getting the type of 'a2' (line 1733)
    a2_9155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 21), 'a2', False)
    # Getting the type of 'b0' (line 1733)
    b0_9156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 25), 'b0', False)
    # Processing the call keyword arguments (line 1733)
    # Getting the type of 'cp1' (line 1733)
    cp1_9157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 33), 'cp1', False)
    keyword_9158 = cp1_9157
    kwargs_9159 = {'out': keyword_9158}
    # Getting the type of 'multiply' (line 1733)
    multiply_9154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1733)
    multiply_call_result_9160 = invoke(stypy.reporting.localization.Localization(__file__, 1733, 12), multiply_9154, *[a2_9155, b0_9156], **kwargs_9159)
    
    
    # Call to multiply(...): (line 1734)
    # Processing the call arguments (line 1734)
    # Getting the type of 'a0' (line 1734)
    a0_9162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 21), 'a0', False)
    # Getting the type of 'b2' (line 1734)
    b2_9163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 25), 'b2', False)
    # Processing the call keyword arguments (line 1734)
    # Getting the type of 'tmp' (line 1734)
    tmp_9164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 33), 'tmp', False)
    keyword_9165 = tmp_9164
    kwargs_9166 = {'out': keyword_9165}
    # Getting the type of 'multiply' (line 1734)
    multiply_9161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1734)
    multiply_call_result_9167 = invoke(stypy.reporting.localization.Localization(__file__, 1734, 12), multiply_9161, *[a0_9162, b2_9163], **kwargs_9166)
    
    
    # Getting the type of 'cp1' (line 1735)
    cp1_9168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 12), 'cp1')
    # Getting the type of 'tmp' (line 1735)
    tmp_9169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 19), 'tmp')
    # Applying the binary operator '-=' (line 1735)
    result_isub_9170 = python_operator(stypy.reporting.localization.Localization(__file__, 1735, 12), '-=', cp1_9168, tmp_9169)
    # Assigning a type to the variable 'cp1' (line 1735)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 12), 'cp1', result_isub_9170)
    
    
    # Call to multiply(...): (line 1736)
    # Processing the call arguments (line 1736)
    # Getting the type of 'a0' (line 1736)
    a0_9172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 21), 'a0', False)
    # Getting the type of 'b1' (line 1736)
    b1_9173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 25), 'b1', False)
    # Processing the call keyword arguments (line 1736)
    # Getting the type of 'cp2' (line 1736)
    cp2_9174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 33), 'cp2', False)
    keyword_9175 = cp2_9174
    kwargs_9176 = {'out': keyword_9175}
    # Getting the type of 'multiply' (line 1736)
    multiply_9171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1736)
    multiply_call_result_9177 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 12), multiply_9171, *[a0_9172, b1_9173], **kwargs_9176)
    
    
    # Call to multiply(...): (line 1737)
    # Processing the call arguments (line 1737)
    # Getting the type of 'a1' (line 1737)
    a1_9179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 21), 'a1', False)
    # Getting the type of 'b0' (line 1737)
    b0_9180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 25), 'b0', False)
    # Processing the call keyword arguments (line 1737)
    # Getting the type of 'tmp' (line 1737)
    tmp_9181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 33), 'tmp', False)
    keyword_9182 = tmp_9181
    kwargs_9183 = {'out': keyword_9182}
    # Getting the type of 'multiply' (line 1737)
    multiply_9178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1737)
    multiply_call_result_9184 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 12), multiply_9178, *[a1_9179, b0_9180], **kwargs_9183)
    
    
    # Getting the type of 'cp2' (line 1738)
    cp2_9185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 12), 'cp2')
    # Getting the type of 'tmp' (line 1738)
    tmp_9186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 19), 'tmp')
    # Applying the binary operator '-=' (line 1738)
    result_isub_9187 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 12), '-=', cp2_9185, tmp_9186)
    # Assigning a type to the variable 'cp2' (line 1738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 12), 'cp2', result_isub_9187)
    
    # SSA branch for the else part of an if statement (line 1726)
    module_type_store.open_ssa_branch('else')
    # Evaluating assert statement condition
    
    
    # Obtaining the type of the subscript
    int_9188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 27), 'int')
    # Getting the type of 'b' (line 1740)
    b_9189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 19), 'b')
    # Obtaining the member 'shape' of a type (line 1740)
    shape_9190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 19), b_9189, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1740)
    getitem___9191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 19), shape_9190, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1740)
    subscript_call_result_9192 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 19), getitem___9191, int_9188)
    
    int_9193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 34), 'int')
    # Applying the binary operator '==' (line 1740)
    result_eq_9194 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 19), '==', subscript_call_result_9192, int_9193)
    
    
    # Call to multiply(...): (line 1744)
    # Processing the call arguments (line 1744)
    # Getting the type of 'a2' (line 1744)
    a2_9196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 21), 'a2', False)
    # Getting the type of 'b1' (line 1744)
    b1_9197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 25), 'b1', False)
    # Processing the call keyword arguments (line 1744)
    # Getting the type of 'cp0' (line 1744)
    cp0_9198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 33), 'cp0', False)
    keyword_9199 = cp0_9198
    kwargs_9200 = {'out': keyword_9199}
    # Getting the type of 'multiply' (line 1744)
    multiply_9195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1744)
    multiply_call_result_9201 = invoke(stypy.reporting.localization.Localization(__file__, 1744, 12), multiply_9195, *[a2_9196, b1_9197], **kwargs_9200)
    
    
    # Call to negative(...): (line 1745)
    # Processing the call arguments (line 1745)
    # Getting the type of 'cp0' (line 1745)
    cp0_9203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 21), 'cp0', False)
    # Processing the call keyword arguments (line 1745)
    # Getting the type of 'cp0' (line 1745)
    cp0_9204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 30), 'cp0', False)
    keyword_9205 = cp0_9204
    kwargs_9206 = {'out': keyword_9205}
    # Getting the type of 'negative' (line 1745)
    negative_9202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 12), 'negative', False)
    # Calling negative(args, kwargs) (line 1745)
    negative_call_result_9207 = invoke(stypy.reporting.localization.Localization(__file__, 1745, 12), negative_9202, *[cp0_9203], **kwargs_9206)
    
    
    # Call to multiply(...): (line 1746)
    # Processing the call arguments (line 1746)
    # Getting the type of 'a2' (line 1746)
    a2_9209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 21), 'a2', False)
    # Getting the type of 'b0' (line 1746)
    b0_9210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 25), 'b0', False)
    # Processing the call keyword arguments (line 1746)
    # Getting the type of 'cp1' (line 1746)
    cp1_9211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 33), 'cp1', False)
    keyword_9212 = cp1_9211
    kwargs_9213 = {'out': keyword_9212}
    # Getting the type of 'multiply' (line 1746)
    multiply_9208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1746)
    multiply_call_result_9214 = invoke(stypy.reporting.localization.Localization(__file__, 1746, 12), multiply_9208, *[a2_9209, b0_9210], **kwargs_9213)
    
    
    # Call to multiply(...): (line 1747)
    # Processing the call arguments (line 1747)
    # Getting the type of 'a0' (line 1747)
    a0_9216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 21), 'a0', False)
    # Getting the type of 'b1' (line 1747)
    b1_9217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 25), 'b1', False)
    # Processing the call keyword arguments (line 1747)
    # Getting the type of 'cp2' (line 1747)
    cp2_9218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 33), 'cp2', False)
    keyword_9219 = cp2_9218
    kwargs_9220 = {'out': keyword_9219}
    # Getting the type of 'multiply' (line 1747)
    multiply_9215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 12), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1747)
    multiply_call_result_9221 = invoke(stypy.reporting.localization.Localization(__file__, 1747, 12), multiply_9215, *[a0_9216, b1_9217], **kwargs_9220)
    
    
    # Getting the type of 'cp2' (line 1748)
    cp2_9222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 12), 'cp2')
    # Getting the type of 'a1' (line 1748)
    a1_9223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 19), 'a1')
    # Getting the type of 'b0' (line 1748)
    b0_9224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 24), 'b0')
    # Applying the binary operator '*' (line 1748)
    result_mul_9225 = python_operator(stypy.reporting.localization.Localization(__file__, 1748, 19), '*', a1_9223, b0_9224)
    
    # Applying the binary operator '-=' (line 1748)
    result_isub_9226 = python_operator(stypy.reporting.localization.Localization(__file__, 1748, 12), '-=', cp2_9222, result_mul_9225)
    # Assigning a type to the variable 'cp2' (line 1748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 12), 'cp2', result_isub_9226)
    
    # SSA join for if statement (line 1726)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1708)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to rollaxis(...): (line 1751)
    # Processing the call arguments (line 1751)
    # Getting the type of 'cp' (line 1751)
    cp_9228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 20), 'cp', False)
    int_9229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1751, 24), 'int')
    # Getting the type of 'axisc' (line 1751)
    axisc_9230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 28), 'axisc', False)
    # Processing the call keyword arguments (line 1751)
    kwargs_9231 = {}
    # Getting the type of 'rollaxis' (line 1751)
    rollaxis_9227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 11), 'rollaxis', False)
    # Calling rollaxis(args, kwargs) (line 1751)
    rollaxis_call_result_9232 = invoke(stypy.reporting.localization.Localization(__file__, 1751, 11), rollaxis_9227, *[cp_9228, int_9229, axisc_9230], **kwargs_9231)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1751, 4), 'stypy_return_type', rollaxis_call_result_9232)
    
    # ################# End of 'cross(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cross' in the type store
    # Getting the type of 'stypy_return_type' (line 1553)
    stypy_return_type_9233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9233)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cross'
    return stypy_return_type_9233

# Assigning a type to the variable 'cross' (line 1553)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 0), 'cross', cross)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1754, 0))

# 'from numpy.core.arrayprint import array2string, get_printoptions, set_printoptions' statement (line 1754)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_9234 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1754, 0), 'numpy.core.arrayprint')

if (type(import_9234) is not StypyTypeError):

    if (import_9234 != 'pyd_module'):
        __import__(import_9234)
        sys_modules_9235 = sys.modules[import_9234]
        import_from_module(stypy.reporting.localization.Localization(__file__, 1754, 0), 'numpy.core.arrayprint', sys_modules_9235.module_type_store, module_type_store, ['array2string', 'get_printoptions', 'set_printoptions'])
        nest_module(stypy.reporting.localization.Localization(__file__, 1754, 0), __file__, sys_modules_9235, sys_modules_9235.module_type_store, module_type_store)
    else:
        from numpy.core.arrayprint import array2string, get_printoptions, set_printoptions

        import_from_module(stypy.reporting.localization.Localization(__file__, 1754, 0), 'numpy.core.arrayprint', None, module_type_store, ['array2string', 'get_printoptions', 'set_printoptions'], [array2string, get_printoptions, set_printoptions])

else:
    # Assigning a type to the variable 'numpy.core.arrayprint' (line 1754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 0), 'numpy.core.arrayprint', import_9234)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')


# Assigning a List to a Name (line 1756):

# Assigning a List to a Name (line 1756):

# Obtaining an instance of the builtin type 'list' (line 1756)
list_9236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1756, 16), 'list')
# Adding type elements to the builtin type 'list' instance (line 1756)
# Adding element type (line 1756)
# Getting the type of 'int_' (line 1756)
int__9237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 17), 'int_')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1756, 16), list_9236, int__9237)
# Adding element type (line 1756)
# Getting the type of 'float_' (line 1756)
float__9238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 23), 'float_')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1756, 16), list_9236, float__9238)
# Adding element type (line 1756)
# Getting the type of 'complex_' (line 1756)
complex__9239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 31), 'complex_')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1756, 16), list_9236, complex__9239)

# Assigning a type to the variable '_typelessdata' (line 1756)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 0), '_typelessdata', list_9236)


# Call to issubclass(...): (line 1757)
# Processing the call arguments (line 1757)
# Getting the type of 'intc' (line 1757)
intc_9241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 14), 'intc', False)
# Getting the type of 'int' (line 1757)
int_9242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 20), 'int', False)
# Processing the call keyword arguments (line 1757)
kwargs_9243 = {}
# Getting the type of 'issubclass' (line 1757)
issubclass_9240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 3), 'issubclass', False)
# Calling issubclass(args, kwargs) (line 1757)
issubclass_call_result_9244 = invoke(stypy.reporting.localization.Localization(__file__, 1757, 3), issubclass_9240, *[intc_9241, int_9242], **kwargs_9243)

# Testing the type of an if condition (line 1757)
if_condition_9245 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1757, 0), issubclass_call_result_9244)
# Assigning a type to the variable 'if_condition_9245' (line 1757)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1757, 0), 'if_condition_9245', if_condition_9245)
# SSA begins for if statement (line 1757)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to append(...): (line 1758)
# Processing the call arguments (line 1758)
# Getting the type of 'intc' (line 1758)
intc_9248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 25), 'intc', False)
# Processing the call keyword arguments (line 1758)
kwargs_9249 = {}
# Getting the type of '_typelessdata' (line 1758)
_typelessdata_9246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 4), '_typelessdata', False)
# Obtaining the member 'append' of a type (line 1758)
append_9247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1758, 4), _typelessdata_9246, 'append')
# Calling append(args, kwargs) (line 1758)
append_call_result_9250 = invoke(stypy.reporting.localization.Localization(__file__, 1758, 4), append_9247, *[intc_9248], **kwargs_9249)

# SSA join for if statement (line 1757)
module_type_store = module_type_store.join_ssa_context()



# Call to issubclass(...): (line 1760)
# Processing the call arguments (line 1760)
# Getting the type of 'longlong' (line 1760)
longlong_9252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 14), 'longlong', False)
# Getting the type of 'int' (line 1760)
int_9253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 24), 'int', False)
# Processing the call keyword arguments (line 1760)
kwargs_9254 = {}
# Getting the type of 'issubclass' (line 1760)
issubclass_9251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 3), 'issubclass', False)
# Calling issubclass(args, kwargs) (line 1760)
issubclass_call_result_9255 = invoke(stypy.reporting.localization.Localization(__file__, 1760, 3), issubclass_9251, *[longlong_9252, int_9253], **kwargs_9254)

# Testing the type of an if condition (line 1760)
if_condition_9256 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1760, 0), issubclass_call_result_9255)
# Assigning a type to the variable 'if_condition_9256' (line 1760)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 0), 'if_condition_9256', if_condition_9256)
# SSA begins for if statement (line 1760)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to append(...): (line 1761)
# Processing the call arguments (line 1761)
# Getting the type of 'longlong' (line 1761)
longlong_9259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 25), 'longlong', False)
# Processing the call keyword arguments (line 1761)
kwargs_9260 = {}
# Getting the type of '_typelessdata' (line 1761)
_typelessdata_9257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 4), '_typelessdata', False)
# Obtaining the member 'append' of a type (line 1761)
append_9258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 4), _typelessdata_9257, 'append')
# Calling append(args, kwargs) (line 1761)
append_call_result_9261 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 4), append_9258, *[longlong_9259], **kwargs_9260)

# SSA join for if statement (line 1760)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def array_repr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1763)
    None_9262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 35), 'None')
    # Getting the type of 'None' (line 1763)
    None_9263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 51), 'None')
    # Getting the type of 'None' (line 1763)
    None_9264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 72), 'None')
    defaults = [None_9262, None_9263, None_9264]
    # Create a new context for function 'array_repr'
    module_type_store = module_type_store.open_function_context('array_repr', 1763, 0, False)
    
    # Passed parameters checking function
    array_repr.stypy_localization = localization
    array_repr.stypy_type_of_self = None
    array_repr.stypy_type_store = module_type_store
    array_repr.stypy_function_name = 'array_repr'
    array_repr.stypy_param_names_list = ['arr', 'max_line_width', 'precision', 'suppress_small']
    array_repr.stypy_varargs_param_name = None
    array_repr.stypy_kwargs_param_name = None
    array_repr.stypy_call_defaults = defaults
    array_repr.stypy_call_varargs = varargs
    array_repr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'array_repr', ['arr', 'max_line_width', 'precision', 'suppress_small'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'array_repr', localization, ['arr', 'max_line_width', 'precision', 'suppress_small'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'array_repr(...)' code ##################

    str_9265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1804, (-1)), 'str', "\n    Return the string representation of an array.\n\n    Parameters\n    ----------\n    arr : ndarray\n        Input array.\n    max_line_width : int, optional\n        The maximum number of columns the string should span. Newline\n        characters split the string appropriately after array elements.\n    precision : int, optional\n        Floating point precision. Default is the current printing precision\n        (usually 8), which can be altered using `set_printoptions`.\n    suppress_small : bool, optional\n        Represent very small numbers as zero, default is False. Very small\n        is defined by `precision`, if the precision is 8 then\n        numbers smaller than 5e-9 are represented as zero.\n\n    Returns\n    -------\n    string : str\n      The string representation of an array.\n\n    See Also\n    --------\n    array_str, array2string, set_printoptions\n\n    Examples\n    --------\n    >>> np.array_repr(np.array([1,2]))\n    'array([1, 2])'\n    >>> np.array_repr(np.ma.array([0.]))\n    'MaskedArray([ 0.])'\n    >>> np.array_repr(np.array([], np.int32))\n    'array([], dtype=int32)'\n\n    >>> x = np.array([1e-6, 4e-7, 2, 3])\n    >>> np.array_repr(x, precision=6, suppress_small=True)\n    'array([ 0.000001,  0.      ,  2.      ,  3.      ])'\n\n    ")
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'arr' (line 1805)
    arr_9266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 7), 'arr')
    # Obtaining the member 'size' of a type (line 1805)
    size_9267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 7), arr_9266, 'size')
    int_9268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1805, 18), 'int')
    # Applying the binary operator '>' (line 1805)
    result_gt_9269 = python_operator(stypy.reporting.localization.Localization(__file__, 1805, 7), '>', size_9267, int_9268)
    
    
    # Getting the type of 'arr' (line 1805)
    arr_9270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 23), 'arr')
    # Obtaining the member 'shape' of a type (line 1805)
    shape_9271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 23), arr_9270, 'shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1805)
    tuple_9272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1805, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1805)
    # Adding element type (line 1805)
    int_9273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1805, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1805, 37), tuple_9272, int_9273)
    
    # Applying the binary operator '==' (line 1805)
    result_eq_9274 = python_operator(stypy.reporting.localization.Localization(__file__, 1805, 23), '==', shape_9271, tuple_9272)
    
    # Applying the binary operator 'or' (line 1805)
    result_or_keyword_9275 = python_operator(stypy.reporting.localization.Localization(__file__, 1805, 7), 'or', result_gt_9269, result_eq_9274)
    
    # Testing the type of an if condition (line 1805)
    if_condition_9276 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1805, 4), result_or_keyword_9275)
    # Assigning a type to the variable 'if_condition_9276' (line 1805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 4), 'if_condition_9276', if_condition_9276)
    # SSA begins for if statement (line 1805)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1806):
    
    # Assigning a Call to a Name (line 1806):
    
    # Call to array2string(...): (line 1806)
    # Processing the call arguments (line 1806)
    # Getting the type of 'arr' (line 1806)
    arr_9278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 27), 'arr', False)
    # Getting the type of 'max_line_width' (line 1806)
    max_line_width_9279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 32), 'max_line_width', False)
    # Getting the type of 'precision' (line 1806)
    precision_9280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 48), 'precision', False)
    # Getting the type of 'suppress_small' (line 1806)
    suppress_small_9281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 59), 'suppress_small', False)
    str_9282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 27), 'str', ', ')
    str_9283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 33), 'str', 'array(')
    # Processing the call keyword arguments (line 1806)
    kwargs_9284 = {}
    # Getting the type of 'array2string' (line 1806)
    array2string_9277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 14), 'array2string', False)
    # Calling array2string(args, kwargs) (line 1806)
    array2string_call_result_9285 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 14), array2string_9277, *[arr_9278, max_line_width_9279, precision_9280, suppress_small_9281, str_9282, str_9283], **kwargs_9284)
    
    # Assigning a type to the variable 'lst' (line 1806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 8), 'lst', array2string_call_result_9285)
    # SSA branch for the else part of an if statement (line 1805)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1809):
    
    # Assigning a BinOp to a Name (line 1809):
    str_9286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 14), 'str', '[], shape=%s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1809)
    tuple_9287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1809)
    # Adding element type (line 1809)
    
    # Call to repr(...): (line 1809)
    # Processing the call arguments (line 1809)
    # Getting the type of 'arr' (line 1809)
    arr_9289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 37), 'arr', False)
    # Obtaining the member 'shape' of a type (line 1809)
    shape_9290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 37), arr_9289, 'shape')
    # Processing the call keyword arguments (line 1809)
    kwargs_9291 = {}
    # Getting the type of 'repr' (line 1809)
    repr_9288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 32), 'repr', False)
    # Calling repr(args, kwargs) (line 1809)
    repr_call_result_9292 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 32), repr_9288, *[shape_9290], **kwargs_9291)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 32), tuple_9287, repr_call_result_9292)
    
    # Applying the binary operator '%' (line 1809)
    result_mod_9293 = python_operator(stypy.reporting.localization.Localization(__file__, 1809, 14), '%', str_9286, tuple_9287)
    
    # Assigning a type to the variable 'lst' (line 1809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 8), 'lst', result_mod_9293)
    # SSA join for if statement (line 1805)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'arr' (line 1811)
    arr_9294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 7), 'arr')
    # Obtaining the member '__class__' of a type (line 1811)
    class___9295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 7), arr_9294, '__class__')
    # Getting the type of 'ndarray' (line 1811)
    ndarray_9296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 28), 'ndarray')
    # Applying the binary operator 'isnot' (line 1811)
    result_is_not_9297 = python_operator(stypy.reporting.localization.Localization(__file__, 1811, 7), 'isnot', class___9295, ndarray_9296)
    
    # Testing the type of an if condition (line 1811)
    if_condition_9298 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1811, 4), result_is_not_9297)
    # Assigning a type to the variable 'if_condition_9298' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'if_condition_9298', if_condition_9298)
    # SSA begins for if statement (line 1811)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1812):
    
    # Assigning a Attribute to a Name (line 1812):
    # Getting the type of 'arr' (line 1812)
    arr_9299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 16), 'arr')
    # Obtaining the member '__class__' of a type (line 1812)
    class___9300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 16), arr_9299, '__class__')
    # Obtaining the member '__name__' of a type (line 1812)
    name___9301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 16), class___9300, '__name__')
    # Assigning a type to the variable 'cName' (line 1812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 8), 'cName', name___9301)
    # SSA branch for the else part of an if statement (line 1811)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Str to a Name (line 1814):
    
    # Assigning a Str to a Name (line 1814):
    str_9302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 16), 'str', 'array')
    # Assigning a type to the variable 'cName' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'cName', str_9302)
    # SSA join for if statement (line 1811)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BoolOp to a Name (line 1816):
    
    # Assigning a BoolOp to a Name (line 1816):
    
    # Evaluating a boolean operation
    
    # Getting the type of 'arr' (line 1816)
    arr_9303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 17), 'arr')
    # Obtaining the member 'dtype' of a type (line 1816)
    dtype_9304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 17), arr_9303, 'dtype')
    # Obtaining the member 'type' of a type (line 1816)
    type_9305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 17), dtype_9304, 'type')
    # Getting the type of '_typelessdata' (line 1816)
    _typelessdata_9306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 35), '_typelessdata')
    # Applying the binary operator 'in' (line 1816)
    result_contains_9307 = python_operator(stypy.reporting.localization.Localization(__file__, 1816, 17), 'in', type_9305, _typelessdata_9306)
    
    
    # Getting the type of 'arr' (line 1816)
    arr_9308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 54), 'arr')
    # Obtaining the member 'size' of a type (line 1816)
    size_9309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 54), arr_9308, 'size')
    int_9310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 65), 'int')
    # Applying the binary operator '>' (line 1816)
    result_gt_9311 = python_operator(stypy.reporting.localization.Localization(__file__, 1816, 54), '>', size_9309, int_9310)
    
    # Applying the binary operator 'and' (line 1816)
    result_and_keyword_9312 = python_operator(stypy.reporting.localization.Localization(__file__, 1816, 16), 'and', result_contains_9307, result_gt_9311)
    
    # Assigning a type to the variable 'skipdtype' (line 1816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 4), 'skipdtype', result_and_keyword_9312)
    
    # Getting the type of 'skipdtype' (line 1818)
    skipdtype_9313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 7), 'skipdtype')
    # Testing the type of an if condition (line 1818)
    if_condition_9314 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1818, 4), skipdtype_9313)
    # Assigning a type to the variable 'if_condition_9314' (line 1818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 4), 'if_condition_9314', if_condition_9314)
    # SSA begins for if statement (line 1818)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    str_9315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 15), 'str', '%s(%s)')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1819)
    tuple_9316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1819)
    # Adding element type (line 1819)
    # Getting the type of 'cName' (line 1819)
    cName_9317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 27), 'cName')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1819, 27), tuple_9316, cName_9317)
    # Adding element type (line 1819)
    # Getting the type of 'lst' (line 1819)
    lst_9318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 34), 'lst')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1819, 27), tuple_9316, lst_9318)
    
    # Applying the binary operator '%' (line 1819)
    result_mod_9319 = python_operator(stypy.reporting.localization.Localization(__file__, 1819, 15), '%', str_9315, tuple_9316)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 8), 'stypy_return_type', result_mod_9319)
    # SSA branch for the else part of an if statement (line 1818)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 1821):
    
    # Assigning a Attribute to a Name (line 1821):
    # Getting the type of 'arr' (line 1821)
    arr_9320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 19), 'arr')
    # Obtaining the member 'dtype' of a type (line 1821)
    dtype_9321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 19), arr_9320, 'dtype')
    # Obtaining the member 'name' of a type (line 1821)
    name_9322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 19), dtype_9321, 'name')
    # Assigning a type to the variable 'typename' (line 1821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1821, 8), 'typename', name_9322)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'typename' (line 1823)
    typename_9323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 11), 'typename')
    
    
    # Evaluating a boolean operation
    
    # Call to isalpha(...): (line 1823)
    # Processing the call keyword arguments (line 1823)
    kwargs_9329 = {}
    
    # Obtaining the type of the subscript
    int_9324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1823, 38), 'int')
    # Getting the type of 'typename' (line 1823)
    typename_9325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 29), 'typename', False)
    # Obtaining the member '__getitem__' of a type (line 1823)
    getitem___9326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1823, 29), typename_9325, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1823)
    subscript_call_result_9327 = invoke(stypy.reporting.localization.Localization(__file__, 1823, 29), getitem___9326, int_9324)
    
    # Obtaining the member 'isalpha' of a type (line 1823)
    isalpha_9328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1823, 29), subscript_call_result_9327, 'isalpha')
    # Calling isalpha(args, kwargs) (line 1823)
    isalpha_call_result_9330 = invoke(stypy.reporting.localization.Localization(__file__, 1823, 29), isalpha_9328, *[], **kwargs_9329)
    
    
    # Call to isalnum(...): (line 1823)
    # Processing the call keyword arguments (line 1823)
    kwargs_9333 = {}
    # Getting the type of 'typename' (line 1823)
    typename_9331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 55), 'typename', False)
    # Obtaining the member 'isalnum' of a type (line 1823)
    isalnum_9332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1823, 55), typename_9331, 'isalnum')
    # Calling isalnum(args, kwargs) (line 1823)
    isalnum_call_result_9334 = invoke(stypy.reporting.localization.Localization(__file__, 1823, 55), isalnum_9332, *[], **kwargs_9333)
    
    # Applying the binary operator 'and' (line 1823)
    result_and_keyword_9335 = python_operator(stypy.reporting.localization.Localization(__file__, 1823, 29), 'and', isalpha_call_result_9330, isalnum_call_result_9334)
    
    # Applying the 'not' unary operator (line 1823)
    result_not__9336 = python_operator(stypy.reporting.localization.Localization(__file__, 1823, 24), 'not', result_and_keyword_9335)
    
    # Applying the binary operator 'and' (line 1823)
    result_and_keyword_9337 = python_operator(stypy.reporting.localization.Localization(__file__, 1823, 11), 'and', typename_9323, result_not__9336)
    
    # Testing the type of an if condition (line 1823)
    if_condition_9338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1823, 8), result_and_keyword_9337)
    # Assigning a type to the variable 'if_condition_9338' (line 1823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1823, 8), 'if_condition_9338', if_condition_9338)
    # SSA begins for if statement (line 1823)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1824):
    
    # Assigning a BinOp to a Name (line 1824):
    str_9339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1824, 23), 'str', "'%s'")
    # Getting the type of 'typename' (line 1824)
    typename_9340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 32), 'typename')
    # Applying the binary operator '%' (line 1824)
    result_mod_9341 = python_operator(stypy.reporting.localization.Localization(__file__, 1824, 23), '%', str_9339, typename_9340)
    
    # Assigning a type to the variable 'typename' (line 1824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1824, 12), 'typename', result_mod_9341)
    # SSA join for if statement (line 1823)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Str to a Name (line 1826):
    
    # Assigning a Str to a Name (line 1826):
    str_9342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1826, 13), 'str', '')
    # Assigning a type to the variable 'lf' (line 1826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1826, 8), 'lf', str_9342)
    
    
    # Call to issubclass(...): (line 1827)
    # Processing the call arguments (line 1827)
    # Getting the type of 'arr' (line 1827)
    arr_9344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 22), 'arr', False)
    # Obtaining the member 'dtype' of a type (line 1827)
    dtype_9345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 22), arr_9344, 'dtype')
    # Obtaining the member 'type' of a type (line 1827)
    type_9346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 22), dtype_9345, 'type')
    # Getting the type of 'flexible' (line 1827)
    flexible_9347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 38), 'flexible', False)
    # Processing the call keyword arguments (line 1827)
    kwargs_9348 = {}
    # Getting the type of 'issubclass' (line 1827)
    issubclass_9343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 11), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 1827)
    issubclass_call_result_9349 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 11), issubclass_9343, *[type_9346, flexible_9347], **kwargs_9348)
    
    # Testing the type of an if condition (line 1827)
    if_condition_9350 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1827, 8), issubclass_call_result_9349)
    # Assigning a type to the variable 'if_condition_9350' (line 1827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 8), 'if_condition_9350', if_condition_9350)
    # SSA begins for if statement (line 1827)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'arr' (line 1828)
    arr_9351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 15), 'arr')
    # Obtaining the member 'dtype' of a type (line 1828)
    dtype_9352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 15), arr_9351, 'dtype')
    # Obtaining the member 'names' of a type (line 1828)
    names_9353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 15), dtype_9352, 'names')
    # Testing the type of an if condition (line 1828)
    if_condition_9354 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1828, 12), names_9353)
    # Assigning a type to the variable 'if_condition_9354' (line 1828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 12), 'if_condition_9354', if_condition_9354)
    # SSA begins for if statement (line 1828)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1829):
    
    # Assigning a BinOp to a Name (line 1829):
    str_9355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 27), 'str', '%s')
    
    # Call to str(...): (line 1829)
    # Processing the call arguments (line 1829)
    # Getting the type of 'arr' (line 1829)
    arr_9357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 38), 'arr', False)
    # Obtaining the member 'dtype' of a type (line 1829)
    dtype_9358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1829, 38), arr_9357, 'dtype')
    # Processing the call keyword arguments (line 1829)
    kwargs_9359 = {}
    # Getting the type of 'str' (line 1829)
    str_9356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 34), 'str', False)
    # Calling str(args, kwargs) (line 1829)
    str_call_result_9360 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 34), str_9356, *[dtype_9358], **kwargs_9359)
    
    # Applying the binary operator '%' (line 1829)
    result_mod_9361 = python_operator(stypy.reporting.localization.Localization(__file__, 1829, 27), '%', str_9355, str_call_result_9360)
    
    # Assigning a type to the variable 'typename' (line 1829)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 16), 'typename', result_mod_9361)
    # SSA branch for the else part of an if statement (line 1828)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1831):
    
    # Assigning a BinOp to a Name (line 1831):
    str_9362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 27), 'str', "'%s'")
    
    # Call to str(...): (line 1831)
    # Processing the call arguments (line 1831)
    # Getting the type of 'arr' (line 1831)
    arr_9364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 40), 'arr', False)
    # Obtaining the member 'dtype' of a type (line 1831)
    dtype_9365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1831, 40), arr_9364, 'dtype')
    # Processing the call keyword arguments (line 1831)
    kwargs_9366 = {}
    # Getting the type of 'str' (line 1831)
    str_9363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 36), 'str', False)
    # Calling str(args, kwargs) (line 1831)
    str_call_result_9367 = invoke(stypy.reporting.localization.Localization(__file__, 1831, 36), str_9363, *[dtype_9365], **kwargs_9366)
    
    # Applying the binary operator '%' (line 1831)
    result_mod_9368 = python_operator(stypy.reporting.localization.Localization(__file__, 1831, 27), '%', str_9362, str_call_result_9367)
    
    # Assigning a type to the variable 'typename' (line 1831)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 16), 'typename', result_mod_9368)
    # SSA join for if statement (line 1828)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1832):
    
    # Assigning a BinOp to a Name (line 1832):
    str_9369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 17), 'str', '\n')
    str_9370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 22), 'str', ' ')
    
    # Call to len(...): (line 1832)
    # Processing the call arguments (line 1832)
    str_9372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 30), 'str', 'array(')
    # Processing the call keyword arguments (line 1832)
    kwargs_9373 = {}
    # Getting the type of 'len' (line 1832)
    len_9371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 26), 'len', False)
    # Calling len(args, kwargs) (line 1832)
    len_call_result_9374 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 26), len_9371, *[str_9372], **kwargs_9373)
    
    # Applying the binary operator '*' (line 1832)
    result_mul_9375 = python_operator(stypy.reporting.localization.Localization(__file__, 1832, 22), '*', str_9370, len_call_result_9374)
    
    # Applying the binary operator '+' (line 1832)
    result_add_9376 = python_operator(stypy.reporting.localization.Localization(__file__, 1832, 17), '+', str_9369, result_mul_9375)
    
    # Assigning a type to the variable 'lf' (line 1832)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 12), 'lf', result_add_9376)
    # SSA join for if statement (line 1827)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'cName' (line 1833)
    cName_9377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 15), 'cName')
    str_9378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 23), 'str', '(%s, %sdtype=%s)')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1833)
    tuple_9379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 45), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1833)
    # Adding element type (line 1833)
    # Getting the type of 'lst' (line 1833)
    lst_9380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 45), 'lst')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1833, 45), tuple_9379, lst_9380)
    # Adding element type (line 1833)
    # Getting the type of 'lf' (line 1833)
    lf_9381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 50), 'lf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1833, 45), tuple_9379, lf_9381)
    # Adding element type (line 1833)
    # Getting the type of 'typename' (line 1833)
    typename_9382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 54), 'typename')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1833, 45), tuple_9379, typename_9382)
    
    # Applying the binary operator '%' (line 1833)
    result_mod_9383 = python_operator(stypy.reporting.localization.Localization(__file__, 1833, 23), '%', str_9378, tuple_9379)
    
    # Applying the binary operator '+' (line 1833)
    result_add_9384 = python_operator(stypy.reporting.localization.Localization(__file__, 1833, 15), '+', cName_9377, result_mod_9383)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1833, 8), 'stypy_return_type', result_add_9384)
    # SSA join for if statement (line 1818)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'array_repr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'array_repr' in the type store
    # Getting the type of 'stypy_return_type' (line 1763)
    stypy_return_type_9385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9385)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'array_repr'
    return stypy_return_type_9385

# Assigning a type to the variable 'array_repr' (line 1763)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 0), 'array_repr', array_repr)

@norecursion
def array_str(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1835)
    None_9386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 32), 'None')
    # Getting the type of 'None' (line 1835)
    None_9387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 48), 'None')
    # Getting the type of 'None' (line 1835)
    None_9388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 69), 'None')
    defaults = [None_9386, None_9387, None_9388]
    # Create a new context for function 'array_str'
    module_type_store = module_type_store.open_function_context('array_str', 1835, 0, False)
    
    # Passed parameters checking function
    array_str.stypy_localization = localization
    array_str.stypy_type_of_self = None
    array_str.stypy_type_store = module_type_store
    array_str.stypy_function_name = 'array_str'
    array_str.stypy_param_names_list = ['a', 'max_line_width', 'precision', 'suppress_small']
    array_str.stypy_varargs_param_name = None
    array_str.stypy_kwargs_param_name = None
    array_str.stypy_call_defaults = defaults
    array_str.stypy_call_varargs = varargs
    array_str.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'array_str', ['a', 'max_line_width', 'precision', 'suppress_small'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'array_str', localization, ['a', 'max_line_width', 'precision', 'suppress_small'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'array_str(...)' code ##################

    str_9389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, (-1)), 'str', '\n    Return a string representation of the data in an array.\n\n    The data in the array is returned as a single string.  This function is\n    similar to `array_repr`, the difference being that `array_repr` also\n    returns information on the kind of array and its data type.\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array.\n    max_line_width : int, optional\n        Inserts newlines if text is longer than `max_line_width`.  The\n        default is, indirectly, 75.\n    precision : int, optional\n        Floating point precision.  Default is the current printing precision\n        (usually 8), which can be altered using `set_printoptions`.\n    suppress_small : bool, optional\n        Represent numbers "very close" to zero as zero; default is False.\n        Very close is defined by precision: if the precision is 8, e.g.,\n        numbers smaller (in absolute value) than 5e-9 are represented as\n        zero.\n\n    See Also\n    --------\n    array2string, array_repr, set_printoptions\n\n    Examples\n    --------\n    >>> np.array_str(np.arange(3))\n    \'[0 1 2]\'\n\n    ')
    
    # Call to array2string(...): (line 1869)
    # Processing the call arguments (line 1869)
    # Getting the type of 'a' (line 1869)
    a_9391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 24), 'a', False)
    # Getting the type of 'max_line_width' (line 1869)
    max_line_width_9392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 27), 'max_line_width', False)
    # Getting the type of 'precision' (line 1869)
    precision_9393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 43), 'precision', False)
    # Getting the type of 'suppress_small' (line 1869)
    suppress_small_9394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 54), 'suppress_small', False)
    str_9395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 70), 'str', ' ')
    str_9396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 75), 'str', '')
    # Getting the type of 'str' (line 1869)
    str_9397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 79), 'str', False)
    # Processing the call keyword arguments (line 1869)
    kwargs_9398 = {}
    # Getting the type of 'array2string' (line 1869)
    array2string_9390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 11), 'array2string', False)
    # Calling array2string(args, kwargs) (line 1869)
    array2string_call_result_9399 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 11), array2string_9390, *[a_9391, max_line_width_9392, precision_9393, suppress_small_9394, str_9395, str_9396, str_9397], **kwargs_9398)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 4), 'stypy_return_type', array2string_call_result_9399)
    
    # ################# End of 'array_str(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'array_str' in the type store
    # Getting the type of 'stypy_return_type' (line 1835)
    stypy_return_type_9400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9400)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'array_str'
    return stypy_return_type_9400

# Assigning a type to the variable 'array_str' (line 1835)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1835, 0), 'array_str', array_str)

@norecursion
def set_string_function(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 1871)
    True_9401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 32), 'True')
    defaults = [True_9401]
    # Create a new context for function 'set_string_function'
    module_type_store = module_type_store.open_function_context('set_string_function', 1871, 0, False)
    
    # Passed parameters checking function
    set_string_function.stypy_localization = localization
    set_string_function.stypy_type_of_self = None
    set_string_function.stypy_type_store = module_type_store
    set_string_function.stypy_function_name = 'set_string_function'
    set_string_function.stypy_param_names_list = ['f', 'repr']
    set_string_function.stypy_varargs_param_name = None
    set_string_function.stypy_kwargs_param_name = None
    set_string_function.stypy_call_defaults = defaults
    set_string_function.stypy_call_varargs = varargs
    set_string_function.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'set_string_function', ['f', 'repr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'set_string_function', localization, ['f', 'repr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'set_string_function(...)' code ##################

    str_9402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, (-1)), 'str', "\n    Set a Python function to be used when pretty printing arrays.\n\n    Parameters\n    ----------\n    f : function or None\n        Function to be used to pretty print arrays. The function should expect\n        a single array argument and return a string of the representation of\n        the array. If None, the function is reset to the default NumPy function\n        to print arrays.\n    repr : bool, optional\n        If True (default), the function for pretty printing (``__repr__``)\n        is set, if False the function that returns the default string\n        representation (``__str__``) is set.\n\n    See Also\n    --------\n    set_printoptions, get_printoptions\n\n    Examples\n    --------\n    >>> def pprint(arr):\n    ...     return 'HA! - What are you going to do now?'\n    ...\n    >>> np.set_string_function(pprint)\n    >>> a = np.arange(10)\n    >>> a\n    HA! - What are you going to do now?\n    >>> print(a)\n    [0 1 2 3 4 5 6 7 8 9]\n\n    We can reset the function to the default:\n\n    >>> np.set_string_function(None)\n    >>> a\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    `repr` affects either pretty printing or normal string representation.\n    Note that ``__repr__`` is still affected by setting ``__str__``\n    because the width of each array element in the returned string becomes\n    equal to the length of the result of ``__str__()``.\n\n    >>> x = np.arange(4)\n    >>> np.set_string_function(lambda x:'random', repr=False)\n    >>> x.__str__()\n    'random'\n    >>> x.__repr__()\n    'array([     0,      1,      2,      3])'\n\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 1922)
    # Getting the type of 'f' (line 1922)
    f_9403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 7), 'f')
    # Getting the type of 'None' (line 1922)
    None_9404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 12), 'None')
    
    (may_be_9405, more_types_in_union_9406) = may_be_none(f_9403, None_9404)

    if may_be_9405:

        if more_types_in_union_9406:
            # Runtime conditional SSA (line 1922)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'repr' (line 1923)
        repr_9407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 11), 'repr')
        # Testing the type of an if condition (line 1923)
        if_condition_9408 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1923, 8), repr_9407)
        # Assigning a type to the variable 'if_condition_9408' (line 1923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 8), 'if_condition_9408', if_condition_9408)
        # SSA begins for if statement (line 1923)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_string_function(...): (line 1924)
        # Processing the call arguments (line 1924)
        # Getting the type of 'array_repr' (line 1924)
        array_repr_9411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 50), 'array_repr', False)
        int_9412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 62), 'int')
        # Processing the call keyword arguments (line 1924)
        kwargs_9413 = {}
        # Getting the type of 'multiarray' (line 1924)
        multiarray_9409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 19), 'multiarray', False)
        # Obtaining the member 'set_string_function' of a type (line 1924)
        set_string_function_9410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 19), multiarray_9409, 'set_string_function')
        # Calling set_string_function(args, kwargs) (line 1924)
        set_string_function_call_result_9414 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 19), set_string_function_9410, *[array_repr_9411, int_9412], **kwargs_9413)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 12), 'stypy_return_type', set_string_function_call_result_9414)
        # SSA branch for the else part of an if statement (line 1923)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_string_function(...): (line 1926)
        # Processing the call arguments (line 1926)
        # Getting the type of 'array_str' (line 1926)
        array_str_9417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 50), 'array_str', False)
        int_9418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1926, 61), 'int')
        # Processing the call keyword arguments (line 1926)
        kwargs_9419 = {}
        # Getting the type of 'multiarray' (line 1926)
        multiarray_9415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 19), 'multiarray', False)
        # Obtaining the member 'set_string_function' of a type (line 1926)
        set_string_function_9416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 19), multiarray_9415, 'set_string_function')
        # Calling set_string_function(args, kwargs) (line 1926)
        set_string_function_call_result_9420 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 19), set_string_function_9416, *[array_str_9417, int_9418], **kwargs_9419)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 12), 'stypy_return_type', set_string_function_call_result_9420)
        # SSA join for if statement (line 1923)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_9406:
            # Runtime conditional SSA for else branch (line 1922)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_9405) or more_types_in_union_9406):
        
        # Call to set_string_function(...): (line 1928)
        # Processing the call arguments (line 1928)
        # Getting the type of 'f' (line 1928)
        f_9423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 46), 'f', False)
        # Getting the type of 'repr' (line 1928)
        repr_9424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 49), 'repr', False)
        # Processing the call keyword arguments (line 1928)
        kwargs_9425 = {}
        # Getting the type of 'multiarray' (line 1928)
        multiarray_9421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 15), 'multiarray', False)
        # Obtaining the member 'set_string_function' of a type (line 1928)
        set_string_function_9422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1928, 15), multiarray_9421, 'set_string_function')
        # Calling set_string_function(args, kwargs) (line 1928)
        set_string_function_call_result_9426 = invoke(stypy.reporting.localization.Localization(__file__, 1928, 15), set_string_function_9422, *[f_9423, repr_9424], **kwargs_9425)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1928, 8), 'stypy_return_type', set_string_function_call_result_9426)

        if (may_be_9405 and more_types_in_union_9406):
            # SSA join for if statement (line 1922)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'set_string_function(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'set_string_function' in the type store
    # Getting the type of 'stypy_return_type' (line 1871)
    stypy_return_type_9427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9427)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'set_string_function'
    return stypy_return_type_9427

# Assigning a type to the variable 'set_string_function' (line 1871)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 0), 'set_string_function', set_string_function)

# Call to set_string_function(...): (line 1930)
# Processing the call arguments (line 1930)
# Getting the type of 'array_str' (line 1930)
array_str_9429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 20), 'array_str', False)
int_9430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1930, 31), 'int')
# Processing the call keyword arguments (line 1930)
kwargs_9431 = {}
# Getting the type of 'set_string_function' (line 1930)
set_string_function_9428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 0), 'set_string_function', False)
# Calling set_string_function(args, kwargs) (line 1930)
set_string_function_call_result_9432 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 0), set_string_function_9428, *[array_str_9429, int_9430], **kwargs_9431)


# Call to set_string_function(...): (line 1931)
# Processing the call arguments (line 1931)
# Getting the type of 'array_repr' (line 1931)
array_repr_9434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 20), 'array_repr', False)
int_9435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, 32), 'int')
# Processing the call keyword arguments (line 1931)
kwargs_9436 = {}
# Getting the type of 'set_string_function' (line 1931)
set_string_function_9433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 0), 'set_string_function', False)
# Calling set_string_function(args, kwargs) (line 1931)
set_string_function_call_result_9437 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 0), set_string_function_9433, *[array_repr_9434, int_9435], **kwargs_9436)


# Assigning a Compare to a Name (line 1933):

# Assigning a Compare to a Name (line 1933):

# Getting the type of 'sys' (line 1933)
sys_9438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 17), 'sys')
# Obtaining the member 'byteorder' of a type (line 1933)
byteorder_9439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 17), sys_9438, 'byteorder')
str_9440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, 34), 'str', 'little')
# Applying the binary operator '==' (line 1933)
result_eq_9441 = python_operator(stypy.reporting.localization.Localization(__file__, 1933, 17), '==', byteorder_9439, str_9440)

# Assigning a type to the variable 'little_endian' (line 1933)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1933, 0), 'little_endian', result_eq_9441)

@norecursion
def indices(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'int' (line 1936)
    int_9442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 30), 'int')
    defaults = [int_9442]
    # Create a new context for function 'indices'
    module_type_store = module_type_store.open_function_context('indices', 1936, 0, False)
    
    # Passed parameters checking function
    indices.stypy_localization = localization
    indices.stypy_type_of_self = None
    indices.stypy_type_store = module_type_store
    indices.stypy_function_name = 'indices'
    indices.stypy_param_names_list = ['dimensions', 'dtype']
    indices.stypy_varargs_param_name = None
    indices.stypy_kwargs_param_name = None
    indices.stypy_call_defaults = defaults
    indices.stypy_call_varargs = varargs
    indices.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'indices', ['dimensions', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'indices', localization, ['dimensions', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'indices(...)' code ##################

    str_9443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, (-1)), 'str', '\n    Return an array representing the indices of a grid.\n\n    Compute an array where the subarrays contain index values 0,1,...\n    varying only along the corresponding axis.\n\n    Parameters\n    ----------\n    dimensions : sequence of ints\n        The shape of the grid.\n    dtype : dtype, optional\n        Data type of the result.\n\n    Returns\n    -------\n    grid : ndarray\n        The array of grid indices,\n        ``grid.shape = (len(dimensions),) + tuple(dimensions)``.\n\n    See Also\n    --------\n    mgrid, meshgrid\n\n    Notes\n    -----\n    The output shape is obtained by prepending the number of dimensions\n    in front of the tuple of dimensions, i.e. if `dimensions` is a tuple\n    ``(r0, ..., rN-1)`` of length ``N``, the output shape is\n    ``(N,r0,...,rN-1)``.\n\n    The subarrays ``grid[k]`` contains the N-D array of indices along the\n    ``k-th`` axis. Explicitly::\n\n        grid[k,i0,i1,...,iN-1] = ik\n\n    Examples\n    --------\n    >>> grid = np.indices((2, 3))\n    >>> grid.shape\n    (2, 2, 3)\n    >>> grid[0]        # row indices\n    array([[0, 0, 0],\n           [1, 1, 1]])\n    >>> grid[1]        # column indices\n    array([[0, 1, 2],\n           [0, 1, 2]])\n\n    The indices can be used as an index into an array.\n\n    >>> x = np.arange(20).reshape(5, 4)\n    >>> row, col = np.indices((2, 3))\n    >>> x[row, col]\n    array([[0, 1, 2],\n           [4, 5, 6]])\n\n    Note that it would be more straightforward in the above example to\n    extract the required elements directly with ``x[:2, :3]``.\n\n    ')
    
    # Assigning a Call to a Name (line 1996):
    
    # Assigning a Call to a Name (line 1996):
    
    # Call to tuple(...): (line 1996)
    # Processing the call arguments (line 1996)
    # Getting the type of 'dimensions' (line 1996)
    dimensions_9445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 23), 'dimensions', False)
    # Processing the call keyword arguments (line 1996)
    kwargs_9446 = {}
    # Getting the type of 'tuple' (line 1996)
    tuple_9444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 17), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1996)
    tuple_call_result_9447 = invoke(stypy.reporting.localization.Localization(__file__, 1996, 17), tuple_9444, *[dimensions_9445], **kwargs_9446)
    
    # Assigning a type to the variable 'dimensions' (line 1996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1996, 4), 'dimensions', tuple_call_result_9447)
    
    # Assigning a Call to a Name (line 1997):
    
    # Assigning a Call to a Name (line 1997):
    
    # Call to len(...): (line 1997)
    # Processing the call arguments (line 1997)
    # Getting the type of 'dimensions' (line 1997)
    dimensions_9449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 12), 'dimensions', False)
    # Processing the call keyword arguments (line 1997)
    kwargs_9450 = {}
    # Getting the type of 'len' (line 1997)
    len_9448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 8), 'len', False)
    # Calling len(args, kwargs) (line 1997)
    len_call_result_9451 = invoke(stypy.reporting.localization.Localization(__file__, 1997, 8), len_9448, *[dimensions_9449], **kwargs_9450)
    
    # Assigning a type to the variable 'N' (line 1997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1997, 4), 'N', len_call_result_9451)
    
    
    # Getting the type of 'N' (line 1998)
    N_9452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 7), 'N')
    int_9453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 12), 'int')
    # Applying the binary operator '==' (line 1998)
    result_eq_9454 = python_operator(stypy.reporting.localization.Localization(__file__, 1998, 7), '==', N_9452, int_9453)
    
    # Testing the type of an if condition (line 1998)
    if_condition_9455 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1998, 4), result_eq_9454)
    # Assigning a type to the variable 'if_condition_9455' (line 1998)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1998, 4), 'if_condition_9455', if_condition_9455)
    # SSA begins for if statement (line 1998)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 1999)
    # Processing the call arguments (line 1999)
    
    # Obtaining an instance of the builtin type 'list' (line 1999)
    list_9457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1999, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1999)
    
    # Processing the call keyword arguments (line 1999)
    # Getting the type of 'dtype' (line 1999)
    dtype_9458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 31), 'dtype', False)
    keyword_9459 = dtype_9458
    kwargs_9460 = {'dtype': keyword_9459}
    # Getting the type of 'array' (line 1999)
    array_9456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 15), 'array', False)
    # Calling array(args, kwargs) (line 1999)
    array_call_result_9461 = invoke(stypy.reporting.localization.Localization(__file__, 1999, 15), array_9456, *[list_9457], **kwargs_9460)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1999, 8), 'stypy_return_type', array_call_result_9461)
    # SSA join for if statement (line 1998)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2000):
    
    # Assigning a Call to a Name (line 2000):
    
    # Call to empty(...): (line 2000)
    # Processing the call arguments (line 2000)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2000)
    tuple_9463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2000, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2000)
    # Adding element type (line 2000)
    # Getting the type of 'N' (line 2000)
    N_9464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 17), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2000, 17), tuple_9463, N_9464)
    
    # Getting the type of 'dimensions' (line 2000)
    dimensions_9465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 21), 'dimensions', False)
    # Applying the binary operator '+' (line 2000)
    result_add_9466 = python_operator(stypy.reporting.localization.Localization(__file__, 2000, 16), '+', tuple_9463, dimensions_9465)
    
    # Processing the call keyword arguments (line 2000)
    # Getting the type of 'dtype' (line 2000)
    dtype_9467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 39), 'dtype', False)
    keyword_9468 = dtype_9467
    kwargs_9469 = {'dtype': keyword_9468}
    # Getting the type of 'empty' (line 2000)
    empty_9462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 10), 'empty', False)
    # Calling empty(args, kwargs) (line 2000)
    empty_call_result_9470 = invoke(stypy.reporting.localization.Localization(__file__, 2000, 10), empty_9462, *[result_add_9466], **kwargs_9469)
    
    # Assigning a type to the variable 'res' (line 2000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2000, 4), 'res', empty_call_result_9470)
    
    
    # Call to enumerate(...): (line 2001)
    # Processing the call arguments (line 2001)
    # Getting the type of 'dimensions' (line 2001)
    dimensions_9472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 28), 'dimensions', False)
    # Processing the call keyword arguments (line 2001)
    kwargs_9473 = {}
    # Getting the type of 'enumerate' (line 2001)
    enumerate_9471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 18), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2001)
    enumerate_call_result_9474 = invoke(stypy.reporting.localization.Localization(__file__, 2001, 18), enumerate_9471, *[dimensions_9472], **kwargs_9473)
    
    # Testing the type of a for loop iterable (line 2001)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2001, 4), enumerate_call_result_9474)
    # Getting the type of the for loop variable (line 2001)
    for_loop_var_9475 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2001, 4), enumerate_call_result_9474)
    # Assigning a type to the variable 'i' (line 2001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2001, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2001, 4), for_loop_var_9475))
    # Assigning a type to the variable 'dim' (line 2001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2001, 4), 'dim', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2001, 4), for_loop_var_9475))
    # SSA begins for a for statement (line 2001)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 2002):
    
    # Assigning a Call to a Name (line 2002):
    
    # Call to arange(...): (line 2002)
    # Processing the call arguments (line 2002)
    # Getting the type of 'dim' (line 2002)
    dim_9477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 21), 'dim', False)
    # Processing the call keyword arguments (line 2002)
    # Getting the type of 'dtype' (line 2002)
    dtype_9478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 32), 'dtype', False)
    keyword_9479 = dtype_9478
    kwargs_9480 = {'dtype': keyword_9479}
    # Getting the type of 'arange' (line 2002)
    arange_9476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 14), 'arange', False)
    # Calling arange(args, kwargs) (line 2002)
    arange_call_result_9481 = invoke(stypy.reporting.localization.Localization(__file__, 2002, 14), arange_9476, *[dim_9477], **kwargs_9480)
    
    # Assigning a type to the variable 'tmp' (line 2002)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2002, 8), 'tmp', arange_call_result_9481)
    
    # Assigning a BinOp to a Attribute (line 2003):
    
    # Assigning a BinOp to a Attribute (line 2003):
    
    # Obtaining an instance of the builtin type 'tuple' (line 2003)
    tuple_9482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2003, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2003)
    # Adding element type (line 2003)
    int_9483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2003, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2003, 21), tuple_9482, int_9483)
    
    # Getting the type of 'i' (line 2003)
    i_9484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 25), 'i')
    # Applying the binary operator '*' (line 2003)
    result_mul_9485 = python_operator(stypy.reporting.localization.Localization(__file__, 2003, 20), '*', tuple_9482, i_9484)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2003)
    tuple_9486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2003, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2003)
    # Adding element type (line 2003)
    # Getting the type of 'dim' (line 2003)
    dim_9487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 30), 'dim')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2003, 30), tuple_9486, dim_9487)
    
    # Applying the binary operator '+' (line 2003)
    result_add_9488 = python_operator(stypy.reporting.localization.Localization(__file__, 2003, 20), '+', result_mul_9485, tuple_9486)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2003)
    tuple_9489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2003, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2003)
    # Adding element type (line 2003)
    int_9490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2003, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2003, 37), tuple_9489, int_9490)
    
    # Getting the type of 'N' (line 2003)
    N_9491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 42), 'N')
    # Getting the type of 'i' (line 2003)
    i_9492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 44), 'i')
    # Applying the binary operator '-' (line 2003)
    result_sub_9493 = python_operator(stypy.reporting.localization.Localization(__file__, 2003, 42), '-', N_9491, i_9492)
    
    int_9494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2003, 46), 'int')
    # Applying the binary operator '-' (line 2003)
    result_sub_9495 = python_operator(stypy.reporting.localization.Localization(__file__, 2003, 45), '-', result_sub_9493, int_9494)
    
    # Applying the binary operator '*' (line 2003)
    result_mul_9496 = python_operator(stypy.reporting.localization.Localization(__file__, 2003, 36), '*', tuple_9489, result_sub_9495)
    
    # Applying the binary operator '+' (line 2003)
    result_add_9497 = python_operator(stypy.reporting.localization.Localization(__file__, 2003, 35), '+', result_add_9488, result_mul_9496)
    
    # Getting the type of 'tmp' (line 2003)
    tmp_9498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 8), 'tmp')
    # Setting the type of the member 'shape' of a type (line 2003)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2003, 8), tmp_9498, 'shape', result_add_9497)
    
    # Assigning a BinOp to a Name (line 2004):
    
    # Assigning a BinOp to a Name (line 2004):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2004)
    i_9499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 29), 'i')
    slice_9500 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2004, 17), None, i_9499, None)
    # Getting the type of 'dimensions' (line 2004)
    dimensions_9501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 17), 'dimensions')
    # Obtaining the member '__getitem__' of a type (line 2004)
    getitem___9502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 17), dimensions_9501, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2004)
    subscript_call_result_9503 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 17), getitem___9502, slice_9500)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2004)
    tuple_9504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2004)
    # Adding element type (line 2004)
    int_9505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 35), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2004, 35), tuple_9504, int_9505)
    
    # Applying the binary operator '+' (line 2004)
    result_add_9506 = python_operator(stypy.reporting.localization.Localization(__file__, 2004, 17), '+', subscript_call_result_9503, tuple_9504)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2004)
    i_9507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 52), 'i')
    int_9508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 54), 'int')
    # Applying the binary operator '+' (line 2004)
    result_add_9509 = python_operator(stypy.reporting.localization.Localization(__file__, 2004, 52), '+', i_9507, int_9508)
    
    slice_9510 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2004, 41), result_add_9509, None, None)
    # Getting the type of 'dimensions' (line 2004)
    dimensions_9511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 41), 'dimensions')
    # Obtaining the member '__getitem__' of a type (line 2004)
    getitem___9512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 41), dimensions_9511, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2004)
    subscript_call_result_9513 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 41), getitem___9512, slice_9510)
    
    # Applying the binary operator '+' (line 2004)
    result_add_9514 = python_operator(stypy.reporting.localization.Localization(__file__, 2004, 39), '+', result_add_9506, subscript_call_result_9513)
    
    # Assigning a type to the variable 'newdim' (line 2004)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2004, 8), 'newdim', result_add_9514)
    
    # Assigning a Call to a Name (line 2005):
    
    # Assigning a Call to a Name (line 2005):
    
    # Call to zeros(...): (line 2005)
    # Processing the call arguments (line 2005)
    # Getting the type of 'newdim' (line 2005)
    newdim_9516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 20), 'newdim', False)
    # Getting the type of 'dtype' (line 2005)
    dtype_9517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 28), 'dtype', False)
    # Processing the call keyword arguments (line 2005)
    kwargs_9518 = {}
    # Getting the type of 'zeros' (line 2005)
    zeros_9515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 14), 'zeros', False)
    # Calling zeros(args, kwargs) (line 2005)
    zeros_call_result_9519 = invoke(stypy.reporting.localization.Localization(__file__, 2005, 14), zeros_9515, *[newdim_9516, dtype_9517], **kwargs_9518)
    
    # Assigning a type to the variable 'val' (line 2005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2005, 8), 'val', zeros_call_result_9519)
    
    # Call to add(...): (line 2006)
    # Processing the call arguments (line 2006)
    # Getting the type of 'tmp' (line 2006)
    tmp_9521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 12), 'tmp', False)
    # Getting the type of 'val' (line 2006)
    val_9522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 17), 'val', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2006)
    i_9523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 26), 'i', False)
    # Getting the type of 'res' (line 2006)
    res_9524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 22), 'res', False)
    # Obtaining the member '__getitem__' of a type (line 2006)
    getitem___9525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2006, 22), res_9524, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2006)
    subscript_call_result_9526 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 22), getitem___9525, i_9523)
    
    # Processing the call keyword arguments (line 2006)
    kwargs_9527 = {}
    # Getting the type of 'add' (line 2006)
    add_9520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 8), 'add', False)
    # Calling add(args, kwargs) (line 2006)
    add_call_result_9528 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 8), add_9520, *[tmp_9521, val_9522, subscript_call_result_9526], **kwargs_9527)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'res' (line 2007)
    res_9529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 2007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2007, 4), 'stypy_return_type', res_9529)
    
    # ################# End of 'indices(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'indices' in the type store
    # Getting the type of 'stypy_return_type' (line 1936)
    stypy_return_type_9530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9530)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'indices'
    return stypy_return_type_9530

# Assigning a type to the variable 'indices' (line 1936)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 0), 'indices', indices)

@norecursion
def fromfunction(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'fromfunction'
    module_type_store = module_type_store.open_function_context('fromfunction', 2009, 0, False)
    
    # Passed parameters checking function
    fromfunction.stypy_localization = localization
    fromfunction.stypy_type_of_self = None
    fromfunction.stypy_type_store = module_type_store
    fromfunction.stypy_function_name = 'fromfunction'
    fromfunction.stypy_param_names_list = ['function', 'shape']
    fromfunction.stypy_varargs_param_name = None
    fromfunction.stypy_kwargs_param_name = 'kwargs'
    fromfunction.stypy_call_defaults = defaults
    fromfunction.stypy_call_varargs = varargs
    fromfunction.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fromfunction', ['function', 'shape'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fromfunction', localization, ['function', 'shape'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fromfunction(...)' code ##################

    str_9531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2059, (-1)), 'str', '\n    Construct an array by executing a function over each coordinate.\n\n    The resulting array therefore has a value ``fn(x, y, z)`` at\n    coordinate ``(x, y, z)``.\n\n    Parameters\n    ----------\n    function : callable\n        The function is called with N parameters, where N is the rank of\n        `shape`.  Each parameter represents the coordinates of the array\n        varying along a specific axis.  For example, if `shape`\n        were ``(2, 2)``, then the parameters in turn be (0, 0), (0, 1),\n        (1, 0), (1, 1).\n    shape : (N,) tuple of ints\n        Shape of the output array, which also determines the shape of\n        the coordinate arrays passed to `function`.\n    dtype : data-type, optional\n        Data-type of the coordinate arrays passed to `function`.\n        By default, `dtype` is float.\n\n    Returns\n    -------\n    fromfunction : any\n        The result of the call to `function` is passed back directly.\n        Therefore the shape of `fromfunction` is completely determined by\n        `function`.  If `function` returns a scalar value, the shape of\n        `fromfunction` would match the `shape` parameter.\n\n    See Also\n    --------\n    indices, meshgrid\n\n    Notes\n    -----\n    Keywords other than `dtype` are passed to `function`.\n\n    Examples\n    --------\n    >>> np.fromfunction(lambda i, j: i == j, (3, 3), dtype=int)\n    array([[ True, False, False],\n           [False,  True, False],\n           [False, False,  True]], dtype=bool)\n\n    >>> np.fromfunction(lambda i, j: i + j, (3, 3), dtype=int)\n    array([[0, 1, 2],\n           [1, 2, 3],\n           [2, 3, 4]])\n\n    ')
    
    # Assigning a Call to a Name (line 2060):
    
    # Assigning a Call to a Name (line 2060):
    
    # Call to pop(...): (line 2060)
    # Processing the call arguments (line 2060)
    str_9534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2060, 23), 'str', 'dtype')
    # Getting the type of 'float' (line 2060)
    float_9535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 32), 'float', False)
    # Processing the call keyword arguments (line 2060)
    kwargs_9536 = {}
    # Getting the type of 'kwargs' (line 2060)
    kwargs_9532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 12), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 2060)
    pop_9533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2060, 12), kwargs_9532, 'pop')
    # Calling pop(args, kwargs) (line 2060)
    pop_call_result_9537 = invoke(stypy.reporting.localization.Localization(__file__, 2060, 12), pop_9533, *[str_9534, float_9535], **kwargs_9536)
    
    # Assigning a type to the variable 'dtype' (line 2060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2060, 4), 'dtype', pop_call_result_9537)
    
    # Assigning a Call to a Name (line 2061):
    
    # Assigning a Call to a Name (line 2061):
    
    # Call to indices(...): (line 2061)
    # Processing the call arguments (line 2061)
    # Getting the type of 'shape' (line 2061)
    shape_9539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 19), 'shape', False)
    # Processing the call keyword arguments (line 2061)
    # Getting the type of 'dtype' (line 2061)
    dtype_9540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 32), 'dtype', False)
    keyword_9541 = dtype_9540
    kwargs_9542 = {'dtype': keyword_9541}
    # Getting the type of 'indices' (line 2061)
    indices_9538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 11), 'indices', False)
    # Calling indices(args, kwargs) (line 2061)
    indices_call_result_9543 = invoke(stypy.reporting.localization.Localization(__file__, 2061, 11), indices_9538, *[shape_9539], **kwargs_9542)
    
    # Assigning a type to the variable 'args' (line 2061)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 4), 'args', indices_call_result_9543)
    
    # Call to function(...): (line 2062)
    # Getting the type of 'args' (line 2062)
    args_9545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 21), 'args', False)
    # Processing the call keyword arguments (line 2062)
    # Getting the type of 'kwargs' (line 2062)
    kwargs_9546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 28), 'kwargs', False)
    kwargs_9547 = {'kwargs_9546': kwargs_9546}
    # Getting the type of 'function' (line 2062)
    function_9544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 11), 'function', False)
    # Calling function(args, kwargs) (line 2062)
    function_call_result_9548 = invoke(stypy.reporting.localization.Localization(__file__, 2062, 11), function_9544, *[args_9545], **kwargs_9547)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2062)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2062, 4), 'stypy_return_type', function_call_result_9548)
    
    # ################# End of 'fromfunction(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fromfunction' in the type store
    # Getting the type of 'stypy_return_type' (line 2009)
    stypy_return_type_9549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9549)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fromfunction'
    return stypy_return_type_9549

# Assigning a type to the variable 'fromfunction' (line 2009)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2009, 0), 'fromfunction', fromfunction)

@norecursion
def isscalar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'isscalar'
    module_type_store = module_type_store.open_function_context('isscalar', 2064, 0, False)
    
    # Passed parameters checking function
    isscalar.stypy_localization = localization
    isscalar.stypy_type_of_self = None
    isscalar.stypy_type_store = module_type_store
    isscalar.stypy_function_name = 'isscalar'
    isscalar.stypy_param_names_list = ['num']
    isscalar.stypy_varargs_param_name = None
    isscalar.stypy_kwargs_param_name = None
    isscalar.stypy_call_defaults = defaults
    isscalar.stypy_call_varargs = varargs
    isscalar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'isscalar', ['num'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'isscalar', localization, ['num'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'isscalar(...)' code ##################

    str_9550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, (-1)), 'str', '\n    Returns True if the type of `num` is a scalar type.\n\n    Parameters\n    ----------\n    num : any\n        Input argument, can be of any type and shape.\n\n    Returns\n    -------\n    val : bool\n        True if `num` is a scalar type, False if it is not.\n\n    Examples\n    --------\n    >>> np.isscalar(3.1)\n    True\n    >>> np.isscalar([3.1])\n    False\n    >>> np.isscalar(False)\n    True\n\n    ')
    
    
    # Call to isinstance(...): (line 2088)
    # Processing the call arguments (line 2088)
    # Getting the type of 'num' (line 2088)
    num_9552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 18), 'num', False)
    # Getting the type of 'generic' (line 2088)
    generic_9553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 23), 'generic', False)
    # Processing the call keyword arguments (line 2088)
    kwargs_9554 = {}
    # Getting the type of 'isinstance' (line 2088)
    isinstance_9551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2088)
    isinstance_call_result_9555 = invoke(stypy.reporting.localization.Localization(__file__, 2088, 7), isinstance_9551, *[num_9552, generic_9553], **kwargs_9554)
    
    # Testing the type of an if condition (line 2088)
    if_condition_9556 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2088, 4), isinstance_call_result_9555)
    # Assigning a type to the variable 'if_condition_9556' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'if_condition_9556', if_condition_9556)
    # SSA begins for if statement (line 2088)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 2089)
    True_9557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 2089)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2089, 8), 'stypy_return_type', True_9557)
    # SSA branch for the else part of an if statement (line 2088)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to type(...): (line 2091)
    # Processing the call arguments (line 2091)
    # Getting the type of 'num' (line 2091)
    num_9559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 20), 'num', False)
    # Processing the call keyword arguments (line 2091)
    kwargs_9560 = {}
    # Getting the type of 'type' (line 2091)
    type_9558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 15), 'type', False)
    # Calling type(args, kwargs) (line 2091)
    type_call_result_9561 = invoke(stypy.reporting.localization.Localization(__file__, 2091, 15), type_9558, *[num_9559], **kwargs_9560)
    
    # Getting the type of 'ScalarType' (line 2091)
    ScalarType_9562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 28), 'ScalarType')
    # Applying the binary operator 'in' (line 2091)
    result_contains_9563 = python_operator(stypy.reporting.localization.Localization(__file__, 2091, 15), 'in', type_call_result_9561, ScalarType_9562)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2091)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2091, 8), 'stypy_return_type', result_contains_9563)
    # SSA join for if statement (line 2088)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'isscalar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'isscalar' in the type store
    # Getting the type of 'stypy_return_type' (line 2064)
    stypy_return_type_9564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9564)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'isscalar'
    return stypy_return_type_9564

# Assigning a type to the variable 'isscalar' (line 2064)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 0), 'isscalar', isscalar)

# Assigning a Dict to a Name (line 2093):

# Assigning a Dict to a Name (line 2093):

# Obtaining an instance of the builtin type 'dict' (line 2093)
dict_9565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2093, 8), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2093)
# Adding element type (key, value) (line 2093)
str_9566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 4), 'str', '0')
str_9567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'str', '0000')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9566, str_9567))
# Adding element type (key, value) (line 2093)
str_9568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2095, 4), 'str', '1')
str_9569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2095, 8), 'str', '0001')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9568, str_9569))
# Adding element type (key, value) (line 2093)
str_9570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2096, 4), 'str', '2')
str_9571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2096, 8), 'str', '0010')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9570, str_9571))
# Adding element type (key, value) (line 2093)
str_9572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2097, 4), 'str', '3')
str_9573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2097, 8), 'str', '0011')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9572, str_9573))
# Adding element type (key, value) (line 2093)
str_9574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2098, 4), 'str', '4')
str_9575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2098, 8), 'str', '0100')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9574, str_9575))
# Adding element type (key, value) (line 2093)
str_9576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2099, 4), 'str', '5')
str_9577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2099, 8), 'str', '0101')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9576, str_9577))
# Adding element type (key, value) (line 2093)
str_9578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 4), 'str', '6')
str_9579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 8), 'str', '0110')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9578, str_9579))
# Adding element type (key, value) (line 2093)
str_9580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2101, 4), 'str', '7')
str_9581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2101, 8), 'str', '0111')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9580, str_9581))
# Adding element type (key, value) (line 2093)
str_9582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2102, 4), 'str', '8')
str_9583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2102, 8), 'str', '1000')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9582, str_9583))
# Adding element type (key, value) (line 2093)
str_9584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2103, 4), 'str', '9')
str_9585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2103, 8), 'str', '1001')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9584, str_9585))
# Adding element type (key, value) (line 2093)
str_9586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2104, 4), 'str', 'a')
str_9587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2104, 8), 'str', '1010')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9586, str_9587))
# Adding element type (key, value) (line 2093)
str_9588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 4), 'str', 'b')
str_9589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 8), 'str', '1011')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9588, str_9589))
# Adding element type (key, value) (line 2093)
str_9590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2106, 4), 'str', 'c')
str_9591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2106, 8), 'str', '1100')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9590, str_9591))
# Adding element type (key, value) (line 2093)
str_9592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 4), 'str', 'd')
str_9593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 8), 'str', '1101')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9592, str_9593))
# Adding element type (key, value) (line 2093)
str_9594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2108, 4), 'str', 'e')
str_9595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2108, 8), 'str', '1110')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9594, str_9595))
# Adding element type (key, value) (line 2093)
str_9596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'str', 'f')
str_9597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 8), 'str', '1111')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9596, str_9597))
# Adding element type (key, value) (line 2093)
str_9598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2110, 4), 'str', 'A')
str_9599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2110, 8), 'str', '1010')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9598, str_9599))
# Adding element type (key, value) (line 2093)
str_9600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2111, 4), 'str', 'B')
str_9601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2111, 8), 'str', '1011')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9600, str_9601))
# Adding element type (key, value) (line 2093)
str_9602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2112, 4), 'str', 'C')
str_9603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2112, 8), 'str', '1100')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9602, str_9603))
# Adding element type (key, value) (line 2093)
str_9604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2113, 4), 'str', 'D')
str_9605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2113, 8), 'str', '1101')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9604, str_9605))
# Adding element type (key, value) (line 2093)
str_9606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 4), 'str', 'E')
str_9607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 8), 'str', '1110')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9606, str_9607))
# Adding element type (key, value) (line 2093)
str_9608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2115, 4), 'str', 'F')
str_9609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2115, 8), 'str', '1111')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9608, str_9609))
# Adding element type (key, value) (line 2093)
str_9610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, 4), 'str', 'L')
str_9611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, 8), 'str', '')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2093, 8), dict_9565, (str_9610, str_9611))

# Assigning a type to the variable '_lkup' (line 2093)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2093, 0), '_lkup', dict_9565)

@norecursion
def binary_repr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2118)
    None_9612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 27), 'None')
    defaults = [None_9612]
    # Create a new context for function 'binary_repr'
    module_type_store = module_type_store.open_function_context('binary_repr', 2118, 0, False)
    
    # Passed parameters checking function
    binary_repr.stypy_localization = localization
    binary_repr.stypy_type_of_self = None
    binary_repr.stypy_type_store = module_type_store
    binary_repr.stypy_function_name = 'binary_repr'
    binary_repr.stypy_param_names_list = ['num', 'width']
    binary_repr.stypy_varargs_param_name = None
    binary_repr.stypy_kwargs_param_name = None
    binary_repr.stypy_call_defaults = defaults
    binary_repr.stypy_call_varargs = varargs
    binary_repr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'binary_repr', ['num', 'width'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'binary_repr', localization, ['num', 'width'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'binary_repr(...)' code ##################

    str_9613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2175, (-1)), 'str', '\n    Return the binary representation of the input number as a string.\n\n    For negative numbers, if width is not given, a minus sign is added to the\n    front. If width is given, the two\'s complement of the number is\n    returned, with respect to that width.\n\n    In a two\'s-complement system negative numbers are represented by the two\'s\n    complement of the absolute value. This is the most common method of\n    representing signed integers on computers [1]_. A N-bit two\'s-complement\n    system can represent every integer in the range\n    :math:`-2^{N-1}` to :math:`+2^{N-1}-1`.\n\n    Parameters\n    ----------\n    num : int\n        Only an integer decimal number can be used.\n    width : int, optional\n        The length of the returned string if `num` is positive, the length of\n        the two\'s complement if `num` is negative.\n\n    Returns\n    -------\n    bin : str\n        Binary representation of `num` or two\'s complement of `num`.\n\n    See Also\n    --------\n    base_repr: Return a string representation of a number in the given base\n               system.\n\n    Notes\n    -----\n    `binary_repr` is equivalent to using `base_repr` with base 2, but about 25x\n    faster.\n\n    References\n    ----------\n    .. [1] Wikipedia, "Two\'s complement",\n        http://en.wikipedia.org/wiki/Two\'s_complement\n\n    Examples\n    --------\n    >>> np.binary_repr(3)\n    \'11\'\n    >>> np.binary_repr(-3)\n    \'-11\'\n    >>> np.binary_repr(3, width=4)\n    \'0011\'\n\n    The two\'s complement is returned when the input number is negative and\n    width is specified:\n\n    >>> np.binary_repr(-3, width=4)\n    \'1101\'\n\n    ')
    
    # Assigning a Str to a Name (line 2177):
    
    # Assigning a Str to a Name (line 2177):
    str_9614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2177, 11), 'str', '')
    # Assigning a type to the variable 'sign' (line 2177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2177, 4), 'sign', str_9614)
    
    
    # Getting the type of 'num' (line 2178)
    num_9615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 7), 'num')
    int_9616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 13), 'int')
    # Applying the binary operator '<' (line 2178)
    result_lt_9617 = python_operator(stypy.reporting.localization.Localization(__file__, 2178, 7), '<', num_9615, int_9616)
    
    # Testing the type of an if condition (line 2178)
    if_condition_9618 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2178, 4), result_lt_9617)
    # Assigning a type to the variable 'if_condition_9618' (line 2178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 4), 'if_condition_9618', if_condition_9618)
    # SSA begins for if statement (line 2178)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 2179)
    # Getting the type of 'width' (line 2179)
    width_9619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 11), 'width')
    # Getting the type of 'None' (line 2179)
    None_9620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 20), 'None')
    
    (may_be_9621, more_types_in_union_9622) = may_be_none(width_9619, None_9620)

    if may_be_9621:

        if more_types_in_union_9622:
            # Runtime conditional SSA (line 2179)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Str to a Name (line 2180):
        
        # Assigning a Str to a Name (line 2180):
        str_9623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2180, 19), 'str', '-')
        # Assigning a type to the variable 'sign' (line 2180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2180, 12), 'sign', str_9623)
        
        # Assigning a UnaryOp to a Name (line 2181):
        
        # Assigning a UnaryOp to a Name (line 2181):
        
        # Getting the type of 'num' (line 2181)
        num_9624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 19), 'num')
        # Applying the 'usub' unary operator (line 2181)
        result___neg___9625 = python_operator(stypy.reporting.localization.Localization(__file__, 2181, 18), 'usub', num_9624)
        
        # Assigning a type to the variable 'num' (line 2181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'num', result___neg___9625)

        if more_types_in_union_9622:
            # Runtime conditional SSA for else branch (line 2179)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_9621) or more_types_in_union_9622):
        
        # Assigning a BinOp to a Name (line 2184):
        
        # Assigning a BinOp to a Name (line 2184):
        int_9626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 18), 'int')
        # Getting the type of 'width' (line 2184)
        width_9627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 21), 'width')
        # Applying the binary operator '**' (line 2184)
        result_pow_9628 = python_operator(stypy.reporting.localization.Localization(__file__, 2184, 18), '**', int_9626, width_9627)
        
        # Getting the type of 'num' (line 2184)
        num_9629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 29), 'num')
        # Applying the binary operator '+' (line 2184)
        result_add_9630 = python_operator(stypy.reporting.localization.Localization(__file__, 2184, 18), '+', result_pow_9628, num_9629)
        
        # Assigning a type to the variable 'num' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'num', result_add_9630)

        if (may_be_9621 and more_types_in_union_9622):
            # SSA join for if statement (line 2179)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the else part of an if statement (line 2178)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'num' (line 2185)
    num_9631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 9), 'num')
    int_9632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2185, 16), 'int')
    # Applying the binary operator '==' (line 2185)
    result_eq_9633 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 9), '==', num_9631, int_9632)
    
    # Testing the type of an if condition (line 2185)
    if_condition_9634 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2185, 9), result_eq_9633)
    # Assigning a type to the variable 'if_condition_9634' (line 2185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 9), 'if_condition_9634', if_condition_9634)
    # SSA begins for if statement (line 2185)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    str_9635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 15), 'str', '0')
    
    # Evaluating a boolean operation
    # Getting the type of 'width' (line 2186)
    width_9636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 20), 'width')
    int_9637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 29), 'int')
    # Applying the binary operator 'or' (line 2186)
    result_or_keyword_9638 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 20), 'or', width_9636, int_9637)
    
    # Applying the binary operator '*' (line 2186)
    result_mul_9639 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 15), '*', str_9635, result_or_keyword_9638)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'stypy_return_type', result_mul_9639)
    # SSA join for if statement (line 2185)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2178)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2187):
    
    # Assigning a Call to a Name (line 2187):
    
    # Call to hex(...): (line 2187)
    # Processing the call arguments (line 2187)
    # Getting the type of 'num' (line 2187)
    num_9641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 15), 'num', False)
    # Processing the call keyword arguments (line 2187)
    kwargs_9642 = {}
    # Getting the type of 'hex' (line 2187)
    hex_9640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 11), 'hex', False)
    # Calling hex(args, kwargs) (line 2187)
    hex_call_result_9643 = invoke(stypy.reporting.localization.Localization(__file__, 2187, 11), hex_9640, *[num_9641], **kwargs_9642)
    
    # Assigning a type to the variable 'ostr' (line 2187)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2187, 4), 'ostr', hex_call_result_9643)
    
    # Assigning a Call to a Name (line 2188):
    
    # Assigning a Call to a Name (line 2188):
    
    # Call to join(...): (line 2188)
    # Processing the call arguments (line 2188)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Obtaining the type of the subscript
    int_9650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 44), 'int')
    slice_9651 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2188, 39), int_9650, None, None)
    # Getting the type of 'ostr' (line 2188)
    ostr_9652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 39), 'ostr', False)
    # Obtaining the member '__getitem__' of a type (line 2188)
    getitem___9653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 39), ostr_9652, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2188)
    subscript_call_result_9654 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 39), getitem___9653, slice_9651)
    
    comprehension_9655 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2188, 19), subscript_call_result_9654)
    # Assigning a type to the variable 'ch' (line 2188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 19), 'ch', comprehension_9655)
    
    # Obtaining the type of the subscript
    # Getting the type of 'ch' (line 2188)
    ch_9646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 25), 'ch', False)
    # Getting the type of '_lkup' (line 2188)
    _lkup_9647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 19), '_lkup', False)
    # Obtaining the member '__getitem__' of a type (line 2188)
    getitem___9648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 19), _lkup_9647, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2188)
    subscript_call_result_9649 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 19), getitem___9648, ch_9646)
    
    list_9656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2188, 19), list_9656, subscript_call_result_9649)
    # Processing the call keyword arguments (line 2188)
    kwargs_9657 = {}
    str_9644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 10), 'str', '')
    # Obtaining the member 'join' of a type (line 2188)
    join_9645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 10), str_9644, 'join')
    # Calling join(args, kwargs) (line 2188)
    join_call_result_9658 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 10), join_9645, *[list_9656], **kwargs_9657)
    
    # Assigning a type to the variable 'bin' (line 2188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 4), 'bin', join_call_result_9658)
    
    # Assigning a Call to a Name (line 2189):
    
    # Assigning a Call to a Name (line 2189):
    
    # Call to lstrip(...): (line 2189)
    # Processing the call arguments (line 2189)
    str_9661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 21), 'str', '0')
    # Processing the call keyword arguments (line 2189)
    kwargs_9662 = {}
    # Getting the type of 'bin' (line 2189)
    bin_9659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 10), 'bin', False)
    # Obtaining the member 'lstrip' of a type (line 2189)
    lstrip_9660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2189, 10), bin_9659, 'lstrip')
    # Calling lstrip(args, kwargs) (line 2189)
    lstrip_call_result_9663 = invoke(stypy.reporting.localization.Localization(__file__, 2189, 10), lstrip_9660, *[str_9661], **kwargs_9662)
    
    # Assigning a type to the variable 'bin' (line 2189)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2189, 4), 'bin', lstrip_call_result_9663)
    
    # Type idiom detected: calculating its left and rigth part (line 2190)
    # Getting the type of 'width' (line 2190)
    width_9664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 4), 'width')
    # Getting the type of 'None' (line 2190)
    None_9665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 20), 'None')
    
    (may_be_9666, more_types_in_union_9667) = may_not_be_none(width_9664, None_9665)

    if may_be_9666:

        if more_types_in_union_9667:
            # Runtime conditional SSA (line 2190)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2191):
        
        # Assigning a Call to a Name (line 2191):
        
        # Call to zfill(...): (line 2191)
        # Processing the call arguments (line 2191)
        # Getting the type of 'width' (line 2191)
        width_9670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 24), 'width', False)
        # Processing the call keyword arguments (line 2191)
        kwargs_9671 = {}
        # Getting the type of 'bin' (line 2191)
        bin_9668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 14), 'bin', False)
        # Obtaining the member 'zfill' of a type (line 2191)
        zfill_9669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2191, 14), bin_9668, 'zfill')
        # Calling zfill(args, kwargs) (line 2191)
        zfill_call_result_9672 = invoke(stypy.reporting.localization.Localization(__file__, 2191, 14), zfill_9669, *[width_9670], **kwargs_9671)
        
        # Assigning a type to the variable 'bin' (line 2191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2191, 8), 'bin', zfill_call_result_9672)

        if more_types_in_union_9667:
            # SSA join for if statement (line 2190)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'sign' (line 2192)
    sign_9673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 11), 'sign')
    # Getting the type of 'bin' (line 2192)
    bin_9674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 18), 'bin')
    # Applying the binary operator '+' (line 2192)
    result_add_9675 = python_operator(stypy.reporting.localization.Localization(__file__, 2192, 11), '+', sign_9673, bin_9674)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2192)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2192, 4), 'stypy_return_type', result_add_9675)
    
    # ################# End of 'binary_repr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'binary_repr' in the type store
    # Getting the type of 'stypy_return_type' (line 2118)
    stypy_return_type_9676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9676)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'binary_repr'
    return stypy_return_type_9676

# Assigning a type to the variable 'binary_repr' (line 2118)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2118, 0), 'binary_repr', binary_repr)

@norecursion
def base_repr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_9677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 27), 'int')
    int_9678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 38), 'int')
    defaults = [int_9677, int_9678]
    # Create a new context for function 'base_repr'
    module_type_store = module_type_store.open_function_context('base_repr', 2194, 0, False)
    
    # Passed parameters checking function
    base_repr.stypy_localization = localization
    base_repr.stypy_type_of_self = None
    base_repr.stypy_type_store = module_type_store
    base_repr.stypy_function_name = 'base_repr'
    base_repr.stypy_param_names_list = ['number', 'base', 'padding']
    base_repr.stypy_varargs_param_name = None
    base_repr.stypy_kwargs_param_name = None
    base_repr.stypy_call_defaults = defaults
    base_repr.stypy_call_varargs = varargs
    base_repr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'base_repr', ['number', 'base', 'padding'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'base_repr', localization, ['number', 'base', 'padding'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'base_repr(...)' code ##################

    str_9679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2231, (-1)), 'str', "\n    Return a string representation of a number in the given base system.\n\n    Parameters\n    ----------\n    number : int\n        The value to convert. Only positive values are handled.\n    base : int, optional\n        Convert `number` to the `base` number system. The valid range is 2-36,\n        the default value is 2.\n    padding : int, optional\n        Number of zeros padded on the left. Default is 0 (no padding).\n\n    Returns\n    -------\n    out : str\n        String representation of `number` in `base` system.\n\n    See Also\n    --------\n    binary_repr : Faster version of `base_repr` for base 2.\n\n    Examples\n    --------\n    >>> np.base_repr(5)\n    '101'\n    >>> np.base_repr(6, 5)\n    '11'\n    >>> np.base_repr(7, base=5, padding=3)\n    '00012'\n\n    >>> np.base_repr(10, base=16)\n    'A'\n    >>> np.base_repr(32, base=16)\n    '20'\n\n    ")
    
    # Assigning a Str to a Name (line 2232):
    
    # Assigning a Str to a Name (line 2232):
    str_9680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 13), 'str', '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')
    # Assigning a type to the variable 'digits' (line 2232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 4), 'digits', str_9680)
    
    
    # Getting the type of 'base' (line 2233)
    base_9681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 7), 'base')
    
    # Call to len(...): (line 2233)
    # Processing the call arguments (line 2233)
    # Getting the type of 'digits' (line 2233)
    digits_9683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 18), 'digits', False)
    # Processing the call keyword arguments (line 2233)
    kwargs_9684 = {}
    # Getting the type of 'len' (line 2233)
    len_9682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 14), 'len', False)
    # Calling len(args, kwargs) (line 2233)
    len_call_result_9685 = invoke(stypy.reporting.localization.Localization(__file__, 2233, 14), len_9682, *[digits_9683], **kwargs_9684)
    
    # Applying the binary operator '>' (line 2233)
    result_gt_9686 = python_operator(stypy.reporting.localization.Localization(__file__, 2233, 7), '>', base_9681, len_call_result_9685)
    
    # Testing the type of an if condition (line 2233)
    if_condition_9687 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2233, 4), result_gt_9686)
    # Assigning a type to the variable 'if_condition_9687' (line 2233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 4), 'if_condition_9687', if_condition_9687)
    # SSA begins for if statement (line 2233)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2234)
    # Processing the call arguments (line 2234)
    str_9689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2234, 25), 'str', 'Bases greater than 36 not handled in base_repr.')
    # Processing the call keyword arguments (line 2234)
    kwargs_9690 = {}
    # Getting the type of 'ValueError' (line 2234)
    ValueError_9688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2234)
    ValueError_call_result_9691 = invoke(stypy.reporting.localization.Localization(__file__, 2234, 14), ValueError_9688, *[str_9689], **kwargs_9690)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2234, 8), ValueError_call_result_9691, 'raise parameter', BaseException)
    # SSA join for if statement (line 2233)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2236):
    
    # Assigning a Call to a Name (line 2236):
    
    # Call to abs(...): (line 2236)
    # Processing the call arguments (line 2236)
    # Getting the type of 'number' (line 2236)
    number_9693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 14), 'number', False)
    # Processing the call keyword arguments (line 2236)
    kwargs_9694 = {}
    # Getting the type of 'abs' (line 2236)
    abs_9692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 10), 'abs', False)
    # Calling abs(args, kwargs) (line 2236)
    abs_call_result_9695 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 10), abs_9692, *[number_9693], **kwargs_9694)
    
    # Assigning a type to the variable 'num' (line 2236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 4), 'num', abs_call_result_9695)
    
    # Assigning a List to a Name (line 2237):
    
    # Assigning a List to a Name (line 2237):
    
    # Obtaining an instance of the builtin type 'list' (line 2237)
    list_9696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2237, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2237)
    
    # Assigning a type to the variable 'res' (line 2237)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2237, 4), 'res', list_9696)
    
    # Getting the type of 'num' (line 2238)
    num_9697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 10), 'num')
    # Testing the type of an if condition (line 2238)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2238, 4), num_9697)
    # SSA begins for while statement (line 2238)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Call to append(...): (line 2239)
    # Processing the call arguments (line 2239)
    
    # Obtaining the type of the subscript
    # Getting the type of 'num' (line 2239)
    num_9700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 26), 'num', False)
    # Getting the type of 'base' (line 2239)
    base_9701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 32), 'base', False)
    # Applying the binary operator '%' (line 2239)
    result_mod_9702 = python_operator(stypy.reporting.localization.Localization(__file__, 2239, 26), '%', num_9700, base_9701)
    
    # Getting the type of 'digits' (line 2239)
    digits_9703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 19), 'digits', False)
    # Obtaining the member '__getitem__' of a type (line 2239)
    getitem___9704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 19), digits_9703, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2239)
    subscript_call_result_9705 = invoke(stypy.reporting.localization.Localization(__file__, 2239, 19), getitem___9704, result_mod_9702)
    
    # Processing the call keyword arguments (line 2239)
    kwargs_9706 = {}
    # Getting the type of 'res' (line 2239)
    res_9698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 8), 'res', False)
    # Obtaining the member 'append' of a type (line 2239)
    append_9699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 8), res_9698, 'append')
    # Calling append(args, kwargs) (line 2239)
    append_call_result_9707 = invoke(stypy.reporting.localization.Localization(__file__, 2239, 8), append_9699, *[subscript_call_result_9705], **kwargs_9706)
    
    
    # Getting the type of 'num' (line 2240)
    num_9708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 8), 'num')
    # Getting the type of 'base' (line 2240)
    base_9709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 16), 'base')
    # Applying the binary operator '//=' (line 2240)
    result_ifloordiv_9710 = python_operator(stypy.reporting.localization.Localization(__file__, 2240, 8), '//=', num_9708, base_9709)
    # Assigning a type to the variable 'num' (line 2240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2240, 8), 'num', result_ifloordiv_9710)
    
    # SSA join for while statement (line 2238)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'padding' (line 2241)
    padding_9711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 7), 'padding')
    # Testing the type of an if condition (line 2241)
    if_condition_9712 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2241, 4), padding_9711)
    # Assigning a type to the variable 'if_condition_9712' (line 2241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 4), 'if_condition_9712', if_condition_9712)
    # SSA begins for if statement (line 2241)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2242)
    # Processing the call arguments (line 2242)
    str_9715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 19), 'str', '0')
    # Getting the type of 'padding' (line 2242)
    padding_9716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 25), 'padding', False)
    # Applying the binary operator '*' (line 2242)
    result_mul_9717 = python_operator(stypy.reporting.localization.Localization(__file__, 2242, 19), '*', str_9715, padding_9716)
    
    # Processing the call keyword arguments (line 2242)
    kwargs_9718 = {}
    # Getting the type of 'res' (line 2242)
    res_9713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 8), 'res', False)
    # Obtaining the member 'append' of a type (line 2242)
    append_9714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2242, 8), res_9713, 'append')
    # Calling append(args, kwargs) (line 2242)
    append_call_result_9719 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 8), append_9714, *[result_mul_9717], **kwargs_9718)
    
    # SSA join for if statement (line 2241)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'number' (line 2243)
    number_9720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 7), 'number')
    int_9721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 16), 'int')
    # Applying the binary operator '<' (line 2243)
    result_lt_9722 = python_operator(stypy.reporting.localization.Localization(__file__, 2243, 7), '<', number_9720, int_9721)
    
    # Testing the type of an if condition (line 2243)
    if_condition_9723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2243, 4), result_lt_9722)
    # Assigning a type to the variable 'if_condition_9723' (line 2243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 4), 'if_condition_9723', if_condition_9723)
    # SSA begins for if statement (line 2243)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2244)
    # Processing the call arguments (line 2244)
    str_9726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 19), 'str', '-')
    # Processing the call keyword arguments (line 2244)
    kwargs_9727 = {}
    # Getting the type of 'res' (line 2244)
    res_9724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 8), 'res', False)
    # Obtaining the member 'append' of a type (line 2244)
    append_9725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 8), res_9724, 'append')
    # Calling append(args, kwargs) (line 2244)
    append_call_result_9728 = invoke(stypy.reporting.localization.Localization(__file__, 2244, 8), append_9725, *[str_9726], **kwargs_9727)
    
    # SSA join for if statement (line 2243)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to join(...): (line 2245)
    # Processing the call arguments (line 2245)
    
    # Call to reversed(...): (line 2245)
    # Processing the call arguments (line 2245)
    
    # Evaluating a boolean operation
    # Getting the type of 'res' (line 2245)
    res_9732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 28), 'res', False)
    str_9733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2245, 35), 'str', '0')
    # Applying the binary operator 'or' (line 2245)
    result_or_keyword_9734 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 28), 'or', res_9732, str_9733)
    
    # Processing the call keyword arguments (line 2245)
    kwargs_9735 = {}
    # Getting the type of 'reversed' (line 2245)
    reversed_9731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 19), 'reversed', False)
    # Calling reversed(args, kwargs) (line 2245)
    reversed_call_result_9736 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 19), reversed_9731, *[result_or_keyword_9734], **kwargs_9735)
    
    # Processing the call keyword arguments (line 2245)
    kwargs_9737 = {}
    str_9729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2245, 11), 'str', '')
    # Obtaining the member 'join' of a type (line 2245)
    join_9730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 11), str_9729, 'join')
    # Calling join(args, kwargs) (line 2245)
    join_call_result_9738 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 11), join_9730, *[reversed_call_result_9736], **kwargs_9737)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 4), 'stypy_return_type', join_call_result_9738)
    
    # ################# End of 'base_repr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'base_repr' in the type store
    # Getting the type of 'stypy_return_type' (line 2194)
    stypy_return_type_9739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9739)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'base_repr'
    return stypy_return_type_9739

# Assigning a type to the variable 'base_repr' (line 2194)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 0), 'base_repr', base_repr)

@norecursion
def load(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'load'
    module_type_store = module_type_store.open_function_context('load', 2248, 0, False)
    
    # Passed parameters checking function
    load.stypy_localization = localization
    load.stypy_type_of_self = None
    load.stypy_type_store = module_type_store
    load.stypy_function_name = 'load'
    load.stypy_param_names_list = ['file']
    load.stypy_varargs_param_name = None
    load.stypy_kwargs_param_name = None
    load.stypy_call_defaults = defaults
    load.stypy_call_varargs = varargs
    load.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'load', ['file'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'load', localization, ['file'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'load(...)' code ##################

    str_9740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, (-1)), 'str', '\n    Wrapper around cPickle.load which accepts either a file-like object or\n    a filename.\n\n    Note that the NumPy binary format is not based on pickle/cPickle anymore.\n    For details on the preferred way of loading and saving files, see `load`\n    and `save`.\n\n    See Also\n    --------\n    load, save\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 2262)
    
    # Call to type(...): (line 2262)
    # Processing the call arguments (line 2262)
    str_9742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 29), 'str', '')
    # Processing the call keyword arguments (line 2262)
    kwargs_9743 = {}
    # Getting the type of 'type' (line 2262)
    type_9741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 24), 'type', False)
    # Calling type(args, kwargs) (line 2262)
    type_call_result_9744 = invoke(stypy.reporting.localization.Localization(__file__, 2262, 24), type_9741, *[str_9742], **kwargs_9743)
    
    # Getting the type of 'file' (line 2262)
    file_9745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 18), 'file')
    
    (may_be_9746, more_types_in_union_9747) = may_be_subtype(type_call_result_9744, file_9745)

    if may_be_9746:

        if more_types_in_union_9747:
            # Runtime conditional SSA (line 2262)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'file' (line 2262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2262, 4), 'file', remove_not_subtype_from_union(file_9745, type('')))
        
        # Assigning a Call to a Name (line 2263):
        
        # Assigning a Call to a Name (line 2263):
        
        # Call to open(...): (line 2263)
        # Processing the call arguments (line 2263)
        # Getting the type of 'file' (line 2263)
        file_9749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 20), 'file', False)
        str_9750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2263, 26), 'str', 'rb')
        # Processing the call keyword arguments (line 2263)
        kwargs_9751 = {}
        # Getting the type of 'open' (line 2263)
        open_9748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 15), 'open', False)
        # Calling open(args, kwargs) (line 2263)
        open_call_result_9752 = invoke(stypy.reporting.localization.Localization(__file__, 2263, 15), open_9748, *[file_9749, str_9750], **kwargs_9751)
        
        # Assigning a type to the variable 'file' (line 2263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 8), 'file', open_call_result_9752)

        if more_types_in_union_9747:
            # SSA join for if statement (line 2262)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to load(...): (line 2264)
    # Processing the call arguments (line 2264)
    # Getting the type of 'file' (line 2264)
    file_9755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 23), 'file', False)
    # Processing the call keyword arguments (line 2264)
    kwargs_9756 = {}
    # Getting the type of 'pickle' (line 2264)
    pickle_9753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 11), 'pickle', False)
    # Obtaining the member 'load' of a type (line 2264)
    load_9754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 11), pickle_9753, 'load')
    # Calling load(args, kwargs) (line 2264)
    load_call_result_9757 = invoke(stypy.reporting.localization.Localization(__file__, 2264, 11), load_9754, *[file_9755], **kwargs_9756)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2264, 4), 'stypy_return_type', load_call_result_9757)
    
    # ################# End of 'load(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'load' in the type store
    # Getting the type of 'stypy_return_type' (line 2248)
    stypy_return_type_9758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9758)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'load'
    return stypy_return_type_9758

# Assigning a type to the variable 'load' (line 2248)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2248, 0), 'load', load)

@norecursion
def _maketup(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_maketup'
    module_type_store = module_type_store.open_function_context('_maketup', 2269, 0, False)
    
    # Passed parameters checking function
    _maketup.stypy_localization = localization
    _maketup.stypy_type_of_self = None
    _maketup.stypy_type_store = module_type_store
    _maketup.stypy_function_name = '_maketup'
    _maketup.stypy_param_names_list = ['descr', 'val']
    _maketup.stypy_varargs_param_name = None
    _maketup.stypy_kwargs_param_name = None
    _maketup.stypy_call_defaults = defaults
    _maketup.stypy_call_varargs = varargs
    _maketup.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_maketup', ['descr', 'val'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_maketup', localization, ['descr', 'val'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_maketup(...)' code ##################

    
    # Assigning a Call to a Name (line 2270):
    
    # Assigning a Call to a Name (line 2270):
    
    # Call to dtype(...): (line 2270)
    # Processing the call arguments (line 2270)
    # Getting the type of 'descr' (line 2270)
    descr_9760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 15), 'descr', False)
    # Processing the call keyword arguments (line 2270)
    kwargs_9761 = {}
    # Getting the type of 'dtype' (line 2270)
    dtype_9759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 9), 'dtype', False)
    # Calling dtype(args, kwargs) (line 2270)
    dtype_call_result_9762 = invoke(stypy.reporting.localization.Localization(__file__, 2270, 9), dtype_9759, *[descr_9760], **kwargs_9761)
    
    # Assigning a type to the variable 'dt' (line 2270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 4), 'dt', dtype_call_result_9762)
    
    # Assigning a Attribute to a Name (line 2272):
    
    # Assigning a Attribute to a Name (line 2272):
    # Getting the type of 'dt' (line 2272)
    dt_9763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 13), 'dt')
    # Obtaining the member 'fields' of a type (line 2272)
    fields_9764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2272, 13), dt_9763, 'fields')
    # Assigning a type to the variable 'fields' (line 2272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2272, 4), 'fields', fields_9764)
    
    # Type idiom detected: calculating its left and rigth part (line 2273)
    # Getting the type of 'fields' (line 2273)
    fields_9765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 7), 'fields')
    # Getting the type of 'None' (line 2273)
    None_9766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 17), 'None')
    
    (may_be_9767, more_types_in_union_9768) = may_be_none(fields_9765, None_9766)

    if may_be_9767:

        if more_types_in_union_9768:
            # Runtime conditional SSA (line 2273)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'val' (line 2274)
        val_9769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 15), 'val')
        # Assigning a type to the variable 'stypy_return_type' (line 2274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2274, 8), 'stypy_return_type', val_9769)

        if more_types_in_union_9768:
            # Runtime conditional SSA for else branch (line 2273)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_9767) or more_types_in_union_9768):
        
        # Assigning a ListComp to a Name (line 2276):
        
        # Assigning a ListComp to a Name (line 2276):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dt' (line 2276)
        dt_9781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 58), 'dt')
        # Obtaining the member 'names' of a type (line 2276)
        names_9782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 58), dt_9781, 'names')
        comprehension_9783 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2276, 15), names_9782)
        # Assigning a type to the variable 'name' (line 2276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 15), 'name', comprehension_9783)
        
        # Call to _maketup(...): (line 2276)
        # Processing the call arguments (line 2276)
        
        # Obtaining the type of the subscript
        int_9771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2276, 37), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 2276)
        name_9772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 31), 'name', False)
        # Getting the type of 'fields' (line 2276)
        fields_9773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 24), 'fields', False)
        # Obtaining the member '__getitem__' of a type (line 2276)
        getitem___9774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 24), fields_9773, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2276)
        subscript_call_result_9775 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 24), getitem___9774, name_9772)
        
        # Obtaining the member '__getitem__' of a type (line 2276)
        getitem___9776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 24), subscript_call_result_9775, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2276)
        subscript_call_result_9777 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 24), getitem___9776, int_9771)
        
        # Getting the type of 'val' (line 2276)
        val_9778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 41), 'val', False)
        # Processing the call keyword arguments (line 2276)
        kwargs_9779 = {}
        # Getting the type of '_maketup' (line 2276)
        _maketup_9770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 15), '_maketup', False)
        # Calling _maketup(args, kwargs) (line 2276)
        _maketup_call_result_9780 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 15), _maketup_9770, *[subscript_call_result_9777, val_9778], **kwargs_9779)
        
        list_9784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2276, 15), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2276, 15), list_9784, _maketup_call_result_9780)
        # Assigning a type to the variable 'res' (line 2276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 8), 'res', list_9784)
        
        # Call to tuple(...): (line 2277)
        # Processing the call arguments (line 2277)
        # Getting the type of 'res' (line 2277)
        res_9786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 21), 'res', False)
        # Processing the call keyword arguments (line 2277)
        kwargs_9787 = {}
        # Getting the type of 'tuple' (line 2277)
        tuple_9785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 15), 'tuple', False)
        # Calling tuple(args, kwargs) (line 2277)
        tuple_call_result_9788 = invoke(stypy.reporting.localization.Localization(__file__, 2277, 15), tuple_9785, *[res_9786], **kwargs_9787)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2277, 8), 'stypy_return_type', tuple_call_result_9788)

        if (may_be_9767 and more_types_in_union_9768):
            # SSA join for if statement (line 2273)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of '_maketup(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_maketup' in the type store
    # Getting the type of 'stypy_return_type' (line 2269)
    stypy_return_type_9789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9789)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_maketup'
    return stypy_return_type_9789

# Assigning a type to the variable '_maketup' (line 2269)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 0), '_maketup', _maketup)

@norecursion
def identity(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2279)
    None_9790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 22), 'None')
    defaults = [None_9790]
    # Create a new context for function 'identity'
    module_type_store = module_type_store.open_function_context('identity', 2279, 0, False)
    
    # Passed parameters checking function
    identity.stypy_localization = localization
    identity.stypy_type_of_self = None
    identity.stypy_type_store = module_type_store
    identity.stypy_function_name = 'identity'
    identity.stypy_param_names_list = ['n', 'dtype']
    identity.stypy_varargs_param_name = None
    identity.stypy_kwargs_param_name = None
    identity.stypy_call_defaults = defaults
    identity.stypy_call_varargs = varargs
    identity.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'identity', ['n', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'identity', localization, ['n', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'identity(...)' code ##################

    str_9791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2306, (-1)), 'str', '\n    Return the identity array.\n\n    The identity array is a square array with ones on\n    the main diagonal.\n\n    Parameters\n    ----------\n    n : int\n        Number of rows (and columns) in `n` x `n` output.\n    dtype : data-type, optional\n        Data-type of the output.  Defaults to ``float``.\n\n    Returns\n    -------\n    out : ndarray\n        `n` x `n` array with its main diagonal set to one,\n        and all other elements 0.\n\n    Examples\n    --------\n    >>> np.identity(3)\n    array([[ 1.,  0.,  0.],\n           [ 0.,  1.,  0.],\n           [ 0.,  0.,  1.]])\n\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2307, 4))
    
    # 'from numpy import eye' statement (line 2307)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
    import_9792 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2307, 4), 'numpy')

    if (type(import_9792) is not StypyTypeError):

        if (import_9792 != 'pyd_module'):
            __import__(import_9792)
            sys_modules_9793 = sys.modules[import_9792]
            import_from_module(stypy.reporting.localization.Localization(__file__, 2307, 4), 'numpy', sys_modules_9793.module_type_store, module_type_store, ['eye'])
            nest_module(stypy.reporting.localization.Localization(__file__, 2307, 4), __file__, sys_modules_9793, sys_modules_9793.module_type_store, module_type_store)
        else:
            from numpy import eye

            import_from_module(stypy.reporting.localization.Localization(__file__, 2307, 4), 'numpy', None, module_type_store, ['eye'], [eye])

    else:
        # Assigning a type to the variable 'numpy' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 4), 'numpy', import_9792)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')
    
    
    # Call to eye(...): (line 2308)
    # Processing the call arguments (line 2308)
    # Getting the type of 'n' (line 2308)
    n_9795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 15), 'n', False)
    # Processing the call keyword arguments (line 2308)
    # Getting the type of 'dtype' (line 2308)
    dtype_9796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 24), 'dtype', False)
    keyword_9797 = dtype_9796
    kwargs_9798 = {'dtype': keyword_9797}
    # Getting the type of 'eye' (line 2308)
    eye_9794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 11), 'eye', False)
    # Calling eye(args, kwargs) (line 2308)
    eye_call_result_9799 = invoke(stypy.reporting.localization.Localization(__file__, 2308, 11), eye_9794, *[n_9795], **kwargs_9798)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 4), 'stypy_return_type', eye_call_result_9799)
    
    # ################# End of 'identity(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'identity' in the type store
    # Getting the type of 'stypy_return_type' (line 2279)
    stypy_return_type_9800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9800)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'identity'
    return stypy_return_type_9800

# Assigning a type to the variable 'identity' (line 2279)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2279, 0), 'identity', identity)

@norecursion
def allclose(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_9801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2310, 24), 'float')
    float_9802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2310, 36), 'float')
    # Getting the type of 'False' (line 2310)
    False_9803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 53), 'False')
    defaults = [float_9801, float_9802, False_9803]
    # Create a new context for function 'allclose'
    module_type_store = module_type_store.open_function_context('allclose', 2310, 0, False)
    
    # Passed parameters checking function
    allclose.stypy_localization = localization
    allclose.stypy_type_of_self = None
    allclose.stypy_type_store = module_type_store
    allclose.stypy_function_name = 'allclose'
    allclose.stypy_param_names_list = ['a', 'b', 'rtol', 'atol', 'equal_nan']
    allclose.stypy_varargs_param_name = None
    allclose.stypy_kwargs_param_name = None
    allclose.stypy_call_defaults = defaults
    allclose.stypy_call_varargs = varargs
    allclose.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'allclose', ['a', 'b', 'rtol', 'atol', 'equal_nan'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'allclose', localization, ['a', 'b', 'rtol', 'atol', 'equal_nan'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'allclose(...)' code ##################

    str_9804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2371, (-1)), 'str', "\n    Returns True if two arrays are element-wise equal within a tolerance.\n\n    The tolerance values are positive, typically very small numbers.  The\n    relative difference (`rtol` * abs(`b`)) and the absolute difference\n    `atol` are added together to compare against the absolute difference\n    between `a` and `b`.\n\n    If either array contains one or more NaNs, False is returned.\n    Infs are treated as equal if they are in the same place and of the same\n    sign in both arrays.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to compare.\n    rtol : float\n        The relative tolerance parameter (see Notes).\n    atol : float\n        The absolute tolerance parameter (see Notes).\n    equal_nan : bool\n        Whether to compare NaN's as equal.  If True, NaN's in `a` will be\n        considered equal to NaN's in `b` in the output array.\n\n        .. versionadded:: 1.10.0\n\n    Returns\n    -------\n    allclose : bool\n        Returns True if the two arrays are equal within the given\n        tolerance; False otherwise.\n\n    See Also\n    --------\n    isclose, all, any\n\n    Notes\n    -----\n    If the following equation is element-wise True, then allclose returns\n    True.\n\n     absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))\n\n    The above equation is not symmetric in `a` and `b`, so that\n    `allclose(a, b)` might be different from `allclose(b, a)` in\n    some rare cases.\n\n    Examples\n    --------\n    >>> np.allclose([1e10,1e-7], [1.00001e10,1e-8])\n    False\n    >>> np.allclose([1e10,1e-8], [1.00001e10,1e-9])\n    True\n    >>> np.allclose([1e10,1e-8], [1.0001e10,1e-9])\n    False\n    >>> np.allclose([1.0, np.nan], [1.0, np.nan])\n    False\n    >>> np.allclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)\n    True\n\n    ")
    
    # Assigning a Call to a Name (line 2372):
    
    # Assigning a Call to a Name (line 2372):
    
    # Call to all(...): (line 2372)
    # Processing the call arguments (line 2372)
    
    # Call to isclose(...): (line 2372)
    # Processing the call arguments (line 2372)
    # Getting the type of 'a' (line 2372)
    a_9807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 22), 'a', False)
    # Getting the type of 'b' (line 2372)
    b_9808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 25), 'b', False)
    # Processing the call keyword arguments (line 2372)
    # Getting the type of 'rtol' (line 2372)
    rtol_9809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 33), 'rtol', False)
    keyword_9810 = rtol_9809
    # Getting the type of 'atol' (line 2372)
    atol_9811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 44), 'atol', False)
    keyword_9812 = atol_9811
    # Getting the type of 'equal_nan' (line 2372)
    equal_nan_9813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 60), 'equal_nan', False)
    keyword_9814 = equal_nan_9813
    kwargs_9815 = {'rtol': keyword_9810, 'atol': keyword_9812, 'equal_nan': keyword_9814}
    # Getting the type of 'isclose' (line 2372)
    isclose_9806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 14), 'isclose', False)
    # Calling isclose(args, kwargs) (line 2372)
    isclose_call_result_9816 = invoke(stypy.reporting.localization.Localization(__file__, 2372, 14), isclose_9806, *[a_9807, b_9808], **kwargs_9815)
    
    # Processing the call keyword arguments (line 2372)
    kwargs_9817 = {}
    # Getting the type of 'all' (line 2372)
    all_9805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 10), 'all', False)
    # Calling all(args, kwargs) (line 2372)
    all_call_result_9818 = invoke(stypy.reporting.localization.Localization(__file__, 2372, 10), all_9805, *[isclose_call_result_9816], **kwargs_9817)
    
    # Assigning a type to the variable 'res' (line 2372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 4), 'res', all_call_result_9818)
    
    # Call to bool(...): (line 2373)
    # Processing the call arguments (line 2373)
    # Getting the type of 'res' (line 2373)
    res_9820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 16), 'res', False)
    # Processing the call keyword arguments (line 2373)
    kwargs_9821 = {}
    # Getting the type of 'bool' (line 2373)
    bool_9819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 11), 'bool', False)
    # Calling bool(args, kwargs) (line 2373)
    bool_call_result_9822 = invoke(stypy.reporting.localization.Localization(__file__, 2373, 11), bool_9819, *[res_9820], **kwargs_9821)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2373, 4), 'stypy_return_type', bool_call_result_9822)
    
    # ################# End of 'allclose(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'allclose' in the type store
    # Getting the type of 'stypy_return_type' (line 2310)
    stypy_return_type_9823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_9823)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'allclose'
    return stypy_return_type_9823

# Assigning a type to the variable 'allclose' (line 2310)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2310, 0), 'allclose', allclose)

@norecursion
def isclose(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_9824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2375, 23), 'float')
    float_9825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2375, 35), 'float')
    # Getting the type of 'False' (line 2375)
    False_9826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 52), 'False')
    defaults = [float_9824, float_9825, False_9826]
    # Create a new context for function 'isclose'
    module_type_store = module_type_store.open_function_context('isclose', 2375, 0, False)
    
    # Passed parameters checking function
    isclose.stypy_localization = localization
    isclose.stypy_type_of_self = None
    isclose.stypy_type_store = module_type_store
    isclose.stypy_function_name = 'isclose'
    isclose.stypy_param_names_list = ['a', 'b', 'rtol', 'atol', 'equal_nan']
    isclose.stypy_varargs_param_name = None
    isclose.stypy_kwargs_param_name = None
    isclose.stypy_call_defaults = defaults
    isclose.stypy_call_varargs = varargs
    isclose.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'isclose', ['a', 'b', 'rtol', 'atol', 'equal_nan'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'isclose', localization, ['a', 'b', 'rtol', 'atol', 'equal_nan'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'isclose(...)' code ##################

    str_9827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2433, (-1)), 'str', "\n    Returns a boolean array where two arrays are element-wise equal within a\n    tolerance.\n\n    The tolerance values are positive, typically very small numbers.  The\n    relative difference (`rtol` * abs(`b`)) and the absolute difference\n    `atol` are added together to compare against the absolute difference\n    between `a` and `b`.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to compare.\n    rtol : float\n        The relative tolerance parameter (see Notes).\n    atol : float\n        The absolute tolerance parameter (see Notes).\n    equal_nan : bool\n        Whether to compare NaN's as equal.  If True, NaN's in `a` will be\n        considered equal to NaN's in `b` in the output array.\n\n    Returns\n    -------\n    y : array_like\n        Returns a boolean array of where `a` and `b` are equal within the\n        given tolerance. If both `a` and `b` are scalars, returns a single\n        boolean value.\n\n    See Also\n    --------\n    allclose\n\n    Notes\n    -----\n    .. versionadded:: 1.7.0\n\n    For finite values, isclose uses the following equation to test whether\n    two floating point values are equivalent.\n\n     absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))\n\n    The above equation is not symmetric in `a` and `b`, so that\n    `isclose(a, b)` might be different from `isclose(b, a)` in\n    some rare cases.\n\n    Examples\n    --------\n    >>> np.isclose([1e10,1e-7], [1.00001e10,1e-8])\n    array([True, False])\n    >>> np.isclose([1e10,1e-8], [1.00001e10,1e-9])\n    array([True, True])\n    >>> np.isclose([1e10,1e-8], [1.0001e10,1e-9])\n    array([False, True])\n    >>> np.isclose([1.0, np.nan], [1.0, np.nan])\n    array([True, False])\n    >>> np.isclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)\n    array([True, True])\n    ")

    @norecursion
    def within_tol(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'within_tol'
        module_type_store = module_type_store.open_function_context('within_tol', 2434, 4, False)
        
        # Passed parameters checking function
        within_tol.stypy_localization = localization
        within_tol.stypy_type_of_self = None
        within_tol.stypy_type_store = module_type_store
        within_tol.stypy_function_name = 'within_tol'
        within_tol.stypy_param_names_list = ['x', 'y', 'atol', 'rtol']
        within_tol.stypy_varargs_param_name = None
        within_tol.stypy_kwargs_param_name = None
        within_tol.stypy_call_defaults = defaults
        within_tol.stypy_call_varargs = varargs
        within_tol.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'within_tol', ['x', 'y', 'atol', 'rtol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'within_tol', localization, ['x', 'y', 'atol', 'rtol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'within_tol(...)' code ##################

        
        # Call to errstate(...): (line 2435)
        # Processing the call keyword arguments (line 2435)
        str_9829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 30), 'str', 'ignore')
        keyword_9830 = str_9829
        kwargs_9831 = {'invalid': keyword_9830}
        # Getting the type of 'errstate' (line 2435)
        errstate_9828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 13), 'errstate', False)
        # Calling errstate(args, kwargs) (line 2435)
        errstate_call_result_9832 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 13), errstate_9828, *[], **kwargs_9831)
        
        with_9833 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 2435, 13), errstate_call_result_9832, 'with parameter', '__enter__', '__exit__')

        if with_9833:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 2435)
            enter___9834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 13), errstate_call_result_9832, '__enter__')
            with_enter_9835 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 13), enter___9834)
            
            # Assigning a Call to a Name (line 2436):
            
            # Assigning a Call to a Name (line 2436):
            
            # Call to less_equal(...): (line 2436)
            # Processing the call arguments (line 2436)
            
            # Call to abs(...): (line 2436)
            # Processing the call arguments (line 2436)
            # Getting the type of 'x' (line 2436)
            x_9838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 36), 'x', False)
            # Getting the type of 'y' (line 2436)
            y_9839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 38), 'y', False)
            # Applying the binary operator '-' (line 2436)
            result_sub_9840 = python_operator(stypy.reporting.localization.Localization(__file__, 2436, 36), '-', x_9838, y_9839)
            
            # Processing the call keyword arguments (line 2436)
            kwargs_9841 = {}
            # Getting the type of 'abs' (line 2436)
            abs_9837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 32), 'abs', False)
            # Calling abs(args, kwargs) (line 2436)
            abs_call_result_9842 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 32), abs_9837, *[result_sub_9840], **kwargs_9841)
            
            # Getting the type of 'atol' (line 2436)
            atol_9843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 42), 'atol', False)
            # Getting the type of 'rtol' (line 2436)
            rtol_9844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 49), 'rtol', False)
            
            # Call to abs(...): (line 2436)
            # Processing the call arguments (line 2436)
            # Getting the type of 'y' (line 2436)
            y_9846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 60), 'y', False)
            # Processing the call keyword arguments (line 2436)
            kwargs_9847 = {}
            # Getting the type of 'abs' (line 2436)
            abs_9845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 56), 'abs', False)
            # Calling abs(args, kwargs) (line 2436)
            abs_call_result_9848 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 56), abs_9845, *[y_9846], **kwargs_9847)
            
            # Applying the binary operator '*' (line 2436)
            result_mul_9849 = python_operator(stypy.reporting.localization.Localization(__file__, 2436, 49), '*', rtol_9844, abs_call_result_9848)
            
            # Applying the binary operator '+' (line 2436)
            result_add_9850 = python_operator(stypy.reporting.localization.Localization(__file__, 2436, 42), '+', atol_9843, result_mul_9849)
            
            # Processing the call keyword arguments (line 2436)
            kwargs_9851 = {}
            # Getting the type of 'less_equal' (line 2436)
            less_equal_9836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 21), 'less_equal', False)
            # Calling less_equal(args, kwargs) (line 2436)
            less_equal_call_result_9852 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 21), less_equal_9836, *[abs_call_result_9842, result_add_9850], **kwargs_9851)
            
            # Assigning a type to the variable 'result' (line 2436)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2436, 12), 'result', less_equal_call_result_9852)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 2435)
            exit___9853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 13), errstate_call_result_9832, '__exit__')
            with_exit_9854 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 13), exit___9853, None, None, None)

        
        
        # Evaluating a boolean operation
        
        # Call to isscalar(...): (line 2437)
        # Processing the call arguments (line 2437)
        # Getting the type of 'a' (line 2437)
        a_9856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 20), 'a', False)
        # Processing the call keyword arguments (line 2437)
        kwargs_9857 = {}
        # Getting the type of 'isscalar' (line 2437)
        isscalar_9855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 11), 'isscalar', False)
        # Calling isscalar(args, kwargs) (line 2437)
        isscalar_call_result_9858 = invoke(stypy.reporting.localization.Localization(__file__, 2437, 11), isscalar_9855, *[a_9856], **kwargs_9857)
        
        
        # Call to isscalar(...): (line 2437)
        # Processing the call arguments (line 2437)
        # Getting the type of 'b' (line 2437)
        b_9860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 36), 'b', False)
        # Processing the call keyword arguments (line 2437)
        kwargs_9861 = {}
        # Getting the type of 'isscalar' (line 2437)
        isscalar_9859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 27), 'isscalar', False)
        # Calling isscalar(args, kwargs) (line 2437)
        isscalar_call_result_9862 = invoke(stypy.reporting.localization.Localization(__file__, 2437, 27), isscalar_9859, *[b_9860], **kwargs_9861)
        
        # Applying the binary operator 'and' (line 2437)
        result_and_keyword_9863 = python_operator(stypy.reporting.localization.Localization(__file__, 2437, 11), 'and', isscalar_call_result_9858, isscalar_call_result_9862)
        
        # Testing the type of an if condition (line 2437)
        if_condition_9864 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2437, 8), result_and_keyword_9863)
        # Assigning a type to the variable 'if_condition_9864' (line 2437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2437, 8), 'if_condition_9864', if_condition_9864)
        # SSA begins for if statement (line 2437)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2438):
        
        # Assigning a Call to a Name (line 2438):
        
        # Call to bool(...): (line 2438)
        # Processing the call arguments (line 2438)
        # Getting the type of 'result' (line 2438)
        result_9866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 26), 'result', False)
        # Processing the call keyword arguments (line 2438)
        kwargs_9867 = {}
        # Getting the type of 'bool' (line 2438)
        bool_9865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 21), 'bool', False)
        # Calling bool(args, kwargs) (line 2438)
        bool_call_result_9868 = invoke(stypy.reporting.localization.Localization(__file__, 2438, 21), bool_9865, *[result_9866], **kwargs_9867)
        
        # Assigning a type to the variable 'result' (line 2438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2438, 12), 'result', bool_call_result_9868)
        # SSA join for if statement (line 2437)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 2439)
        result_9869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 2439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2439, 8), 'stypy_return_type', result_9869)
        
        # ################# End of 'within_tol(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'within_tol' in the type store
        # Getting the type of 'stypy_return_type' (line 2434)
        stypy_return_type_9870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9870)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'within_tol'
        return stypy_return_type_9870

    # Assigning a type to the variable 'within_tol' (line 2434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2434, 4), 'within_tol', within_tol)
    
    # Assigning a Call to a Name (line 2441):
    
    # Assigning a Call to a Name (line 2441):
    
    # Call to array(...): (line 2441)
    # Processing the call arguments (line 2441)
    # Getting the type of 'a' (line 2441)
    a_9872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 14), 'a', False)
    # Processing the call keyword arguments (line 2441)
    # Getting the type of 'False' (line 2441)
    False_9873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 22), 'False', False)
    keyword_9874 = False_9873
    # Getting the type of 'True' (line 2441)
    True_9875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 35), 'True', False)
    keyword_9876 = True_9875
    int_9877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2441, 47), 'int')
    keyword_9878 = int_9877
    kwargs_9879 = {'subok': keyword_9876, 'copy': keyword_9874, 'ndmin': keyword_9878}
    # Getting the type of 'array' (line 2441)
    array_9871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 8), 'array', False)
    # Calling array(args, kwargs) (line 2441)
    array_call_result_9880 = invoke(stypy.reporting.localization.Localization(__file__, 2441, 8), array_9871, *[a_9872], **kwargs_9879)
    
    # Assigning a type to the variable 'x' (line 2441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2441, 4), 'x', array_call_result_9880)
    
    # Assigning a Call to a Name (line 2442):
    
    # Assigning a Call to a Name (line 2442):
    
    # Call to array(...): (line 2442)
    # Processing the call arguments (line 2442)
    # Getting the type of 'b' (line 2442)
    b_9882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 14), 'b', False)
    # Processing the call keyword arguments (line 2442)
    # Getting the type of 'False' (line 2442)
    False_9883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 22), 'False', False)
    keyword_9884 = False_9883
    # Getting the type of 'True' (line 2442)
    True_9885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 35), 'True', False)
    keyword_9886 = True_9885
    int_9887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2442, 47), 'int')
    keyword_9888 = int_9887
    kwargs_9889 = {'subok': keyword_9886, 'copy': keyword_9884, 'ndmin': keyword_9888}
    # Getting the type of 'array' (line 2442)
    array_9881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 8), 'array', False)
    # Calling array(args, kwargs) (line 2442)
    array_call_result_9890 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 8), array_9881, *[b_9882], **kwargs_9889)
    
    # Assigning a type to the variable 'y' (line 2442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 4), 'y', array_call_result_9890)
    
    # Assigning a Call to a Name (line 2447):
    
    # Assigning a Call to a Name (line 2447):
    
    # Call to result_type(...): (line 2447)
    # Processing the call arguments (line 2447)
    # Getting the type of 'y' (line 2447)
    y_9893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 32), 'y', False)
    float_9894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2447, 35), 'float')
    # Processing the call keyword arguments (line 2447)
    kwargs_9895 = {}
    # Getting the type of 'multiarray' (line 2447)
    multiarray_9891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 9), 'multiarray', False)
    # Obtaining the member 'result_type' of a type (line 2447)
    result_type_9892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 9), multiarray_9891, 'result_type')
    # Calling result_type(args, kwargs) (line 2447)
    result_type_call_result_9896 = invoke(stypy.reporting.localization.Localization(__file__, 2447, 9), result_type_9892, *[y_9893, float_9894], **kwargs_9895)
    
    # Assigning a type to the variable 'dt' (line 2447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2447, 4), 'dt', result_type_call_result_9896)
    
    # Assigning a Call to a Name (line 2448):
    
    # Assigning a Call to a Name (line 2448):
    
    # Call to array(...): (line 2448)
    # Processing the call arguments (line 2448)
    # Getting the type of 'y' (line 2448)
    y_9898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 14), 'y', False)
    # Processing the call keyword arguments (line 2448)
    # Getting the type of 'dt' (line 2448)
    dt_9899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 23), 'dt', False)
    keyword_9900 = dt_9899
    # Getting the type of 'False' (line 2448)
    False_9901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 32), 'False', False)
    keyword_9902 = False_9901
    # Getting the type of 'True' (line 2448)
    True_9903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 45), 'True', False)
    keyword_9904 = True_9903
    kwargs_9905 = {'dtype': keyword_9900, 'copy': keyword_9902, 'subok': keyword_9904}
    # Getting the type of 'array' (line 2448)
    array_9897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 8), 'array', False)
    # Calling array(args, kwargs) (line 2448)
    array_call_result_9906 = invoke(stypy.reporting.localization.Localization(__file__, 2448, 8), array_9897, *[y_9898], **kwargs_9905)
    
    # Assigning a type to the variable 'y' (line 2448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2448, 4), 'y', array_call_result_9906)
    
    # Assigning a Call to a Name (line 2450):
    
    # Assigning a Call to a Name (line 2450):
    
    # Call to isfinite(...): (line 2450)
    # Processing the call arguments (line 2450)
    # Getting the type of 'x' (line 2450)
    x_9908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 20), 'x', False)
    # Processing the call keyword arguments (line 2450)
    kwargs_9909 = {}
    # Getting the type of 'isfinite' (line 2450)
    isfinite_9907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 11), 'isfinite', False)
    # Calling isfinite(args, kwargs) (line 2450)
    isfinite_call_result_9910 = invoke(stypy.reporting.localization.Localization(__file__, 2450, 11), isfinite_9907, *[x_9908], **kwargs_9909)
    
    # Assigning a type to the variable 'xfin' (line 2450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2450, 4), 'xfin', isfinite_call_result_9910)
    
    # Assigning a Call to a Name (line 2451):
    
    # Assigning a Call to a Name (line 2451):
    
    # Call to isfinite(...): (line 2451)
    # Processing the call arguments (line 2451)
    # Getting the type of 'y' (line 2451)
    y_9912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 20), 'y', False)
    # Processing the call keyword arguments (line 2451)
    kwargs_9913 = {}
    # Getting the type of 'isfinite' (line 2451)
    isfinite_9911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 11), 'isfinite', False)
    # Calling isfinite(args, kwargs) (line 2451)
    isfinite_call_result_9914 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 11), isfinite_9911, *[y_9912], **kwargs_9913)
    
    # Assigning a type to the variable 'yfin' (line 2451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 4), 'yfin', isfinite_call_result_9914)
    
    
    # Evaluating a boolean operation
    
    # Call to all(...): (line 2452)
    # Processing the call arguments (line 2452)
    # Getting the type of 'xfin' (line 2452)
    xfin_9916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 11), 'xfin', False)
    # Processing the call keyword arguments (line 2452)
    kwargs_9917 = {}
    # Getting the type of 'all' (line 2452)
    all_9915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 7), 'all', False)
    # Calling all(args, kwargs) (line 2452)
    all_call_result_9918 = invoke(stypy.reporting.localization.Localization(__file__, 2452, 7), all_9915, *[xfin_9916], **kwargs_9917)
    
    
    # Call to all(...): (line 2452)
    # Processing the call arguments (line 2452)
    # Getting the type of 'yfin' (line 2452)
    yfin_9920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 25), 'yfin', False)
    # Processing the call keyword arguments (line 2452)
    kwargs_9921 = {}
    # Getting the type of 'all' (line 2452)
    all_9919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 21), 'all', False)
    # Calling all(args, kwargs) (line 2452)
    all_call_result_9922 = invoke(stypy.reporting.localization.Localization(__file__, 2452, 21), all_9919, *[yfin_9920], **kwargs_9921)
    
    # Applying the binary operator 'and' (line 2452)
    result_and_keyword_9923 = python_operator(stypy.reporting.localization.Localization(__file__, 2452, 7), 'and', all_call_result_9918, all_call_result_9922)
    
    # Testing the type of an if condition (line 2452)
    if_condition_9924 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2452, 4), result_and_keyword_9923)
    # Assigning a type to the variable 'if_condition_9924' (line 2452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2452, 4), 'if_condition_9924', if_condition_9924)
    # SSA begins for if statement (line 2452)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to within_tol(...): (line 2453)
    # Processing the call arguments (line 2453)
    # Getting the type of 'x' (line 2453)
    x_9926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 26), 'x', False)
    # Getting the type of 'y' (line 2453)
    y_9927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 29), 'y', False)
    # Getting the type of 'atol' (line 2453)
    atol_9928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 32), 'atol', False)
    # Getting the type of 'rtol' (line 2453)
    rtol_9929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 38), 'rtol', False)
    # Processing the call keyword arguments (line 2453)
    kwargs_9930 = {}
    # Getting the type of 'within_tol' (line 2453)
    within_tol_9925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 15), 'within_tol', False)
    # Calling within_tol(args, kwargs) (line 2453)
    within_tol_call_result_9931 = invoke(stypy.reporting.localization.Localization(__file__, 2453, 15), within_tol_9925, *[x_9926, y_9927, atol_9928, rtol_9929], **kwargs_9930)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2453)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2453, 8), 'stypy_return_type', within_tol_call_result_9931)
    # SSA branch for the else part of an if statement (line 2452)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 2455):
    
    # Assigning a BinOp to a Name (line 2455):
    # Getting the type of 'xfin' (line 2455)
    xfin_9932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 17), 'xfin')
    # Getting the type of 'yfin' (line 2455)
    yfin_9933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 24), 'yfin')
    # Applying the binary operator '&' (line 2455)
    result_and__9934 = python_operator(stypy.reporting.localization.Localization(__file__, 2455, 17), '&', xfin_9932, yfin_9933)
    
    # Assigning a type to the variable 'finite' (line 2455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2455, 8), 'finite', result_and__9934)
    
    # Assigning a Call to a Name (line 2456):
    
    # Assigning a Call to a Name (line 2456):
    
    # Call to zeros_like(...): (line 2456)
    # Processing the call arguments (line 2456)
    # Getting the type of 'finite' (line 2456)
    finite_9936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 26), 'finite', False)
    # Processing the call keyword arguments (line 2456)
    # Getting the type of 'True' (line 2456)
    True_9937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 40), 'True', False)
    keyword_9938 = True_9937
    kwargs_9939 = {'subok': keyword_9938}
    # Getting the type of 'zeros_like' (line 2456)
    zeros_like_9935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 15), 'zeros_like', False)
    # Calling zeros_like(args, kwargs) (line 2456)
    zeros_like_call_result_9940 = invoke(stypy.reporting.localization.Localization(__file__, 2456, 15), zeros_like_9935, *[finite_9936], **kwargs_9939)
    
    # Assigning a type to the variable 'cond' (line 2456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2456, 8), 'cond', zeros_like_call_result_9940)
    
    # Assigning a BinOp to a Name (line 2460):
    
    # Assigning a BinOp to a Name (line 2460):
    # Getting the type of 'x' (line 2460)
    x_9941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 12), 'x')
    
    # Call to ones_like(...): (line 2460)
    # Processing the call arguments (line 2460)
    # Getting the type of 'cond' (line 2460)
    cond_9943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 26), 'cond', False)
    # Processing the call keyword arguments (line 2460)
    kwargs_9944 = {}
    # Getting the type of 'ones_like' (line 2460)
    ones_like_9942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 16), 'ones_like', False)
    # Calling ones_like(args, kwargs) (line 2460)
    ones_like_call_result_9945 = invoke(stypy.reporting.localization.Localization(__file__, 2460, 16), ones_like_9942, *[cond_9943], **kwargs_9944)
    
    # Applying the binary operator '*' (line 2460)
    result_mul_9946 = python_operator(stypy.reporting.localization.Localization(__file__, 2460, 12), '*', x_9941, ones_like_call_result_9945)
    
    # Assigning a type to the variable 'x' (line 2460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2460, 8), 'x', result_mul_9946)
    
    # Assigning a BinOp to a Name (line 2461):
    
    # Assigning a BinOp to a Name (line 2461):
    # Getting the type of 'y' (line 2461)
    y_9947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 12), 'y')
    
    # Call to ones_like(...): (line 2461)
    # Processing the call arguments (line 2461)
    # Getting the type of 'cond' (line 2461)
    cond_9949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 26), 'cond', False)
    # Processing the call keyword arguments (line 2461)
    kwargs_9950 = {}
    # Getting the type of 'ones_like' (line 2461)
    ones_like_9948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 16), 'ones_like', False)
    # Calling ones_like(args, kwargs) (line 2461)
    ones_like_call_result_9951 = invoke(stypy.reporting.localization.Localization(__file__, 2461, 16), ones_like_9948, *[cond_9949], **kwargs_9950)
    
    # Applying the binary operator '*' (line 2461)
    result_mul_9952 = python_operator(stypy.reporting.localization.Localization(__file__, 2461, 12), '*', y_9947, ones_like_call_result_9951)
    
    # Assigning a type to the variable 'y' (line 2461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2461, 8), 'y', result_mul_9952)
    
    # Assigning a Call to a Subscript (line 2463):
    
    # Assigning a Call to a Subscript (line 2463):
    
    # Call to within_tol(...): (line 2463)
    # Processing the call arguments (line 2463)
    
    # Obtaining the type of the subscript
    # Getting the type of 'finite' (line 2463)
    finite_9954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 36), 'finite', False)
    # Getting the type of 'x' (line 2463)
    x_9955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 34), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 2463)
    getitem___9956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2463, 34), x_9955, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2463)
    subscript_call_result_9957 = invoke(stypy.reporting.localization.Localization(__file__, 2463, 34), getitem___9956, finite_9954)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'finite' (line 2463)
    finite_9958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 47), 'finite', False)
    # Getting the type of 'y' (line 2463)
    y_9959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 45), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 2463)
    getitem___9960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2463, 45), y_9959, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2463)
    subscript_call_result_9961 = invoke(stypy.reporting.localization.Localization(__file__, 2463, 45), getitem___9960, finite_9958)
    
    # Getting the type of 'atol' (line 2463)
    atol_9962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 56), 'atol', False)
    # Getting the type of 'rtol' (line 2463)
    rtol_9963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 62), 'rtol', False)
    # Processing the call keyword arguments (line 2463)
    kwargs_9964 = {}
    # Getting the type of 'within_tol' (line 2463)
    within_tol_9953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 23), 'within_tol', False)
    # Calling within_tol(args, kwargs) (line 2463)
    within_tol_call_result_9965 = invoke(stypy.reporting.localization.Localization(__file__, 2463, 23), within_tol_9953, *[subscript_call_result_9957, subscript_call_result_9961, atol_9962, rtol_9963], **kwargs_9964)
    
    # Getting the type of 'cond' (line 2463)
    cond_9966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 8), 'cond')
    # Getting the type of 'finite' (line 2463)
    finite_9967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 13), 'finite')
    # Storing an element on a container (line 2463)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2463, 8), cond_9966, (finite_9967, within_tol_call_result_9965))
    
    # Assigning a Compare to a Subscript (line 2465):
    
    # Assigning a Compare to a Subscript (line 2465):
    
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'finite' (line 2465)
    finite_9968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 28), 'finite')
    # Applying the '~' unary operator (line 2465)
    result_inv_9969 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 27), '~', finite_9968)
    
    # Getting the type of 'x' (line 2465)
    x_9970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 25), 'x')
    # Obtaining the member '__getitem__' of a type (line 2465)
    getitem___9971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2465, 25), x_9970, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2465)
    subscript_call_result_9972 = invoke(stypy.reporting.localization.Localization(__file__, 2465, 25), getitem___9971, result_inv_9969)
    
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'finite' (line 2465)
    finite_9973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 42), 'finite')
    # Applying the '~' unary operator (line 2465)
    result_inv_9974 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 41), '~', finite_9973)
    
    # Getting the type of 'y' (line 2465)
    y_9975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 39), 'y')
    # Obtaining the member '__getitem__' of a type (line 2465)
    getitem___9976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2465, 39), y_9975, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2465)
    subscript_call_result_9977 = invoke(stypy.reporting.localization.Localization(__file__, 2465, 39), getitem___9976, result_inv_9974)
    
    # Applying the binary operator '==' (line 2465)
    result_eq_9978 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 25), '==', subscript_call_result_9972, subscript_call_result_9977)
    
    # Getting the type of 'cond' (line 2465)
    cond_9979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 8), 'cond')
    
    # Getting the type of 'finite' (line 2465)
    finite_9980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 14), 'finite')
    # Applying the '~' unary operator (line 2465)
    result_inv_9981 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 13), '~', finite_9980)
    
    # Storing an element on a container (line 2465)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2465, 8), cond_9979, (result_inv_9981, result_eq_9978))
    
    # Getting the type of 'equal_nan' (line 2466)
    equal_nan_9982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 11), 'equal_nan')
    # Testing the type of an if condition (line 2466)
    if_condition_9983 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2466, 8), equal_nan_9982)
    # Assigning a type to the variable 'if_condition_9983' (line 2466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2466, 8), 'if_condition_9983', if_condition_9983)
    # SSA begins for if statement (line 2466)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2468):
    
    # Assigning a BinOp to a Name (line 2468):
    
    # Call to isnan(...): (line 2468)
    # Processing the call arguments (line 2468)
    # Getting the type of 'x' (line 2468)
    x_9985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 29), 'x', False)
    # Processing the call keyword arguments (line 2468)
    kwargs_9986 = {}
    # Getting the type of 'isnan' (line 2468)
    isnan_9984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 23), 'isnan', False)
    # Calling isnan(args, kwargs) (line 2468)
    isnan_call_result_9987 = invoke(stypy.reporting.localization.Localization(__file__, 2468, 23), isnan_9984, *[x_9985], **kwargs_9986)
    
    
    # Call to isnan(...): (line 2468)
    # Processing the call arguments (line 2468)
    # Getting the type of 'y' (line 2468)
    y_9989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 40), 'y', False)
    # Processing the call keyword arguments (line 2468)
    kwargs_9990 = {}
    # Getting the type of 'isnan' (line 2468)
    isnan_9988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 34), 'isnan', False)
    # Calling isnan(args, kwargs) (line 2468)
    isnan_call_result_9991 = invoke(stypy.reporting.localization.Localization(__file__, 2468, 34), isnan_9988, *[y_9989], **kwargs_9990)
    
    # Applying the binary operator '&' (line 2468)
    result_and__9992 = python_operator(stypy.reporting.localization.Localization(__file__, 2468, 23), '&', isnan_call_result_9987, isnan_call_result_9991)
    
    # Assigning a type to the variable 'both_nan' (line 2468)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2468, 12), 'both_nan', result_and__9992)
    
    # Assigning a Subscript to a Subscript (line 2469):
    
    # Assigning a Subscript to a Subscript (line 2469):
    
    # Obtaining the type of the subscript
    # Getting the type of 'both_nan' (line 2469)
    both_nan_9993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 38), 'both_nan')
    # Getting the type of 'both_nan' (line 2469)
    both_nan_9994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 29), 'both_nan')
    # Obtaining the member '__getitem__' of a type (line 2469)
    getitem___9995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2469, 29), both_nan_9994, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2469)
    subscript_call_result_9996 = invoke(stypy.reporting.localization.Localization(__file__, 2469, 29), getitem___9995, both_nan_9993)
    
    # Getting the type of 'cond' (line 2469)
    cond_9997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 12), 'cond')
    # Getting the type of 'both_nan' (line 2469)
    both_nan_9998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 17), 'both_nan')
    # Storing an element on a container (line 2469)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2469, 12), cond_9997, (both_nan_9998, subscript_call_result_9996))
    # SSA join for if statement (line 2466)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 2471)
    # Processing the call arguments (line 2471)
    # Getting the type of 'a' (line 2471)
    a_10000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 20), 'a', False)
    # Processing the call keyword arguments (line 2471)
    kwargs_10001 = {}
    # Getting the type of 'isscalar' (line 2471)
    isscalar_9999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 2471)
    isscalar_call_result_10002 = invoke(stypy.reporting.localization.Localization(__file__, 2471, 11), isscalar_9999, *[a_10000], **kwargs_10001)
    
    
    # Call to isscalar(...): (line 2471)
    # Processing the call arguments (line 2471)
    # Getting the type of 'b' (line 2471)
    b_10004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 36), 'b', False)
    # Processing the call keyword arguments (line 2471)
    kwargs_10005 = {}
    # Getting the type of 'isscalar' (line 2471)
    isscalar_10003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 27), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 2471)
    isscalar_call_result_10006 = invoke(stypy.reporting.localization.Localization(__file__, 2471, 27), isscalar_10003, *[b_10004], **kwargs_10005)
    
    # Applying the binary operator 'and' (line 2471)
    result_and_keyword_10007 = python_operator(stypy.reporting.localization.Localization(__file__, 2471, 11), 'and', isscalar_call_result_10002, isscalar_call_result_10006)
    
    # Testing the type of an if condition (line 2471)
    if_condition_10008 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2471, 8), result_and_keyword_10007)
    # Assigning a type to the variable 'if_condition_10008' (line 2471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2471, 8), 'if_condition_10008', if_condition_10008)
    # SSA begins for if statement (line 2471)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to bool(...): (line 2472)
    # Processing the call arguments (line 2472)
    # Getting the type of 'cond' (line 2472)
    cond_10010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 24), 'cond', False)
    # Processing the call keyword arguments (line 2472)
    kwargs_10011 = {}
    # Getting the type of 'bool' (line 2472)
    bool_10009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 19), 'bool', False)
    # Calling bool(args, kwargs) (line 2472)
    bool_call_result_10012 = invoke(stypy.reporting.localization.Localization(__file__, 2472, 19), bool_10009, *[cond_10010], **kwargs_10011)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2472, 12), 'stypy_return_type', bool_call_result_10012)
    # SSA branch for the else part of an if statement (line 2471)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'cond' (line 2474)
    cond_10013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2474, 19), 'cond')
    # Assigning a type to the variable 'stypy_return_type' (line 2474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2474, 12), 'stypy_return_type', cond_10013)
    # SSA join for if statement (line 2471)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2452)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'isclose(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'isclose' in the type store
    # Getting the type of 'stypy_return_type' (line 2375)
    stypy_return_type_10014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_10014)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'isclose'
    return stypy_return_type_10014

# Assigning a type to the variable 'isclose' (line 2375)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2375, 0), 'isclose', isclose)

@norecursion
def array_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'array_equal'
    module_type_store = module_type_store.open_function_context('array_equal', 2476, 0, False)
    
    # Passed parameters checking function
    array_equal.stypy_localization = localization
    array_equal.stypy_type_of_self = None
    array_equal.stypy_type_store = module_type_store
    array_equal.stypy_function_name = 'array_equal'
    array_equal.stypy_param_names_list = ['a1', 'a2']
    array_equal.stypy_varargs_param_name = None
    array_equal.stypy_kwargs_param_name = None
    array_equal.stypy_call_defaults = defaults
    array_equal.stypy_call_varargs = varargs
    array_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'array_equal', ['a1', 'a2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'array_equal', localization, ['a1', 'a2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'array_equal(...)' code ##################

    str_10015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2508, (-1)), 'str', '\n    True if two arrays have the same shape and elements, False otherwise.\n\n    Parameters\n    ----------\n    a1, a2 : array_like\n        Input arrays.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equal.\n\n    See Also\n    --------\n    allclose: Returns True if two arrays are element-wise equal within a\n              tolerance.\n    array_equiv: Returns True if input arrays are shape consistent and all\n                 elements equal.\n\n    Examples\n    --------\n    >>> np.array_equal([1, 2], [1, 2])\n    True\n    >>> np.array_equal(np.array([1, 2]), np.array([1, 2]))\n    True\n    >>> np.array_equal([1, 2], [1, 2, 3])\n    False\n    >>> np.array_equal([1, 2], [1, 4])\n    False\n\n    ')
    
    
    # SSA begins for try-except statement (line 2509)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Tuple to a Tuple (line 2510):
    
    # Assigning a Call to a Name (line 2510):
    
    # Call to asarray(...): (line 2510)
    # Processing the call arguments (line 2510)
    # Getting the type of 'a1' (line 2510)
    a1_10017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 25), 'a1', False)
    # Processing the call keyword arguments (line 2510)
    kwargs_10018 = {}
    # Getting the type of 'asarray' (line 2510)
    asarray_10016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 17), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2510)
    asarray_call_result_10019 = invoke(stypy.reporting.localization.Localization(__file__, 2510, 17), asarray_10016, *[a1_10017], **kwargs_10018)
    
    # Assigning a type to the variable 'tuple_assignment_7442' (line 2510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2510, 8), 'tuple_assignment_7442', asarray_call_result_10019)
    
    # Assigning a Call to a Name (line 2510):
    
    # Call to asarray(...): (line 2510)
    # Processing the call arguments (line 2510)
    # Getting the type of 'a2' (line 2510)
    a2_10021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 38), 'a2', False)
    # Processing the call keyword arguments (line 2510)
    kwargs_10022 = {}
    # Getting the type of 'asarray' (line 2510)
    asarray_10020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 30), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2510)
    asarray_call_result_10023 = invoke(stypy.reporting.localization.Localization(__file__, 2510, 30), asarray_10020, *[a2_10021], **kwargs_10022)
    
    # Assigning a type to the variable 'tuple_assignment_7443' (line 2510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2510, 8), 'tuple_assignment_7443', asarray_call_result_10023)
    
    # Assigning a Name to a Name (line 2510):
    # Getting the type of 'tuple_assignment_7442' (line 2510)
    tuple_assignment_7442_10024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 8), 'tuple_assignment_7442')
    # Assigning a type to the variable 'a1' (line 2510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2510, 8), 'a1', tuple_assignment_7442_10024)
    
    # Assigning a Name to a Name (line 2510):
    # Getting the type of 'tuple_assignment_7443' (line 2510)
    tuple_assignment_7443_10025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 8), 'tuple_assignment_7443')
    # Assigning a type to the variable 'a2' (line 2510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2510, 12), 'a2', tuple_assignment_7443_10025)
    # SSA branch for the except part of a try statement (line 2509)
    # SSA branch for the except '<any exception>' branch of a try statement (line 2509)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 2512)
    False_10026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2512, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2512, 8), 'stypy_return_type', False_10026)
    # SSA join for try-except statement (line 2509)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'a1' (line 2513)
    a1_10027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2513, 7), 'a1')
    # Obtaining the member 'shape' of a type (line 2513)
    shape_10028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2513, 7), a1_10027, 'shape')
    # Getting the type of 'a2' (line 2513)
    a2_10029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2513, 19), 'a2')
    # Obtaining the member 'shape' of a type (line 2513)
    shape_10030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2513, 19), a2_10029, 'shape')
    # Applying the binary operator '!=' (line 2513)
    result_ne_10031 = python_operator(stypy.reporting.localization.Localization(__file__, 2513, 7), '!=', shape_10028, shape_10030)
    
    # Testing the type of an if condition (line 2513)
    if_condition_10032 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2513, 4), result_ne_10031)
    # Assigning a type to the variable 'if_condition_10032' (line 2513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2513, 4), 'if_condition_10032', if_condition_10032)
    # SSA begins for if statement (line 2513)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 2514)
    False_10033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2514, 8), 'stypy_return_type', False_10033)
    # SSA join for if statement (line 2513)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to bool(...): (line 2515)
    # Processing the call arguments (line 2515)
    
    # Call to all(...): (line 2515)
    # Processing the call keyword arguments (line 2515)
    kwargs_10042 = {}
    
    # Call to asarray(...): (line 2515)
    # Processing the call arguments (line 2515)
    
    # Getting the type of 'a1' (line 2515)
    a1_10036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 24), 'a1', False)
    # Getting the type of 'a2' (line 2515)
    a2_10037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 30), 'a2', False)
    # Applying the binary operator '==' (line 2515)
    result_eq_10038 = python_operator(stypy.reporting.localization.Localization(__file__, 2515, 24), '==', a1_10036, a2_10037)
    
    # Processing the call keyword arguments (line 2515)
    kwargs_10039 = {}
    # Getting the type of 'asarray' (line 2515)
    asarray_10035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 16), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2515)
    asarray_call_result_10040 = invoke(stypy.reporting.localization.Localization(__file__, 2515, 16), asarray_10035, *[result_eq_10038], **kwargs_10039)
    
    # Obtaining the member 'all' of a type (line 2515)
    all_10041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 16), asarray_call_result_10040, 'all')
    # Calling all(args, kwargs) (line 2515)
    all_call_result_10043 = invoke(stypy.reporting.localization.Localization(__file__, 2515, 16), all_10041, *[], **kwargs_10042)
    
    # Processing the call keyword arguments (line 2515)
    kwargs_10044 = {}
    # Getting the type of 'bool' (line 2515)
    bool_10034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 11), 'bool', False)
    # Calling bool(args, kwargs) (line 2515)
    bool_call_result_10045 = invoke(stypy.reporting.localization.Localization(__file__, 2515, 11), bool_10034, *[all_call_result_10043], **kwargs_10044)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2515, 4), 'stypy_return_type', bool_call_result_10045)
    
    # ################# End of 'array_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'array_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 2476)
    stypy_return_type_10046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_10046)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'array_equal'
    return stypy_return_type_10046

# Assigning a type to the variable 'array_equal' (line 2476)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2476, 0), 'array_equal', array_equal)

@norecursion
def array_equiv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'array_equiv'
    module_type_store = module_type_store.open_function_context('array_equiv', 2517, 0, False)
    
    # Passed parameters checking function
    array_equiv.stypy_localization = localization
    array_equiv.stypy_type_of_self = None
    array_equiv.stypy_type_store = module_type_store
    array_equiv.stypy_function_name = 'array_equiv'
    array_equiv.stypy_param_names_list = ['a1', 'a2']
    array_equiv.stypy_varargs_param_name = None
    array_equiv.stypy_kwargs_param_name = None
    array_equiv.stypy_call_defaults = defaults
    array_equiv.stypy_call_varargs = varargs
    array_equiv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'array_equiv', ['a1', 'a2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'array_equiv', localization, ['a1', 'a2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'array_equiv(...)' code ##################

    str_10047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2551, (-1)), 'str', '\n    Returns True if input arrays are shape consistent and all elements equal.\n\n    Shape consistent means they are either the same shape, or one input array\n    can be broadcasted to create the same shape as the other one.\n\n    Parameters\n    ----------\n    a1, a2 : array_like\n        Input arrays.\n\n    Returns\n    -------\n    out : bool\n        True if equivalent, False otherwise.\n\n    Examples\n    --------\n    >>> np.array_equiv([1, 2], [1, 2])\n    True\n    >>> np.array_equiv([1, 2], [1, 3])\n    False\n\n    Showing the shape equivalence:\n\n    >>> np.array_equiv([1, 2], [[1, 2], [1, 2]])\n    True\n    >>> np.array_equiv([1, 2], [[1, 2, 1, 2], [1, 2, 1, 2]])\n    False\n\n    >>> np.array_equiv([1, 2], [[1, 2], [1, 3]])\n    False\n\n    ')
    
    
    # SSA begins for try-except statement (line 2552)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Tuple to a Tuple (line 2553):
    
    # Assigning a Call to a Name (line 2553):
    
    # Call to asarray(...): (line 2553)
    # Processing the call arguments (line 2553)
    # Getting the type of 'a1' (line 2553)
    a1_10049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 25), 'a1', False)
    # Processing the call keyword arguments (line 2553)
    kwargs_10050 = {}
    # Getting the type of 'asarray' (line 2553)
    asarray_10048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 17), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2553)
    asarray_call_result_10051 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 17), asarray_10048, *[a1_10049], **kwargs_10050)
    
    # Assigning a type to the variable 'tuple_assignment_7444' (line 2553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 8), 'tuple_assignment_7444', asarray_call_result_10051)
    
    # Assigning a Call to a Name (line 2553):
    
    # Call to asarray(...): (line 2553)
    # Processing the call arguments (line 2553)
    # Getting the type of 'a2' (line 2553)
    a2_10053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 38), 'a2', False)
    # Processing the call keyword arguments (line 2553)
    kwargs_10054 = {}
    # Getting the type of 'asarray' (line 2553)
    asarray_10052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 30), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2553)
    asarray_call_result_10055 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 30), asarray_10052, *[a2_10053], **kwargs_10054)
    
    # Assigning a type to the variable 'tuple_assignment_7445' (line 2553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 8), 'tuple_assignment_7445', asarray_call_result_10055)
    
    # Assigning a Name to a Name (line 2553):
    # Getting the type of 'tuple_assignment_7444' (line 2553)
    tuple_assignment_7444_10056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 8), 'tuple_assignment_7444')
    # Assigning a type to the variable 'a1' (line 2553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 8), 'a1', tuple_assignment_7444_10056)
    
    # Assigning a Name to a Name (line 2553):
    # Getting the type of 'tuple_assignment_7445' (line 2553)
    tuple_assignment_7445_10057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 8), 'tuple_assignment_7445')
    # Assigning a type to the variable 'a2' (line 2553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 12), 'a2', tuple_assignment_7445_10057)
    # SSA branch for the except part of a try statement (line 2552)
    # SSA branch for the except '<any exception>' branch of a try statement (line 2552)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 2555)
    False_10058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2555, 8), 'stypy_return_type', False_10058)
    # SSA join for try-except statement (line 2552)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 2556)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to broadcast(...): (line 2557)
    # Processing the call arguments (line 2557)
    # Getting the type of 'a1' (line 2557)
    a1_10061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 29), 'a1', False)
    # Getting the type of 'a2' (line 2557)
    a2_10062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 33), 'a2', False)
    # Processing the call keyword arguments (line 2557)
    kwargs_10063 = {}
    # Getting the type of 'multiarray' (line 2557)
    multiarray_10059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 8), 'multiarray', False)
    # Obtaining the member 'broadcast' of a type (line 2557)
    broadcast_10060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2557, 8), multiarray_10059, 'broadcast')
    # Calling broadcast(args, kwargs) (line 2557)
    broadcast_call_result_10064 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 8), broadcast_10060, *[a1_10061, a2_10062], **kwargs_10063)
    
    # SSA branch for the except part of a try statement (line 2556)
    # SSA branch for the except '<any exception>' branch of a try statement (line 2556)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 2559)
    False_10065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 8), 'stypy_return_type', False_10065)
    # SSA join for try-except statement (line 2556)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to bool(...): (line 2561)
    # Processing the call arguments (line 2561)
    
    # Call to all(...): (line 2561)
    # Processing the call keyword arguments (line 2561)
    kwargs_10074 = {}
    
    # Call to asarray(...): (line 2561)
    # Processing the call arguments (line 2561)
    
    # Getting the type of 'a1' (line 2561)
    a1_10068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 24), 'a1', False)
    # Getting the type of 'a2' (line 2561)
    a2_10069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 30), 'a2', False)
    # Applying the binary operator '==' (line 2561)
    result_eq_10070 = python_operator(stypy.reporting.localization.Localization(__file__, 2561, 24), '==', a1_10068, a2_10069)
    
    # Processing the call keyword arguments (line 2561)
    kwargs_10071 = {}
    # Getting the type of 'asarray' (line 2561)
    asarray_10067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 16), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2561)
    asarray_call_result_10072 = invoke(stypy.reporting.localization.Localization(__file__, 2561, 16), asarray_10067, *[result_eq_10070], **kwargs_10071)
    
    # Obtaining the member 'all' of a type (line 2561)
    all_10073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2561, 16), asarray_call_result_10072, 'all')
    # Calling all(args, kwargs) (line 2561)
    all_call_result_10075 = invoke(stypy.reporting.localization.Localization(__file__, 2561, 16), all_10073, *[], **kwargs_10074)
    
    # Processing the call keyword arguments (line 2561)
    kwargs_10076 = {}
    # Getting the type of 'bool' (line 2561)
    bool_10066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 11), 'bool', False)
    # Calling bool(args, kwargs) (line 2561)
    bool_call_result_10077 = invoke(stypy.reporting.localization.Localization(__file__, 2561, 11), bool_10066, *[all_call_result_10075], **kwargs_10076)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2561, 4), 'stypy_return_type', bool_call_result_10077)
    
    # ################# End of 'array_equiv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'array_equiv' in the type store
    # Getting the type of 'stypy_return_type' (line 2517)
    stypy_return_type_10078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_10078)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'array_equiv'
    return stypy_return_type_10078

# Assigning a type to the variable 'array_equiv' (line 2517)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2517, 0), 'array_equiv', array_equiv)

# Assigning a Dict to a Name (line 2564):

# Assigning a Dict to a Name (line 2564):

# Obtaining an instance of the builtin type 'dict' (line 2564)
dict_10079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 11), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2564)
# Adding element type (key, value) (line 2564)
str_10080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 12), 'str', 'ignore')
# Getting the type of 'ERR_IGNORE' (line 2564)
ERR_IGNORE_10081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 21), 'ERR_IGNORE')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 11), dict_10079, (str_10080, ERR_IGNORE_10081))
# Adding element type (key, value) (line 2564)
str_10082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2565, 12), 'str', 'warn')
# Getting the type of 'ERR_WARN' (line 2565)
ERR_WARN_10083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2565, 19), 'ERR_WARN')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 11), dict_10079, (str_10082, ERR_WARN_10083))
# Adding element type (key, value) (line 2564)
str_10084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2566, 12), 'str', 'raise')
# Getting the type of 'ERR_RAISE' (line 2566)
ERR_RAISE_10085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 20), 'ERR_RAISE')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 11), dict_10079, (str_10084, ERR_RAISE_10085))
# Adding element type (key, value) (line 2564)
str_10086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2567, 12), 'str', 'call')
# Getting the type of 'ERR_CALL' (line 2567)
ERR_CALL_10087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 19), 'ERR_CALL')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 11), dict_10079, (str_10086, ERR_CALL_10087))
# Adding element type (key, value) (line 2564)
str_10088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2568, 12), 'str', 'print')
# Getting the type of 'ERR_PRINT' (line 2568)
ERR_PRINT_10089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 20), 'ERR_PRINT')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 11), dict_10079, (str_10088, ERR_PRINT_10089))
# Adding element type (key, value) (line 2564)
str_10090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2569, 12), 'str', 'log')
# Getting the type of 'ERR_LOG' (line 2569)
ERR_LOG_10091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2569, 18), 'ERR_LOG')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 11), dict_10079, (str_10090, ERR_LOG_10091))

# Assigning a type to the variable '_errdict' (line 2564)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2564, 0), '_errdict', dict_10079)

# Assigning a Dict to a Name (line 2571):

# Assigning a Dict to a Name (line 2571):

# Obtaining an instance of the builtin type 'dict' (line 2571)
dict_10092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, 15), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2571)

# Assigning a type to the variable '_errdict_rev' (line 2571)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 0), '_errdict_rev', dict_10092)


# Call to keys(...): (line 2572)
# Processing the call keyword arguments (line 2572)
kwargs_10095 = {}
# Getting the type of '_errdict' (line 2572)
_errdict_10093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 11), '_errdict', False)
# Obtaining the member 'keys' of a type (line 2572)
keys_10094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2572, 11), _errdict_10093, 'keys')
# Calling keys(args, kwargs) (line 2572)
keys_call_result_10096 = invoke(stypy.reporting.localization.Localization(__file__, 2572, 11), keys_10094, *[], **kwargs_10095)

# Testing the type of a for loop iterable (line 2572)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2572, 0), keys_call_result_10096)
# Getting the type of the for loop variable (line 2572)
for_loop_var_10097 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2572, 0), keys_call_result_10096)
# Assigning a type to the variable 'key' (line 2572)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2572, 0), 'key', for_loop_var_10097)
# SSA begins for a for statement (line 2572)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Assigning a Name to a Subscript (line 2573):

# Assigning a Name to a Subscript (line 2573):
# Getting the type of 'key' (line 2573)
key_10098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 34), 'key')
# Getting the type of '_errdict_rev' (line 2573)
_errdict_rev_10099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 4), '_errdict_rev')

# Obtaining the type of the subscript
# Getting the type of 'key' (line 2573)
key_10100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 26), 'key')
# Getting the type of '_errdict' (line 2573)
_errdict_10101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 17), '_errdict')
# Obtaining the member '__getitem__' of a type (line 2573)
getitem___10102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2573, 17), _errdict_10101, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 2573)
subscript_call_result_10103 = invoke(stypy.reporting.localization.Localization(__file__, 2573, 17), getitem___10102, key_10100)

# Storing an element on a container (line 2573)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2573, 4), _errdict_rev_10099, (subscript_call_result_10103, key_10098))
# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()

# Deleting a member
module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 2574, 0), module_type_store, 'key')

@norecursion
def seterr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2576)
    None_10104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 15), 'None')
    # Getting the type of 'None' (line 2576)
    None_10105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 28), 'None')
    # Getting the type of 'None' (line 2576)
    None_10106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 39), 'None')
    # Getting the type of 'None' (line 2576)
    None_10107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 51), 'None')
    # Getting the type of 'None' (line 2576)
    None_10108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 65), 'None')
    defaults = [None_10104, None_10105, None_10106, None_10107, None_10108]
    # Create a new context for function 'seterr'
    module_type_store = module_type_store.open_function_context('seterr', 2576, 0, False)
    
    # Passed parameters checking function
    seterr.stypy_localization = localization
    seterr.stypy_type_of_self = None
    seterr.stypy_type_store = module_type_store
    seterr.stypy_function_name = 'seterr'
    seterr.stypy_param_names_list = ['all', 'divide', 'over', 'under', 'invalid']
    seterr.stypy_varargs_param_name = None
    seterr.stypy_kwargs_param_name = None
    seterr.stypy_call_defaults = defaults
    seterr.stypy_call_varargs = varargs
    seterr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'seterr', ['all', 'divide', 'over', 'under', 'invalid'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'seterr', localization, ['all', 'divide', 'over', 'under', 'invalid'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'seterr(...)' code ##################

    str_10109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2652, (-1)), 'str', '\n    Set how floating-point errors are handled.\n\n    Note that operations on integer scalar types (such as `int16`) are\n    handled like floating point, and are affected by these settings.\n\n    Parameters\n    ----------\n    all : {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}, optional\n        Set treatment for all types of floating-point errors at once:\n\n        - ignore: Take no action when the exception occurs.\n        - warn: Print a `RuntimeWarning` (via the Python `warnings` module).\n        - raise: Raise a `FloatingPointError`.\n        - call: Call a function specified using the `seterrcall` function.\n        - print: Print a warning directly to ``stdout``.\n        - log: Record error in a Log object specified by `seterrcall`.\n\n        The default is not to change the current behavior.\n    divide : {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}, optional\n        Treatment for division by zero.\n    over : {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}, optional\n        Treatment for floating-point overflow.\n    under : {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}, optional\n        Treatment for floating-point underflow.\n    invalid : {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}, optional\n        Treatment for invalid floating-point operation.\n\n    Returns\n    -------\n    old_settings : dict\n        Dictionary containing the old settings.\n\n    See also\n    --------\n    seterrcall : Set a callback function for the \'call\' mode.\n    geterr, geterrcall, errstate\n\n    Notes\n    -----\n    The floating-point exceptions are defined in the IEEE 754 standard [1]:\n\n    - Division by zero: infinite result obtained from finite numbers.\n    - Overflow: result too large to be expressed.\n    - Underflow: result so close to zero that some precision\n      was lost.\n    - Invalid operation: result is not an expressible number, typically\n      indicates that a NaN was produced.\n\n    .. [1] http://en.wikipedia.org/wiki/IEEE_754\n\n    Examples\n    --------\n    >>> old_settings = np.seterr(all=\'ignore\')  #seterr to known value\n    >>> np.seterr(over=\'raise\')\n    {\'over\': \'ignore\', \'divide\': \'ignore\', \'invalid\': \'ignore\',\n     \'under\': \'ignore\'}\n    >>> np.seterr(**old_settings)  # reset to default\n    {\'over\': \'raise\', \'divide\': \'ignore\', \'invalid\': \'ignore\', \'under\': \'ignore\'}\n\n    >>> np.int16(32000) * np.int16(3)\n    30464\n    >>> old_settings = np.seterr(all=\'warn\', over=\'raise\')\n    >>> np.int16(32000) * np.int16(3)\n    Traceback (most recent call last):\n      File "<stdin>", line 1, in <module>\n    FloatingPointError: overflow encountered in short_scalars\n\n    >>> old_settings = np.seterr(all=\'print\')\n    >>> np.geterr()\n    {\'over\': \'print\', \'divide\': \'print\', \'invalid\': \'print\', \'under\': \'print\'}\n    >>> np.int16(32000) * np.int16(3)\n    Warning: overflow encountered in short_scalars\n    30464\n\n    ')
    
    # Assigning a Call to a Name (line 2654):
    
    # Assigning a Call to a Name (line 2654):
    
    # Call to geterrobj(...): (line 2654)
    # Processing the call keyword arguments (line 2654)
    kwargs_10112 = {}
    # Getting the type of 'umath' (line 2654)
    umath_10110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 13), 'umath', False)
    # Obtaining the member 'geterrobj' of a type (line 2654)
    geterrobj_10111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2654, 13), umath_10110, 'geterrobj')
    # Calling geterrobj(args, kwargs) (line 2654)
    geterrobj_call_result_10113 = invoke(stypy.reporting.localization.Localization(__file__, 2654, 13), geterrobj_10111, *[], **kwargs_10112)
    
    # Assigning a type to the variable 'pyvals' (line 2654)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2654, 4), 'pyvals', geterrobj_call_result_10113)
    
    # Assigning a Call to a Name (line 2655):
    
    # Assigning a Call to a Name (line 2655):
    
    # Call to geterr(...): (line 2655)
    # Processing the call keyword arguments (line 2655)
    kwargs_10115 = {}
    # Getting the type of 'geterr' (line 2655)
    geterr_10114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2655, 10), 'geterr', False)
    # Calling geterr(args, kwargs) (line 2655)
    geterr_call_result_10116 = invoke(stypy.reporting.localization.Localization(__file__, 2655, 10), geterr_10114, *[], **kwargs_10115)
    
    # Assigning a type to the variable 'old' (line 2655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2655, 4), 'old', geterr_call_result_10116)
    
    # Type idiom detected: calculating its left and rigth part (line 2657)
    # Getting the type of 'divide' (line 2657)
    divide_10117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 7), 'divide')
    # Getting the type of 'None' (line 2657)
    None_10118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 17), 'None')
    
    (may_be_10119, more_types_in_union_10120) = may_be_none(divide_10117, None_10118)

    if may_be_10119:

        if more_types_in_union_10120:
            # Runtime conditional SSA (line 2657)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BoolOp to a Name (line 2658):
        
        # Assigning a BoolOp to a Name (line 2658):
        
        # Evaluating a boolean operation
        # Getting the type of 'all' (line 2658)
        all_10121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 17), 'all')
        
        # Obtaining the type of the subscript
        str_10122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2658, 28), 'str', 'divide')
        # Getting the type of 'old' (line 2658)
        old_10123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 24), 'old')
        # Obtaining the member '__getitem__' of a type (line 2658)
        getitem___10124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 24), old_10123, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2658)
        subscript_call_result_10125 = invoke(stypy.reporting.localization.Localization(__file__, 2658, 24), getitem___10124, str_10122)
        
        # Applying the binary operator 'or' (line 2658)
        result_or_keyword_10126 = python_operator(stypy.reporting.localization.Localization(__file__, 2658, 17), 'or', all_10121, subscript_call_result_10125)
        
        # Assigning a type to the variable 'divide' (line 2658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2658, 8), 'divide', result_or_keyword_10126)

        if more_types_in_union_10120:
            # SSA join for if statement (line 2657)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2659)
    # Getting the type of 'over' (line 2659)
    over_10127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2659, 7), 'over')
    # Getting the type of 'None' (line 2659)
    None_10128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2659, 15), 'None')
    
    (may_be_10129, more_types_in_union_10130) = may_be_none(over_10127, None_10128)

    if may_be_10129:

        if more_types_in_union_10130:
            # Runtime conditional SSA (line 2659)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BoolOp to a Name (line 2660):
        
        # Assigning a BoolOp to a Name (line 2660):
        
        # Evaluating a boolean operation
        # Getting the type of 'all' (line 2660)
        all_10131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 15), 'all')
        
        # Obtaining the type of the subscript
        str_10132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 26), 'str', 'over')
        # Getting the type of 'old' (line 2660)
        old_10133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 22), 'old')
        # Obtaining the member '__getitem__' of a type (line 2660)
        getitem___10134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2660, 22), old_10133, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2660)
        subscript_call_result_10135 = invoke(stypy.reporting.localization.Localization(__file__, 2660, 22), getitem___10134, str_10132)
        
        # Applying the binary operator 'or' (line 2660)
        result_or_keyword_10136 = python_operator(stypy.reporting.localization.Localization(__file__, 2660, 15), 'or', all_10131, subscript_call_result_10135)
        
        # Assigning a type to the variable 'over' (line 2660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2660, 8), 'over', result_or_keyword_10136)

        if more_types_in_union_10130:
            # SSA join for if statement (line 2659)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2661)
    # Getting the type of 'under' (line 2661)
    under_10137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 7), 'under')
    # Getting the type of 'None' (line 2661)
    None_10138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 16), 'None')
    
    (may_be_10139, more_types_in_union_10140) = may_be_none(under_10137, None_10138)

    if may_be_10139:

        if more_types_in_union_10140:
            # Runtime conditional SSA (line 2661)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BoolOp to a Name (line 2662):
        
        # Assigning a BoolOp to a Name (line 2662):
        
        # Evaluating a boolean operation
        # Getting the type of 'all' (line 2662)
        all_10141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 16), 'all')
        
        # Obtaining the type of the subscript
        str_10142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2662, 27), 'str', 'under')
        # Getting the type of 'old' (line 2662)
        old_10143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 23), 'old')
        # Obtaining the member '__getitem__' of a type (line 2662)
        getitem___10144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2662, 23), old_10143, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2662)
        subscript_call_result_10145 = invoke(stypy.reporting.localization.Localization(__file__, 2662, 23), getitem___10144, str_10142)
        
        # Applying the binary operator 'or' (line 2662)
        result_or_keyword_10146 = python_operator(stypy.reporting.localization.Localization(__file__, 2662, 16), 'or', all_10141, subscript_call_result_10145)
        
        # Assigning a type to the variable 'under' (line 2662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2662, 8), 'under', result_or_keyword_10146)

        if more_types_in_union_10140:
            # SSA join for if statement (line 2661)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2663)
    # Getting the type of 'invalid' (line 2663)
    invalid_10147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 7), 'invalid')
    # Getting the type of 'None' (line 2663)
    None_10148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 18), 'None')
    
    (may_be_10149, more_types_in_union_10150) = may_be_none(invalid_10147, None_10148)

    if may_be_10149:

        if more_types_in_union_10150:
            # Runtime conditional SSA (line 2663)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BoolOp to a Name (line 2664):
        
        # Assigning a BoolOp to a Name (line 2664):
        
        # Evaluating a boolean operation
        # Getting the type of 'all' (line 2664)
        all_10151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 18), 'all')
        
        # Obtaining the type of the subscript
        str_10152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2664, 29), 'str', 'invalid')
        # Getting the type of 'old' (line 2664)
        old_10153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 25), 'old')
        # Obtaining the member '__getitem__' of a type (line 2664)
        getitem___10154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2664, 25), old_10153, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2664)
        subscript_call_result_10155 = invoke(stypy.reporting.localization.Localization(__file__, 2664, 25), getitem___10154, str_10152)
        
        # Applying the binary operator 'or' (line 2664)
        result_or_keyword_10156 = python_operator(stypy.reporting.localization.Localization(__file__, 2664, 18), 'or', all_10151, subscript_call_result_10155)
        
        # Assigning a type to the variable 'invalid' (line 2664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2664, 8), 'invalid', result_or_keyword_10156)

        if more_types_in_union_10150:
            # SSA join for if statement (line 2663)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 2666):
    
    # Assigning a BinOp to a Name (line 2666):
    
    # Obtaining the type of the subscript
    # Getting the type of 'divide' (line 2666)
    divide_10157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 27), 'divide')
    # Getting the type of '_errdict' (line 2666)
    _errdict_10158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 18), '_errdict')
    # Obtaining the member '__getitem__' of a type (line 2666)
    getitem___10159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2666, 18), _errdict_10158, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2666)
    subscript_call_result_10160 = invoke(stypy.reporting.localization.Localization(__file__, 2666, 18), getitem___10159, divide_10157)
    
    # Getting the type of 'SHIFT_DIVIDEBYZERO' (line 2666)
    SHIFT_DIVIDEBYZERO_10161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 38), 'SHIFT_DIVIDEBYZERO')
    # Applying the binary operator '<<' (line 2666)
    result_lshift_10162 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 18), '<<', subscript_call_result_10160, SHIFT_DIVIDEBYZERO_10161)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'over' (line 2667)
    over_10163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 27), 'over')
    # Getting the type of '_errdict' (line 2667)
    _errdict_10164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 18), '_errdict')
    # Obtaining the member '__getitem__' of a type (line 2667)
    getitem___10165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 18), _errdict_10164, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
    subscript_call_result_10166 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 18), getitem___10165, over_10163)
    
    # Getting the type of 'SHIFT_OVERFLOW' (line 2667)
    SHIFT_OVERFLOW_10167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 36), 'SHIFT_OVERFLOW')
    # Applying the binary operator '<<' (line 2667)
    result_lshift_10168 = python_operator(stypy.reporting.localization.Localization(__file__, 2667, 18), '<<', subscript_call_result_10166, SHIFT_OVERFLOW_10167)
    
    # Applying the binary operator '+' (line 2666)
    result_add_10169 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 17), '+', result_lshift_10162, result_lshift_10168)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'under' (line 2668)
    under_10170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2668, 27), 'under')
    # Getting the type of '_errdict' (line 2668)
    _errdict_10171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2668, 18), '_errdict')
    # Obtaining the member '__getitem__' of a type (line 2668)
    getitem___10172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2668, 18), _errdict_10171, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2668)
    subscript_call_result_10173 = invoke(stypy.reporting.localization.Localization(__file__, 2668, 18), getitem___10172, under_10170)
    
    # Getting the type of 'SHIFT_UNDERFLOW' (line 2668)
    SHIFT_UNDERFLOW_10174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2668, 37), 'SHIFT_UNDERFLOW')
    # Applying the binary operator '<<' (line 2668)
    result_lshift_10175 = python_operator(stypy.reporting.localization.Localization(__file__, 2668, 18), '<<', subscript_call_result_10173, SHIFT_UNDERFLOW_10174)
    
    # Applying the binary operator '+' (line 2667)
    result_add_10176 = python_operator(stypy.reporting.localization.Localization(__file__, 2667, 52), '+', result_add_10169, result_lshift_10175)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'invalid' (line 2669)
    invalid_10177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 27), 'invalid')
    # Getting the type of '_errdict' (line 2669)
    _errdict_10178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 18), '_errdict')
    # Obtaining the member '__getitem__' of a type (line 2669)
    getitem___10179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2669, 18), _errdict_10178, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2669)
    subscript_call_result_10180 = invoke(stypy.reporting.localization.Localization(__file__, 2669, 18), getitem___10179, invalid_10177)
    
    # Getting the type of 'SHIFT_INVALID' (line 2669)
    SHIFT_INVALID_10181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 39), 'SHIFT_INVALID')
    # Applying the binary operator '<<' (line 2669)
    result_lshift_10182 = python_operator(stypy.reporting.localization.Localization(__file__, 2669, 18), '<<', subscript_call_result_10180, SHIFT_INVALID_10181)
    
    # Applying the binary operator '+' (line 2668)
    result_add_10183 = python_operator(stypy.reporting.localization.Localization(__file__, 2668, 54), '+', result_add_10176, result_lshift_10182)
    
    # Assigning a type to the variable 'maskvalue' (line 2666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2666, 4), 'maskvalue', result_add_10183)
    
    # Assigning a Name to a Subscript (line 2671):
    
    # Assigning a Name to a Subscript (line 2671):
    # Getting the type of 'maskvalue' (line 2671)
    maskvalue_10184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 16), 'maskvalue')
    # Getting the type of 'pyvals' (line 2671)
    pyvals_10185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 4), 'pyvals')
    int_10186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2671, 11), 'int')
    # Storing an element on a container (line 2671)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2671, 4), pyvals_10185, (int_10186, maskvalue_10184))
    
    # Call to seterrobj(...): (line 2672)
    # Processing the call arguments (line 2672)
    # Getting the type of 'pyvals' (line 2672)
    pyvals_10189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2672, 20), 'pyvals', False)
    # Processing the call keyword arguments (line 2672)
    kwargs_10190 = {}
    # Getting the type of 'umath' (line 2672)
    umath_10187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2672, 4), 'umath', False)
    # Obtaining the member 'seterrobj' of a type (line 2672)
    seterrobj_10188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2672, 4), umath_10187, 'seterrobj')
    # Calling seterrobj(args, kwargs) (line 2672)
    seterrobj_call_result_10191 = invoke(stypy.reporting.localization.Localization(__file__, 2672, 4), seterrobj_10188, *[pyvals_10189], **kwargs_10190)
    
    # Getting the type of 'old' (line 2673)
    old_10192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 11), 'old')
    # Assigning a type to the variable 'stypy_return_type' (line 2673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2673, 4), 'stypy_return_type', old_10192)
    
    # ################# End of 'seterr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'seterr' in the type store
    # Getting the type of 'stypy_return_type' (line 2576)
    stypy_return_type_10193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_10193)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'seterr'
    return stypy_return_type_10193

# Assigning a type to the variable 'seterr' (line 2576)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2576, 0), 'seterr', seterr)

@norecursion
def geterr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'geterr'
    module_type_store = module_type_store.open_function_context('geterr', 2676, 0, False)
    
    # Passed parameters checking function
    geterr.stypy_localization = localization
    geterr.stypy_type_of_self = None
    geterr.stypy_type_store = module_type_store
    geterr.stypy_function_name = 'geterr'
    geterr.stypy_param_names_list = []
    geterr.stypy_varargs_param_name = None
    geterr.stypy_kwargs_param_name = None
    geterr.stypy_call_defaults = defaults
    geterr.stypy_call_varargs = varargs
    geterr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'geterr', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'geterr', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'geterr(...)' code ##################

    str_10194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2712, (-1)), 'str', '\n    Get the current way of handling floating-point errors.\n\n    Returns\n    -------\n    res : dict\n        A dictionary with keys "divide", "over", "under", and "invalid",\n        whose values are from the strings "ignore", "print", "log", "warn",\n        "raise", and "call". The keys represent possible floating-point\n        exceptions, and the values define how these exceptions are handled.\n\n    See Also\n    --------\n    geterrcall, seterr, seterrcall\n\n    Notes\n    -----\n    For complete documentation of the types of floating-point exceptions and\n    treatment options, see `seterr`.\n\n    Examples\n    --------\n    >>> np.geterr()\n    {\'over\': \'warn\', \'divide\': \'warn\', \'invalid\': \'warn\',\n    \'under\': \'ignore\'}\n    >>> np.arange(3.) / np.arange(3.)\n    array([ NaN,   1.,   1.])\n\n    >>> oldsettings = np.seterr(all=\'warn\', over=\'raise\')\n    >>> np.geterr()\n    {\'over\': \'raise\', \'divide\': \'warn\', \'invalid\': \'warn\', \'under\': \'warn\'}\n    >>> np.arange(3.) / np.arange(3.)\n    __main__:1: RuntimeWarning: invalid value encountered in divide\n    array([ NaN,   1.,   1.])\n\n    ')
    
    # Assigning a Subscript to a Name (line 2713):
    
    # Assigning a Subscript to a Name (line 2713):
    
    # Obtaining the type of the subscript
    int_10195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2713, 34), 'int')
    
    # Call to geterrobj(...): (line 2713)
    # Processing the call keyword arguments (line 2713)
    kwargs_10198 = {}
    # Getting the type of 'umath' (line 2713)
    umath_10196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2713, 16), 'umath', False)
    # Obtaining the member 'geterrobj' of a type (line 2713)
    geterrobj_10197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2713, 16), umath_10196, 'geterrobj')
    # Calling geterrobj(args, kwargs) (line 2713)
    geterrobj_call_result_10199 = invoke(stypy.reporting.localization.Localization(__file__, 2713, 16), geterrobj_10197, *[], **kwargs_10198)
    
    # Obtaining the member '__getitem__' of a type (line 2713)
    getitem___10200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2713, 16), geterrobj_call_result_10199, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2713)
    subscript_call_result_10201 = invoke(stypy.reporting.localization.Localization(__file__, 2713, 16), getitem___10200, int_10195)
    
    # Assigning a type to the variable 'maskvalue' (line 2713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2713, 4), 'maskvalue', subscript_call_result_10201)
    
    # Assigning a Num to a Name (line 2714):
    
    # Assigning a Num to a Name (line 2714):
    int_10202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2714, 11), 'int')
    # Assigning a type to the variable 'mask' (line 2714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2714, 4), 'mask', int_10202)
    
    # Assigning a Dict to a Name (line 2715):
    
    # Assigning a Dict to a Name (line 2715):
    
    # Obtaining an instance of the builtin type 'dict' (line 2715)
    dict_10203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2715, 10), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2715)
    
    # Assigning a type to the variable 'res' (line 2715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2715, 4), 'res', dict_10203)
    
    # Assigning a BinOp to a Name (line 2716):
    
    # Assigning a BinOp to a Name (line 2716):
    # Getting the type of 'maskvalue' (line 2716)
    maskvalue_10204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 11), 'maskvalue')
    # Getting the type of 'SHIFT_DIVIDEBYZERO' (line 2716)
    SHIFT_DIVIDEBYZERO_10205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 24), 'SHIFT_DIVIDEBYZERO')
    # Applying the binary operator '>>' (line 2716)
    result_rshift_10206 = python_operator(stypy.reporting.localization.Localization(__file__, 2716, 11), '>>', maskvalue_10204, SHIFT_DIVIDEBYZERO_10205)
    
    # Getting the type of 'mask' (line 2716)
    mask_10207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 46), 'mask')
    # Applying the binary operator '&' (line 2716)
    result_and__10208 = python_operator(stypy.reporting.localization.Localization(__file__, 2716, 10), '&', result_rshift_10206, mask_10207)
    
    # Assigning a type to the variable 'val' (line 2716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2716, 4), 'val', result_and__10208)
    
    # Assigning a Subscript to a Subscript (line 2717):
    
    # Assigning a Subscript to a Subscript (line 2717):
    
    # Obtaining the type of the subscript
    # Getting the type of 'val' (line 2717)
    val_10209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 33), 'val')
    # Getting the type of '_errdict_rev' (line 2717)
    _errdict_rev_10210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 20), '_errdict_rev')
    # Obtaining the member '__getitem__' of a type (line 2717)
    getitem___10211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2717, 20), _errdict_rev_10210, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2717)
    subscript_call_result_10212 = invoke(stypy.reporting.localization.Localization(__file__, 2717, 20), getitem___10211, val_10209)
    
    # Getting the type of 'res' (line 2717)
    res_10213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 4), 'res')
    str_10214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2717, 8), 'str', 'divide')
    # Storing an element on a container (line 2717)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2717, 4), res_10213, (str_10214, subscript_call_result_10212))
    
    # Assigning a BinOp to a Name (line 2718):
    
    # Assigning a BinOp to a Name (line 2718):
    # Getting the type of 'maskvalue' (line 2718)
    maskvalue_10215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 11), 'maskvalue')
    # Getting the type of 'SHIFT_OVERFLOW' (line 2718)
    SHIFT_OVERFLOW_10216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 24), 'SHIFT_OVERFLOW')
    # Applying the binary operator '>>' (line 2718)
    result_rshift_10217 = python_operator(stypy.reporting.localization.Localization(__file__, 2718, 11), '>>', maskvalue_10215, SHIFT_OVERFLOW_10216)
    
    # Getting the type of 'mask' (line 2718)
    mask_10218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 42), 'mask')
    # Applying the binary operator '&' (line 2718)
    result_and__10219 = python_operator(stypy.reporting.localization.Localization(__file__, 2718, 10), '&', result_rshift_10217, mask_10218)
    
    # Assigning a type to the variable 'val' (line 2718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2718, 4), 'val', result_and__10219)
    
    # Assigning a Subscript to a Subscript (line 2719):
    
    # Assigning a Subscript to a Subscript (line 2719):
    
    # Obtaining the type of the subscript
    # Getting the type of 'val' (line 2719)
    val_10220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 31), 'val')
    # Getting the type of '_errdict_rev' (line 2719)
    _errdict_rev_10221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 18), '_errdict_rev')
    # Obtaining the member '__getitem__' of a type (line 2719)
    getitem___10222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2719, 18), _errdict_rev_10221, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2719)
    subscript_call_result_10223 = invoke(stypy.reporting.localization.Localization(__file__, 2719, 18), getitem___10222, val_10220)
    
    # Getting the type of 'res' (line 2719)
    res_10224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 4), 'res')
    str_10225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2719, 8), 'str', 'over')
    # Storing an element on a container (line 2719)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2719, 4), res_10224, (str_10225, subscript_call_result_10223))
    
    # Assigning a BinOp to a Name (line 2720):
    
    # Assigning a BinOp to a Name (line 2720):
    # Getting the type of 'maskvalue' (line 2720)
    maskvalue_10226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 11), 'maskvalue')
    # Getting the type of 'SHIFT_UNDERFLOW' (line 2720)
    SHIFT_UNDERFLOW_10227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 24), 'SHIFT_UNDERFLOW')
    # Applying the binary operator '>>' (line 2720)
    result_rshift_10228 = python_operator(stypy.reporting.localization.Localization(__file__, 2720, 11), '>>', maskvalue_10226, SHIFT_UNDERFLOW_10227)
    
    # Getting the type of 'mask' (line 2720)
    mask_10229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 43), 'mask')
    # Applying the binary operator '&' (line 2720)
    result_and__10230 = python_operator(stypy.reporting.localization.Localization(__file__, 2720, 10), '&', result_rshift_10228, mask_10229)
    
    # Assigning a type to the variable 'val' (line 2720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2720, 4), 'val', result_and__10230)
    
    # Assigning a Subscript to a Subscript (line 2721):
    
    # Assigning a Subscript to a Subscript (line 2721):
    
    # Obtaining the type of the subscript
    # Getting the type of 'val' (line 2721)
    val_10231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2721, 32), 'val')
    # Getting the type of '_errdict_rev' (line 2721)
    _errdict_rev_10232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2721, 19), '_errdict_rev')
    # Obtaining the member '__getitem__' of a type (line 2721)
    getitem___10233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2721, 19), _errdict_rev_10232, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2721)
    subscript_call_result_10234 = invoke(stypy.reporting.localization.Localization(__file__, 2721, 19), getitem___10233, val_10231)
    
    # Getting the type of 'res' (line 2721)
    res_10235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2721, 4), 'res')
    str_10236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2721, 8), 'str', 'under')
    # Storing an element on a container (line 2721)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2721, 4), res_10235, (str_10236, subscript_call_result_10234))
    
    # Assigning a BinOp to a Name (line 2722):
    
    # Assigning a BinOp to a Name (line 2722):
    # Getting the type of 'maskvalue' (line 2722)
    maskvalue_10237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2722, 11), 'maskvalue')
    # Getting the type of 'SHIFT_INVALID' (line 2722)
    SHIFT_INVALID_10238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2722, 24), 'SHIFT_INVALID')
    # Applying the binary operator '>>' (line 2722)
    result_rshift_10239 = python_operator(stypy.reporting.localization.Localization(__file__, 2722, 11), '>>', maskvalue_10237, SHIFT_INVALID_10238)
    
    # Getting the type of 'mask' (line 2722)
    mask_10240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2722, 41), 'mask')
    # Applying the binary operator '&' (line 2722)
    result_and__10241 = python_operator(stypy.reporting.localization.Localization(__file__, 2722, 10), '&', result_rshift_10239, mask_10240)
    
    # Assigning a type to the variable 'val' (line 2722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2722, 4), 'val', result_and__10241)
    
    # Assigning a Subscript to a Subscript (line 2723):
    
    # Assigning a Subscript to a Subscript (line 2723):
    
    # Obtaining the type of the subscript
    # Getting the type of 'val' (line 2723)
    val_10242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 34), 'val')
    # Getting the type of '_errdict_rev' (line 2723)
    _errdict_rev_10243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 21), '_errdict_rev')
    # Obtaining the member '__getitem__' of a type (line 2723)
    getitem___10244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2723, 21), _errdict_rev_10243, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2723)
    subscript_call_result_10245 = invoke(stypy.reporting.localization.Localization(__file__, 2723, 21), getitem___10244, val_10242)
    
    # Getting the type of 'res' (line 2723)
    res_10246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 4), 'res')
    str_10247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2723, 8), 'str', 'invalid')
    # Storing an element on a container (line 2723)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2723, 4), res_10246, (str_10247, subscript_call_result_10245))
    # Getting the type of 'res' (line 2724)
    res_10248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 2724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2724, 4), 'stypy_return_type', res_10248)
    
    # ################# End of 'geterr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'geterr' in the type store
    # Getting the type of 'stypy_return_type' (line 2676)
    stypy_return_type_10249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2676, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_10249)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'geterr'
    return stypy_return_type_10249

# Assigning a type to the variable 'geterr' (line 2676)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2676, 0), 'geterr', geterr)

@norecursion
def setbufsize(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'setbufsize'
    module_type_store = module_type_store.open_function_context('setbufsize', 2726, 0, False)
    
    # Passed parameters checking function
    setbufsize.stypy_localization = localization
    setbufsize.stypy_type_of_self = None
    setbufsize.stypy_type_store = module_type_store
    setbufsize.stypy_function_name = 'setbufsize'
    setbufsize.stypy_param_names_list = ['size']
    setbufsize.stypy_varargs_param_name = None
    setbufsize.stypy_kwargs_param_name = None
    setbufsize.stypy_call_defaults = defaults
    setbufsize.stypy_call_varargs = varargs
    setbufsize.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'setbufsize', ['size'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'setbufsize', localization, ['size'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'setbufsize(...)' code ##################

    str_10250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2735, (-1)), 'str', '\n    Set the size of the buffer used in ufuncs.\n\n    Parameters\n    ----------\n    size : int\n        Size of buffer.\n\n    ')
    
    
    # Getting the type of 'size' (line 2736)
    size_10251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 7), 'size')
    float_10252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2736, 14), 'float')
    # Applying the binary operator '>' (line 2736)
    result_gt_10253 = python_operator(stypy.reporting.localization.Localization(__file__, 2736, 7), '>', size_10251, float_10252)
    
    # Testing the type of an if condition (line 2736)
    if_condition_10254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2736, 4), result_gt_10253)
    # Assigning a type to the variable 'if_condition_10254' (line 2736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2736, 4), 'if_condition_10254', if_condition_10254)
    # SSA begins for if statement (line 2736)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2737)
    # Processing the call arguments (line 2737)
    str_10256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2737, 25), 'str', 'Buffer size, %s, is too big.')
    # Getting the type of 'size' (line 2737)
    size_10257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 58), 'size', False)
    # Applying the binary operator '%' (line 2737)
    result_mod_10258 = python_operator(stypy.reporting.localization.Localization(__file__, 2737, 25), '%', str_10256, size_10257)
    
    # Processing the call keyword arguments (line 2737)
    kwargs_10259 = {}
    # Getting the type of 'ValueError' (line 2737)
    ValueError_10255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2737)
    ValueError_call_result_10260 = invoke(stypy.reporting.localization.Localization(__file__, 2737, 14), ValueError_10255, *[result_mod_10258], **kwargs_10259)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2737, 8), ValueError_call_result_10260, 'raise parameter', BaseException)
    # SSA join for if statement (line 2736)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'size' (line 2738)
    size_10261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 7), 'size')
    int_10262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2738, 14), 'int')
    # Applying the binary operator '<' (line 2738)
    result_lt_10263 = python_operator(stypy.reporting.localization.Localization(__file__, 2738, 7), '<', size_10261, int_10262)
    
    # Testing the type of an if condition (line 2738)
    if_condition_10264 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2738, 4), result_lt_10263)
    # Assigning a type to the variable 'if_condition_10264' (line 2738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2738, 4), 'if_condition_10264', if_condition_10264)
    # SSA begins for if statement (line 2738)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2739)
    # Processing the call arguments (line 2739)
    str_10266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2739, 25), 'str', 'Buffer size, %s, is too small.')
    # Getting the type of 'size' (line 2739)
    size_10267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 60), 'size', False)
    # Applying the binary operator '%' (line 2739)
    result_mod_10268 = python_operator(stypy.reporting.localization.Localization(__file__, 2739, 25), '%', str_10266, size_10267)
    
    # Processing the call keyword arguments (line 2739)
    kwargs_10269 = {}
    # Getting the type of 'ValueError' (line 2739)
    ValueError_10265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2739)
    ValueError_call_result_10270 = invoke(stypy.reporting.localization.Localization(__file__, 2739, 14), ValueError_10265, *[result_mod_10268], **kwargs_10269)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2739, 8), ValueError_call_result_10270, 'raise parameter', BaseException)
    # SSA join for if statement (line 2738)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'size' (line 2740)
    size_10271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 7), 'size')
    int_10272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2740, 14), 'int')
    # Applying the binary operator '%' (line 2740)
    result_mod_10273 = python_operator(stypy.reporting.localization.Localization(__file__, 2740, 7), '%', size_10271, int_10272)
    
    int_10274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2740, 20), 'int')
    # Applying the binary operator '!=' (line 2740)
    result_ne_10275 = python_operator(stypy.reporting.localization.Localization(__file__, 2740, 7), '!=', result_mod_10273, int_10274)
    
    # Testing the type of an if condition (line 2740)
    if_condition_10276 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2740, 4), result_ne_10275)
    # Assigning a type to the variable 'if_condition_10276' (line 2740)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2740, 4), 'if_condition_10276', if_condition_10276)
    # SSA begins for if statement (line 2740)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2741)
    # Processing the call arguments (line 2741)
    str_10278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2741, 25), 'str', 'Buffer size, %s, is not a multiple of 16.')
    # Getting the type of 'size' (line 2741)
    size_10279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 71), 'size', False)
    # Applying the binary operator '%' (line 2741)
    result_mod_10280 = python_operator(stypy.reporting.localization.Localization(__file__, 2741, 25), '%', str_10278, size_10279)
    
    # Processing the call keyword arguments (line 2741)
    kwargs_10281 = {}
    # Getting the type of 'ValueError' (line 2741)
    ValueError_10277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2741)
    ValueError_call_result_10282 = invoke(stypy.reporting.localization.Localization(__file__, 2741, 14), ValueError_10277, *[result_mod_10280], **kwargs_10281)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2741, 8), ValueError_call_result_10282, 'raise parameter', BaseException)
    # SSA join for if statement (line 2740)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2743):
    
    # Assigning a Call to a Name (line 2743):
    
    # Call to geterrobj(...): (line 2743)
    # Processing the call keyword arguments (line 2743)
    kwargs_10285 = {}
    # Getting the type of 'umath' (line 2743)
    umath_10283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 13), 'umath', False)
    # Obtaining the member 'geterrobj' of a type (line 2743)
    geterrobj_10284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2743, 13), umath_10283, 'geterrobj')
    # Calling geterrobj(args, kwargs) (line 2743)
    geterrobj_call_result_10286 = invoke(stypy.reporting.localization.Localization(__file__, 2743, 13), geterrobj_10284, *[], **kwargs_10285)
    
    # Assigning a type to the variable 'pyvals' (line 2743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2743, 4), 'pyvals', geterrobj_call_result_10286)
    
    # Assigning a Call to a Name (line 2744):
    
    # Assigning a Call to a Name (line 2744):
    
    # Call to getbufsize(...): (line 2744)
    # Processing the call keyword arguments (line 2744)
    kwargs_10288 = {}
    # Getting the type of 'getbufsize' (line 2744)
    getbufsize_10287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 10), 'getbufsize', False)
    # Calling getbufsize(args, kwargs) (line 2744)
    getbufsize_call_result_10289 = invoke(stypy.reporting.localization.Localization(__file__, 2744, 10), getbufsize_10287, *[], **kwargs_10288)
    
    # Assigning a type to the variable 'old' (line 2744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2744, 4), 'old', getbufsize_call_result_10289)
    
    # Assigning a Name to a Subscript (line 2745):
    
    # Assigning a Name to a Subscript (line 2745):
    # Getting the type of 'size' (line 2745)
    size_10290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 16), 'size')
    # Getting the type of 'pyvals' (line 2745)
    pyvals_10291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 4), 'pyvals')
    int_10292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2745, 11), 'int')
    # Storing an element on a container (line 2745)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2745, 4), pyvals_10291, (int_10292, size_10290))
    
    # Call to seterrobj(...): (line 2746)
    # Processing the call arguments (line 2746)
    # Getting the type of 'pyvals' (line 2746)
    pyvals_10295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 20), 'pyvals', False)
    # Processing the call keyword arguments (line 2746)
    kwargs_10296 = {}
    # Getting the type of 'umath' (line 2746)
    umath_10293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 4), 'umath', False)
    # Obtaining the member 'seterrobj' of a type (line 2746)
    seterrobj_10294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2746, 4), umath_10293, 'seterrobj')
    # Calling seterrobj(args, kwargs) (line 2746)
    seterrobj_call_result_10297 = invoke(stypy.reporting.localization.Localization(__file__, 2746, 4), seterrobj_10294, *[pyvals_10295], **kwargs_10296)
    
    # Getting the type of 'old' (line 2747)
    old_10298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 11), 'old')
    # Assigning a type to the variable 'stypy_return_type' (line 2747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2747, 4), 'stypy_return_type', old_10298)
    
    # ################# End of 'setbufsize(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'setbufsize' in the type store
    # Getting the type of 'stypy_return_type' (line 2726)
    stypy_return_type_10299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_10299)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'setbufsize'
    return stypy_return_type_10299

# Assigning a type to the variable 'setbufsize' (line 2726)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2726, 0), 'setbufsize', setbufsize)

@norecursion
def getbufsize(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'getbufsize'
    module_type_store = module_type_store.open_function_context('getbufsize', 2749, 0, False)
    
    # Passed parameters checking function
    getbufsize.stypy_localization = localization
    getbufsize.stypy_type_of_self = None
    getbufsize.stypy_type_store = module_type_store
    getbufsize.stypy_function_name = 'getbufsize'
    getbufsize.stypy_param_names_list = []
    getbufsize.stypy_varargs_param_name = None
    getbufsize.stypy_kwargs_param_name = None
    getbufsize.stypy_call_defaults = defaults
    getbufsize.stypy_call_varargs = varargs
    getbufsize.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'getbufsize', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'getbufsize', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'getbufsize(...)' code ##################

    str_10300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2758, (-1)), 'str', '\n    Return the size of the buffer used in ufuncs.\n\n    Returns\n    -------\n    getbufsize : int\n        Size of ufunc buffer in bytes.\n\n    ')
    
    # Obtaining the type of the subscript
    int_10301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2759, 29), 'int')
    
    # Call to geterrobj(...): (line 2759)
    # Processing the call keyword arguments (line 2759)
    kwargs_10304 = {}
    # Getting the type of 'umath' (line 2759)
    umath_10302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2759, 11), 'umath', False)
    # Obtaining the member 'geterrobj' of a type (line 2759)
    geterrobj_10303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2759, 11), umath_10302, 'geterrobj')
    # Calling geterrobj(args, kwargs) (line 2759)
    geterrobj_call_result_10305 = invoke(stypy.reporting.localization.Localization(__file__, 2759, 11), geterrobj_10303, *[], **kwargs_10304)
    
    # Obtaining the member '__getitem__' of a type (line 2759)
    getitem___10306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2759, 11), geterrobj_call_result_10305, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2759)
    subscript_call_result_10307 = invoke(stypy.reporting.localization.Localization(__file__, 2759, 11), getitem___10306, int_10301)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2759, 4), 'stypy_return_type', subscript_call_result_10307)
    
    # ################# End of 'getbufsize(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'getbufsize' in the type store
    # Getting the type of 'stypy_return_type' (line 2749)
    stypy_return_type_10308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_10308)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'getbufsize'
    return stypy_return_type_10308

# Assigning a type to the variable 'getbufsize' (line 2749)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 0), 'getbufsize', getbufsize)

@norecursion
def seterrcall(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'seterrcall'
    module_type_store = module_type_store.open_function_context('seterrcall', 2761, 0, False)
    
    # Passed parameters checking function
    seterrcall.stypy_localization = localization
    seterrcall.stypy_type_of_self = None
    seterrcall.stypy_type_store = module_type_store
    seterrcall.stypy_function_name = 'seterrcall'
    seterrcall.stypy_param_names_list = ['func']
    seterrcall.stypy_varargs_param_name = None
    seterrcall.stypy_kwargs_param_name = None
    seterrcall.stypy_call_defaults = defaults
    seterrcall.stypy_call_varargs = varargs
    seterrcall.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'seterrcall', ['func'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'seterrcall', localization, ['func'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'seterrcall(...)' code ##################

    str_10309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2842, (-1)), 'str', '\n    Set the floating-point error callback function or log object.\n\n    There are two ways to capture floating-point error messages.  The first\n    is to set the error-handler to \'call\', using `seterr`.  Then, set\n    the function to call using this function.\n\n    The second is to set the error-handler to \'log\', using `seterr`.\n    Floating-point errors then trigger a call to the \'write\' method of\n    the provided object.\n\n    Parameters\n    ----------\n    func : callable f(err, flag) or object with write method\n        Function to call upon floating-point errors (\'call\'-mode) or\n        object whose \'write\' method is used to log such message (\'log\'-mode).\n\n        The call function takes two arguments. The first is a string describing the\n        type of error (such as "divide by zero", "overflow", "underflow", or "invalid value"),\n        and the second is the status flag.  The flag is a byte, whose four\n        least-significant bits indicate the type of error, one of "divide", "over",\n        "under", "invalid"::\n\n          [0 0 0 0 divide over under invalid]\n\n        In other words, ``flags = divide + 2*over + 4*under + 8*invalid``.\n\n        If an object is provided, its write method should take one argument,\n        a string.\n\n    Returns\n    -------\n    h : callable, log instance or None\n        The old error handler.\n\n    See Also\n    --------\n    seterr, geterr, geterrcall\n\n    Examples\n    --------\n    Callback upon error:\n\n    >>> def err_handler(type, flag):\n    ...     print("Floating point error (%s), with flag %s" % (type, flag))\n    ...\n\n    >>> saved_handler = np.seterrcall(err_handler)\n    >>> save_err = np.seterr(all=\'call\')\n\n    >>> np.array([1, 2, 3]) / 0.0\n    Floating point error (divide by zero), with flag 1\n    array([ Inf,  Inf,  Inf])\n\n    >>> np.seterrcall(saved_handler)\n    <function err_handler at 0x...>\n    >>> np.seterr(**save_err)\n    {\'over\': \'call\', \'divide\': \'call\', \'invalid\': \'call\', \'under\': \'call\'}\n\n    Log error message:\n\n    >>> class Log(object):\n    ...     def write(self, msg):\n    ...         print("LOG: %s" % msg)\n    ...\n\n    >>> log = Log()\n    >>> saved_handler = np.seterrcall(log)\n    >>> save_err = np.seterr(all=\'log\')\n\n    >>> np.array([1, 2, 3]) / 0.0\n    LOG: Warning: divide by zero encountered in divide\n    <BLANKLINE>\n    array([ Inf,  Inf,  Inf])\n\n    >>> np.seterrcall(saved_handler)\n    <__main__.Log object at 0x...>\n    >>> np.seterr(**save_err)\n    {\'over\': \'log\', \'divide\': \'log\', \'invalid\': \'log\', \'under\': \'log\'}\n\n    ')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'func' (line 2843)
    func_10310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 7), 'func')
    # Getting the type of 'None' (line 2843)
    None_10311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 19), 'None')
    # Applying the binary operator 'isnot' (line 2843)
    result_is_not_10312 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 7), 'isnot', func_10310, None_10311)
    
    
    
    # Call to isinstance(...): (line 2843)
    # Processing the call arguments (line 2843)
    # Getting the type of 'func' (line 2843)
    func_10314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 43), 'func', False)
    # Getting the type of 'collections' (line 2843)
    collections_10315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 49), 'collections', False)
    # Obtaining the member 'Callable' of a type (line 2843)
    Callable_10316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2843, 49), collections_10315, 'Callable')
    # Processing the call keyword arguments (line 2843)
    kwargs_10317 = {}
    # Getting the type of 'isinstance' (line 2843)
    isinstance_10313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 32), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2843)
    isinstance_call_result_10318 = invoke(stypy.reporting.localization.Localization(__file__, 2843, 32), isinstance_10313, *[func_10314, Callable_10316], **kwargs_10317)
    
    # Applying the 'not' unary operator (line 2843)
    result_not__10319 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 28), 'not', isinstance_call_result_10318)
    
    # Applying the binary operator 'and' (line 2843)
    result_and_keyword_10320 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 7), 'and', result_is_not_10312, result_not__10319)
    
    # Testing the type of an if condition (line 2843)
    if_condition_10321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2843, 4), result_and_keyword_10320)
    # Assigning a type to the variable 'if_condition_10321' (line 2843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 4), 'if_condition_10321', if_condition_10321)
    # SSA begins for if statement (line 2843)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    
    # Call to hasattr(...): (line 2844)
    # Processing the call arguments (line 2844)
    # Getting the type of 'func' (line 2844)
    func_10323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 23), 'func', False)
    str_10324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2844, 29), 'str', 'write')
    # Processing the call keyword arguments (line 2844)
    kwargs_10325 = {}
    # Getting the type of 'hasattr' (line 2844)
    hasattr_10322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 15), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 2844)
    hasattr_call_result_10326 = invoke(stypy.reporting.localization.Localization(__file__, 2844, 15), hasattr_10322, *[func_10323, str_10324], **kwargs_10325)
    
    # Applying the 'not' unary operator (line 2844)
    result_not__10327 = python_operator(stypy.reporting.localization.Localization(__file__, 2844, 11), 'not', hasattr_call_result_10326)
    
    
    
    # Call to isinstance(...): (line 2844)
    # Processing the call arguments (line 2844)
    # Getting the type of 'func' (line 2844)
    func_10329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 56), 'func', False)
    # Obtaining the member 'write' of a type (line 2844)
    write_10330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2844, 56), func_10329, 'write')
    # Getting the type of 'collections' (line 2844)
    collections_10331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 68), 'collections', False)
    # Obtaining the member 'Callable' of a type (line 2844)
    Callable_10332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2844, 68), collections_10331, 'Callable')
    # Processing the call keyword arguments (line 2844)
    kwargs_10333 = {}
    # Getting the type of 'isinstance' (line 2844)
    isinstance_10328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 45), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2844)
    isinstance_call_result_10334 = invoke(stypy.reporting.localization.Localization(__file__, 2844, 45), isinstance_10328, *[write_10330, Callable_10332], **kwargs_10333)
    
    # Applying the 'not' unary operator (line 2844)
    result_not__10335 = python_operator(stypy.reporting.localization.Localization(__file__, 2844, 41), 'not', isinstance_call_result_10334)
    
    # Applying the binary operator 'or' (line 2844)
    result_or_keyword_10336 = python_operator(stypy.reporting.localization.Localization(__file__, 2844, 11), 'or', result_not__10327, result_not__10335)
    
    # Testing the type of an if condition (line 2844)
    if_condition_10337 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2844, 8), result_or_keyword_10336)
    # Assigning a type to the variable 'if_condition_10337' (line 2844)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2844, 8), 'if_condition_10337', if_condition_10337)
    # SSA begins for if statement (line 2844)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2845)
    # Processing the call arguments (line 2845)
    str_10339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2845, 29), 'str', 'Only callable can be used as callback')
    # Processing the call keyword arguments (line 2845)
    kwargs_10340 = {}
    # Getting the type of 'ValueError' (line 2845)
    ValueError_10338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2845)
    ValueError_call_result_10341 = invoke(stypy.reporting.localization.Localization(__file__, 2845, 18), ValueError_10338, *[str_10339], **kwargs_10340)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2845, 12), ValueError_call_result_10341, 'raise parameter', BaseException)
    # SSA join for if statement (line 2844)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2843)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2846):
    
    # Assigning a Call to a Name (line 2846):
    
    # Call to geterrobj(...): (line 2846)
    # Processing the call keyword arguments (line 2846)
    kwargs_10344 = {}
    # Getting the type of 'umath' (line 2846)
    umath_10342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 13), 'umath', False)
    # Obtaining the member 'geterrobj' of a type (line 2846)
    geterrobj_10343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2846, 13), umath_10342, 'geterrobj')
    # Calling geterrobj(args, kwargs) (line 2846)
    geterrobj_call_result_10345 = invoke(stypy.reporting.localization.Localization(__file__, 2846, 13), geterrobj_10343, *[], **kwargs_10344)
    
    # Assigning a type to the variable 'pyvals' (line 2846)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2846, 4), 'pyvals', geterrobj_call_result_10345)
    
    # Assigning a Call to a Name (line 2847):
    
    # Assigning a Call to a Name (line 2847):
    
    # Call to geterrcall(...): (line 2847)
    # Processing the call keyword arguments (line 2847)
    kwargs_10347 = {}
    # Getting the type of 'geterrcall' (line 2847)
    geterrcall_10346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 10), 'geterrcall', False)
    # Calling geterrcall(args, kwargs) (line 2847)
    geterrcall_call_result_10348 = invoke(stypy.reporting.localization.Localization(__file__, 2847, 10), geterrcall_10346, *[], **kwargs_10347)
    
    # Assigning a type to the variable 'old' (line 2847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2847, 4), 'old', geterrcall_call_result_10348)
    
    # Assigning a Name to a Subscript (line 2848):
    
    # Assigning a Name to a Subscript (line 2848):
    # Getting the type of 'func' (line 2848)
    func_10349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 16), 'func')
    # Getting the type of 'pyvals' (line 2848)
    pyvals_10350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 4), 'pyvals')
    int_10351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2848, 11), 'int')
    # Storing an element on a container (line 2848)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2848, 4), pyvals_10350, (int_10351, func_10349))
    
    # Call to seterrobj(...): (line 2849)
    # Processing the call arguments (line 2849)
    # Getting the type of 'pyvals' (line 2849)
    pyvals_10354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 20), 'pyvals', False)
    # Processing the call keyword arguments (line 2849)
    kwargs_10355 = {}
    # Getting the type of 'umath' (line 2849)
    umath_10352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 4), 'umath', False)
    # Obtaining the member 'seterrobj' of a type (line 2849)
    seterrobj_10353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2849, 4), umath_10352, 'seterrobj')
    # Calling seterrobj(args, kwargs) (line 2849)
    seterrobj_call_result_10356 = invoke(stypy.reporting.localization.Localization(__file__, 2849, 4), seterrobj_10353, *[pyvals_10354], **kwargs_10355)
    
    # Getting the type of 'old' (line 2850)
    old_10357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 11), 'old')
    # Assigning a type to the variable 'stypy_return_type' (line 2850)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2850, 4), 'stypy_return_type', old_10357)
    
    # ################# End of 'seterrcall(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'seterrcall' in the type store
    # Getting the type of 'stypy_return_type' (line 2761)
    stypy_return_type_10358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_10358)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'seterrcall'
    return stypy_return_type_10358

# Assigning a type to the variable 'seterrcall' (line 2761)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2761, 0), 'seterrcall', seterrcall)

@norecursion
def geterrcall(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'geterrcall'
    module_type_store = module_type_store.open_function_context('geterrcall', 2852, 0, False)
    
    # Passed parameters checking function
    geterrcall.stypy_localization = localization
    geterrcall.stypy_type_of_self = None
    geterrcall.stypy_type_store = module_type_store
    geterrcall.stypy_function_name = 'geterrcall'
    geterrcall.stypy_param_names_list = []
    geterrcall.stypy_varargs_param_name = None
    geterrcall.stypy_kwargs_param_name = None
    geterrcall.stypy_call_defaults = defaults
    geterrcall.stypy_call_varargs = varargs
    geterrcall.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'geterrcall', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'geterrcall', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'geterrcall(...)' code ##################

    str_10359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2893, (-1)), 'str', '\n    Return the current callback function used on floating-point errors.\n\n    When the error handling for a floating-point error (one of "divide",\n    "over", "under", or "invalid") is set to \'call\' or \'log\', the function\n    that is called or the log instance that is written to is returned by\n    `geterrcall`. This function or log instance has been set with\n    `seterrcall`.\n\n    Returns\n    -------\n    errobj : callable, log instance or None\n        The current error handler. If no handler was set through `seterrcall`,\n        ``None`` is returned.\n\n    See Also\n    --------\n    seterrcall, seterr, geterr\n\n    Notes\n    -----\n    For complete documentation of the types of floating-point exceptions and\n    treatment options, see `seterr`.\n\n    Examples\n    --------\n    >>> np.geterrcall()  # we did not yet set a handler, returns None\n\n    >>> oldsettings = np.seterr(all=\'call\')\n    >>> def err_handler(type, flag):\n    ...     print("Floating point error (%s), with flag %s" % (type, flag))\n    >>> oldhandler = np.seterrcall(err_handler)\n    >>> np.array([1, 2, 3]) / 0.0\n    Floating point error (divide by zero), with flag 1\n    array([ Inf,  Inf,  Inf])\n\n    >>> cur_handler = np.geterrcall()\n    >>> cur_handler is err_handler\n    True\n\n    ')
    
    # Obtaining the type of the subscript
    int_10360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2894, 29), 'int')
    
    # Call to geterrobj(...): (line 2894)
    # Processing the call keyword arguments (line 2894)
    kwargs_10363 = {}
    # Getting the type of 'umath' (line 2894)
    umath_10361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 11), 'umath', False)
    # Obtaining the member 'geterrobj' of a type (line 2894)
    geterrobj_10362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2894, 11), umath_10361, 'geterrobj')
    # Calling geterrobj(args, kwargs) (line 2894)
    geterrobj_call_result_10364 = invoke(stypy.reporting.localization.Localization(__file__, 2894, 11), geterrobj_10362, *[], **kwargs_10363)
    
    # Obtaining the member '__getitem__' of a type (line 2894)
    getitem___10365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2894, 11), geterrobj_call_result_10364, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2894)
    subscript_call_result_10366 = invoke(stypy.reporting.localization.Localization(__file__, 2894, 11), getitem___10365, int_10360)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2894, 4), 'stypy_return_type', subscript_call_result_10366)
    
    # ################# End of 'geterrcall(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'geterrcall' in the type store
    # Getting the type of 'stypy_return_type' (line 2852)
    stypy_return_type_10367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_10367)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'geterrcall'
    return stypy_return_type_10367

# Assigning a type to the variable 'geterrcall' (line 2852)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2852, 0), 'geterrcall', geterrcall)
# Declaration of the '_unspecified' class

class _unspecified(object, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2896, 0, False)
        # Assigning a type to the variable 'self' (line 2897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2897, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_unspecified.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_unspecified' (line 2896)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2896, 0), '_unspecified', _unspecified)

# Assigning a Call to a Name (line 2898):

# Assigning a Call to a Name (line 2898):

# Call to _unspecified(...): (line 2898)
# Processing the call keyword arguments (line 2898)
kwargs_10369 = {}
# Getting the type of '_unspecified' (line 2898)
_unspecified_10368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 15), '_unspecified', False)
# Calling _unspecified(args, kwargs) (line 2898)
_unspecified_call_result_10370 = invoke(stypy.reporting.localization.Localization(__file__, 2898, 15), _unspecified_10368, *[], **kwargs_10369)

# Assigning a type to the variable '_Unspecified' (line 2898)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2898, 0), '_Unspecified', _unspecified_call_result_10370)
# Declaration of the 'errstate' class

class errstate(object, ):
    str_10371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2959, (-1)), 'str', '\n    errstate(**kwargs)\n\n    Context manager for floating-point error handling.\n\n    Using an instance of `errstate` as a context manager allows statements in\n    that context to execute with a known error handling behavior. Upon entering\n    the context the error handling is set with `seterr` and `seterrcall`, and\n    upon exiting it is reset to what it was before.\n\n    Parameters\n    ----------\n    kwargs : {divide, over, under, invalid}\n        Keyword arguments. The valid keywords are the possible floating-point\n        exceptions. Each keyword should have a string value that defines the\n        treatment for the particular error. Possible values are\n        {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}.\n\n    See Also\n    --------\n    seterr, geterr, seterrcall, geterrcall\n\n    Notes\n    -----\n    The ``with`` statement was introduced in Python 2.5, and can only be used\n    there by importing it: ``from __future__ import with_statement``. In\n    earlier Python versions the ``with`` statement is not available.\n\n    For complete documentation of the types of floating-point exceptions and\n    treatment options, see `seterr`.\n\n    Examples\n    --------\n    >>> from __future__ import with_statement  # use \'with\' in Python 2.5\n    >>> olderr = np.seterr(all=\'ignore\')  # Set error handling to known state.\n\n    >>> np.arange(3) / 0.\n    array([ NaN,  Inf,  Inf])\n    >>> with np.errstate(divide=\'warn\'):\n    ...     np.arange(3) / 0.\n    ...\n    __main__:2: RuntimeWarning: divide by zero encountered in divide\n    array([ NaN,  Inf,  Inf])\n\n    >>> np.sqrt(-1)\n    nan\n    >>> with np.errstate(invalid=\'raise\'):\n    ...     np.sqrt(-1)\n    Traceback (most recent call last):\n      File "<stdin>", line 2, in <module>\n    FloatingPointError: invalid value encountered in sqrt\n\n    Outside the context the error handling behavior has not changed:\n\n    >>> np.geterr()\n    {\'over\': \'warn\', \'divide\': \'warn\', \'invalid\': \'warn\',\n    \'under\': \'ignore\'}\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2963, 4, False)
        # Assigning a type to the variable 'self' (line 2964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2964, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'errstate.__init__', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 2964):
        
        # Assigning a Call to a Attribute (line 2964):
        
        # Call to pop(...): (line 2964)
        # Processing the call arguments (line 2964)
        str_10374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2964, 31), 'str', 'call')
        # Getting the type of '_Unspecified' (line 2964)
        _Unspecified_10375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2964, 39), '_Unspecified', False)
        # Processing the call keyword arguments (line 2964)
        kwargs_10376 = {}
        # Getting the type of 'kwargs' (line 2964)
        kwargs_10372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2964, 20), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 2964)
        pop_10373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2964, 20), kwargs_10372, 'pop')
        # Calling pop(args, kwargs) (line 2964)
        pop_call_result_10377 = invoke(stypy.reporting.localization.Localization(__file__, 2964, 20), pop_10373, *[str_10374, _Unspecified_10375], **kwargs_10376)
        
        # Getting the type of 'self' (line 2964)
        self_10378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2964, 8), 'self')
        # Setting the type of the member 'call' of a type (line 2964)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2964, 8), self_10378, 'call', pop_call_result_10377)
        
        # Assigning a Name to a Attribute (line 2965):
        
        # Assigning a Name to a Attribute (line 2965):
        # Getting the type of 'kwargs' (line 2965)
        kwargs_10379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2965, 22), 'kwargs')
        # Getting the type of 'self' (line 2965)
        self_10380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2965, 8), 'self')
        # Setting the type of the member 'kwargs' of a type (line 2965)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2965, 8), self_10380, 'kwargs', kwargs_10379)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __enter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__enter__'
        module_type_store = module_type_store.open_function_context('__enter__', 2967, 4, False)
        # Assigning a type to the variable 'self' (line 2968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2968, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        errstate.__enter__.__dict__.__setitem__('stypy_localization', localization)
        errstate.__enter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        errstate.__enter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        errstate.__enter__.__dict__.__setitem__('stypy_function_name', 'errstate.__enter__')
        errstate.__enter__.__dict__.__setitem__('stypy_param_names_list', [])
        errstate.__enter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        errstate.__enter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        errstate.__enter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        errstate.__enter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        errstate.__enter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        errstate.__enter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'errstate.__enter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__enter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__enter__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 2968):
        
        # Assigning a Call to a Attribute (line 2968):
        
        # Call to seterr(...): (line 2968)
        # Processing the call keyword arguments (line 2968)
        # Getting the type of 'self' (line 2968)
        self_10382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 33), 'self', False)
        # Obtaining the member 'kwargs' of a type (line 2968)
        kwargs_10383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2968, 33), self_10382, 'kwargs')
        kwargs_10384 = {'kwargs_10383': kwargs_10383}
        # Getting the type of 'seterr' (line 2968)
        seterr_10381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 24), 'seterr', False)
        # Calling seterr(args, kwargs) (line 2968)
        seterr_call_result_10385 = invoke(stypy.reporting.localization.Localization(__file__, 2968, 24), seterr_10381, *[], **kwargs_10384)
        
        # Getting the type of 'self' (line 2968)
        self_10386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 8), 'self')
        # Setting the type of the member 'oldstate' of a type (line 2968)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2968, 8), self_10386, 'oldstate', seterr_call_result_10385)
        
        
        # Getting the type of 'self' (line 2969)
        self_10387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2969, 11), 'self')
        # Obtaining the member 'call' of a type (line 2969)
        call_10388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2969, 11), self_10387, 'call')
        # Getting the type of '_Unspecified' (line 2969)
        _Unspecified_10389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2969, 28), '_Unspecified')
        # Applying the binary operator 'isnot' (line 2969)
        result_is_not_10390 = python_operator(stypy.reporting.localization.Localization(__file__, 2969, 11), 'isnot', call_10388, _Unspecified_10389)
        
        # Testing the type of an if condition (line 2969)
        if_condition_10391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2969, 8), result_is_not_10390)
        # Assigning a type to the variable 'if_condition_10391' (line 2969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2969, 8), 'if_condition_10391', if_condition_10391)
        # SSA begins for if statement (line 2969)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2970):
        
        # Assigning a Call to a Attribute (line 2970):
        
        # Call to seterrcall(...): (line 2970)
        # Processing the call arguments (line 2970)
        # Getting the type of 'self' (line 2970)
        self_10393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2970, 38), 'self', False)
        # Obtaining the member 'call' of a type (line 2970)
        call_10394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2970, 38), self_10393, 'call')
        # Processing the call keyword arguments (line 2970)
        kwargs_10395 = {}
        # Getting the type of 'seterrcall' (line 2970)
        seterrcall_10392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2970, 27), 'seterrcall', False)
        # Calling seterrcall(args, kwargs) (line 2970)
        seterrcall_call_result_10396 = invoke(stypy.reporting.localization.Localization(__file__, 2970, 27), seterrcall_10392, *[call_10394], **kwargs_10395)
        
        # Getting the type of 'self' (line 2970)
        self_10397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2970, 12), 'self')
        # Setting the type of the member 'oldcall' of a type (line 2970)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2970, 12), self_10397, 'oldcall', seterrcall_call_result_10396)
        # SSA join for if statement (line 2969)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__enter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__enter__' in the type store
        # Getting the type of 'stypy_return_type' (line 2967)
        stypy_return_type_10398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10398)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__enter__'
        return stypy_return_type_10398


    @norecursion
    def __exit__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__exit__'
        module_type_store = module_type_store.open_function_context('__exit__', 2972, 4, False)
        # Assigning a type to the variable 'self' (line 2973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2973, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        errstate.__exit__.__dict__.__setitem__('stypy_localization', localization)
        errstate.__exit__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        errstate.__exit__.__dict__.__setitem__('stypy_type_store', module_type_store)
        errstate.__exit__.__dict__.__setitem__('stypy_function_name', 'errstate.__exit__')
        errstate.__exit__.__dict__.__setitem__('stypy_param_names_list', [])
        errstate.__exit__.__dict__.__setitem__('stypy_varargs_param_name', 'exc_info')
        errstate.__exit__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        errstate.__exit__.__dict__.__setitem__('stypy_call_defaults', defaults)
        errstate.__exit__.__dict__.__setitem__('stypy_call_varargs', varargs)
        errstate.__exit__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        errstate.__exit__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'errstate.__exit__', [], 'exc_info', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__exit__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__exit__(...)' code ##################

        
        # Call to seterr(...): (line 2973)
        # Processing the call keyword arguments (line 2973)
        # Getting the type of 'self' (line 2973)
        self_10400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 17), 'self', False)
        # Obtaining the member 'oldstate' of a type (line 2973)
        oldstate_10401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2973, 17), self_10400, 'oldstate')
        kwargs_10402 = {'oldstate_10401': oldstate_10401}
        # Getting the type of 'seterr' (line 2973)
        seterr_10399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 8), 'seterr', False)
        # Calling seterr(args, kwargs) (line 2973)
        seterr_call_result_10403 = invoke(stypy.reporting.localization.Localization(__file__, 2973, 8), seterr_10399, *[], **kwargs_10402)
        
        
        
        # Getting the type of 'self' (line 2974)
        self_10404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2974, 11), 'self')
        # Obtaining the member 'call' of a type (line 2974)
        call_10405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2974, 11), self_10404, 'call')
        # Getting the type of '_Unspecified' (line 2974)
        _Unspecified_10406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2974, 28), '_Unspecified')
        # Applying the binary operator 'isnot' (line 2974)
        result_is_not_10407 = python_operator(stypy.reporting.localization.Localization(__file__, 2974, 11), 'isnot', call_10405, _Unspecified_10406)
        
        # Testing the type of an if condition (line 2974)
        if_condition_10408 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2974, 8), result_is_not_10407)
        # Assigning a type to the variable 'if_condition_10408' (line 2974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2974, 8), 'if_condition_10408', if_condition_10408)
        # SSA begins for if statement (line 2974)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to seterrcall(...): (line 2975)
        # Processing the call arguments (line 2975)
        # Getting the type of 'self' (line 2975)
        self_10410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 23), 'self', False)
        # Obtaining the member 'oldcall' of a type (line 2975)
        oldcall_10411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2975, 23), self_10410, 'oldcall')
        # Processing the call keyword arguments (line 2975)
        kwargs_10412 = {}
        # Getting the type of 'seterrcall' (line 2975)
        seterrcall_10409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 12), 'seterrcall', False)
        # Calling seterrcall(args, kwargs) (line 2975)
        seterrcall_call_result_10413 = invoke(stypy.reporting.localization.Localization(__file__, 2975, 12), seterrcall_10409, *[oldcall_10411], **kwargs_10412)
        
        # SSA join for if statement (line 2974)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__exit__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__exit__' in the type store
        # Getting the type of 'stypy_return_type' (line 2972)
        stypy_return_type_10414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10414)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__exit__'
        return stypy_return_type_10414


# Assigning a type to the variable 'errstate' (line 2900)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2900, 0), 'errstate', errstate)

@norecursion
def _setdef(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_setdef'
    module_type_store = module_type_store.open_function_context('_setdef', 2978, 0, False)
    
    # Passed parameters checking function
    _setdef.stypy_localization = localization
    _setdef.stypy_type_of_self = None
    _setdef.stypy_type_store = module_type_store
    _setdef.stypy_function_name = '_setdef'
    _setdef.stypy_param_names_list = []
    _setdef.stypy_varargs_param_name = None
    _setdef.stypy_kwargs_param_name = None
    _setdef.stypy_call_defaults = defaults
    _setdef.stypy_call_varargs = varargs
    _setdef.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_setdef', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_setdef', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_setdef(...)' code ##################

    
    # Assigning a List to a Name (line 2979):
    
    # Assigning a List to a Name (line 2979):
    
    # Obtaining an instance of the builtin type 'list' (line 2979)
    list_10415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2979, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2979)
    # Adding element type (line 2979)
    # Getting the type of 'UFUNC_BUFSIZE_DEFAULT' (line 2979)
    UFUNC_BUFSIZE_DEFAULT_10416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 14), 'UFUNC_BUFSIZE_DEFAULT')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2979, 13), list_10415, UFUNC_BUFSIZE_DEFAULT_10416)
    # Adding element type (line 2979)
    # Getting the type of 'ERR_DEFAULT' (line 2979)
    ERR_DEFAULT_10417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 37), 'ERR_DEFAULT')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2979, 13), list_10415, ERR_DEFAULT_10417)
    # Adding element type (line 2979)
    # Getting the type of 'None' (line 2979)
    None_10418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 50), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2979, 13), list_10415, None_10418)
    
    # Assigning a type to the variable 'defval' (line 2979)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2979, 4), 'defval', list_10415)
    
    # Call to seterrobj(...): (line 2980)
    # Processing the call arguments (line 2980)
    # Getting the type of 'defval' (line 2980)
    defval_10421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 20), 'defval', False)
    # Processing the call keyword arguments (line 2980)
    kwargs_10422 = {}
    # Getting the type of 'umath' (line 2980)
    umath_10419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 4), 'umath', False)
    # Obtaining the member 'seterrobj' of a type (line 2980)
    seterrobj_10420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2980, 4), umath_10419, 'seterrobj')
    # Calling seterrobj(args, kwargs) (line 2980)
    seterrobj_call_result_10423 = invoke(stypy.reporting.localization.Localization(__file__, 2980, 4), seterrobj_10420, *[defval_10421], **kwargs_10422)
    
    
    # ################# End of '_setdef(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_setdef' in the type store
    # Getting the type of 'stypy_return_type' (line 2978)
    stypy_return_type_10424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_10424)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_setdef'
    return stypy_return_type_10424

# Assigning a type to the variable '_setdef' (line 2978)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2978, 0), '_setdef', _setdef)

# Call to _setdef(...): (line 2983)
# Processing the call keyword arguments (line 2983)
kwargs_10426 = {}
# Getting the type of '_setdef' (line 2983)
_setdef_10425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2983, 0), '_setdef', False)
# Calling _setdef(args, kwargs) (line 2983)
_setdef_call_result_10427 = invoke(stypy.reporting.localization.Localization(__file__, 2983, 0), _setdef_10425, *[], **kwargs_10426)


# Multiple assignment of 4 elements.

# Assigning a Name to a Name (line 2985):
# Getting the type of 'PINF' (line 2985)
PINF_10428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 31), 'PINF')
# Assigning a type to the variable 'Infinity' (line 2985)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2985, 20), 'Infinity', PINF_10428)

# Assigning a Name to a Name (line 2985):
# Getting the type of 'Infinity' (line 2985)
Infinity_10429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 20), 'Infinity')
# Assigning a type to the variable 'infty' (line 2985)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2985, 12), 'infty', Infinity_10429)

# Assigning a Name to a Name (line 2985):
# Getting the type of 'infty' (line 2985)
infty_10430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 12), 'infty')
# Assigning a type to the variable 'inf' (line 2985)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2985, 6), 'inf', infty_10430)

# Assigning a Name to a Name (line 2985):
# Getting the type of 'inf' (line 2985)
inf_10431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 6), 'inf')
# Assigning a type to the variable 'Inf' (line 2985)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2985, 0), 'Inf', inf_10431)

# Multiple assignment of 2 elements.

# Assigning a Name to a Name (line 2986):
# Getting the type of 'NAN' (line 2986)
NAN_10432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 12), 'NAN')
# Assigning a type to the variable 'NaN' (line 2986)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2986, 6), 'NaN', NAN_10432)

# Assigning a Name to a Name (line 2986):
# Getting the type of 'NaN' (line 2986)
NaN_10433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 6), 'NaN')
# Assigning a type to the variable 'nan' (line 2986)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2986, 0), 'nan', NaN_10433)

# Assigning a Call to a Name (line 2987):

# Assigning a Call to a Name (line 2987):

# Call to bool_(...): (line 2987)
# Processing the call arguments (line 2987)
# Getting the type of 'False' (line 2987)
False_10435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 15), 'False', False)
# Processing the call keyword arguments (line 2987)
kwargs_10436 = {}
# Getting the type of 'bool_' (line 2987)
bool__10434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 9), 'bool_', False)
# Calling bool_(args, kwargs) (line 2987)
bool__call_result_10437 = invoke(stypy.reporting.localization.Localization(__file__, 2987, 9), bool__10434, *[False_10435], **kwargs_10436)

# Assigning a type to the variable 'False_' (line 2987)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2987, 0), 'False_', bool__call_result_10437)

# Assigning a Call to a Name (line 2988):

# Assigning a Call to a Name (line 2988):

# Call to bool_(...): (line 2988)
# Processing the call arguments (line 2988)
# Getting the type of 'True' (line 2988)
True_10439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2988, 14), 'True', False)
# Processing the call keyword arguments (line 2988)
kwargs_10440 = {}
# Getting the type of 'bool_' (line 2988)
bool__10438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2988, 8), 'bool_', False)
# Calling bool_(args, kwargs) (line 2988)
bool__call_result_10441 = invoke(stypy.reporting.localization.Localization(__file__, 2988, 8), bool__10438, *[True_10439], **kwargs_10440)

# Assigning a type to the variable 'True_' (line 2988)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2988, 0), 'True_', bool__call_result_10441)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2990, 0))

# 'from numpy.core.umath import ' statement (line 2990)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_10442 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2990, 0), 'numpy.core.umath')

if (type(import_10442) is not StypyTypeError):

    if (import_10442 != 'pyd_module'):
        __import__(import_10442)
        sys_modules_10443 = sys.modules[import_10442]
        import_from_module(stypy.reporting.localization.Localization(__file__, 2990, 0), 'numpy.core.umath', sys_modules_10443.module_type_store, module_type_store, ['*'])
        nest_module(stypy.reporting.localization.Localization(__file__, 2990, 0), __file__, sys_modules_10443, sys_modules_10443.module_type_store, module_type_store)
    else:
        from numpy.core.umath import *

        import_from_module(stypy.reporting.localization.Localization(__file__, 2990, 0), 'numpy.core.umath', None, module_type_store, ['*'], None)

else:
    # Assigning a type to the variable 'numpy.core.umath' (line 2990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2990, 0), 'numpy.core.umath', import_10442)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2991, 0))

# 'from numpy.core.numerictypes import ' statement (line 2991)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_10444 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2991, 0), 'numpy.core.numerictypes')

if (type(import_10444) is not StypyTypeError):

    if (import_10444 != 'pyd_module'):
        __import__(import_10444)
        sys_modules_10445 = sys.modules[import_10444]
        import_from_module(stypy.reporting.localization.Localization(__file__, 2991, 0), 'numpy.core.numerictypes', sys_modules_10445.module_type_store, module_type_store, ['*'])
        nest_module(stypy.reporting.localization.Localization(__file__, 2991, 0), __file__, sys_modules_10445, sys_modules_10445.module_type_store, module_type_store)
    else:
        from numpy.core.numerictypes import *

        import_from_module(stypy.reporting.localization.Localization(__file__, 2991, 0), 'numpy.core.numerictypes', None, module_type_store, ['*'], None)

else:
    # Assigning a type to the variable 'numpy.core.numerictypes' (line 2991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2991, 0), 'numpy.core.numerictypes', import_10444)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2992, 0))

# 'from numpy.core import fromnumeric' statement (line 2992)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_10446 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2992, 0), 'numpy.core')

if (type(import_10446) is not StypyTypeError):

    if (import_10446 != 'pyd_module'):
        __import__(import_10446)
        sys_modules_10447 = sys.modules[import_10446]
        import_from_module(stypy.reporting.localization.Localization(__file__, 2992, 0), 'numpy.core', sys_modules_10447.module_type_store, module_type_store, ['fromnumeric'])
        nest_module(stypy.reporting.localization.Localization(__file__, 2992, 0), __file__, sys_modules_10447, sys_modules_10447.module_type_store, module_type_store)
    else:
        from numpy.core import fromnumeric

        import_from_module(stypy.reporting.localization.Localization(__file__, 2992, 0), 'numpy.core', None, module_type_store, ['fromnumeric'], [fromnumeric])

else:
    # Assigning a type to the variable 'numpy.core' (line 2992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2992, 0), 'numpy.core', import_10446)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2993, 0))

# 'from numpy.core.fromnumeric import ' statement (line 2993)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/core/')
import_10448 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2993, 0), 'numpy.core.fromnumeric')

if (type(import_10448) is not StypyTypeError):

    if (import_10448 != 'pyd_module'):
        __import__(import_10448)
        sys_modules_10449 = sys.modules[import_10448]
        import_from_module(stypy.reporting.localization.Localization(__file__, 2993, 0), 'numpy.core.fromnumeric', sys_modules_10449.module_type_store, module_type_store, ['*'])
        nest_module(stypy.reporting.localization.Localization(__file__, 2993, 0), __file__, sys_modules_10449, sys_modules_10449.module_type_store, module_type_store)
    else:
        from numpy.core.fromnumeric import *

        import_from_module(stypy.reporting.localization.Localization(__file__, 2993, 0), 'numpy.core.fromnumeric', None, module_type_store, ['*'], None)

else:
    # Assigning a type to the variable 'numpy.core.fromnumeric' (line 2993)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2993, 0), 'numpy.core.fromnumeric', import_10448)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/core/')


# Call to extend_all(...): (line 2994)
# Processing the call arguments (line 2994)
# Getting the type of 'fromnumeric' (line 2994)
fromnumeric_10451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2994, 11), 'fromnumeric', False)
# Processing the call keyword arguments (line 2994)
kwargs_10452 = {}
# Getting the type of 'extend_all' (line 2994)
extend_all_10450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2994, 0), 'extend_all', False)
# Calling extend_all(args, kwargs) (line 2994)
extend_all_call_result_10453 = invoke(stypy.reporting.localization.Localization(__file__, 2994, 0), extend_all_10450, *[fromnumeric_10451], **kwargs_10452)


# Call to extend_all(...): (line 2995)
# Processing the call arguments (line 2995)
# Getting the type of 'umath' (line 2995)
umath_10455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 11), 'umath', False)
# Processing the call keyword arguments (line 2995)
kwargs_10456 = {}
# Getting the type of 'extend_all' (line 2995)
extend_all_10454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 0), 'extend_all', False)
# Calling extend_all(args, kwargs) (line 2995)
extend_all_call_result_10457 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 0), extend_all_10454, *[umath_10455], **kwargs_10456)


# Call to extend_all(...): (line 2996)
# Processing the call arguments (line 2996)
# Getting the type of 'numerictypes' (line 2996)
numerictypes_10459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2996, 11), 'numerictypes', False)
# Processing the call keyword arguments (line 2996)
kwargs_10460 = {}
# Getting the type of 'extend_all' (line 2996)
extend_all_10458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2996, 0), 'extend_all', False)
# Calling extend_all(args, kwargs) (line 2996)
extend_all_call_result_10461 = invoke(stypy.reporting.localization.Localization(__file__, 2996, 0), extend_all_10458, *[numerictypes_10459], **kwargs_10460)


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
