
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: #!/usr/bin/python
2: '''
3: takes templated file .xxx.src and produces .xxx file  where .xxx is
4: .i or .c or .h, using the following template rules
5: 
6: /**begin repeat  -- on a line by itself marks the start of a repeated code
7:                     segment
8: /**end repeat**/ -- on a line by itself marks it's end
9: 
10: After the /**begin repeat and before the */, all the named templates are placed
11: these should all have the same number of replacements
12: 
13: Repeat blocks can be nested, with each nested block labeled with its depth,
14: i.e.
15: /**begin repeat1
16:  *....
17:  */
18: /**end repeat1**/
19: 
20: When using nested loops, you can optionally exlude particular
21: combinations of the variables using (inside the comment portion of the inner loop):
22: 
23:  :exclude: var1=value1, var2=value2, ...
24: 
25: This will exlude the pattern where var1 is value1 and var2 is value2 when
26: the result is being generated.
27: 
28: 
29: In the main body each replace will use one entry from the list of named replacements
30: 
31:  Note that all #..# forms in a block must have the same number of
32:    comma-separated entries.
33: 
34: Example:
35: 
36:     An input file containing
37: 
38:         /**begin repeat
39:          * #a = 1,2,3#
40:          * #b = 1,2,3#
41:          */
42: 
43:         /**begin repeat1
44:          * #c = ted, jim#
45:          */
46:         @a@, @b@, @c@
47:         /**end repeat1**/
48: 
49:         /**end repeat**/
50: 
51:     produces
52: 
53:         line 1 "template.c.src"
54: 
55:         /*
56:          *********************************************************************
57:          **       This file was autogenerated from a template  DO NOT EDIT!!**
58:          **       Changes should be made to the original source (.src) file **
59:          *********************************************************************
60:          */
61: 
62:         #line 9
63:         1, 1, ted
64: 
65:         #line 9
66:         1, 1, jim
67: 
68:         #line 9
69:         2, 2, ted
70: 
71:         #line 9
72:         2, 2, jim
73: 
74:         #line 9
75:         3, 3, ted
76: 
77:         #line 9
78:         3, 3, jim
79: 
80: '''
81: from __future__ import division, absolute_import, print_function
82: 
83: 
84: __all__ = ['process_str', 'process_file']
85: 
86: import os
87: import sys
88: import re
89: 
90: from numpy.distutils.compat import get_exception
91: 
92: # names for replacement that are already global.
93: global_names = {}
94: 
95: # header placed at the front of head processed file
96: header =\
97: '''
98: /*
99:  *****************************************************************************
100:  **       This file was autogenerated from a template  DO NOT EDIT!!!!      **
101:  **       Changes should be made to the original source (.src) file         **
102:  *****************************************************************************
103:  */
104: 
105: '''
106: # Parse string for repeat loops
107: def parse_structure(astr, level):
108:     '''
109:     The returned line number is from the beginning of the string, starting
110:     at zero. Returns an empty list if no loops found.
111: 
112:     '''
113:     if level == 0 :
114:         loopbeg = "/**begin repeat"
115:         loopend = "/**end repeat**/"
116:     else :
117:         loopbeg = "/**begin repeat%d" % level
118:         loopend = "/**end repeat%d**/" % level
119: 
120:     ind = 0
121:     line = 0
122:     spanlist = []
123:     while True:
124:         start = astr.find(loopbeg, ind)
125:         if start == -1:
126:             break
127:         start2 = astr.find("*/", start)
128:         start2 = astr.find("\n", start2)
129:         fini1 = astr.find(loopend, start2)
130:         fini2 = astr.find("\n", fini1)
131:         line += astr.count("\n", ind, start2+1)
132:         spanlist.append((start, start2+1, fini1, fini2+1, line))
133:         line += astr.count("\n", start2+1, fini2)
134:         ind = fini2
135:     spanlist.sort()
136:     return spanlist
137: 
138: 
139: def paren_repl(obj):
140:     torep = obj.group(1)
141:     numrep = obj.group(2)
142:     return ','.join([torep]*int(numrep))
143: 
144: parenrep = re.compile(r"[(]([^)]*)[)]\*(\d+)")
145: plainrep = re.compile(r"([^*]+)\*(\d+)")
146: def parse_values(astr):
147:     # replaces all occurrences of '(a,b,c)*4' in astr
148:     # with 'a,b,c,a,b,c,a,b,c,a,b,c'. Empty braces generate
149:     # empty values, i.e., ()*4 yields ',,,'. The result is
150:     # split at ',' and a list of values returned.
151:     astr = parenrep.sub(paren_repl, astr)
152:     # replaces occurences of xxx*3 with xxx, xxx, xxx
153:     astr = ','.join([plainrep.sub(paren_repl, x.strip())
154:                      for x in astr.split(',')])
155:     return astr.split(',')
156: 
157: 
158: stripast = re.compile(r"\n\s*\*?")
159: named_re = re.compile(r"#\s*(\w*)\s*=([^#]*)#")
160: exclude_vars_re = re.compile(r"(\w*)=(\w*)")
161: exclude_re = re.compile(":exclude:")
162: def parse_loop_header(loophead) :
163:     '''Find all named replacements in the header
164: 
165:     Returns a list of dictionaries, one for each loop iteration,
166:     where each key is a name to be substituted and the corresponding
167:     value is the replacement string.
168: 
169:     Also return a list of exclusions.  The exclusions are dictionaries
170:      of key value pairs. There can be more than one exclusion.
171:      [{'var1':'value1', 'var2', 'value2'[,...]}, ...]
172: 
173:     '''
174:     # Strip out '\n' and leading '*', if any, in continuation lines.
175:     # This should not effect code previous to this change as
176:     # continuation lines were not allowed.
177:     loophead = stripast.sub("", loophead)
178:     # parse out the names and lists of values
179:     names = []
180:     reps = named_re.findall(loophead)
181:     nsub = None
182:     for rep in reps:
183:         name = rep[0]
184:         vals = parse_values(rep[1])
185:         size = len(vals)
186:         if nsub is None :
187:             nsub = size
188:         elif nsub != size :
189:             msg = "Mismatch in number of values:\n%s = %s" % (name, vals)
190:             raise ValueError(msg)
191:         names.append((name, vals))
192: 
193: 
194:     # Find any exclude variables
195:     excludes = []
196: 
197:     for obj in exclude_re.finditer(loophead):
198:         span = obj.span()
199:         # find next newline
200:         endline = loophead.find('\n', span[1])
201:         substr = loophead[span[1]:endline]
202:         ex_names = exclude_vars_re.findall(substr)
203:         excludes.append(dict(ex_names))
204: 
205:     # generate list of dictionaries, one for each template iteration
206:     dlist = []
207:     if nsub is None :
208:         raise ValueError("No substitution variables found")
209:     for i in range(nsub) :
210:         tmp = {}
211:         for name, vals in names :
212:             tmp[name] = vals[i]
213:         dlist.append(tmp)
214:     return dlist
215: 
216: replace_re = re.compile(r"@([\w]+)@")
217: def parse_string(astr, env, level, line) :
218:     lineno = "#line %d\n" % line
219: 
220:     # local function for string replacement, uses env
221:     def replace(match):
222:         name = match.group(1)
223:         try :
224:             val = env[name]
225:         except KeyError:
226:             msg = 'line %d: no definition of key "%s"'%(line, name)
227:             raise ValueError(msg)
228:         return val
229: 
230:     code = [lineno]
231:     struct = parse_structure(astr, level)
232:     if struct :
233:         # recurse over inner loops
234:         oldend = 0
235:         newlevel = level + 1
236:         for sub in struct:
237:             pref = astr[oldend:sub[0]]
238:             head = astr[sub[0]:sub[1]]
239:             text = astr[sub[1]:sub[2]]
240:             oldend = sub[3]
241:             newline = line + sub[4]
242:             code.append(replace_re.sub(replace, pref))
243:             try :
244:                 envlist = parse_loop_header(head)
245:             except ValueError:
246:                 e = get_exception()
247:                 msg = "line %d: %s" % (newline, e)
248:                 raise ValueError(msg)
249:             for newenv in envlist :
250:                 newenv.update(env)
251:                 newcode = parse_string(text, newenv, newlevel, newline)
252:                 code.extend(newcode)
253:         suff = astr[oldend:]
254:         code.append(replace_re.sub(replace, suff))
255:     else :
256:         # replace keys
257:         code.append(replace_re.sub(replace, astr))
258:     code.append('\n')
259:     return ''.join(code)
260: 
261: def process_str(astr):
262:     code = [header]
263:     code.extend(parse_string(astr, global_names, 0, 1))
264:     return ''.join(code)
265: 
266: 
267: include_src_re = re.compile(r"(\n|\A)#include\s*['\"]"
268:                             r"(?P<name>[\w\d./\\]+[.]src)['\"]", re.I)
269: 
270: def resolve_includes(source):
271:     d = os.path.dirname(source)
272:     fid = open(source)
273:     lines = []
274:     for line in fid:
275:         m = include_src_re.match(line)
276:         if m:
277:             fn = m.group('name')
278:             if not os.path.isabs(fn):
279:                 fn = os.path.join(d, fn)
280:             if os.path.isfile(fn):
281:                 print('Including file', fn)
282:                 lines.extend(resolve_includes(fn))
283:             else:
284:                 lines.append(line)
285:         else:
286:             lines.append(line)
287:     fid.close()
288:     return lines
289: 
290: def process_file(source):
291:     lines = resolve_includes(source)
292:     sourcefile = os.path.normcase(source).replace("\\", "\\\\")
293:     try:
294:         code = process_str(''.join(lines))
295:     except ValueError:
296:         e = get_exception()
297:         raise ValueError('In "%s" loop at %s' % (sourcefile, e))
298:     return '#line 1 "%s"\n%s' % (sourcefile, code)
299: 
300: 
301: def unique_key(adict):
302:     # this obtains a unique key given a dictionary
303:     # currently it works by appending together n of the letters of the
304:     #   current keys and increasing n until a unique key is found
305:     # -- not particularly quick
306:     allkeys = list(adict.keys())
307:     done = False
308:     n = 1
309:     while not done:
310:         newkey = "".join([x[:n] for x in allkeys])
311:         if newkey in allkeys:
312:             n += 1
313:         else:
314:             done = True
315:     return newkey
316: 
317: 
318: if __name__ == "__main__":
319: 
320:     try:
321:         file = sys.argv[1]
322:     except IndexError:
323:         fid = sys.stdin
324:         outfile = sys.stdout
325:     else:
326:         fid = open(file, 'r')
327:         (base, ext) = os.path.splitext(file)
328:         newname = base
329:         outfile = open(newname, 'w')
330: 
331:     allstr = fid.read()
332:     try:
333:         writestr = process_str(allstr)
334:     except ValueError:
335:         e = get_exception()
336:         raise ValueError("In %s loop at %s" % (file, e))
337:     outfile.write(writestr)
338: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_28146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, (-1)), 'str', '\ntakes templated file .xxx.src and produces .xxx file  where .xxx is\n.i or .c or .h, using the following template rules\n\n/**begin repeat  -- on a line by itself marks the start of a repeated code\n                    segment\n/**end repeat**/ -- on a line by itself marks it\'s end\n\nAfter the /**begin repeat and before the */, all the named templates are placed\nthese should all have the same number of replacements\n\nRepeat blocks can be nested, with each nested block labeled with its depth,\ni.e.\n/**begin repeat1\n *....\n */\n/**end repeat1**/\n\nWhen using nested loops, you can optionally exlude particular\ncombinations of the variables using (inside the comment portion of the inner loop):\n\n :exclude: var1=value1, var2=value2, ...\n\nThis will exlude the pattern where var1 is value1 and var2 is value2 when\nthe result is being generated.\n\n\nIn the main body each replace will use one entry from the list of named replacements\n\n Note that all #..# forms in a block must have the same number of\n   comma-separated entries.\n\nExample:\n\n    An input file containing\n\n        /**begin repeat\n         * #a = 1,2,3#\n         * #b = 1,2,3#\n         */\n\n        /**begin repeat1\n         * #c = ted, jim#\n         */\n        @a@, @b@, @c@\n        /**end repeat1**/\n\n        /**end repeat**/\n\n    produces\n\n        line 1 "template.c.src"\n\n        /*\n         *********************************************************************\n         **       This file was autogenerated from a template  DO NOT EDIT!!**\n         **       Changes should be made to the original source (.src) file **\n         *********************************************************************\n         */\n\n        #line 9\n        1, 1, ted\n\n        #line 9\n        1, 1, jim\n\n        #line 9\n        2, 2, ted\n\n        #line 9\n        2, 2, jim\n\n        #line 9\n        3, 3, ted\n\n        #line 9\n        3, 3, jim\n\n')

# Assigning a List to a Name (line 84):

# Assigning a List to a Name (line 84):
__all__ = ['process_str', 'process_file']
module_type_store.set_exportable_members(['process_str', 'process_file'])

# Obtaining an instance of the builtin type 'list' (line 84)
list_28147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 84)
# Adding element type (line 84)
str_28148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 11), 'str', 'process_str')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 10), list_28147, str_28148)
# Adding element type (line 84)
str_28149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 26), 'str', 'process_file')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 10), list_28147, str_28149)

# Assigning a type to the variable '__all__' (line 84)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 0), '__all__', list_28147)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 86, 0))

# 'import os' statement (line 86)
import os

import_module(stypy.reporting.localization.Localization(__file__, 86, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 87, 0))

# 'import sys' statement (line 87)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 87, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 88, 0))

# 'import re' statement (line 88)
import re

import_module(stypy.reporting.localization.Localization(__file__, 88, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 90, 0))

# 'from numpy.distutils.compat import get_exception' statement (line 90)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_28150 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 90, 0), 'numpy.distutils.compat')

if (type(import_28150) is not StypyTypeError):

    if (import_28150 != 'pyd_module'):
        __import__(import_28150)
        sys_modules_28151 = sys.modules[import_28150]
        import_from_module(stypy.reporting.localization.Localization(__file__, 90, 0), 'numpy.distutils.compat', sys_modules_28151.module_type_store, module_type_store, ['get_exception'])
        nest_module(stypy.reporting.localization.Localization(__file__, 90, 0), __file__, sys_modules_28151, sys_modules_28151.module_type_store, module_type_store)
    else:
        from numpy.distutils.compat import get_exception

        import_from_module(stypy.reporting.localization.Localization(__file__, 90, 0), 'numpy.distutils.compat', None, module_type_store, ['get_exception'], [get_exception])

else:
    # Assigning a type to the variable 'numpy.distutils.compat' (line 90)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 0), 'numpy.distutils.compat', import_28150)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')


# Assigning a Dict to a Name (line 93):

# Assigning a Dict to a Name (line 93):

# Obtaining an instance of the builtin type 'dict' (line 93)
dict_28152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 15), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 93)

# Assigning a type to the variable 'global_names' (line 93)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 0), 'global_names', dict_28152)

# Assigning a Str to a Name (line 96):

# Assigning a Str to a Name (line 96):
str_28153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, (-1)), 'str', '\n/*\n *****************************************************************************\n **       This file was autogenerated from a template  DO NOT EDIT!!!!      **\n **       Changes should be made to the original source (.src) file         **\n *****************************************************************************\n */\n\n')
# Assigning a type to the variable 'header' (line 96)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 0), 'header', str_28153)

@norecursion
def parse_structure(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'parse_structure'
    module_type_store = module_type_store.open_function_context('parse_structure', 107, 0, False)
    
    # Passed parameters checking function
    parse_structure.stypy_localization = localization
    parse_structure.stypy_type_of_self = None
    parse_structure.stypy_type_store = module_type_store
    parse_structure.stypy_function_name = 'parse_structure'
    parse_structure.stypy_param_names_list = ['astr', 'level']
    parse_structure.stypy_varargs_param_name = None
    parse_structure.stypy_kwargs_param_name = None
    parse_structure.stypy_call_defaults = defaults
    parse_structure.stypy_call_varargs = varargs
    parse_structure.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'parse_structure', ['astr', 'level'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'parse_structure', localization, ['astr', 'level'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'parse_structure(...)' code ##################

    str_28154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, (-1)), 'str', '\n    The returned line number is from the beginning of the string, starting\n    at zero. Returns an empty list if no loops found.\n\n    ')
    
    
    # Getting the type of 'level' (line 113)
    level_28155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 7), 'level')
    int_28156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 16), 'int')
    # Applying the binary operator '==' (line 113)
    result_eq_28157 = python_operator(stypy.reporting.localization.Localization(__file__, 113, 7), '==', level_28155, int_28156)
    
    # Testing the type of an if condition (line 113)
    if_condition_28158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 113, 4), result_eq_28157)
    # Assigning a type to the variable 'if_condition_28158' (line 113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 4), 'if_condition_28158', if_condition_28158)
    # SSA begins for if statement (line 113)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 114):
    
    # Assigning a Str to a Name (line 114):
    str_28159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 18), 'str', '/**begin repeat')
    # Assigning a type to the variable 'loopbeg' (line 114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 8), 'loopbeg', str_28159)
    
    # Assigning a Str to a Name (line 115):
    
    # Assigning a Str to a Name (line 115):
    str_28160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 18), 'str', '/**end repeat**/')
    # Assigning a type to the variable 'loopend' (line 115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 115, 8), 'loopend', str_28160)
    # SSA branch for the else part of an if statement (line 113)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 117):
    
    # Assigning a BinOp to a Name (line 117):
    str_28161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 18), 'str', '/**begin repeat%d')
    # Getting the type of 'level' (line 117)
    level_28162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 40), 'level')
    # Applying the binary operator '%' (line 117)
    result_mod_28163 = python_operator(stypy.reporting.localization.Localization(__file__, 117, 18), '%', str_28161, level_28162)
    
    # Assigning a type to the variable 'loopbeg' (line 117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 8), 'loopbeg', result_mod_28163)
    
    # Assigning a BinOp to a Name (line 118):
    
    # Assigning a BinOp to a Name (line 118):
    str_28164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 18), 'str', '/**end repeat%d**/')
    # Getting the type of 'level' (line 118)
    level_28165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 41), 'level')
    # Applying the binary operator '%' (line 118)
    result_mod_28166 = python_operator(stypy.reporting.localization.Localization(__file__, 118, 18), '%', str_28164, level_28165)
    
    # Assigning a type to the variable 'loopend' (line 118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 118, 8), 'loopend', result_mod_28166)
    # SSA join for if statement (line 113)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 120):
    
    # Assigning a Num to a Name (line 120):
    int_28167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, 10), 'int')
    # Assigning a type to the variable 'ind' (line 120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 4), 'ind', int_28167)
    
    # Assigning a Num to a Name (line 121):
    
    # Assigning a Num to a Name (line 121):
    int_28168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 11), 'int')
    # Assigning a type to the variable 'line' (line 121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), 'line', int_28168)
    
    # Assigning a List to a Name (line 122):
    
    # Assigning a List to a Name (line 122):
    
    # Obtaining an instance of the builtin type 'list' (line 122)
    list_28169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 122)
    
    # Assigning a type to the variable 'spanlist' (line 122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 4), 'spanlist', list_28169)
    
    # Getting the type of 'True' (line 123)
    True_28170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 10), 'True')
    # Testing the type of an if condition (line 123)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 123, 4), True_28170)
    # SSA begins for while statement (line 123)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 124):
    
    # Assigning a Call to a Name (line 124):
    
    # Call to find(...): (line 124)
    # Processing the call arguments (line 124)
    # Getting the type of 'loopbeg' (line 124)
    loopbeg_28173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 26), 'loopbeg', False)
    # Getting the type of 'ind' (line 124)
    ind_28174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 35), 'ind', False)
    # Processing the call keyword arguments (line 124)
    kwargs_28175 = {}
    # Getting the type of 'astr' (line 124)
    astr_28171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 16), 'astr', False)
    # Obtaining the member 'find' of a type (line 124)
    find_28172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 16), astr_28171, 'find')
    # Calling find(args, kwargs) (line 124)
    find_call_result_28176 = invoke(stypy.reporting.localization.Localization(__file__, 124, 16), find_28172, *[loopbeg_28173, ind_28174], **kwargs_28175)
    
    # Assigning a type to the variable 'start' (line 124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 8), 'start', find_call_result_28176)
    
    
    # Getting the type of 'start' (line 125)
    start_28177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 11), 'start')
    int_28178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 20), 'int')
    # Applying the binary operator '==' (line 125)
    result_eq_28179 = python_operator(stypy.reporting.localization.Localization(__file__, 125, 11), '==', start_28177, int_28178)
    
    # Testing the type of an if condition (line 125)
    if_condition_28180 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 125, 8), result_eq_28179)
    # Assigning a type to the variable 'if_condition_28180' (line 125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 8), 'if_condition_28180', if_condition_28180)
    # SSA begins for if statement (line 125)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 125)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 127):
    
    # Assigning a Call to a Name (line 127):
    
    # Call to find(...): (line 127)
    # Processing the call arguments (line 127)
    str_28183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 27), 'str', '*/')
    # Getting the type of 'start' (line 127)
    start_28184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 33), 'start', False)
    # Processing the call keyword arguments (line 127)
    kwargs_28185 = {}
    # Getting the type of 'astr' (line 127)
    astr_28181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 17), 'astr', False)
    # Obtaining the member 'find' of a type (line 127)
    find_28182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 17), astr_28181, 'find')
    # Calling find(args, kwargs) (line 127)
    find_call_result_28186 = invoke(stypy.reporting.localization.Localization(__file__, 127, 17), find_28182, *[str_28183, start_28184], **kwargs_28185)
    
    # Assigning a type to the variable 'start2' (line 127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 8), 'start2', find_call_result_28186)
    
    # Assigning a Call to a Name (line 128):
    
    # Assigning a Call to a Name (line 128):
    
    # Call to find(...): (line 128)
    # Processing the call arguments (line 128)
    str_28189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 27), 'str', '\n')
    # Getting the type of 'start2' (line 128)
    start2_28190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 33), 'start2', False)
    # Processing the call keyword arguments (line 128)
    kwargs_28191 = {}
    # Getting the type of 'astr' (line 128)
    astr_28187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 17), 'astr', False)
    # Obtaining the member 'find' of a type (line 128)
    find_28188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 17), astr_28187, 'find')
    # Calling find(args, kwargs) (line 128)
    find_call_result_28192 = invoke(stypy.reporting.localization.Localization(__file__, 128, 17), find_28188, *[str_28189, start2_28190], **kwargs_28191)
    
    # Assigning a type to the variable 'start2' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 8), 'start2', find_call_result_28192)
    
    # Assigning a Call to a Name (line 129):
    
    # Assigning a Call to a Name (line 129):
    
    # Call to find(...): (line 129)
    # Processing the call arguments (line 129)
    # Getting the type of 'loopend' (line 129)
    loopend_28195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 26), 'loopend', False)
    # Getting the type of 'start2' (line 129)
    start2_28196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 35), 'start2', False)
    # Processing the call keyword arguments (line 129)
    kwargs_28197 = {}
    # Getting the type of 'astr' (line 129)
    astr_28193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 16), 'astr', False)
    # Obtaining the member 'find' of a type (line 129)
    find_28194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 16), astr_28193, 'find')
    # Calling find(args, kwargs) (line 129)
    find_call_result_28198 = invoke(stypy.reporting.localization.Localization(__file__, 129, 16), find_28194, *[loopend_28195, start2_28196], **kwargs_28197)
    
    # Assigning a type to the variable 'fini1' (line 129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 8), 'fini1', find_call_result_28198)
    
    # Assigning a Call to a Name (line 130):
    
    # Assigning a Call to a Name (line 130):
    
    # Call to find(...): (line 130)
    # Processing the call arguments (line 130)
    str_28201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 26), 'str', '\n')
    # Getting the type of 'fini1' (line 130)
    fini1_28202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 32), 'fini1', False)
    # Processing the call keyword arguments (line 130)
    kwargs_28203 = {}
    # Getting the type of 'astr' (line 130)
    astr_28199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 16), 'astr', False)
    # Obtaining the member 'find' of a type (line 130)
    find_28200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 16), astr_28199, 'find')
    # Calling find(args, kwargs) (line 130)
    find_call_result_28204 = invoke(stypy.reporting.localization.Localization(__file__, 130, 16), find_28200, *[str_28201, fini1_28202], **kwargs_28203)
    
    # Assigning a type to the variable 'fini2' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'fini2', find_call_result_28204)
    
    # Getting the type of 'line' (line 131)
    line_28205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 8), 'line')
    
    # Call to count(...): (line 131)
    # Processing the call arguments (line 131)
    str_28208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 131, 27), 'str', '\n')
    # Getting the type of 'ind' (line 131)
    ind_28209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 33), 'ind', False)
    # Getting the type of 'start2' (line 131)
    start2_28210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 38), 'start2', False)
    int_28211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 131, 45), 'int')
    # Applying the binary operator '+' (line 131)
    result_add_28212 = python_operator(stypy.reporting.localization.Localization(__file__, 131, 38), '+', start2_28210, int_28211)
    
    # Processing the call keyword arguments (line 131)
    kwargs_28213 = {}
    # Getting the type of 'astr' (line 131)
    astr_28206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 16), 'astr', False)
    # Obtaining the member 'count' of a type (line 131)
    count_28207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 16), astr_28206, 'count')
    # Calling count(args, kwargs) (line 131)
    count_call_result_28214 = invoke(stypy.reporting.localization.Localization(__file__, 131, 16), count_28207, *[str_28208, ind_28209, result_add_28212], **kwargs_28213)
    
    # Applying the binary operator '+=' (line 131)
    result_iadd_28215 = python_operator(stypy.reporting.localization.Localization(__file__, 131, 8), '+=', line_28205, count_call_result_28214)
    # Assigning a type to the variable 'line' (line 131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 8), 'line', result_iadd_28215)
    
    
    # Call to append(...): (line 132)
    # Processing the call arguments (line 132)
    
    # Obtaining an instance of the builtin type 'tuple' (line 132)
    tuple_28218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 132)
    # Adding element type (line 132)
    # Getting the type of 'start' (line 132)
    start_28219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 25), 'start', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 25), tuple_28218, start_28219)
    # Adding element type (line 132)
    # Getting the type of 'start2' (line 132)
    start2_28220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 32), 'start2', False)
    int_28221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 39), 'int')
    # Applying the binary operator '+' (line 132)
    result_add_28222 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 32), '+', start2_28220, int_28221)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 25), tuple_28218, result_add_28222)
    # Adding element type (line 132)
    # Getting the type of 'fini1' (line 132)
    fini1_28223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 42), 'fini1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 25), tuple_28218, fini1_28223)
    # Adding element type (line 132)
    # Getting the type of 'fini2' (line 132)
    fini2_28224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 49), 'fini2', False)
    int_28225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 55), 'int')
    # Applying the binary operator '+' (line 132)
    result_add_28226 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 49), '+', fini2_28224, int_28225)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 25), tuple_28218, result_add_28226)
    # Adding element type (line 132)
    # Getting the type of 'line' (line 132)
    line_28227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 58), 'line', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 25), tuple_28218, line_28227)
    
    # Processing the call keyword arguments (line 132)
    kwargs_28228 = {}
    # Getting the type of 'spanlist' (line 132)
    spanlist_28216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 8), 'spanlist', False)
    # Obtaining the member 'append' of a type (line 132)
    append_28217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 8), spanlist_28216, 'append')
    # Calling append(args, kwargs) (line 132)
    append_call_result_28229 = invoke(stypy.reporting.localization.Localization(__file__, 132, 8), append_28217, *[tuple_28218], **kwargs_28228)
    
    
    # Getting the type of 'line' (line 133)
    line_28230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 8), 'line')
    
    # Call to count(...): (line 133)
    # Processing the call arguments (line 133)
    str_28233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 133, 27), 'str', '\n')
    # Getting the type of 'start2' (line 133)
    start2_28234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 33), 'start2', False)
    int_28235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 133, 40), 'int')
    # Applying the binary operator '+' (line 133)
    result_add_28236 = python_operator(stypy.reporting.localization.Localization(__file__, 133, 33), '+', start2_28234, int_28235)
    
    # Getting the type of 'fini2' (line 133)
    fini2_28237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 43), 'fini2', False)
    # Processing the call keyword arguments (line 133)
    kwargs_28238 = {}
    # Getting the type of 'astr' (line 133)
    astr_28231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 16), 'astr', False)
    # Obtaining the member 'count' of a type (line 133)
    count_28232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 16), astr_28231, 'count')
    # Calling count(args, kwargs) (line 133)
    count_call_result_28239 = invoke(stypy.reporting.localization.Localization(__file__, 133, 16), count_28232, *[str_28233, result_add_28236, fini2_28237], **kwargs_28238)
    
    # Applying the binary operator '+=' (line 133)
    result_iadd_28240 = python_operator(stypy.reporting.localization.Localization(__file__, 133, 8), '+=', line_28230, count_call_result_28239)
    # Assigning a type to the variable 'line' (line 133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 8), 'line', result_iadd_28240)
    
    
    # Assigning a Name to a Name (line 134):
    
    # Assigning a Name to a Name (line 134):
    # Getting the type of 'fini2' (line 134)
    fini2_28241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 14), 'fini2')
    # Assigning a type to the variable 'ind' (line 134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 8), 'ind', fini2_28241)
    # SSA join for while statement (line 123)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to sort(...): (line 135)
    # Processing the call keyword arguments (line 135)
    kwargs_28244 = {}
    # Getting the type of 'spanlist' (line 135)
    spanlist_28242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 4), 'spanlist', False)
    # Obtaining the member 'sort' of a type (line 135)
    sort_28243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 135, 4), spanlist_28242, 'sort')
    # Calling sort(args, kwargs) (line 135)
    sort_call_result_28245 = invoke(stypy.reporting.localization.Localization(__file__, 135, 4), sort_28243, *[], **kwargs_28244)
    
    # Getting the type of 'spanlist' (line 136)
    spanlist_28246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 11), 'spanlist')
    # Assigning a type to the variable 'stypy_return_type' (line 136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 4), 'stypy_return_type', spanlist_28246)
    
    # ################# End of 'parse_structure(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'parse_structure' in the type store
    # Getting the type of 'stypy_return_type' (line 107)
    stypy_return_type_28247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_28247)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'parse_structure'
    return stypy_return_type_28247

# Assigning a type to the variable 'parse_structure' (line 107)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 0), 'parse_structure', parse_structure)

@norecursion
def paren_repl(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'paren_repl'
    module_type_store = module_type_store.open_function_context('paren_repl', 139, 0, False)
    
    # Passed parameters checking function
    paren_repl.stypy_localization = localization
    paren_repl.stypy_type_of_self = None
    paren_repl.stypy_type_store = module_type_store
    paren_repl.stypy_function_name = 'paren_repl'
    paren_repl.stypy_param_names_list = ['obj']
    paren_repl.stypy_varargs_param_name = None
    paren_repl.stypy_kwargs_param_name = None
    paren_repl.stypy_call_defaults = defaults
    paren_repl.stypy_call_varargs = varargs
    paren_repl.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'paren_repl', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'paren_repl', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'paren_repl(...)' code ##################

    
    # Assigning a Call to a Name (line 140):
    
    # Assigning a Call to a Name (line 140):
    
    # Call to group(...): (line 140)
    # Processing the call arguments (line 140)
    int_28250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 22), 'int')
    # Processing the call keyword arguments (line 140)
    kwargs_28251 = {}
    # Getting the type of 'obj' (line 140)
    obj_28248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 12), 'obj', False)
    # Obtaining the member 'group' of a type (line 140)
    group_28249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 140, 12), obj_28248, 'group')
    # Calling group(args, kwargs) (line 140)
    group_call_result_28252 = invoke(stypy.reporting.localization.Localization(__file__, 140, 12), group_28249, *[int_28250], **kwargs_28251)
    
    # Assigning a type to the variable 'torep' (line 140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 4), 'torep', group_call_result_28252)
    
    # Assigning a Call to a Name (line 141):
    
    # Assigning a Call to a Name (line 141):
    
    # Call to group(...): (line 141)
    # Processing the call arguments (line 141)
    int_28255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 23), 'int')
    # Processing the call keyword arguments (line 141)
    kwargs_28256 = {}
    # Getting the type of 'obj' (line 141)
    obj_28253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 13), 'obj', False)
    # Obtaining the member 'group' of a type (line 141)
    group_28254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 13), obj_28253, 'group')
    # Calling group(args, kwargs) (line 141)
    group_call_result_28257 = invoke(stypy.reporting.localization.Localization(__file__, 141, 13), group_28254, *[int_28255], **kwargs_28256)
    
    # Assigning a type to the variable 'numrep' (line 141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 4), 'numrep', group_call_result_28257)
    
    # Call to join(...): (line 142)
    # Processing the call arguments (line 142)
    
    # Obtaining an instance of the builtin type 'list' (line 142)
    list_28260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 142, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 142)
    # Adding element type (line 142)
    # Getting the type of 'torep' (line 142)
    torep_28261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 21), 'torep', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 142, 20), list_28260, torep_28261)
    
    
    # Call to int(...): (line 142)
    # Processing the call arguments (line 142)
    # Getting the type of 'numrep' (line 142)
    numrep_28263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 32), 'numrep', False)
    # Processing the call keyword arguments (line 142)
    kwargs_28264 = {}
    # Getting the type of 'int' (line 142)
    int_28262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 28), 'int', False)
    # Calling int(args, kwargs) (line 142)
    int_call_result_28265 = invoke(stypy.reporting.localization.Localization(__file__, 142, 28), int_28262, *[numrep_28263], **kwargs_28264)
    
    # Applying the binary operator '*' (line 142)
    result_mul_28266 = python_operator(stypy.reporting.localization.Localization(__file__, 142, 20), '*', list_28260, int_call_result_28265)
    
    # Processing the call keyword arguments (line 142)
    kwargs_28267 = {}
    str_28258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 142, 11), 'str', ',')
    # Obtaining the member 'join' of a type (line 142)
    join_28259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 142, 11), str_28258, 'join')
    # Calling join(args, kwargs) (line 142)
    join_call_result_28268 = invoke(stypy.reporting.localization.Localization(__file__, 142, 11), join_28259, *[result_mul_28266], **kwargs_28267)
    
    # Assigning a type to the variable 'stypy_return_type' (line 142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 4), 'stypy_return_type', join_call_result_28268)
    
    # ################# End of 'paren_repl(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'paren_repl' in the type store
    # Getting the type of 'stypy_return_type' (line 139)
    stypy_return_type_28269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_28269)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'paren_repl'
    return stypy_return_type_28269

# Assigning a type to the variable 'paren_repl' (line 139)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 0), 'paren_repl', paren_repl)

# Assigning a Call to a Name (line 144):

# Assigning a Call to a Name (line 144):

# Call to compile(...): (line 144)
# Processing the call arguments (line 144)
str_28272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 22), 'str', '[(]([^)]*)[)]\\*(\\d+)')
# Processing the call keyword arguments (line 144)
kwargs_28273 = {}
# Getting the type of 're' (line 144)
re_28270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 11), 're', False)
# Obtaining the member 'compile' of a type (line 144)
compile_28271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 11), re_28270, 'compile')
# Calling compile(args, kwargs) (line 144)
compile_call_result_28274 = invoke(stypy.reporting.localization.Localization(__file__, 144, 11), compile_28271, *[str_28272], **kwargs_28273)

# Assigning a type to the variable 'parenrep' (line 144)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 0), 'parenrep', compile_call_result_28274)

# Assigning a Call to a Name (line 145):

# Assigning a Call to a Name (line 145):

# Call to compile(...): (line 145)
# Processing the call arguments (line 145)
str_28277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, 22), 'str', '([^*]+)\\*(\\d+)')
# Processing the call keyword arguments (line 145)
kwargs_28278 = {}
# Getting the type of 're' (line 145)
re_28275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 11), 're', False)
# Obtaining the member 'compile' of a type (line 145)
compile_28276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 11), re_28275, 'compile')
# Calling compile(args, kwargs) (line 145)
compile_call_result_28279 = invoke(stypy.reporting.localization.Localization(__file__, 145, 11), compile_28276, *[str_28277], **kwargs_28278)

# Assigning a type to the variable 'plainrep' (line 145)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 0), 'plainrep', compile_call_result_28279)

@norecursion
def parse_values(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'parse_values'
    module_type_store = module_type_store.open_function_context('parse_values', 146, 0, False)
    
    # Passed parameters checking function
    parse_values.stypy_localization = localization
    parse_values.stypy_type_of_self = None
    parse_values.stypy_type_store = module_type_store
    parse_values.stypy_function_name = 'parse_values'
    parse_values.stypy_param_names_list = ['astr']
    parse_values.stypy_varargs_param_name = None
    parse_values.stypy_kwargs_param_name = None
    parse_values.stypy_call_defaults = defaults
    parse_values.stypy_call_varargs = varargs
    parse_values.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'parse_values', ['astr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'parse_values', localization, ['astr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'parse_values(...)' code ##################

    
    # Assigning a Call to a Name (line 151):
    
    # Assigning a Call to a Name (line 151):
    
    # Call to sub(...): (line 151)
    # Processing the call arguments (line 151)
    # Getting the type of 'paren_repl' (line 151)
    paren_repl_28282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 24), 'paren_repl', False)
    # Getting the type of 'astr' (line 151)
    astr_28283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 36), 'astr', False)
    # Processing the call keyword arguments (line 151)
    kwargs_28284 = {}
    # Getting the type of 'parenrep' (line 151)
    parenrep_28280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 11), 'parenrep', False)
    # Obtaining the member 'sub' of a type (line 151)
    sub_28281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 11), parenrep_28280, 'sub')
    # Calling sub(args, kwargs) (line 151)
    sub_call_result_28285 = invoke(stypy.reporting.localization.Localization(__file__, 151, 11), sub_28281, *[paren_repl_28282, astr_28283], **kwargs_28284)
    
    # Assigning a type to the variable 'astr' (line 151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 4), 'astr', sub_call_result_28285)
    
    # Assigning a Call to a Name (line 153):
    
    # Assigning a Call to a Name (line 153):
    
    # Call to join(...): (line 153)
    # Processing the call arguments (line 153)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to split(...): (line 154)
    # Processing the call arguments (line 154)
    str_28299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 41), 'str', ',')
    # Processing the call keyword arguments (line 154)
    kwargs_28300 = {}
    # Getting the type of 'astr' (line 154)
    astr_28297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 30), 'astr', False)
    # Obtaining the member 'split' of a type (line 154)
    split_28298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 30), astr_28297, 'split')
    # Calling split(args, kwargs) (line 154)
    split_call_result_28301 = invoke(stypy.reporting.localization.Localization(__file__, 154, 30), split_28298, *[str_28299], **kwargs_28300)
    
    comprehension_28302 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 153, 21), split_call_result_28301)
    # Assigning a type to the variable 'x' (line 153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 21), 'x', comprehension_28302)
    
    # Call to sub(...): (line 153)
    # Processing the call arguments (line 153)
    # Getting the type of 'paren_repl' (line 153)
    paren_repl_28290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 34), 'paren_repl', False)
    
    # Call to strip(...): (line 153)
    # Processing the call keyword arguments (line 153)
    kwargs_28293 = {}
    # Getting the type of 'x' (line 153)
    x_28291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 46), 'x', False)
    # Obtaining the member 'strip' of a type (line 153)
    strip_28292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 46), x_28291, 'strip')
    # Calling strip(args, kwargs) (line 153)
    strip_call_result_28294 = invoke(stypy.reporting.localization.Localization(__file__, 153, 46), strip_28292, *[], **kwargs_28293)
    
    # Processing the call keyword arguments (line 153)
    kwargs_28295 = {}
    # Getting the type of 'plainrep' (line 153)
    plainrep_28288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 21), 'plainrep', False)
    # Obtaining the member 'sub' of a type (line 153)
    sub_28289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 21), plainrep_28288, 'sub')
    # Calling sub(args, kwargs) (line 153)
    sub_call_result_28296 = invoke(stypy.reporting.localization.Localization(__file__, 153, 21), sub_28289, *[paren_repl_28290, strip_call_result_28294], **kwargs_28295)
    
    list_28303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 153, 21), list_28303, sub_call_result_28296)
    # Processing the call keyword arguments (line 153)
    kwargs_28304 = {}
    str_28286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 11), 'str', ',')
    # Obtaining the member 'join' of a type (line 153)
    join_28287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 11), str_28286, 'join')
    # Calling join(args, kwargs) (line 153)
    join_call_result_28305 = invoke(stypy.reporting.localization.Localization(__file__, 153, 11), join_28287, *[list_28303], **kwargs_28304)
    
    # Assigning a type to the variable 'astr' (line 153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 4), 'astr', join_call_result_28305)
    
    # Call to split(...): (line 155)
    # Processing the call arguments (line 155)
    str_28308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 155, 22), 'str', ',')
    # Processing the call keyword arguments (line 155)
    kwargs_28309 = {}
    # Getting the type of 'astr' (line 155)
    astr_28306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 11), 'astr', False)
    # Obtaining the member 'split' of a type (line 155)
    split_28307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 11), astr_28306, 'split')
    # Calling split(args, kwargs) (line 155)
    split_call_result_28310 = invoke(stypy.reporting.localization.Localization(__file__, 155, 11), split_28307, *[str_28308], **kwargs_28309)
    
    # Assigning a type to the variable 'stypy_return_type' (line 155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 4), 'stypy_return_type', split_call_result_28310)
    
    # ################# End of 'parse_values(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'parse_values' in the type store
    # Getting the type of 'stypy_return_type' (line 146)
    stypy_return_type_28311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_28311)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'parse_values'
    return stypy_return_type_28311

# Assigning a type to the variable 'parse_values' (line 146)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 0), 'parse_values', parse_values)

# Assigning a Call to a Name (line 158):

# Assigning a Call to a Name (line 158):

# Call to compile(...): (line 158)
# Processing the call arguments (line 158)
str_28314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 158, 22), 'str', '\\n\\s*\\*?')
# Processing the call keyword arguments (line 158)
kwargs_28315 = {}
# Getting the type of 're' (line 158)
re_28312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 11), 're', False)
# Obtaining the member 'compile' of a type (line 158)
compile_28313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 11), re_28312, 'compile')
# Calling compile(args, kwargs) (line 158)
compile_call_result_28316 = invoke(stypy.reporting.localization.Localization(__file__, 158, 11), compile_28313, *[str_28314], **kwargs_28315)

# Assigning a type to the variable 'stripast' (line 158)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 0), 'stripast', compile_call_result_28316)

# Assigning a Call to a Name (line 159):

# Assigning a Call to a Name (line 159):

# Call to compile(...): (line 159)
# Processing the call arguments (line 159)
str_28319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 22), 'str', '#\\s*(\\w*)\\s*=([^#]*)#')
# Processing the call keyword arguments (line 159)
kwargs_28320 = {}
# Getting the type of 're' (line 159)
re_28317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 11), 're', False)
# Obtaining the member 'compile' of a type (line 159)
compile_28318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 11), re_28317, 'compile')
# Calling compile(args, kwargs) (line 159)
compile_call_result_28321 = invoke(stypy.reporting.localization.Localization(__file__, 159, 11), compile_28318, *[str_28319], **kwargs_28320)

# Assigning a type to the variable 'named_re' (line 159)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 0), 'named_re', compile_call_result_28321)

# Assigning a Call to a Name (line 160):

# Assigning a Call to a Name (line 160):

# Call to compile(...): (line 160)
# Processing the call arguments (line 160)
str_28324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 29), 'str', '(\\w*)=(\\w*)')
# Processing the call keyword arguments (line 160)
kwargs_28325 = {}
# Getting the type of 're' (line 160)
re_28322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 18), 're', False)
# Obtaining the member 'compile' of a type (line 160)
compile_28323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 160, 18), re_28322, 'compile')
# Calling compile(args, kwargs) (line 160)
compile_call_result_28326 = invoke(stypy.reporting.localization.Localization(__file__, 160, 18), compile_28323, *[str_28324], **kwargs_28325)

# Assigning a type to the variable 'exclude_vars_re' (line 160)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 0), 'exclude_vars_re', compile_call_result_28326)

# Assigning a Call to a Name (line 161):

# Assigning a Call to a Name (line 161):

# Call to compile(...): (line 161)
# Processing the call arguments (line 161)
str_28329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 24), 'str', ':exclude:')
# Processing the call keyword arguments (line 161)
kwargs_28330 = {}
# Getting the type of 're' (line 161)
re_28327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 13), 're', False)
# Obtaining the member 'compile' of a type (line 161)
compile_28328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 13), re_28327, 'compile')
# Calling compile(args, kwargs) (line 161)
compile_call_result_28331 = invoke(stypy.reporting.localization.Localization(__file__, 161, 13), compile_28328, *[str_28329], **kwargs_28330)

# Assigning a type to the variable 'exclude_re' (line 161)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 0), 'exclude_re', compile_call_result_28331)

@norecursion
def parse_loop_header(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'parse_loop_header'
    module_type_store = module_type_store.open_function_context('parse_loop_header', 162, 0, False)
    
    # Passed parameters checking function
    parse_loop_header.stypy_localization = localization
    parse_loop_header.stypy_type_of_self = None
    parse_loop_header.stypy_type_store = module_type_store
    parse_loop_header.stypy_function_name = 'parse_loop_header'
    parse_loop_header.stypy_param_names_list = ['loophead']
    parse_loop_header.stypy_varargs_param_name = None
    parse_loop_header.stypy_kwargs_param_name = None
    parse_loop_header.stypy_call_defaults = defaults
    parse_loop_header.stypy_call_varargs = varargs
    parse_loop_header.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'parse_loop_header', ['loophead'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'parse_loop_header', localization, ['loophead'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'parse_loop_header(...)' code ##################

    str_28332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, (-1)), 'str', "Find all named replacements in the header\n\n    Returns a list of dictionaries, one for each loop iteration,\n    where each key is a name to be substituted and the corresponding\n    value is the replacement string.\n\n    Also return a list of exclusions.  The exclusions are dictionaries\n     of key value pairs. There can be more than one exclusion.\n     [{'var1':'value1', 'var2', 'value2'[,...]}, ...]\n\n    ")
    
    # Assigning a Call to a Name (line 177):
    
    # Assigning a Call to a Name (line 177):
    
    # Call to sub(...): (line 177)
    # Processing the call arguments (line 177)
    str_28335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 177, 28), 'str', '')
    # Getting the type of 'loophead' (line 177)
    loophead_28336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 32), 'loophead', False)
    # Processing the call keyword arguments (line 177)
    kwargs_28337 = {}
    # Getting the type of 'stripast' (line 177)
    stripast_28333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 15), 'stripast', False)
    # Obtaining the member 'sub' of a type (line 177)
    sub_28334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 177, 15), stripast_28333, 'sub')
    # Calling sub(args, kwargs) (line 177)
    sub_call_result_28338 = invoke(stypy.reporting.localization.Localization(__file__, 177, 15), sub_28334, *[str_28335, loophead_28336], **kwargs_28337)
    
    # Assigning a type to the variable 'loophead' (line 177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 4), 'loophead', sub_call_result_28338)
    
    # Assigning a List to a Name (line 179):
    
    # Assigning a List to a Name (line 179):
    
    # Obtaining an instance of the builtin type 'list' (line 179)
    list_28339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 179)
    
    # Assigning a type to the variable 'names' (line 179)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 4), 'names', list_28339)
    
    # Assigning a Call to a Name (line 180):
    
    # Assigning a Call to a Name (line 180):
    
    # Call to findall(...): (line 180)
    # Processing the call arguments (line 180)
    # Getting the type of 'loophead' (line 180)
    loophead_28342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 28), 'loophead', False)
    # Processing the call keyword arguments (line 180)
    kwargs_28343 = {}
    # Getting the type of 'named_re' (line 180)
    named_re_28340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 11), 'named_re', False)
    # Obtaining the member 'findall' of a type (line 180)
    findall_28341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 180, 11), named_re_28340, 'findall')
    # Calling findall(args, kwargs) (line 180)
    findall_call_result_28344 = invoke(stypy.reporting.localization.Localization(__file__, 180, 11), findall_28341, *[loophead_28342], **kwargs_28343)
    
    # Assigning a type to the variable 'reps' (line 180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 4), 'reps', findall_call_result_28344)
    
    # Assigning a Name to a Name (line 181):
    
    # Assigning a Name to a Name (line 181):
    # Getting the type of 'None' (line 181)
    None_28345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 11), 'None')
    # Assigning a type to the variable 'nsub' (line 181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 4), 'nsub', None_28345)
    
    # Getting the type of 'reps' (line 182)
    reps_28346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 15), 'reps')
    # Testing the type of a for loop iterable (line 182)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 182, 4), reps_28346)
    # Getting the type of the for loop variable (line 182)
    for_loop_var_28347 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 182, 4), reps_28346)
    # Assigning a type to the variable 'rep' (line 182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 4), 'rep', for_loop_var_28347)
    # SSA begins for a for statement (line 182)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 183):
    
    # Assigning a Subscript to a Name (line 183):
    
    # Obtaining the type of the subscript
    int_28348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 19), 'int')
    # Getting the type of 'rep' (line 183)
    rep_28349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 15), 'rep')
    # Obtaining the member '__getitem__' of a type (line 183)
    getitem___28350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 15), rep_28349, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 183)
    subscript_call_result_28351 = invoke(stypy.reporting.localization.Localization(__file__, 183, 15), getitem___28350, int_28348)
    
    # Assigning a type to the variable 'name' (line 183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 8), 'name', subscript_call_result_28351)
    
    # Assigning a Call to a Name (line 184):
    
    # Assigning a Call to a Name (line 184):
    
    # Call to parse_values(...): (line 184)
    # Processing the call arguments (line 184)
    
    # Obtaining the type of the subscript
    int_28353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 32), 'int')
    # Getting the type of 'rep' (line 184)
    rep_28354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 28), 'rep', False)
    # Obtaining the member '__getitem__' of a type (line 184)
    getitem___28355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 28), rep_28354, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 184)
    subscript_call_result_28356 = invoke(stypy.reporting.localization.Localization(__file__, 184, 28), getitem___28355, int_28353)
    
    # Processing the call keyword arguments (line 184)
    kwargs_28357 = {}
    # Getting the type of 'parse_values' (line 184)
    parse_values_28352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 15), 'parse_values', False)
    # Calling parse_values(args, kwargs) (line 184)
    parse_values_call_result_28358 = invoke(stypy.reporting.localization.Localization(__file__, 184, 15), parse_values_28352, *[subscript_call_result_28356], **kwargs_28357)
    
    # Assigning a type to the variable 'vals' (line 184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 8), 'vals', parse_values_call_result_28358)
    
    # Assigning a Call to a Name (line 185):
    
    # Assigning a Call to a Name (line 185):
    
    # Call to len(...): (line 185)
    # Processing the call arguments (line 185)
    # Getting the type of 'vals' (line 185)
    vals_28360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 19), 'vals', False)
    # Processing the call keyword arguments (line 185)
    kwargs_28361 = {}
    # Getting the type of 'len' (line 185)
    len_28359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 15), 'len', False)
    # Calling len(args, kwargs) (line 185)
    len_call_result_28362 = invoke(stypy.reporting.localization.Localization(__file__, 185, 15), len_28359, *[vals_28360], **kwargs_28361)
    
    # Assigning a type to the variable 'size' (line 185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'size', len_call_result_28362)
    
    # Type idiom detected: calculating its left and rigth part (line 186)
    # Getting the type of 'nsub' (line 186)
    nsub_28363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 11), 'nsub')
    # Getting the type of 'None' (line 186)
    None_28364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 19), 'None')
    
    (may_be_28365, more_types_in_union_28366) = may_be_none(nsub_28363, None_28364)

    if may_be_28365:

        if more_types_in_union_28366:
            # Runtime conditional SSA (line 186)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 187):
        
        # Assigning a Name to a Name (line 187):
        # Getting the type of 'size' (line 187)
        size_28367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 19), 'size')
        # Assigning a type to the variable 'nsub' (line 187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 12), 'nsub', size_28367)

        if more_types_in_union_28366:
            # Runtime conditional SSA for else branch (line 186)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_28365) or more_types_in_union_28366):
        
        
        # Getting the type of 'nsub' (line 188)
        nsub_28368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 13), 'nsub')
        # Getting the type of 'size' (line 188)
        size_28369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 21), 'size')
        # Applying the binary operator '!=' (line 188)
        result_ne_28370 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 13), '!=', nsub_28368, size_28369)
        
        # Testing the type of an if condition (line 188)
        if_condition_28371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 188, 13), result_ne_28370)
        # Assigning a type to the variable 'if_condition_28371' (line 188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 13), 'if_condition_28371', if_condition_28371)
        # SSA begins for if statement (line 188)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 189):
        
        # Assigning a BinOp to a Name (line 189):
        str_28372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 18), 'str', 'Mismatch in number of values:\n%s = %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 189)
        tuple_28373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 62), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 189)
        # Adding element type (line 189)
        # Getting the type of 'name' (line 189)
        name_28374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 62), 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 62), tuple_28373, name_28374)
        # Adding element type (line 189)
        # Getting the type of 'vals' (line 189)
        vals_28375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 68), 'vals')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 62), tuple_28373, vals_28375)
        
        # Applying the binary operator '%' (line 189)
        result_mod_28376 = python_operator(stypy.reporting.localization.Localization(__file__, 189, 18), '%', str_28372, tuple_28373)
        
        # Assigning a type to the variable 'msg' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 12), 'msg', result_mod_28376)
        
        # Call to ValueError(...): (line 190)
        # Processing the call arguments (line 190)
        # Getting the type of 'msg' (line 190)
        msg_28378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 29), 'msg', False)
        # Processing the call keyword arguments (line 190)
        kwargs_28379 = {}
        # Getting the type of 'ValueError' (line 190)
        ValueError_28377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 190)
        ValueError_call_result_28380 = invoke(stypy.reporting.localization.Localization(__file__, 190, 18), ValueError_28377, *[msg_28378], **kwargs_28379)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 190, 12), ValueError_call_result_28380, 'raise parameter', BaseException)
        # SSA join for if statement (line 188)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_28365 and more_types_in_union_28366):
            # SSA join for if statement (line 186)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to append(...): (line 191)
    # Processing the call arguments (line 191)
    
    # Obtaining an instance of the builtin type 'tuple' (line 191)
    tuple_28383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 191)
    # Adding element type (line 191)
    # Getting the type of 'name' (line 191)
    name_28384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 22), 'name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 22), tuple_28383, name_28384)
    # Adding element type (line 191)
    # Getting the type of 'vals' (line 191)
    vals_28385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 28), 'vals', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 22), tuple_28383, vals_28385)
    
    # Processing the call keyword arguments (line 191)
    kwargs_28386 = {}
    # Getting the type of 'names' (line 191)
    names_28381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 8), 'names', False)
    # Obtaining the member 'append' of a type (line 191)
    append_28382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 8), names_28381, 'append')
    # Calling append(args, kwargs) (line 191)
    append_call_result_28387 = invoke(stypy.reporting.localization.Localization(__file__, 191, 8), append_28382, *[tuple_28383], **kwargs_28386)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 195):
    
    # Assigning a List to a Name (line 195):
    
    # Obtaining an instance of the builtin type 'list' (line 195)
    list_28388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 195)
    
    # Assigning a type to the variable 'excludes' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'excludes', list_28388)
    
    
    # Call to finditer(...): (line 197)
    # Processing the call arguments (line 197)
    # Getting the type of 'loophead' (line 197)
    loophead_28391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 35), 'loophead', False)
    # Processing the call keyword arguments (line 197)
    kwargs_28392 = {}
    # Getting the type of 'exclude_re' (line 197)
    exclude_re_28389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 15), 'exclude_re', False)
    # Obtaining the member 'finditer' of a type (line 197)
    finditer_28390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 15), exclude_re_28389, 'finditer')
    # Calling finditer(args, kwargs) (line 197)
    finditer_call_result_28393 = invoke(stypy.reporting.localization.Localization(__file__, 197, 15), finditer_28390, *[loophead_28391], **kwargs_28392)
    
    # Testing the type of a for loop iterable (line 197)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 197, 4), finditer_call_result_28393)
    # Getting the type of the for loop variable (line 197)
    for_loop_var_28394 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 197, 4), finditer_call_result_28393)
    # Assigning a type to the variable 'obj' (line 197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 4), 'obj', for_loop_var_28394)
    # SSA begins for a for statement (line 197)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 198):
    
    # Assigning a Call to a Name (line 198):
    
    # Call to span(...): (line 198)
    # Processing the call keyword arguments (line 198)
    kwargs_28397 = {}
    # Getting the type of 'obj' (line 198)
    obj_28395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 15), 'obj', False)
    # Obtaining the member 'span' of a type (line 198)
    span_28396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 15), obj_28395, 'span')
    # Calling span(args, kwargs) (line 198)
    span_call_result_28398 = invoke(stypy.reporting.localization.Localization(__file__, 198, 15), span_28396, *[], **kwargs_28397)
    
    # Assigning a type to the variable 'span' (line 198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'span', span_call_result_28398)
    
    # Assigning a Call to a Name (line 200):
    
    # Assigning a Call to a Name (line 200):
    
    # Call to find(...): (line 200)
    # Processing the call arguments (line 200)
    str_28401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 32), 'str', '\n')
    
    # Obtaining the type of the subscript
    int_28402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 43), 'int')
    # Getting the type of 'span' (line 200)
    span_28403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 38), 'span', False)
    # Obtaining the member '__getitem__' of a type (line 200)
    getitem___28404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 38), span_28403, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 200)
    subscript_call_result_28405 = invoke(stypy.reporting.localization.Localization(__file__, 200, 38), getitem___28404, int_28402)
    
    # Processing the call keyword arguments (line 200)
    kwargs_28406 = {}
    # Getting the type of 'loophead' (line 200)
    loophead_28399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 18), 'loophead', False)
    # Obtaining the member 'find' of a type (line 200)
    find_28400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 18), loophead_28399, 'find')
    # Calling find(args, kwargs) (line 200)
    find_call_result_28407 = invoke(stypy.reporting.localization.Localization(__file__, 200, 18), find_28400, *[str_28401, subscript_call_result_28405], **kwargs_28406)
    
    # Assigning a type to the variable 'endline' (line 200)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 8), 'endline', find_call_result_28407)
    
    # Assigning a Subscript to a Name (line 201):
    
    # Assigning a Subscript to a Name (line 201):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_28408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 31), 'int')
    # Getting the type of 'span' (line 201)
    span_28409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 26), 'span')
    # Obtaining the member '__getitem__' of a type (line 201)
    getitem___28410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 26), span_28409, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 201)
    subscript_call_result_28411 = invoke(stypy.reporting.localization.Localization(__file__, 201, 26), getitem___28410, int_28408)
    
    # Getting the type of 'endline' (line 201)
    endline_28412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 34), 'endline')
    slice_28413 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 201, 17), subscript_call_result_28411, endline_28412, None)
    # Getting the type of 'loophead' (line 201)
    loophead_28414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 17), 'loophead')
    # Obtaining the member '__getitem__' of a type (line 201)
    getitem___28415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 17), loophead_28414, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 201)
    subscript_call_result_28416 = invoke(stypy.reporting.localization.Localization(__file__, 201, 17), getitem___28415, slice_28413)
    
    # Assigning a type to the variable 'substr' (line 201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'substr', subscript_call_result_28416)
    
    # Assigning a Call to a Name (line 202):
    
    # Assigning a Call to a Name (line 202):
    
    # Call to findall(...): (line 202)
    # Processing the call arguments (line 202)
    # Getting the type of 'substr' (line 202)
    substr_28419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 43), 'substr', False)
    # Processing the call keyword arguments (line 202)
    kwargs_28420 = {}
    # Getting the type of 'exclude_vars_re' (line 202)
    exclude_vars_re_28417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 19), 'exclude_vars_re', False)
    # Obtaining the member 'findall' of a type (line 202)
    findall_28418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 19), exclude_vars_re_28417, 'findall')
    # Calling findall(args, kwargs) (line 202)
    findall_call_result_28421 = invoke(stypy.reporting.localization.Localization(__file__, 202, 19), findall_28418, *[substr_28419], **kwargs_28420)
    
    # Assigning a type to the variable 'ex_names' (line 202)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'ex_names', findall_call_result_28421)
    
    # Call to append(...): (line 203)
    # Processing the call arguments (line 203)
    
    # Call to dict(...): (line 203)
    # Processing the call arguments (line 203)
    # Getting the type of 'ex_names' (line 203)
    ex_names_28425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 29), 'ex_names', False)
    # Processing the call keyword arguments (line 203)
    kwargs_28426 = {}
    # Getting the type of 'dict' (line 203)
    dict_28424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 24), 'dict', False)
    # Calling dict(args, kwargs) (line 203)
    dict_call_result_28427 = invoke(stypy.reporting.localization.Localization(__file__, 203, 24), dict_28424, *[ex_names_28425], **kwargs_28426)
    
    # Processing the call keyword arguments (line 203)
    kwargs_28428 = {}
    # Getting the type of 'excludes' (line 203)
    excludes_28422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 8), 'excludes', False)
    # Obtaining the member 'append' of a type (line 203)
    append_28423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 8), excludes_28422, 'append')
    # Calling append(args, kwargs) (line 203)
    append_call_result_28429 = invoke(stypy.reporting.localization.Localization(__file__, 203, 8), append_28423, *[dict_call_result_28427], **kwargs_28428)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 206):
    
    # Assigning a List to a Name (line 206):
    
    # Obtaining an instance of the builtin type 'list' (line 206)
    list_28430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 206, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 206)
    
    # Assigning a type to the variable 'dlist' (line 206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'dlist', list_28430)
    
    # Type idiom detected: calculating its left and rigth part (line 207)
    # Getting the type of 'nsub' (line 207)
    nsub_28431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 7), 'nsub')
    # Getting the type of 'None' (line 207)
    None_28432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 15), 'None')
    
    (may_be_28433, more_types_in_union_28434) = may_be_none(nsub_28431, None_28432)

    if may_be_28433:

        if more_types_in_union_28434:
            # Runtime conditional SSA (line 207)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to ValueError(...): (line 208)
        # Processing the call arguments (line 208)
        str_28436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 25), 'str', 'No substitution variables found')
        # Processing the call keyword arguments (line 208)
        kwargs_28437 = {}
        # Getting the type of 'ValueError' (line 208)
        ValueError_28435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 208)
        ValueError_call_result_28438 = invoke(stypy.reporting.localization.Localization(__file__, 208, 14), ValueError_28435, *[str_28436], **kwargs_28437)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 208, 8), ValueError_call_result_28438, 'raise parameter', BaseException)

        if more_types_in_union_28434:
            # SSA join for if statement (line 207)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to range(...): (line 209)
    # Processing the call arguments (line 209)
    # Getting the type of 'nsub' (line 209)
    nsub_28440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 19), 'nsub', False)
    # Processing the call keyword arguments (line 209)
    kwargs_28441 = {}
    # Getting the type of 'range' (line 209)
    range_28439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 13), 'range', False)
    # Calling range(args, kwargs) (line 209)
    range_call_result_28442 = invoke(stypy.reporting.localization.Localization(__file__, 209, 13), range_28439, *[nsub_28440], **kwargs_28441)
    
    # Testing the type of a for loop iterable (line 209)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 209, 4), range_call_result_28442)
    # Getting the type of the for loop variable (line 209)
    for_loop_var_28443 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 209, 4), range_call_result_28442)
    # Assigning a type to the variable 'i' (line 209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 4), 'i', for_loop_var_28443)
    # SSA begins for a for statement (line 209)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Dict to a Name (line 210):
    
    # Assigning a Dict to a Name (line 210):
    
    # Obtaining an instance of the builtin type 'dict' (line 210)
    dict_28444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 14), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 210)
    
    # Assigning a type to the variable 'tmp' (line 210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'tmp', dict_28444)
    
    # Getting the type of 'names' (line 211)
    names_28445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 26), 'names')
    # Testing the type of a for loop iterable (line 211)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 211, 8), names_28445)
    # Getting the type of the for loop variable (line 211)
    for_loop_var_28446 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 211, 8), names_28445)
    # Assigning a type to the variable 'name' (line 211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 8), for_loop_var_28446))
    # Assigning a type to the variable 'vals' (line 211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'vals', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 8), for_loop_var_28446))
    # SSA begins for a for statement (line 211)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Subscript (line 212):
    
    # Assigning a Subscript to a Subscript (line 212):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 212)
    i_28447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 29), 'i')
    # Getting the type of 'vals' (line 212)
    vals_28448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 24), 'vals')
    # Obtaining the member '__getitem__' of a type (line 212)
    getitem___28449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 24), vals_28448, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 212)
    subscript_call_result_28450 = invoke(stypy.reporting.localization.Localization(__file__, 212, 24), getitem___28449, i_28447)
    
    # Getting the type of 'tmp' (line 212)
    tmp_28451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 12), 'tmp')
    # Getting the type of 'name' (line 212)
    name_28452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 16), 'name')
    # Storing an element on a container (line 212)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 212, 12), tmp_28451, (name_28452, subscript_call_result_28450))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 213)
    # Processing the call arguments (line 213)
    # Getting the type of 'tmp' (line 213)
    tmp_28455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 21), 'tmp', False)
    # Processing the call keyword arguments (line 213)
    kwargs_28456 = {}
    # Getting the type of 'dlist' (line 213)
    dlist_28453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 8), 'dlist', False)
    # Obtaining the member 'append' of a type (line 213)
    append_28454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 8), dlist_28453, 'append')
    # Calling append(args, kwargs) (line 213)
    append_call_result_28457 = invoke(stypy.reporting.localization.Localization(__file__, 213, 8), append_28454, *[tmp_28455], **kwargs_28456)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'dlist' (line 214)
    dlist_28458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 11), 'dlist')
    # Assigning a type to the variable 'stypy_return_type' (line 214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 4), 'stypy_return_type', dlist_28458)
    
    # ################# End of 'parse_loop_header(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'parse_loop_header' in the type store
    # Getting the type of 'stypy_return_type' (line 162)
    stypy_return_type_28459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_28459)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'parse_loop_header'
    return stypy_return_type_28459

# Assigning a type to the variable 'parse_loop_header' (line 162)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 0), 'parse_loop_header', parse_loop_header)

# Assigning a Call to a Name (line 216):

# Assigning a Call to a Name (line 216):

# Call to compile(...): (line 216)
# Processing the call arguments (line 216)
str_28462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 216, 24), 'str', '@([\\w]+)@')
# Processing the call keyword arguments (line 216)
kwargs_28463 = {}
# Getting the type of 're' (line 216)
re_28460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 13), 're', False)
# Obtaining the member 'compile' of a type (line 216)
compile_28461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 13), re_28460, 'compile')
# Calling compile(args, kwargs) (line 216)
compile_call_result_28464 = invoke(stypy.reporting.localization.Localization(__file__, 216, 13), compile_28461, *[str_28462], **kwargs_28463)

# Assigning a type to the variable 'replace_re' (line 216)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 0), 'replace_re', compile_call_result_28464)

@norecursion
def parse_string(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'parse_string'
    module_type_store = module_type_store.open_function_context('parse_string', 217, 0, False)
    
    # Passed parameters checking function
    parse_string.stypy_localization = localization
    parse_string.stypy_type_of_self = None
    parse_string.stypy_type_store = module_type_store
    parse_string.stypy_function_name = 'parse_string'
    parse_string.stypy_param_names_list = ['astr', 'env', 'level', 'line']
    parse_string.stypy_varargs_param_name = None
    parse_string.stypy_kwargs_param_name = None
    parse_string.stypy_call_defaults = defaults
    parse_string.stypy_call_varargs = varargs
    parse_string.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'parse_string', ['astr', 'env', 'level', 'line'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'parse_string', localization, ['astr', 'env', 'level', 'line'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'parse_string(...)' code ##################

    
    # Assigning a BinOp to a Name (line 218):
    
    # Assigning a BinOp to a Name (line 218):
    str_28465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 13), 'str', '#line %d\n')
    # Getting the type of 'line' (line 218)
    line_28466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 28), 'line')
    # Applying the binary operator '%' (line 218)
    result_mod_28467 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 13), '%', str_28465, line_28466)
    
    # Assigning a type to the variable 'lineno' (line 218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 4), 'lineno', result_mod_28467)

    @norecursion
    def replace(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'replace'
        module_type_store = module_type_store.open_function_context('replace', 221, 4, False)
        
        # Passed parameters checking function
        replace.stypy_localization = localization
        replace.stypy_type_of_self = None
        replace.stypy_type_store = module_type_store
        replace.stypy_function_name = 'replace'
        replace.stypy_param_names_list = ['match']
        replace.stypy_varargs_param_name = None
        replace.stypy_kwargs_param_name = None
        replace.stypy_call_defaults = defaults
        replace.stypy_call_varargs = varargs
        replace.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'replace', ['match'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'replace', localization, ['match'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'replace(...)' code ##################

        
        # Assigning a Call to a Name (line 222):
        
        # Assigning a Call to a Name (line 222):
        
        # Call to group(...): (line 222)
        # Processing the call arguments (line 222)
        int_28470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 27), 'int')
        # Processing the call keyword arguments (line 222)
        kwargs_28471 = {}
        # Getting the type of 'match' (line 222)
        match_28468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 15), 'match', False)
        # Obtaining the member 'group' of a type (line 222)
        group_28469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 15), match_28468, 'group')
        # Calling group(args, kwargs) (line 222)
        group_call_result_28472 = invoke(stypy.reporting.localization.Localization(__file__, 222, 15), group_28469, *[int_28470], **kwargs_28471)
        
        # Assigning a type to the variable 'name' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 8), 'name', group_call_result_28472)
        
        
        # SSA begins for try-except statement (line 223)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 224):
        
        # Assigning a Subscript to a Name (line 224):
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 224)
        name_28473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 22), 'name')
        # Getting the type of 'env' (line 224)
        env_28474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 18), 'env')
        # Obtaining the member '__getitem__' of a type (line 224)
        getitem___28475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 18), env_28474, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 224)
        subscript_call_result_28476 = invoke(stypy.reporting.localization.Localization(__file__, 224, 18), getitem___28475, name_28473)
        
        # Assigning a type to the variable 'val' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 12), 'val', subscript_call_result_28476)
        # SSA branch for the except part of a try statement (line 223)
        # SSA branch for the except 'KeyError' branch of a try statement (line 223)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a BinOp to a Name (line 226):
        
        # Assigning a BinOp to a Name (line 226):
        str_28477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 18), 'str', 'line %d: no definition of key "%s"')
        
        # Obtaining an instance of the builtin type 'tuple' (line 226)
        tuple_28478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 226)
        # Adding element type (line 226)
        # Getting the type of 'line' (line 226)
        line_28479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 56), 'line')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 226, 56), tuple_28478, line_28479)
        # Adding element type (line 226)
        # Getting the type of 'name' (line 226)
        name_28480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 62), 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 226, 56), tuple_28478, name_28480)
        
        # Applying the binary operator '%' (line 226)
        result_mod_28481 = python_operator(stypy.reporting.localization.Localization(__file__, 226, 18), '%', str_28477, tuple_28478)
        
        # Assigning a type to the variable 'msg' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 12), 'msg', result_mod_28481)
        
        # Call to ValueError(...): (line 227)
        # Processing the call arguments (line 227)
        # Getting the type of 'msg' (line 227)
        msg_28483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 29), 'msg', False)
        # Processing the call keyword arguments (line 227)
        kwargs_28484 = {}
        # Getting the type of 'ValueError' (line 227)
        ValueError_28482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 227)
        ValueError_call_result_28485 = invoke(stypy.reporting.localization.Localization(__file__, 227, 18), ValueError_28482, *[msg_28483], **kwargs_28484)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 227, 12), ValueError_call_result_28485, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 223)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'val' (line 228)
        val_28486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 15), 'val')
        # Assigning a type to the variable 'stypy_return_type' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'stypy_return_type', val_28486)
        
        # ################# End of 'replace(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'replace' in the type store
        # Getting the type of 'stypy_return_type' (line 221)
        stypy_return_type_28487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28487)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'replace'
        return stypy_return_type_28487

    # Assigning a type to the variable 'replace' (line 221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 4), 'replace', replace)
    
    # Assigning a List to a Name (line 230):
    
    # Assigning a List to a Name (line 230):
    
    # Obtaining an instance of the builtin type 'list' (line 230)
    list_28488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 230, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 230)
    # Adding element type (line 230)
    # Getting the type of 'lineno' (line 230)
    lineno_28489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 12), 'lineno')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 230, 11), list_28488, lineno_28489)
    
    # Assigning a type to the variable 'code' (line 230)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'code', list_28488)
    
    # Assigning a Call to a Name (line 231):
    
    # Assigning a Call to a Name (line 231):
    
    # Call to parse_structure(...): (line 231)
    # Processing the call arguments (line 231)
    # Getting the type of 'astr' (line 231)
    astr_28491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 29), 'astr', False)
    # Getting the type of 'level' (line 231)
    level_28492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 35), 'level', False)
    # Processing the call keyword arguments (line 231)
    kwargs_28493 = {}
    # Getting the type of 'parse_structure' (line 231)
    parse_structure_28490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 13), 'parse_structure', False)
    # Calling parse_structure(args, kwargs) (line 231)
    parse_structure_call_result_28494 = invoke(stypy.reporting.localization.Localization(__file__, 231, 13), parse_structure_28490, *[astr_28491, level_28492], **kwargs_28493)
    
    # Assigning a type to the variable 'struct' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'struct', parse_structure_call_result_28494)
    
    # Getting the type of 'struct' (line 232)
    struct_28495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 7), 'struct')
    # Testing the type of an if condition (line 232)
    if_condition_28496 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 232, 4), struct_28495)
    # Assigning a type to the variable 'if_condition_28496' (line 232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 4), 'if_condition_28496', if_condition_28496)
    # SSA begins for if statement (line 232)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 234):
    
    # Assigning a Num to a Name (line 234):
    int_28497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 234, 17), 'int')
    # Assigning a type to the variable 'oldend' (line 234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 8), 'oldend', int_28497)
    
    # Assigning a BinOp to a Name (line 235):
    
    # Assigning a BinOp to a Name (line 235):
    # Getting the type of 'level' (line 235)
    level_28498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 19), 'level')
    int_28499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 27), 'int')
    # Applying the binary operator '+' (line 235)
    result_add_28500 = python_operator(stypy.reporting.localization.Localization(__file__, 235, 19), '+', level_28498, int_28499)
    
    # Assigning a type to the variable 'newlevel' (line 235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 8), 'newlevel', result_add_28500)
    
    # Getting the type of 'struct' (line 236)
    struct_28501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 19), 'struct')
    # Testing the type of a for loop iterable (line 236)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 236, 8), struct_28501)
    # Getting the type of the for loop variable (line 236)
    for_loop_var_28502 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 236, 8), struct_28501)
    # Assigning a type to the variable 'sub' (line 236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 8), 'sub', for_loop_var_28502)
    # SSA begins for a for statement (line 236)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 237):
    
    # Assigning a Subscript to a Name (line 237):
    
    # Obtaining the type of the subscript
    # Getting the type of 'oldend' (line 237)
    oldend_28503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 24), 'oldend')
    
    # Obtaining the type of the subscript
    int_28504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 35), 'int')
    # Getting the type of 'sub' (line 237)
    sub_28505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 31), 'sub')
    # Obtaining the member '__getitem__' of a type (line 237)
    getitem___28506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 31), sub_28505, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 237)
    subscript_call_result_28507 = invoke(stypy.reporting.localization.Localization(__file__, 237, 31), getitem___28506, int_28504)
    
    slice_28508 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 237, 19), oldend_28503, subscript_call_result_28507, None)
    # Getting the type of 'astr' (line 237)
    astr_28509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 19), 'astr')
    # Obtaining the member '__getitem__' of a type (line 237)
    getitem___28510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 19), astr_28509, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 237)
    subscript_call_result_28511 = invoke(stypy.reporting.localization.Localization(__file__, 237, 19), getitem___28510, slice_28508)
    
    # Assigning a type to the variable 'pref' (line 237)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 12), 'pref', subscript_call_result_28511)
    
    # Assigning a Subscript to a Name (line 238):
    
    # Assigning a Subscript to a Name (line 238):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_28512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 28), 'int')
    # Getting the type of 'sub' (line 238)
    sub_28513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 24), 'sub')
    # Obtaining the member '__getitem__' of a type (line 238)
    getitem___28514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 24), sub_28513, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 238)
    subscript_call_result_28515 = invoke(stypy.reporting.localization.Localization(__file__, 238, 24), getitem___28514, int_28512)
    
    
    # Obtaining the type of the subscript
    int_28516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 35), 'int')
    # Getting the type of 'sub' (line 238)
    sub_28517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 31), 'sub')
    # Obtaining the member '__getitem__' of a type (line 238)
    getitem___28518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 31), sub_28517, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 238)
    subscript_call_result_28519 = invoke(stypy.reporting.localization.Localization(__file__, 238, 31), getitem___28518, int_28516)
    
    slice_28520 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 238, 19), subscript_call_result_28515, subscript_call_result_28519, None)
    # Getting the type of 'astr' (line 238)
    astr_28521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 19), 'astr')
    # Obtaining the member '__getitem__' of a type (line 238)
    getitem___28522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 19), astr_28521, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 238)
    subscript_call_result_28523 = invoke(stypy.reporting.localization.Localization(__file__, 238, 19), getitem___28522, slice_28520)
    
    # Assigning a type to the variable 'head' (line 238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 12), 'head', subscript_call_result_28523)
    
    # Assigning a Subscript to a Name (line 239):
    
    # Assigning a Subscript to a Name (line 239):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_28524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 239, 28), 'int')
    # Getting the type of 'sub' (line 239)
    sub_28525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 24), 'sub')
    # Obtaining the member '__getitem__' of a type (line 239)
    getitem___28526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 24), sub_28525, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 239)
    subscript_call_result_28527 = invoke(stypy.reporting.localization.Localization(__file__, 239, 24), getitem___28526, int_28524)
    
    
    # Obtaining the type of the subscript
    int_28528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 239, 35), 'int')
    # Getting the type of 'sub' (line 239)
    sub_28529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 31), 'sub')
    # Obtaining the member '__getitem__' of a type (line 239)
    getitem___28530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 31), sub_28529, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 239)
    subscript_call_result_28531 = invoke(stypy.reporting.localization.Localization(__file__, 239, 31), getitem___28530, int_28528)
    
    slice_28532 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 239, 19), subscript_call_result_28527, subscript_call_result_28531, None)
    # Getting the type of 'astr' (line 239)
    astr_28533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 19), 'astr')
    # Obtaining the member '__getitem__' of a type (line 239)
    getitem___28534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 19), astr_28533, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 239)
    subscript_call_result_28535 = invoke(stypy.reporting.localization.Localization(__file__, 239, 19), getitem___28534, slice_28532)
    
    # Assigning a type to the variable 'text' (line 239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 239, 12), 'text', subscript_call_result_28535)
    
    # Assigning a Subscript to a Name (line 240):
    
    # Assigning a Subscript to a Name (line 240):
    
    # Obtaining the type of the subscript
    int_28536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 25), 'int')
    # Getting the type of 'sub' (line 240)
    sub_28537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 21), 'sub')
    # Obtaining the member '__getitem__' of a type (line 240)
    getitem___28538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 21), sub_28537, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 240)
    subscript_call_result_28539 = invoke(stypy.reporting.localization.Localization(__file__, 240, 21), getitem___28538, int_28536)
    
    # Assigning a type to the variable 'oldend' (line 240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 12), 'oldend', subscript_call_result_28539)
    
    # Assigning a BinOp to a Name (line 241):
    
    # Assigning a BinOp to a Name (line 241):
    # Getting the type of 'line' (line 241)
    line_28540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 22), 'line')
    
    # Obtaining the type of the subscript
    int_28541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 33), 'int')
    # Getting the type of 'sub' (line 241)
    sub_28542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 29), 'sub')
    # Obtaining the member '__getitem__' of a type (line 241)
    getitem___28543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 29), sub_28542, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 241)
    subscript_call_result_28544 = invoke(stypy.reporting.localization.Localization(__file__, 241, 29), getitem___28543, int_28541)
    
    # Applying the binary operator '+' (line 241)
    result_add_28545 = python_operator(stypy.reporting.localization.Localization(__file__, 241, 22), '+', line_28540, subscript_call_result_28544)
    
    # Assigning a type to the variable 'newline' (line 241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 12), 'newline', result_add_28545)
    
    # Call to append(...): (line 242)
    # Processing the call arguments (line 242)
    
    # Call to sub(...): (line 242)
    # Processing the call arguments (line 242)
    # Getting the type of 'replace' (line 242)
    replace_28550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 39), 'replace', False)
    # Getting the type of 'pref' (line 242)
    pref_28551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 48), 'pref', False)
    # Processing the call keyword arguments (line 242)
    kwargs_28552 = {}
    # Getting the type of 'replace_re' (line 242)
    replace_re_28548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 24), 'replace_re', False)
    # Obtaining the member 'sub' of a type (line 242)
    sub_28549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 24), replace_re_28548, 'sub')
    # Calling sub(args, kwargs) (line 242)
    sub_call_result_28553 = invoke(stypy.reporting.localization.Localization(__file__, 242, 24), sub_28549, *[replace_28550, pref_28551], **kwargs_28552)
    
    # Processing the call keyword arguments (line 242)
    kwargs_28554 = {}
    # Getting the type of 'code' (line 242)
    code_28546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 12), 'code', False)
    # Obtaining the member 'append' of a type (line 242)
    append_28547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 12), code_28546, 'append')
    # Calling append(args, kwargs) (line 242)
    append_call_result_28555 = invoke(stypy.reporting.localization.Localization(__file__, 242, 12), append_28547, *[sub_call_result_28553], **kwargs_28554)
    
    
    
    # SSA begins for try-except statement (line 243)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 244):
    
    # Assigning a Call to a Name (line 244):
    
    # Call to parse_loop_header(...): (line 244)
    # Processing the call arguments (line 244)
    # Getting the type of 'head' (line 244)
    head_28557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 44), 'head', False)
    # Processing the call keyword arguments (line 244)
    kwargs_28558 = {}
    # Getting the type of 'parse_loop_header' (line 244)
    parse_loop_header_28556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 26), 'parse_loop_header', False)
    # Calling parse_loop_header(args, kwargs) (line 244)
    parse_loop_header_call_result_28559 = invoke(stypy.reporting.localization.Localization(__file__, 244, 26), parse_loop_header_28556, *[head_28557], **kwargs_28558)
    
    # Assigning a type to the variable 'envlist' (line 244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 16), 'envlist', parse_loop_header_call_result_28559)
    # SSA branch for the except part of a try statement (line 243)
    # SSA branch for the except 'ValueError' branch of a try statement (line 243)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 246):
    
    # Assigning a Call to a Name (line 246):
    
    # Call to get_exception(...): (line 246)
    # Processing the call keyword arguments (line 246)
    kwargs_28561 = {}
    # Getting the type of 'get_exception' (line 246)
    get_exception_28560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 20), 'get_exception', False)
    # Calling get_exception(args, kwargs) (line 246)
    get_exception_call_result_28562 = invoke(stypy.reporting.localization.Localization(__file__, 246, 20), get_exception_28560, *[], **kwargs_28561)
    
    # Assigning a type to the variable 'e' (line 246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 246, 16), 'e', get_exception_call_result_28562)
    
    # Assigning a BinOp to a Name (line 247):
    
    # Assigning a BinOp to a Name (line 247):
    str_28563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 22), 'str', 'line %d: %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 247)
    tuple_28564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 247)
    # Adding element type (line 247)
    # Getting the type of 'newline' (line 247)
    newline_28565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 39), 'newline')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 247, 39), tuple_28564, newline_28565)
    # Adding element type (line 247)
    # Getting the type of 'e' (line 247)
    e_28566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 48), 'e')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 247, 39), tuple_28564, e_28566)
    
    # Applying the binary operator '%' (line 247)
    result_mod_28567 = python_operator(stypy.reporting.localization.Localization(__file__, 247, 22), '%', str_28563, tuple_28564)
    
    # Assigning a type to the variable 'msg' (line 247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 16), 'msg', result_mod_28567)
    
    # Call to ValueError(...): (line 248)
    # Processing the call arguments (line 248)
    # Getting the type of 'msg' (line 248)
    msg_28569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 33), 'msg', False)
    # Processing the call keyword arguments (line 248)
    kwargs_28570 = {}
    # Getting the type of 'ValueError' (line 248)
    ValueError_28568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 248)
    ValueError_call_result_28571 = invoke(stypy.reporting.localization.Localization(__file__, 248, 22), ValueError_28568, *[msg_28569], **kwargs_28570)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 248, 16), ValueError_call_result_28571, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 243)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'envlist' (line 249)
    envlist_28572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 26), 'envlist')
    # Testing the type of a for loop iterable (line 249)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 249, 12), envlist_28572)
    # Getting the type of the for loop variable (line 249)
    for_loop_var_28573 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 249, 12), envlist_28572)
    # Assigning a type to the variable 'newenv' (line 249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 12), 'newenv', for_loop_var_28573)
    # SSA begins for a for statement (line 249)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to update(...): (line 250)
    # Processing the call arguments (line 250)
    # Getting the type of 'env' (line 250)
    env_28576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 30), 'env', False)
    # Processing the call keyword arguments (line 250)
    kwargs_28577 = {}
    # Getting the type of 'newenv' (line 250)
    newenv_28574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 16), 'newenv', False)
    # Obtaining the member 'update' of a type (line 250)
    update_28575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 16), newenv_28574, 'update')
    # Calling update(args, kwargs) (line 250)
    update_call_result_28578 = invoke(stypy.reporting.localization.Localization(__file__, 250, 16), update_28575, *[env_28576], **kwargs_28577)
    
    
    # Assigning a Call to a Name (line 251):
    
    # Assigning a Call to a Name (line 251):
    
    # Call to parse_string(...): (line 251)
    # Processing the call arguments (line 251)
    # Getting the type of 'text' (line 251)
    text_28580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 39), 'text', False)
    # Getting the type of 'newenv' (line 251)
    newenv_28581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 45), 'newenv', False)
    # Getting the type of 'newlevel' (line 251)
    newlevel_28582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 53), 'newlevel', False)
    # Getting the type of 'newline' (line 251)
    newline_28583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 63), 'newline', False)
    # Processing the call keyword arguments (line 251)
    kwargs_28584 = {}
    # Getting the type of 'parse_string' (line 251)
    parse_string_28579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 26), 'parse_string', False)
    # Calling parse_string(args, kwargs) (line 251)
    parse_string_call_result_28585 = invoke(stypy.reporting.localization.Localization(__file__, 251, 26), parse_string_28579, *[text_28580, newenv_28581, newlevel_28582, newline_28583], **kwargs_28584)
    
    # Assigning a type to the variable 'newcode' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 16), 'newcode', parse_string_call_result_28585)
    
    # Call to extend(...): (line 252)
    # Processing the call arguments (line 252)
    # Getting the type of 'newcode' (line 252)
    newcode_28588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 28), 'newcode', False)
    # Processing the call keyword arguments (line 252)
    kwargs_28589 = {}
    # Getting the type of 'code' (line 252)
    code_28586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 16), 'code', False)
    # Obtaining the member 'extend' of a type (line 252)
    extend_28587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 16), code_28586, 'extend')
    # Calling extend(args, kwargs) (line 252)
    extend_call_result_28590 = invoke(stypy.reporting.localization.Localization(__file__, 252, 16), extend_28587, *[newcode_28588], **kwargs_28589)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 253):
    
    # Assigning a Subscript to a Name (line 253):
    
    # Obtaining the type of the subscript
    # Getting the type of 'oldend' (line 253)
    oldend_28591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 20), 'oldend')
    slice_28592 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 253, 15), oldend_28591, None, None)
    # Getting the type of 'astr' (line 253)
    astr_28593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 15), 'astr')
    # Obtaining the member '__getitem__' of a type (line 253)
    getitem___28594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 15), astr_28593, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 253)
    subscript_call_result_28595 = invoke(stypy.reporting.localization.Localization(__file__, 253, 15), getitem___28594, slice_28592)
    
    # Assigning a type to the variable 'suff' (line 253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 8), 'suff', subscript_call_result_28595)
    
    # Call to append(...): (line 254)
    # Processing the call arguments (line 254)
    
    # Call to sub(...): (line 254)
    # Processing the call arguments (line 254)
    # Getting the type of 'replace' (line 254)
    replace_28600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 35), 'replace', False)
    # Getting the type of 'suff' (line 254)
    suff_28601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 44), 'suff', False)
    # Processing the call keyword arguments (line 254)
    kwargs_28602 = {}
    # Getting the type of 'replace_re' (line 254)
    replace_re_28598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 20), 'replace_re', False)
    # Obtaining the member 'sub' of a type (line 254)
    sub_28599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 20), replace_re_28598, 'sub')
    # Calling sub(args, kwargs) (line 254)
    sub_call_result_28603 = invoke(stypy.reporting.localization.Localization(__file__, 254, 20), sub_28599, *[replace_28600, suff_28601], **kwargs_28602)
    
    # Processing the call keyword arguments (line 254)
    kwargs_28604 = {}
    # Getting the type of 'code' (line 254)
    code_28596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'code', False)
    # Obtaining the member 'append' of a type (line 254)
    append_28597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 8), code_28596, 'append')
    # Calling append(args, kwargs) (line 254)
    append_call_result_28605 = invoke(stypy.reporting.localization.Localization(__file__, 254, 8), append_28597, *[sub_call_result_28603], **kwargs_28604)
    
    # SSA branch for the else part of an if statement (line 232)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 257)
    # Processing the call arguments (line 257)
    
    # Call to sub(...): (line 257)
    # Processing the call arguments (line 257)
    # Getting the type of 'replace' (line 257)
    replace_28610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 35), 'replace', False)
    # Getting the type of 'astr' (line 257)
    astr_28611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 44), 'astr', False)
    # Processing the call keyword arguments (line 257)
    kwargs_28612 = {}
    # Getting the type of 'replace_re' (line 257)
    replace_re_28608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 20), 'replace_re', False)
    # Obtaining the member 'sub' of a type (line 257)
    sub_28609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 20), replace_re_28608, 'sub')
    # Calling sub(args, kwargs) (line 257)
    sub_call_result_28613 = invoke(stypy.reporting.localization.Localization(__file__, 257, 20), sub_28609, *[replace_28610, astr_28611], **kwargs_28612)
    
    # Processing the call keyword arguments (line 257)
    kwargs_28614 = {}
    # Getting the type of 'code' (line 257)
    code_28606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'code', False)
    # Obtaining the member 'append' of a type (line 257)
    append_28607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 8), code_28606, 'append')
    # Calling append(args, kwargs) (line 257)
    append_call_result_28615 = invoke(stypy.reporting.localization.Localization(__file__, 257, 8), append_28607, *[sub_call_result_28613], **kwargs_28614)
    
    # SSA join for if statement (line 232)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 258)
    # Processing the call arguments (line 258)
    str_28618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 16), 'str', '\n')
    # Processing the call keyword arguments (line 258)
    kwargs_28619 = {}
    # Getting the type of 'code' (line 258)
    code_28616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 4), 'code', False)
    # Obtaining the member 'append' of a type (line 258)
    append_28617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 4), code_28616, 'append')
    # Calling append(args, kwargs) (line 258)
    append_call_result_28620 = invoke(stypy.reporting.localization.Localization(__file__, 258, 4), append_28617, *[str_28618], **kwargs_28619)
    
    
    # Call to join(...): (line 259)
    # Processing the call arguments (line 259)
    # Getting the type of 'code' (line 259)
    code_28623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 19), 'code', False)
    # Processing the call keyword arguments (line 259)
    kwargs_28624 = {}
    str_28621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 11), 'str', '')
    # Obtaining the member 'join' of a type (line 259)
    join_28622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 11), str_28621, 'join')
    # Calling join(args, kwargs) (line 259)
    join_call_result_28625 = invoke(stypy.reporting.localization.Localization(__file__, 259, 11), join_28622, *[code_28623], **kwargs_28624)
    
    # Assigning a type to the variable 'stypy_return_type' (line 259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 4), 'stypy_return_type', join_call_result_28625)
    
    # ################# End of 'parse_string(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'parse_string' in the type store
    # Getting the type of 'stypy_return_type' (line 217)
    stypy_return_type_28626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_28626)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'parse_string'
    return stypy_return_type_28626

# Assigning a type to the variable 'parse_string' (line 217)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 0), 'parse_string', parse_string)

@norecursion
def process_str(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'process_str'
    module_type_store = module_type_store.open_function_context('process_str', 261, 0, False)
    
    # Passed parameters checking function
    process_str.stypy_localization = localization
    process_str.stypy_type_of_self = None
    process_str.stypy_type_store = module_type_store
    process_str.stypy_function_name = 'process_str'
    process_str.stypy_param_names_list = ['astr']
    process_str.stypy_varargs_param_name = None
    process_str.stypy_kwargs_param_name = None
    process_str.stypy_call_defaults = defaults
    process_str.stypy_call_varargs = varargs
    process_str.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'process_str', ['astr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'process_str', localization, ['astr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'process_str(...)' code ##################

    
    # Assigning a List to a Name (line 262):
    
    # Assigning a List to a Name (line 262):
    
    # Obtaining an instance of the builtin type 'list' (line 262)
    list_28627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 262)
    # Adding element type (line 262)
    # Getting the type of 'header' (line 262)
    header_28628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 12), 'header')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 11), list_28627, header_28628)
    
    # Assigning a type to the variable 'code' (line 262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 4), 'code', list_28627)
    
    # Call to extend(...): (line 263)
    # Processing the call arguments (line 263)
    
    # Call to parse_string(...): (line 263)
    # Processing the call arguments (line 263)
    # Getting the type of 'astr' (line 263)
    astr_28632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 29), 'astr', False)
    # Getting the type of 'global_names' (line 263)
    global_names_28633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 35), 'global_names', False)
    int_28634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 49), 'int')
    int_28635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 52), 'int')
    # Processing the call keyword arguments (line 263)
    kwargs_28636 = {}
    # Getting the type of 'parse_string' (line 263)
    parse_string_28631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 16), 'parse_string', False)
    # Calling parse_string(args, kwargs) (line 263)
    parse_string_call_result_28637 = invoke(stypy.reporting.localization.Localization(__file__, 263, 16), parse_string_28631, *[astr_28632, global_names_28633, int_28634, int_28635], **kwargs_28636)
    
    # Processing the call keyword arguments (line 263)
    kwargs_28638 = {}
    # Getting the type of 'code' (line 263)
    code_28629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 4), 'code', False)
    # Obtaining the member 'extend' of a type (line 263)
    extend_28630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 4), code_28629, 'extend')
    # Calling extend(args, kwargs) (line 263)
    extend_call_result_28639 = invoke(stypy.reporting.localization.Localization(__file__, 263, 4), extend_28630, *[parse_string_call_result_28637], **kwargs_28638)
    
    
    # Call to join(...): (line 264)
    # Processing the call arguments (line 264)
    # Getting the type of 'code' (line 264)
    code_28642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 19), 'code', False)
    # Processing the call keyword arguments (line 264)
    kwargs_28643 = {}
    str_28640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 11), 'str', '')
    # Obtaining the member 'join' of a type (line 264)
    join_28641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 11), str_28640, 'join')
    # Calling join(args, kwargs) (line 264)
    join_call_result_28644 = invoke(stypy.reporting.localization.Localization(__file__, 264, 11), join_28641, *[code_28642], **kwargs_28643)
    
    # Assigning a type to the variable 'stypy_return_type' (line 264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 4), 'stypy_return_type', join_call_result_28644)
    
    # ################# End of 'process_str(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'process_str' in the type store
    # Getting the type of 'stypy_return_type' (line 261)
    stypy_return_type_28645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_28645)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'process_str'
    return stypy_return_type_28645

# Assigning a type to the variable 'process_str' (line 261)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 0), 'process_str', process_str)

# Assigning a Call to a Name (line 267):

# Assigning a Call to a Name (line 267):

# Call to compile(...): (line 267)
# Processing the call arguments (line 267)
str_28648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 28), 'str', '(\\n|\\A)#include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+[.]src)[\'\\"]')
# Getting the type of 're' (line 268)
re_28649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 65), 're', False)
# Obtaining the member 'I' of a type (line 268)
I_28650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 65), re_28649, 'I')
# Processing the call keyword arguments (line 267)
kwargs_28651 = {}
# Getting the type of 're' (line 267)
re_28646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 17), 're', False)
# Obtaining the member 'compile' of a type (line 267)
compile_28647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 17), re_28646, 'compile')
# Calling compile(args, kwargs) (line 267)
compile_call_result_28652 = invoke(stypy.reporting.localization.Localization(__file__, 267, 17), compile_28647, *[str_28648, I_28650], **kwargs_28651)

# Assigning a type to the variable 'include_src_re' (line 267)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 0), 'include_src_re', compile_call_result_28652)

@norecursion
def resolve_includes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'resolve_includes'
    module_type_store = module_type_store.open_function_context('resolve_includes', 270, 0, False)
    
    # Passed parameters checking function
    resolve_includes.stypy_localization = localization
    resolve_includes.stypy_type_of_self = None
    resolve_includes.stypy_type_store = module_type_store
    resolve_includes.stypy_function_name = 'resolve_includes'
    resolve_includes.stypy_param_names_list = ['source']
    resolve_includes.stypy_varargs_param_name = None
    resolve_includes.stypy_kwargs_param_name = None
    resolve_includes.stypy_call_defaults = defaults
    resolve_includes.stypy_call_varargs = varargs
    resolve_includes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'resolve_includes', ['source'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'resolve_includes', localization, ['source'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'resolve_includes(...)' code ##################

    
    # Assigning a Call to a Name (line 271):
    
    # Assigning a Call to a Name (line 271):
    
    # Call to dirname(...): (line 271)
    # Processing the call arguments (line 271)
    # Getting the type of 'source' (line 271)
    source_28656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 24), 'source', False)
    # Processing the call keyword arguments (line 271)
    kwargs_28657 = {}
    # Getting the type of 'os' (line 271)
    os_28653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'os', False)
    # Obtaining the member 'path' of a type (line 271)
    path_28654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 8), os_28653, 'path')
    # Obtaining the member 'dirname' of a type (line 271)
    dirname_28655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 8), path_28654, 'dirname')
    # Calling dirname(args, kwargs) (line 271)
    dirname_call_result_28658 = invoke(stypy.reporting.localization.Localization(__file__, 271, 8), dirname_28655, *[source_28656], **kwargs_28657)
    
    # Assigning a type to the variable 'd' (line 271)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 4), 'd', dirname_call_result_28658)
    
    # Assigning a Call to a Name (line 272):
    
    # Assigning a Call to a Name (line 272):
    
    # Call to open(...): (line 272)
    # Processing the call arguments (line 272)
    # Getting the type of 'source' (line 272)
    source_28660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 15), 'source', False)
    # Processing the call keyword arguments (line 272)
    kwargs_28661 = {}
    # Getting the type of 'open' (line 272)
    open_28659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 10), 'open', False)
    # Calling open(args, kwargs) (line 272)
    open_call_result_28662 = invoke(stypy.reporting.localization.Localization(__file__, 272, 10), open_28659, *[source_28660], **kwargs_28661)
    
    # Assigning a type to the variable 'fid' (line 272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 4), 'fid', open_call_result_28662)
    
    # Assigning a List to a Name (line 273):
    
    # Assigning a List to a Name (line 273):
    
    # Obtaining an instance of the builtin type 'list' (line 273)
    list_28663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 273)
    
    # Assigning a type to the variable 'lines' (line 273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 4), 'lines', list_28663)
    
    # Getting the type of 'fid' (line 274)
    fid_28664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 16), 'fid')
    # Testing the type of a for loop iterable (line 274)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 274, 4), fid_28664)
    # Getting the type of the for loop variable (line 274)
    for_loop_var_28665 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 274, 4), fid_28664)
    # Assigning a type to the variable 'line' (line 274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'line', for_loop_var_28665)
    # SSA begins for a for statement (line 274)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 275):
    
    # Assigning a Call to a Name (line 275):
    
    # Call to match(...): (line 275)
    # Processing the call arguments (line 275)
    # Getting the type of 'line' (line 275)
    line_28668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 33), 'line', False)
    # Processing the call keyword arguments (line 275)
    kwargs_28669 = {}
    # Getting the type of 'include_src_re' (line 275)
    include_src_re_28666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 12), 'include_src_re', False)
    # Obtaining the member 'match' of a type (line 275)
    match_28667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 12), include_src_re_28666, 'match')
    # Calling match(args, kwargs) (line 275)
    match_call_result_28670 = invoke(stypy.reporting.localization.Localization(__file__, 275, 12), match_28667, *[line_28668], **kwargs_28669)
    
    # Assigning a type to the variable 'm' (line 275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 8), 'm', match_call_result_28670)
    
    # Getting the type of 'm' (line 276)
    m_28671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 11), 'm')
    # Testing the type of an if condition (line 276)
    if_condition_28672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 276, 8), m_28671)
    # Assigning a type to the variable 'if_condition_28672' (line 276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'if_condition_28672', if_condition_28672)
    # SSA begins for if statement (line 276)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 277):
    
    # Assigning a Call to a Name (line 277):
    
    # Call to group(...): (line 277)
    # Processing the call arguments (line 277)
    str_28675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 25), 'str', 'name')
    # Processing the call keyword arguments (line 277)
    kwargs_28676 = {}
    # Getting the type of 'm' (line 277)
    m_28673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 17), 'm', False)
    # Obtaining the member 'group' of a type (line 277)
    group_28674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 17), m_28673, 'group')
    # Calling group(args, kwargs) (line 277)
    group_call_result_28677 = invoke(stypy.reporting.localization.Localization(__file__, 277, 17), group_28674, *[str_28675], **kwargs_28676)
    
    # Assigning a type to the variable 'fn' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'fn', group_call_result_28677)
    
    
    
    # Call to isabs(...): (line 278)
    # Processing the call arguments (line 278)
    # Getting the type of 'fn' (line 278)
    fn_28681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 33), 'fn', False)
    # Processing the call keyword arguments (line 278)
    kwargs_28682 = {}
    # Getting the type of 'os' (line 278)
    os_28678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 19), 'os', False)
    # Obtaining the member 'path' of a type (line 278)
    path_28679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 19), os_28678, 'path')
    # Obtaining the member 'isabs' of a type (line 278)
    isabs_28680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 19), path_28679, 'isabs')
    # Calling isabs(args, kwargs) (line 278)
    isabs_call_result_28683 = invoke(stypy.reporting.localization.Localization(__file__, 278, 19), isabs_28680, *[fn_28681], **kwargs_28682)
    
    # Applying the 'not' unary operator (line 278)
    result_not__28684 = python_operator(stypy.reporting.localization.Localization(__file__, 278, 15), 'not', isabs_call_result_28683)
    
    # Testing the type of an if condition (line 278)
    if_condition_28685 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 278, 12), result_not__28684)
    # Assigning a type to the variable 'if_condition_28685' (line 278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'if_condition_28685', if_condition_28685)
    # SSA begins for if statement (line 278)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 279):
    
    # Assigning a Call to a Name (line 279):
    
    # Call to join(...): (line 279)
    # Processing the call arguments (line 279)
    # Getting the type of 'd' (line 279)
    d_28689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 34), 'd', False)
    # Getting the type of 'fn' (line 279)
    fn_28690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 37), 'fn', False)
    # Processing the call keyword arguments (line 279)
    kwargs_28691 = {}
    # Getting the type of 'os' (line 279)
    os_28686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 21), 'os', False)
    # Obtaining the member 'path' of a type (line 279)
    path_28687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 21), os_28686, 'path')
    # Obtaining the member 'join' of a type (line 279)
    join_28688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 21), path_28687, 'join')
    # Calling join(args, kwargs) (line 279)
    join_call_result_28692 = invoke(stypy.reporting.localization.Localization(__file__, 279, 21), join_28688, *[d_28689, fn_28690], **kwargs_28691)
    
    # Assigning a type to the variable 'fn' (line 279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 16), 'fn', join_call_result_28692)
    # SSA join for if statement (line 278)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isfile(...): (line 280)
    # Processing the call arguments (line 280)
    # Getting the type of 'fn' (line 280)
    fn_28696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 30), 'fn', False)
    # Processing the call keyword arguments (line 280)
    kwargs_28697 = {}
    # Getting the type of 'os' (line 280)
    os_28693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 280)
    path_28694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 15), os_28693, 'path')
    # Obtaining the member 'isfile' of a type (line 280)
    isfile_28695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 15), path_28694, 'isfile')
    # Calling isfile(args, kwargs) (line 280)
    isfile_call_result_28698 = invoke(stypy.reporting.localization.Localization(__file__, 280, 15), isfile_28695, *[fn_28696], **kwargs_28697)
    
    # Testing the type of an if condition (line 280)
    if_condition_28699 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 280, 12), isfile_call_result_28698)
    # Assigning a type to the variable 'if_condition_28699' (line 280)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 12), 'if_condition_28699', if_condition_28699)
    # SSA begins for if statement (line 280)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 281)
    # Processing the call arguments (line 281)
    str_28701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 22), 'str', 'Including file')
    # Getting the type of 'fn' (line 281)
    fn_28702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 40), 'fn', False)
    # Processing the call keyword arguments (line 281)
    kwargs_28703 = {}
    # Getting the type of 'print' (line 281)
    print_28700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 16), 'print', False)
    # Calling print(args, kwargs) (line 281)
    print_call_result_28704 = invoke(stypy.reporting.localization.Localization(__file__, 281, 16), print_28700, *[str_28701, fn_28702], **kwargs_28703)
    
    
    # Call to extend(...): (line 282)
    # Processing the call arguments (line 282)
    
    # Call to resolve_includes(...): (line 282)
    # Processing the call arguments (line 282)
    # Getting the type of 'fn' (line 282)
    fn_28708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 46), 'fn', False)
    # Processing the call keyword arguments (line 282)
    kwargs_28709 = {}
    # Getting the type of 'resolve_includes' (line 282)
    resolve_includes_28707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 29), 'resolve_includes', False)
    # Calling resolve_includes(args, kwargs) (line 282)
    resolve_includes_call_result_28710 = invoke(stypy.reporting.localization.Localization(__file__, 282, 29), resolve_includes_28707, *[fn_28708], **kwargs_28709)
    
    # Processing the call keyword arguments (line 282)
    kwargs_28711 = {}
    # Getting the type of 'lines' (line 282)
    lines_28705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 16), 'lines', False)
    # Obtaining the member 'extend' of a type (line 282)
    extend_28706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 16), lines_28705, 'extend')
    # Calling extend(args, kwargs) (line 282)
    extend_call_result_28712 = invoke(stypy.reporting.localization.Localization(__file__, 282, 16), extend_28706, *[resolve_includes_call_result_28710], **kwargs_28711)
    
    # SSA branch for the else part of an if statement (line 280)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 284)
    # Processing the call arguments (line 284)
    # Getting the type of 'line' (line 284)
    line_28715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 29), 'line', False)
    # Processing the call keyword arguments (line 284)
    kwargs_28716 = {}
    # Getting the type of 'lines' (line 284)
    lines_28713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 16), 'lines', False)
    # Obtaining the member 'append' of a type (line 284)
    append_28714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 16), lines_28713, 'append')
    # Calling append(args, kwargs) (line 284)
    append_call_result_28717 = invoke(stypy.reporting.localization.Localization(__file__, 284, 16), append_28714, *[line_28715], **kwargs_28716)
    
    # SSA join for if statement (line 280)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 276)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 286)
    # Processing the call arguments (line 286)
    # Getting the type of 'line' (line 286)
    line_28720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 25), 'line', False)
    # Processing the call keyword arguments (line 286)
    kwargs_28721 = {}
    # Getting the type of 'lines' (line 286)
    lines_28718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'lines', False)
    # Obtaining the member 'append' of a type (line 286)
    append_28719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 12), lines_28718, 'append')
    # Calling append(args, kwargs) (line 286)
    append_call_result_28722 = invoke(stypy.reporting.localization.Localization(__file__, 286, 12), append_28719, *[line_28720], **kwargs_28721)
    
    # SSA join for if statement (line 276)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to close(...): (line 287)
    # Processing the call keyword arguments (line 287)
    kwargs_28725 = {}
    # Getting the type of 'fid' (line 287)
    fid_28723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 4), 'fid', False)
    # Obtaining the member 'close' of a type (line 287)
    close_28724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 4), fid_28723, 'close')
    # Calling close(args, kwargs) (line 287)
    close_call_result_28726 = invoke(stypy.reporting.localization.Localization(__file__, 287, 4), close_28724, *[], **kwargs_28725)
    
    # Getting the type of 'lines' (line 288)
    lines_28727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 11), 'lines')
    # Assigning a type to the variable 'stypy_return_type' (line 288)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 4), 'stypy_return_type', lines_28727)
    
    # ################# End of 'resolve_includes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'resolve_includes' in the type store
    # Getting the type of 'stypy_return_type' (line 270)
    stypy_return_type_28728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_28728)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'resolve_includes'
    return stypy_return_type_28728

# Assigning a type to the variable 'resolve_includes' (line 270)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 0), 'resolve_includes', resolve_includes)

@norecursion
def process_file(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'process_file'
    module_type_store = module_type_store.open_function_context('process_file', 290, 0, False)
    
    # Passed parameters checking function
    process_file.stypy_localization = localization
    process_file.stypy_type_of_self = None
    process_file.stypy_type_store = module_type_store
    process_file.stypy_function_name = 'process_file'
    process_file.stypy_param_names_list = ['source']
    process_file.stypy_varargs_param_name = None
    process_file.stypy_kwargs_param_name = None
    process_file.stypy_call_defaults = defaults
    process_file.stypy_call_varargs = varargs
    process_file.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'process_file', ['source'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'process_file', localization, ['source'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'process_file(...)' code ##################

    
    # Assigning a Call to a Name (line 291):
    
    # Assigning a Call to a Name (line 291):
    
    # Call to resolve_includes(...): (line 291)
    # Processing the call arguments (line 291)
    # Getting the type of 'source' (line 291)
    source_28730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 29), 'source', False)
    # Processing the call keyword arguments (line 291)
    kwargs_28731 = {}
    # Getting the type of 'resolve_includes' (line 291)
    resolve_includes_28729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'resolve_includes', False)
    # Calling resolve_includes(args, kwargs) (line 291)
    resolve_includes_call_result_28732 = invoke(stypy.reporting.localization.Localization(__file__, 291, 12), resolve_includes_28729, *[source_28730], **kwargs_28731)
    
    # Assigning a type to the variable 'lines' (line 291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 4), 'lines', resolve_includes_call_result_28732)
    
    # Assigning a Call to a Name (line 292):
    
    # Assigning a Call to a Name (line 292):
    
    # Call to replace(...): (line 292)
    # Processing the call arguments (line 292)
    str_28740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 50), 'str', '\\')
    str_28741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 56), 'str', '\\\\')
    # Processing the call keyword arguments (line 292)
    kwargs_28742 = {}
    
    # Call to normcase(...): (line 292)
    # Processing the call arguments (line 292)
    # Getting the type of 'source' (line 292)
    source_28736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 34), 'source', False)
    # Processing the call keyword arguments (line 292)
    kwargs_28737 = {}
    # Getting the type of 'os' (line 292)
    os_28733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 17), 'os', False)
    # Obtaining the member 'path' of a type (line 292)
    path_28734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 17), os_28733, 'path')
    # Obtaining the member 'normcase' of a type (line 292)
    normcase_28735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 17), path_28734, 'normcase')
    # Calling normcase(args, kwargs) (line 292)
    normcase_call_result_28738 = invoke(stypy.reporting.localization.Localization(__file__, 292, 17), normcase_28735, *[source_28736], **kwargs_28737)
    
    # Obtaining the member 'replace' of a type (line 292)
    replace_28739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 17), normcase_call_result_28738, 'replace')
    # Calling replace(args, kwargs) (line 292)
    replace_call_result_28743 = invoke(stypy.reporting.localization.Localization(__file__, 292, 17), replace_28739, *[str_28740, str_28741], **kwargs_28742)
    
    # Assigning a type to the variable 'sourcefile' (line 292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 4), 'sourcefile', replace_call_result_28743)
    
    
    # SSA begins for try-except statement (line 293)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 294):
    
    # Assigning a Call to a Name (line 294):
    
    # Call to process_str(...): (line 294)
    # Processing the call arguments (line 294)
    
    # Call to join(...): (line 294)
    # Processing the call arguments (line 294)
    # Getting the type of 'lines' (line 294)
    lines_28747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 35), 'lines', False)
    # Processing the call keyword arguments (line 294)
    kwargs_28748 = {}
    str_28745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 27), 'str', '')
    # Obtaining the member 'join' of a type (line 294)
    join_28746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 27), str_28745, 'join')
    # Calling join(args, kwargs) (line 294)
    join_call_result_28749 = invoke(stypy.reporting.localization.Localization(__file__, 294, 27), join_28746, *[lines_28747], **kwargs_28748)
    
    # Processing the call keyword arguments (line 294)
    kwargs_28750 = {}
    # Getting the type of 'process_str' (line 294)
    process_str_28744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 15), 'process_str', False)
    # Calling process_str(args, kwargs) (line 294)
    process_str_call_result_28751 = invoke(stypy.reporting.localization.Localization(__file__, 294, 15), process_str_28744, *[join_call_result_28749], **kwargs_28750)
    
    # Assigning a type to the variable 'code' (line 294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 294, 8), 'code', process_str_call_result_28751)
    # SSA branch for the except part of a try statement (line 293)
    # SSA branch for the except 'ValueError' branch of a try statement (line 293)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 296):
    
    # Assigning a Call to a Name (line 296):
    
    # Call to get_exception(...): (line 296)
    # Processing the call keyword arguments (line 296)
    kwargs_28753 = {}
    # Getting the type of 'get_exception' (line 296)
    get_exception_28752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 12), 'get_exception', False)
    # Calling get_exception(args, kwargs) (line 296)
    get_exception_call_result_28754 = invoke(stypy.reporting.localization.Localization(__file__, 296, 12), get_exception_28752, *[], **kwargs_28753)
    
    # Assigning a type to the variable 'e' (line 296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 8), 'e', get_exception_call_result_28754)
    
    # Call to ValueError(...): (line 297)
    # Processing the call arguments (line 297)
    str_28756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 25), 'str', 'In "%s" loop at %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 297)
    tuple_28757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 297)
    # Adding element type (line 297)
    # Getting the type of 'sourcefile' (line 297)
    sourcefile_28758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 49), 'sourcefile', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 297, 49), tuple_28757, sourcefile_28758)
    # Adding element type (line 297)
    # Getting the type of 'e' (line 297)
    e_28759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 61), 'e', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 297, 49), tuple_28757, e_28759)
    
    # Applying the binary operator '%' (line 297)
    result_mod_28760 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 25), '%', str_28756, tuple_28757)
    
    # Processing the call keyword arguments (line 297)
    kwargs_28761 = {}
    # Getting the type of 'ValueError' (line 297)
    ValueError_28755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 297)
    ValueError_call_result_28762 = invoke(stypy.reporting.localization.Localization(__file__, 297, 14), ValueError_28755, *[result_mod_28760], **kwargs_28761)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 297, 8), ValueError_call_result_28762, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 293)
    module_type_store = module_type_store.join_ssa_context()
    
    str_28763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 11), 'str', '#line 1 "%s"\n%s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 298)
    tuple_28764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 298)
    # Adding element type (line 298)
    # Getting the type of 'sourcefile' (line 298)
    sourcefile_28765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 33), 'sourcefile')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 298, 33), tuple_28764, sourcefile_28765)
    # Adding element type (line 298)
    # Getting the type of 'code' (line 298)
    code_28766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 45), 'code')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 298, 33), tuple_28764, code_28766)
    
    # Applying the binary operator '%' (line 298)
    result_mod_28767 = python_operator(stypy.reporting.localization.Localization(__file__, 298, 11), '%', str_28763, tuple_28764)
    
    # Assigning a type to the variable 'stypy_return_type' (line 298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 4), 'stypy_return_type', result_mod_28767)
    
    # ################# End of 'process_file(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'process_file' in the type store
    # Getting the type of 'stypy_return_type' (line 290)
    stypy_return_type_28768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_28768)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'process_file'
    return stypy_return_type_28768

# Assigning a type to the variable 'process_file' (line 290)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 0), 'process_file', process_file)

@norecursion
def unique_key(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'unique_key'
    module_type_store = module_type_store.open_function_context('unique_key', 301, 0, False)
    
    # Passed parameters checking function
    unique_key.stypy_localization = localization
    unique_key.stypy_type_of_self = None
    unique_key.stypy_type_store = module_type_store
    unique_key.stypy_function_name = 'unique_key'
    unique_key.stypy_param_names_list = ['adict']
    unique_key.stypy_varargs_param_name = None
    unique_key.stypy_kwargs_param_name = None
    unique_key.stypy_call_defaults = defaults
    unique_key.stypy_call_varargs = varargs
    unique_key.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'unique_key', ['adict'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'unique_key', localization, ['adict'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'unique_key(...)' code ##################

    
    # Assigning a Call to a Name (line 306):
    
    # Assigning a Call to a Name (line 306):
    
    # Call to list(...): (line 306)
    # Processing the call arguments (line 306)
    
    # Call to keys(...): (line 306)
    # Processing the call keyword arguments (line 306)
    kwargs_28772 = {}
    # Getting the type of 'adict' (line 306)
    adict_28770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 19), 'adict', False)
    # Obtaining the member 'keys' of a type (line 306)
    keys_28771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 19), adict_28770, 'keys')
    # Calling keys(args, kwargs) (line 306)
    keys_call_result_28773 = invoke(stypy.reporting.localization.Localization(__file__, 306, 19), keys_28771, *[], **kwargs_28772)
    
    # Processing the call keyword arguments (line 306)
    kwargs_28774 = {}
    # Getting the type of 'list' (line 306)
    list_28769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 14), 'list', False)
    # Calling list(args, kwargs) (line 306)
    list_call_result_28775 = invoke(stypy.reporting.localization.Localization(__file__, 306, 14), list_28769, *[keys_call_result_28773], **kwargs_28774)
    
    # Assigning a type to the variable 'allkeys' (line 306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 4), 'allkeys', list_call_result_28775)
    
    # Assigning a Name to a Name (line 307):
    
    # Assigning a Name to a Name (line 307):
    # Getting the type of 'False' (line 307)
    False_28776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 11), 'False')
    # Assigning a type to the variable 'done' (line 307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 4), 'done', False_28776)
    
    # Assigning a Num to a Name (line 308):
    
    # Assigning a Num to a Name (line 308):
    int_28777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 8), 'int')
    # Assigning a type to the variable 'n' (line 308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 4), 'n', int_28777)
    
    
    # Getting the type of 'done' (line 309)
    done_28778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 14), 'done')
    # Applying the 'not' unary operator (line 309)
    result_not__28779 = python_operator(stypy.reporting.localization.Localization(__file__, 309, 10), 'not', done_28778)
    
    # Testing the type of an if condition (line 309)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 309, 4), result_not__28779)
    # SSA begins for while statement (line 309)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 310):
    
    # Assigning a Call to a Name (line 310):
    
    # Call to join(...): (line 310)
    # Processing the call arguments (line 310)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'allkeys' (line 310)
    allkeys_28787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 41), 'allkeys', False)
    comprehension_28788 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 310, 26), allkeys_28787)
    # Assigning a type to the variable 'x' (line 310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 26), 'x', comprehension_28788)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 310)
    n_28782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 29), 'n', False)
    slice_28783 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 310, 26), None, n_28782, None)
    # Getting the type of 'x' (line 310)
    x_28784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 26), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 310)
    getitem___28785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 26), x_28784, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 310)
    subscript_call_result_28786 = invoke(stypy.reporting.localization.Localization(__file__, 310, 26), getitem___28785, slice_28783)
    
    list_28789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 26), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 310, 26), list_28789, subscript_call_result_28786)
    # Processing the call keyword arguments (line 310)
    kwargs_28790 = {}
    str_28780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 17), 'str', '')
    # Obtaining the member 'join' of a type (line 310)
    join_28781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 17), str_28780, 'join')
    # Calling join(args, kwargs) (line 310)
    join_call_result_28791 = invoke(stypy.reporting.localization.Localization(__file__, 310, 17), join_28781, *[list_28789], **kwargs_28790)
    
    # Assigning a type to the variable 'newkey' (line 310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'newkey', join_call_result_28791)
    
    
    # Getting the type of 'newkey' (line 311)
    newkey_28792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 11), 'newkey')
    # Getting the type of 'allkeys' (line 311)
    allkeys_28793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 21), 'allkeys')
    # Applying the binary operator 'in' (line 311)
    result_contains_28794 = python_operator(stypy.reporting.localization.Localization(__file__, 311, 11), 'in', newkey_28792, allkeys_28793)
    
    # Testing the type of an if condition (line 311)
    if_condition_28795 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 311, 8), result_contains_28794)
    # Assigning a type to the variable 'if_condition_28795' (line 311)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 8), 'if_condition_28795', if_condition_28795)
    # SSA begins for if statement (line 311)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'n' (line 312)
    n_28796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 12), 'n')
    int_28797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 17), 'int')
    # Applying the binary operator '+=' (line 312)
    result_iadd_28798 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 12), '+=', n_28796, int_28797)
    # Assigning a type to the variable 'n' (line 312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 12), 'n', result_iadd_28798)
    
    # SSA branch for the else part of an if statement (line 311)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 314):
    
    # Assigning a Name to a Name (line 314):
    # Getting the type of 'True' (line 314)
    True_28799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 19), 'True')
    # Assigning a type to the variable 'done' (line 314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'done', True_28799)
    # SSA join for if statement (line 311)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 309)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'newkey' (line 315)
    newkey_28800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 11), 'newkey')
    # Assigning a type to the variable 'stypy_return_type' (line 315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 4), 'stypy_return_type', newkey_28800)
    
    # ################# End of 'unique_key(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'unique_key' in the type store
    # Getting the type of 'stypy_return_type' (line 301)
    stypy_return_type_28801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_28801)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'unique_key'
    return stypy_return_type_28801

# Assigning a type to the variable 'unique_key' (line 301)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 0), 'unique_key', unique_key)

if (__name__ == '__main__'):
    
    
    # SSA begins for try-except statement (line 320)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 321):
    
    # Assigning a Subscript to a Name (line 321):
    
    # Obtaining the type of the subscript
    int_28802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 24), 'int')
    # Getting the type of 'sys' (line 321)
    sys_28803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 15), 'sys')
    # Obtaining the member 'argv' of a type (line 321)
    argv_28804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 15), sys_28803, 'argv')
    # Obtaining the member '__getitem__' of a type (line 321)
    getitem___28805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 15), argv_28804, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 321)
    subscript_call_result_28806 = invoke(stypy.reporting.localization.Localization(__file__, 321, 15), getitem___28805, int_28802)
    
    # Assigning a type to the variable 'file' (line 321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'file', subscript_call_result_28806)
    # SSA branch for the except part of a try statement (line 320)
    # SSA branch for the except 'IndexError' branch of a try statement (line 320)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Attribute to a Name (line 323):
    
    # Assigning a Attribute to a Name (line 323):
    # Getting the type of 'sys' (line 323)
    sys_28807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 14), 'sys')
    # Obtaining the member 'stdin' of a type (line 323)
    stdin_28808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 14), sys_28807, 'stdin')
    # Assigning a type to the variable 'fid' (line 323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 8), 'fid', stdin_28808)
    
    # Assigning a Attribute to a Name (line 324):
    
    # Assigning a Attribute to a Name (line 324):
    # Getting the type of 'sys' (line 324)
    sys_28809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 18), 'sys')
    # Obtaining the member 'stdout' of a type (line 324)
    stdout_28810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 18), sys_28809, 'stdout')
    # Assigning a type to the variable 'outfile' (line 324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 8), 'outfile', stdout_28810)
    # SSA branch for the else branch of a try statement (line 320)
    module_type_store.open_ssa_branch('except else')
    
    # Assigning a Call to a Name (line 326):
    
    # Assigning a Call to a Name (line 326):
    
    # Call to open(...): (line 326)
    # Processing the call arguments (line 326)
    # Getting the type of 'file' (line 326)
    file_28812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 19), 'file', False)
    str_28813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 25), 'str', 'r')
    # Processing the call keyword arguments (line 326)
    kwargs_28814 = {}
    # Getting the type of 'open' (line 326)
    open_28811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 14), 'open', False)
    # Calling open(args, kwargs) (line 326)
    open_call_result_28815 = invoke(stypy.reporting.localization.Localization(__file__, 326, 14), open_28811, *[file_28812, str_28813], **kwargs_28814)
    
    # Assigning a type to the variable 'fid' (line 326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 8), 'fid', open_call_result_28815)
    
    # Assigning a Call to a Tuple (line 327):
    
    # Assigning a Call to a Name:
    
    # Call to splitext(...): (line 327)
    # Processing the call arguments (line 327)
    # Getting the type of 'file' (line 327)
    file_28819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 39), 'file', False)
    # Processing the call keyword arguments (line 327)
    kwargs_28820 = {}
    # Getting the type of 'os' (line 327)
    os_28816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 22), 'os', False)
    # Obtaining the member 'path' of a type (line 327)
    path_28817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 22), os_28816, 'path')
    # Obtaining the member 'splitext' of a type (line 327)
    splitext_28818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 22), path_28817, 'splitext')
    # Calling splitext(args, kwargs) (line 327)
    splitext_call_result_28821 = invoke(stypy.reporting.localization.Localization(__file__, 327, 22), splitext_28818, *[file_28819], **kwargs_28820)
    
    # Assigning a type to the variable 'call_assignment_28143' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'call_assignment_28143', splitext_call_result_28821)
    
    # Assigning a Call to a Name (line 327):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_28824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 8), 'int')
    # Processing the call keyword arguments
    kwargs_28825 = {}
    # Getting the type of 'call_assignment_28143' (line 327)
    call_assignment_28143_28822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'call_assignment_28143', False)
    # Obtaining the member '__getitem__' of a type (line 327)
    getitem___28823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 8), call_assignment_28143_28822, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_28826 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___28823, *[int_28824], **kwargs_28825)
    
    # Assigning a type to the variable 'call_assignment_28144' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'call_assignment_28144', getitem___call_result_28826)
    
    # Assigning a Name to a Name (line 327):
    # Getting the type of 'call_assignment_28144' (line 327)
    call_assignment_28144_28827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'call_assignment_28144')
    # Assigning a type to the variable 'base' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 9), 'base', call_assignment_28144_28827)
    
    # Assigning a Call to a Name (line 327):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_28830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 8), 'int')
    # Processing the call keyword arguments
    kwargs_28831 = {}
    # Getting the type of 'call_assignment_28143' (line 327)
    call_assignment_28143_28828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'call_assignment_28143', False)
    # Obtaining the member '__getitem__' of a type (line 327)
    getitem___28829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 8), call_assignment_28143_28828, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_28832 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___28829, *[int_28830], **kwargs_28831)
    
    # Assigning a type to the variable 'call_assignment_28145' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'call_assignment_28145', getitem___call_result_28832)
    
    # Assigning a Name to a Name (line 327):
    # Getting the type of 'call_assignment_28145' (line 327)
    call_assignment_28145_28833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'call_assignment_28145')
    # Assigning a type to the variable 'ext' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 15), 'ext', call_assignment_28145_28833)
    
    # Assigning a Name to a Name (line 328):
    
    # Assigning a Name to a Name (line 328):
    # Getting the type of 'base' (line 328)
    base_28834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 18), 'base')
    # Assigning a type to the variable 'newname' (line 328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 8), 'newname', base_28834)
    
    # Assigning a Call to a Name (line 329):
    
    # Assigning a Call to a Name (line 329):
    
    # Call to open(...): (line 329)
    # Processing the call arguments (line 329)
    # Getting the type of 'newname' (line 329)
    newname_28836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 23), 'newname', False)
    str_28837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 32), 'str', 'w')
    # Processing the call keyword arguments (line 329)
    kwargs_28838 = {}
    # Getting the type of 'open' (line 329)
    open_28835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 18), 'open', False)
    # Calling open(args, kwargs) (line 329)
    open_call_result_28839 = invoke(stypy.reporting.localization.Localization(__file__, 329, 18), open_28835, *[newname_28836, str_28837], **kwargs_28838)
    
    # Assigning a type to the variable 'outfile' (line 329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 8), 'outfile', open_call_result_28839)
    # SSA join for try-except statement (line 320)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 331):
    
    # Assigning a Call to a Name (line 331):
    
    # Call to read(...): (line 331)
    # Processing the call keyword arguments (line 331)
    kwargs_28842 = {}
    # Getting the type of 'fid' (line 331)
    fid_28840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 13), 'fid', False)
    # Obtaining the member 'read' of a type (line 331)
    read_28841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 13), fid_28840, 'read')
    # Calling read(args, kwargs) (line 331)
    read_call_result_28843 = invoke(stypy.reporting.localization.Localization(__file__, 331, 13), read_28841, *[], **kwargs_28842)
    
    # Assigning a type to the variable 'allstr' (line 331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'allstr', read_call_result_28843)
    
    
    # SSA begins for try-except statement (line 332)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 333):
    
    # Assigning a Call to a Name (line 333):
    
    # Call to process_str(...): (line 333)
    # Processing the call arguments (line 333)
    # Getting the type of 'allstr' (line 333)
    allstr_28845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 31), 'allstr', False)
    # Processing the call keyword arguments (line 333)
    kwargs_28846 = {}
    # Getting the type of 'process_str' (line 333)
    process_str_28844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 19), 'process_str', False)
    # Calling process_str(args, kwargs) (line 333)
    process_str_call_result_28847 = invoke(stypy.reporting.localization.Localization(__file__, 333, 19), process_str_28844, *[allstr_28845], **kwargs_28846)
    
    # Assigning a type to the variable 'writestr' (line 333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 8), 'writestr', process_str_call_result_28847)
    # SSA branch for the except part of a try statement (line 332)
    # SSA branch for the except 'ValueError' branch of a try statement (line 332)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 335):
    
    # Assigning a Call to a Name (line 335):
    
    # Call to get_exception(...): (line 335)
    # Processing the call keyword arguments (line 335)
    kwargs_28849 = {}
    # Getting the type of 'get_exception' (line 335)
    get_exception_28848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'get_exception', False)
    # Calling get_exception(args, kwargs) (line 335)
    get_exception_call_result_28850 = invoke(stypy.reporting.localization.Localization(__file__, 335, 12), get_exception_28848, *[], **kwargs_28849)
    
    # Assigning a type to the variable 'e' (line 335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 8), 'e', get_exception_call_result_28850)
    
    # Call to ValueError(...): (line 336)
    # Processing the call arguments (line 336)
    str_28852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 25), 'str', 'In %s loop at %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 336)
    tuple_28853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 336)
    # Adding element type (line 336)
    # Getting the type of 'file' (line 336)
    file_28854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 47), 'file', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 336, 47), tuple_28853, file_28854)
    # Adding element type (line 336)
    # Getting the type of 'e' (line 336)
    e_28855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 53), 'e', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 336, 47), tuple_28853, e_28855)
    
    # Applying the binary operator '%' (line 336)
    result_mod_28856 = python_operator(stypy.reporting.localization.Localization(__file__, 336, 25), '%', str_28852, tuple_28853)
    
    # Processing the call keyword arguments (line 336)
    kwargs_28857 = {}
    # Getting the type of 'ValueError' (line 336)
    ValueError_28851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 336)
    ValueError_call_result_28858 = invoke(stypy.reporting.localization.Localization(__file__, 336, 14), ValueError_28851, *[result_mod_28856], **kwargs_28857)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 336, 8), ValueError_call_result_28858, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 332)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to write(...): (line 337)
    # Processing the call arguments (line 337)
    # Getting the type of 'writestr' (line 337)
    writestr_28861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 18), 'writestr', False)
    # Processing the call keyword arguments (line 337)
    kwargs_28862 = {}
    # Getting the type of 'outfile' (line 337)
    outfile_28859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 4), 'outfile', False)
    # Obtaining the member 'write' of a type (line 337)
    write_28860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 4), outfile_28859, 'write')
    # Calling write(args, kwargs) (line 337)
    write_call_result_28863 = invoke(stypy.reporting.localization.Localization(__file__, 337, 4), write_28860, *[writestr_28861], **kwargs_28862)
    


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
