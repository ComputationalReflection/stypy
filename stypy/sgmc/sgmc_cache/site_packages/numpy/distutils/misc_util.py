
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: from __future__ import division, absolute_import, print_function
2: 
3: import os
4: import re
5: import sys
6: import imp
7: import copy
8: import glob
9: import atexit
10: import tempfile
11: import subprocess
12: import shutil
13: 
14: import distutils
15: from distutils.errors import DistutilsError
16: try:
17:     from threading import local as tlocal
18: except ImportError:
19:     from dummy_threading import local as tlocal
20: 
21: # stores temporary directory of each thread to only create one per thread
22: _tdata = tlocal()
23: 
24: # store all created temporary directories so they can be deleted on exit
25: _tmpdirs = []
26: def clean_up_temporary_directory():
27:     for d in _tmpdirs:
28:         try:
29:             shutil.rmtree(d)
30:         except OSError:
31:             pass
32: 
33: atexit.register(clean_up_temporary_directory)
34: 
35: try:
36:     set
37: except NameError:
38:     from sets import Set as set
39: 
40: from numpy.distutils.compat import get_exception
41: from numpy.compat import basestring
42: 
43: __all__ = ['Configuration', 'get_numpy_include_dirs', 'default_config_dict',
44:            'dict_append', 'appendpath', 'generate_config_py',
45:            'get_cmd', 'allpath', 'get_mathlibs',
46:            'terminal_has_colors', 'red_text', 'green_text', 'yellow_text',
47:            'blue_text', 'cyan_text', 'cyg2win32', 'mingw32', 'all_strings',
48:            'has_f_sources', 'has_cxx_sources', 'filter_sources',
49:            'get_dependencies', 'is_local_src_dir', 'get_ext_source_files',
50:            'get_script_files', 'get_lib_source_files', 'get_data_files',
51:            'dot_join', 'get_frame', 'minrelpath', 'njoin',
52:            'is_sequence', 'is_string', 'as_list', 'gpaths', 'get_language',
53:            'quote_args', 'get_build_architecture', 'get_info', 'get_pkg_info',
54:            'get_num_build_jobs']
55: 
56: class InstallableLib(object):
57:     '''
58:     Container to hold information on an installable library.
59: 
60:     Parameters
61:     ----------
62:     name : str
63:         Name of the installed library.
64:     build_info : dict
65:         Dictionary holding build information.
66:     target_dir : str
67:         Absolute path specifying where to install the library.
68: 
69:     See Also
70:     --------
71:     Configuration.add_installed_library
72: 
73:     Notes
74:     -----
75:     The three parameters are stored as attributes with the same names.
76: 
77:     '''
78:     def __init__(self, name, build_info, target_dir):
79:         self.name = name
80:         self.build_info = build_info
81:         self.target_dir = target_dir
82: 
83: 
84: def get_num_build_jobs():
85:     '''
86:     Get number of parallel build jobs set by the --parallel command line
87:     argument of setup.py
88:     If the command did not receive a setting the environment variable
89:     NPY_NUM_BUILD_JOBS checked and if that is unset it returns 1.
90: 
91:     Returns
92:     -------
93:     out : int
94:         number of parallel jobs that can be run
95: 
96:     '''
97:     from numpy.distutils.core import get_distribution
98:     envjobs = int(os.environ.get("NPY_NUM_BUILD_JOBS", 1))
99:     dist = get_distribution()
100:     # may be None during configuration
101:     if dist is None:
102:         return envjobs
103: 
104:     # any of these three may have the job set, take the largest
105:     cmdattr = (getattr(dist.get_command_obj('build'), 'parallel', None),
106:                getattr(dist.get_command_obj('build_ext'), 'parallel', None),
107:                getattr(dist.get_command_obj('build_clib'), 'parallel', None))
108:     if all(x is None for x in cmdattr):
109:         return envjobs
110:     else:
111:         return max(x for x in cmdattr if x is not None)
112: 
113: def quote_args(args):
114:     # don't used _nt_quote_args as it does not check if
115:     # args items already have quotes or not.
116:     args = list(args)
117:     for i in range(len(args)):
118:         a = args[i]
119:         if ' ' in a and a[0] not in '"\'':
120:             args[i] = '"%s"' % (a)
121:     return args
122: 
123: def allpath(name):
124:     "Convert a /-separated pathname to one using the OS's path separator."
125:     splitted = name.split('/')
126:     return os.path.join(*splitted)
127: 
128: def rel_path(path, parent_path):
129:     '''Return path relative to parent_path.
130:     '''
131:     pd = os.path.abspath(parent_path)
132:     apath = os.path.abspath(path)
133:     if len(apath)<len(pd):
134:         return path
135:     if apath==pd:
136:         return ''
137:     if pd == apath[:len(pd)]:
138:         assert apath[len(pd)] in [os.sep], repr((path, apath[len(pd)]))
139:         path = apath[len(pd)+1:]
140:     return path
141: 
142: def get_path_from_frame(frame, parent_path=None):
143:     '''Return path of the module given a frame object from the call stack.
144: 
145:     Returned path is relative to parent_path when given,
146:     otherwise it is absolute path.
147:     '''
148: 
149:     # First, try to find if the file name is in the frame.
150:     try:
151:         caller_file = eval('__file__', frame.f_globals, frame.f_locals)
152:         d = os.path.dirname(os.path.abspath(caller_file))
153:     except NameError:
154:         # __file__ is not defined, so let's try __name__. We try this second
155:         # because setuptools spoofs __name__ to be '__main__' even though
156:         # sys.modules['__main__'] might be something else, like easy_install(1).
157:         caller_name = eval('__name__', frame.f_globals, frame.f_locals)
158:         __import__(caller_name)
159:         mod = sys.modules[caller_name]
160:         if hasattr(mod, '__file__'):
161:             d = os.path.dirname(os.path.abspath(mod.__file__))
162:         else:
163:             # we're probably running setup.py as execfile("setup.py")
164:             # (likely we're building an egg)
165:             d = os.path.abspath('.')
166:             # hmm, should we use sys.argv[0] like in __builtin__ case?
167: 
168:     if parent_path is not None:
169:         d = rel_path(d, parent_path)
170: 
171:     return d or '.'
172: 
173: def njoin(*path):
174:     '''Join two or more pathname components +
175:     - convert a /-separated pathname to one using the OS's path separator.
176:     - resolve `..` and `.` from path.
177: 
178:     Either passing n arguments as in njoin('a','b'), or a sequence
179:     of n names as in njoin(['a','b']) is handled, or a mixture of such arguments.
180:     '''
181:     paths = []
182:     for p in path:
183:         if is_sequence(p):
184:             # njoin(['a', 'b'], 'c')
185:             paths.append(njoin(*p))
186:         else:
187:             assert is_string(p)
188:             paths.append(p)
189:     path = paths
190:     if not path:
191:         # njoin()
192:         joined = ''
193:     else:
194:         # njoin('a', 'b')
195:         joined = os.path.join(*path)
196:     if os.path.sep != '/':
197:         joined = joined.replace('/', os.path.sep)
198:     return minrelpath(joined)
199: 
200: def get_mathlibs(path=None):
201:     '''Return the MATHLIB line from numpyconfig.h
202:     '''
203:     if path is not None:
204:         config_file = os.path.join(path, '_numpyconfig.h')
205:     else:
206:         # Look for the file in each of the numpy include directories.
207:         dirs = get_numpy_include_dirs()
208:         for path in dirs:
209:             fn = os.path.join(path, '_numpyconfig.h')
210:             if os.path.exists(fn):
211:                 config_file = fn
212:                 break
213:         else:
214:             raise DistutilsError('_numpyconfig.h not found in numpy include '
215:                 'dirs %r' % (dirs,))
216: 
217:     fid = open(config_file)
218:     mathlibs = []
219:     s = '#define MATHLIB'
220:     for line in fid:
221:         if line.startswith(s):
222:             value = line[len(s):].strip()
223:             if value:
224:                 mathlibs.extend(value.split(','))
225:     fid.close()
226:     return mathlibs
227: 
228: def minrelpath(path):
229:     '''Resolve `..` and '.' from path.
230:     '''
231:     if not is_string(path):
232:         return path
233:     if '.' not in path:
234:         return path
235:     l = path.split(os.sep)
236:     while l:
237:         try:
238:             i = l.index('.', 1)
239:         except ValueError:
240:             break
241:         del l[i]
242:     j = 1
243:     while l:
244:         try:
245:             i = l.index('..', j)
246:         except ValueError:
247:             break
248:         if l[i-1]=='..':
249:             j += 1
250:         else:
251:             del l[i], l[i-1]
252:             j = 1
253:     if not l:
254:         return ''
255:     return os.sep.join(l)
256: 
257: def _fix_paths(paths, local_path, include_non_existing):
258:     assert is_sequence(paths), repr(type(paths))
259:     new_paths = []
260:     assert not is_string(paths), repr(paths)
261:     for n in paths:
262:         if is_string(n):
263:             if '*' in n or '?' in n:
264:                 p = glob.glob(n)
265:                 p2 = glob.glob(njoin(local_path, n))
266:                 if p2:
267:                     new_paths.extend(p2)
268:                 elif p:
269:                     new_paths.extend(p)
270:                 else:
271:                     if include_non_existing:
272:                         new_paths.append(n)
273:                     print('could not resolve pattern in %r: %r' %
274:                             (local_path, n))
275:             else:
276:                 n2 = njoin(local_path, n)
277:                 if os.path.exists(n2):
278:                     new_paths.append(n2)
279:                 else:
280:                     if os.path.exists(n):
281:                         new_paths.append(n)
282:                     elif include_non_existing:
283:                         new_paths.append(n)
284:                     if not os.path.exists(n):
285:                         print('non-existing path in %r: %r' %
286:                                 (local_path, n))
287: 
288:         elif is_sequence(n):
289:             new_paths.extend(_fix_paths(n, local_path, include_non_existing))
290:         else:
291:             new_paths.append(n)
292:     return [minrelpath(p) for p in new_paths]
293: 
294: def gpaths(paths, local_path='', include_non_existing=True):
295:     '''Apply glob to paths and prepend local_path if needed.
296:     '''
297:     if is_string(paths):
298:         paths = (paths,)
299:     return _fix_paths(paths, local_path, include_non_existing)
300: 
301: def make_temp_file(suffix='', prefix='', text=True):
302:     if not hasattr(_tdata, 'tempdir'):
303:         _tdata.tempdir = tempfile.mkdtemp()
304:         _tmpdirs.append(_tdata.tempdir)
305:     fid, name = tempfile.mkstemp(suffix=suffix,
306:                                  prefix=prefix,
307:                                  dir=_tdata.tempdir,
308:                                  text=text)
309:     fo = os.fdopen(fid, 'w')
310:     return fo, name
311: 
312: # Hooks for colored terminal output.
313: # See also http://www.livinglogic.de/Python/ansistyle
314: def terminal_has_colors():
315:     if sys.platform=='cygwin' and 'USE_COLOR' not in os.environ:
316:         # Avoid importing curses that causes illegal operation
317:         # with a message:
318:         #  PYTHON2 caused an invalid page fault in
319:         #  module CYGNURSES7.DLL as 015f:18bbfc28
320:         # Details: Python 2.3.3 [GCC 3.3.1 (cygming special)]
321:         #          ssh to Win32 machine from debian
322:         #          curses.version is 2.2
323:         #          CYGWIN_98-4.10, release 1.5.7(0.109/3/2))
324:         return 0
325:     if hasattr(sys.stdout, 'isatty') and sys.stdout.isatty():
326:         try:
327:             import curses
328:             curses.setupterm()
329:             if (curses.tigetnum("colors") >= 0
330:                 and curses.tigetnum("pairs") >= 0
331:                 and ((curses.tigetstr("setf") is not None
332:                       and curses.tigetstr("setb") is not None)
333:                      or (curses.tigetstr("setaf") is not None
334:                          and curses.tigetstr("setab") is not None)
335:                      or curses.tigetstr("scp") is not None)):
336:                 return 1
337:         except Exception:
338:             pass
339:     return 0
340: 
341: if terminal_has_colors():
342:     _colour_codes = dict(black=0, red=1, green=2, yellow=3,
343:                          blue=4, magenta=5, cyan=6, white=7, default=9)
344:     def colour_text(s, fg=None, bg=None, bold=False):
345:         seq = []
346:         if bold:
347:             seq.append('1')
348:         if fg:
349:             fgcode = 30 + _colour_codes.get(fg.lower(), 0)
350:             seq.append(str(fgcode))
351:         if bg:
352:             bgcode = 40 + _colour_codes.get(fg.lower(), 7)
353:             seq.append(str(bgcode))
354:         if seq:
355:             return '\x1b[%sm%s\x1b[0m' % (';'.join(seq), s)
356:         else:
357:             return s
358: else:
359:     def colour_text(s, fg=None, bg=None):
360:         return s
361: 
362: def default_text(s):
363:     return colour_text(s, 'default')
364: def red_text(s):
365:     return colour_text(s, 'red')
366: def green_text(s):
367:     return colour_text(s, 'green')
368: def yellow_text(s):
369:     return colour_text(s, 'yellow')
370: def cyan_text(s):
371:     return colour_text(s, 'cyan')
372: def blue_text(s):
373:     return colour_text(s, 'blue')
374: 
375: #########################
376: 
377: def cyg2win32(path):
378:     if sys.platform=='cygwin' and path.startswith('/cygdrive'):
379:         path = path[10] + ':' + os.path.normcase(path[11:])
380:     return path
381: 
382: def mingw32():
383:     '''Return true when using mingw32 environment.
384:     '''
385:     if sys.platform=='win32':
386:         if os.environ.get('OSTYPE', '')=='msys':
387:             return True
388:         if os.environ.get('MSYSTEM', '')=='MINGW32':
389:             return True
390:     return False
391: 
392: def msvc_runtime_library():
393:     "Return name of MSVC runtime library if Python was built with MSVC >= 7"
394:     msc_pos = sys.version.find('MSC v.')
395:     if msc_pos != -1:
396:         msc_ver = sys.version[msc_pos+6:msc_pos+10]
397:         lib = {'1300': 'msvcr70',    # MSVC 7.0
398:                '1310': 'msvcr71',    # MSVC 7.1
399:                '1400': 'msvcr80',    # MSVC 8
400:                '1500': 'msvcr90',    # MSVC 9 (VS 2008)
401:                '1600': 'msvcr100',   # MSVC 10 (aka 2010)
402:               }.get(msc_ver, None)
403:     else:
404:         lib = None
405:     return lib
406: 
407: 
408: #########################
409: 
410: #XXX need support for .C that is also C++
411: cxx_ext_match = re.compile(r'.*[.](cpp|cxx|cc)\Z', re.I).match
412: fortran_ext_match = re.compile(r'.*[.](f90|f95|f77|for|ftn|f)\Z', re.I).match
413: f90_ext_match = re.compile(r'.*[.](f90|f95)\Z', re.I).match
414: f90_module_name_match = re.compile(r'\s*module\s*(?P<name>[\w_]+)', re.I).match
415: def _get_f90_modules(source):
416:     '''Return a list of Fortran f90 module names that
417:     given source file defines.
418:     '''
419:     if not f90_ext_match(source):
420:         return []
421:     modules = []
422:     f = open(source, 'r')
423:     for line in f:
424:         m = f90_module_name_match(line)
425:         if m:
426:             name = m.group('name')
427:             modules.append(name)
428:             # break  # XXX can we assume that there is one module per file?
429:     f.close()
430:     return modules
431: 
432: def is_string(s):
433:     return isinstance(s, basestring)
434: 
435: def all_strings(lst):
436:     '''Return True if all items in lst are string objects. '''
437:     for item in lst:
438:         if not is_string(item):
439:             return False
440:     return True
441: 
442: def is_sequence(seq):
443:     if is_string(seq):
444:         return False
445:     try:
446:         len(seq)
447:     except:
448:         return False
449:     return True
450: 
451: def is_glob_pattern(s):
452:     return is_string(s) and ('*' in s or '?' is s)
453: 
454: def as_list(seq):
455:     if is_sequence(seq):
456:         return list(seq)
457:     else:
458:         return [seq]
459: 
460: def get_language(sources):
461:     # not used in numpy/scipy packages, use build_ext.detect_language instead
462:     '''Determine language value (c,f77,f90) from sources '''
463:     language = None
464:     for source in sources:
465:         if isinstance(source, str):
466:             if f90_ext_match(source):
467:                 language = 'f90'
468:                 break
469:             elif fortran_ext_match(source):
470:                 language = 'f77'
471:     return language
472: 
473: def has_f_sources(sources):
474:     '''Return True if sources contains Fortran files '''
475:     for source in sources:
476:         if fortran_ext_match(source):
477:             return True
478:     return False
479: 
480: def has_cxx_sources(sources):
481:     '''Return True if sources contains C++ files '''
482:     for source in sources:
483:         if cxx_ext_match(source):
484:             return True
485:     return False
486: 
487: def filter_sources(sources):
488:     '''Return four lists of filenames containing
489:     C, C++, Fortran, and Fortran 90 module sources,
490:     respectively.
491:     '''
492:     c_sources = []
493:     cxx_sources = []
494:     f_sources = []
495:     fmodule_sources = []
496:     for source in sources:
497:         if fortran_ext_match(source):
498:             modules = _get_f90_modules(source)
499:             if modules:
500:                 fmodule_sources.append(source)
501:             else:
502:                 f_sources.append(source)
503:         elif cxx_ext_match(source):
504:             cxx_sources.append(source)
505:         else:
506:             c_sources.append(source)
507:     return c_sources, cxx_sources, f_sources, fmodule_sources
508: 
509: 
510: def _get_headers(directory_list):
511:     # get *.h files from list of directories
512:     headers = []
513:     for d in directory_list:
514:         head = glob.glob(os.path.join(d, "*.h")) #XXX: *.hpp files??
515:         headers.extend(head)
516:     return headers
517: 
518: def _get_directories(list_of_sources):
519:     # get unique directories from list of sources.
520:     direcs = []
521:     for f in list_of_sources:
522:         d = os.path.split(f)
523:         if d[0] != '' and not d[0] in direcs:
524:             direcs.append(d[0])
525:     return direcs
526: 
527: def get_dependencies(sources):
528:     #XXX scan sources for include statements
529:     return _get_headers(_get_directories(sources))
530: 
531: def is_local_src_dir(directory):
532:     '''Return true if directory is local directory.
533:     '''
534:     if not is_string(directory):
535:         return False
536:     abs_dir = os.path.abspath(directory)
537:     c = os.path.commonprefix([os.getcwd(), abs_dir])
538:     new_dir = abs_dir[len(c):].split(os.sep)
539:     if new_dir and not new_dir[0]:
540:         new_dir = new_dir[1:]
541:     if new_dir and new_dir[0]=='build':
542:         return False
543:     new_dir = os.sep.join(new_dir)
544:     return os.path.isdir(new_dir)
545: 
546: def general_source_files(top_path):
547:     pruned_directories = {'CVS':1, '.svn':1, 'build':1}
548:     prune_file_pat = re.compile(r'(?:[~#]|\.py[co]|\.o)$')
549:     for dirpath, dirnames, filenames in os.walk(top_path, topdown=True):
550:         pruned = [ d for d in dirnames if d not in pruned_directories ]
551:         dirnames[:] = pruned
552:         for f in filenames:
553:             if not prune_file_pat.search(f):
554:                 yield os.path.join(dirpath, f)
555: 
556: def general_source_directories_files(top_path):
557:     '''Return a directory name relative to top_path and
558:     files contained.
559:     '''
560:     pruned_directories = ['CVS', '.svn', 'build']
561:     prune_file_pat = re.compile(r'(?:[~#]|\.py[co]|\.o)$')
562:     for dirpath, dirnames, filenames in os.walk(top_path, topdown=True):
563:         pruned = [ d for d in dirnames if d not in pruned_directories ]
564:         dirnames[:] = pruned
565:         for d in dirnames:
566:             dpath = os.path.join(dirpath, d)
567:             rpath = rel_path(dpath, top_path)
568:             files = []
569:             for f in os.listdir(dpath):
570:                 fn = os.path.join(dpath, f)
571:                 if os.path.isfile(fn) and not prune_file_pat.search(fn):
572:                     files.append(fn)
573:             yield rpath, files
574:     dpath = top_path
575:     rpath = rel_path(dpath, top_path)
576:     filenames = [os.path.join(dpath, f) for f in os.listdir(dpath) \
577:                  if not prune_file_pat.search(f)]
578:     files = [f for f in filenames if os.path.isfile(f)]
579:     yield rpath, files
580: 
581: 
582: def get_ext_source_files(ext):
583:     # Get sources and any include files in the same directory.
584:     filenames = []
585:     sources = [_m for _m in ext.sources if is_string(_m)]
586:     filenames.extend(sources)
587:     filenames.extend(get_dependencies(sources))
588:     for d in ext.depends:
589:         if is_local_src_dir(d):
590:             filenames.extend(list(general_source_files(d)))
591:         elif os.path.isfile(d):
592:             filenames.append(d)
593:     return filenames
594: 
595: def get_script_files(scripts):
596:     scripts = [_m for _m in scripts if is_string(_m)]
597:     return scripts
598: 
599: def get_lib_source_files(lib):
600:     filenames = []
601:     sources = lib[1].get('sources', [])
602:     sources = [_m for _m in sources if is_string(_m)]
603:     filenames.extend(sources)
604:     filenames.extend(get_dependencies(sources))
605:     depends = lib[1].get('depends', [])
606:     for d in depends:
607:         if is_local_src_dir(d):
608:             filenames.extend(list(general_source_files(d)))
609:         elif os.path.isfile(d):
610:             filenames.append(d)
611:     return filenames
612: 
613: def get_shared_lib_extension(is_python_ext=False):
614:     '''Return the correct file extension for shared libraries.
615: 
616:     Parameters
617:     ----------
618:     is_python_ext : bool, optional
619:         Whether the shared library is a Python extension.  Default is False.
620: 
621:     Returns
622:     -------
623:     so_ext : str
624:         The shared library extension.
625: 
626:     Notes
627:     -----
628:     For Python shared libs, `so_ext` will typically be '.so' on Linux and OS X,
629:     and '.pyd' on Windows.  For Python >= 3.2 `so_ext` has a tag prepended on
630:     POSIX systems according to PEP 3149.  For Python 3.2 this is implemented on
631:     Linux, but not on OS X.
632: 
633:     '''
634:     confvars = distutils.sysconfig.get_config_vars()
635:     # SO is deprecated in 3.3.1, use EXT_SUFFIX instead
636:     so_ext = confvars.get('EXT_SUFFIX', None)
637:     if so_ext is None:
638:         so_ext = confvars.get('SO', '')
639: 
640:     if not is_python_ext:
641:         # hardcode known values, config vars (including SHLIB_SUFFIX) are
642:         # unreliable (see #3182)
643:         # darwin, windows and debug linux are wrong in 3.3.1 and older
644:         if (sys.platform.startswith('linux') or
645:             sys.platform.startswith('gnukfreebsd')):
646:             so_ext = '.so'
647:         elif sys.platform.startswith('darwin'):
648:             so_ext = '.dylib'
649:         elif sys.platform.startswith('win'):
650:             so_ext = '.dll'
651:         else:
652:             # fall back to config vars for unknown platforms
653:             # fix long extension for Python >=3.2, see PEP 3149.
654:             if 'SOABI' in confvars:
655:                 # Does nothing unless SOABI config var exists
656:                 so_ext = so_ext.replace('.' + confvars.get('SOABI'), '', 1)
657: 
658:     return so_ext
659: 
660: def get_data_files(data):
661:     if is_string(data):
662:         return [data]
663:     sources = data[1]
664:     filenames = []
665:     for s in sources:
666:         if hasattr(s, '__call__'):
667:             continue
668:         if is_local_src_dir(s):
669:             filenames.extend(list(general_source_files(s)))
670:         elif is_string(s):
671:             if os.path.isfile(s):
672:                 filenames.append(s)
673:             else:
674:                 print('Not existing data file:', s)
675:         else:
676:             raise TypeError(repr(s))
677:     return filenames
678: 
679: def dot_join(*args):
680:     return '.'.join([a for a in args if a])
681: 
682: def get_frame(level=0):
683:     '''Return frame object from call stack with given level.
684:     '''
685:     try:
686:         return sys._getframe(level+1)
687:     except AttributeError:
688:         frame = sys.exc_info()[2].tb_frame
689:         for _ in range(level+1):
690:             frame = frame.f_back
691:         return frame
692: 
693: 
694: ######################
695: 
696: class Configuration(object):
697: 
698:     _list_keys = ['packages', 'ext_modules', 'data_files', 'include_dirs',
699:                   'libraries', 'headers', 'scripts', 'py_modules',
700:                   'installed_libraries', 'define_macros']
701:     _dict_keys = ['package_dir', 'installed_pkg_config']
702:     _extra_keys = ['name', 'version']
703: 
704:     numpy_include_dirs = []
705: 
706:     def __init__(self,
707:                  package_name=None,
708:                  parent_name=None,
709:                  top_path=None,
710:                  package_path=None,
711:                  caller_level=1,
712:                  setup_name='setup.py',
713:                  **attrs):
714:         '''Construct configuration instance of a package.
715: 
716:         package_name -- name of the package
717:                         Ex.: 'distutils'
718:         parent_name  -- name of the parent package
719:                         Ex.: 'numpy'
720:         top_path     -- directory of the toplevel package
721:                         Ex.: the directory where the numpy package source sits
722:         package_path -- directory of package. Will be computed by magic from the
723:                         directory of the caller module if not specified
724:                         Ex.: the directory where numpy.distutils is
725:         caller_level -- frame level to caller namespace, internal parameter.
726:         '''
727:         self.name = dot_join(parent_name, package_name)
728:         self.version = None
729: 
730:         caller_frame = get_frame(caller_level)
731:         self.local_path = get_path_from_frame(caller_frame, top_path)
732:         # local_path -- directory of a file (usually setup.py) that
733:         #               defines a configuration() function.
734:         # local_path -- directory of a file (usually setup.py) that
735:         #               defines a configuration() function.
736:         if top_path is None:
737:             top_path = self.local_path
738:             self.local_path = ''
739:         if package_path is None:
740:             package_path = self.local_path
741:         elif os.path.isdir(njoin(self.local_path, package_path)):
742:             package_path = njoin(self.local_path, package_path)
743:         if not os.path.isdir(package_path or '.'):
744:             raise ValueError("%r is not a directory" % (package_path,))
745:         self.top_path = top_path
746:         self.package_path = package_path
747:         # this is the relative path in the installed package
748:         self.path_in_package = os.path.join(*self.name.split('.'))
749: 
750:         self.list_keys = self._list_keys[:]
751:         self.dict_keys = self._dict_keys[:]
752: 
753:         for n in self.list_keys:
754:             v = copy.copy(attrs.get(n, []))
755:             setattr(self, n, as_list(v))
756: 
757:         for n in self.dict_keys:
758:             v = copy.copy(attrs.get(n, {}))
759:             setattr(self, n, v)
760: 
761:         known_keys = self.list_keys + self.dict_keys
762:         self.extra_keys = self._extra_keys[:]
763:         for n in attrs.keys():
764:             if n in known_keys:
765:                 continue
766:             a = attrs[n]
767:             setattr(self, n, a)
768:             if isinstance(a, list):
769:                 self.list_keys.append(n)
770:             elif isinstance(a, dict):
771:                 self.dict_keys.append(n)
772:             else:
773:                 self.extra_keys.append(n)
774: 
775:         if os.path.exists(njoin(package_path, '__init__.py')):
776:             self.packages.append(self.name)
777:             self.package_dir[self.name] = package_path
778: 
779:         self.options = dict(
780:             ignore_setup_xxx_py = False,
781:             assume_default_configuration = False,
782:             delegate_options_to_subpackages = False,
783:             quiet = False,
784:             )
785: 
786:         caller_instance = None
787:         for i in range(1, 3):
788:             try:
789:                 f = get_frame(i)
790:             except ValueError:
791:                 break
792:             try:
793:                 caller_instance = eval('self', f.f_globals, f.f_locals)
794:                 break
795:             except NameError:
796:                 pass
797:         if isinstance(caller_instance, self.__class__):
798:             if caller_instance.options['delegate_options_to_subpackages']:
799:                 self.set_options(**caller_instance.options)
800: 
801:         self.setup_name = setup_name
802: 
803:     def todict(self):
804:         '''
805:         Return a dictionary compatible with the keyword arguments of distutils
806:         setup function.
807: 
808:         Examples
809:         --------
810:         >>> setup(**config.todict())                           #doctest: +SKIP
811:         '''
812: 
813:         self._optimize_data_files()
814:         d = {}
815:         known_keys = self.list_keys + self.dict_keys + self.extra_keys
816:         for n in known_keys:
817:             a = getattr(self, n)
818:             if a:
819:                 d[n] = a
820:         return d
821: 
822:     def info(self, message):
823:         if not self.options['quiet']:
824:             print(message)
825: 
826:     def warn(self, message):
827:         sys.stderr.write('Warning: %s' % (message,))
828: 
829:     def set_options(self, **options):
830:         '''
831:         Configure Configuration instance.
832: 
833:         The following options are available:
834:          - ignore_setup_xxx_py
835:          - assume_default_configuration
836:          - delegate_options_to_subpackages
837:          - quiet
838: 
839:         '''
840:         for key, value in options.items():
841:             if key in self.options:
842:                 self.options[key] = value
843:             else:
844:                 raise ValueError('Unknown option: '+key)
845: 
846:     def get_distribution(self):
847:         '''Return the distutils distribution object for self.'''
848:         from numpy.distutils.core import get_distribution
849:         return get_distribution()
850: 
851:     def _wildcard_get_subpackage(self, subpackage_name,
852:                                  parent_name,
853:                                  caller_level = 1):
854:         l = subpackage_name.split('.')
855:         subpackage_path = njoin([self.local_path]+l)
856:         dirs = [_m for _m in glob.glob(subpackage_path) if os.path.isdir(_m)]
857:         config_list = []
858:         for d in dirs:
859:             if not os.path.isfile(njoin(d, '__init__.py')):
860:                 continue
861:             if 'build' in d.split(os.sep):
862:                 continue
863:             n = '.'.join(d.split(os.sep)[-len(l):])
864:             c = self.get_subpackage(n,
865:                                     parent_name = parent_name,
866:                                     caller_level = caller_level+1)
867:             config_list.extend(c)
868:         return config_list
869: 
870:     def _get_configuration_from_setup_py(self, setup_py,
871:                                          subpackage_name,
872:                                          subpackage_path,
873:                                          parent_name,
874:                                          caller_level = 1):
875:         # In case setup_py imports local modules:
876:         sys.path.insert(0, os.path.dirname(setup_py))
877:         try:
878:             fo_setup_py = open(setup_py, 'U')
879:             setup_name = os.path.splitext(os.path.basename(setup_py))[0]
880:             n = dot_join(self.name, subpackage_name, setup_name)
881:             setup_module = imp.load_module('_'.join(n.split('.')),
882:                                            fo_setup_py,
883:                                            setup_py,
884:                                            ('.py', 'U', 1))
885:             fo_setup_py.close()
886:             if not hasattr(setup_module, 'configuration'):
887:                 if not self.options['assume_default_configuration']:
888:                     self.warn('Assuming default configuration '\
889:                               '(%s does not define configuration())'\
890:                               % (setup_module))
891:                 config = Configuration(subpackage_name, parent_name,
892:                                        self.top_path, subpackage_path,
893:                                        caller_level = caller_level + 1)
894:             else:
895:                 pn = dot_join(*([parent_name] + subpackage_name.split('.')[:-1]))
896:                 args = (pn,)
897:                 def fix_args_py2(args):
898:                     if setup_module.configuration.__code__.co_argcount > 1:
899:                         args = args + (self.top_path,)
900:                     return args
901:                 def fix_args_py3(args):
902:                     if setup_module.configuration.__code__.co_argcount > 1:
903:                         args = args + (self.top_path,)
904:                     return args
905:                 if sys.version_info[0] < 3:
906:                     args = fix_args_py2(args)
907:                 else:
908:                     args = fix_args_py3(args)
909:                 config = setup_module.configuration(*args)
910:             if config.name!=dot_join(parent_name, subpackage_name):
911:                 self.warn('Subpackage %r configuration returned as %r' % \
912:                           (dot_join(parent_name, subpackage_name), config.name))
913:         finally:
914:             del sys.path[0]
915:         return config
916: 
917:     def get_subpackage(self,subpackage_name,
918:                        subpackage_path=None,
919:                        parent_name=None,
920:                        caller_level = 1):
921:         '''Return list of subpackage configurations.
922: 
923:         Parameters
924:         ----------
925:         subpackage_name : str or None
926:             Name of the subpackage to get the configuration. '*' in
927:             subpackage_name is handled as a wildcard.
928:         subpackage_path : str
929:             If None, then the path is assumed to be the local path plus the
930:             subpackage_name. If a setup.py file is not found in the
931:             subpackage_path, then a default configuration is used.
932:         parent_name : str
933:             Parent name.
934:         '''
935:         if subpackage_name is None:
936:             if subpackage_path is None:
937:                 raise ValueError(
938:                     "either subpackage_name or subpackage_path must be specified")
939:             subpackage_name = os.path.basename(subpackage_path)
940: 
941:         # handle wildcards
942:         l = subpackage_name.split('.')
943:         if subpackage_path is None and '*' in subpackage_name:
944:             return self._wildcard_get_subpackage(subpackage_name,
945:                                                  parent_name,
946:                                                  caller_level = caller_level+1)
947:         assert '*' not in subpackage_name, repr((subpackage_name, subpackage_path, parent_name))
948:         if subpackage_path is None:
949:             subpackage_path = njoin([self.local_path] + l)
950:         else:
951:             subpackage_path = njoin([subpackage_path] + l[:-1])
952:             subpackage_path = self.paths([subpackage_path])[0]
953:         setup_py = njoin(subpackage_path, self.setup_name)
954:         if not self.options['ignore_setup_xxx_py']:
955:             if not os.path.isfile(setup_py):
956:                 setup_py = njoin(subpackage_path,
957:                                  'setup_%s.py' % (subpackage_name))
958:         if not os.path.isfile(setup_py):
959:             if not self.options['assume_default_configuration']:
960:                 self.warn('Assuming default configuration '\
961:                           '(%s/{setup_%s,setup}.py was not found)' \
962:                           % (os.path.dirname(setup_py), subpackage_name))
963:             config = Configuration(subpackage_name, parent_name,
964:                                    self.top_path, subpackage_path,
965:                                    caller_level = caller_level+1)
966:         else:
967:             config = self._get_configuration_from_setup_py(
968:                 setup_py,
969:                 subpackage_name,
970:                 subpackage_path,
971:                 parent_name,
972:                 caller_level = caller_level + 1)
973:         if config:
974:             return [config]
975:         else:
976:             return []
977: 
978:     def add_subpackage(self,subpackage_name,
979:                        subpackage_path=None,
980:                        standalone = False):
981:         '''Add a sub-package to the current Configuration instance.
982: 
983:         This is useful in a setup.py script for adding sub-packages to a
984:         package.
985: 
986:         Parameters
987:         ----------
988:         subpackage_name : str
989:             name of the subpackage
990:         subpackage_path : str
991:             if given, the subpackage path such as the subpackage is in
992:             subpackage_path / subpackage_name. If None,the subpackage is
993:             assumed to be located in the local path / subpackage_name.
994:         standalone : bool
995:         '''
996: 
997:         if standalone:
998:             parent_name = None
999:         else:
1000:             parent_name = self.name
1001:         config_list = self.get_subpackage(subpackage_name, subpackage_path,
1002:                                           parent_name = parent_name,
1003:                                           caller_level = 2)
1004:         if not config_list:
1005:             self.warn('No configuration returned, assuming unavailable.')
1006:         for config in config_list:
1007:             d = config
1008:             if isinstance(config, Configuration):
1009:                 d = config.todict()
1010:             assert isinstance(d, dict), repr(type(d))
1011: 
1012:             self.info('Appending %s configuration to %s' \
1013:                       % (d.get('name'), self.name))
1014:             self.dict_append(**d)
1015: 
1016:         dist = self.get_distribution()
1017:         if dist is not None:
1018:             self.warn('distutils distribution has been initialized,'\
1019:                       ' it may be too late to add a subpackage '+ subpackage_name)
1020: 
1021:     def add_data_dir(self, data_path):
1022:         '''Recursively add files under data_path to data_files list.
1023: 
1024:         Recursively add files under data_path to the list of data_files to be
1025:         installed (and distributed). The data_path can be either a relative
1026:         path-name, or an absolute path-name, or a 2-tuple where the first
1027:         argument shows where in the install directory the data directory
1028:         should be installed to.
1029: 
1030:         Parameters
1031:         ----------
1032:         data_path : seq or str
1033:             Argument can be either
1034: 
1035:                 * 2-sequence (<datadir suffix>, <path to data directory>)
1036:                 * path to data directory where python datadir suffix defaults
1037:                   to package dir.
1038: 
1039:         Notes
1040:         -----
1041:         Rules for installation paths:
1042:           foo/bar -> (foo/bar, foo/bar) -> parent/foo/bar
1043:           (gun, foo/bar) -> parent/gun
1044:           foo/* -> (foo/a, foo/a), (foo/b, foo/b) -> parent/foo/a, parent/foo/b
1045:           (gun, foo/*) -> (gun, foo/a), (gun, foo/b) -> gun
1046:           (gun/*, foo/*) -> parent/gun/a, parent/gun/b
1047:           /foo/bar -> (bar, /foo/bar) -> parent/bar
1048:           (gun, /foo/bar) -> parent/gun
1049:           (fun/*/gun/*, sun/foo/bar) -> parent/fun/foo/gun/bar
1050: 
1051:         Examples
1052:         --------
1053:         For example suppose the source directory contains fun/foo.dat and
1054:         fun/bar/car.dat::
1055: 
1056:             >>> self.add_data_dir('fun')                       #doctest: +SKIP
1057:             >>> self.add_data_dir(('sun', 'fun'))              #doctest: +SKIP
1058:             >>> self.add_data_dir(('gun', '/full/path/to/fun'))#doctest: +SKIP
1059: 
1060:         Will install data-files to the locations::
1061: 
1062:             <package install directory>/
1063:               fun/
1064:                 foo.dat
1065:                 bar/
1066:                   car.dat
1067:               sun/
1068:                 foo.dat
1069:                 bar/
1070:                   car.dat
1071:               gun/
1072:                 foo.dat
1073:                 car.dat
1074:         '''
1075:         if is_sequence(data_path):
1076:             d, data_path = data_path
1077:         else:
1078:             d = None
1079:         if is_sequence(data_path):
1080:             [self.add_data_dir((d, p)) for p in data_path]
1081:             return
1082:         if not is_string(data_path):
1083:             raise TypeError("not a string: %r" % (data_path,))
1084:         if d is None:
1085:             if os.path.isabs(data_path):
1086:                 return self.add_data_dir((os.path.basename(data_path), data_path))
1087:             return self.add_data_dir((data_path, data_path))
1088:         paths = self.paths(data_path, include_non_existing=False)
1089:         if is_glob_pattern(data_path):
1090:             if is_glob_pattern(d):
1091:                 pattern_list = allpath(d).split(os.sep)
1092:                 pattern_list.reverse()
1093:                 # /a/*//b/ -> /a/*/b
1094:                 rl = list(range(len(pattern_list)-1)); rl.reverse()
1095:                 for i in rl:
1096:                     if not pattern_list[i]:
1097:                         del pattern_list[i]
1098:                 #
1099:                 for path in paths:
1100:                     if not os.path.isdir(path):
1101:                         print('Not a directory, skipping', path)
1102:                         continue
1103:                     rpath = rel_path(path, self.local_path)
1104:                     path_list = rpath.split(os.sep)
1105:                     path_list.reverse()
1106:                     target_list = []
1107:                     i = 0
1108:                     for s in pattern_list:
1109:                         if is_glob_pattern(s):
1110:                             if i>=len(path_list):
1111:                                 raise ValueError('cannot fill pattern %r with %r' \
1112:                                       % (d, path))
1113:                             target_list.append(path_list[i])
1114:                         else:
1115:                             assert s==path_list[i], repr((s, path_list[i], data_path, d, path, rpath))
1116:                             target_list.append(s)
1117:                         i += 1
1118:                     if path_list[i:]:
1119:                         self.warn('mismatch of pattern_list=%s and path_list=%s'\
1120:                                   % (pattern_list, path_list))
1121:                     target_list.reverse()
1122:                     self.add_data_dir((os.sep.join(target_list), path))
1123:             else:
1124:                 for path in paths:
1125:                     self.add_data_dir((d, path))
1126:             return
1127:         assert not is_glob_pattern(d), repr(d)
1128: 
1129:         dist = self.get_distribution()
1130:         if dist is not None and dist.data_files is not None:
1131:             data_files = dist.data_files
1132:         else:
1133:             data_files = self.data_files
1134: 
1135:         for path in paths:
1136:             for d1, f in list(general_source_directories_files(path)):
1137:                 target_path = os.path.join(self.path_in_package, d, d1)
1138:                 data_files.append((target_path, f))
1139: 
1140:     def _optimize_data_files(self):
1141:         data_dict = {}
1142:         for p, files in self.data_files:
1143:             if p not in data_dict:
1144:                 data_dict[p] = set()
1145:             for f in files:
1146:                 data_dict[p].add(f)
1147:         self.data_files[:] = [(p, list(files)) for p, files in data_dict.items()]
1148: 
1149:     def add_data_files(self,*files):
1150:         '''Add data files to configuration data_files.
1151: 
1152:         Parameters
1153:         ----------
1154:         files : sequence
1155:             Argument(s) can be either
1156: 
1157:                 * 2-sequence (<datadir prefix>,<path to data file(s)>)
1158:                 * paths to data files where python datadir prefix defaults
1159:                   to package dir.
1160: 
1161:         Notes
1162:         -----
1163:         The form of each element of the files sequence is very flexible
1164:         allowing many combinations of where to get the files from the package
1165:         and where they should ultimately be installed on the system. The most
1166:         basic usage is for an element of the files argument sequence to be a
1167:         simple filename. This will cause that file from the local path to be
1168:         installed to the installation path of the self.name package (package
1169:         path). The file argument can also be a relative path in which case the
1170:         entire relative path will be installed into the package directory.
1171:         Finally, the file can be an absolute path name in which case the file
1172:         will be found at the absolute path name but installed to the package
1173:         path.
1174: 
1175:         This basic behavior can be augmented by passing a 2-tuple in as the
1176:         file argument. The first element of the tuple should specify the
1177:         relative path (under the package install directory) where the
1178:         remaining sequence of files should be installed to (it has nothing to
1179:         do with the file-names in the source distribution). The second element
1180:         of the tuple is the sequence of files that should be installed. The
1181:         files in this sequence can be filenames, relative paths, or absolute
1182:         paths. For absolute paths the file will be installed in the top-level
1183:         package installation directory (regardless of the first argument).
1184:         Filenames and relative path names will be installed in the package
1185:         install directory under the path name given as the first element of
1186:         the tuple.
1187: 
1188:         Rules for installation paths:
1189: 
1190:           #. file.txt -> (., file.txt)-> parent/file.txt
1191:           #. foo/file.txt -> (foo, foo/file.txt) -> parent/foo/file.txt
1192:           #. /foo/bar/file.txt -> (., /foo/bar/file.txt) -> parent/file.txt
1193:           #. *.txt -> parent/a.txt, parent/b.txt
1194:           #. foo/*.txt -> parent/foo/a.txt, parent/foo/b.txt
1195:           #. */*.txt -> (*, */*.txt) -> parent/c/a.txt, parent/d/b.txt
1196:           #. (sun, file.txt) -> parent/sun/file.txt
1197:           #. (sun, bar/file.txt) -> parent/sun/file.txt
1198:           #. (sun, /foo/bar/file.txt) -> parent/sun/file.txt
1199:           #. (sun, *.txt) -> parent/sun/a.txt, parent/sun/b.txt
1200:           #. (sun, bar/*.txt) -> parent/sun/a.txt, parent/sun/b.txt
1201:           #. (sun/*, */*.txt) -> parent/sun/c/a.txt, parent/d/b.txt
1202: 
1203:         An additional feature is that the path to a data-file can actually be
1204:         a function that takes no arguments and returns the actual path(s) to
1205:         the data-files. This is useful when the data files are generated while
1206:         building the package.
1207: 
1208:         Examples
1209:         --------
1210:         Add files to the list of data_files to be included with the package.
1211: 
1212:             >>> self.add_data_files('foo.dat',
1213:             ...     ('fun', ['gun.dat', 'nun/pun.dat', '/tmp/sun.dat']),
1214:             ...     'bar/cat.dat',
1215:             ...     '/full/path/to/can.dat')                   #doctest: +SKIP
1216: 
1217:         will install these data files to::
1218: 
1219:             <package install directory>/
1220:              foo.dat
1221:              fun/
1222:                gun.dat
1223:                nun/
1224:                  pun.dat
1225:              sun.dat
1226:              bar/
1227:                car.dat
1228:              can.dat
1229: 
1230:         where <package install directory> is the package (or sub-package)
1231:         directory such as '/usr/lib/python2.4/site-packages/mypackage' ('C:
1232:         \\Python2.4 \\Lib \\site-packages \\mypackage') or
1233:         '/usr/lib/python2.4/site- packages/mypackage/mysubpackage' ('C:
1234:         \\Python2.4 \\Lib \\site-packages \\mypackage \\mysubpackage').
1235:         '''
1236: 
1237:         if len(files)>1:
1238:             for f in files:
1239:                 self.add_data_files(f)
1240:             return
1241:         assert len(files)==1
1242:         if is_sequence(files[0]):
1243:             d, files = files[0]
1244:         else:
1245:             d = None
1246:         if is_string(files):
1247:             filepat = files
1248:         elif is_sequence(files):
1249:             if len(files)==1:
1250:                 filepat = files[0]
1251:             else:
1252:                 for f in files:
1253:                     self.add_data_files((d, f))
1254:                 return
1255:         else:
1256:             raise TypeError(repr(type(files)))
1257: 
1258:         if d is None:
1259:             if hasattr(filepat, '__call__'):
1260:                 d = ''
1261:             elif os.path.isabs(filepat):
1262:                 d = ''
1263:             else:
1264:                 d = os.path.dirname(filepat)
1265:             self.add_data_files((d, files))
1266:             return
1267: 
1268:         paths = self.paths(filepat, include_non_existing=False)
1269:         if is_glob_pattern(filepat):
1270:             if is_glob_pattern(d):
1271:                 pattern_list = d.split(os.sep)
1272:                 pattern_list.reverse()
1273:                 for path in paths:
1274:                     path_list = path.split(os.sep)
1275:                     path_list.reverse()
1276:                     path_list.pop() # filename
1277:                     target_list = []
1278:                     i = 0
1279:                     for s in pattern_list:
1280:                         if is_glob_pattern(s):
1281:                             target_list.append(path_list[i])
1282:                             i += 1
1283:                         else:
1284:                             target_list.append(s)
1285:                     target_list.reverse()
1286:                     self.add_data_files((os.sep.join(target_list), path))
1287:             else:
1288:                 self.add_data_files((d, paths))
1289:             return
1290:         assert not is_glob_pattern(d), repr((d, filepat))
1291: 
1292:         dist = self.get_distribution()
1293:         if dist is not None and dist.data_files is not None:
1294:             data_files = dist.data_files
1295:         else:
1296:             data_files = self.data_files
1297: 
1298:         data_files.append((os.path.join(self.path_in_package, d), paths))
1299: 
1300:     ### XXX Implement add_py_modules
1301: 
1302:     def add_define_macros(self, macros):
1303:         '''Add define macros to configuration
1304: 
1305:         Add the given sequence of macro name and value duples to the beginning
1306:         of the define_macros list This list will be visible to all extension
1307:         modules of the current package.
1308:         '''
1309:         dist = self.get_distribution()
1310:         if dist is not None:
1311:             if not hasattr(dist, 'define_macros'):
1312:                 dist.define_macros = []
1313:             dist.define_macros.extend(macros)
1314:         else:
1315:             self.define_macros.extend(macros)
1316: 
1317: 
1318:     def add_include_dirs(self,*paths):
1319:         '''Add paths to configuration include directories.
1320: 
1321:         Add the given sequence of paths to the beginning of the include_dirs
1322:         list. This list will be visible to all extension modules of the
1323:         current package.
1324:         '''
1325:         include_dirs = self.paths(paths)
1326:         dist = self.get_distribution()
1327:         if dist is not None:
1328:             if dist.include_dirs is None:
1329:                 dist.include_dirs = []
1330:             dist.include_dirs.extend(include_dirs)
1331:         else:
1332:             self.include_dirs.extend(include_dirs)
1333: 
1334:     def add_headers(self,*files):
1335:         '''Add installable headers to configuration.
1336: 
1337:         Add the given sequence of files to the beginning of the headers list.
1338:         By default, headers will be installed under <python-
1339:         include>/<self.name.replace('.','/')>/ directory. If an item of files
1340:         is a tuple, then its first argument specifies the actual installation
1341:         location relative to the <python-include> path.
1342: 
1343:         Parameters
1344:         ----------
1345:         files : str or seq
1346:             Argument(s) can be either:
1347: 
1348:                 * 2-sequence (<includedir suffix>,<path to header file(s)>)
1349:                 * path(s) to header file(s) where python includedir suffix will
1350:                   default to package name.
1351:         '''
1352:         headers = []
1353:         for path in files:
1354:             if is_string(path):
1355:                 [headers.append((self.name, p)) for p in self.paths(path)]
1356:             else:
1357:                 if not isinstance(path, (tuple, list)) or len(path) != 2:
1358:                     raise TypeError(repr(path))
1359:                 [headers.append((path[0], p)) for p in self.paths(path[1])]
1360:         dist = self.get_distribution()
1361:         if dist is not None:
1362:             if dist.headers is None:
1363:                 dist.headers = []
1364:             dist.headers.extend(headers)
1365:         else:
1366:             self.headers.extend(headers)
1367: 
1368:     def paths(self,*paths,**kws):
1369:         '''Apply glob to paths and prepend local_path if needed.
1370: 
1371:         Applies glob.glob(...) to each path in the sequence (if needed) and
1372:         pre-pends the local_path if needed. Because this is called on all
1373:         source lists, this allows wildcard characters to be specified in lists
1374:         of sources for extension modules and libraries and scripts and allows
1375:         path-names be relative to the source directory.
1376: 
1377:         '''
1378:         include_non_existing = kws.get('include_non_existing', True)
1379:         return gpaths(paths,
1380:                       local_path = self.local_path,
1381:                       include_non_existing=include_non_existing)
1382: 
1383:     def _fix_paths_dict(self, kw):
1384:         for k in kw.keys():
1385:             v = kw[k]
1386:             if k in ['sources', 'depends', 'include_dirs', 'library_dirs',
1387:                      'module_dirs', 'extra_objects']:
1388:                 new_v = self.paths(v)
1389:                 kw[k] = new_v
1390: 
1391:     def add_extension(self,name,sources,**kw):
1392:         '''Add extension to configuration.
1393: 
1394:         Create and add an Extension instance to the ext_modules list. This
1395:         method also takes the following optional keyword arguments that are
1396:         passed on to the Extension constructor.
1397: 
1398:         Parameters
1399:         ----------
1400:         name : str
1401:             name of the extension
1402:         sources : seq
1403:             list of the sources. The list of sources may contain functions
1404:             (called source generators) which must take an extension instance
1405:             and a build directory as inputs and return a source file or list of
1406:             source files or None. If None is returned then no sources are
1407:             generated. If the Extension instance has no sources after
1408:             processing all source generators, then no extension module is
1409:             built.
1410:         include_dirs :
1411:         define_macros :
1412:         undef_macros :
1413:         library_dirs :
1414:         libraries :
1415:         runtime_library_dirs :
1416:         extra_objects :
1417:         extra_compile_args :
1418:         extra_link_args :
1419:         extra_f77_compile_args :
1420:         extra_f90_compile_args :
1421:         export_symbols :
1422:         swig_opts :
1423:         depends :
1424:             The depends list contains paths to files or directories that the
1425:             sources of the extension module depend on. If any path in the
1426:             depends list is newer than the extension module, then the module
1427:             will be rebuilt.
1428:         language :
1429:         f2py_options :
1430:         module_dirs :
1431:         extra_info : dict or list
1432:             dict or list of dict of keywords to be appended to keywords.
1433: 
1434:         Notes
1435:         -----
1436:         The self.paths(...) method is applied to all lists that may contain
1437:         paths.
1438:         '''
1439:         ext_args = copy.copy(kw)
1440:         ext_args['name'] = dot_join(self.name, name)
1441:         ext_args['sources'] = sources
1442: 
1443:         if 'extra_info' in ext_args:
1444:             extra_info = ext_args['extra_info']
1445:             del ext_args['extra_info']
1446:             if isinstance(extra_info, dict):
1447:                 extra_info = [extra_info]
1448:             for info in extra_info:
1449:                 assert isinstance(info, dict), repr(info)
1450:                 dict_append(ext_args,**info)
1451: 
1452:         self._fix_paths_dict(ext_args)
1453: 
1454:         # Resolve out-of-tree dependencies
1455:         libraries = ext_args.get('libraries', [])
1456:         libnames = []
1457:         ext_args['libraries'] = []
1458:         for libname in libraries:
1459:             if isinstance(libname, tuple):
1460:                 self._fix_paths_dict(libname[1])
1461: 
1462:             # Handle library names of the form libname@relative/path/to/library
1463:             if '@' in libname:
1464:                 lname, lpath = libname.split('@', 1)
1465:                 lpath = os.path.abspath(njoin(self.local_path, lpath))
1466:                 if os.path.isdir(lpath):
1467:                     c = self.get_subpackage(None, lpath,
1468:                                             caller_level = 2)
1469:                     if isinstance(c, Configuration):
1470:                         c = c.todict()
1471:                     for l in [l[0] for l in c.get('libraries', [])]:
1472:                         llname = l.split('__OF__', 1)[0]
1473:                         if llname == lname:
1474:                             c.pop('name', None)
1475:                             dict_append(ext_args,**c)
1476:                             break
1477:                     continue
1478:             libnames.append(libname)
1479: 
1480:         ext_args['libraries'] = libnames + ext_args['libraries']
1481:         ext_args['define_macros'] = \
1482:             self.define_macros + ext_args.get('define_macros', [])
1483: 
1484:         from numpy.distutils.core import Extension
1485:         ext = Extension(**ext_args)
1486:         self.ext_modules.append(ext)
1487: 
1488:         dist = self.get_distribution()
1489:         if dist is not None:
1490:             self.warn('distutils distribution has been initialized,'\
1491:                       ' it may be too late to add an extension '+name)
1492:         return ext
1493: 
1494:     def add_library(self,name,sources,**build_info):
1495:         '''
1496:         Add library to configuration.
1497: 
1498:         Parameters
1499:         ----------
1500:         name : str
1501:             Name of the extension.
1502:         sources : sequence
1503:             List of the sources. The list of sources may contain functions
1504:             (called source generators) which must take an extension instance
1505:             and a build directory as inputs and return a source file or list of
1506:             source files or None. If None is returned then no sources are
1507:             generated. If the Extension instance has no sources after
1508:             processing all source generators, then no extension module is
1509:             built.
1510:         build_info : dict, optional
1511:             The following keys are allowed:
1512: 
1513:                 * depends
1514:                 * macros
1515:                 * include_dirs
1516:                 * extra_compiler_args
1517:                 * extra_f77_compiler_args
1518:                 * extra_f90_compiler_args
1519:                 * f2py_options
1520:                 * language
1521: 
1522:         '''
1523:         self._add_library(name, sources, None, build_info)
1524: 
1525:         dist = self.get_distribution()
1526:         if dist is not None:
1527:             self.warn('distutils distribution has been initialized,'\
1528:                       ' it may be too late to add a library '+ name)
1529: 
1530:     def _add_library(self, name, sources, install_dir, build_info):
1531:         '''Common implementation for add_library and add_installed_library. Do
1532:         not use directly'''
1533:         build_info = copy.copy(build_info)
1534:         name = name #+ '__OF__' + self.name
1535:         build_info['sources'] = sources
1536: 
1537:         # Sometimes, depends is not set up to an empty list by default, and if
1538:         # depends is not given to add_library, distutils barfs (#1134)
1539:         if not 'depends' in build_info:
1540:             build_info['depends'] = []
1541: 
1542:         self._fix_paths_dict(build_info)
1543: 
1544:         # Add to libraries list so that it is build with build_clib
1545:         self.libraries.append((name, build_info))
1546: 
1547:     def add_installed_library(self, name, sources, install_dir, build_info=None):
1548:         '''
1549:         Similar to add_library, but the specified library is installed.
1550: 
1551:         Most C libraries used with `distutils` are only used to build python
1552:         extensions, but libraries built through this method will be installed
1553:         so that they can be reused by third-party packages.
1554: 
1555:         Parameters
1556:         ----------
1557:         name : str
1558:             Name of the installed library.
1559:         sources : sequence
1560:             List of the library's source files. See `add_library` for details.
1561:         install_dir : str
1562:             Path to install the library, relative to the current sub-package.
1563:         build_info : dict, optional
1564:             The following keys are allowed:
1565: 
1566:                 * depends
1567:                 * macros
1568:                 * include_dirs
1569:                 * extra_compiler_args
1570:                 * extra_f77_compiler_args
1571:                 * extra_f90_compiler_args
1572:                 * f2py_options
1573:                 * language
1574: 
1575:         Returns
1576:         -------
1577:         None
1578: 
1579:         See Also
1580:         --------
1581:         add_library, add_npy_pkg_config, get_info
1582: 
1583:         Notes
1584:         -----
1585:         The best way to encode the options required to link against the specified
1586:         C libraries is to use a "libname.ini" file, and use `get_info` to
1587:         retrieve the required options (see `add_npy_pkg_config` for more
1588:         information).
1589: 
1590:         '''
1591:         if not build_info:
1592:             build_info = {}
1593: 
1594:         install_dir = os.path.join(self.package_path, install_dir)
1595:         self._add_library(name, sources, install_dir, build_info)
1596:         self.installed_libraries.append(InstallableLib(name, build_info, install_dir))
1597: 
1598:     def add_npy_pkg_config(self, template, install_dir, subst_dict=None):
1599:         '''
1600:         Generate and install a npy-pkg config file from a template.
1601: 
1602:         The config file generated from `template` is installed in the
1603:         given install directory, using `subst_dict` for variable substitution.
1604: 
1605:         Parameters
1606:         ----------
1607:         template : str
1608:             The path of the template, relatively to the current package path.
1609:         install_dir : str
1610:             Where to install the npy-pkg config file, relatively to the current
1611:             package path.
1612:         subst_dict : dict, optional
1613:             If given, any string of the form ``@key@`` will be replaced by
1614:             ``subst_dict[key]`` in the template file when installed. The install
1615:             prefix is always available through the variable ``@prefix@``, since the
1616:             install prefix is not easy to get reliably from setup.py.
1617: 
1618:         See also
1619:         --------
1620:         add_installed_library, get_info
1621: 
1622:         Notes
1623:         -----
1624:         This works for both standard installs and in-place builds, i.e. the
1625:         ``@prefix@`` refer to the source directory for in-place builds.
1626: 
1627:         Examples
1628:         --------
1629:         ::
1630: 
1631:             config.add_npy_pkg_config('foo.ini.in', 'lib', {'foo': bar})
1632: 
1633:         Assuming the foo.ini.in file has the following content::
1634: 
1635:             [meta]
1636:             Name=@foo@
1637:             Version=1.0
1638:             Description=dummy description
1639: 
1640:             [default]
1641:             Cflags=-I@prefix@/include
1642:             Libs=
1643: 
1644:         The generated file will have the following content::
1645: 
1646:             [meta]
1647:             Name=bar
1648:             Version=1.0
1649:             Description=dummy description
1650: 
1651:             [default]
1652:             Cflags=-Iprefix_dir/include
1653:             Libs=
1654: 
1655:         and will be installed as foo.ini in the 'lib' subpath.
1656: 
1657:         '''
1658:         if subst_dict is None:
1659:             subst_dict = {}
1660:         basename = os.path.splitext(template)[0]
1661:         template = os.path.join(self.package_path, template)
1662: 
1663:         if self.name in self.installed_pkg_config:
1664:             self.installed_pkg_config[self.name].append((template, install_dir,
1665:                 subst_dict))
1666:         else:
1667:             self.installed_pkg_config[self.name] = [(template, install_dir,
1668:                 subst_dict)]
1669: 
1670: 
1671:     def add_scripts(self,*files):
1672:         '''Add scripts to configuration.
1673: 
1674:         Add the sequence of files to the beginning of the scripts list.
1675:         Scripts will be installed under the <prefix>/bin/ directory.
1676: 
1677:         '''
1678:         scripts = self.paths(files)
1679:         dist = self.get_distribution()
1680:         if dist is not None:
1681:             if dist.scripts is None:
1682:                 dist.scripts = []
1683:             dist.scripts.extend(scripts)
1684:         else:
1685:             self.scripts.extend(scripts)
1686: 
1687:     def dict_append(self,**dict):
1688:         for key in self.list_keys:
1689:             a = getattr(self, key)
1690:             a.extend(dict.get(key, []))
1691:         for key in self.dict_keys:
1692:             a = getattr(self, key)
1693:             a.update(dict.get(key, {}))
1694:         known_keys = self.list_keys + self.dict_keys + self.extra_keys
1695:         for key in dict.keys():
1696:             if key not in known_keys:
1697:                 a = getattr(self, key, None)
1698:                 if a and a==dict[key]: continue
1699:                 self.warn('Inheriting attribute %r=%r from %r' \
1700:                           % (key, dict[key], dict.get('name', '?')))
1701:                 setattr(self, key, dict[key])
1702:                 self.extra_keys.append(key)
1703:             elif key in self.extra_keys:
1704:                 self.info('Ignoring attempt to set %r (from %r to %r)' \
1705:                           % (key, getattr(self, key), dict[key]))
1706:             elif key in known_keys:
1707:                 # key is already processed above
1708:                 pass
1709:             else:
1710:                 raise ValueError("Don't know about key=%r" % (key))
1711: 
1712:     def __str__(self):
1713:         from pprint import pformat
1714:         known_keys = self.list_keys + self.dict_keys + self.extra_keys
1715:         s = '<'+5*'-' + '\n'
1716:         s += 'Configuration of '+self.name+':\n'
1717:         known_keys.sort()
1718:         for k in known_keys:
1719:             a = getattr(self, k, None)
1720:             if a:
1721:                 s += '%s = %s\n' % (k, pformat(a))
1722:         s += 5*'-' + '>'
1723:         return s
1724: 
1725:     def get_config_cmd(self):
1726:         '''
1727:         Returns the numpy.distutils config command instance.
1728:         '''
1729:         cmd = get_cmd('config')
1730:         cmd.ensure_finalized()
1731:         cmd.dump_source = 0
1732:         cmd.noisy = 0
1733:         old_path = os.environ.get('PATH')
1734:         if old_path:
1735:             path = os.pathsep.join(['.', old_path])
1736:             os.environ['PATH'] = path
1737:         return cmd
1738: 
1739:     def get_build_temp_dir(self):
1740:         '''
1741:         Return a path to a temporary directory where temporary files should be
1742:         placed.
1743:         '''
1744:         cmd = get_cmd('build')
1745:         cmd.ensure_finalized()
1746:         return cmd.build_temp
1747: 
1748:     def have_f77c(self):
1749:         '''Check for availability of Fortran 77 compiler.
1750: 
1751:         Use it inside source generating function to ensure that
1752:         setup distribution instance has been initialized.
1753: 
1754:         Notes
1755:         -----
1756:         True if a Fortran 77 compiler is available (because a simple Fortran 77
1757:         code was able to be compiled successfully).
1758:         '''
1759:         simple_fortran_subroutine = '''
1760:         subroutine simple
1761:         end
1762:         '''
1763:         config_cmd = self.get_config_cmd()
1764:         flag = config_cmd.try_compile(simple_fortran_subroutine, lang='f77')
1765:         return flag
1766: 
1767:     def have_f90c(self):
1768:         '''Check for availability of Fortran 90 compiler.
1769: 
1770:         Use it inside source generating function to ensure that
1771:         setup distribution instance has been initialized.
1772: 
1773:         Notes
1774:         -----
1775:         True if a Fortran 90 compiler is available (because a simple Fortran
1776:         90 code was able to be compiled successfully)
1777:         '''
1778:         simple_fortran_subroutine = '''
1779:         subroutine simple
1780:         end
1781:         '''
1782:         config_cmd = self.get_config_cmd()
1783:         flag = config_cmd.try_compile(simple_fortran_subroutine, lang='f90')
1784:         return flag
1785: 
1786:     def append_to(self, extlib):
1787:         '''Append libraries, include_dirs to extension or library item.
1788:         '''
1789:         if is_sequence(extlib):
1790:             lib_name, build_info = extlib
1791:             dict_append(build_info,
1792:                         libraries=self.libraries,
1793:                         include_dirs=self.include_dirs)
1794:         else:
1795:             from numpy.distutils.core import Extension
1796:             assert isinstance(extlib, Extension), repr(extlib)
1797:             extlib.libraries.extend(self.libraries)
1798:             extlib.include_dirs.extend(self.include_dirs)
1799: 
1800:     def _get_svn_revision(self, path):
1801:         '''Return path's SVN revision number.
1802:         '''
1803:         revision = None
1804:         m = None
1805:         cwd =  os.getcwd()
1806:         try:
1807:             os.chdir(path or '.')
1808:             p = subprocess.Popen(['svnversion'], shell=True,
1809:                     stdout=subprocess.PIPE, stderr=None,
1810:                     close_fds=True)
1811:             sout = p.stdout
1812:             m = re.match(r'(?P<revision>\d+)', sout.read())
1813:         except:
1814:             pass
1815:         os.chdir(cwd)
1816:         if m:
1817:             revision = int(m.group('revision'))
1818:             return revision
1819:         if sys.platform=='win32' and os.environ.get('SVN_ASP_DOT_NET_HACK', None):
1820:             entries = njoin(path, '_svn', 'entries')
1821:         else:
1822:             entries = njoin(path, '.svn', 'entries')
1823:         if os.path.isfile(entries):
1824:             f = open(entries)
1825:             fstr = f.read()
1826:             f.close()
1827:             if fstr[:5] == '<?xml':  # pre 1.4
1828:                 m = re.search(r'revision="(?P<revision>\d+)"', fstr)
1829:                 if m:
1830:                     revision = int(m.group('revision'))
1831:             else:  # non-xml entries file --- check to be sure that
1832:                 m = re.search(r'dir[\n\r]+(?P<revision>\d+)', fstr)
1833:                 if m:
1834:                     revision = int(m.group('revision'))
1835:         return revision
1836: 
1837:     def _get_hg_revision(self, path):
1838:         '''Return path's Mercurial revision number.
1839:         '''
1840:         revision = None
1841:         m = None
1842:         cwd =  os.getcwd()
1843:         try:
1844:             os.chdir(path or '.')
1845:             p = subprocess.Popen(['hg identify --num'], shell=True,
1846:                     stdout=subprocess.PIPE, stderr=None,
1847:                     close_fds=True)
1848:             sout = p.stdout
1849:             m = re.match(r'(?P<revision>\d+)', sout.read())
1850:         except:
1851:             pass
1852:         os.chdir(cwd)
1853:         if m:
1854:             revision = int(m.group('revision'))
1855:             return revision
1856:         branch_fn = njoin(path, '.hg', 'branch')
1857:         branch_cache_fn = njoin(path, '.hg', 'branch.cache')
1858: 
1859:         if os.path.isfile(branch_fn):
1860:             branch0 = None
1861:             f = open(branch_fn)
1862:             revision0 = f.read().strip()
1863:             f.close()
1864: 
1865:             branch_map = {}
1866:             for line in file(branch_cache_fn, 'r'):
1867:                 branch1, revision1  = line.split()[:2]
1868:                 if revision1==revision0:
1869:                     branch0 = branch1
1870:                 try:
1871:                     revision1 = int(revision1)
1872:                 except ValueError:
1873:                     continue
1874:                 branch_map[branch1] = revision1
1875: 
1876:             revision = branch_map.get(branch0)
1877:         return revision
1878: 
1879: 
1880:     def get_version(self, version_file=None, version_variable=None):
1881:         '''Try to get version string of a package.
1882: 
1883:         Return a version string of the current package or None if the version
1884:         information could not be detected.
1885: 
1886:         Notes
1887:         -----
1888:         This method scans files named
1889:         __version__.py, <packagename>_version.py, version.py, and
1890:         __svn_version__.py for string variables version, __version\__, and
1891:         <packagename>_version, until a version number is found.
1892:         '''
1893:         version = getattr(self, 'version', None)
1894:         if version is not None:
1895:             return version
1896: 
1897:         # Get version from version file.
1898:         if version_file is None:
1899:             files = ['__version__.py',
1900:                      self.name.split('.')[-1]+'_version.py',
1901:                      'version.py',
1902:                      '__svn_version__.py',
1903:                      '__hg_version__.py']
1904:         else:
1905:             files = [version_file]
1906:         if version_variable is None:
1907:             version_vars = ['version',
1908:                             '__version__',
1909:                             self.name.split('.')[-1]+'_version']
1910:         else:
1911:             version_vars = [version_variable]
1912:         for f in files:
1913:             fn = njoin(self.local_path, f)
1914:             if os.path.isfile(fn):
1915:                 info = (open(fn), fn, ('.py', 'U', 1))
1916:                 name = os.path.splitext(os.path.basename(fn))[0]
1917:                 n = dot_join(self.name, name)
1918:                 try:
1919:                     version_module = imp.load_module('_'.join(n.split('.')),*info)
1920:                 except ImportError:
1921:                     msg = get_exception()
1922:                     self.warn(str(msg))
1923:                     version_module = None
1924:                 if version_module is None:
1925:                     continue
1926: 
1927:                 for a in version_vars:
1928:                     version = getattr(version_module, a, None)
1929:                     if version is not None:
1930:                         break
1931:                 if version is not None:
1932:                     break
1933: 
1934:         if version is not None:
1935:             self.version = version
1936:             return version
1937: 
1938:         # Get version as SVN or Mercurial revision number
1939:         revision = self._get_svn_revision(self.local_path)
1940:         if revision is None:
1941:             revision = self._get_hg_revision(self.local_path)
1942: 
1943:         if revision is not None:
1944:             version = str(revision)
1945:             self.version = version
1946: 
1947:         return version
1948: 
1949:     def make_svn_version_py(self, delete=True):
1950:         '''Appends a data function to the data_files list that will generate
1951:         __svn_version__.py file to the current package directory.
1952: 
1953:         Generate package __svn_version__.py file from SVN revision number,
1954:         it will be removed after python exits but will be available
1955:         when sdist, etc commands are executed.
1956: 
1957:         Notes
1958:         -----
1959:         If __svn_version__.py existed before, nothing is done.
1960: 
1961:         This is
1962:         intended for working with source directories that are in an SVN
1963:         repository.
1964:         '''
1965:         target = njoin(self.local_path, '__svn_version__.py')
1966:         revision = self._get_svn_revision(self.local_path)
1967:         if os.path.isfile(target) or revision is None:
1968:             return
1969:         else:
1970:             def generate_svn_version_py():
1971:                 if not os.path.isfile(target):
1972:                     version = str(revision)
1973:                     self.info('Creating %s (version=%r)' % (target, version))
1974:                     f = open(target, 'w')
1975:                     f.write('version = %r\n' % (version))
1976:                     f.close()
1977: 
1978:                 import atexit
1979:                 def rm_file(f=target,p=self.info):
1980:                     if delete:
1981:                         try: os.remove(f); p('removed '+f)
1982:                         except OSError: pass
1983:                         try: os.remove(f+'c'); p('removed '+f+'c')
1984:                         except OSError: pass
1985: 
1986:                 atexit.register(rm_file)
1987: 
1988:                 return target
1989: 
1990:             self.add_data_files(('', generate_svn_version_py()))
1991: 
1992:     def make_hg_version_py(self, delete=True):
1993:         '''Appends a data function to the data_files list that will generate
1994:         __hg_version__.py file to the current package directory.
1995: 
1996:         Generate package __hg_version__.py file from Mercurial revision,
1997:         it will be removed after python exits but will be available
1998:         when sdist, etc commands are executed.
1999: 
2000:         Notes
2001:         -----
2002:         If __hg_version__.py existed before, nothing is done.
2003: 
2004:         This is intended for working with source directories that are
2005:         in an Mercurial repository.
2006:         '''
2007:         target = njoin(self.local_path, '__hg_version__.py')
2008:         revision = self._get_hg_revision(self.local_path)
2009:         if os.path.isfile(target) or revision is None:
2010:             return
2011:         else:
2012:             def generate_hg_version_py():
2013:                 if not os.path.isfile(target):
2014:                     version = str(revision)
2015:                     self.info('Creating %s (version=%r)' % (target, version))
2016:                     f = open(target, 'w')
2017:                     f.write('version = %r\n' % (version))
2018:                     f.close()
2019: 
2020:                 import atexit
2021:                 def rm_file(f=target,p=self.info):
2022:                     if delete:
2023:                         try: os.remove(f); p('removed '+f)
2024:                         except OSError: pass
2025:                         try: os.remove(f+'c'); p('removed '+f+'c')
2026:                         except OSError: pass
2027: 
2028:                 atexit.register(rm_file)
2029: 
2030:                 return target
2031: 
2032:             self.add_data_files(('', generate_hg_version_py()))
2033: 
2034:     def make_config_py(self,name='__config__'):
2035:         '''Generate package __config__.py file containing system_info
2036:         information used during building the package.
2037: 
2038:         This file is installed to the
2039:         package installation directory.
2040: 
2041:         '''
2042:         self.py_modules.append((self.name, name, generate_config_py))
2043: 
2044: 
2045:     def get_info(self,*names):
2046:         '''Get resources information.
2047: 
2048:         Return information (from system_info.get_info) for all of the names in
2049:         the argument list in a single dictionary.
2050:         '''
2051:         from .system_info import get_info, dict_append
2052:         info_dict = {}
2053:         for a in names:
2054:             dict_append(info_dict,**get_info(a))
2055:         return info_dict
2056: 
2057: 
2058: def get_cmd(cmdname, _cache={}):
2059:     if cmdname not in _cache:
2060:         import distutils.core
2061:         dist = distutils.core._setup_distribution
2062:         if dist is None:
2063:             from distutils.errors import DistutilsInternalError
2064:             raise DistutilsInternalError(
2065:                   'setup distribution instance not initialized')
2066:         cmd = dist.get_command_obj(cmdname)
2067:         _cache[cmdname] = cmd
2068:     return _cache[cmdname]
2069: 
2070: def get_numpy_include_dirs():
2071:     # numpy_include_dirs are set by numpy/core/setup.py, otherwise []
2072:     include_dirs = Configuration.numpy_include_dirs[:]
2073:     if not include_dirs:
2074:         import numpy
2075:         include_dirs = [ numpy.get_include() ]
2076:     # else running numpy/core/setup.py
2077:     return include_dirs
2078: 
2079: def get_npy_pkg_dir():
2080:     '''Return the path where to find the npy-pkg-config directory.'''
2081:     # XXX: import here for bootstrapping reasons
2082:     import numpy
2083:     d = os.path.join(os.path.dirname(numpy.__file__),
2084:             'core', 'lib', 'npy-pkg-config')
2085:     return d
2086: 
2087: def get_pkg_info(pkgname, dirs=None):
2088:     '''
2089:     Return library info for the given package.
2090: 
2091:     Parameters
2092:     ----------
2093:     pkgname : str
2094:         Name of the package (should match the name of the .ini file, without
2095:         the extension, e.g. foo for the file foo.ini).
2096:     dirs : sequence, optional
2097:         If given, should be a sequence of additional directories where to look
2098:         for npy-pkg-config files. Those directories are searched prior to the
2099:         NumPy directory.
2100: 
2101:     Returns
2102:     -------
2103:     pkginfo : class instance
2104:         The `LibraryInfo` instance containing the build information.
2105: 
2106:     Raises
2107:     ------
2108:     PkgNotFound
2109:         If the package is not found.
2110: 
2111:     See Also
2112:     --------
2113:     Configuration.add_npy_pkg_config, Configuration.add_installed_library,
2114:     get_info
2115: 
2116:     '''
2117:     from numpy.distutils.npy_pkg_config import read_config
2118: 
2119:     if dirs:
2120:         dirs.append(get_npy_pkg_dir())
2121:     else:
2122:         dirs = [get_npy_pkg_dir()]
2123:     return read_config(pkgname, dirs)
2124: 
2125: def get_info(pkgname, dirs=None):
2126:     '''
2127:     Return an info dict for a given C library.
2128: 
2129:     The info dict contains the necessary options to use the C library.
2130: 
2131:     Parameters
2132:     ----------
2133:     pkgname : str
2134:         Name of the package (should match the name of the .ini file, without
2135:         the extension, e.g. foo for the file foo.ini).
2136:     dirs : sequence, optional
2137:         If given, should be a sequence of additional directories where to look
2138:         for npy-pkg-config files. Those directories are searched prior to the
2139:         NumPy directory.
2140: 
2141:     Returns
2142:     -------
2143:     info : dict
2144:         The dictionary with build information.
2145: 
2146:     Raises
2147:     ------
2148:     PkgNotFound
2149:         If the package is not found.
2150: 
2151:     See Also
2152:     --------
2153:     Configuration.add_npy_pkg_config, Configuration.add_installed_library,
2154:     get_pkg_info
2155: 
2156:     Examples
2157:     --------
2158:     To get the necessary information for the npymath library from NumPy:
2159: 
2160:     >>> npymath_info = np.distutils.misc_util.get_info('npymath')
2161:     >>> npymath_info                                    #doctest: +SKIP
2162:     {'define_macros': [], 'libraries': ['npymath'], 'library_dirs':
2163:     ['.../numpy/core/lib'], 'include_dirs': ['.../numpy/core/include']}
2164: 
2165:     This info dict can then be used as input to a `Configuration` instance::
2166: 
2167:       config.add_extension('foo', sources=['foo.c'], extra_info=npymath_info)
2168: 
2169:     '''
2170:     from numpy.distutils.npy_pkg_config import parse_flags
2171:     pkg_info = get_pkg_info(pkgname, dirs)
2172: 
2173:     # Translate LibraryInfo instance into a build_info dict
2174:     info = parse_flags(pkg_info.cflags())
2175:     for k, v in parse_flags(pkg_info.libs()).items():
2176:         info[k].extend(v)
2177: 
2178:     # add_extension extra_info argument is ANAL
2179:     info['define_macros'] = info['macros']
2180:     del info['macros']
2181:     del info['ignored']
2182: 
2183:     return info
2184: 
2185: def is_bootstrapping():
2186:     if sys.version_info[0] >= 3:
2187:         import builtins
2188:     else:
2189:         import __builtin__ as builtins
2190: 
2191:     try:
2192:         builtins.__NUMPY_SETUP__
2193:         return True
2194:     except AttributeError:
2195:         return False
2196:         __NUMPY_SETUP__ = False
2197: 
2198: 
2199: #########################
2200: 
2201: def default_config_dict(name = None, parent_name = None, local_path=None):
2202:     '''Return a configuration dictionary for usage in
2203:     configuration() function defined in file setup_<name>.py.
2204:     '''
2205:     import warnings
2206:     warnings.warn('Use Configuration(%r,%r,top_path=%r) instead of '\
2207:                   'deprecated default_config_dict(%r,%r,%r)'
2208:                   % (name, parent_name, local_path,
2209:                      name, parent_name, local_path,
2210:                      ))
2211:     c = Configuration(name, parent_name, local_path)
2212:     return c.todict()
2213: 
2214: 
2215: def dict_append(d, **kws):
2216:     for k, v in kws.items():
2217:         if k in d:
2218:             ov = d[k]
2219:             if isinstance(ov, str):
2220:                 d[k] = v
2221:             else:
2222:                 d[k].extend(v)
2223:         else:
2224:             d[k] = v
2225: 
2226: def appendpath(prefix, path):
2227:     if os.path.sep != '/':
2228:         prefix = prefix.replace('/', os.path.sep)
2229:         path = path.replace('/', os.path.sep)
2230:     drive = ''
2231:     if os.path.isabs(path):
2232:         drive = os.path.splitdrive(prefix)[0]
2233:         absprefix = os.path.splitdrive(os.path.abspath(prefix))[1]
2234:         pathdrive, path = os.path.splitdrive(path)
2235:         d = os.path.commonprefix([absprefix, path])
2236:         if os.path.join(absprefix[:len(d)], absprefix[len(d):]) != absprefix \
2237:            or os.path.join(path[:len(d)], path[len(d):]) != path:
2238:             # Handle invalid paths
2239:             d = os.path.dirname(d)
2240:         subpath = path[len(d):]
2241:         if os.path.isabs(subpath):
2242:             subpath = subpath[1:]
2243:     else:
2244:         subpath = path
2245:     return os.path.normpath(njoin(drive + prefix, subpath))
2246: 
2247: def generate_config_py(target):
2248:     '''Generate config.py file containing system_info information
2249:     used during building the package.
2250: 
2251:     Usage:
2252:         config['py_modules'].append((packagename, '__config__',generate_config_py))
2253:     '''
2254:     from numpy.distutils.system_info import system_info
2255:     from distutils.dir_util import mkpath
2256:     mkpath(os.path.dirname(target))
2257:     f = open(target, 'w')
2258:     f.write('# This file is generated by %s\n' % (os.path.abspath(sys.argv[0])))
2259:     f.write('# It contains system_info results at the time of building this package.\n')
2260:     f.write('__all__ = ["get_info","show"]\n\n')
2261:     for k, i in system_info.saved_results.items():
2262:         f.write('%s=%r\n' % (k, i))
2263:     f.write(r'''
2264: def get_info(name):
2265:     g = globals()
2266:     return g.get(name, g.get(name + "_info", {}))
2267: 
2268: def show():
2269:     for name,info_dict in globals().items():
2270:         if name[0] == "_" or type(info_dict) is not type({}): continue
2271:         print(name + ":")
2272:         if not info_dict:
2273:             print("  NOT AVAILABLE")
2274:         for k,v in info_dict.items():
2275:             v = str(v)
2276:             if k == "sources" and len(v) > 200:
2277:                 v = v[:60] + " ...\n... " + v[-60:]
2278:             print("    %s = %s" % (k,v))
2279:     ''')
2280: 
2281:     f.close()
2282:     return target
2283: 
2284: def msvc_version(compiler):
2285:     '''Return version major and minor of compiler instance if it is
2286:     MSVC, raise an exception otherwise.'''
2287:     if not compiler.compiler_type == "msvc":
2288:         raise ValueError("Compiler instance is not msvc (%s)"\
2289:                          % compiler.compiler_type)
2290:     return compiler._MSVCCompiler__version
2291: 
2292: if sys.version[:3] >= '2.5':
2293:     def get_build_architecture():
2294:         from distutils.msvccompiler import get_build_architecture
2295:         return get_build_architecture()
2296: else:
2297:     #copied from python 2.5.1 distutils/msvccompiler.py
2298:     def get_build_architecture():
2299:         '''Return the processor architecture.
2300: 
2301:         Possible results are "Intel", "Itanium", or "AMD64".
2302:         '''
2303:         prefix = " bit ("
2304:         i = sys.version.find(prefix)
2305:         if i == -1:
2306:             return "Intel"
2307:         j = sys.version.find(")", i)
2308:         return sys.version[i+len(prefix):j]
2309: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3, 0))

# 'import os' statement (line 3)
import os

import_module(stypy.reporting.localization.Localization(__file__, 3, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4, 0))

# 'import re' statement (line 4)
import re

import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 5, 0))

# 'import sys' statement (line 5)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 5, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'import imp' statement (line 6)
import imp

import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'imp', imp, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import copy' statement (line 7)
import copy

import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'copy', copy, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import glob' statement (line 8)
import glob

import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'glob', glob, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import atexit' statement (line 9)
import atexit

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'atexit', atexit, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import tempfile' statement (line 10)
import tempfile

import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'tempfile', tempfile, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'import subprocess' statement (line 11)
import subprocess

import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'subprocess', subprocess, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import shutil' statement (line 12)
import shutil

import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'shutil', shutil, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import distutils' statement (line 14)
import distutils

import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'distutils', distutils, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from distutils.errors import DistutilsError' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_38401 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'distutils.errors')

if (type(import_38401) is not StypyTypeError):

    if (import_38401 != 'pyd_module'):
        __import__(import_38401)
        sys_modules_38402 = sys.modules[import_38401]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'distutils.errors', sys_modules_38402.module_type_store, module_type_store, ['DistutilsError'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_38402, sys_modules_38402.module_type_store, module_type_store)
    else:
        from distutils.errors import DistutilsError

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'distutils.errors', None, module_type_store, ['DistutilsError'], [DistutilsError])

else:
    # Assigning a type to the variable 'distutils.errors' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'distutils.errors', import_38401)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')



# SSA begins for try-except statement (line 16)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 4))

# 'from threading import tlocal' statement (line 17)
from threading import local as tlocal

import_from_module(stypy.reporting.localization.Localization(__file__, 17, 4), 'threading', None, module_type_store, ['local'], [tlocal])
# Adding an alias
module_type_store.add_alias('tlocal', 'local')

# SSA branch for the except part of a try statement (line 16)
# SSA branch for the except 'ImportError' branch of a try statement (line 16)
module_type_store.open_ssa_branch('except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 4))

# 'from dummy_threading import tlocal' statement (line 19)
from dummy_threading import local as tlocal

import_from_module(stypy.reporting.localization.Localization(__file__, 19, 4), 'dummy_threading', None, module_type_store, ['local'], [tlocal])
# Adding an alias
module_type_store.add_alias('tlocal', 'local')

# SSA join for try-except statement (line 16)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Call to a Name (line 22):

# Assigning a Call to a Name (line 22):

# Call to tlocal(...): (line 22)
# Processing the call keyword arguments (line 22)
kwargs_38404 = {}
# Getting the type of 'tlocal' (line 22)
tlocal_38403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 22, 9), 'tlocal', False)
# Calling tlocal(args, kwargs) (line 22)
tlocal_call_result_38405 = invoke(stypy.reporting.localization.Localization(__file__, 22, 9), tlocal_38403, *[], **kwargs_38404)

# Assigning a type to the variable '_tdata' (line 22)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), '_tdata', tlocal_call_result_38405)

# Assigning a List to a Name (line 25):

# Assigning a List to a Name (line 25):

# Obtaining an instance of the builtin type 'list' (line 25)
list_38406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 11), 'list')
# Adding type elements to the builtin type 'list' instance (line 25)

# Assigning a type to the variable '_tmpdirs' (line 25)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), '_tmpdirs', list_38406)

@norecursion
def clean_up_temporary_directory(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'clean_up_temporary_directory'
    module_type_store = module_type_store.open_function_context('clean_up_temporary_directory', 26, 0, False)
    
    # Passed parameters checking function
    clean_up_temporary_directory.stypy_localization = localization
    clean_up_temporary_directory.stypy_type_of_self = None
    clean_up_temporary_directory.stypy_type_store = module_type_store
    clean_up_temporary_directory.stypy_function_name = 'clean_up_temporary_directory'
    clean_up_temporary_directory.stypy_param_names_list = []
    clean_up_temporary_directory.stypy_varargs_param_name = None
    clean_up_temporary_directory.stypy_kwargs_param_name = None
    clean_up_temporary_directory.stypy_call_defaults = defaults
    clean_up_temporary_directory.stypy_call_varargs = varargs
    clean_up_temporary_directory.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'clean_up_temporary_directory', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'clean_up_temporary_directory', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'clean_up_temporary_directory(...)' code ##################

    
    # Getting the type of '_tmpdirs' (line 27)
    _tmpdirs_38407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 13), '_tmpdirs')
    # Testing the type of a for loop iterable (line 27)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 27, 4), _tmpdirs_38407)
    # Getting the type of the for loop variable (line 27)
    for_loop_var_38408 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 27, 4), _tmpdirs_38407)
    # Assigning a type to the variable 'd' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 4), 'd', for_loop_var_38408)
    # SSA begins for a for statement (line 27)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # SSA begins for try-except statement (line 28)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to rmtree(...): (line 29)
    # Processing the call arguments (line 29)
    # Getting the type of 'd' (line 29)
    d_38411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 29, 26), 'd', False)
    # Processing the call keyword arguments (line 29)
    kwargs_38412 = {}
    # Getting the type of 'shutil' (line 29)
    shutil_38409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 29, 12), 'shutil', False)
    # Obtaining the member 'rmtree' of a type (line 29)
    rmtree_38410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 29, 12), shutil_38409, 'rmtree')
    # Calling rmtree(args, kwargs) (line 29)
    rmtree_call_result_38413 = invoke(stypy.reporting.localization.Localization(__file__, 29, 12), rmtree_38410, *[d_38411], **kwargs_38412)
    
    # SSA branch for the except part of a try statement (line 28)
    # SSA branch for the except 'OSError' branch of a try statement (line 28)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 28)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'clean_up_temporary_directory(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'clean_up_temporary_directory' in the type store
    # Getting the type of 'stypy_return_type' (line 26)
    stypy_return_type_38414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38414)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'clean_up_temporary_directory'
    return stypy_return_type_38414

# Assigning a type to the variable 'clean_up_temporary_directory' (line 26)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'clean_up_temporary_directory', clean_up_temporary_directory)

# Call to register(...): (line 33)
# Processing the call arguments (line 33)
# Getting the type of 'clean_up_temporary_directory' (line 33)
clean_up_temporary_directory_38417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 33, 16), 'clean_up_temporary_directory', False)
# Processing the call keyword arguments (line 33)
kwargs_38418 = {}
# Getting the type of 'atexit' (line 33)
atexit_38415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'atexit', False)
# Obtaining the member 'register' of a type (line 33)
register_38416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 33, 0), atexit_38415, 'register')
# Calling register(args, kwargs) (line 33)
register_call_result_38419 = invoke(stypy.reporting.localization.Localization(__file__, 33, 0), register_38416, *[clean_up_temporary_directory_38417], **kwargs_38418)



# SSA begins for try-except statement (line 35)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
# Getting the type of 'set' (line 36)
set_38420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 4), 'set')
# SSA branch for the except part of a try statement (line 35)
# SSA branch for the except 'NameError' branch of a try statement (line 35)
module_type_store.open_ssa_branch('except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 4))

# 'from sets import set' statement (line 38)
from sets import Set as set

import_from_module(stypy.reporting.localization.Localization(__file__, 38, 4), 'sets', None, module_type_store, ['Set'], [set])
# Adding an alias
module_type_store.add_alias('set', 'Set')

# SSA join for try-except statement (line 35)
module_type_store = module_type_store.join_ssa_context()

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'from numpy.distutils.compat import get_exception' statement (line 40)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_38421 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'numpy.distutils.compat')

if (type(import_38421) is not StypyTypeError):

    if (import_38421 != 'pyd_module'):
        __import__(import_38421)
        sys_modules_38422 = sys.modules[import_38421]
        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'numpy.distutils.compat', sys_modules_38422.module_type_store, module_type_store, ['get_exception'])
        nest_module(stypy.reporting.localization.Localization(__file__, 40, 0), __file__, sys_modules_38422, sys_modules_38422.module_type_store, module_type_store)
    else:
        from numpy.distutils.compat import get_exception

        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'numpy.distutils.compat', None, module_type_store, ['get_exception'], [get_exception])

else:
    # Assigning a type to the variable 'numpy.distutils.compat' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'numpy.distutils.compat', import_38421)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'from numpy.compat import basestring' statement (line 41)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_38423 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'numpy.compat')

if (type(import_38423) is not StypyTypeError):

    if (import_38423 != 'pyd_module'):
        __import__(import_38423)
        sys_modules_38424 = sys.modules[import_38423]
        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'numpy.compat', sys_modules_38424.module_type_store, module_type_store, ['basestring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 41, 0), __file__, sys_modules_38424, sys_modules_38424.module_type_store, module_type_store)
    else:
        from numpy.compat import basestring

        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'numpy.compat', None, module_type_store, ['basestring'], [basestring])

else:
    # Assigning a type to the variable 'numpy.compat' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'numpy.compat', import_38423)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')


# Assigning a List to a Name (line 43):

# Assigning a List to a Name (line 43):
__all__ = ['Configuration', 'get_numpy_include_dirs', 'default_config_dict', 'dict_append', 'appendpath', 'generate_config_py', 'get_cmd', 'allpath', 'get_mathlibs', 'terminal_has_colors', 'red_text', 'green_text', 'yellow_text', 'blue_text', 'cyan_text', 'cyg2win32', 'mingw32', 'all_strings', 'has_f_sources', 'has_cxx_sources', 'filter_sources', 'get_dependencies', 'is_local_src_dir', 'get_ext_source_files', 'get_script_files', 'get_lib_source_files', 'get_data_files', 'dot_join', 'get_frame', 'minrelpath', 'njoin', 'is_sequence', 'is_string', 'as_list', 'gpaths', 'get_language', 'quote_args', 'get_build_architecture', 'get_info', 'get_pkg_info', 'get_num_build_jobs']
module_type_store.set_exportable_members(['Configuration', 'get_numpy_include_dirs', 'default_config_dict', 'dict_append', 'appendpath', 'generate_config_py', 'get_cmd', 'allpath', 'get_mathlibs', 'terminal_has_colors', 'red_text', 'green_text', 'yellow_text', 'blue_text', 'cyan_text', 'cyg2win32', 'mingw32', 'all_strings', 'has_f_sources', 'has_cxx_sources', 'filter_sources', 'get_dependencies', 'is_local_src_dir', 'get_ext_source_files', 'get_script_files', 'get_lib_source_files', 'get_data_files', 'dot_join', 'get_frame', 'minrelpath', 'njoin', 'is_sequence', 'is_string', 'as_list', 'gpaths', 'get_language', 'quote_args', 'get_build_architecture', 'get_info', 'get_pkg_info', 'get_num_build_jobs'])

# Obtaining an instance of the builtin type 'list' (line 43)
list_38425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 43)
# Adding element type (line 43)
str_38426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 11), 'str', 'Configuration')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38426)
# Adding element type (line 43)
str_38427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 28), 'str', 'get_numpy_include_dirs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38427)
# Adding element type (line 43)
str_38428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 54), 'str', 'default_config_dict')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38428)
# Adding element type (line 43)
str_38429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 11), 'str', 'dict_append')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38429)
# Adding element type (line 43)
str_38430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 26), 'str', 'appendpath')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38430)
# Adding element type (line 43)
str_38431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 40), 'str', 'generate_config_py')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38431)
# Adding element type (line 43)
str_38432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 11), 'str', 'get_cmd')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38432)
# Adding element type (line 43)
str_38433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 22), 'str', 'allpath')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38433)
# Adding element type (line 43)
str_38434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 33), 'str', 'get_mathlibs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38434)
# Adding element type (line 43)
str_38435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 11), 'str', 'terminal_has_colors')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38435)
# Adding element type (line 43)
str_38436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 34), 'str', 'red_text')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38436)
# Adding element type (line 43)
str_38437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 46), 'str', 'green_text')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38437)
# Adding element type (line 43)
str_38438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 60), 'str', 'yellow_text')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38438)
# Adding element type (line 43)
str_38439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 11), 'str', 'blue_text')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38439)
# Adding element type (line 43)
str_38440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 24), 'str', 'cyan_text')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38440)
# Adding element type (line 43)
str_38441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 37), 'str', 'cyg2win32')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38441)
# Adding element type (line 43)
str_38442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 50), 'str', 'mingw32')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38442)
# Adding element type (line 43)
str_38443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 61), 'str', 'all_strings')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38443)
# Adding element type (line 43)
str_38444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 11), 'str', 'has_f_sources')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38444)
# Adding element type (line 43)
str_38445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 28), 'str', 'has_cxx_sources')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38445)
# Adding element type (line 43)
str_38446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 47), 'str', 'filter_sources')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38446)
# Adding element type (line 43)
str_38447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 11), 'str', 'get_dependencies')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38447)
# Adding element type (line 43)
str_38448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 31), 'str', 'is_local_src_dir')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38448)
# Adding element type (line 43)
str_38449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 51), 'str', 'get_ext_source_files')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38449)
# Adding element type (line 43)
str_38450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 11), 'str', 'get_script_files')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38450)
# Adding element type (line 43)
str_38451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 31), 'str', 'get_lib_source_files')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38451)
# Adding element type (line 43)
str_38452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 55), 'str', 'get_data_files')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38452)
# Adding element type (line 43)
str_38453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 11), 'str', 'dot_join')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38453)
# Adding element type (line 43)
str_38454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 23), 'str', 'get_frame')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38454)
# Adding element type (line 43)
str_38455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 36), 'str', 'minrelpath')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38455)
# Adding element type (line 43)
str_38456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 50), 'str', 'njoin')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38456)
# Adding element type (line 43)
str_38457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 11), 'str', 'is_sequence')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38457)
# Adding element type (line 43)
str_38458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 26), 'str', 'is_string')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38458)
# Adding element type (line 43)
str_38459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 39), 'str', 'as_list')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38459)
# Adding element type (line 43)
str_38460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 50), 'str', 'gpaths')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38460)
# Adding element type (line 43)
str_38461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 60), 'str', 'get_language')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38461)
# Adding element type (line 43)
str_38462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 11), 'str', 'quote_args')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38462)
# Adding element type (line 43)
str_38463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 25), 'str', 'get_build_architecture')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38463)
# Adding element type (line 43)
str_38464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 51), 'str', 'get_info')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38464)
# Adding element type (line 43)
str_38465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 63), 'str', 'get_pkg_info')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38465)
# Adding element type (line 43)
str_38466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 11), 'str', 'get_num_build_jobs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), list_38425, str_38466)

# Assigning a type to the variable '__all__' (line 43)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), '__all__', list_38425)
# Declaration of the 'InstallableLib' class

class InstallableLib(object, ):
    str_38467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, (-1)), 'str', '\n    Container to hold information on an installable library.\n\n    Parameters\n    ----------\n    name : str\n        Name of the installed library.\n    build_info : dict\n        Dictionary holding build information.\n    target_dir : str\n        Absolute path specifying where to install the library.\n\n    See Also\n    --------\n    Configuration.add_installed_library\n\n    Notes\n    -----\n    The three parameters are stored as attributes with the same names.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 78, 4, False)
        # Assigning a type to the variable 'self' (line 79)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'InstallableLib.__init__', ['name', 'build_info', 'target_dir'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'build_info', 'target_dir'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 79):
        
        # Assigning a Name to a Attribute (line 79):
        # Getting the type of 'name' (line 79)
        name_38468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 20), 'name')
        # Getting the type of 'self' (line 79)
        self_38469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 8), 'self')
        # Setting the type of the member 'name' of a type (line 79)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 79, 8), self_38469, 'name', name_38468)
        
        # Assigning a Name to a Attribute (line 80):
        
        # Assigning a Name to a Attribute (line 80):
        # Getting the type of 'build_info' (line 80)
        build_info_38470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 26), 'build_info')
        # Getting the type of 'self' (line 80)
        self_38471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 8), 'self')
        # Setting the type of the member 'build_info' of a type (line 80)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 8), self_38471, 'build_info', build_info_38470)
        
        # Assigning a Name to a Attribute (line 81):
        
        # Assigning a Name to a Attribute (line 81):
        # Getting the type of 'target_dir' (line 81)
        target_dir_38472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 26), 'target_dir')
        # Getting the type of 'self' (line 81)
        self_38473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 8), 'self')
        # Setting the type of the member 'target_dir' of a type (line 81)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 81, 8), self_38473, 'target_dir', target_dir_38472)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'InstallableLib' (line 56)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 0), 'InstallableLib', InstallableLib)

@norecursion
def get_num_build_jobs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_num_build_jobs'
    module_type_store = module_type_store.open_function_context('get_num_build_jobs', 84, 0, False)
    
    # Passed parameters checking function
    get_num_build_jobs.stypy_localization = localization
    get_num_build_jobs.stypy_type_of_self = None
    get_num_build_jobs.stypy_type_store = module_type_store
    get_num_build_jobs.stypy_function_name = 'get_num_build_jobs'
    get_num_build_jobs.stypy_param_names_list = []
    get_num_build_jobs.stypy_varargs_param_name = None
    get_num_build_jobs.stypy_kwargs_param_name = None
    get_num_build_jobs.stypy_call_defaults = defaults
    get_num_build_jobs.stypy_call_varargs = varargs
    get_num_build_jobs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_num_build_jobs', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_num_build_jobs', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_num_build_jobs(...)' code ##################

    str_38474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, (-1)), 'str', '\n    Get number of parallel build jobs set by the --parallel command line\n    argument of setup.py\n    If the command did not receive a setting the environment variable\n    NPY_NUM_BUILD_JOBS checked and if that is unset it returns 1.\n\n    Returns\n    -------\n    out : int\n        number of parallel jobs that can be run\n\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 97, 4))
    
    # 'from numpy.distutils.core import get_distribution' statement (line 97)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
    import_38475 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 97, 4), 'numpy.distutils.core')

    if (type(import_38475) is not StypyTypeError):

        if (import_38475 != 'pyd_module'):
            __import__(import_38475)
            sys_modules_38476 = sys.modules[import_38475]
            import_from_module(stypy.reporting.localization.Localization(__file__, 97, 4), 'numpy.distutils.core', sys_modules_38476.module_type_store, module_type_store, ['get_distribution'])
            nest_module(stypy.reporting.localization.Localization(__file__, 97, 4), __file__, sys_modules_38476, sys_modules_38476.module_type_store, module_type_store)
        else:
            from numpy.distutils.core import get_distribution

            import_from_module(stypy.reporting.localization.Localization(__file__, 97, 4), 'numpy.distutils.core', None, module_type_store, ['get_distribution'], [get_distribution])

    else:
        # Assigning a type to the variable 'numpy.distutils.core' (line 97)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 4), 'numpy.distutils.core', import_38475)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
    
    
    # Assigning a Call to a Name (line 98):
    
    # Assigning a Call to a Name (line 98):
    
    # Call to int(...): (line 98)
    # Processing the call arguments (line 98)
    
    # Call to get(...): (line 98)
    # Processing the call arguments (line 98)
    str_38481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 33), 'str', 'NPY_NUM_BUILD_JOBS')
    int_38482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 55), 'int')
    # Processing the call keyword arguments (line 98)
    kwargs_38483 = {}
    # Getting the type of 'os' (line 98)
    os_38478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 18), 'os', False)
    # Obtaining the member 'environ' of a type (line 98)
    environ_38479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 98, 18), os_38478, 'environ')
    # Obtaining the member 'get' of a type (line 98)
    get_38480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 98, 18), environ_38479, 'get')
    # Calling get(args, kwargs) (line 98)
    get_call_result_38484 = invoke(stypy.reporting.localization.Localization(__file__, 98, 18), get_38480, *[str_38481, int_38482], **kwargs_38483)
    
    # Processing the call keyword arguments (line 98)
    kwargs_38485 = {}
    # Getting the type of 'int' (line 98)
    int_38477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 14), 'int', False)
    # Calling int(args, kwargs) (line 98)
    int_call_result_38486 = invoke(stypy.reporting.localization.Localization(__file__, 98, 14), int_38477, *[get_call_result_38484], **kwargs_38485)
    
    # Assigning a type to the variable 'envjobs' (line 98)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 4), 'envjobs', int_call_result_38486)
    
    # Assigning a Call to a Name (line 99):
    
    # Assigning a Call to a Name (line 99):
    
    # Call to get_distribution(...): (line 99)
    # Processing the call keyword arguments (line 99)
    kwargs_38488 = {}
    # Getting the type of 'get_distribution' (line 99)
    get_distribution_38487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 11), 'get_distribution', False)
    # Calling get_distribution(args, kwargs) (line 99)
    get_distribution_call_result_38489 = invoke(stypy.reporting.localization.Localization(__file__, 99, 11), get_distribution_38487, *[], **kwargs_38488)
    
    # Assigning a type to the variable 'dist' (line 99)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 4), 'dist', get_distribution_call_result_38489)
    
    # Type idiom detected: calculating its left and rigth part (line 101)
    # Getting the type of 'dist' (line 101)
    dist_38490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 7), 'dist')
    # Getting the type of 'None' (line 101)
    None_38491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 15), 'None')
    
    (may_be_38492, more_types_in_union_38493) = may_be_none(dist_38490, None_38491)

    if may_be_38492:

        if more_types_in_union_38493:
            # Runtime conditional SSA (line 101)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'envjobs' (line 102)
        envjobs_38494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 15), 'envjobs')
        # Assigning a type to the variable 'stypy_return_type' (line 102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 8), 'stypy_return_type', envjobs_38494)

        if more_types_in_union_38493:
            # SSA join for if statement (line 101)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Tuple to a Name (line 105):
    
    # Assigning a Tuple to a Name (line 105):
    
    # Obtaining an instance of the builtin type 'tuple' (line 105)
    tuple_38495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 105)
    # Adding element type (line 105)
    
    # Call to getattr(...): (line 105)
    # Processing the call arguments (line 105)
    
    # Call to get_command_obj(...): (line 105)
    # Processing the call arguments (line 105)
    str_38499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 44), 'str', 'build')
    # Processing the call keyword arguments (line 105)
    kwargs_38500 = {}
    # Getting the type of 'dist' (line 105)
    dist_38497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 23), 'dist', False)
    # Obtaining the member 'get_command_obj' of a type (line 105)
    get_command_obj_38498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 23), dist_38497, 'get_command_obj')
    # Calling get_command_obj(args, kwargs) (line 105)
    get_command_obj_call_result_38501 = invoke(stypy.reporting.localization.Localization(__file__, 105, 23), get_command_obj_38498, *[str_38499], **kwargs_38500)
    
    str_38502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 54), 'str', 'parallel')
    # Getting the type of 'None' (line 105)
    None_38503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 66), 'None', False)
    # Processing the call keyword arguments (line 105)
    kwargs_38504 = {}
    # Getting the type of 'getattr' (line 105)
    getattr_38496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 15), 'getattr', False)
    # Calling getattr(args, kwargs) (line 105)
    getattr_call_result_38505 = invoke(stypy.reporting.localization.Localization(__file__, 105, 15), getattr_38496, *[get_command_obj_call_result_38501, str_38502, None_38503], **kwargs_38504)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 15), tuple_38495, getattr_call_result_38505)
    # Adding element type (line 105)
    
    # Call to getattr(...): (line 106)
    # Processing the call arguments (line 106)
    
    # Call to get_command_obj(...): (line 106)
    # Processing the call arguments (line 106)
    str_38509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 106, 44), 'str', 'build_ext')
    # Processing the call keyword arguments (line 106)
    kwargs_38510 = {}
    # Getting the type of 'dist' (line 106)
    dist_38507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 23), 'dist', False)
    # Obtaining the member 'get_command_obj' of a type (line 106)
    get_command_obj_38508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 106, 23), dist_38507, 'get_command_obj')
    # Calling get_command_obj(args, kwargs) (line 106)
    get_command_obj_call_result_38511 = invoke(stypy.reporting.localization.Localization(__file__, 106, 23), get_command_obj_38508, *[str_38509], **kwargs_38510)
    
    str_38512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 106, 58), 'str', 'parallel')
    # Getting the type of 'None' (line 106)
    None_38513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 70), 'None', False)
    # Processing the call keyword arguments (line 106)
    kwargs_38514 = {}
    # Getting the type of 'getattr' (line 106)
    getattr_38506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 15), 'getattr', False)
    # Calling getattr(args, kwargs) (line 106)
    getattr_call_result_38515 = invoke(stypy.reporting.localization.Localization(__file__, 106, 15), getattr_38506, *[get_command_obj_call_result_38511, str_38512, None_38513], **kwargs_38514)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 15), tuple_38495, getattr_call_result_38515)
    # Adding element type (line 105)
    
    # Call to getattr(...): (line 107)
    # Processing the call arguments (line 107)
    
    # Call to get_command_obj(...): (line 107)
    # Processing the call arguments (line 107)
    str_38519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 44), 'str', 'build_clib')
    # Processing the call keyword arguments (line 107)
    kwargs_38520 = {}
    # Getting the type of 'dist' (line 107)
    dist_38517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 23), 'dist', False)
    # Obtaining the member 'get_command_obj' of a type (line 107)
    get_command_obj_38518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 23), dist_38517, 'get_command_obj')
    # Calling get_command_obj(args, kwargs) (line 107)
    get_command_obj_call_result_38521 = invoke(stypy.reporting.localization.Localization(__file__, 107, 23), get_command_obj_38518, *[str_38519], **kwargs_38520)
    
    str_38522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 59), 'str', 'parallel')
    # Getting the type of 'None' (line 107)
    None_38523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 71), 'None', False)
    # Processing the call keyword arguments (line 107)
    kwargs_38524 = {}
    # Getting the type of 'getattr' (line 107)
    getattr_38516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 15), 'getattr', False)
    # Calling getattr(args, kwargs) (line 107)
    getattr_call_result_38525 = invoke(stypy.reporting.localization.Localization(__file__, 107, 15), getattr_38516, *[get_command_obj_call_result_38521, str_38522, None_38523], **kwargs_38524)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 15), tuple_38495, getattr_call_result_38525)
    
    # Assigning a type to the variable 'cmdattr' (line 105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 4), 'cmdattr', tuple_38495)
    
    
    # Call to all(...): (line 108)
    # Processing the call arguments (line 108)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 108, 11, True)
    # Calculating comprehension expression
    # Getting the type of 'cmdattr' (line 108)
    cmdattr_38530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 30), 'cmdattr', False)
    comprehension_38531 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 11), cmdattr_38530)
    # Assigning a type to the variable 'x' (line 108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 11), 'x', comprehension_38531)
    
    # Getting the type of 'x' (line 108)
    x_38527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 11), 'x', False)
    # Getting the type of 'None' (line 108)
    None_38528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 16), 'None', False)
    # Applying the binary operator 'is' (line 108)
    result_is__38529 = python_operator(stypy.reporting.localization.Localization(__file__, 108, 11), 'is', x_38527, None_38528)
    
    list_38532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 11), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 11), list_38532, result_is__38529)
    # Processing the call keyword arguments (line 108)
    kwargs_38533 = {}
    # Getting the type of 'all' (line 108)
    all_38526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 7), 'all', False)
    # Calling all(args, kwargs) (line 108)
    all_call_result_38534 = invoke(stypy.reporting.localization.Localization(__file__, 108, 7), all_38526, *[list_38532], **kwargs_38533)
    
    # Testing the type of an if condition (line 108)
    if_condition_38535 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 108, 4), all_call_result_38534)
    # Assigning a type to the variable 'if_condition_38535' (line 108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 4), 'if_condition_38535', if_condition_38535)
    # SSA begins for if statement (line 108)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'envjobs' (line 109)
    envjobs_38536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 15), 'envjobs')
    # Assigning a type to the variable 'stypy_return_type' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 8), 'stypy_return_type', envjobs_38536)
    # SSA branch for the else part of an if statement (line 108)
    module_type_store.open_ssa_branch('else')
    
    # Call to max(...): (line 111)
    # Processing the call arguments (line 111)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 111, 19, True)
    # Calculating comprehension expression
    # Getting the type of 'cmdattr' (line 111)
    cmdattr_38542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 30), 'cmdattr', False)
    comprehension_38543 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 111, 19), cmdattr_38542)
    # Assigning a type to the variable 'x' (line 111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 19), 'x', comprehension_38543)
    
    # Getting the type of 'x' (line 111)
    x_38539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 41), 'x', False)
    # Getting the type of 'None' (line 111)
    None_38540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 50), 'None', False)
    # Applying the binary operator 'isnot' (line 111)
    result_is_not_38541 = python_operator(stypy.reporting.localization.Localization(__file__, 111, 41), 'isnot', x_38539, None_38540)
    
    # Getting the type of 'x' (line 111)
    x_38538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 19), 'x', False)
    list_38544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 19), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 111, 19), list_38544, x_38538)
    # Processing the call keyword arguments (line 111)
    kwargs_38545 = {}
    # Getting the type of 'max' (line 111)
    max_38537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 15), 'max', False)
    # Calling max(args, kwargs) (line 111)
    max_call_result_38546 = invoke(stypy.reporting.localization.Localization(__file__, 111, 15), max_38537, *[list_38544], **kwargs_38545)
    
    # Assigning a type to the variable 'stypy_return_type' (line 111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 8), 'stypy_return_type', max_call_result_38546)
    # SSA join for if statement (line 108)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'get_num_build_jobs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_num_build_jobs' in the type store
    # Getting the type of 'stypy_return_type' (line 84)
    stypy_return_type_38547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38547)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_num_build_jobs'
    return stypy_return_type_38547

# Assigning a type to the variable 'get_num_build_jobs' (line 84)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 0), 'get_num_build_jobs', get_num_build_jobs)

@norecursion
def quote_args(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'quote_args'
    module_type_store = module_type_store.open_function_context('quote_args', 113, 0, False)
    
    # Passed parameters checking function
    quote_args.stypy_localization = localization
    quote_args.stypy_type_of_self = None
    quote_args.stypy_type_store = module_type_store
    quote_args.stypy_function_name = 'quote_args'
    quote_args.stypy_param_names_list = ['args']
    quote_args.stypy_varargs_param_name = None
    quote_args.stypy_kwargs_param_name = None
    quote_args.stypy_call_defaults = defaults
    quote_args.stypy_call_varargs = varargs
    quote_args.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'quote_args', ['args'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'quote_args', localization, ['args'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'quote_args(...)' code ##################

    
    # Assigning a Call to a Name (line 116):
    
    # Assigning a Call to a Name (line 116):
    
    # Call to list(...): (line 116)
    # Processing the call arguments (line 116)
    # Getting the type of 'args' (line 116)
    args_38549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 16), 'args', False)
    # Processing the call keyword arguments (line 116)
    kwargs_38550 = {}
    # Getting the type of 'list' (line 116)
    list_38548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 11), 'list', False)
    # Calling list(args, kwargs) (line 116)
    list_call_result_38551 = invoke(stypy.reporting.localization.Localization(__file__, 116, 11), list_38548, *[args_38549], **kwargs_38550)
    
    # Assigning a type to the variable 'args' (line 116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 4), 'args', list_call_result_38551)
    
    
    # Call to range(...): (line 117)
    # Processing the call arguments (line 117)
    
    # Call to len(...): (line 117)
    # Processing the call arguments (line 117)
    # Getting the type of 'args' (line 117)
    args_38554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 23), 'args', False)
    # Processing the call keyword arguments (line 117)
    kwargs_38555 = {}
    # Getting the type of 'len' (line 117)
    len_38553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 19), 'len', False)
    # Calling len(args, kwargs) (line 117)
    len_call_result_38556 = invoke(stypy.reporting.localization.Localization(__file__, 117, 19), len_38553, *[args_38554], **kwargs_38555)
    
    # Processing the call keyword arguments (line 117)
    kwargs_38557 = {}
    # Getting the type of 'range' (line 117)
    range_38552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 13), 'range', False)
    # Calling range(args, kwargs) (line 117)
    range_call_result_38558 = invoke(stypy.reporting.localization.Localization(__file__, 117, 13), range_38552, *[len_call_result_38556], **kwargs_38557)
    
    # Testing the type of a for loop iterable (line 117)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 117, 4), range_call_result_38558)
    # Getting the type of the for loop variable (line 117)
    for_loop_var_38559 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 117, 4), range_call_result_38558)
    # Assigning a type to the variable 'i' (line 117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 4), 'i', for_loop_var_38559)
    # SSA begins for a for statement (line 117)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 118):
    
    # Assigning a Subscript to a Name (line 118):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 118)
    i_38560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 17), 'i')
    # Getting the type of 'args' (line 118)
    args_38561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 12), 'args')
    # Obtaining the member '__getitem__' of a type (line 118)
    getitem___38562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 118, 12), args_38561, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 118)
    subscript_call_result_38563 = invoke(stypy.reporting.localization.Localization(__file__, 118, 12), getitem___38562, i_38560)
    
    # Assigning a type to the variable 'a' (line 118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 118, 8), 'a', subscript_call_result_38563)
    
    
    # Evaluating a boolean operation
    
    str_38564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 11), 'str', ' ')
    # Getting the type of 'a' (line 119)
    a_38565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 18), 'a')
    # Applying the binary operator 'in' (line 119)
    result_contains_38566 = python_operator(stypy.reporting.localization.Localization(__file__, 119, 11), 'in', str_38564, a_38565)
    
    
    
    # Obtaining the type of the subscript
    int_38567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 26), 'int')
    # Getting the type of 'a' (line 119)
    a_38568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 24), 'a')
    # Obtaining the member '__getitem__' of a type (line 119)
    getitem___38569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 24), a_38568, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 119)
    subscript_call_result_38570 = invoke(stypy.reporting.localization.Localization(__file__, 119, 24), getitem___38569, int_38567)
    
    str_38571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 36), 'str', '"\'')
    # Applying the binary operator 'notin' (line 119)
    result_contains_38572 = python_operator(stypy.reporting.localization.Localization(__file__, 119, 24), 'notin', subscript_call_result_38570, str_38571)
    
    # Applying the binary operator 'and' (line 119)
    result_and_keyword_38573 = python_operator(stypy.reporting.localization.Localization(__file__, 119, 11), 'and', result_contains_38566, result_contains_38572)
    
    # Testing the type of an if condition (line 119)
    if_condition_38574 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 119, 8), result_and_keyword_38573)
    # Assigning a type to the variable 'if_condition_38574' (line 119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 8), 'if_condition_38574', if_condition_38574)
    # SSA begins for if statement (line 119)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Subscript (line 120):
    
    # Assigning a BinOp to a Subscript (line 120):
    str_38575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, 22), 'str', '"%s"')
    # Getting the type of 'a' (line 120)
    a_38576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 32), 'a')
    # Applying the binary operator '%' (line 120)
    result_mod_38577 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 22), '%', str_38575, a_38576)
    
    # Getting the type of 'args' (line 120)
    args_38578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 12), 'args')
    # Getting the type of 'i' (line 120)
    i_38579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 17), 'i')
    # Storing an element on a container (line 120)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 120, 12), args_38578, (i_38579, result_mod_38577))
    # SSA join for if statement (line 119)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'args' (line 121)
    args_38580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 11), 'args')
    # Assigning a type to the variable 'stypy_return_type' (line 121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), 'stypy_return_type', args_38580)
    
    # ################# End of 'quote_args(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'quote_args' in the type store
    # Getting the type of 'stypy_return_type' (line 113)
    stypy_return_type_38581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38581)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'quote_args'
    return stypy_return_type_38581

# Assigning a type to the variable 'quote_args' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'quote_args', quote_args)

@norecursion
def allpath(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'allpath'
    module_type_store = module_type_store.open_function_context('allpath', 123, 0, False)
    
    # Passed parameters checking function
    allpath.stypy_localization = localization
    allpath.stypy_type_of_self = None
    allpath.stypy_type_store = module_type_store
    allpath.stypy_function_name = 'allpath'
    allpath.stypy_param_names_list = ['name']
    allpath.stypy_varargs_param_name = None
    allpath.stypy_kwargs_param_name = None
    allpath.stypy_call_defaults = defaults
    allpath.stypy_call_varargs = varargs
    allpath.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'allpath', ['name'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'allpath', localization, ['name'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'allpath(...)' code ##################

    str_38582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 4), 'str', "Convert a /-separated pathname to one using the OS's path separator.")
    
    # Assigning a Call to a Name (line 125):
    
    # Assigning a Call to a Name (line 125):
    
    # Call to split(...): (line 125)
    # Processing the call arguments (line 125)
    str_38585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 26), 'str', '/')
    # Processing the call keyword arguments (line 125)
    kwargs_38586 = {}
    # Getting the type of 'name' (line 125)
    name_38583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 15), 'name', False)
    # Obtaining the member 'split' of a type (line 125)
    split_38584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 15), name_38583, 'split')
    # Calling split(args, kwargs) (line 125)
    split_call_result_38587 = invoke(stypy.reporting.localization.Localization(__file__, 125, 15), split_38584, *[str_38585], **kwargs_38586)
    
    # Assigning a type to the variable 'splitted' (line 125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 4), 'splitted', split_call_result_38587)
    
    # Call to join(...): (line 126)
    # Getting the type of 'splitted' (line 126)
    splitted_38591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 25), 'splitted', False)
    # Processing the call keyword arguments (line 126)
    kwargs_38592 = {}
    # Getting the type of 'os' (line 126)
    os_38588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 126)
    path_38589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 11), os_38588, 'path')
    # Obtaining the member 'join' of a type (line 126)
    join_38590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 11), path_38589, 'join')
    # Calling join(args, kwargs) (line 126)
    join_call_result_38593 = invoke(stypy.reporting.localization.Localization(__file__, 126, 11), join_38590, *[splitted_38591], **kwargs_38592)
    
    # Assigning a type to the variable 'stypy_return_type' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'stypy_return_type', join_call_result_38593)
    
    # ################# End of 'allpath(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'allpath' in the type store
    # Getting the type of 'stypy_return_type' (line 123)
    stypy_return_type_38594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38594)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'allpath'
    return stypy_return_type_38594

# Assigning a type to the variable 'allpath' (line 123)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 0), 'allpath', allpath)

@norecursion
def rel_path(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rel_path'
    module_type_store = module_type_store.open_function_context('rel_path', 128, 0, False)
    
    # Passed parameters checking function
    rel_path.stypy_localization = localization
    rel_path.stypy_type_of_self = None
    rel_path.stypy_type_store = module_type_store
    rel_path.stypy_function_name = 'rel_path'
    rel_path.stypy_param_names_list = ['path', 'parent_path']
    rel_path.stypy_varargs_param_name = None
    rel_path.stypy_kwargs_param_name = None
    rel_path.stypy_call_defaults = defaults
    rel_path.stypy_call_varargs = varargs
    rel_path.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rel_path', ['path', 'parent_path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rel_path', localization, ['path', 'parent_path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rel_path(...)' code ##################

    str_38595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, (-1)), 'str', 'Return path relative to parent_path.\n    ')
    
    # Assigning a Call to a Name (line 131):
    
    # Assigning a Call to a Name (line 131):
    
    # Call to abspath(...): (line 131)
    # Processing the call arguments (line 131)
    # Getting the type of 'parent_path' (line 131)
    parent_path_38599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 25), 'parent_path', False)
    # Processing the call keyword arguments (line 131)
    kwargs_38600 = {}
    # Getting the type of 'os' (line 131)
    os_38596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 9), 'os', False)
    # Obtaining the member 'path' of a type (line 131)
    path_38597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 9), os_38596, 'path')
    # Obtaining the member 'abspath' of a type (line 131)
    abspath_38598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 9), path_38597, 'abspath')
    # Calling abspath(args, kwargs) (line 131)
    abspath_call_result_38601 = invoke(stypy.reporting.localization.Localization(__file__, 131, 9), abspath_38598, *[parent_path_38599], **kwargs_38600)
    
    # Assigning a type to the variable 'pd' (line 131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 4), 'pd', abspath_call_result_38601)
    
    # Assigning a Call to a Name (line 132):
    
    # Assigning a Call to a Name (line 132):
    
    # Call to abspath(...): (line 132)
    # Processing the call arguments (line 132)
    # Getting the type of 'path' (line 132)
    path_38605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 28), 'path', False)
    # Processing the call keyword arguments (line 132)
    kwargs_38606 = {}
    # Getting the type of 'os' (line 132)
    os_38602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 12), 'os', False)
    # Obtaining the member 'path' of a type (line 132)
    path_38603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 12), os_38602, 'path')
    # Obtaining the member 'abspath' of a type (line 132)
    abspath_38604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 12), path_38603, 'abspath')
    # Calling abspath(args, kwargs) (line 132)
    abspath_call_result_38607 = invoke(stypy.reporting.localization.Localization(__file__, 132, 12), abspath_38604, *[path_38605], **kwargs_38606)
    
    # Assigning a type to the variable 'apath' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 4), 'apath', abspath_call_result_38607)
    
    
    
    # Call to len(...): (line 133)
    # Processing the call arguments (line 133)
    # Getting the type of 'apath' (line 133)
    apath_38609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 11), 'apath', False)
    # Processing the call keyword arguments (line 133)
    kwargs_38610 = {}
    # Getting the type of 'len' (line 133)
    len_38608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 7), 'len', False)
    # Calling len(args, kwargs) (line 133)
    len_call_result_38611 = invoke(stypy.reporting.localization.Localization(__file__, 133, 7), len_38608, *[apath_38609], **kwargs_38610)
    
    
    # Call to len(...): (line 133)
    # Processing the call arguments (line 133)
    # Getting the type of 'pd' (line 133)
    pd_38613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 22), 'pd', False)
    # Processing the call keyword arguments (line 133)
    kwargs_38614 = {}
    # Getting the type of 'len' (line 133)
    len_38612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 18), 'len', False)
    # Calling len(args, kwargs) (line 133)
    len_call_result_38615 = invoke(stypy.reporting.localization.Localization(__file__, 133, 18), len_38612, *[pd_38613], **kwargs_38614)
    
    # Applying the binary operator '<' (line 133)
    result_lt_38616 = python_operator(stypy.reporting.localization.Localization(__file__, 133, 7), '<', len_call_result_38611, len_call_result_38615)
    
    # Testing the type of an if condition (line 133)
    if_condition_38617 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 133, 4), result_lt_38616)
    # Assigning a type to the variable 'if_condition_38617' (line 133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 4), 'if_condition_38617', if_condition_38617)
    # SSA begins for if statement (line 133)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'path' (line 134)
    path_38618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 15), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 8), 'stypy_return_type', path_38618)
    # SSA join for if statement (line 133)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'apath' (line 135)
    apath_38619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 7), 'apath')
    # Getting the type of 'pd' (line 135)
    pd_38620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 14), 'pd')
    # Applying the binary operator '==' (line 135)
    result_eq_38621 = python_operator(stypy.reporting.localization.Localization(__file__, 135, 7), '==', apath_38619, pd_38620)
    
    # Testing the type of an if condition (line 135)
    if_condition_38622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 135, 4), result_eq_38621)
    # Assigning a type to the variable 'if_condition_38622' (line 135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 4), 'if_condition_38622', if_condition_38622)
    # SSA begins for if statement (line 135)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    str_38623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, 15), 'str', '')
    # Assigning a type to the variable 'stypy_return_type' (line 136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 8), 'stypy_return_type', str_38623)
    # SSA join for if statement (line 135)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'pd' (line 137)
    pd_38624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 7), 'pd')
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 137)
    # Processing the call arguments (line 137)
    # Getting the type of 'pd' (line 137)
    pd_38626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 24), 'pd', False)
    # Processing the call keyword arguments (line 137)
    kwargs_38627 = {}
    # Getting the type of 'len' (line 137)
    len_38625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 20), 'len', False)
    # Calling len(args, kwargs) (line 137)
    len_call_result_38628 = invoke(stypy.reporting.localization.Localization(__file__, 137, 20), len_38625, *[pd_38626], **kwargs_38627)
    
    slice_38629 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 137, 13), None, len_call_result_38628, None)
    # Getting the type of 'apath' (line 137)
    apath_38630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 13), 'apath')
    # Obtaining the member '__getitem__' of a type (line 137)
    getitem___38631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 13), apath_38630, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 137)
    subscript_call_result_38632 = invoke(stypy.reporting.localization.Localization(__file__, 137, 13), getitem___38631, slice_38629)
    
    # Applying the binary operator '==' (line 137)
    result_eq_38633 = python_operator(stypy.reporting.localization.Localization(__file__, 137, 7), '==', pd_38624, subscript_call_result_38632)
    
    # Testing the type of an if condition (line 137)
    if_condition_38634 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 137, 4), result_eq_38633)
    # Assigning a type to the variable 'if_condition_38634' (line 137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 4), 'if_condition_38634', if_condition_38634)
    # SSA begins for if statement (line 137)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Evaluating assert statement condition
    
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 138)
    # Processing the call arguments (line 138)
    # Getting the type of 'pd' (line 138)
    pd_38636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 25), 'pd', False)
    # Processing the call keyword arguments (line 138)
    kwargs_38637 = {}
    # Getting the type of 'len' (line 138)
    len_38635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 21), 'len', False)
    # Calling len(args, kwargs) (line 138)
    len_call_result_38638 = invoke(stypy.reporting.localization.Localization(__file__, 138, 21), len_38635, *[pd_38636], **kwargs_38637)
    
    # Getting the type of 'apath' (line 138)
    apath_38639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 15), 'apath')
    # Obtaining the member '__getitem__' of a type (line 138)
    getitem___38640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 15), apath_38639, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 138)
    subscript_call_result_38641 = invoke(stypy.reporting.localization.Localization(__file__, 138, 15), getitem___38640, len_call_result_38638)
    
    
    # Obtaining an instance of the builtin type 'list' (line 138)
    list_38642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 138, 33), 'list')
    # Adding type elements to the builtin type 'list' instance (line 138)
    # Adding element type (line 138)
    # Getting the type of 'os' (line 138)
    os_38643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 34), 'os')
    # Obtaining the member 'sep' of a type (line 138)
    sep_38644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 34), os_38643, 'sep')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 138, 33), list_38642, sep_38644)
    
    # Applying the binary operator 'in' (line 138)
    result_contains_38645 = python_operator(stypy.reporting.localization.Localization(__file__, 138, 15), 'in', subscript_call_result_38641, list_38642)
    
    
    # Assigning a Subscript to a Name (line 139):
    
    # Assigning a Subscript to a Name (line 139):
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 139)
    # Processing the call arguments (line 139)
    # Getting the type of 'pd' (line 139)
    pd_38647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 25), 'pd', False)
    # Processing the call keyword arguments (line 139)
    kwargs_38648 = {}
    # Getting the type of 'len' (line 139)
    len_38646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 21), 'len', False)
    # Calling len(args, kwargs) (line 139)
    len_call_result_38649 = invoke(stypy.reporting.localization.Localization(__file__, 139, 21), len_38646, *[pd_38647], **kwargs_38648)
    
    int_38650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 29), 'int')
    # Applying the binary operator '+' (line 139)
    result_add_38651 = python_operator(stypy.reporting.localization.Localization(__file__, 139, 21), '+', len_call_result_38649, int_38650)
    
    slice_38652 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 139, 15), result_add_38651, None, None)
    # Getting the type of 'apath' (line 139)
    apath_38653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 15), 'apath')
    # Obtaining the member '__getitem__' of a type (line 139)
    getitem___38654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 15), apath_38653, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 139)
    subscript_call_result_38655 = invoke(stypy.reporting.localization.Localization(__file__, 139, 15), getitem___38654, slice_38652)
    
    # Assigning a type to the variable 'path' (line 139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 8), 'path', subscript_call_result_38655)
    # SSA join for if statement (line 137)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'path' (line 140)
    path_38656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 11), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 4), 'stypy_return_type', path_38656)
    
    # ################# End of 'rel_path(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rel_path' in the type store
    # Getting the type of 'stypy_return_type' (line 128)
    stypy_return_type_38657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38657)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rel_path'
    return stypy_return_type_38657

# Assigning a type to the variable 'rel_path' (line 128)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 0), 'rel_path', rel_path)

@norecursion
def get_path_from_frame(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 142)
    None_38658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 43), 'None')
    defaults = [None_38658]
    # Create a new context for function 'get_path_from_frame'
    module_type_store = module_type_store.open_function_context('get_path_from_frame', 142, 0, False)
    
    # Passed parameters checking function
    get_path_from_frame.stypy_localization = localization
    get_path_from_frame.stypy_type_of_self = None
    get_path_from_frame.stypy_type_store = module_type_store
    get_path_from_frame.stypy_function_name = 'get_path_from_frame'
    get_path_from_frame.stypy_param_names_list = ['frame', 'parent_path']
    get_path_from_frame.stypy_varargs_param_name = None
    get_path_from_frame.stypy_kwargs_param_name = None
    get_path_from_frame.stypy_call_defaults = defaults
    get_path_from_frame.stypy_call_varargs = varargs
    get_path_from_frame.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_path_from_frame', ['frame', 'parent_path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_path_from_frame', localization, ['frame', 'parent_path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_path_from_frame(...)' code ##################

    str_38659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, (-1)), 'str', 'Return path of the module given a frame object from the call stack.\n\n    Returned path is relative to parent_path when given,\n    otherwise it is absolute path.\n    ')
    
    
    # SSA begins for try-except statement (line 150)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 151):
    
    # Assigning a Call to a Name (line 151):
    
    # Call to eval(...): (line 151)
    # Processing the call arguments (line 151)
    str_38661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 27), 'str', '__file__')
    # Getting the type of 'frame' (line 151)
    frame_38662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 39), 'frame', False)
    # Obtaining the member 'f_globals' of a type (line 151)
    f_globals_38663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 39), frame_38662, 'f_globals')
    # Getting the type of 'frame' (line 151)
    frame_38664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 56), 'frame', False)
    # Obtaining the member 'f_locals' of a type (line 151)
    f_locals_38665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 56), frame_38664, 'f_locals')
    # Processing the call keyword arguments (line 151)
    kwargs_38666 = {}
    # Getting the type of 'eval' (line 151)
    eval_38660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 22), 'eval', False)
    # Calling eval(args, kwargs) (line 151)
    eval_call_result_38667 = invoke(stypy.reporting.localization.Localization(__file__, 151, 22), eval_38660, *[str_38661, f_globals_38663, f_locals_38665], **kwargs_38666)
    
    # Assigning a type to the variable 'caller_file' (line 151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 8), 'caller_file', eval_call_result_38667)
    
    # Assigning a Call to a Name (line 152):
    
    # Assigning a Call to a Name (line 152):
    
    # Call to dirname(...): (line 152)
    # Processing the call arguments (line 152)
    
    # Call to abspath(...): (line 152)
    # Processing the call arguments (line 152)
    # Getting the type of 'caller_file' (line 152)
    caller_file_38674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 44), 'caller_file', False)
    # Processing the call keyword arguments (line 152)
    kwargs_38675 = {}
    # Getting the type of 'os' (line 152)
    os_38671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 28), 'os', False)
    # Obtaining the member 'path' of a type (line 152)
    path_38672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 28), os_38671, 'path')
    # Obtaining the member 'abspath' of a type (line 152)
    abspath_38673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 28), path_38672, 'abspath')
    # Calling abspath(args, kwargs) (line 152)
    abspath_call_result_38676 = invoke(stypy.reporting.localization.Localization(__file__, 152, 28), abspath_38673, *[caller_file_38674], **kwargs_38675)
    
    # Processing the call keyword arguments (line 152)
    kwargs_38677 = {}
    # Getting the type of 'os' (line 152)
    os_38668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 12), 'os', False)
    # Obtaining the member 'path' of a type (line 152)
    path_38669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 12), os_38668, 'path')
    # Obtaining the member 'dirname' of a type (line 152)
    dirname_38670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 12), path_38669, 'dirname')
    # Calling dirname(args, kwargs) (line 152)
    dirname_call_result_38678 = invoke(stypy.reporting.localization.Localization(__file__, 152, 12), dirname_38670, *[abspath_call_result_38676], **kwargs_38677)
    
    # Assigning a type to the variable 'd' (line 152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'd', dirname_call_result_38678)
    # SSA branch for the except part of a try statement (line 150)
    # SSA branch for the except 'NameError' branch of a try statement (line 150)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 157):
    
    # Assigning a Call to a Name (line 157):
    
    # Call to eval(...): (line 157)
    # Processing the call arguments (line 157)
    str_38680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 157, 27), 'str', '__name__')
    # Getting the type of 'frame' (line 157)
    frame_38681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 39), 'frame', False)
    # Obtaining the member 'f_globals' of a type (line 157)
    f_globals_38682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 39), frame_38681, 'f_globals')
    # Getting the type of 'frame' (line 157)
    frame_38683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 56), 'frame', False)
    # Obtaining the member 'f_locals' of a type (line 157)
    f_locals_38684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 56), frame_38683, 'f_locals')
    # Processing the call keyword arguments (line 157)
    kwargs_38685 = {}
    # Getting the type of 'eval' (line 157)
    eval_38679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 22), 'eval', False)
    # Calling eval(args, kwargs) (line 157)
    eval_call_result_38686 = invoke(stypy.reporting.localization.Localization(__file__, 157, 22), eval_38679, *[str_38680, f_globals_38682, f_locals_38684], **kwargs_38685)
    
    # Assigning a type to the variable 'caller_name' (line 157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 8), 'caller_name', eval_call_result_38686)
    
    # Call to __import__(...): (line 158)
    # Processing the call arguments (line 158)
    # Getting the type of 'caller_name' (line 158)
    caller_name_38688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 19), 'caller_name', False)
    # Processing the call keyword arguments (line 158)
    kwargs_38689 = {}
    # Getting the type of '__import__' (line 158)
    import___38687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 8), '__import__', False)
    # Calling __import__(args, kwargs) (line 158)
    import___call_result_38690 = invoke(stypy.reporting.localization.Localization(__file__, 158, 8), import___38687, *[caller_name_38688], **kwargs_38689)
    
    
    # Assigning a Subscript to a Name (line 159):
    
    # Assigning a Subscript to a Name (line 159):
    
    # Obtaining the type of the subscript
    # Getting the type of 'caller_name' (line 159)
    caller_name_38691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 26), 'caller_name')
    # Getting the type of 'sys' (line 159)
    sys_38692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 14), 'sys')
    # Obtaining the member 'modules' of a type (line 159)
    modules_38693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 14), sys_38692, 'modules')
    # Obtaining the member '__getitem__' of a type (line 159)
    getitem___38694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 14), modules_38693, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 159)
    subscript_call_result_38695 = invoke(stypy.reporting.localization.Localization(__file__, 159, 14), getitem___38694, caller_name_38691)
    
    # Assigning a type to the variable 'mod' (line 159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'mod', subscript_call_result_38695)
    
    # Type idiom detected: calculating its left and rigth part (line 160)
    str_38696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 24), 'str', '__file__')
    # Getting the type of 'mod' (line 160)
    mod_38697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 19), 'mod')
    
    (may_be_38698, more_types_in_union_38699) = may_provide_member(str_38696, mod_38697)

    if may_be_38698:

        if more_types_in_union_38699:
            # Runtime conditional SSA (line 160)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'mod' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 'mod', remove_not_member_provider_from_union(mod_38697, '__file__'))
        
        # Assigning a Call to a Name (line 161):
        
        # Assigning a Call to a Name (line 161):
        
        # Call to dirname(...): (line 161)
        # Processing the call arguments (line 161)
        
        # Call to abspath(...): (line 161)
        # Processing the call arguments (line 161)
        # Getting the type of 'mod' (line 161)
        mod_38706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 48), 'mod', False)
        # Obtaining the member '__file__' of a type (line 161)
        file___38707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 48), mod_38706, '__file__')
        # Processing the call keyword arguments (line 161)
        kwargs_38708 = {}
        # Getting the type of 'os' (line 161)
        os_38703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 32), 'os', False)
        # Obtaining the member 'path' of a type (line 161)
        path_38704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 32), os_38703, 'path')
        # Obtaining the member 'abspath' of a type (line 161)
        abspath_38705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 32), path_38704, 'abspath')
        # Calling abspath(args, kwargs) (line 161)
        abspath_call_result_38709 = invoke(stypy.reporting.localization.Localization(__file__, 161, 32), abspath_38705, *[file___38707], **kwargs_38708)
        
        # Processing the call keyword arguments (line 161)
        kwargs_38710 = {}
        # Getting the type of 'os' (line 161)
        os_38700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 16), 'os', False)
        # Obtaining the member 'path' of a type (line 161)
        path_38701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 16), os_38700, 'path')
        # Obtaining the member 'dirname' of a type (line 161)
        dirname_38702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 16), path_38701, 'dirname')
        # Calling dirname(args, kwargs) (line 161)
        dirname_call_result_38711 = invoke(stypy.reporting.localization.Localization(__file__, 161, 16), dirname_38702, *[abspath_call_result_38709], **kwargs_38710)
        
        # Assigning a type to the variable 'd' (line 161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 12), 'd', dirname_call_result_38711)

        if more_types_in_union_38699:
            # Runtime conditional SSA for else branch (line 160)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_38698) or more_types_in_union_38699):
        # Assigning a type to the variable 'mod' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 'mod', remove_member_provider_from_union(mod_38697, '__file__'))
        
        # Assigning a Call to a Name (line 165):
        
        # Assigning a Call to a Name (line 165):
        
        # Call to abspath(...): (line 165)
        # Processing the call arguments (line 165)
        str_38715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 32), 'str', '.')
        # Processing the call keyword arguments (line 165)
        kwargs_38716 = {}
        # Getting the type of 'os' (line 165)
        os_38712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 16), 'os', False)
        # Obtaining the member 'path' of a type (line 165)
        path_38713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 16), os_38712, 'path')
        # Obtaining the member 'abspath' of a type (line 165)
        abspath_38714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 16), path_38713, 'abspath')
        # Calling abspath(args, kwargs) (line 165)
        abspath_call_result_38717 = invoke(stypy.reporting.localization.Localization(__file__, 165, 16), abspath_38714, *[str_38715], **kwargs_38716)
        
        # Assigning a type to the variable 'd' (line 165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 12), 'd', abspath_call_result_38717)

        if (may_be_38698 and more_types_in_union_38699):
            # SSA join for if statement (line 160)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for try-except statement (line 150)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 168)
    # Getting the type of 'parent_path' (line 168)
    parent_path_38718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'parent_path')
    # Getting the type of 'None' (line 168)
    None_38719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 26), 'None')
    
    (may_be_38720, more_types_in_union_38721) = may_not_be_none(parent_path_38718, None_38719)

    if may_be_38720:

        if more_types_in_union_38721:
            # Runtime conditional SSA (line 168)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 169):
        
        # Assigning a Call to a Name (line 169):
        
        # Call to rel_path(...): (line 169)
        # Processing the call arguments (line 169)
        # Getting the type of 'd' (line 169)
        d_38723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 21), 'd', False)
        # Getting the type of 'parent_path' (line 169)
        parent_path_38724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 24), 'parent_path', False)
        # Processing the call keyword arguments (line 169)
        kwargs_38725 = {}
        # Getting the type of 'rel_path' (line 169)
        rel_path_38722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 12), 'rel_path', False)
        # Calling rel_path(args, kwargs) (line 169)
        rel_path_call_result_38726 = invoke(stypy.reporting.localization.Localization(__file__, 169, 12), rel_path_38722, *[d_38723, parent_path_38724], **kwargs_38725)
        
        # Assigning a type to the variable 'd' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 8), 'd', rel_path_call_result_38726)

        if more_types_in_union_38721:
            # SSA join for if statement (line 168)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Evaluating a boolean operation
    # Getting the type of 'd' (line 171)
    d_38727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 11), 'd')
    str_38728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 16), 'str', '.')
    # Applying the binary operator 'or' (line 171)
    result_or_keyword_38729 = python_operator(stypy.reporting.localization.Localization(__file__, 171, 11), 'or', d_38727, str_38728)
    
    # Assigning a type to the variable 'stypy_return_type' (line 171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 4), 'stypy_return_type', result_or_keyword_38729)
    
    # ################# End of 'get_path_from_frame(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_path_from_frame' in the type store
    # Getting the type of 'stypy_return_type' (line 142)
    stypy_return_type_38730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38730)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_path_from_frame'
    return stypy_return_type_38730

# Assigning a type to the variable 'get_path_from_frame' (line 142)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 0), 'get_path_from_frame', get_path_from_frame)

@norecursion
def njoin(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'njoin'
    module_type_store = module_type_store.open_function_context('njoin', 173, 0, False)
    
    # Passed parameters checking function
    njoin.stypy_localization = localization
    njoin.stypy_type_of_self = None
    njoin.stypy_type_store = module_type_store
    njoin.stypy_function_name = 'njoin'
    njoin.stypy_param_names_list = []
    njoin.stypy_varargs_param_name = 'path'
    njoin.stypy_kwargs_param_name = None
    njoin.stypy_call_defaults = defaults
    njoin.stypy_call_varargs = varargs
    njoin.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'njoin', [], 'path', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'njoin', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'njoin(...)' code ##################

    str_38731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, (-1)), 'str', "Join two or more pathname components +\n    - convert a /-separated pathname to one using the OS's path separator.\n    - resolve `..` and `.` from path.\n\n    Either passing n arguments as in njoin('a','b'), or a sequence\n    of n names as in njoin(['a','b']) is handled, or a mixture of such arguments.\n    ")
    
    # Assigning a List to a Name (line 181):
    
    # Assigning a List to a Name (line 181):
    
    # Obtaining an instance of the builtin type 'list' (line 181)
    list_38732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 181)
    
    # Assigning a type to the variable 'paths' (line 181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 4), 'paths', list_38732)
    
    # Getting the type of 'path' (line 182)
    path_38733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 13), 'path')
    # Testing the type of a for loop iterable (line 182)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 182, 4), path_38733)
    # Getting the type of the for loop variable (line 182)
    for_loop_var_38734 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 182, 4), path_38733)
    # Assigning a type to the variable 'p' (line 182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 4), 'p', for_loop_var_38734)
    # SSA begins for a for statement (line 182)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to is_sequence(...): (line 183)
    # Processing the call arguments (line 183)
    # Getting the type of 'p' (line 183)
    p_38736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 23), 'p', False)
    # Processing the call keyword arguments (line 183)
    kwargs_38737 = {}
    # Getting the type of 'is_sequence' (line 183)
    is_sequence_38735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 11), 'is_sequence', False)
    # Calling is_sequence(args, kwargs) (line 183)
    is_sequence_call_result_38738 = invoke(stypy.reporting.localization.Localization(__file__, 183, 11), is_sequence_38735, *[p_38736], **kwargs_38737)
    
    # Testing the type of an if condition (line 183)
    if_condition_38739 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 183, 8), is_sequence_call_result_38738)
    # Assigning a type to the variable 'if_condition_38739' (line 183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 8), 'if_condition_38739', if_condition_38739)
    # SSA begins for if statement (line 183)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 185)
    # Processing the call arguments (line 185)
    
    # Call to njoin(...): (line 185)
    # Getting the type of 'p' (line 185)
    p_38743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 32), 'p', False)
    # Processing the call keyword arguments (line 185)
    kwargs_38744 = {}
    # Getting the type of 'njoin' (line 185)
    njoin_38742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 25), 'njoin', False)
    # Calling njoin(args, kwargs) (line 185)
    njoin_call_result_38745 = invoke(stypy.reporting.localization.Localization(__file__, 185, 25), njoin_38742, *[p_38743], **kwargs_38744)
    
    # Processing the call keyword arguments (line 185)
    kwargs_38746 = {}
    # Getting the type of 'paths' (line 185)
    paths_38740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 12), 'paths', False)
    # Obtaining the member 'append' of a type (line 185)
    append_38741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 12), paths_38740, 'append')
    # Calling append(args, kwargs) (line 185)
    append_call_result_38747 = invoke(stypy.reporting.localization.Localization(__file__, 185, 12), append_38741, *[njoin_call_result_38745], **kwargs_38746)
    
    # SSA branch for the else part of an if statement (line 183)
    module_type_store.open_ssa_branch('else')
    # Evaluating assert statement condition
    
    # Call to is_string(...): (line 187)
    # Processing the call arguments (line 187)
    # Getting the type of 'p' (line 187)
    p_38749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 29), 'p', False)
    # Processing the call keyword arguments (line 187)
    kwargs_38750 = {}
    # Getting the type of 'is_string' (line 187)
    is_string_38748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 19), 'is_string', False)
    # Calling is_string(args, kwargs) (line 187)
    is_string_call_result_38751 = invoke(stypy.reporting.localization.Localization(__file__, 187, 19), is_string_38748, *[p_38749], **kwargs_38750)
    
    
    # Call to append(...): (line 188)
    # Processing the call arguments (line 188)
    # Getting the type of 'p' (line 188)
    p_38754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 25), 'p', False)
    # Processing the call keyword arguments (line 188)
    kwargs_38755 = {}
    # Getting the type of 'paths' (line 188)
    paths_38752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 12), 'paths', False)
    # Obtaining the member 'append' of a type (line 188)
    append_38753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 12), paths_38752, 'append')
    # Calling append(args, kwargs) (line 188)
    append_call_result_38756 = invoke(stypy.reporting.localization.Localization(__file__, 188, 12), append_38753, *[p_38754], **kwargs_38755)
    
    # SSA join for if statement (line 183)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 189):
    
    # Assigning a Name to a Name (line 189):
    # Getting the type of 'paths' (line 189)
    paths_38757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 11), 'paths')
    # Assigning a type to the variable 'path' (line 189)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 4), 'path', paths_38757)
    
    
    # Getting the type of 'path' (line 190)
    path_38758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 11), 'path')
    # Applying the 'not' unary operator (line 190)
    result_not__38759 = python_operator(stypy.reporting.localization.Localization(__file__, 190, 7), 'not', path_38758)
    
    # Testing the type of an if condition (line 190)
    if_condition_38760 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 190, 4), result_not__38759)
    # Assigning a type to the variable 'if_condition_38760' (line 190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'if_condition_38760', if_condition_38760)
    # SSA begins for if statement (line 190)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 192):
    
    # Assigning a Str to a Name (line 192):
    str_38761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 17), 'str', '')
    # Assigning a type to the variable 'joined' (line 192)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 8), 'joined', str_38761)
    # SSA branch for the else part of an if statement (line 190)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 195):
    
    # Assigning a Call to a Name (line 195):
    
    # Call to join(...): (line 195)
    # Getting the type of 'path' (line 195)
    path_38765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 31), 'path', False)
    # Processing the call keyword arguments (line 195)
    kwargs_38766 = {}
    # Getting the type of 'os' (line 195)
    os_38762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 17), 'os', False)
    # Obtaining the member 'path' of a type (line 195)
    path_38763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 17), os_38762, 'path')
    # Obtaining the member 'join' of a type (line 195)
    join_38764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 17), path_38763, 'join')
    # Calling join(args, kwargs) (line 195)
    join_call_result_38767 = invoke(stypy.reporting.localization.Localization(__file__, 195, 17), join_38764, *[path_38765], **kwargs_38766)
    
    # Assigning a type to the variable 'joined' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 8), 'joined', join_call_result_38767)
    # SSA join for if statement (line 190)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'os' (line 196)
    os_38768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 7), 'os')
    # Obtaining the member 'path' of a type (line 196)
    path_38769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 7), os_38768, 'path')
    # Obtaining the member 'sep' of a type (line 196)
    sep_38770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 7), path_38769, 'sep')
    str_38771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 22), 'str', '/')
    # Applying the binary operator '!=' (line 196)
    result_ne_38772 = python_operator(stypy.reporting.localization.Localization(__file__, 196, 7), '!=', sep_38770, str_38771)
    
    # Testing the type of an if condition (line 196)
    if_condition_38773 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 196, 4), result_ne_38772)
    # Assigning a type to the variable 'if_condition_38773' (line 196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 4), 'if_condition_38773', if_condition_38773)
    # SSA begins for if statement (line 196)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 197):
    
    # Assigning a Call to a Name (line 197):
    
    # Call to replace(...): (line 197)
    # Processing the call arguments (line 197)
    str_38776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 32), 'str', '/')
    # Getting the type of 'os' (line 197)
    os_38777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 37), 'os', False)
    # Obtaining the member 'path' of a type (line 197)
    path_38778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 37), os_38777, 'path')
    # Obtaining the member 'sep' of a type (line 197)
    sep_38779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 37), path_38778, 'sep')
    # Processing the call keyword arguments (line 197)
    kwargs_38780 = {}
    # Getting the type of 'joined' (line 197)
    joined_38774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 17), 'joined', False)
    # Obtaining the member 'replace' of a type (line 197)
    replace_38775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 17), joined_38774, 'replace')
    # Calling replace(args, kwargs) (line 197)
    replace_call_result_38781 = invoke(stypy.reporting.localization.Localization(__file__, 197, 17), replace_38775, *[str_38776, sep_38779], **kwargs_38780)
    
    # Assigning a type to the variable 'joined' (line 197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'joined', replace_call_result_38781)
    # SSA join for if statement (line 196)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to minrelpath(...): (line 198)
    # Processing the call arguments (line 198)
    # Getting the type of 'joined' (line 198)
    joined_38783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 22), 'joined', False)
    # Processing the call keyword arguments (line 198)
    kwargs_38784 = {}
    # Getting the type of 'minrelpath' (line 198)
    minrelpath_38782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 11), 'minrelpath', False)
    # Calling minrelpath(args, kwargs) (line 198)
    minrelpath_call_result_38785 = invoke(stypy.reporting.localization.Localization(__file__, 198, 11), minrelpath_38782, *[joined_38783], **kwargs_38784)
    
    # Assigning a type to the variable 'stypy_return_type' (line 198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 4), 'stypy_return_type', minrelpath_call_result_38785)
    
    # ################# End of 'njoin(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'njoin' in the type store
    # Getting the type of 'stypy_return_type' (line 173)
    stypy_return_type_38786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38786)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'njoin'
    return stypy_return_type_38786

# Assigning a type to the variable 'njoin' (line 173)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 0), 'njoin', njoin)

@norecursion
def get_mathlibs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 200)
    None_38787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 22), 'None')
    defaults = [None_38787]
    # Create a new context for function 'get_mathlibs'
    module_type_store = module_type_store.open_function_context('get_mathlibs', 200, 0, False)
    
    # Passed parameters checking function
    get_mathlibs.stypy_localization = localization
    get_mathlibs.stypy_type_of_self = None
    get_mathlibs.stypy_type_store = module_type_store
    get_mathlibs.stypy_function_name = 'get_mathlibs'
    get_mathlibs.stypy_param_names_list = ['path']
    get_mathlibs.stypy_varargs_param_name = None
    get_mathlibs.stypy_kwargs_param_name = None
    get_mathlibs.stypy_call_defaults = defaults
    get_mathlibs.stypy_call_varargs = varargs
    get_mathlibs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_mathlibs', ['path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_mathlibs', localization, ['path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_mathlibs(...)' code ##################

    str_38788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, (-1)), 'str', 'Return the MATHLIB line from numpyconfig.h\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 203)
    # Getting the type of 'path' (line 203)
    path_38789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 4), 'path')
    # Getting the type of 'None' (line 203)
    None_38790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 19), 'None')
    
    (may_be_38791, more_types_in_union_38792) = may_not_be_none(path_38789, None_38790)

    if may_be_38791:

        if more_types_in_union_38792:
            # Runtime conditional SSA (line 203)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 204):
        
        # Assigning a Call to a Name (line 204):
        
        # Call to join(...): (line 204)
        # Processing the call arguments (line 204)
        # Getting the type of 'path' (line 204)
        path_38796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 35), 'path', False)
        str_38797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 41), 'str', '_numpyconfig.h')
        # Processing the call keyword arguments (line 204)
        kwargs_38798 = {}
        # Getting the type of 'os' (line 204)
        os_38793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 22), 'os', False)
        # Obtaining the member 'path' of a type (line 204)
        path_38794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 22), os_38793, 'path')
        # Obtaining the member 'join' of a type (line 204)
        join_38795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 22), path_38794, 'join')
        # Calling join(args, kwargs) (line 204)
        join_call_result_38799 = invoke(stypy.reporting.localization.Localization(__file__, 204, 22), join_38795, *[path_38796, str_38797], **kwargs_38798)
        
        # Assigning a type to the variable 'config_file' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'config_file', join_call_result_38799)

        if more_types_in_union_38792:
            # Runtime conditional SSA for else branch (line 203)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_38791) or more_types_in_union_38792):
        
        # Assigning a Call to a Name (line 207):
        
        # Assigning a Call to a Name (line 207):
        
        # Call to get_numpy_include_dirs(...): (line 207)
        # Processing the call keyword arguments (line 207)
        kwargs_38801 = {}
        # Getting the type of 'get_numpy_include_dirs' (line 207)
        get_numpy_include_dirs_38800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 15), 'get_numpy_include_dirs', False)
        # Calling get_numpy_include_dirs(args, kwargs) (line 207)
        get_numpy_include_dirs_call_result_38802 = invoke(stypy.reporting.localization.Localization(__file__, 207, 15), get_numpy_include_dirs_38800, *[], **kwargs_38801)
        
        # Assigning a type to the variable 'dirs' (line 207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'dirs', get_numpy_include_dirs_call_result_38802)
        
        # Getting the type of 'dirs' (line 208)
        dirs_38803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 20), 'dirs')
        # Testing the type of a for loop iterable (line 208)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 208, 8), dirs_38803)
        # Getting the type of the for loop variable (line 208)
        for_loop_var_38804 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 208, 8), dirs_38803)
        # Assigning a type to the variable 'path' (line 208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'path', for_loop_var_38804)
        # SSA begins for a for statement (line 208)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 209):
        
        # Assigning a Call to a Name (line 209):
        
        # Call to join(...): (line 209)
        # Processing the call arguments (line 209)
        # Getting the type of 'path' (line 209)
        path_38808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 30), 'path', False)
        str_38809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, 36), 'str', '_numpyconfig.h')
        # Processing the call keyword arguments (line 209)
        kwargs_38810 = {}
        # Getting the type of 'os' (line 209)
        os_38805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 17), 'os', False)
        # Obtaining the member 'path' of a type (line 209)
        path_38806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 17), os_38805, 'path')
        # Obtaining the member 'join' of a type (line 209)
        join_38807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 17), path_38806, 'join')
        # Calling join(args, kwargs) (line 209)
        join_call_result_38811 = invoke(stypy.reporting.localization.Localization(__file__, 209, 17), join_38807, *[path_38808, str_38809], **kwargs_38810)
        
        # Assigning a type to the variable 'fn' (line 209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 12), 'fn', join_call_result_38811)
        
        
        # Call to exists(...): (line 210)
        # Processing the call arguments (line 210)
        # Getting the type of 'fn' (line 210)
        fn_38815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 30), 'fn', False)
        # Processing the call keyword arguments (line 210)
        kwargs_38816 = {}
        # Getting the type of 'os' (line 210)
        os_38812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 210)
        path_38813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 15), os_38812, 'path')
        # Obtaining the member 'exists' of a type (line 210)
        exists_38814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 15), path_38813, 'exists')
        # Calling exists(args, kwargs) (line 210)
        exists_call_result_38817 = invoke(stypy.reporting.localization.Localization(__file__, 210, 15), exists_38814, *[fn_38815], **kwargs_38816)
        
        # Testing the type of an if condition (line 210)
        if_condition_38818 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 210, 12), exists_call_result_38817)
        # Assigning a type to the variable 'if_condition_38818' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 12), 'if_condition_38818', if_condition_38818)
        # SSA begins for if statement (line 210)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 211):
        
        # Assigning a Name to a Name (line 211):
        # Getting the type of 'fn' (line 211)
        fn_38819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 30), 'fn')
        # Assigning a type to the variable 'config_file' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 16), 'config_file', fn_38819)
        # SSA join for if statement (line 210)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of a for statement (line 208)
        module_type_store.open_ssa_branch('for loop else')
        
        # Call to DistutilsError(...): (line 214)
        # Processing the call arguments (line 214)
        str_38821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 33), 'str', '_numpyconfig.h not found in numpy include dirs %r')
        
        # Obtaining an instance of the builtin type 'tuple' (line 215)
        tuple_38822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 215)
        # Adding element type (line 215)
        # Getting the type of 'dirs' (line 215)
        dirs_38823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 29), 'dirs', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 215, 29), tuple_38822, dirs_38823)
        
        # Applying the binary operator '%' (line 214)
        result_mod_38824 = python_operator(stypy.reporting.localization.Localization(__file__, 214, 33), '%', str_38821, tuple_38822)
        
        # Processing the call keyword arguments (line 214)
        kwargs_38825 = {}
        # Getting the type of 'DistutilsError' (line 214)
        DistutilsError_38820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 18), 'DistutilsError', False)
        # Calling DistutilsError(args, kwargs) (line 214)
        DistutilsError_call_result_38826 = invoke(stypy.reporting.localization.Localization(__file__, 214, 18), DistutilsError_38820, *[result_mod_38824], **kwargs_38825)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 214, 12), DistutilsError_call_result_38826, 'raise parameter', BaseException)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_38791 and more_types_in_union_38792):
            # SSA join for if statement (line 203)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 217):
    
    # Assigning a Call to a Name (line 217):
    
    # Call to open(...): (line 217)
    # Processing the call arguments (line 217)
    # Getting the type of 'config_file' (line 217)
    config_file_38828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 15), 'config_file', False)
    # Processing the call keyword arguments (line 217)
    kwargs_38829 = {}
    # Getting the type of 'open' (line 217)
    open_38827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 10), 'open', False)
    # Calling open(args, kwargs) (line 217)
    open_call_result_38830 = invoke(stypy.reporting.localization.Localization(__file__, 217, 10), open_38827, *[config_file_38828], **kwargs_38829)
    
    # Assigning a type to the variable 'fid' (line 217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'fid', open_call_result_38830)
    
    # Assigning a List to a Name (line 218):
    
    # Assigning a List to a Name (line 218):
    
    # Obtaining an instance of the builtin type 'list' (line 218)
    list_38831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 218)
    
    # Assigning a type to the variable 'mathlibs' (line 218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 4), 'mathlibs', list_38831)
    
    # Assigning a Str to a Name (line 219):
    
    # Assigning a Str to a Name (line 219):
    str_38832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 8), 'str', '#define MATHLIB')
    # Assigning a type to the variable 's' (line 219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 's', str_38832)
    
    # Getting the type of 'fid' (line 220)
    fid_38833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 16), 'fid')
    # Testing the type of a for loop iterable (line 220)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 220, 4), fid_38833)
    # Getting the type of the for loop variable (line 220)
    for_loop_var_38834 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 220, 4), fid_38833)
    # Assigning a type to the variable 'line' (line 220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 4), 'line', for_loop_var_38834)
    # SSA begins for a for statement (line 220)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to startswith(...): (line 221)
    # Processing the call arguments (line 221)
    # Getting the type of 's' (line 221)
    s_38837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 27), 's', False)
    # Processing the call keyword arguments (line 221)
    kwargs_38838 = {}
    # Getting the type of 'line' (line 221)
    line_38835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 11), 'line', False)
    # Obtaining the member 'startswith' of a type (line 221)
    startswith_38836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 11), line_38835, 'startswith')
    # Calling startswith(args, kwargs) (line 221)
    startswith_call_result_38839 = invoke(stypy.reporting.localization.Localization(__file__, 221, 11), startswith_38836, *[s_38837], **kwargs_38838)
    
    # Testing the type of an if condition (line 221)
    if_condition_38840 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 221, 8), startswith_call_result_38839)
    # Assigning a type to the variable 'if_condition_38840' (line 221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'if_condition_38840', if_condition_38840)
    # SSA begins for if statement (line 221)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 222):
    
    # Assigning a Call to a Name (line 222):
    
    # Call to strip(...): (line 222)
    # Processing the call keyword arguments (line 222)
    kwargs_38850 = {}
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 222)
    # Processing the call arguments (line 222)
    # Getting the type of 's' (line 222)
    s_38842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 29), 's', False)
    # Processing the call keyword arguments (line 222)
    kwargs_38843 = {}
    # Getting the type of 'len' (line 222)
    len_38841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 25), 'len', False)
    # Calling len(args, kwargs) (line 222)
    len_call_result_38844 = invoke(stypy.reporting.localization.Localization(__file__, 222, 25), len_38841, *[s_38842], **kwargs_38843)
    
    slice_38845 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 222, 20), len_call_result_38844, None, None)
    # Getting the type of 'line' (line 222)
    line_38846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 20), 'line', False)
    # Obtaining the member '__getitem__' of a type (line 222)
    getitem___38847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 20), line_38846, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 222)
    subscript_call_result_38848 = invoke(stypy.reporting.localization.Localization(__file__, 222, 20), getitem___38847, slice_38845)
    
    # Obtaining the member 'strip' of a type (line 222)
    strip_38849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 20), subscript_call_result_38848, 'strip')
    # Calling strip(args, kwargs) (line 222)
    strip_call_result_38851 = invoke(stypy.reporting.localization.Localization(__file__, 222, 20), strip_38849, *[], **kwargs_38850)
    
    # Assigning a type to the variable 'value' (line 222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 12), 'value', strip_call_result_38851)
    
    # Getting the type of 'value' (line 223)
    value_38852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 15), 'value')
    # Testing the type of an if condition (line 223)
    if_condition_38853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 223, 12), value_38852)
    # Assigning a type to the variable 'if_condition_38853' (line 223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 12), 'if_condition_38853', if_condition_38853)
    # SSA begins for if statement (line 223)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 224)
    # Processing the call arguments (line 224)
    
    # Call to split(...): (line 224)
    # Processing the call arguments (line 224)
    str_38858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 44), 'str', ',')
    # Processing the call keyword arguments (line 224)
    kwargs_38859 = {}
    # Getting the type of 'value' (line 224)
    value_38856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 32), 'value', False)
    # Obtaining the member 'split' of a type (line 224)
    split_38857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 32), value_38856, 'split')
    # Calling split(args, kwargs) (line 224)
    split_call_result_38860 = invoke(stypy.reporting.localization.Localization(__file__, 224, 32), split_38857, *[str_38858], **kwargs_38859)
    
    # Processing the call keyword arguments (line 224)
    kwargs_38861 = {}
    # Getting the type of 'mathlibs' (line 224)
    mathlibs_38854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 16), 'mathlibs', False)
    # Obtaining the member 'extend' of a type (line 224)
    extend_38855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 16), mathlibs_38854, 'extend')
    # Calling extend(args, kwargs) (line 224)
    extend_call_result_38862 = invoke(stypy.reporting.localization.Localization(__file__, 224, 16), extend_38855, *[split_call_result_38860], **kwargs_38861)
    
    # SSA join for if statement (line 223)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 221)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to close(...): (line 225)
    # Processing the call keyword arguments (line 225)
    kwargs_38865 = {}
    # Getting the type of 'fid' (line 225)
    fid_38863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'fid', False)
    # Obtaining the member 'close' of a type (line 225)
    close_38864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 4), fid_38863, 'close')
    # Calling close(args, kwargs) (line 225)
    close_call_result_38866 = invoke(stypy.reporting.localization.Localization(__file__, 225, 4), close_38864, *[], **kwargs_38865)
    
    # Getting the type of 'mathlibs' (line 226)
    mathlibs_38867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 11), 'mathlibs')
    # Assigning a type to the variable 'stypy_return_type' (line 226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 4), 'stypy_return_type', mathlibs_38867)
    
    # ################# End of 'get_mathlibs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_mathlibs' in the type store
    # Getting the type of 'stypy_return_type' (line 200)
    stypy_return_type_38868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38868)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_mathlibs'
    return stypy_return_type_38868

# Assigning a type to the variable 'get_mathlibs' (line 200)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 0), 'get_mathlibs', get_mathlibs)

@norecursion
def minrelpath(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'minrelpath'
    module_type_store = module_type_store.open_function_context('minrelpath', 228, 0, False)
    
    # Passed parameters checking function
    minrelpath.stypy_localization = localization
    minrelpath.stypy_type_of_self = None
    minrelpath.stypy_type_store = module_type_store
    minrelpath.stypy_function_name = 'minrelpath'
    minrelpath.stypy_param_names_list = ['path']
    minrelpath.stypy_varargs_param_name = None
    minrelpath.stypy_kwargs_param_name = None
    minrelpath.stypy_call_defaults = defaults
    minrelpath.stypy_call_varargs = varargs
    minrelpath.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'minrelpath', ['path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'minrelpath', localization, ['path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'minrelpath(...)' code ##################

    str_38869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 230, (-1)), 'str', "Resolve `..` and '.' from path.\n    ")
    
    
    
    # Call to is_string(...): (line 231)
    # Processing the call arguments (line 231)
    # Getting the type of 'path' (line 231)
    path_38871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 21), 'path', False)
    # Processing the call keyword arguments (line 231)
    kwargs_38872 = {}
    # Getting the type of 'is_string' (line 231)
    is_string_38870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 11), 'is_string', False)
    # Calling is_string(args, kwargs) (line 231)
    is_string_call_result_38873 = invoke(stypy.reporting.localization.Localization(__file__, 231, 11), is_string_38870, *[path_38871], **kwargs_38872)
    
    # Applying the 'not' unary operator (line 231)
    result_not__38874 = python_operator(stypy.reporting.localization.Localization(__file__, 231, 7), 'not', is_string_call_result_38873)
    
    # Testing the type of an if condition (line 231)
    if_condition_38875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 231, 4), result_not__38874)
    # Assigning a type to the variable 'if_condition_38875' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'if_condition_38875', if_condition_38875)
    # SSA begins for if statement (line 231)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'path' (line 232)
    path_38876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 15), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 8), 'stypy_return_type', path_38876)
    # SSA join for if statement (line 231)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    str_38877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, 7), 'str', '.')
    # Getting the type of 'path' (line 233)
    path_38878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 18), 'path')
    # Applying the binary operator 'notin' (line 233)
    result_contains_38879 = python_operator(stypy.reporting.localization.Localization(__file__, 233, 7), 'notin', str_38877, path_38878)
    
    # Testing the type of an if condition (line 233)
    if_condition_38880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 233, 4), result_contains_38879)
    # Assigning a type to the variable 'if_condition_38880' (line 233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 4), 'if_condition_38880', if_condition_38880)
    # SSA begins for if statement (line 233)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'path' (line 234)
    path_38881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 15), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 8), 'stypy_return_type', path_38881)
    # SSA join for if statement (line 233)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 235):
    
    # Assigning a Call to a Name (line 235):
    
    # Call to split(...): (line 235)
    # Processing the call arguments (line 235)
    # Getting the type of 'os' (line 235)
    os_38884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 19), 'os', False)
    # Obtaining the member 'sep' of a type (line 235)
    sep_38885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 19), os_38884, 'sep')
    # Processing the call keyword arguments (line 235)
    kwargs_38886 = {}
    # Getting the type of 'path' (line 235)
    path_38882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 8), 'path', False)
    # Obtaining the member 'split' of a type (line 235)
    split_38883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 8), path_38882, 'split')
    # Calling split(args, kwargs) (line 235)
    split_call_result_38887 = invoke(stypy.reporting.localization.Localization(__file__, 235, 8), split_38883, *[sep_38885], **kwargs_38886)
    
    # Assigning a type to the variable 'l' (line 235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 4), 'l', split_call_result_38887)
    
    # Getting the type of 'l' (line 236)
    l_38888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 10), 'l')
    # Testing the type of an if condition (line 236)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 236, 4), l_38888)
    # SSA begins for while statement (line 236)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    
    # SSA begins for try-except statement (line 237)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 238):
    
    # Assigning a Call to a Name (line 238):
    
    # Call to index(...): (line 238)
    # Processing the call arguments (line 238)
    str_38891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 24), 'str', '.')
    int_38892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 29), 'int')
    # Processing the call keyword arguments (line 238)
    kwargs_38893 = {}
    # Getting the type of 'l' (line 238)
    l_38889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 16), 'l', False)
    # Obtaining the member 'index' of a type (line 238)
    index_38890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 16), l_38889, 'index')
    # Calling index(args, kwargs) (line 238)
    index_call_result_38894 = invoke(stypy.reporting.localization.Localization(__file__, 238, 16), index_38890, *[str_38891, int_38892], **kwargs_38893)
    
    # Assigning a type to the variable 'i' (line 238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 12), 'i', index_call_result_38894)
    # SSA branch for the except part of a try statement (line 237)
    # SSA branch for the except 'ValueError' branch of a try statement (line 237)
    module_type_store.open_ssa_branch('except')
    # SSA join for try-except statement (line 237)
    module_type_store = module_type_store.join_ssa_context()
    
    # Deleting a member
    # Getting the type of 'l' (line 241)
    l_38895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 12), 'l')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 241)
    i_38896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 14), 'i')
    # Getting the type of 'l' (line 241)
    l_38897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 12), 'l')
    # Obtaining the member '__getitem__' of a type (line 241)
    getitem___38898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 12), l_38897, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 241)
    subscript_call_result_38899 = invoke(stypy.reporting.localization.Localization(__file__, 241, 12), getitem___38898, i_38896)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 241, 8), l_38895, subscript_call_result_38899)
    # SSA join for while statement (line 236)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 242):
    
    # Assigning a Num to a Name (line 242):
    int_38900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, 8), 'int')
    # Assigning a type to the variable 'j' (line 242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 4), 'j', int_38900)
    
    # Getting the type of 'l' (line 243)
    l_38901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 10), 'l')
    # Testing the type of an if condition (line 243)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 243, 4), l_38901)
    # SSA begins for while statement (line 243)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    
    # SSA begins for try-except statement (line 244)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 245):
    
    # Assigning a Call to a Name (line 245):
    
    # Call to index(...): (line 245)
    # Processing the call arguments (line 245)
    str_38904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 24), 'str', '..')
    # Getting the type of 'j' (line 245)
    j_38905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 30), 'j', False)
    # Processing the call keyword arguments (line 245)
    kwargs_38906 = {}
    # Getting the type of 'l' (line 245)
    l_38902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 16), 'l', False)
    # Obtaining the member 'index' of a type (line 245)
    index_38903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 16), l_38902, 'index')
    # Calling index(args, kwargs) (line 245)
    index_call_result_38907 = invoke(stypy.reporting.localization.Localization(__file__, 245, 16), index_38903, *[str_38904, j_38905], **kwargs_38906)
    
    # Assigning a type to the variable 'i' (line 245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 12), 'i', index_call_result_38907)
    # SSA branch for the except part of a try statement (line 244)
    # SSA branch for the except 'ValueError' branch of a try statement (line 244)
    module_type_store.open_ssa_branch('except')
    # SSA join for try-except statement (line 244)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 248)
    i_38908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 13), 'i')
    int_38909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 15), 'int')
    # Applying the binary operator '-' (line 248)
    result_sub_38910 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 13), '-', i_38908, int_38909)
    
    # Getting the type of 'l' (line 248)
    l_38911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 11), 'l')
    # Obtaining the member '__getitem__' of a type (line 248)
    getitem___38912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 11), l_38911, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 248)
    subscript_call_result_38913 = invoke(stypy.reporting.localization.Localization(__file__, 248, 11), getitem___38912, result_sub_38910)
    
    str_38914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 19), 'str', '..')
    # Applying the binary operator '==' (line 248)
    result_eq_38915 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 11), '==', subscript_call_result_38913, str_38914)
    
    # Testing the type of an if condition (line 248)
    if_condition_38916 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 248, 8), result_eq_38915)
    # Assigning a type to the variable 'if_condition_38916' (line 248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 8), 'if_condition_38916', if_condition_38916)
    # SSA begins for if statement (line 248)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'j' (line 249)
    j_38917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 12), 'j')
    int_38918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 17), 'int')
    # Applying the binary operator '+=' (line 249)
    result_iadd_38919 = python_operator(stypy.reporting.localization.Localization(__file__, 249, 12), '+=', j_38917, int_38918)
    # Assigning a type to the variable 'j' (line 249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 12), 'j', result_iadd_38919)
    
    # SSA branch for the else part of an if statement (line 248)
    module_type_store.open_ssa_branch('else')
    # Deleting a member
    # Getting the type of 'l' (line 251)
    l_38920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 16), 'l')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 251)
    i_38921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 18), 'i')
    # Getting the type of 'l' (line 251)
    l_38922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 16), 'l')
    # Obtaining the member '__getitem__' of a type (line 251)
    getitem___38923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 16), l_38922, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 251)
    subscript_call_result_38924 = invoke(stypy.reporting.localization.Localization(__file__, 251, 16), getitem___38923, i_38921)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 12), l_38920, subscript_call_result_38924)
    # Deleting a member
    # Getting the type of 'l' (line 251)
    l_38925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 22), 'l')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 251)
    i_38926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 24), 'i')
    int_38927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 26), 'int')
    # Applying the binary operator '-' (line 251)
    result_sub_38928 = python_operator(stypy.reporting.localization.Localization(__file__, 251, 24), '-', i_38926, int_38927)
    
    # Getting the type of 'l' (line 251)
    l_38929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 22), 'l')
    # Obtaining the member '__getitem__' of a type (line 251)
    getitem___38930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 22), l_38929, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 251)
    subscript_call_result_38931 = invoke(stypy.reporting.localization.Localization(__file__, 251, 22), getitem___38930, result_sub_38928)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 12), l_38925, subscript_call_result_38931)
    
    # Assigning a Num to a Name (line 252):
    
    # Assigning a Num to a Name (line 252):
    int_38932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 16), 'int')
    # Assigning a type to the variable 'j' (line 252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 12), 'j', int_38932)
    # SSA join for if statement (line 248)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 243)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'l' (line 253)
    l_38933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 11), 'l')
    # Applying the 'not' unary operator (line 253)
    result_not__38934 = python_operator(stypy.reporting.localization.Localization(__file__, 253, 7), 'not', l_38933)
    
    # Testing the type of an if condition (line 253)
    if_condition_38935 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 253, 4), result_not__38934)
    # Assigning a type to the variable 'if_condition_38935' (line 253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 4), 'if_condition_38935', if_condition_38935)
    # SSA begins for if statement (line 253)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    str_38936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 15), 'str', '')
    # Assigning a type to the variable 'stypy_return_type' (line 254)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'stypy_return_type', str_38936)
    # SSA join for if statement (line 253)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to join(...): (line 255)
    # Processing the call arguments (line 255)
    # Getting the type of 'l' (line 255)
    l_38940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 23), 'l', False)
    # Processing the call keyword arguments (line 255)
    kwargs_38941 = {}
    # Getting the type of 'os' (line 255)
    os_38937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 11), 'os', False)
    # Obtaining the member 'sep' of a type (line 255)
    sep_38938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 11), os_38937, 'sep')
    # Obtaining the member 'join' of a type (line 255)
    join_38939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 11), sep_38938, 'join')
    # Calling join(args, kwargs) (line 255)
    join_call_result_38942 = invoke(stypy.reporting.localization.Localization(__file__, 255, 11), join_38939, *[l_38940], **kwargs_38941)
    
    # Assigning a type to the variable 'stypy_return_type' (line 255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 4), 'stypy_return_type', join_call_result_38942)
    
    # ################# End of 'minrelpath(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'minrelpath' in the type store
    # Getting the type of 'stypy_return_type' (line 228)
    stypy_return_type_38943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38943)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'minrelpath'
    return stypy_return_type_38943

# Assigning a type to the variable 'minrelpath' (line 228)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 0), 'minrelpath', minrelpath)

@norecursion
def _fix_paths(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_fix_paths'
    module_type_store = module_type_store.open_function_context('_fix_paths', 257, 0, False)
    
    # Passed parameters checking function
    _fix_paths.stypy_localization = localization
    _fix_paths.stypy_type_of_self = None
    _fix_paths.stypy_type_store = module_type_store
    _fix_paths.stypy_function_name = '_fix_paths'
    _fix_paths.stypy_param_names_list = ['paths', 'local_path', 'include_non_existing']
    _fix_paths.stypy_varargs_param_name = None
    _fix_paths.stypy_kwargs_param_name = None
    _fix_paths.stypy_call_defaults = defaults
    _fix_paths.stypy_call_varargs = varargs
    _fix_paths.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_fix_paths', ['paths', 'local_path', 'include_non_existing'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_fix_paths', localization, ['paths', 'local_path', 'include_non_existing'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_fix_paths(...)' code ##################

    # Evaluating assert statement condition
    
    # Call to is_sequence(...): (line 258)
    # Processing the call arguments (line 258)
    # Getting the type of 'paths' (line 258)
    paths_38945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 23), 'paths', False)
    # Processing the call keyword arguments (line 258)
    kwargs_38946 = {}
    # Getting the type of 'is_sequence' (line 258)
    is_sequence_38944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 11), 'is_sequence', False)
    # Calling is_sequence(args, kwargs) (line 258)
    is_sequence_call_result_38947 = invoke(stypy.reporting.localization.Localization(__file__, 258, 11), is_sequence_38944, *[paths_38945], **kwargs_38946)
    
    
    # Assigning a List to a Name (line 259):
    
    # Assigning a List to a Name (line 259):
    
    # Obtaining an instance of the builtin type 'list' (line 259)
    list_38948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 259)
    
    # Assigning a type to the variable 'new_paths' (line 259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 4), 'new_paths', list_38948)
    # Evaluating assert statement condition
    
    
    # Call to is_string(...): (line 260)
    # Processing the call arguments (line 260)
    # Getting the type of 'paths' (line 260)
    paths_38950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 25), 'paths', False)
    # Processing the call keyword arguments (line 260)
    kwargs_38951 = {}
    # Getting the type of 'is_string' (line 260)
    is_string_38949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 15), 'is_string', False)
    # Calling is_string(args, kwargs) (line 260)
    is_string_call_result_38952 = invoke(stypy.reporting.localization.Localization(__file__, 260, 15), is_string_38949, *[paths_38950], **kwargs_38951)
    
    # Applying the 'not' unary operator (line 260)
    result_not__38953 = python_operator(stypy.reporting.localization.Localization(__file__, 260, 11), 'not', is_string_call_result_38952)
    
    
    # Getting the type of 'paths' (line 261)
    paths_38954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 13), 'paths')
    # Testing the type of a for loop iterable (line 261)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 261, 4), paths_38954)
    # Getting the type of the for loop variable (line 261)
    for_loop_var_38955 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 261, 4), paths_38954)
    # Assigning a type to the variable 'n' (line 261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'n', for_loop_var_38955)
    # SSA begins for a for statement (line 261)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to is_string(...): (line 262)
    # Processing the call arguments (line 262)
    # Getting the type of 'n' (line 262)
    n_38957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 21), 'n', False)
    # Processing the call keyword arguments (line 262)
    kwargs_38958 = {}
    # Getting the type of 'is_string' (line 262)
    is_string_38956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 11), 'is_string', False)
    # Calling is_string(args, kwargs) (line 262)
    is_string_call_result_38959 = invoke(stypy.reporting.localization.Localization(__file__, 262, 11), is_string_38956, *[n_38957], **kwargs_38958)
    
    # Testing the type of an if condition (line 262)
    if_condition_38960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 262, 8), is_string_call_result_38959)
    # Assigning a type to the variable 'if_condition_38960' (line 262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 8), 'if_condition_38960', if_condition_38960)
    # SSA begins for if statement (line 262)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    str_38961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 15), 'str', '*')
    # Getting the type of 'n' (line 263)
    n_38962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 22), 'n')
    # Applying the binary operator 'in' (line 263)
    result_contains_38963 = python_operator(stypy.reporting.localization.Localization(__file__, 263, 15), 'in', str_38961, n_38962)
    
    
    str_38964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 27), 'str', '?')
    # Getting the type of 'n' (line 263)
    n_38965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 34), 'n')
    # Applying the binary operator 'in' (line 263)
    result_contains_38966 = python_operator(stypy.reporting.localization.Localization(__file__, 263, 27), 'in', str_38964, n_38965)
    
    # Applying the binary operator 'or' (line 263)
    result_or_keyword_38967 = python_operator(stypy.reporting.localization.Localization(__file__, 263, 15), 'or', result_contains_38963, result_contains_38966)
    
    # Testing the type of an if condition (line 263)
    if_condition_38968 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 263, 12), result_or_keyword_38967)
    # Assigning a type to the variable 'if_condition_38968' (line 263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 12), 'if_condition_38968', if_condition_38968)
    # SSA begins for if statement (line 263)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 264):
    
    # Assigning a Call to a Name (line 264):
    
    # Call to glob(...): (line 264)
    # Processing the call arguments (line 264)
    # Getting the type of 'n' (line 264)
    n_38971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 30), 'n', False)
    # Processing the call keyword arguments (line 264)
    kwargs_38972 = {}
    # Getting the type of 'glob' (line 264)
    glob_38969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 20), 'glob', False)
    # Obtaining the member 'glob' of a type (line 264)
    glob_38970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 20), glob_38969, 'glob')
    # Calling glob(args, kwargs) (line 264)
    glob_call_result_38973 = invoke(stypy.reporting.localization.Localization(__file__, 264, 20), glob_38970, *[n_38971], **kwargs_38972)
    
    # Assigning a type to the variable 'p' (line 264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 16), 'p', glob_call_result_38973)
    
    # Assigning a Call to a Name (line 265):
    
    # Assigning a Call to a Name (line 265):
    
    # Call to glob(...): (line 265)
    # Processing the call arguments (line 265)
    
    # Call to njoin(...): (line 265)
    # Processing the call arguments (line 265)
    # Getting the type of 'local_path' (line 265)
    local_path_38977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 37), 'local_path', False)
    # Getting the type of 'n' (line 265)
    n_38978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 49), 'n', False)
    # Processing the call keyword arguments (line 265)
    kwargs_38979 = {}
    # Getting the type of 'njoin' (line 265)
    njoin_38976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 31), 'njoin', False)
    # Calling njoin(args, kwargs) (line 265)
    njoin_call_result_38980 = invoke(stypy.reporting.localization.Localization(__file__, 265, 31), njoin_38976, *[local_path_38977, n_38978], **kwargs_38979)
    
    # Processing the call keyword arguments (line 265)
    kwargs_38981 = {}
    # Getting the type of 'glob' (line 265)
    glob_38974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 21), 'glob', False)
    # Obtaining the member 'glob' of a type (line 265)
    glob_38975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 21), glob_38974, 'glob')
    # Calling glob(args, kwargs) (line 265)
    glob_call_result_38982 = invoke(stypy.reporting.localization.Localization(__file__, 265, 21), glob_38975, *[njoin_call_result_38980], **kwargs_38981)
    
    # Assigning a type to the variable 'p2' (line 265)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 16), 'p2', glob_call_result_38982)
    
    # Getting the type of 'p2' (line 266)
    p2_38983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 19), 'p2')
    # Testing the type of an if condition (line 266)
    if_condition_38984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 266, 16), p2_38983)
    # Assigning a type to the variable 'if_condition_38984' (line 266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 16), 'if_condition_38984', if_condition_38984)
    # SSA begins for if statement (line 266)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 267)
    # Processing the call arguments (line 267)
    # Getting the type of 'p2' (line 267)
    p2_38987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 37), 'p2', False)
    # Processing the call keyword arguments (line 267)
    kwargs_38988 = {}
    # Getting the type of 'new_paths' (line 267)
    new_paths_38985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 20), 'new_paths', False)
    # Obtaining the member 'extend' of a type (line 267)
    extend_38986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 20), new_paths_38985, 'extend')
    # Calling extend(args, kwargs) (line 267)
    extend_call_result_38989 = invoke(stypy.reporting.localization.Localization(__file__, 267, 20), extend_38986, *[p2_38987], **kwargs_38988)
    
    # SSA branch for the else part of an if statement (line 266)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'p' (line 268)
    p_38990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 21), 'p')
    # Testing the type of an if condition (line 268)
    if_condition_38991 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 268, 21), p_38990)
    # Assigning a type to the variable 'if_condition_38991' (line 268)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 21), 'if_condition_38991', if_condition_38991)
    # SSA begins for if statement (line 268)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 269)
    # Processing the call arguments (line 269)
    # Getting the type of 'p' (line 269)
    p_38994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 37), 'p', False)
    # Processing the call keyword arguments (line 269)
    kwargs_38995 = {}
    # Getting the type of 'new_paths' (line 269)
    new_paths_38992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 20), 'new_paths', False)
    # Obtaining the member 'extend' of a type (line 269)
    extend_38993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 20), new_paths_38992, 'extend')
    # Calling extend(args, kwargs) (line 269)
    extend_call_result_38996 = invoke(stypy.reporting.localization.Localization(__file__, 269, 20), extend_38993, *[p_38994], **kwargs_38995)
    
    # SSA branch for the else part of an if statement (line 268)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'include_non_existing' (line 271)
    include_non_existing_38997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 23), 'include_non_existing')
    # Testing the type of an if condition (line 271)
    if_condition_38998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 271, 20), include_non_existing_38997)
    # Assigning a type to the variable 'if_condition_38998' (line 271)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 20), 'if_condition_38998', if_condition_38998)
    # SSA begins for if statement (line 271)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 272)
    # Processing the call arguments (line 272)
    # Getting the type of 'n' (line 272)
    n_39001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 41), 'n', False)
    # Processing the call keyword arguments (line 272)
    kwargs_39002 = {}
    # Getting the type of 'new_paths' (line 272)
    new_paths_38999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 24), 'new_paths', False)
    # Obtaining the member 'append' of a type (line 272)
    append_39000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 24), new_paths_38999, 'append')
    # Calling append(args, kwargs) (line 272)
    append_call_result_39003 = invoke(stypy.reporting.localization.Localization(__file__, 272, 24), append_39000, *[n_39001], **kwargs_39002)
    
    # SSA join for if statement (line 271)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to print(...): (line 273)
    # Processing the call arguments (line 273)
    str_39005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 26), 'str', 'could not resolve pattern in %r: %r')
    
    # Obtaining an instance of the builtin type 'tuple' (line 274)
    tuple_39006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 274)
    # Adding element type (line 274)
    # Getting the type of 'local_path' (line 274)
    local_path_39007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 29), 'local_path', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 274, 29), tuple_39006, local_path_39007)
    # Adding element type (line 274)
    # Getting the type of 'n' (line 274)
    n_39008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 41), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 274, 29), tuple_39006, n_39008)
    
    # Applying the binary operator '%' (line 273)
    result_mod_39009 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 26), '%', str_39005, tuple_39006)
    
    # Processing the call keyword arguments (line 273)
    kwargs_39010 = {}
    # Getting the type of 'print' (line 273)
    print_39004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 20), 'print', False)
    # Calling print(args, kwargs) (line 273)
    print_call_result_39011 = invoke(stypy.reporting.localization.Localization(__file__, 273, 20), print_39004, *[result_mod_39009], **kwargs_39010)
    
    # SSA join for if statement (line 268)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 266)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 263)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 276):
    
    # Assigning a Call to a Name (line 276):
    
    # Call to njoin(...): (line 276)
    # Processing the call arguments (line 276)
    # Getting the type of 'local_path' (line 276)
    local_path_39013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 27), 'local_path', False)
    # Getting the type of 'n' (line 276)
    n_39014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 39), 'n', False)
    # Processing the call keyword arguments (line 276)
    kwargs_39015 = {}
    # Getting the type of 'njoin' (line 276)
    njoin_39012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 21), 'njoin', False)
    # Calling njoin(args, kwargs) (line 276)
    njoin_call_result_39016 = invoke(stypy.reporting.localization.Localization(__file__, 276, 21), njoin_39012, *[local_path_39013, n_39014], **kwargs_39015)
    
    # Assigning a type to the variable 'n2' (line 276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 16), 'n2', njoin_call_result_39016)
    
    
    # Call to exists(...): (line 277)
    # Processing the call arguments (line 277)
    # Getting the type of 'n2' (line 277)
    n2_39020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 34), 'n2', False)
    # Processing the call keyword arguments (line 277)
    kwargs_39021 = {}
    # Getting the type of 'os' (line 277)
    os_39017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 19), 'os', False)
    # Obtaining the member 'path' of a type (line 277)
    path_39018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 19), os_39017, 'path')
    # Obtaining the member 'exists' of a type (line 277)
    exists_39019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 19), path_39018, 'exists')
    # Calling exists(args, kwargs) (line 277)
    exists_call_result_39022 = invoke(stypy.reporting.localization.Localization(__file__, 277, 19), exists_39019, *[n2_39020], **kwargs_39021)
    
    # Testing the type of an if condition (line 277)
    if_condition_39023 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 277, 16), exists_call_result_39022)
    # Assigning a type to the variable 'if_condition_39023' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 16), 'if_condition_39023', if_condition_39023)
    # SSA begins for if statement (line 277)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 278)
    # Processing the call arguments (line 278)
    # Getting the type of 'n2' (line 278)
    n2_39026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 37), 'n2', False)
    # Processing the call keyword arguments (line 278)
    kwargs_39027 = {}
    # Getting the type of 'new_paths' (line 278)
    new_paths_39024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 20), 'new_paths', False)
    # Obtaining the member 'append' of a type (line 278)
    append_39025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 20), new_paths_39024, 'append')
    # Calling append(args, kwargs) (line 278)
    append_call_result_39028 = invoke(stypy.reporting.localization.Localization(__file__, 278, 20), append_39025, *[n2_39026], **kwargs_39027)
    
    # SSA branch for the else part of an if statement (line 277)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to exists(...): (line 280)
    # Processing the call arguments (line 280)
    # Getting the type of 'n' (line 280)
    n_39032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 38), 'n', False)
    # Processing the call keyword arguments (line 280)
    kwargs_39033 = {}
    # Getting the type of 'os' (line 280)
    os_39029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 23), 'os', False)
    # Obtaining the member 'path' of a type (line 280)
    path_39030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 23), os_39029, 'path')
    # Obtaining the member 'exists' of a type (line 280)
    exists_39031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 23), path_39030, 'exists')
    # Calling exists(args, kwargs) (line 280)
    exists_call_result_39034 = invoke(stypy.reporting.localization.Localization(__file__, 280, 23), exists_39031, *[n_39032], **kwargs_39033)
    
    # Testing the type of an if condition (line 280)
    if_condition_39035 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 280, 20), exists_call_result_39034)
    # Assigning a type to the variable 'if_condition_39035' (line 280)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 20), 'if_condition_39035', if_condition_39035)
    # SSA begins for if statement (line 280)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 281)
    # Processing the call arguments (line 281)
    # Getting the type of 'n' (line 281)
    n_39038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 41), 'n', False)
    # Processing the call keyword arguments (line 281)
    kwargs_39039 = {}
    # Getting the type of 'new_paths' (line 281)
    new_paths_39036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 24), 'new_paths', False)
    # Obtaining the member 'append' of a type (line 281)
    append_39037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 24), new_paths_39036, 'append')
    # Calling append(args, kwargs) (line 281)
    append_call_result_39040 = invoke(stypy.reporting.localization.Localization(__file__, 281, 24), append_39037, *[n_39038], **kwargs_39039)
    
    # SSA branch for the else part of an if statement (line 280)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'include_non_existing' (line 282)
    include_non_existing_39041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 25), 'include_non_existing')
    # Testing the type of an if condition (line 282)
    if_condition_39042 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 282, 25), include_non_existing_39041)
    # Assigning a type to the variable 'if_condition_39042' (line 282)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 25), 'if_condition_39042', if_condition_39042)
    # SSA begins for if statement (line 282)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 283)
    # Processing the call arguments (line 283)
    # Getting the type of 'n' (line 283)
    n_39045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 41), 'n', False)
    # Processing the call keyword arguments (line 283)
    kwargs_39046 = {}
    # Getting the type of 'new_paths' (line 283)
    new_paths_39043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 24), 'new_paths', False)
    # Obtaining the member 'append' of a type (line 283)
    append_39044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 283, 24), new_paths_39043, 'append')
    # Calling append(args, kwargs) (line 283)
    append_call_result_39047 = invoke(stypy.reporting.localization.Localization(__file__, 283, 24), append_39044, *[n_39045], **kwargs_39046)
    
    # SSA join for if statement (line 282)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 280)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to exists(...): (line 284)
    # Processing the call arguments (line 284)
    # Getting the type of 'n' (line 284)
    n_39051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 42), 'n', False)
    # Processing the call keyword arguments (line 284)
    kwargs_39052 = {}
    # Getting the type of 'os' (line 284)
    os_39048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 27), 'os', False)
    # Obtaining the member 'path' of a type (line 284)
    path_39049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 27), os_39048, 'path')
    # Obtaining the member 'exists' of a type (line 284)
    exists_39050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 27), path_39049, 'exists')
    # Calling exists(args, kwargs) (line 284)
    exists_call_result_39053 = invoke(stypy.reporting.localization.Localization(__file__, 284, 27), exists_39050, *[n_39051], **kwargs_39052)
    
    # Applying the 'not' unary operator (line 284)
    result_not__39054 = python_operator(stypy.reporting.localization.Localization(__file__, 284, 23), 'not', exists_call_result_39053)
    
    # Testing the type of an if condition (line 284)
    if_condition_39055 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 284, 20), result_not__39054)
    # Assigning a type to the variable 'if_condition_39055' (line 284)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 20), 'if_condition_39055', if_condition_39055)
    # SSA begins for if statement (line 284)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 285)
    # Processing the call arguments (line 285)
    str_39057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 285, 30), 'str', 'non-existing path in %r: %r')
    
    # Obtaining an instance of the builtin type 'tuple' (line 286)
    tuple_39058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 286)
    # Adding element type (line 286)
    # Getting the type of 'local_path' (line 286)
    local_path_39059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 33), 'local_path', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 286, 33), tuple_39058, local_path_39059)
    # Adding element type (line 286)
    # Getting the type of 'n' (line 286)
    n_39060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 45), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 286, 33), tuple_39058, n_39060)
    
    # Applying the binary operator '%' (line 285)
    result_mod_39061 = python_operator(stypy.reporting.localization.Localization(__file__, 285, 30), '%', str_39057, tuple_39058)
    
    # Processing the call keyword arguments (line 285)
    kwargs_39062 = {}
    # Getting the type of 'print' (line 285)
    print_39056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 24), 'print', False)
    # Calling print(args, kwargs) (line 285)
    print_call_result_39063 = invoke(stypy.reporting.localization.Localization(__file__, 285, 24), print_39056, *[result_mod_39061], **kwargs_39062)
    
    # SSA join for if statement (line 284)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 277)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 263)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 262)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to is_sequence(...): (line 288)
    # Processing the call arguments (line 288)
    # Getting the type of 'n' (line 288)
    n_39065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 25), 'n', False)
    # Processing the call keyword arguments (line 288)
    kwargs_39066 = {}
    # Getting the type of 'is_sequence' (line 288)
    is_sequence_39064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 13), 'is_sequence', False)
    # Calling is_sequence(args, kwargs) (line 288)
    is_sequence_call_result_39067 = invoke(stypy.reporting.localization.Localization(__file__, 288, 13), is_sequence_39064, *[n_39065], **kwargs_39066)
    
    # Testing the type of an if condition (line 288)
    if_condition_39068 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 288, 13), is_sequence_call_result_39067)
    # Assigning a type to the variable 'if_condition_39068' (line 288)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 13), 'if_condition_39068', if_condition_39068)
    # SSA begins for if statement (line 288)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 289)
    # Processing the call arguments (line 289)
    
    # Call to _fix_paths(...): (line 289)
    # Processing the call arguments (line 289)
    # Getting the type of 'n' (line 289)
    n_39072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 40), 'n', False)
    # Getting the type of 'local_path' (line 289)
    local_path_39073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 43), 'local_path', False)
    # Getting the type of 'include_non_existing' (line 289)
    include_non_existing_39074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 55), 'include_non_existing', False)
    # Processing the call keyword arguments (line 289)
    kwargs_39075 = {}
    # Getting the type of '_fix_paths' (line 289)
    _fix_paths_39071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 29), '_fix_paths', False)
    # Calling _fix_paths(args, kwargs) (line 289)
    _fix_paths_call_result_39076 = invoke(stypy.reporting.localization.Localization(__file__, 289, 29), _fix_paths_39071, *[n_39072, local_path_39073, include_non_existing_39074], **kwargs_39075)
    
    # Processing the call keyword arguments (line 289)
    kwargs_39077 = {}
    # Getting the type of 'new_paths' (line 289)
    new_paths_39069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 12), 'new_paths', False)
    # Obtaining the member 'extend' of a type (line 289)
    extend_39070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 12), new_paths_39069, 'extend')
    # Calling extend(args, kwargs) (line 289)
    extend_call_result_39078 = invoke(stypy.reporting.localization.Localization(__file__, 289, 12), extend_39070, *[_fix_paths_call_result_39076], **kwargs_39077)
    
    # SSA branch for the else part of an if statement (line 288)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 291)
    # Processing the call arguments (line 291)
    # Getting the type of 'n' (line 291)
    n_39081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 29), 'n', False)
    # Processing the call keyword arguments (line 291)
    kwargs_39082 = {}
    # Getting the type of 'new_paths' (line 291)
    new_paths_39079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'new_paths', False)
    # Obtaining the member 'append' of a type (line 291)
    append_39080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 12), new_paths_39079, 'append')
    # Calling append(args, kwargs) (line 291)
    append_call_result_39083 = invoke(stypy.reporting.localization.Localization(__file__, 291, 12), append_39080, *[n_39081], **kwargs_39082)
    
    # SSA join for if statement (line 288)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 262)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'new_paths' (line 292)
    new_paths_39088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 35), 'new_paths')
    comprehension_39089 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 12), new_paths_39088)
    # Assigning a type to the variable 'p' (line 292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 12), 'p', comprehension_39089)
    
    # Call to minrelpath(...): (line 292)
    # Processing the call arguments (line 292)
    # Getting the type of 'p' (line 292)
    p_39085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 23), 'p', False)
    # Processing the call keyword arguments (line 292)
    kwargs_39086 = {}
    # Getting the type of 'minrelpath' (line 292)
    minrelpath_39084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 12), 'minrelpath', False)
    # Calling minrelpath(args, kwargs) (line 292)
    minrelpath_call_result_39087 = invoke(stypy.reporting.localization.Localization(__file__, 292, 12), minrelpath_39084, *[p_39085], **kwargs_39086)
    
    list_39090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 12), list_39090, minrelpath_call_result_39087)
    # Assigning a type to the variable 'stypy_return_type' (line 292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 4), 'stypy_return_type', list_39090)
    
    # ################# End of '_fix_paths(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_fix_paths' in the type store
    # Getting the type of 'stypy_return_type' (line 257)
    stypy_return_type_39091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39091)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_fix_paths'
    return stypy_return_type_39091

# Assigning a type to the variable '_fix_paths' (line 257)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 0), '_fix_paths', _fix_paths)

@norecursion
def gpaths(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_39092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 29), 'str', '')
    # Getting the type of 'True' (line 294)
    True_39093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 54), 'True')
    defaults = [str_39092, True_39093]
    # Create a new context for function 'gpaths'
    module_type_store = module_type_store.open_function_context('gpaths', 294, 0, False)
    
    # Passed parameters checking function
    gpaths.stypy_localization = localization
    gpaths.stypy_type_of_self = None
    gpaths.stypy_type_store = module_type_store
    gpaths.stypy_function_name = 'gpaths'
    gpaths.stypy_param_names_list = ['paths', 'local_path', 'include_non_existing']
    gpaths.stypy_varargs_param_name = None
    gpaths.stypy_kwargs_param_name = None
    gpaths.stypy_call_defaults = defaults
    gpaths.stypy_call_varargs = varargs
    gpaths.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gpaths', ['paths', 'local_path', 'include_non_existing'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gpaths', localization, ['paths', 'local_path', 'include_non_existing'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gpaths(...)' code ##################

    str_39094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, (-1)), 'str', 'Apply glob to paths and prepend local_path if needed.\n    ')
    
    
    # Call to is_string(...): (line 297)
    # Processing the call arguments (line 297)
    # Getting the type of 'paths' (line 297)
    paths_39096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 17), 'paths', False)
    # Processing the call keyword arguments (line 297)
    kwargs_39097 = {}
    # Getting the type of 'is_string' (line 297)
    is_string_39095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 7), 'is_string', False)
    # Calling is_string(args, kwargs) (line 297)
    is_string_call_result_39098 = invoke(stypy.reporting.localization.Localization(__file__, 297, 7), is_string_39095, *[paths_39096], **kwargs_39097)
    
    # Testing the type of an if condition (line 297)
    if_condition_39099 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 297, 4), is_string_call_result_39098)
    # Assigning a type to the variable 'if_condition_39099' (line 297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 4), 'if_condition_39099', if_condition_39099)
    # SSA begins for if statement (line 297)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 298):
    
    # Assigning a Tuple to a Name (line 298):
    
    # Obtaining an instance of the builtin type 'tuple' (line 298)
    tuple_39100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 298)
    # Adding element type (line 298)
    # Getting the type of 'paths' (line 298)
    paths_39101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 17), 'paths')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 298, 17), tuple_39100, paths_39101)
    
    # Assigning a type to the variable 'paths' (line 298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'paths', tuple_39100)
    # SSA join for if statement (line 297)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _fix_paths(...): (line 299)
    # Processing the call arguments (line 299)
    # Getting the type of 'paths' (line 299)
    paths_39103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 22), 'paths', False)
    # Getting the type of 'local_path' (line 299)
    local_path_39104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 29), 'local_path', False)
    # Getting the type of 'include_non_existing' (line 299)
    include_non_existing_39105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 41), 'include_non_existing', False)
    # Processing the call keyword arguments (line 299)
    kwargs_39106 = {}
    # Getting the type of '_fix_paths' (line 299)
    _fix_paths_39102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 11), '_fix_paths', False)
    # Calling _fix_paths(args, kwargs) (line 299)
    _fix_paths_call_result_39107 = invoke(stypy.reporting.localization.Localization(__file__, 299, 11), _fix_paths_39102, *[paths_39103, local_path_39104, include_non_existing_39105], **kwargs_39106)
    
    # Assigning a type to the variable 'stypy_return_type' (line 299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'stypy_return_type', _fix_paths_call_result_39107)
    
    # ################# End of 'gpaths(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gpaths' in the type store
    # Getting the type of 'stypy_return_type' (line 294)
    stypy_return_type_39108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39108)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gpaths'
    return stypy_return_type_39108

# Assigning a type to the variable 'gpaths' (line 294)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 294, 0), 'gpaths', gpaths)

@norecursion
def make_temp_file(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_39109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 26), 'str', '')
    str_39110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 37), 'str', '')
    # Getting the type of 'True' (line 301)
    True_39111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 46), 'True')
    defaults = [str_39109, str_39110, True_39111]
    # Create a new context for function 'make_temp_file'
    module_type_store = module_type_store.open_function_context('make_temp_file', 301, 0, False)
    
    # Passed parameters checking function
    make_temp_file.stypy_localization = localization
    make_temp_file.stypy_type_of_self = None
    make_temp_file.stypy_type_store = module_type_store
    make_temp_file.stypy_function_name = 'make_temp_file'
    make_temp_file.stypy_param_names_list = ['suffix', 'prefix', 'text']
    make_temp_file.stypy_varargs_param_name = None
    make_temp_file.stypy_kwargs_param_name = None
    make_temp_file.stypy_call_defaults = defaults
    make_temp_file.stypy_call_varargs = varargs
    make_temp_file.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'make_temp_file', ['suffix', 'prefix', 'text'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'make_temp_file', localization, ['suffix', 'prefix', 'text'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'make_temp_file(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 302)
    str_39112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 27), 'str', 'tempdir')
    # Getting the type of '_tdata' (line 302)
    _tdata_39113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 19), '_tdata')
    
    (may_be_39114, more_types_in_union_39115) = may_not_provide_member(str_39112, _tdata_39113)

    if may_be_39114:

        if more_types_in_union_39115:
            # Runtime conditional SSA (line 302)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable '_tdata' (line 302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 4), '_tdata', remove_member_provider_from_union(_tdata_39113, 'tempdir'))
        
        # Assigning a Call to a Attribute (line 303):
        
        # Assigning a Call to a Attribute (line 303):
        
        # Call to mkdtemp(...): (line 303)
        # Processing the call keyword arguments (line 303)
        kwargs_39118 = {}
        # Getting the type of 'tempfile' (line 303)
        tempfile_39116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 25), 'tempfile', False)
        # Obtaining the member 'mkdtemp' of a type (line 303)
        mkdtemp_39117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 25), tempfile_39116, 'mkdtemp')
        # Calling mkdtemp(args, kwargs) (line 303)
        mkdtemp_call_result_39119 = invoke(stypy.reporting.localization.Localization(__file__, 303, 25), mkdtemp_39117, *[], **kwargs_39118)
        
        # Getting the type of '_tdata' (line 303)
        _tdata_39120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 8), '_tdata')
        # Setting the type of the member 'tempdir' of a type (line 303)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 8), _tdata_39120, 'tempdir', mkdtemp_call_result_39119)
        
        # Call to append(...): (line 304)
        # Processing the call arguments (line 304)
        # Getting the type of '_tdata' (line 304)
        _tdata_39123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 24), '_tdata', False)
        # Obtaining the member 'tempdir' of a type (line 304)
        tempdir_39124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 24), _tdata_39123, 'tempdir')
        # Processing the call keyword arguments (line 304)
        kwargs_39125 = {}
        # Getting the type of '_tmpdirs' (line 304)
        _tmpdirs_39121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 8), '_tmpdirs', False)
        # Obtaining the member 'append' of a type (line 304)
        append_39122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 8), _tmpdirs_39121, 'append')
        # Calling append(args, kwargs) (line 304)
        append_call_result_39126 = invoke(stypy.reporting.localization.Localization(__file__, 304, 8), append_39122, *[tempdir_39124], **kwargs_39125)
        

        if more_types_in_union_39115:
            # SSA join for if statement (line 302)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 305):
    
    # Assigning a Call to a Name:
    
    # Call to mkstemp(...): (line 305)
    # Processing the call keyword arguments (line 305)
    # Getting the type of 'suffix' (line 305)
    suffix_39129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 40), 'suffix', False)
    keyword_39130 = suffix_39129
    # Getting the type of 'prefix' (line 306)
    prefix_39131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 40), 'prefix', False)
    keyword_39132 = prefix_39131
    # Getting the type of '_tdata' (line 307)
    _tdata_39133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 37), '_tdata', False)
    # Obtaining the member 'tempdir' of a type (line 307)
    tempdir_39134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 37), _tdata_39133, 'tempdir')
    keyword_39135 = tempdir_39134
    # Getting the type of 'text' (line 308)
    text_39136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 38), 'text', False)
    keyword_39137 = text_39136
    kwargs_39138 = {'text': keyword_39137, 'prefix': keyword_39132, 'suffix': keyword_39130, 'dir': keyword_39135}
    # Getting the type of 'tempfile' (line 305)
    tempfile_39127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 16), 'tempfile', False)
    # Obtaining the member 'mkstemp' of a type (line 305)
    mkstemp_39128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 16), tempfile_39127, 'mkstemp')
    # Calling mkstemp(args, kwargs) (line 305)
    mkstemp_call_result_39139 = invoke(stypy.reporting.localization.Localization(__file__, 305, 16), mkstemp_39128, *[], **kwargs_39138)
    
    # Assigning a type to the variable 'call_assignment_38384' (line 305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'call_assignment_38384', mkstemp_call_result_39139)
    
    # Assigning a Call to a Name (line 305):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_39142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, 4), 'int')
    # Processing the call keyword arguments
    kwargs_39143 = {}
    # Getting the type of 'call_assignment_38384' (line 305)
    call_assignment_38384_39140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'call_assignment_38384', False)
    # Obtaining the member '__getitem__' of a type (line 305)
    getitem___39141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 4), call_assignment_38384_39140, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_39144 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___39141, *[int_39142], **kwargs_39143)
    
    # Assigning a type to the variable 'call_assignment_38385' (line 305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'call_assignment_38385', getitem___call_result_39144)
    
    # Assigning a Name to a Name (line 305):
    # Getting the type of 'call_assignment_38385' (line 305)
    call_assignment_38385_39145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'call_assignment_38385')
    # Assigning a type to the variable 'fid' (line 305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'fid', call_assignment_38385_39145)
    
    # Assigning a Call to a Name (line 305):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_39148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, 4), 'int')
    # Processing the call keyword arguments
    kwargs_39149 = {}
    # Getting the type of 'call_assignment_38384' (line 305)
    call_assignment_38384_39146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'call_assignment_38384', False)
    # Obtaining the member '__getitem__' of a type (line 305)
    getitem___39147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 4), call_assignment_38384_39146, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_39150 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___39147, *[int_39148], **kwargs_39149)
    
    # Assigning a type to the variable 'call_assignment_38386' (line 305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'call_assignment_38386', getitem___call_result_39150)
    
    # Assigning a Name to a Name (line 305):
    # Getting the type of 'call_assignment_38386' (line 305)
    call_assignment_38386_39151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'call_assignment_38386')
    # Assigning a type to the variable 'name' (line 305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 9), 'name', call_assignment_38386_39151)
    
    # Assigning a Call to a Name (line 309):
    
    # Assigning a Call to a Name (line 309):
    
    # Call to fdopen(...): (line 309)
    # Processing the call arguments (line 309)
    # Getting the type of 'fid' (line 309)
    fid_39154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 19), 'fid', False)
    str_39155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 309, 24), 'str', 'w')
    # Processing the call keyword arguments (line 309)
    kwargs_39156 = {}
    # Getting the type of 'os' (line 309)
    os_39152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 9), 'os', False)
    # Obtaining the member 'fdopen' of a type (line 309)
    fdopen_39153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 9), os_39152, 'fdopen')
    # Calling fdopen(args, kwargs) (line 309)
    fdopen_call_result_39157 = invoke(stypy.reporting.localization.Localization(__file__, 309, 9), fdopen_39153, *[fid_39154, str_39155], **kwargs_39156)
    
    # Assigning a type to the variable 'fo' (line 309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 4), 'fo', fdopen_call_result_39157)
    
    # Obtaining an instance of the builtin type 'tuple' (line 310)
    tuple_39158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 310)
    # Adding element type (line 310)
    # Getting the type of 'fo' (line 310)
    fo_39159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 11), 'fo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 310, 11), tuple_39158, fo_39159)
    # Adding element type (line 310)
    # Getting the type of 'name' (line 310)
    name_39160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 15), 'name')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 310, 11), tuple_39158, name_39160)
    
    # Assigning a type to the variable 'stypy_return_type' (line 310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 4), 'stypy_return_type', tuple_39158)
    
    # ################# End of 'make_temp_file(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'make_temp_file' in the type store
    # Getting the type of 'stypy_return_type' (line 301)
    stypy_return_type_39161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39161)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'make_temp_file'
    return stypy_return_type_39161

# Assigning a type to the variable 'make_temp_file' (line 301)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 0), 'make_temp_file', make_temp_file)

@norecursion
def terminal_has_colors(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'terminal_has_colors'
    module_type_store = module_type_store.open_function_context('terminal_has_colors', 314, 0, False)
    
    # Passed parameters checking function
    terminal_has_colors.stypy_localization = localization
    terminal_has_colors.stypy_type_of_self = None
    terminal_has_colors.stypy_type_store = module_type_store
    terminal_has_colors.stypy_function_name = 'terminal_has_colors'
    terminal_has_colors.stypy_param_names_list = []
    terminal_has_colors.stypy_varargs_param_name = None
    terminal_has_colors.stypy_kwargs_param_name = None
    terminal_has_colors.stypy_call_defaults = defaults
    terminal_has_colors.stypy_call_varargs = varargs
    terminal_has_colors.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'terminal_has_colors', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'terminal_has_colors', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'terminal_has_colors(...)' code ##################

    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'sys' (line 315)
    sys_39162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 7), 'sys')
    # Obtaining the member 'platform' of a type (line 315)
    platform_39163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 7), sys_39162, 'platform')
    str_39164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 21), 'str', 'cygwin')
    # Applying the binary operator '==' (line 315)
    result_eq_39165 = python_operator(stypy.reporting.localization.Localization(__file__, 315, 7), '==', platform_39163, str_39164)
    
    
    str_39166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 34), 'str', 'USE_COLOR')
    # Getting the type of 'os' (line 315)
    os_39167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 53), 'os')
    # Obtaining the member 'environ' of a type (line 315)
    environ_39168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 53), os_39167, 'environ')
    # Applying the binary operator 'notin' (line 315)
    result_contains_39169 = python_operator(stypy.reporting.localization.Localization(__file__, 315, 34), 'notin', str_39166, environ_39168)
    
    # Applying the binary operator 'and' (line 315)
    result_and_keyword_39170 = python_operator(stypy.reporting.localization.Localization(__file__, 315, 7), 'and', result_eq_39165, result_contains_39169)
    
    # Testing the type of an if condition (line 315)
    if_condition_39171 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 315, 4), result_and_keyword_39170)
    # Assigning a type to the variable 'if_condition_39171' (line 315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 4), 'if_condition_39171', if_condition_39171)
    # SSA begins for if statement (line 315)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_39172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 324, 15), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 8), 'stypy_return_type', int_39172)
    # SSA join for if statement (line 315)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to hasattr(...): (line 325)
    # Processing the call arguments (line 325)
    # Getting the type of 'sys' (line 325)
    sys_39174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 15), 'sys', False)
    # Obtaining the member 'stdout' of a type (line 325)
    stdout_39175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 15), sys_39174, 'stdout')
    str_39176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 325, 27), 'str', 'isatty')
    # Processing the call keyword arguments (line 325)
    kwargs_39177 = {}
    # Getting the type of 'hasattr' (line 325)
    hasattr_39173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 7), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 325)
    hasattr_call_result_39178 = invoke(stypy.reporting.localization.Localization(__file__, 325, 7), hasattr_39173, *[stdout_39175, str_39176], **kwargs_39177)
    
    
    # Call to isatty(...): (line 325)
    # Processing the call keyword arguments (line 325)
    kwargs_39182 = {}
    # Getting the type of 'sys' (line 325)
    sys_39179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 41), 'sys', False)
    # Obtaining the member 'stdout' of a type (line 325)
    stdout_39180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 41), sys_39179, 'stdout')
    # Obtaining the member 'isatty' of a type (line 325)
    isatty_39181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 41), stdout_39180, 'isatty')
    # Calling isatty(args, kwargs) (line 325)
    isatty_call_result_39183 = invoke(stypy.reporting.localization.Localization(__file__, 325, 41), isatty_39181, *[], **kwargs_39182)
    
    # Applying the binary operator 'and' (line 325)
    result_and_keyword_39184 = python_operator(stypy.reporting.localization.Localization(__file__, 325, 7), 'and', hasattr_call_result_39178, isatty_call_result_39183)
    
    # Testing the type of an if condition (line 325)
    if_condition_39185 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 325, 4), result_and_keyword_39184)
    # Assigning a type to the variable 'if_condition_39185' (line 325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 4), 'if_condition_39185', if_condition_39185)
    # SSA begins for if statement (line 325)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 326)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 327, 12))
    
    # 'import curses' statement (line 327)
    import curses

    import_module(stypy.reporting.localization.Localization(__file__, 327, 12), 'curses', curses, module_type_store)
    
    
    # Call to setupterm(...): (line 328)
    # Processing the call keyword arguments (line 328)
    kwargs_39188 = {}
    # Getting the type of 'curses' (line 328)
    curses_39186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 12), 'curses', False)
    # Obtaining the member 'setupterm' of a type (line 328)
    setupterm_39187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 12), curses_39186, 'setupterm')
    # Calling setupterm(args, kwargs) (line 328)
    setupterm_call_result_39189 = invoke(stypy.reporting.localization.Localization(__file__, 328, 12), setupterm_39187, *[], **kwargs_39188)
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to tigetnum(...): (line 329)
    # Processing the call arguments (line 329)
    str_39192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 32), 'str', 'colors')
    # Processing the call keyword arguments (line 329)
    kwargs_39193 = {}
    # Getting the type of 'curses' (line 329)
    curses_39190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 16), 'curses', False)
    # Obtaining the member 'tigetnum' of a type (line 329)
    tigetnum_39191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 16), curses_39190, 'tigetnum')
    # Calling tigetnum(args, kwargs) (line 329)
    tigetnum_call_result_39194 = invoke(stypy.reporting.localization.Localization(__file__, 329, 16), tigetnum_39191, *[str_39192], **kwargs_39193)
    
    int_39195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 45), 'int')
    # Applying the binary operator '>=' (line 329)
    result_ge_39196 = python_operator(stypy.reporting.localization.Localization(__file__, 329, 16), '>=', tigetnum_call_result_39194, int_39195)
    
    
    
    # Call to tigetnum(...): (line 330)
    # Processing the call arguments (line 330)
    str_39199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 36), 'str', 'pairs')
    # Processing the call keyword arguments (line 330)
    kwargs_39200 = {}
    # Getting the type of 'curses' (line 330)
    curses_39197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 20), 'curses', False)
    # Obtaining the member 'tigetnum' of a type (line 330)
    tigetnum_39198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 20), curses_39197, 'tigetnum')
    # Calling tigetnum(args, kwargs) (line 330)
    tigetnum_call_result_39201 = invoke(stypy.reporting.localization.Localization(__file__, 330, 20), tigetnum_39198, *[str_39199], **kwargs_39200)
    
    int_39202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 48), 'int')
    # Applying the binary operator '>=' (line 330)
    result_ge_39203 = python_operator(stypy.reporting.localization.Localization(__file__, 330, 20), '>=', tigetnum_call_result_39201, int_39202)
    
    # Applying the binary operator 'and' (line 329)
    result_and_keyword_39204 = python_operator(stypy.reporting.localization.Localization(__file__, 329, 16), 'and', result_ge_39196, result_ge_39203)
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    
    
    # Call to tigetstr(...): (line 331)
    # Processing the call arguments (line 331)
    str_39207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 38), 'str', 'setf')
    # Processing the call keyword arguments (line 331)
    kwargs_39208 = {}
    # Getting the type of 'curses' (line 331)
    curses_39205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 22), 'curses', False)
    # Obtaining the member 'tigetstr' of a type (line 331)
    tigetstr_39206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 22), curses_39205, 'tigetstr')
    # Calling tigetstr(args, kwargs) (line 331)
    tigetstr_call_result_39209 = invoke(stypy.reporting.localization.Localization(__file__, 331, 22), tigetstr_39206, *[str_39207], **kwargs_39208)
    
    # Getting the type of 'None' (line 331)
    None_39210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 53), 'None')
    # Applying the binary operator 'isnot' (line 331)
    result_is_not_39211 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 22), 'isnot', tigetstr_call_result_39209, None_39210)
    
    
    
    # Call to tigetstr(...): (line 332)
    # Processing the call arguments (line 332)
    str_39214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 42), 'str', 'setb')
    # Processing the call keyword arguments (line 332)
    kwargs_39215 = {}
    # Getting the type of 'curses' (line 332)
    curses_39212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 26), 'curses', False)
    # Obtaining the member 'tigetstr' of a type (line 332)
    tigetstr_39213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 26), curses_39212, 'tigetstr')
    # Calling tigetstr(args, kwargs) (line 332)
    tigetstr_call_result_39216 = invoke(stypy.reporting.localization.Localization(__file__, 332, 26), tigetstr_39213, *[str_39214], **kwargs_39215)
    
    # Getting the type of 'None' (line 332)
    None_39217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 57), 'None')
    # Applying the binary operator 'isnot' (line 332)
    result_is_not_39218 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 26), 'isnot', tigetstr_call_result_39216, None_39217)
    
    # Applying the binary operator 'and' (line 331)
    result_and_keyword_39219 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 22), 'and', result_is_not_39211, result_is_not_39218)
    
    
    # Evaluating a boolean operation
    
    
    # Call to tigetstr(...): (line 333)
    # Processing the call arguments (line 333)
    str_39222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 41), 'str', 'setaf')
    # Processing the call keyword arguments (line 333)
    kwargs_39223 = {}
    # Getting the type of 'curses' (line 333)
    curses_39220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 25), 'curses', False)
    # Obtaining the member 'tigetstr' of a type (line 333)
    tigetstr_39221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 25), curses_39220, 'tigetstr')
    # Calling tigetstr(args, kwargs) (line 333)
    tigetstr_call_result_39224 = invoke(stypy.reporting.localization.Localization(__file__, 333, 25), tigetstr_39221, *[str_39222], **kwargs_39223)
    
    # Getting the type of 'None' (line 333)
    None_39225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 57), 'None')
    # Applying the binary operator 'isnot' (line 333)
    result_is_not_39226 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 25), 'isnot', tigetstr_call_result_39224, None_39225)
    
    
    
    # Call to tigetstr(...): (line 334)
    # Processing the call arguments (line 334)
    str_39229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 45), 'str', 'setab')
    # Processing the call keyword arguments (line 334)
    kwargs_39230 = {}
    # Getting the type of 'curses' (line 334)
    curses_39227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 29), 'curses', False)
    # Obtaining the member 'tigetstr' of a type (line 334)
    tigetstr_39228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 29), curses_39227, 'tigetstr')
    # Calling tigetstr(args, kwargs) (line 334)
    tigetstr_call_result_39231 = invoke(stypy.reporting.localization.Localization(__file__, 334, 29), tigetstr_39228, *[str_39229], **kwargs_39230)
    
    # Getting the type of 'None' (line 334)
    None_39232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 61), 'None')
    # Applying the binary operator 'isnot' (line 334)
    result_is_not_39233 = python_operator(stypy.reporting.localization.Localization(__file__, 334, 29), 'isnot', tigetstr_call_result_39231, None_39232)
    
    # Applying the binary operator 'and' (line 333)
    result_and_keyword_39234 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 25), 'and', result_is_not_39226, result_is_not_39233)
    
    # Applying the binary operator 'or' (line 331)
    result_or_keyword_39235 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 21), 'or', result_and_keyword_39219, result_and_keyword_39234)
    
    
    # Call to tigetstr(...): (line 335)
    # Processing the call arguments (line 335)
    str_39238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, 40), 'str', 'scp')
    # Processing the call keyword arguments (line 335)
    kwargs_39239 = {}
    # Getting the type of 'curses' (line 335)
    curses_39236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 24), 'curses', False)
    # Obtaining the member 'tigetstr' of a type (line 335)
    tigetstr_39237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 24), curses_39236, 'tigetstr')
    # Calling tigetstr(args, kwargs) (line 335)
    tigetstr_call_result_39240 = invoke(stypy.reporting.localization.Localization(__file__, 335, 24), tigetstr_39237, *[str_39238], **kwargs_39239)
    
    # Getting the type of 'None' (line 335)
    None_39241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 54), 'None')
    # Applying the binary operator 'isnot' (line 335)
    result_is_not_39242 = python_operator(stypy.reporting.localization.Localization(__file__, 335, 24), 'isnot', tigetstr_call_result_39240, None_39241)
    
    # Applying the binary operator 'or' (line 331)
    result_or_keyword_39243 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 21), 'or', result_or_keyword_39235, result_is_not_39242)
    
    # Applying the binary operator 'and' (line 329)
    result_and_keyword_39244 = python_operator(stypy.reporting.localization.Localization(__file__, 329, 16), 'and', result_and_keyword_39204, result_or_keyword_39243)
    
    # Testing the type of an if condition (line 329)
    if_condition_39245 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 329, 12), result_and_keyword_39244)
    # Assigning a type to the variable 'if_condition_39245' (line 329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 12), 'if_condition_39245', if_condition_39245)
    # SSA begins for if statement (line 329)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_39246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 23), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 16), 'stypy_return_type', int_39246)
    # SSA join for if statement (line 329)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 326)
    # SSA branch for the except 'Exception' branch of a try statement (line 326)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 326)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 325)
    module_type_store = module_type_store.join_ssa_context()
    
    int_39247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, 11), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 4), 'stypy_return_type', int_39247)
    
    # ################# End of 'terminal_has_colors(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'terminal_has_colors' in the type store
    # Getting the type of 'stypy_return_type' (line 314)
    stypy_return_type_39248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39248)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'terminal_has_colors'
    return stypy_return_type_39248

# Assigning a type to the variable 'terminal_has_colors' (line 314)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 0), 'terminal_has_colors', terminal_has_colors)


# Call to terminal_has_colors(...): (line 341)
# Processing the call keyword arguments (line 341)
kwargs_39250 = {}
# Getting the type of 'terminal_has_colors' (line 341)
terminal_has_colors_39249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 3), 'terminal_has_colors', False)
# Calling terminal_has_colors(args, kwargs) (line 341)
terminal_has_colors_call_result_39251 = invoke(stypy.reporting.localization.Localization(__file__, 341, 3), terminal_has_colors_39249, *[], **kwargs_39250)

# Testing the type of an if condition (line 341)
if_condition_39252 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 341, 0), terminal_has_colors_call_result_39251)
# Assigning a type to the variable 'if_condition_39252' (line 341)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 0), 'if_condition_39252', if_condition_39252)
# SSA begins for if statement (line 341)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Call to a Name (line 342):

# Assigning a Call to a Name (line 342):

# Call to dict(...): (line 342)
# Processing the call keyword arguments (line 342)
int_39254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 31), 'int')
keyword_39255 = int_39254
int_39256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 38), 'int')
keyword_39257 = int_39256
int_39258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 47), 'int')
keyword_39259 = int_39258
int_39260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 57), 'int')
keyword_39261 = int_39260
int_39262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 30), 'int')
keyword_39263 = int_39262
int_39264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 41), 'int')
keyword_39265 = int_39264
int_39266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 49), 'int')
keyword_39267 = int_39266
int_39268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 58), 'int')
keyword_39269 = int_39268
int_39270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 69), 'int')
keyword_39271 = int_39270
kwargs_39272 = {'blue': keyword_39263, 'default': keyword_39271, 'yellow': keyword_39261, 'green': keyword_39259, 'cyan': keyword_39267, 'black': keyword_39255, 'magenta': keyword_39265, 'white': keyword_39269, 'red': keyword_39257}
# Getting the type of 'dict' (line 342)
dict_39253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 20), 'dict', False)
# Calling dict(args, kwargs) (line 342)
dict_call_result_39273 = invoke(stypy.reporting.localization.Localization(__file__, 342, 20), dict_39253, *[], **kwargs_39272)

# Assigning a type to the variable '_colour_codes' (line 342)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 4), '_colour_codes', dict_call_result_39273)

@norecursion
def colour_text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 344)
    None_39274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 26), 'None')
    # Getting the type of 'None' (line 344)
    None_39275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 35), 'None')
    # Getting the type of 'False' (line 344)
    False_39276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 46), 'False')
    defaults = [None_39274, None_39275, False_39276]
    # Create a new context for function 'colour_text'
    module_type_store = module_type_store.open_function_context('colour_text', 344, 4, False)
    
    # Passed parameters checking function
    colour_text.stypy_localization = localization
    colour_text.stypy_type_of_self = None
    colour_text.stypy_type_store = module_type_store
    colour_text.stypy_function_name = 'colour_text'
    colour_text.stypy_param_names_list = ['s', 'fg', 'bg', 'bold']
    colour_text.stypy_varargs_param_name = None
    colour_text.stypy_kwargs_param_name = None
    colour_text.stypy_call_defaults = defaults
    colour_text.stypy_call_varargs = varargs
    colour_text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'colour_text', ['s', 'fg', 'bg', 'bold'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'colour_text', localization, ['s', 'fg', 'bg', 'bold'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'colour_text(...)' code ##################

    
    # Assigning a List to a Name (line 345):
    
    # Assigning a List to a Name (line 345):
    
    # Obtaining an instance of the builtin type 'list' (line 345)
    list_39277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 345, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 345)
    
    # Assigning a type to the variable 'seq' (line 345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'seq', list_39277)
    
    # Getting the type of 'bold' (line 346)
    bold_39278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 11), 'bold')
    # Testing the type of an if condition (line 346)
    if_condition_39279 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 346, 8), bold_39278)
    # Assigning a type to the variable 'if_condition_39279' (line 346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 8), 'if_condition_39279', if_condition_39279)
    # SSA begins for if statement (line 346)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 347)
    # Processing the call arguments (line 347)
    str_39282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, 23), 'str', '1')
    # Processing the call keyword arguments (line 347)
    kwargs_39283 = {}
    # Getting the type of 'seq' (line 347)
    seq_39280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 12), 'seq', False)
    # Obtaining the member 'append' of a type (line 347)
    append_39281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 12), seq_39280, 'append')
    # Calling append(args, kwargs) (line 347)
    append_call_result_39284 = invoke(stypy.reporting.localization.Localization(__file__, 347, 12), append_39281, *[str_39282], **kwargs_39283)
    
    # SSA join for if statement (line 346)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'fg' (line 348)
    fg_39285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 11), 'fg')
    # Testing the type of an if condition (line 348)
    if_condition_39286 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 348, 8), fg_39285)
    # Assigning a type to the variable 'if_condition_39286' (line 348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 8), 'if_condition_39286', if_condition_39286)
    # SSA begins for if statement (line 348)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 349):
    
    # Assigning a BinOp to a Name (line 349):
    int_39287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 21), 'int')
    
    # Call to get(...): (line 349)
    # Processing the call arguments (line 349)
    
    # Call to lower(...): (line 349)
    # Processing the call keyword arguments (line 349)
    kwargs_39292 = {}
    # Getting the type of 'fg' (line 349)
    fg_39290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 44), 'fg', False)
    # Obtaining the member 'lower' of a type (line 349)
    lower_39291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 44), fg_39290, 'lower')
    # Calling lower(args, kwargs) (line 349)
    lower_call_result_39293 = invoke(stypy.reporting.localization.Localization(__file__, 349, 44), lower_39291, *[], **kwargs_39292)
    
    int_39294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 56), 'int')
    # Processing the call keyword arguments (line 349)
    kwargs_39295 = {}
    # Getting the type of '_colour_codes' (line 349)
    _colour_codes_39288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 26), '_colour_codes', False)
    # Obtaining the member 'get' of a type (line 349)
    get_39289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 26), _colour_codes_39288, 'get')
    # Calling get(args, kwargs) (line 349)
    get_call_result_39296 = invoke(stypy.reporting.localization.Localization(__file__, 349, 26), get_39289, *[lower_call_result_39293, int_39294], **kwargs_39295)
    
    # Applying the binary operator '+' (line 349)
    result_add_39297 = python_operator(stypy.reporting.localization.Localization(__file__, 349, 21), '+', int_39287, get_call_result_39296)
    
    # Assigning a type to the variable 'fgcode' (line 349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 12), 'fgcode', result_add_39297)
    
    # Call to append(...): (line 350)
    # Processing the call arguments (line 350)
    
    # Call to str(...): (line 350)
    # Processing the call arguments (line 350)
    # Getting the type of 'fgcode' (line 350)
    fgcode_39301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 27), 'fgcode', False)
    # Processing the call keyword arguments (line 350)
    kwargs_39302 = {}
    # Getting the type of 'str' (line 350)
    str_39300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 23), 'str', False)
    # Calling str(args, kwargs) (line 350)
    str_call_result_39303 = invoke(stypy.reporting.localization.Localization(__file__, 350, 23), str_39300, *[fgcode_39301], **kwargs_39302)
    
    # Processing the call keyword arguments (line 350)
    kwargs_39304 = {}
    # Getting the type of 'seq' (line 350)
    seq_39298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 12), 'seq', False)
    # Obtaining the member 'append' of a type (line 350)
    append_39299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 12), seq_39298, 'append')
    # Calling append(args, kwargs) (line 350)
    append_call_result_39305 = invoke(stypy.reporting.localization.Localization(__file__, 350, 12), append_39299, *[str_call_result_39303], **kwargs_39304)
    
    # SSA join for if statement (line 348)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'bg' (line 351)
    bg_39306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 11), 'bg')
    # Testing the type of an if condition (line 351)
    if_condition_39307 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 351, 8), bg_39306)
    # Assigning a type to the variable 'if_condition_39307' (line 351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'if_condition_39307', if_condition_39307)
    # SSA begins for if statement (line 351)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 352):
    
    # Assigning a BinOp to a Name (line 352):
    int_39308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 21), 'int')
    
    # Call to get(...): (line 352)
    # Processing the call arguments (line 352)
    
    # Call to lower(...): (line 352)
    # Processing the call keyword arguments (line 352)
    kwargs_39313 = {}
    # Getting the type of 'fg' (line 352)
    fg_39311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 44), 'fg', False)
    # Obtaining the member 'lower' of a type (line 352)
    lower_39312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 44), fg_39311, 'lower')
    # Calling lower(args, kwargs) (line 352)
    lower_call_result_39314 = invoke(stypy.reporting.localization.Localization(__file__, 352, 44), lower_39312, *[], **kwargs_39313)
    
    int_39315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 56), 'int')
    # Processing the call keyword arguments (line 352)
    kwargs_39316 = {}
    # Getting the type of '_colour_codes' (line 352)
    _colour_codes_39309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 26), '_colour_codes', False)
    # Obtaining the member 'get' of a type (line 352)
    get_39310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 26), _colour_codes_39309, 'get')
    # Calling get(args, kwargs) (line 352)
    get_call_result_39317 = invoke(stypy.reporting.localization.Localization(__file__, 352, 26), get_39310, *[lower_call_result_39314, int_39315], **kwargs_39316)
    
    # Applying the binary operator '+' (line 352)
    result_add_39318 = python_operator(stypy.reporting.localization.Localization(__file__, 352, 21), '+', int_39308, get_call_result_39317)
    
    # Assigning a type to the variable 'bgcode' (line 352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 12), 'bgcode', result_add_39318)
    
    # Call to append(...): (line 353)
    # Processing the call arguments (line 353)
    
    # Call to str(...): (line 353)
    # Processing the call arguments (line 353)
    # Getting the type of 'bgcode' (line 353)
    bgcode_39322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 27), 'bgcode', False)
    # Processing the call keyword arguments (line 353)
    kwargs_39323 = {}
    # Getting the type of 'str' (line 353)
    str_39321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 23), 'str', False)
    # Calling str(args, kwargs) (line 353)
    str_call_result_39324 = invoke(stypy.reporting.localization.Localization(__file__, 353, 23), str_39321, *[bgcode_39322], **kwargs_39323)
    
    # Processing the call keyword arguments (line 353)
    kwargs_39325 = {}
    # Getting the type of 'seq' (line 353)
    seq_39319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 12), 'seq', False)
    # Obtaining the member 'append' of a type (line 353)
    append_39320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 12), seq_39319, 'append')
    # Calling append(args, kwargs) (line 353)
    append_call_result_39326 = invoke(stypy.reporting.localization.Localization(__file__, 353, 12), append_39320, *[str_call_result_39324], **kwargs_39325)
    
    # SSA join for if statement (line 351)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'seq' (line 354)
    seq_39327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 11), 'seq')
    # Testing the type of an if condition (line 354)
    if_condition_39328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 354, 8), seq_39327)
    # Assigning a type to the variable 'if_condition_39328' (line 354)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'if_condition_39328', if_condition_39328)
    # SSA begins for if statement (line 354)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    str_39329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 19), 'str', '\x1b[%sm%s\x1b[0m')
    
    # Obtaining an instance of the builtin type 'tuple' (line 355)
    tuple_39330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 355)
    # Adding element type (line 355)
    
    # Call to join(...): (line 355)
    # Processing the call arguments (line 355)
    # Getting the type of 'seq' (line 355)
    seq_39333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 51), 'seq', False)
    # Processing the call keyword arguments (line 355)
    kwargs_39334 = {}
    str_39331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 42), 'str', ';')
    # Obtaining the member 'join' of a type (line 355)
    join_39332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 42), str_39331, 'join')
    # Calling join(args, kwargs) (line 355)
    join_call_result_39335 = invoke(stypy.reporting.localization.Localization(__file__, 355, 42), join_39332, *[seq_39333], **kwargs_39334)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 355, 42), tuple_39330, join_call_result_39335)
    # Adding element type (line 355)
    # Getting the type of 's' (line 355)
    s_39336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 57), 's')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 355, 42), tuple_39330, s_39336)
    
    # Applying the binary operator '%' (line 355)
    result_mod_39337 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 19), '%', str_39329, tuple_39330)
    
    # Assigning a type to the variable 'stypy_return_type' (line 355)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 12), 'stypy_return_type', result_mod_39337)
    # SSA branch for the else part of an if statement (line 354)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 's' (line 357)
    s_39338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 19), 's')
    # Assigning a type to the variable 'stypy_return_type' (line 357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 12), 'stypy_return_type', s_39338)
    # SSA join for if statement (line 354)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'colour_text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'colour_text' in the type store
    # Getting the type of 'stypy_return_type' (line 344)
    stypy_return_type_39339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 4), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39339)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'colour_text'
    return stypy_return_type_39339

# Assigning a type to the variable 'colour_text' (line 344)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 4), 'colour_text', colour_text)
# SSA branch for the else part of an if statement (line 341)
module_type_store.open_ssa_branch('else')

@norecursion
def colour_text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 359)
    None_39340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 26), 'None')
    # Getting the type of 'None' (line 359)
    None_39341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 35), 'None')
    defaults = [None_39340, None_39341]
    # Create a new context for function 'colour_text'
    module_type_store = module_type_store.open_function_context('colour_text', 359, 4, False)
    
    # Passed parameters checking function
    colour_text.stypy_localization = localization
    colour_text.stypy_type_of_self = None
    colour_text.stypy_type_store = module_type_store
    colour_text.stypy_function_name = 'colour_text'
    colour_text.stypy_param_names_list = ['s', 'fg', 'bg']
    colour_text.stypy_varargs_param_name = None
    colour_text.stypy_kwargs_param_name = None
    colour_text.stypy_call_defaults = defaults
    colour_text.stypy_call_varargs = varargs
    colour_text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'colour_text', ['s', 'fg', 'bg'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'colour_text', localization, ['s', 'fg', 'bg'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'colour_text(...)' code ##################

    # Getting the type of 's' (line 360)
    s_39342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 15), 's')
    # Assigning a type to the variable 'stypy_return_type' (line 360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'stypy_return_type', s_39342)
    
    # ################# End of 'colour_text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'colour_text' in the type store
    # Getting the type of 'stypy_return_type' (line 359)
    stypy_return_type_39343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39343)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'colour_text'
    return stypy_return_type_39343

# Assigning a type to the variable 'colour_text' (line 359)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'colour_text', colour_text)
# SSA join for if statement (line 341)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def default_text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'default_text'
    module_type_store = module_type_store.open_function_context('default_text', 362, 0, False)
    
    # Passed parameters checking function
    default_text.stypy_localization = localization
    default_text.stypy_type_of_self = None
    default_text.stypy_type_store = module_type_store
    default_text.stypy_function_name = 'default_text'
    default_text.stypy_param_names_list = ['s']
    default_text.stypy_varargs_param_name = None
    default_text.stypy_kwargs_param_name = None
    default_text.stypy_call_defaults = defaults
    default_text.stypy_call_varargs = varargs
    default_text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'default_text', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'default_text', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'default_text(...)' code ##################

    
    # Call to colour_text(...): (line 363)
    # Processing the call arguments (line 363)
    # Getting the type of 's' (line 363)
    s_39345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 23), 's', False)
    str_39346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 363, 26), 'str', 'default')
    # Processing the call keyword arguments (line 363)
    kwargs_39347 = {}
    # Getting the type of 'colour_text' (line 363)
    colour_text_39344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 11), 'colour_text', False)
    # Calling colour_text(args, kwargs) (line 363)
    colour_text_call_result_39348 = invoke(stypy.reporting.localization.Localization(__file__, 363, 11), colour_text_39344, *[s_39345, str_39346], **kwargs_39347)
    
    # Assigning a type to the variable 'stypy_return_type' (line 363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 4), 'stypy_return_type', colour_text_call_result_39348)
    
    # ################# End of 'default_text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'default_text' in the type store
    # Getting the type of 'stypy_return_type' (line 362)
    stypy_return_type_39349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39349)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'default_text'
    return stypy_return_type_39349

# Assigning a type to the variable 'default_text' (line 362)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 0), 'default_text', default_text)

@norecursion
def red_text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'red_text'
    module_type_store = module_type_store.open_function_context('red_text', 364, 0, False)
    
    # Passed parameters checking function
    red_text.stypy_localization = localization
    red_text.stypy_type_of_self = None
    red_text.stypy_type_store = module_type_store
    red_text.stypy_function_name = 'red_text'
    red_text.stypy_param_names_list = ['s']
    red_text.stypy_varargs_param_name = None
    red_text.stypy_kwargs_param_name = None
    red_text.stypy_call_defaults = defaults
    red_text.stypy_call_varargs = varargs
    red_text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'red_text', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'red_text', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'red_text(...)' code ##################

    
    # Call to colour_text(...): (line 365)
    # Processing the call arguments (line 365)
    # Getting the type of 's' (line 365)
    s_39351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 23), 's', False)
    str_39352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 26), 'str', 'red')
    # Processing the call keyword arguments (line 365)
    kwargs_39353 = {}
    # Getting the type of 'colour_text' (line 365)
    colour_text_39350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 11), 'colour_text', False)
    # Calling colour_text(args, kwargs) (line 365)
    colour_text_call_result_39354 = invoke(stypy.reporting.localization.Localization(__file__, 365, 11), colour_text_39350, *[s_39351, str_39352], **kwargs_39353)
    
    # Assigning a type to the variable 'stypy_return_type' (line 365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 4), 'stypy_return_type', colour_text_call_result_39354)
    
    # ################# End of 'red_text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'red_text' in the type store
    # Getting the type of 'stypy_return_type' (line 364)
    stypy_return_type_39355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39355)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'red_text'
    return stypy_return_type_39355

# Assigning a type to the variable 'red_text' (line 364)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 0), 'red_text', red_text)

@norecursion
def green_text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'green_text'
    module_type_store = module_type_store.open_function_context('green_text', 366, 0, False)
    
    # Passed parameters checking function
    green_text.stypy_localization = localization
    green_text.stypy_type_of_self = None
    green_text.stypy_type_store = module_type_store
    green_text.stypy_function_name = 'green_text'
    green_text.stypy_param_names_list = ['s']
    green_text.stypy_varargs_param_name = None
    green_text.stypy_kwargs_param_name = None
    green_text.stypy_call_defaults = defaults
    green_text.stypy_call_varargs = varargs
    green_text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'green_text', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'green_text', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'green_text(...)' code ##################

    
    # Call to colour_text(...): (line 367)
    # Processing the call arguments (line 367)
    # Getting the type of 's' (line 367)
    s_39357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 23), 's', False)
    str_39358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 26), 'str', 'green')
    # Processing the call keyword arguments (line 367)
    kwargs_39359 = {}
    # Getting the type of 'colour_text' (line 367)
    colour_text_39356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 11), 'colour_text', False)
    # Calling colour_text(args, kwargs) (line 367)
    colour_text_call_result_39360 = invoke(stypy.reporting.localization.Localization(__file__, 367, 11), colour_text_39356, *[s_39357, str_39358], **kwargs_39359)
    
    # Assigning a type to the variable 'stypy_return_type' (line 367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 4), 'stypy_return_type', colour_text_call_result_39360)
    
    # ################# End of 'green_text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'green_text' in the type store
    # Getting the type of 'stypy_return_type' (line 366)
    stypy_return_type_39361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39361)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'green_text'
    return stypy_return_type_39361

# Assigning a type to the variable 'green_text' (line 366)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 0), 'green_text', green_text)

@norecursion
def yellow_text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'yellow_text'
    module_type_store = module_type_store.open_function_context('yellow_text', 368, 0, False)
    
    # Passed parameters checking function
    yellow_text.stypy_localization = localization
    yellow_text.stypy_type_of_self = None
    yellow_text.stypy_type_store = module_type_store
    yellow_text.stypy_function_name = 'yellow_text'
    yellow_text.stypy_param_names_list = ['s']
    yellow_text.stypy_varargs_param_name = None
    yellow_text.stypy_kwargs_param_name = None
    yellow_text.stypy_call_defaults = defaults
    yellow_text.stypy_call_varargs = varargs
    yellow_text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'yellow_text', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'yellow_text', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'yellow_text(...)' code ##################

    
    # Call to colour_text(...): (line 369)
    # Processing the call arguments (line 369)
    # Getting the type of 's' (line 369)
    s_39363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 23), 's', False)
    str_39364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 26), 'str', 'yellow')
    # Processing the call keyword arguments (line 369)
    kwargs_39365 = {}
    # Getting the type of 'colour_text' (line 369)
    colour_text_39362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 11), 'colour_text', False)
    # Calling colour_text(args, kwargs) (line 369)
    colour_text_call_result_39366 = invoke(stypy.reporting.localization.Localization(__file__, 369, 11), colour_text_39362, *[s_39363, str_39364], **kwargs_39365)
    
    # Assigning a type to the variable 'stypy_return_type' (line 369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 4), 'stypy_return_type', colour_text_call_result_39366)
    
    # ################# End of 'yellow_text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'yellow_text' in the type store
    # Getting the type of 'stypy_return_type' (line 368)
    stypy_return_type_39367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39367)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'yellow_text'
    return stypy_return_type_39367

# Assigning a type to the variable 'yellow_text' (line 368)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 0), 'yellow_text', yellow_text)

@norecursion
def cyan_text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'cyan_text'
    module_type_store = module_type_store.open_function_context('cyan_text', 370, 0, False)
    
    # Passed parameters checking function
    cyan_text.stypy_localization = localization
    cyan_text.stypy_type_of_self = None
    cyan_text.stypy_type_store = module_type_store
    cyan_text.stypy_function_name = 'cyan_text'
    cyan_text.stypy_param_names_list = ['s']
    cyan_text.stypy_varargs_param_name = None
    cyan_text.stypy_kwargs_param_name = None
    cyan_text.stypy_call_defaults = defaults
    cyan_text.stypy_call_varargs = varargs
    cyan_text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cyan_text', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cyan_text', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cyan_text(...)' code ##################

    
    # Call to colour_text(...): (line 371)
    # Processing the call arguments (line 371)
    # Getting the type of 's' (line 371)
    s_39369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 23), 's', False)
    str_39370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 26), 'str', 'cyan')
    # Processing the call keyword arguments (line 371)
    kwargs_39371 = {}
    # Getting the type of 'colour_text' (line 371)
    colour_text_39368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 11), 'colour_text', False)
    # Calling colour_text(args, kwargs) (line 371)
    colour_text_call_result_39372 = invoke(stypy.reporting.localization.Localization(__file__, 371, 11), colour_text_39368, *[s_39369, str_39370], **kwargs_39371)
    
    # Assigning a type to the variable 'stypy_return_type' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'stypy_return_type', colour_text_call_result_39372)
    
    # ################# End of 'cyan_text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cyan_text' in the type store
    # Getting the type of 'stypy_return_type' (line 370)
    stypy_return_type_39373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39373)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cyan_text'
    return stypy_return_type_39373

# Assigning a type to the variable 'cyan_text' (line 370)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 0), 'cyan_text', cyan_text)

@norecursion
def blue_text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'blue_text'
    module_type_store = module_type_store.open_function_context('blue_text', 372, 0, False)
    
    # Passed parameters checking function
    blue_text.stypy_localization = localization
    blue_text.stypy_type_of_self = None
    blue_text.stypy_type_store = module_type_store
    blue_text.stypy_function_name = 'blue_text'
    blue_text.stypy_param_names_list = ['s']
    blue_text.stypy_varargs_param_name = None
    blue_text.stypy_kwargs_param_name = None
    blue_text.stypy_call_defaults = defaults
    blue_text.stypy_call_varargs = varargs
    blue_text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'blue_text', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'blue_text', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'blue_text(...)' code ##################

    
    # Call to colour_text(...): (line 373)
    # Processing the call arguments (line 373)
    # Getting the type of 's' (line 373)
    s_39375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 23), 's', False)
    str_39376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 26), 'str', 'blue')
    # Processing the call keyword arguments (line 373)
    kwargs_39377 = {}
    # Getting the type of 'colour_text' (line 373)
    colour_text_39374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 11), 'colour_text', False)
    # Calling colour_text(args, kwargs) (line 373)
    colour_text_call_result_39378 = invoke(stypy.reporting.localization.Localization(__file__, 373, 11), colour_text_39374, *[s_39375, str_39376], **kwargs_39377)
    
    # Assigning a type to the variable 'stypy_return_type' (line 373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 4), 'stypy_return_type', colour_text_call_result_39378)
    
    # ################# End of 'blue_text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'blue_text' in the type store
    # Getting the type of 'stypy_return_type' (line 372)
    stypy_return_type_39379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39379)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'blue_text'
    return stypy_return_type_39379

# Assigning a type to the variable 'blue_text' (line 372)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 0), 'blue_text', blue_text)

@norecursion
def cyg2win32(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'cyg2win32'
    module_type_store = module_type_store.open_function_context('cyg2win32', 377, 0, False)
    
    # Passed parameters checking function
    cyg2win32.stypy_localization = localization
    cyg2win32.stypy_type_of_self = None
    cyg2win32.stypy_type_store = module_type_store
    cyg2win32.stypy_function_name = 'cyg2win32'
    cyg2win32.stypy_param_names_list = ['path']
    cyg2win32.stypy_varargs_param_name = None
    cyg2win32.stypy_kwargs_param_name = None
    cyg2win32.stypy_call_defaults = defaults
    cyg2win32.stypy_call_varargs = varargs
    cyg2win32.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cyg2win32', ['path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cyg2win32', localization, ['path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cyg2win32(...)' code ##################

    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'sys' (line 378)
    sys_39380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 7), 'sys')
    # Obtaining the member 'platform' of a type (line 378)
    platform_39381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 7), sys_39380, 'platform')
    str_39382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 21), 'str', 'cygwin')
    # Applying the binary operator '==' (line 378)
    result_eq_39383 = python_operator(stypy.reporting.localization.Localization(__file__, 378, 7), '==', platform_39381, str_39382)
    
    
    # Call to startswith(...): (line 378)
    # Processing the call arguments (line 378)
    str_39386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 50), 'str', '/cygdrive')
    # Processing the call keyword arguments (line 378)
    kwargs_39387 = {}
    # Getting the type of 'path' (line 378)
    path_39384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 34), 'path', False)
    # Obtaining the member 'startswith' of a type (line 378)
    startswith_39385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 34), path_39384, 'startswith')
    # Calling startswith(args, kwargs) (line 378)
    startswith_call_result_39388 = invoke(stypy.reporting.localization.Localization(__file__, 378, 34), startswith_39385, *[str_39386], **kwargs_39387)
    
    # Applying the binary operator 'and' (line 378)
    result_and_keyword_39389 = python_operator(stypy.reporting.localization.Localization(__file__, 378, 7), 'and', result_eq_39383, startswith_call_result_39388)
    
    # Testing the type of an if condition (line 378)
    if_condition_39390 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 378, 4), result_and_keyword_39389)
    # Assigning a type to the variable 'if_condition_39390' (line 378)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 4), 'if_condition_39390', if_condition_39390)
    # SSA begins for if statement (line 378)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 379):
    
    # Assigning a BinOp to a Name (line 379):
    
    # Obtaining the type of the subscript
    int_39391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 20), 'int')
    # Getting the type of 'path' (line 379)
    path_39392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 15), 'path')
    # Obtaining the member '__getitem__' of a type (line 379)
    getitem___39393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 15), path_39392, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 379)
    subscript_call_result_39394 = invoke(stypy.reporting.localization.Localization(__file__, 379, 15), getitem___39393, int_39391)
    
    str_39395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 26), 'str', ':')
    # Applying the binary operator '+' (line 379)
    result_add_39396 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 15), '+', subscript_call_result_39394, str_39395)
    
    
    # Call to normcase(...): (line 379)
    # Processing the call arguments (line 379)
    
    # Obtaining the type of the subscript
    int_39400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 54), 'int')
    slice_39401 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 379, 49), int_39400, None, None)
    # Getting the type of 'path' (line 379)
    path_39402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 49), 'path', False)
    # Obtaining the member '__getitem__' of a type (line 379)
    getitem___39403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 49), path_39402, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 379)
    subscript_call_result_39404 = invoke(stypy.reporting.localization.Localization(__file__, 379, 49), getitem___39403, slice_39401)
    
    # Processing the call keyword arguments (line 379)
    kwargs_39405 = {}
    # Getting the type of 'os' (line 379)
    os_39397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 32), 'os', False)
    # Obtaining the member 'path' of a type (line 379)
    path_39398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 32), os_39397, 'path')
    # Obtaining the member 'normcase' of a type (line 379)
    normcase_39399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 32), path_39398, 'normcase')
    # Calling normcase(args, kwargs) (line 379)
    normcase_call_result_39406 = invoke(stypy.reporting.localization.Localization(__file__, 379, 32), normcase_39399, *[subscript_call_result_39404], **kwargs_39405)
    
    # Applying the binary operator '+' (line 379)
    result_add_39407 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 30), '+', result_add_39396, normcase_call_result_39406)
    
    # Assigning a type to the variable 'path' (line 379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 8), 'path', result_add_39407)
    # SSA join for if statement (line 378)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'path' (line 380)
    path_39408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 11), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'stypy_return_type', path_39408)
    
    # ################# End of 'cyg2win32(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cyg2win32' in the type store
    # Getting the type of 'stypy_return_type' (line 377)
    stypy_return_type_39409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39409)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cyg2win32'
    return stypy_return_type_39409

# Assigning a type to the variable 'cyg2win32' (line 377)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 0), 'cyg2win32', cyg2win32)

@norecursion
def mingw32(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'mingw32'
    module_type_store = module_type_store.open_function_context('mingw32', 382, 0, False)
    
    # Passed parameters checking function
    mingw32.stypy_localization = localization
    mingw32.stypy_type_of_self = None
    mingw32.stypy_type_store = module_type_store
    mingw32.stypy_function_name = 'mingw32'
    mingw32.stypy_param_names_list = []
    mingw32.stypy_varargs_param_name = None
    mingw32.stypy_kwargs_param_name = None
    mingw32.stypy_call_defaults = defaults
    mingw32.stypy_call_varargs = varargs
    mingw32.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mingw32', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mingw32', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mingw32(...)' code ##################

    str_39410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, (-1)), 'str', 'Return true when using mingw32 environment.\n    ')
    
    
    # Getting the type of 'sys' (line 385)
    sys_39411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 7), 'sys')
    # Obtaining the member 'platform' of a type (line 385)
    platform_39412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 7), sys_39411, 'platform')
    str_39413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 21), 'str', 'win32')
    # Applying the binary operator '==' (line 385)
    result_eq_39414 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 7), '==', platform_39412, str_39413)
    
    # Testing the type of an if condition (line 385)
    if_condition_39415 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 385, 4), result_eq_39414)
    # Assigning a type to the variable 'if_condition_39415' (line 385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 4), 'if_condition_39415', if_condition_39415)
    # SSA begins for if statement (line 385)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to get(...): (line 386)
    # Processing the call arguments (line 386)
    str_39419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 26), 'str', 'OSTYPE')
    str_39420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 36), 'str', '')
    # Processing the call keyword arguments (line 386)
    kwargs_39421 = {}
    # Getting the type of 'os' (line 386)
    os_39416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 11), 'os', False)
    # Obtaining the member 'environ' of a type (line 386)
    environ_39417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 11), os_39416, 'environ')
    # Obtaining the member 'get' of a type (line 386)
    get_39418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 11), environ_39417, 'get')
    # Calling get(args, kwargs) (line 386)
    get_call_result_39422 = invoke(stypy.reporting.localization.Localization(__file__, 386, 11), get_39418, *[str_39419, str_39420], **kwargs_39421)
    
    str_39423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 41), 'str', 'msys')
    # Applying the binary operator '==' (line 386)
    result_eq_39424 = python_operator(stypy.reporting.localization.Localization(__file__, 386, 11), '==', get_call_result_39422, str_39423)
    
    # Testing the type of an if condition (line 386)
    if_condition_39425 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 386, 8), result_eq_39424)
    # Assigning a type to the variable 'if_condition_39425' (line 386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'if_condition_39425', if_condition_39425)
    # SSA begins for if statement (line 386)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 387)
    True_39426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 19), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 12), 'stypy_return_type', True_39426)
    # SSA join for if statement (line 386)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to get(...): (line 388)
    # Processing the call arguments (line 388)
    str_39430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 26), 'str', 'MSYSTEM')
    str_39431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 37), 'str', '')
    # Processing the call keyword arguments (line 388)
    kwargs_39432 = {}
    # Getting the type of 'os' (line 388)
    os_39427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 11), 'os', False)
    # Obtaining the member 'environ' of a type (line 388)
    environ_39428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 11), os_39427, 'environ')
    # Obtaining the member 'get' of a type (line 388)
    get_39429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 11), environ_39428, 'get')
    # Calling get(args, kwargs) (line 388)
    get_call_result_39433 = invoke(stypy.reporting.localization.Localization(__file__, 388, 11), get_39429, *[str_39430, str_39431], **kwargs_39432)
    
    str_39434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 42), 'str', 'MINGW32')
    # Applying the binary operator '==' (line 388)
    result_eq_39435 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 11), '==', get_call_result_39433, str_39434)
    
    # Testing the type of an if condition (line 388)
    if_condition_39436 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 388, 8), result_eq_39435)
    # Assigning a type to the variable 'if_condition_39436' (line 388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 8), 'if_condition_39436', if_condition_39436)
    # SSA begins for if statement (line 388)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 389)
    True_39437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 19), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 12), 'stypy_return_type', True_39437)
    # SSA join for if statement (line 388)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 385)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'False' (line 390)
    False_39438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 11), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 390)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 4), 'stypy_return_type', False_39438)
    
    # ################# End of 'mingw32(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mingw32' in the type store
    # Getting the type of 'stypy_return_type' (line 382)
    stypy_return_type_39439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39439)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mingw32'
    return stypy_return_type_39439

# Assigning a type to the variable 'mingw32' (line 382)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 0), 'mingw32', mingw32)

@norecursion
def msvc_runtime_library(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'msvc_runtime_library'
    module_type_store = module_type_store.open_function_context('msvc_runtime_library', 392, 0, False)
    
    # Passed parameters checking function
    msvc_runtime_library.stypy_localization = localization
    msvc_runtime_library.stypy_type_of_self = None
    msvc_runtime_library.stypy_type_store = module_type_store
    msvc_runtime_library.stypy_function_name = 'msvc_runtime_library'
    msvc_runtime_library.stypy_param_names_list = []
    msvc_runtime_library.stypy_varargs_param_name = None
    msvc_runtime_library.stypy_kwargs_param_name = None
    msvc_runtime_library.stypy_call_defaults = defaults
    msvc_runtime_library.stypy_call_varargs = varargs
    msvc_runtime_library.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'msvc_runtime_library', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'msvc_runtime_library', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'msvc_runtime_library(...)' code ##################

    str_39440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 4), 'str', 'Return name of MSVC runtime library if Python was built with MSVC >= 7')
    
    # Assigning a Call to a Name (line 394):
    
    # Assigning a Call to a Name (line 394):
    
    # Call to find(...): (line 394)
    # Processing the call arguments (line 394)
    str_39444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 31), 'str', 'MSC v.')
    # Processing the call keyword arguments (line 394)
    kwargs_39445 = {}
    # Getting the type of 'sys' (line 394)
    sys_39441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 14), 'sys', False)
    # Obtaining the member 'version' of a type (line 394)
    version_39442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 14), sys_39441, 'version')
    # Obtaining the member 'find' of a type (line 394)
    find_39443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 14), version_39442, 'find')
    # Calling find(args, kwargs) (line 394)
    find_call_result_39446 = invoke(stypy.reporting.localization.Localization(__file__, 394, 14), find_39443, *[str_39444], **kwargs_39445)
    
    # Assigning a type to the variable 'msc_pos' (line 394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 4), 'msc_pos', find_call_result_39446)
    
    
    # Getting the type of 'msc_pos' (line 395)
    msc_pos_39447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 7), 'msc_pos')
    int_39448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 18), 'int')
    # Applying the binary operator '!=' (line 395)
    result_ne_39449 = python_operator(stypy.reporting.localization.Localization(__file__, 395, 7), '!=', msc_pos_39447, int_39448)
    
    # Testing the type of an if condition (line 395)
    if_condition_39450 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 395, 4), result_ne_39449)
    # Assigning a type to the variable 'if_condition_39450' (line 395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 4), 'if_condition_39450', if_condition_39450)
    # SSA begins for if statement (line 395)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 396):
    
    # Assigning a Subscript to a Name (line 396):
    
    # Obtaining the type of the subscript
    # Getting the type of 'msc_pos' (line 396)
    msc_pos_39451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 30), 'msc_pos')
    int_39452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 38), 'int')
    # Applying the binary operator '+' (line 396)
    result_add_39453 = python_operator(stypy.reporting.localization.Localization(__file__, 396, 30), '+', msc_pos_39451, int_39452)
    
    # Getting the type of 'msc_pos' (line 396)
    msc_pos_39454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 40), 'msc_pos')
    int_39455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 48), 'int')
    # Applying the binary operator '+' (line 396)
    result_add_39456 = python_operator(stypy.reporting.localization.Localization(__file__, 396, 40), '+', msc_pos_39454, int_39455)
    
    slice_39457 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 396, 18), result_add_39453, result_add_39456, None)
    # Getting the type of 'sys' (line 396)
    sys_39458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 18), 'sys')
    # Obtaining the member 'version' of a type (line 396)
    version_39459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 18), sys_39458, 'version')
    # Obtaining the member '__getitem__' of a type (line 396)
    getitem___39460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 18), version_39459, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 396)
    subscript_call_result_39461 = invoke(stypy.reporting.localization.Localization(__file__, 396, 18), getitem___39460, slice_39457)
    
    # Assigning a type to the variable 'msc_ver' (line 396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'msc_ver', subscript_call_result_39461)
    
    # Assigning a Call to a Name (line 397):
    
    # Assigning a Call to a Name (line 397):
    
    # Call to get(...): (line 397)
    # Processing the call arguments (line 397)
    # Getting the type of 'msc_ver' (line 402)
    msc_ver_39474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 20), 'msc_ver', False)
    # Getting the type of 'None' (line 402)
    None_39475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 29), 'None', False)
    # Processing the call keyword arguments (line 397)
    kwargs_39476 = {}
    
    # Obtaining an instance of the builtin type 'dict' (line 397)
    dict_39462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 14), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 397)
    # Adding element type (key, value) (line 397)
    str_39463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 15), 'str', '1300')
    str_39464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 23), 'str', 'msvcr70')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 14), dict_39462, (str_39463, str_39464))
    # Adding element type (key, value) (line 397)
    str_39465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 15), 'str', '1310')
    str_39466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 23), 'str', 'msvcr71')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 14), dict_39462, (str_39465, str_39466))
    # Adding element type (key, value) (line 397)
    str_39467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 15), 'str', '1400')
    str_39468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 23), 'str', 'msvcr80')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 14), dict_39462, (str_39467, str_39468))
    # Adding element type (key, value) (line 397)
    str_39469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 15), 'str', '1500')
    str_39470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 23), 'str', 'msvcr90')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 14), dict_39462, (str_39469, str_39470))
    # Adding element type (key, value) (line 397)
    str_39471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 15), 'str', '1600')
    str_39472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 23), 'str', 'msvcr100')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 14), dict_39462, (str_39471, str_39472))
    
    # Obtaining the member 'get' of a type (line 397)
    get_39473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 14), dict_39462, 'get')
    # Calling get(args, kwargs) (line 397)
    get_call_result_39477 = invoke(stypy.reporting.localization.Localization(__file__, 397, 14), get_39473, *[msc_ver_39474, None_39475], **kwargs_39476)
    
    # Assigning a type to the variable 'lib' (line 397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 8), 'lib', get_call_result_39477)
    # SSA branch for the else part of an if statement (line 395)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 404):
    
    # Assigning a Name to a Name (line 404):
    # Getting the type of 'None' (line 404)
    None_39478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 14), 'None')
    # Assigning a type to the variable 'lib' (line 404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'lib', None_39478)
    # SSA join for if statement (line 395)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'lib' (line 405)
    lib_39479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 11), 'lib')
    # Assigning a type to the variable 'stypy_return_type' (line 405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 4), 'stypy_return_type', lib_39479)
    
    # ################# End of 'msvc_runtime_library(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'msvc_runtime_library' in the type store
    # Getting the type of 'stypy_return_type' (line 392)
    stypy_return_type_39480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39480)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'msvc_runtime_library'
    return stypy_return_type_39480

# Assigning a type to the variable 'msvc_runtime_library' (line 392)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 0), 'msvc_runtime_library', msvc_runtime_library)

# Assigning a Attribute to a Name (line 411):

# Assigning a Attribute to a Name (line 411):

# Call to compile(...): (line 411)
# Processing the call arguments (line 411)
str_39483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 27), 'str', '.*[.](cpp|cxx|cc)\\Z')
# Getting the type of 're' (line 411)
re_39484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 51), 're', False)
# Obtaining the member 'I' of a type (line 411)
I_39485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 51), re_39484, 'I')
# Processing the call keyword arguments (line 411)
kwargs_39486 = {}
# Getting the type of 're' (line 411)
re_39481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 16), 're', False)
# Obtaining the member 'compile' of a type (line 411)
compile_39482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 16), re_39481, 'compile')
# Calling compile(args, kwargs) (line 411)
compile_call_result_39487 = invoke(stypy.reporting.localization.Localization(__file__, 411, 16), compile_39482, *[str_39483, I_39485], **kwargs_39486)

# Obtaining the member 'match' of a type (line 411)
match_39488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 16), compile_call_result_39487, 'match')
# Assigning a type to the variable 'cxx_ext_match' (line 411)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 0), 'cxx_ext_match', match_39488)

# Assigning a Attribute to a Name (line 412):

# Assigning a Attribute to a Name (line 412):

# Call to compile(...): (line 412)
# Processing the call arguments (line 412)
str_39491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 31), 'str', '.*[.](f90|f95|f77|for|ftn|f)\\Z')
# Getting the type of 're' (line 412)
re_39492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 66), 're', False)
# Obtaining the member 'I' of a type (line 412)
I_39493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 66), re_39492, 'I')
# Processing the call keyword arguments (line 412)
kwargs_39494 = {}
# Getting the type of 're' (line 412)
re_39489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 20), 're', False)
# Obtaining the member 'compile' of a type (line 412)
compile_39490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 20), re_39489, 'compile')
# Calling compile(args, kwargs) (line 412)
compile_call_result_39495 = invoke(stypy.reporting.localization.Localization(__file__, 412, 20), compile_39490, *[str_39491, I_39493], **kwargs_39494)

# Obtaining the member 'match' of a type (line 412)
match_39496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 20), compile_call_result_39495, 'match')
# Assigning a type to the variable 'fortran_ext_match' (line 412)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 0), 'fortran_ext_match', match_39496)

# Assigning a Attribute to a Name (line 413):

# Assigning a Attribute to a Name (line 413):

# Call to compile(...): (line 413)
# Processing the call arguments (line 413)
str_39499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 27), 'str', '.*[.](f90|f95)\\Z')
# Getting the type of 're' (line 413)
re_39500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 48), 're', False)
# Obtaining the member 'I' of a type (line 413)
I_39501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 48), re_39500, 'I')
# Processing the call keyword arguments (line 413)
kwargs_39502 = {}
# Getting the type of 're' (line 413)
re_39497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 16), 're', False)
# Obtaining the member 'compile' of a type (line 413)
compile_39498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 16), re_39497, 'compile')
# Calling compile(args, kwargs) (line 413)
compile_call_result_39503 = invoke(stypy.reporting.localization.Localization(__file__, 413, 16), compile_39498, *[str_39499, I_39501], **kwargs_39502)

# Obtaining the member 'match' of a type (line 413)
match_39504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 16), compile_call_result_39503, 'match')
# Assigning a type to the variable 'f90_ext_match' (line 413)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 0), 'f90_ext_match', match_39504)

# Assigning a Attribute to a Name (line 414):

# Assigning a Attribute to a Name (line 414):

# Call to compile(...): (line 414)
# Processing the call arguments (line 414)
str_39507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 35), 'str', '\\s*module\\s*(?P<name>[\\w_]+)')
# Getting the type of 're' (line 414)
re_39508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 68), 're', False)
# Obtaining the member 'I' of a type (line 414)
I_39509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 68), re_39508, 'I')
# Processing the call keyword arguments (line 414)
kwargs_39510 = {}
# Getting the type of 're' (line 414)
re_39505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 24), 're', False)
# Obtaining the member 'compile' of a type (line 414)
compile_39506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 24), re_39505, 'compile')
# Calling compile(args, kwargs) (line 414)
compile_call_result_39511 = invoke(stypy.reporting.localization.Localization(__file__, 414, 24), compile_39506, *[str_39507, I_39509], **kwargs_39510)

# Obtaining the member 'match' of a type (line 414)
match_39512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 24), compile_call_result_39511, 'match')
# Assigning a type to the variable 'f90_module_name_match' (line 414)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 0), 'f90_module_name_match', match_39512)

@norecursion
def _get_f90_modules(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_f90_modules'
    module_type_store = module_type_store.open_function_context('_get_f90_modules', 415, 0, False)
    
    # Passed parameters checking function
    _get_f90_modules.stypy_localization = localization
    _get_f90_modules.stypy_type_of_self = None
    _get_f90_modules.stypy_type_store = module_type_store
    _get_f90_modules.stypy_function_name = '_get_f90_modules'
    _get_f90_modules.stypy_param_names_list = ['source']
    _get_f90_modules.stypy_varargs_param_name = None
    _get_f90_modules.stypy_kwargs_param_name = None
    _get_f90_modules.stypy_call_defaults = defaults
    _get_f90_modules.stypy_call_varargs = varargs
    _get_f90_modules.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_f90_modules', ['source'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_f90_modules', localization, ['source'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_f90_modules(...)' code ##################

    str_39513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, (-1)), 'str', 'Return a list of Fortran f90 module names that\n    given source file defines.\n    ')
    
    
    
    # Call to f90_ext_match(...): (line 419)
    # Processing the call arguments (line 419)
    # Getting the type of 'source' (line 419)
    source_39515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 25), 'source', False)
    # Processing the call keyword arguments (line 419)
    kwargs_39516 = {}
    # Getting the type of 'f90_ext_match' (line 419)
    f90_ext_match_39514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 11), 'f90_ext_match', False)
    # Calling f90_ext_match(args, kwargs) (line 419)
    f90_ext_match_call_result_39517 = invoke(stypy.reporting.localization.Localization(__file__, 419, 11), f90_ext_match_39514, *[source_39515], **kwargs_39516)
    
    # Applying the 'not' unary operator (line 419)
    result_not__39518 = python_operator(stypy.reporting.localization.Localization(__file__, 419, 7), 'not', f90_ext_match_call_result_39517)
    
    # Testing the type of an if condition (line 419)
    if_condition_39519 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 419, 4), result_not__39518)
    # Assigning a type to the variable 'if_condition_39519' (line 419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 4), 'if_condition_39519', if_condition_39519)
    # SSA begins for if statement (line 419)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'list' (line 420)
    list_39520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 420)
    
    # Assigning a type to the variable 'stypy_return_type' (line 420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'stypy_return_type', list_39520)
    # SSA join for if statement (line 419)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 421):
    
    # Assigning a List to a Name (line 421):
    
    # Obtaining an instance of the builtin type 'list' (line 421)
    list_39521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 421)
    
    # Assigning a type to the variable 'modules' (line 421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 4), 'modules', list_39521)
    
    # Assigning a Call to a Name (line 422):
    
    # Assigning a Call to a Name (line 422):
    
    # Call to open(...): (line 422)
    # Processing the call arguments (line 422)
    # Getting the type of 'source' (line 422)
    source_39523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 13), 'source', False)
    str_39524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, 21), 'str', 'r')
    # Processing the call keyword arguments (line 422)
    kwargs_39525 = {}
    # Getting the type of 'open' (line 422)
    open_39522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 8), 'open', False)
    # Calling open(args, kwargs) (line 422)
    open_call_result_39526 = invoke(stypy.reporting.localization.Localization(__file__, 422, 8), open_39522, *[source_39523, str_39524], **kwargs_39525)
    
    # Assigning a type to the variable 'f' (line 422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 4), 'f', open_call_result_39526)
    
    # Getting the type of 'f' (line 423)
    f_39527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 16), 'f')
    # Testing the type of a for loop iterable (line 423)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 423, 4), f_39527)
    # Getting the type of the for loop variable (line 423)
    for_loop_var_39528 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 423, 4), f_39527)
    # Assigning a type to the variable 'line' (line 423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 4), 'line', for_loop_var_39528)
    # SSA begins for a for statement (line 423)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 424):
    
    # Assigning a Call to a Name (line 424):
    
    # Call to f90_module_name_match(...): (line 424)
    # Processing the call arguments (line 424)
    # Getting the type of 'line' (line 424)
    line_39530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 34), 'line', False)
    # Processing the call keyword arguments (line 424)
    kwargs_39531 = {}
    # Getting the type of 'f90_module_name_match' (line 424)
    f90_module_name_match_39529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 12), 'f90_module_name_match', False)
    # Calling f90_module_name_match(args, kwargs) (line 424)
    f90_module_name_match_call_result_39532 = invoke(stypy.reporting.localization.Localization(__file__, 424, 12), f90_module_name_match_39529, *[line_39530], **kwargs_39531)
    
    # Assigning a type to the variable 'm' (line 424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'm', f90_module_name_match_call_result_39532)
    
    # Getting the type of 'm' (line 425)
    m_39533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 11), 'm')
    # Testing the type of an if condition (line 425)
    if_condition_39534 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 425, 8), m_39533)
    # Assigning a type to the variable 'if_condition_39534' (line 425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 8), 'if_condition_39534', if_condition_39534)
    # SSA begins for if statement (line 425)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 426):
    
    # Assigning a Call to a Name (line 426):
    
    # Call to group(...): (line 426)
    # Processing the call arguments (line 426)
    str_39537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 27), 'str', 'name')
    # Processing the call keyword arguments (line 426)
    kwargs_39538 = {}
    # Getting the type of 'm' (line 426)
    m_39535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 19), 'm', False)
    # Obtaining the member 'group' of a type (line 426)
    group_39536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 19), m_39535, 'group')
    # Calling group(args, kwargs) (line 426)
    group_call_result_39539 = invoke(stypy.reporting.localization.Localization(__file__, 426, 19), group_39536, *[str_39537], **kwargs_39538)
    
    # Assigning a type to the variable 'name' (line 426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 12), 'name', group_call_result_39539)
    
    # Call to append(...): (line 427)
    # Processing the call arguments (line 427)
    # Getting the type of 'name' (line 427)
    name_39542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 27), 'name', False)
    # Processing the call keyword arguments (line 427)
    kwargs_39543 = {}
    # Getting the type of 'modules' (line 427)
    modules_39540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 12), 'modules', False)
    # Obtaining the member 'append' of a type (line 427)
    append_39541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 12), modules_39540, 'append')
    # Calling append(args, kwargs) (line 427)
    append_call_result_39544 = invoke(stypy.reporting.localization.Localization(__file__, 427, 12), append_39541, *[name_39542], **kwargs_39543)
    
    # SSA join for if statement (line 425)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to close(...): (line 429)
    # Processing the call keyword arguments (line 429)
    kwargs_39547 = {}
    # Getting the type of 'f' (line 429)
    f_39545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 4), 'f', False)
    # Obtaining the member 'close' of a type (line 429)
    close_39546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 4), f_39545, 'close')
    # Calling close(args, kwargs) (line 429)
    close_call_result_39548 = invoke(stypy.reporting.localization.Localization(__file__, 429, 4), close_39546, *[], **kwargs_39547)
    
    # Getting the type of 'modules' (line 430)
    modules_39549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 11), 'modules')
    # Assigning a type to the variable 'stypy_return_type' (line 430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 4), 'stypy_return_type', modules_39549)
    
    # ################# End of '_get_f90_modules(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_f90_modules' in the type store
    # Getting the type of 'stypy_return_type' (line 415)
    stypy_return_type_39550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39550)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_f90_modules'
    return stypy_return_type_39550

# Assigning a type to the variable '_get_f90_modules' (line 415)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 0), '_get_f90_modules', _get_f90_modules)

@norecursion
def is_string(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_string'
    module_type_store = module_type_store.open_function_context('is_string', 432, 0, False)
    
    # Passed parameters checking function
    is_string.stypy_localization = localization
    is_string.stypy_type_of_self = None
    is_string.stypy_type_store = module_type_store
    is_string.stypy_function_name = 'is_string'
    is_string.stypy_param_names_list = ['s']
    is_string.stypy_varargs_param_name = None
    is_string.stypy_kwargs_param_name = None
    is_string.stypy_call_defaults = defaults
    is_string.stypy_call_varargs = varargs
    is_string.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_string', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_string', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_string(...)' code ##################

    
    # Call to isinstance(...): (line 433)
    # Processing the call arguments (line 433)
    # Getting the type of 's' (line 433)
    s_39552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 22), 's', False)
    # Getting the type of 'basestring' (line 433)
    basestring_39553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 25), 'basestring', False)
    # Processing the call keyword arguments (line 433)
    kwargs_39554 = {}
    # Getting the type of 'isinstance' (line 433)
    isinstance_39551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 433)
    isinstance_call_result_39555 = invoke(stypy.reporting.localization.Localization(__file__, 433, 11), isinstance_39551, *[s_39552, basestring_39553], **kwargs_39554)
    
    # Assigning a type to the variable 'stypy_return_type' (line 433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'stypy_return_type', isinstance_call_result_39555)
    
    # ################# End of 'is_string(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_string' in the type store
    # Getting the type of 'stypy_return_type' (line 432)
    stypy_return_type_39556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39556)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_string'
    return stypy_return_type_39556

# Assigning a type to the variable 'is_string' (line 432)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 0), 'is_string', is_string)

@norecursion
def all_strings(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'all_strings'
    module_type_store = module_type_store.open_function_context('all_strings', 435, 0, False)
    
    # Passed parameters checking function
    all_strings.stypy_localization = localization
    all_strings.stypy_type_of_self = None
    all_strings.stypy_type_store = module_type_store
    all_strings.stypy_function_name = 'all_strings'
    all_strings.stypy_param_names_list = ['lst']
    all_strings.stypy_varargs_param_name = None
    all_strings.stypy_kwargs_param_name = None
    all_strings.stypy_call_defaults = defaults
    all_strings.stypy_call_varargs = varargs
    all_strings.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'all_strings', ['lst'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'all_strings', localization, ['lst'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'all_strings(...)' code ##################

    str_39557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 4), 'str', 'Return True if all items in lst are string objects. ')
    
    # Getting the type of 'lst' (line 437)
    lst_39558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 16), 'lst')
    # Testing the type of a for loop iterable (line 437)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 437, 4), lst_39558)
    # Getting the type of the for loop variable (line 437)
    for_loop_var_39559 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 437, 4), lst_39558)
    # Assigning a type to the variable 'item' (line 437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 4), 'item', for_loop_var_39559)
    # SSA begins for a for statement (line 437)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to is_string(...): (line 438)
    # Processing the call arguments (line 438)
    # Getting the type of 'item' (line 438)
    item_39561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 25), 'item', False)
    # Processing the call keyword arguments (line 438)
    kwargs_39562 = {}
    # Getting the type of 'is_string' (line 438)
    is_string_39560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 15), 'is_string', False)
    # Calling is_string(args, kwargs) (line 438)
    is_string_call_result_39563 = invoke(stypy.reporting.localization.Localization(__file__, 438, 15), is_string_39560, *[item_39561], **kwargs_39562)
    
    # Applying the 'not' unary operator (line 438)
    result_not__39564 = python_operator(stypy.reporting.localization.Localization(__file__, 438, 11), 'not', is_string_call_result_39563)
    
    # Testing the type of an if condition (line 438)
    if_condition_39565 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 438, 8), result_not__39564)
    # Assigning a type to the variable 'if_condition_39565' (line 438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 8), 'if_condition_39565', if_condition_39565)
    # SSA begins for if statement (line 438)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 439)
    False_39566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 19), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 12), 'stypy_return_type', False_39566)
    # SSA join for if statement (line 438)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'True' (line 440)
    True_39567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 11), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 4), 'stypy_return_type', True_39567)
    
    # ################# End of 'all_strings(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'all_strings' in the type store
    # Getting the type of 'stypy_return_type' (line 435)
    stypy_return_type_39568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39568)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'all_strings'
    return stypy_return_type_39568

# Assigning a type to the variable 'all_strings' (line 435)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 0), 'all_strings', all_strings)

@norecursion
def is_sequence(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_sequence'
    module_type_store = module_type_store.open_function_context('is_sequence', 442, 0, False)
    
    # Passed parameters checking function
    is_sequence.stypy_localization = localization
    is_sequence.stypy_type_of_self = None
    is_sequence.stypy_type_store = module_type_store
    is_sequence.stypy_function_name = 'is_sequence'
    is_sequence.stypy_param_names_list = ['seq']
    is_sequence.stypy_varargs_param_name = None
    is_sequence.stypy_kwargs_param_name = None
    is_sequence.stypy_call_defaults = defaults
    is_sequence.stypy_call_varargs = varargs
    is_sequence.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_sequence', ['seq'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_sequence', localization, ['seq'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_sequence(...)' code ##################

    
    
    # Call to is_string(...): (line 443)
    # Processing the call arguments (line 443)
    # Getting the type of 'seq' (line 443)
    seq_39570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 17), 'seq', False)
    # Processing the call keyword arguments (line 443)
    kwargs_39571 = {}
    # Getting the type of 'is_string' (line 443)
    is_string_39569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 7), 'is_string', False)
    # Calling is_string(args, kwargs) (line 443)
    is_string_call_result_39572 = invoke(stypy.reporting.localization.Localization(__file__, 443, 7), is_string_39569, *[seq_39570], **kwargs_39571)
    
    # Testing the type of an if condition (line 443)
    if_condition_39573 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 443, 4), is_string_call_result_39572)
    # Assigning a type to the variable 'if_condition_39573' (line 443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 4), 'if_condition_39573', if_condition_39573)
    # SSA begins for if statement (line 443)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 444)
    False_39574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'stypy_return_type', False_39574)
    # SSA join for if statement (line 443)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 445)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to len(...): (line 446)
    # Processing the call arguments (line 446)
    # Getting the type of 'seq' (line 446)
    seq_39576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'seq', False)
    # Processing the call keyword arguments (line 446)
    kwargs_39577 = {}
    # Getting the type of 'len' (line 446)
    len_39575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'len', False)
    # Calling len(args, kwargs) (line 446)
    len_call_result_39578 = invoke(stypy.reporting.localization.Localization(__file__, 446, 8), len_39575, *[seq_39576], **kwargs_39577)
    
    # SSA branch for the except part of a try statement (line 445)
    # SSA branch for the except '<any exception>' branch of a try statement (line 445)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 448)
    False_39579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 8), 'stypy_return_type', False_39579)
    # SSA join for try-except statement (line 445)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'True' (line 449)
    True_39580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 11), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 4), 'stypy_return_type', True_39580)
    
    # ################# End of 'is_sequence(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_sequence' in the type store
    # Getting the type of 'stypy_return_type' (line 442)
    stypy_return_type_39581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39581)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_sequence'
    return stypy_return_type_39581

# Assigning a type to the variable 'is_sequence' (line 442)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 0), 'is_sequence', is_sequence)

@norecursion
def is_glob_pattern(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_glob_pattern'
    module_type_store = module_type_store.open_function_context('is_glob_pattern', 451, 0, False)
    
    # Passed parameters checking function
    is_glob_pattern.stypy_localization = localization
    is_glob_pattern.stypy_type_of_self = None
    is_glob_pattern.stypy_type_store = module_type_store
    is_glob_pattern.stypy_function_name = 'is_glob_pattern'
    is_glob_pattern.stypy_param_names_list = ['s']
    is_glob_pattern.stypy_varargs_param_name = None
    is_glob_pattern.stypy_kwargs_param_name = None
    is_glob_pattern.stypy_call_defaults = defaults
    is_glob_pattern.stypy_call_varargs = varargs
    is_glob_pattern.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_glob_pattern', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_glob_pattern', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_glob_pattern(...)' code ##################

    
    # Evaluating a boolean operation
    
    # Call to is_string(...): (line 452)
    # Processing the call arguments (line 452)
    # Getting the type of 's' (line 452)
    s_39583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 21), 's', False)
    # Processing the call keyword arguments (line 452)
    kwargs_39584 = {}
    # Getting the type of 'is_string' (line 452)
    is_string_39582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 11), 'is_string', False)
    # Calling is_string(args, kwargs) (line 452)
    is_string_call_result_39585 = invoke(stypy.reporting.localization.Localization(__file__, 452, 11), is_string_39582, *[s_39583], **kwargs_39584)
    
    
    # Evaluating a boolean operation
    
    str_39586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 29), 'str', '*')
    # Getting the type of 's' (line 452)
    s_39587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 36), 's')
    # Applying the binary operator 'in' (line 452)
    result_contains_39588 = python_operator(stypy.reporting.localization.Localization(__file__, 452, 29), 'in', str_39586, s_39587)
    
    
    str_39589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 41), 'str', '?')
    # Getting the type of 's' (line 452)
    s_39590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 48), 's')
    # Applying the binary operator 'is' (line 452)
    result_is__39591 = python_operator(stypy.reporting.localization.Localization(__file__, 452, 41), 'is', str_39589, s_39590)
    
    # Applying the binary operator 'or' (line 452)
    result_or_keyword_39592 = python_operator(stypy.reporting.localization.Localization(__file__, 452, 29), 'or', result_contains_39588, result_is__39591)
    
    # Applying the binary operator 'and' (line 452)
    result_and_keyword_39593 = python_operator(stypy.reporting.localization.Localization(__file__, 452, 11), 'and', is_string_call_result_39585, result_or_keyword_39592)
    
    # Assigning a type to the variable 'stypy_return_type' (line 452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 4), 'stypy_return_type', result_and_keyword_39593)
    
    # ################# End of 'is_glob_pattern(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_glob_pattern' in the type store
    # Getting the type of 'stypy_return_type' (line 451)
    stypy_return_type_39594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39594)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_glob_pattern'
    return stypy_return_type_39594

# Assigning a type to the variable 'is_glob_pattern' (line 451)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 0), 'is_glob_pattern', is_glob_pattern)

@norecursion
def as_list(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'as_list'
    module_type_store = module_type_store.open_function_context('as_list', 454, 0, False)
    
    # Passed parameters checking function
    as_list.stypy_localization = localization
    as_list.stypy_type_of_self = None
    as_list.stypy_type_store = module_type_store
    as_list.stypy_function_name = 'as_list'
    as_list.stypy_param_names_list = ['seq']
    as_list.stypy_varargs_param_name = None
    as_list.stypy_kwargs_param_name = None
    as_list.stypy_call_defaults = defaults
    as_list.stypy_call_varargs = varargs
    as_list.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'as_list', ['seq'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'as_list', localization, ['seq'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'as_list(...)' code ##################

    
    
    # Call to is_sequence(...): (line 455)
    # Processing the call arguments (line 455)
    # Getting the type of 'seq' (line 455)
    seq_39596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 19), 'seq', False)
    # Processing the call keyword arguments (line 455)
    kwargs_39597 = {}
    # Getting the type of 'is_sequence' (line 455)
    is_sequence_39595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 7), 'is_sequence', False)
    # Calling is_sequence(args, kwargs) (line 455)
    is_sequence_call_result_39598 = invoke(stypy.reporting.localization.Localization(__file__, 455, 7), is_sequence_39595, *[seq_39596], **kwargs_39597)
    
    # Testing the type of an if condition (line 455)
    if_condition_39599 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 455, 4), is_sequence_call_result_39598)
    # Assigning a type to the variable 'if_condition_39599' (line 455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 4), 'if_condition_39599', if_condition_39599)
    # SSA begins for if statement (line 455)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to list(...): (line 456)
    # Processing the call arguments (line 456)
    # Getting the type of 'seq' (line 456)
    seq_39601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 20), 'seq', False)
    # Processing the call keyword arguments (line 456)
    kwargs_39602 = {}
    # Getting the type of 'list' (line 456)
    list_39600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 15), 'list', False)
    # Calling list(args, kwargs) (line 456)
    list_call_result_39603 = invoke(stypy.reporting.localization.Localization(__file__, 456, 15), list_39600, *[seq_39601], **kwargs_39602)
    
    # Assigning a type to the variable 'stypy_return_type' (line 456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 8), 'stypy_return_type', list_call_result_39603)
    # SSA branch for the else part of an if statement (line 455)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'list' (line 458)
    list_39604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 458)
    # Adding element type (line 458)
    # Getting the type of 'seq' (line 458)
    seq_39605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 16), 'seq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 458, 15), list_39604, seq_39605)
    
    # Assigning a type to the variable 'stypy_return_type' (line 458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 8), 'stypy_return_type', list_39604)
    # SSA join for if statement (line 455)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'as_list(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'as_list' in the type store
    # Getting the type of 'stypy_return_type' (line 454)
    stypy_return_type_39606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39606)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'as_list'
    return stypy_return_type_39606

# Assigning a type to the variable 'as_list' (line 454)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 0), 'as_list', as_list)

@norecursion
def get_language(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_language'
    module_type_store = module_type_store.open_function_context('get_language', 460, 0, False)
    
    # Passed parameters checking function
    get_language.stypy_localization = localization
    get_language.stypy_type_of_self = None
    get_language.stypy_type_store = module_type_store
    get_language.stypy_function_name = 'get_language'
    get_language.stypy_param_names_list = ['sources']
    get_language.stypy_varargs_param_name = None
    get_language.stypy_kwargs_param_name = None
    get_language.stypy_call_defaults = defaults
    get_language.stypy_call_varargs = varargs
    get_language.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_language', ['sources'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_language', localization, ['sources'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_language(...)' code ##################

    str_39607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 4), 'str', 'Determine language value (c,f77,f90) from sources ')
    
    # Assigning a Name to a Name (line 463):
    
    # Assigning a Name to a Name (line 463):
    # Getting the type of 'None' (line 463)
    None_39608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 15), 'None')
    # Assigning a type to the variable 'language' (line 463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 4), 'language', None_39608)
    
    # Getting the type of 'sources' (line 464)
    sources_39609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 18), 'sources')
    # Testing the type of a for loop iterable (line 464)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 464, 4), sources_39609)
    # Getting the type of the for loop variable (line 464)
    for_loop_var_39610 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 464, 4), sources_39609)
    # Assigning a type to the variable 'source' (line 464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 4), 'source', for_loop_var_39610)
    # SSA begins for a for statement (line 464)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Type idiom detected: calculating its left and rigth part (line 465)
    # Getting the type of 'str' (line 465)
    str_39611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 30), 'str')
    # Getting the type of 'source' (line 465)
    source_39612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 22), 'source')
    
    (may_be_39613, more_types_in_union_39614) = may_be_subtype(str_39611, source_39612)

    if may_be_39613:

        if more_types_in_union_39614:
            # Runtime conditional SSA (line 465)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'source' (line 465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 8), 'source', remove_not_subtype_from_union(source_39612, str))
        
        
        # Call to f90_ext_match(...): (line 466)
        # Processing the call arguments (line 466)
        # Getting the type of 'source' (line 466)
        source_39616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 29), 'source', False)
        # Processing the call keyword arguments (line 466)
        kwargs_39617 = {}
        # Getting the type of 'f90_ext_match' (line 466)
        f90_ext_match_39615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 15), 'f90_ext_match', False)
        # Calling f90_ext_match(args, kwargs) (line 466)
        f90_ext_match_call_result_39618 = invoke(stypy.reporting.localization.Localization(__file__, 466, 15), f90_ext_match_39615, *[source_39616], **kwargs_39617)
        
        # Testing the type of an if condition (line 466)
        if_condition_39619 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 466, 12), f90_ext_match_call_result_39618)
        # Assigning a type to the variable 'if_condition_39619' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'if_condition_39619', if_condition_39619)
        # SSA begins for if statement (line 466)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 467):
        
        # Assigning a Str to a Name (line 467):
        str_39620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 27), 'str', 'f90')
        # Assigning a type to the variable 'language' (line 467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 16), 'language', str_39620)
        # SSA branch for the else part of an if statement (line 466)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to fortran_ext_match(...): (line 469)
        # Processing the call arguments (line 469)
        # Getting the type of 'source' (line 469)
        source_39622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 35), 'source', False)
        # Processing the call keyword arguments (line 469)
        kwargs_39623 = {}
        # Getting the type of 'fortran_ext_match' (line 469)
        fortran_ext_match_39621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 17), 'fortran_ext_match', False)
        # Calling fortran_ext_match(args, kwargs) (line 469)
        fortran_ext_match_call_result_39624 = invoke(stypy.reporting.localization.Localization(__file__, 469, 17), fortran_ext_match_39621, *[source_39622], **kwargs_39623)
        
        # Testing the type of an if condition (line 469)
        if_condition_39625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 469, 17), fortran_ext_match_call_result_39624)
        # Assigning a type to the variable 'if_condition_39625' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 17), 'if_condition_39625', if_condition_39625)
        # SSA begins for if statement (line 469)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 470):
        
        # Assigning a Str to a Name (line 470):
        str_39626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 27), 'str', 'f77')
        # Assigning a type to the variable 'language' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 16), 'language', str_39626)
        # SSA join for if statement (line 469)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 466)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_39614:
            # SSA join for if statement (line 465)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'language' (line 471)
    language_39627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 11), 'language')
    # Assigning a type to the variable 'stypy_return_type' (line 471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 4), 'stypy_return_type', language_39627)
    
    # ################# End of 'get_language(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_language' in the type store
    # Getting the type of 'stypy_return_type' (line 460)
    stypy_return_type_39628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39628)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_language'
    return stypy_return_type_39628

# Assigning a type to the variable 'get_language' (line 460)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 0), 'get_language', get_language)

@norecursion
def has_f_sources(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'has_f_sources'
    module_type_store = module_type_store.open_function_context('has_f_sources', 473, 0, False)
    
    # Passed parameters checking function
    has_f_sources.stypy_localization = localization
    has_f_sources.stypy_type_of_self = None
    has_f_sources.stypy_type_store = module_type_store
    has_f_sources.stypy_function_name = 'has_f_sources'
    has_f_sources.stypy_param_names_list = ['sources']
    has_f_sources.stypy_varargs_param_name = None
    has_f_sources.stypy_kwargs_param_name = None
    has_f_sources.stypy_call_defaults = defaults
    has_f_sources.stypy_call_varargs = varargs
    has_f_sources.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'has_f_sources', ['sources'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'has_f_sources', localization, ['sources'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'has_f_sources(...)' code ##################

    str_39629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 4), 'str', 'Return True if sources contains Fortran files ')
    
    # Getting the type of 'sources' (line 475)
    sources_39630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 18), 'sources')
    # Testing the type of a for loop iterable (line 475)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 475, 4), sources_39630)
    # Getting the type of the for loop variable (line 475)
    for_loop_var_39631 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 475, 4), sources_39630)
    # Assigning a type to the variable 'source' (line 475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'source', for_loop_var_39631)
    # SSA begins for a for statement (line 475)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to fortran_ext_match(...): (line 476)
    # Processing the call arguments (line 476)
    # Getting the type of 'source' (line 476)
    source_39633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 29), 'source', False)
    # Processing the call keyword arguments (line 476)
    kwargs_39634 = {}
    # Getting the type of 'fortran_ext_match' (line 476)
    fortran_ext_match_39632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 11), 'fortran_ext_match', False)
    # Calling fortran_ext_match(args, kwargs) (line 476)
    fortran_ext_match_call_result_39635 = invoke(stypy.reporting.localization.Localization(__file__, 476, 11), fortran_ext_match_39632, *[source_39633], **kwargs_39634)
    
    # Testing the type of an if condition (line 476)
    if_condition_39636 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 476, 8), fortran_ext_match_call_result_39635)
    # Assigning a type to the variable 'if_condition_39636' (line 476)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'if_condition_39636', if_condition_39636)
    # SSA begins for if statement (line 476)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 477)
    True_39637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 19), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 12), 'stypy_return_type', True_39637)
    # SSA join for if statement (line 476)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'False' (line 478)
    False_39638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 11), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 4), 'stypy_return_type', False_39638)
    
    # ################# End of 'has_f_sources(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'has_f_sources' in the type store
    # Getting the type of 'stypy_return_type' (line 473)
    stypy_return_type_39639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39639)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'has_f_sources'
    return stypy_return_type_39639

# Assigning a type to the variable 'has_f_sources' (line 473)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 0), 'has_f_sources', has_f_sources)

@norecursion
def has_cxx_sources(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'has_cxx_sources'
    module_type_store = module_type_store.open_function_context('has_cxx_sources', 480, 0, False)
    
    # Passed parameters checking function
    has_cxx_sources.stypy_localization = localization
    has_cxx_sources.stypy_type_of_self = None
    has_cxx_sources.stypy_type_store = module_type_store
    has_cxx_sources.stypy_function_name = 'has_cxx_sources'
    has_cxx_sources.stypy_param_names_list = ['sources']
    has_cxx_sources.stypy_varargs_param_name = None
    has_cxx_sources.stypy_kwargs_param_name = None
    has_cxx_sources.stypy_call_defaults = defaults
    has_cxx_sources.stypy_call_varargs = varargs
    has_cxx_sources.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'has_cxx_sources', ['sources'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'has_cxx_sources', localization, ['sources'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'has_cxx_sources(...)' code ##################

    str_39640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 4), 'str', 'Return True if sources contains C++ files ')
    
    # Getting the type of 'sources' (line 482)
    sources_39641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 18), 'sources')
    # Testing the type of a for loop iterable (line 482)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 482, 4), sources_39641)
    # Getting the type of the for loop variable (line 482)
    for_loop_var_39642 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 482, 4), sources_39641)
    # Assigning a type to the variable 'source' (line 482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'source', for_loop_var_39642)
    # SSA begins for a for statement (line 482)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to cxx_ext_match(...): (line 483)
    # Processing the call arguments (line 483)
    # Getting the type of 'source' (line 483)
    source_39644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 25), 'source', False)
    # Processing the call keyword arguments (line 483)
    kwargs_39645 = {}
    # Getting the type of 'cxx_ext_match' (line 483)
    cxx_ext_match_39643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 11), 'cxx_ext_match', False)
    # Calling cxx_ext_match(args, kwargs) (line 483)
    cxx_ext_match_call_result_39646 = invoke(stypy.reporting.localization.Localization(__file__, 483, 11), cxx_ext_match_39643, *[source_39644], **kwargs_39645)
    
    # Testing the type of an if condition (line 483)
    if_condition_39647 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 483, 8), cxx_ext_match_call_result_39646)
    # Assigning a type to the variable 'if_condition_39647' (line 483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'if_condition_39647', if_condition_39647)
    # SSA begins for if statement (line 483)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 484)
    True_39648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 19), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 12), 'stypy_return_type', True_39648)
    # SSA join for if statement (line 483)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'False' (line 485)
    False_39649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 11), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 4), 'stypy_return_type', False_39649)
    
    # ################# End of 'has_cxx_sources(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'has_cxx_sources' in the type store
    # Getting the type of 'stypy_return_type' (line 480)
    stypy_return_type_39650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39650)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'has_cxx_sources'
    return stypy_return_type_39650

# Assigning a type to the variable 'has_cxx_sources' (line 480)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 0), 'has_cxx_sources', has_cxx_sources)

@norecursion
def filter_sources(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'filter_sources'
    module_type_store = module_type_store.open_function_context('filter_sources', 487, 0, False)
    
    # Passed parameters checking function
    filter_sources.stypy_localization = localization
    filter_sources.stypy_type_of_self = None
    filter_sources.stypy_type_store = module_type_store
    filter_sources.stypy_function_name = 'filter_sources'
    filter_sources.stypy_param_names_list = ['sources']
    filter_sources.stypy_varargs_param_name = None
    filter_sources.stypy_kwargs_param_name = None
    filter_sources.stypy_call_defaults = defaults
    filter_sources.stypy_call_varargs = varargs
    filter_sources.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'filter_sources', ['sources'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'filter_sources', localization, ['sources'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'filter_sources(...)' code ##################

    str_39651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, (-1)), 'str', 'Return four lists of filenames containing\n    C, C++, Fortran, and Fortran 90 module sources,\n    respectively.\n    ')
    
    # Assigning a List to a Name (line 492):
    
    # Assigning a List to a Name (line 492):
    
    # Obtaining an instance of the builtin type 'list' (line 492)
    list_39652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 492)
    
    # Assigning a type to the variable 'c_sources' (line 492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'c_sources', list_39652)
    
    # Assigning a List to a Name (line 493):
    
    # Assigning a List to a Name (line 493):
    
    # Obtaining an instance of the builtin type 'list' (line 493)
    list_39653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 493)
    
    # Assigning a type to the variable 'cxx_sources' (line 493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 4), 'cxx_sources', list_39653)
    
    # Assigning a List to a Name (line 494):
    
    # Assigning a List to a Name (line 494):
    
    # Obtaining an instance of the builtin type 'list' (line 494)
    list_39654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 494)
    
    # Assigning a type to the variable 'f_sources' (line 494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 4), 'f_sources', list_39654)
    
    # Assigning a List to a Name (line 495):
    
    # Assigning a List to a Name (line 495):
    
    # Obtaining an instance of the builtin type 'list' (line 495)
    list_39655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 495)
    
    # Assigning a type to the variable 'fmodule_sources' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 4), 'fmodule_sources', list_39655)
    
    # Getting the type of 'sources' (line 496)
    sources_39656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 18), 'sources')
    # Testing the type of a for loop iterable (line 496)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 496, 4), sources_39656)
    # Getting the type of the for loop variable (line 496)
    for_loop_var_39657 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 496, 4), sources_39656)
    # Assigning a type to the variable 'source' (line 496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 4), 'source', for_loop_var_39657)
    # SSA begins for a for statement (line 496)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to fortran_ext_match(...): (line 497)
    # Processing the call arguments (line 497)
    # Getting the type of 'source' (line 497)
    source_39659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 29), 'source', False)
    # Processing the call keyword arguments (line 497)
    kwargs_39660 = {}
    # Getting the type of 'fortran_ext_match' (line 497)
    fortran_ext_match_39658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 11), 'fortran_ext_match', False)
    # Calling fortran_ext_match(args, kwargs) (line 497)
    fortran_ext_match_call_result_39661 = invoke(stypy.reporting.localization.Localization(__file__, 497, 11), fortran_ext_match_39658, *[source_39659], **kwargs_39660)
    
    # Testing the type of an if condition (line 497)
    if_condition_39662 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 497, 8), fortran_ext_match_call_result_39661)
    # Assigning a type to the variable 'if_condition_39662' (line 497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'if_condition_39662', if_condition_39662)
    # SSA begins for if statement (line 497)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 498):
    
    # Assigning a Call to a Name (line 498):
    
    # Call to _get_f90_modules(...): (line 498)
    # Processing the call arguments (line 498)
    # Getting the type of 'source' (line 498)
    source_39664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 39), 'source', False)
    # Processing the call keyword arguments (line 498)
    kwargs_39665 = {}
    # Getting the type of '_get_f90_modules' (line 498)
    _get_f90_modules_39663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 22), '_get_f90_modules', False)
    # Calling _get_f90_modules(args, kwargs) (line 498)
    _get_f90_modules_call_result_39666 = invoke(stypy.reporting.localization.Localization(__file__, 498, 22), _get_f90_modules_39663, *[source_39664], **kwargs_39665)
    
    # Assigning a type to the variable 'modules' (line 498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'modules', _get_f90_modules_call_result_39666)
    
    # Getting the type of 'modules' (line 499)
    modules_39667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 15), 'modules')
    # Testing the type of an if condition (line 499)
    if_condition_39668 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 499, 12), modules_39667)
    # Assigning a type to the variable 'if_condition_39668' (line 499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'if_condition_39668', if_condition_39668)
    # SSA begins for if statement (line 499)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 500)
    # Processing the call arguments (line 500)
    # Getting the type of 'source' (line 500)
    source_39671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 39), 'source', False)
    # Processing the call keyword arguments (line 500)
    kwargs_39672 = {}
    # Getting the type of 'fmodule_sources' (line 500)
    fmodule_sources_39669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 16), 'fmodule_sources', False)
    # Obtaining the member 'append' of a type (line 500)
    append_39670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 16), fmodule_sources_39669, 'append')
    # Calling append(args, kwargs) (line 500)
    append_call_result_39673 = invoke(stypy.reporting.localization.Localization(__file__, 500, 16), append_39670, *[source_39671], **kwargs_39672)
    
    # SSA branch for the else part of an if statement (line 499)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 502)
    # Processing the call arguments (line 502)
    # Getting the type of 'source' (line 502)
    source_39676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 33), 'source', False)
    # Processing the call keyword arguments (line 502)
    kwargs_39677 = {}
    # Getting the type of 'f_sources' (line 502)
    f_sources_39674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 16), 'f_sources', False)
    # Obtaining the member 'append' of a type (line 502)
    append_39675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 16), f_sources_39674, 'append')
    # Calling append(args, kwargs) (line 502)
    append_call_result_39678 = invoke(stypy.reporting.localization.Localization(__file__, 502, 16), append_39675, *[source_39676], **kwargs_39677)
    
    # SSA join for if statement (line 499)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 497)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to cxx_ext_match(...): (line 503)
    # Processing the call arguments (line 503)
    # Getting the type of 'source' (line 503)
    source_39680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 27), 'source', False)
    # Processing the call keyword arguments (line 503)
    kwargs_39681 = {}
    # Getting the type of 'cxx_ext_match' (line 503)
    cxx_ext_match_39679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 13), 'cxx_ext_match', False)
    # Calling cxx_ext_match(args, kwargs) (line 503)
    cxx_ext_match_call_result_39682 = invoke(stypy.reporting.localization.Localization(__file__, 503, 13), cxx_ext_match_39679, *[source_39680], **kwargs_39681)
    
    # Testing the type of an if condition (line 503)
    if_condition_39683 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 503, 13), cxx_ext_match_call_result_39682)
    # Assigning a type to the variable 'if_condition_39683' (line 503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 13), 'if_condition_39683', if_condition_39683)
    # SSA begins for if statement (line 503)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 504)
    # Processing the call arguments (line 504)
    # Getting the type of 'source' (line 504)
    source_39686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 31), 'source', False)
    # Processing the call keyword arguments (line 504)
    kwargs_39687 = {}
    # Getting the type of 'cxx_sources' (line 504)
    cxx_sources_39684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 12), 'cxx_sources', False)
    # Obtaining the member 'append' of a type (line 504)
    append_39685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 12), cxx_sources_39684, 'append')
    # Calling append(args, kwargs) (line 504)
    append_call_result_39688 = invoke(stypy.reporting.localization.Localization(__file__, 504, 12), append_39685, *[source_39686], **kwargs_39687)
    
    # SSA branch for the else part of an if statement (line 503)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 506)
    # Processing the call arguments (line 506)
    # Getting the type of 'source' (line 506)
    source_39691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 29), 'source', False)
    # Processing the call keyword arguments (line 506)
    kwargs_39692 = {}
    # Getting the type of 'c_sources' (line 506)
    c_sources_39689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 12), 'c_sources', False)
    # Obtaining the member 'append' of a type (line 506)
    append_39690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 12), c_sources_39689, 'append')
    # Calling append(args, kwargs) (line 506)
    append_call_result_39693 = invoke(stypy.reporting.localization.Localization(__file__, 506, 12), append_39690, *[source_39691], **kwargs_39692)
    
    # SSA join for if statement (line 503)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 497)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 507)
    tuple_39694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 507, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 507)
    # Adding element type (line 507)
    # Getting the type of 'c_sources' (line 507)
    c_sources_39695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 11), 'c_sources')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 507, 11), tuple_39694, c_sources_39695)
    # Adding element type (line 507)
    # Getting the type of 'cxx_sources' (line 507)
    cxx_sources_39696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 22), 'cxx_sources')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 507, 11), tuple_39694, cxx_sources_39696)
    # Adding element type (line 507)
    # Getting the type of 'f_sources' (line 507)
    f_sources_39697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 35), 'f_sources')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 507, 11), tuple_39694, f_sources_39697)
    # Adding element type (line 507)
    # Getting the type of 'fmodule_sources' (line 507)
    fmodule_sources_39698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 46), 'fmodule_sources')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 507, 11), tuple_39694, fmodule_sources_39698)
    
    # Assigning a type to the variable 'stypy_return_type' (line 507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 507, 4), 'stypy_return_type', tuple_39694)
    
    # ################# End of 'filter_sources(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'filter_sources' in the type store
    # Getting the type of 'stypy_return_type' (line 487)
    stypy_return_type_39699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39699)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'filter_sources'
    return stypy_return_type_39699

# Assigning a type to the variable 'filter_sources' (line 487)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 0), 'filter_sources', filter_sources)

@norecursion
def _get_headers(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_headers'
    module_type_store = module_type_store.open_function_context('_get_headers', 510, 0, False)
    
    # Passed parameters checking function
    _get_headers.stypy_localization = localization
    _get_headers.stypy_type_of_self = None
    _get_headers.stypy_type_store = module_type_store
    _get_headers.stypy_function_name = '_get_headers'
    _get_headers.stypy_param_names_list = ['directory_list']
    _get_headers.stypy_varargs_param_name = None
    _get_headers.stypy_kwargs_param_name = None
    _get_headers.stypy_call_defaults = defaults
    _get_headers.stypy_call_varargs = varargs
    _get_headers.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_headers', ['directory_list'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_headers', localization, ['directory_list'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_headers(...)' code ##################

    
    # Assigning a List to a Name (line 512):
    
    # Assigning a List to a Name (line 512):
    
    # Obtaining an instance of the builtin type 'list' (line 512)
    list_39700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 512)
    
    # Assigning a type to the variable 'headers' (line 512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 4), 'headers', list_39700)
    
    # Getting the type of 'directory_list' (line 513)
    directory_list_39701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 13), 'directory_list')
    # Testing the type of a for loop iterable (line 513)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 513, 4), directory_list_39701)
    # Getting the type of the for loop variable (line 513)
    for_loop_var_39702 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 513, 4), directory_list_39701)
    # Assigning a type to the variable 'd' (line 513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 4), 'd', for_loop_var_39702)
    # SSA begins for a for statement (line 513)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 514):
    
    # Assigning a Call to a Name (line 514):
    
    # Call to glob(...): (line 514)
    # Processing the call arguments (line 514)
    
    # Call to join(...): (line 514)
    # Processing the call arguments (line 514)
    # Getting the type of 'd' (line 514)
    d_39708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 38), 'd', False)
    str_39709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 41), 'str', '*.h')
    # Processing the call keyword arguments (line 514)
    kwargs_39710 = {}
    # Getting the type of 'os' (line 514)
    os_39705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 25), 'os', False)
    # Obtaining the member 'path' of a type (line 514)
    path_39706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 25), os_39705, 'path')
    # Obtaining the member 'join' of a type (line 514)
    join_39707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 25), path_39706, 'join')
    # Calling join(args, kwargs) (line 514)
    join_call_result_39711 = invoke(stypy.reporting.localization.Localization(__file__, 514, 25), join_39707, *[d_39708, str_39709], **kwargs_39710)
    
    # Processing the call keyword arguments (line 514)
    kwargs_39712 = {}
    # Getting the type of 'glob' (line 514)
    glob_39703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 15), 'glob', False)
    # Obtaining the member 'glob' of a type (line 514)
    glob_39704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 15), glob_39703, 'glob')
    # Calling glob(args, kwargs) (line 514)
    glob_call_result_39713 = invoke(stypy.reporting.localization.Localization(__file__, 514, 15), glob_39704, *[join_call_result_39711], **kwargs_39712)
    
    # Assigning a type to the variable 'head' (line 514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'head', glob_call_result_39713)
    
    # Call to extend(...): (line 515)
    # Processing the call arguments (line 515)
    # Getting the type of 'head' (line 515)
    head_39716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 23), 'head', False)
    # Processing the call keyword arguments (line 515)
    kwargs_39717 = {}
    # Getting the type of 'headers' (line 515)
    headers_39714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 8), 'headers', False)
    # Obtaining the member 'extend' of a type (line 515)
    extend_39715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 8), headers_39714, 'extend')
    # Calling extend(args, kwargs) (line 515)
    extend_call_result_39718 = invoke(stypy.reporting.localization.Localization(__file__, 515, 8), extend_39715, *[head_39716], **kwargs_39717)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'headers' (line 516)
    headers_39719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 11), 'headers')
    # Assigning a type to the variable 'stypy_return_type' (line 516)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 4), 'stypy_return_type', headers_39719)
    
    # ################# End of '_get_headers(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_headers' in the type store
    # Getting the type of 'stypy_return_type' (line 510)
    stypy_return_type_39720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39720)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_headers'
    return stypy_return_type_39720

# Assigning a type to the variable '_get_headers' (line 510)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 0), '_get_headers', _get_headers)

@norecursion
def _get_directories(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_directories'
    module_type_store = module_type_store.open_function_context('_get_directories', 518, 0, False)
    
    # Passed parameters checking function
    _get_directories.stypy_localization = localization
    _get_directories.stypy_type_of_self = None
    _get_directories.stypy_type_store = module_type_store
    _get_directories.stypy_function_name = '_get_directories'
    _get_directories.stypy_param_names_list = ['list_of_sources']
    _get_directories.stypy_varargs_param_name = None
    _get_directories.stypy_kwargs_param_name = None
    _get_directories.stypy_call_defaults = defaults
    _get_directories.stypy_call_varargs = varargs
    _get_directories.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_directories', ['list_of_sources'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_directories', localization, ['list_of_sources'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_directories(...)' code ##################

    
    # Assigning a List to a Name (line 520):
    
    # Assigning a List to a Name (line 520):
    
    # Obtaining an instance of the builtin type 'list' (line 520)
    list_39721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 520)
    
    # Assigning a type to the variable 'direcs' (line 520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 4), 'direcs', list_39721)
    
    # Getting the type of 'list_of_sources' (line 521)
    list_of_sources_39722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 13), 'list_of_sources')
    # Testing the type of a for loop iterable (line 521)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 521, 4), list_of_sources_39722)
    # Getting the type of the for loop variable (line 521)
    for_loop_var_39723 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 521, 4), list_of_sources_39722)
    # Assigning a type to the variable 'f' (line 521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 4), 'f', for_loop_var_39723)
    # SSA begins for a for statement (line 521)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 522):
    
    # Assigning a Call to a Name (line 522):
    
    # Call to split(...): (line 522)
    # Processing the call arguments (line 522)
    # Getting the type of 'f' (line 522)
    f_39727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 26), 'f', False)
    # Processing the call keyword arguments (line 522)
    kwargs_39728 = {}
    # Getting the type of 'os' (line 522)
    os_39724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 12), 'os', False)
    # Obtaining the member 'path' of a type (line 522)
    path_39725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 12), os_39724, 'path')
    # Obtaining the member 'split' of a type (line 522)
    split_39726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 12), path_39725, 'split')
    # Calling split(args, kwargs) (line 522)
    split_call_result_39729 = invoke(stypy.reporting.localization.Localization(__file__, 522, 12), split_39726, *[f_39727], **kwargs_39728)
    
    # Assigning a type to the variable 'd' (line 522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'd', split_call_result_39729)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_39730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 13), 'int')
    # Getting the type of 'd' (line 523)
    d_39731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 11), 'd')
    # Obtaining the member '__getitem__' of a type (line 523)
    getitem___39732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 11), d_39731, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 523)
    subscript_call_result_39733 = invoke(stypy.reporting.localization.Localization(__file__, 523, 11), getitem___39732, int_39730)
    
    str_39734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 19), 'str', '')
    # Applying the binary operator '!=' (line 523)
    result_ne_39735 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 11), '!=', subscript_call_result_39733, str_39734)
    
    
    
    
    # Obtaining the type of the subscript
    int_39736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 32), 'int')
    # Getting the type of 'd' (line 523)
    d_39737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 30), 'd')
    # Obtaining the member '__getitem__' of a type (line 523)
    getitem___39738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 30), d_39737, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 523)
    subscript_call_result_39739 = invoke(stypy.reporting.localization.Localization(__file__, 523, 30), getitem___39738, int_39736)
    
    # Getting the type of 'direcs' (line 523)
    direcs_39740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 38), 'direcs')
    # Applying the binary operator 'in' (line 523)
    result_contains_39741 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 30), 'in', subscript_call_result_39739, direcs_39740)
    
    # Applying the 'not' unary operator (line 523)
    result_not__39742 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 26), 'not', result_contains_39741)
    
    # Applying the binary operator 'and' (line 523)
    result_and_keyword_39743 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 11), 'and', result_ne_39735, result_not__39742)
    
    # Testing the type of an if condition (line 523)
    if_condition_39744 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 523, 8), result_and_keyword_39743)
    # Assigning a type to the variable 'if_condition_39744' (line 523)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'if_condition_39744', if_condition_39744)
    # SSA begins for if statement (line 523)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 524)
    # Processing the call arguments (line 524)
    
    # Obtaining the type of the subscript
    int_39747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 28), 'int')
    # Getting the type of 'd' (line 524)
    d_39748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 26), 'd', False)
    # Obtaining the member '__getitem__' of a type (line 524)
    getitem___39749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 26), d_39748, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 524)
    subscript_call_result_39750 = invoke(stypy.reporting.localization.Localization(__file__, 524, 26), getitem___39749, int_39747)
    
    # Processing the call keyword arguments (line 524)
    kwargs_39751 = {}
    # Getting the type of 'direcs' (line 524)
    direcs_39745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 12), 'direcs', False)
    # Obtaining the member 'append' of a type (line 524)
    append_39746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 12), direcs_39745, 'append')
    # Calling append(args, kwargs) (line 524)
    append_call_result_39752 = invoke(stypy.reporting.localization.Localization(__file__, 524, 12), append_39746, *[subscript_call_result_39750], **kwargs_39751)
    
    # SSA join for if statement (line 523)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'direcs' (line 525)
    direcs_39753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 11), 'direcs')
    # Assigning a type to the variable 'stypy_return_type' (line 525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 4), 'stypy_return_type', direcs_39753)
    
    # ################# End of '_get_directories(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_directories' in the type store
    # Getting the type of 'stypy_return_type' (line 518)
    stypy_return_type_39754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39754)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_directories'
    return stypy_return_type_39754

# Assigning a type to the variable '_get_directories' (line 518)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 0), '_get_directories', _get_directories)

@norecursion
def get_dependencies(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_dependencies'
    module_type_store = module_type_store.open_function_context('get_dependencies', 527, 0, False)
    
    # Passed parameters checking function
    get_dependencies.stypy_localization = localization
    get_dependencies.stypy_type_of_self = None
    get_dependencies.stypy_type_store = module_type_store
    get_dependencies.stypy_function_name = 'get_dependencies'
    get_dependencies.stypy_param_names_list = ['sources']
    get_dependencies.stypy_varargs_param_name = None
    get_dependencies.stypy_kwargs_param_name = None
    get_dependencies.stypy_call_defaults = defaults
    get_dependencies.stypy_call_varargs = varargs
    get_dependencies.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_dependencies', ['sources'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_dependencies', localization, ['sources'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_dependencies(...)' code ##################

    
    # Call to _get_headers(...): (line 529)
    # Processing the call arguments (line 529)
    
    # Call to _get_directories(...): (line 529)
    # Processing the call arguments (line 529)
    # Getting the type of 'sources' (line 529)
    sources_39757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 41), 'sources', False)
    # Processing the call keyword arguments (line 529)
    kwargs_39758 = {}
    # Getting the type of '_get_directories' (line 529)
    _get_directories_39756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 24), '_get_directories', False)
    # Calling _get_directories(args, kwargs) (line 529)
    _get_directories_call_result_39759 = invoke(stypy.reporting.localization.Localization(__file__, 529, 24), _get_directories_39756, *[sources_39757], **kwargs_39758)
    
    # Processing the call keyword arguments (line 529)
    kwargs_39760 = {}
    # Getting the type of '_get_headers' (line 529)
    _get_headers_39755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 11), '_get_headers', False)
    # Calling _get_headers(args, kwargs) (line 529)
    _get_headers_call_result_39761 = invoke(stypy.reporting.localization.Localization(__file__, 529, 11), _get_headers_39755, *[_get_directories_call_result_39759], **kwargs_39760)
    
    # Assigning a type to the variable 'stypy_return_type' (line 529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 4), 'stypy_return_type', _get_headers_call_result_39761)
    
    # ################# End of 'get_dependencies(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_dependencies' in the type store
    # Getting the type of 'stypy_return_type' (line 527)
    stypy_return_type_39762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39762)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_dependencies'
    return stypy_return_type_39762

# Assigning a type to the variable 'get_dependencies' (line 527)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 0), 'get_dependencies', get_dependencies)

@norecursion
def is_local_src_dir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_local_src_dir'
    module_type_store = module_type_store.open_function_context('is_local_src_dir', 531, 0, False)
    
    # Passed parameters checking function
    is_local_src_dir.stypy_localization = localization
    is_local_src_dir.stypy_type_of_self = None
    is_local_src_dir.stypy_type_store = module_type_store
    is_local_src_dir.stypy_function_name = 'is_local_src_dir'
    is_local_src_dir.stypy_param_names_list = ['directory']
    is_local_src_dir.stypy_varargs_param_name = None
    is_local_src_dir.stypy_kwargs_param_name = None
    is_local_src_dir.stypy_call_defaults = defaults
    is_local_src_dir.stypy_call_varargs = varargs
    is_local_src_dir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_local_src_dir', ['directory'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_local_src_dir', localization, ['directory'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_local_src_dir(...)' code ##################

    str_39763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, (-1)), 'str', 'Return true if directory is local directory.\n    ')
    
    
    
    # Call to is_string(...): (line 534)
    # Processing the call arguments (line 534)
    # Getting the type of 'directory' (line 534)
    directory_39765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 21), 'directory', False)
    # Processing the call keyword arguments (line 534)
    kwargs_39766 = {}
    # Getting the type of 'is_string' (line 534)
    is_string_39764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 11), 'is_string', False)
    # Calling is_string(args, kwargs) (line 534)
    is_string_call_result_39767 = invoke(stypy.reporting.localization.Localization(__file__, 534, 11), is_string_39764, *[directory_39765], **kwargs_39766)
    
    # Applying the 'not' unary operator (line 534)
    result_not__39768 = python_operator(stypy.reporting.localization.Localization(__file__, 534, 7), 'not', is_string_call_result_39767)
    
    # Testing the type of an if condition (line 534)
    if_condition_39769 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 534, 4), result_not__39768)
    # Assigning a type to the variable 'if_condition_39769' (line 534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'if_condition_39769', if_condition_39769)
    # SSA begins for if statement (line 534)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 535)
    False_39770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 8), 'stypy_return_type', False_39770)
    # SSA join for if statement (line 534)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 536):
    
    # Assigning a Call to a Name (line 536):
    
    # Call to abspath(...): (line 536)
    # Processing the call arguments (line 536)
    # Getting the type of 'directory' (line 536)
    directory_39774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 30), 'directory', False)
    # Processing the call keyword arguments (line 536)
    kwargs_39775 = {}
    # Getting the type of 'os' (line 536)
    os_39771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 14), 'os', False)
    # Obtaining the member 'path' of a type (line 536)
    path_39772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 536, 14), os_39771, 'path')
    # Obtaining the member 'abspath' of a type (line 536)
    abspath_39773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 536, 14), path_39772, 'abspath')
    # Calling abspath(args, kwargs) (line 536)
    abspath_call_result_39776 = invoke(stypy.reporting.localization.Localization(__file__, 536, 14), abspath_39773, *[directory_39774], **kwargs_39775)
    
    # Assigning a type to the variable 'abs_dir' (line 536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 4), 'abs_dir', abspath_call_result_39776)
    
    # Assigning a Call to a Name (line 537):
    
    # Assigning a Call to a Name (line 537):
    
    # Call to commonprefix(...): (line 537)
    # Processing the call arguments (line 537)
    
    # Obtaining an instance of the builtin type 'list' (line 537)
    list_39780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 29), 'list')
    # Adding type elements to the builtin type 'list' instance (line 537)
    # Adding element type (line 537)
    
    # Call to getcwd(...): (line 537)
    # Processing the call keyword arguments (line 537)
    kwargs_39783 = {}
    # Getting the type of 'os' (line 537)
    os_39781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 30), 'os', False)
    # Obtaining the member 'getcwd' of a type (line 537)
    getcwd_39782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 30), os_39781, 'getcwd')
    # Calling getcwd(args, kwargs) (line 537)
    getcwd_call_result_39784 = invoke(stypy.reporting.localization.Localization(__file__, 537, 30), getcwd_39782, *[], **kwargs_39783)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 537, 29), list_39780, getcwd_call_result_39784)
    # Adding element type (line 537)
    # Getting the type of 'abs_dir' (line 537)
    abs_dir_39785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 43), 'abs_dir', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 537, 29), list_39780, abs_dir_39785)
    
    # Processing the call keyword arguments (line 537)
    kwargs_39786 = {}
    # Getting the type of 'os' (line 537)
    os_39777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 8), 'os', False)
    # Obtaining the member 'path' of a type (line 537)
    path_39778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 8), os_39777, 'path')
    # Obtaining the member 'commonprefix' of a type (line 537)
    commonprefix_39779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 8), path_39778, 'commonprefix')
    # Calling commonprefix(args, kwargs) (line 537)
    commonprefix_call_result_39787 = invoke(stypy.reporting.localization.Localization(__file__, 537, 8), commonprefix_39779, *[list_39780], **kwargs_39786)
    
    # Assigning a type to the variable 'c' (line 537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'c', commonprefix_call_result_39787)
    
    # Assigning a Call to a Name (line 538):
    
    # Assigning a Call to a Name (line 538):
    
    # Call to split(...): (line 538)
    # Processing the call arguments (line 538)
    # Getting the type of 'os' (line 538)
    os_39797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 37), 'os', False)
    # Obtaining the member 'sep' of a type (line 538)
    sep_39798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 37), os_39797, 'sep')
    # Processing the call keyword arguments (line 538)
    kwargs_39799 = {}
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 538)
    # Processing the call arguments (line 538)
    # Getting the type of 'c' (line 538)
    c_39789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 26), 'c', False)
    # Processing the call keyword arguments (line 538)
    kwargs_39790 = {}
    # Getting the type of 'len' (line 538)
    len_39788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 22), 'len', False)
    # Calling len(args, kwargs) (line 538)
    len_call_result_39791 = invoke(stypy.reporting.localization.Localization(__file__, 538, 22), len_39788, *[c_39789], **kwargs_39790)
    
    slice_39792 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 538, 14), len_call_result_39791, None, None)
    # Getting the type of 'abs_dir' (line 538)
    abs_dir_39793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 14), 'abs_dir', False)
    # Obtaining the member '__getitem__' of a type (line 538)
    getitem___39794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 14), abs_dir_39793, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 538)
    subscript_call_result_39795 = invoke(stypy.reporting.localization.Localization(__file__, 538, 14), getitem___39794, slice_39792)
    
    # Obtaining the member 'split' of a type (line 538)
    split_39796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 14), subscript_call_result_39795, 'split')
    # Calling split(args, kwargs) (line 538)
    split_call_result_39800 = invoke(stypy.reporting.localization.Localization(__file__, 538, 14), split_39796, *[sep_39798], **kwargs_39799)
    
    # Assigning a type to the variable 'new_dir' (line 538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 4), 'new_dir', split_call_result_39800)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'new_dir' (line 539)
    new_dir_39801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 7), 'new_dir')
    
    
    # Obtaining the type of the subscript
    int_39802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 31), 'int')
    # Getting the type of 'new_dir' (line 539)
    new_dir_39803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 23), 'new_dir')
    # Obtaining the member '__getitem__' of a type (line 539)
    getitem___39804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 23), new_dir_39803, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 539)
    subscript_call_result_39805 = invoke(stypy.reporting.localization.Localization(__file__, 539, 23), getitem___39804, int_39802)
    
    # Applying the 'not' unary operator (line 539)
    result_not__39806 = python_operator(stypy.reporting.localization.Localization(__file__, 539, 19), 'not', subscript_call_result_39805)
    
    # Applying the binary operator 'and' (line 539)
    result_and_keyword_39807 = python_operator(stypy.reporting.localization.Localization(__file__, 539, 7), 'and', new_dir_39801, result_not__39806)
    
    # Testing the type of an if condition (line 539)
    if_condition_39808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 539, 4), result_and_keyword_39807)
    # Assigning a type to the variable 'if_condition_39808' (line 539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 4), 'if_condition_39808', if_condition_39808)
    # SSA begins for if statement (line 539)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 540):
    
    # Assigning a Subscript to a Name (line 540):
    
    # Obtaining the type of the subscript
    int_39809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 26), 'int')
    slice_39810 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 540, 18), int_39809, None, None)
    # Getting the type of 'new_dir' (line 540)
    new_dir_39811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 18), 'new_dir')
    # Obtaining the member '__getitem__' of a type (line 540)
    getitem___39812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 18), new_dir_39811, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 540)
    subscript_call_result_39813 = invoke(stypy.reporting.localization.Localization(__file__, 540, 18), getitem___39812, slice_39810)
    
    # Assigning a type to the variable 'new_dir' (line 540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'new_dir', subscript_call_result_39813)
    # SSA join for if statement (line 539)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'new_dir' (line 541)
    new_dir_39814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 7), 'new_dir')
    
    
    # Obtaining the type of the subscript
    int_39815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 27), 'int')
    # Getting the type of 'new_dir' (line 541)
    new_dir_39816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 19), 'new_dir')
    # Obtaining the member '__getitem__' of a type (line 541)
    getitem___39817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 19), new_dir_39816, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 541)
    subscript_call_result_39818 = invoke(stypy.reporting.localization.Localization(__file__, 541, 19), getitem___39817, int_39815)
    
    str_39819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 31), 'str', 'build')
    # Applying the binary operator '==' (line 541)
    result_eq_39820 = python_operator(stypy.reporting.localization.Localization(__file__, 541, 19), '==', subscript_call_result_39818, str_39819)
    
    # Applying the binary operator 'and' (line 541)
    result_and_keyword_39821 = python_operator(stypy.reporting.localization.Localization(__file__, 541, 7), 'and', new_dir_39814, result_eq_39820)
    
    # Testing the type of an if condition (line 541)
    if_condition_39822 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 541, 4), result_and_keyword_39821)
    # Assigning a type to the variable 'if_condition_39822' (line 541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 4), 'if_condition_39822', if_condition_39822)
    # SSA begins for if statement (line 541)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 542)
    False_39823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'stypy_return_type', False_39823)
    # SSA join for if statement (line 541)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 543):
    
    # Assigning a Call to a Name (line 543):
    
    # Call to join(...): (line 543)
    # Processing the call arguments (line 543)
    # Getting the type of 'new_dir' (line 543)
    new_dir_39827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 26), 'new_dir', False)
    # Processing the call keyword arguments (line 543)
    kwargs_39828 = {}
    # Getting the type of 'os' (line 543)
    os_39824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 14), 'os', False)
    # Obtaining the member 'sep' of a type (line 543)
    sep_39825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 14), os_39824, 'sep')
    # Obtaining the member 'join' of a type (line 543)
    join_39826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 14), sep_39825, 'join')
    # Calling join(args, kwargs) (line 543)
    join_call_result_39829 = invoke(stypy.reporting.localization.Localization(__file__, 543, 14), join_39826, *[new_dir_39827], **kwargs_39828)
    
    # Assigning a type to the variable 'new_dir' (line 543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 4), 'new_dir', join_call_result_39829)
    
    # Call to isdir(...): (line 544)
    # Processing the call arguments (line 544)
    # Getting the type of 'new_dir' (line 544)
    new_dir_39833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 25), 'new_dir', False)
    # Processing the call keyword arguments (line 544)
    kwargs_39834 = {}
    # Getting the type of 'os' (line 544)
    os_39830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 544)
    path_39831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 11), os_39830, 'path')
    # Obtaining the member 'isdir' of a type (line 544)
    isdir_39832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 11), path_39831, 'isdir')
    # Calling isdir(args, kwargs) (line 544)
    isdir_call_result_39835 = invoke(stypy.reporting.localization.Localization(__file__, 544, 11), isdir_39832, *[new_dir_39833], **kwargs_39834)
    
    # Assigning a type to the variable 'stypy_return_type' (line 544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'stypy_return_type', isdir_call_result_39835)
    
    # ################# End of 'is_local_src_dir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_local_src_dir' in the type store
    # Getting the type of 'stypy_return_type' (line 531)
    stypy_return_type_39836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39836)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_local_src_dir'
    return stypy_return_type_39836

# Assigning a type to the variable 'is_local_src_dir' (line 531)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 0), 'is_local_src_dir', is_local_src_dir)

@norecursion
def general_source_files(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'general_source_files'
    module_type_store = module_type_store.open_function_context('general_source_files', 546, 0, False)
    
    # Passed parameters checking function
    general_source_files.stypy_localization = localization
    general_source_files.stypy_type_of_self = None
    general_source_files.stypy_type_store = module_type_store
    general_source_files.stypy_function_name = 'general_source_files'
    general_source_files.stypy_param_names_list = ['top_path']
    general_source_files.stypy_varargs_param_name = None
    general_source_files.stypy_kwargs_param_name = None
    general_source_files.stypy_call_defaults = defaults
    general_source_files.stypy_call_varargs = varargs
    general_source_files.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'general_source_files', ['top_path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'general_source_files', localization, ['top_path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'general_source_files(...)' code ##################

    
    # Assigning a Dict to a Name (line 547):
    
    # Assigning a Dict to a Name (line 547):
    
    # Obtaining an instance of the builtin type 'dict' (line 547)
    dict_39837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 25), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 547)
    # Adding element type (key, value) (line 547)
    str_39838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 26), 'str', 'CVS')
    int_39839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 32), 'int')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 547, 25), dict_39837, (str_39838, int_39839))
    # Adding element type (key, value) (line 547)
    str_39840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 35), 'str', '.svn')
    int_39841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 42), 'int')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 547, 25), dict_39837, (str_39840, int_39841))
    # Adding element type (key, value) (line 547)
    str_39842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 45), 'str', 'build')
    int_39843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 53), 'int')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 547, 25), dict_39837, (str_39842, int_39843))
    
    # Assigning a type to the variable 'pruned_directories' (line 547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 4), 'pruned_directories', dict_39837)
    
    # Assigning a Call to a Name (line 548):
    
    # Assigning a Call to a Name (line 548):
    
    # Call to compile(...): (line 548)
    # Processing the call arguments (line 548)
    str_39846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 32), 'str', '(?:[~#]|\\.py[co]|\\.o)$')
    # Processing the call keyword arguments (line 548)
    kwargs_39847 = {}
    # Getting the type of 're' (line 548)
    re_39844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 21), 're', False)
    # Obtaining the member 'compile' of a type (line 548)
    compile_39845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 21), re_39844, 'compile')
    # Calling compile(args, kwargs) (line 548)
    compile_call_result_39848 = invoke(stypy.reporting.localization.Localization(__file__, 548, 21), compile_39845, *[str_39846], **kwargs_39847)
    
    # Assigning a type to the variable 'prune_file_pat' (line 548)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 4), 'prune_file_pat', compile_call_result_39848)
    
    
    # Call to walk(...): (line 549)
    # Processing the call arguments (line 549)
    # Getting the type of 'top_path' (line 549)
    top_path_39851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 48), 'top_path', False)
    # Processing the call keyword arguments (line 549)
    # Getting the type of 'True' (line 549)
    True_39852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 66), 'True', False)
    keyword_39853 = True_39852
    kwargs_39854 = {'topdown': keyword_39853}
    # Getting the type of 'os' (line 549)
    os_39849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 40), 'os', False)
    # Obtaining the member 'walk' of a type (line 549)
    walk_39850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 40), os_39849, 'walk')
    # Calling walk(args, kwargs) (line 549)
    walk_call_result_39855 = invoke(stypy.reporting.localization.Localization(__file__, 549, 40), walk_39850, *[top_path_39851], **kwargs_39854)
    
    # Testing the type of a for loop iterable (line 549)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 549, 4), walk_call_result_39855)
    # Getting the type of the for loop variable (line 549)
    for_loop_var_39856 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 549, 4), walk_call_result_39855)
    # Assigning a type to the variable 'dirpath' (line 549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 4), 'dirpath', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 549, 4), for_loop_var_39856))
    # Assigning a type to the variable 'dirnames' (line 549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 4), 'dirnames', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 549, 4), for_loop_var_39856))
    # Assigning a type to the variable 'filenames' (line 549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 4), 'filenames', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 549, 4), for_loop_var_39856))
    # SSA begins for a for statement (line 549)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a ListComp to a Name (line 550):
    
    # Assigning a ListComp to a Name (line 550):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'dirnames' (line 550)
    dirnames_39861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 30), 'dirnames')
    comprehension_39862 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 550, 19), dirnames_39861)
    # Assigning a type to the variable 'd' (line 550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 19), 'd', comprehension_39862)
    
    # Getting the type of 'd' (line 550)
    d_39858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 42), 'd')
    # Getting the type of 'pruned_directories' (line 550)
    pruned_directories_39859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 51), 'pruned_directories')
    # Applying the binary operator 'notin' (line 550)
    result_contains_39860 = python_operator(stypy.reporting.localization.Localization(__file__, 550, 42), 'notin', d_39858, pruned_directories_39859)
    
    # Getting the type of 'd' (line 550)
    d_39857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 19), 'd')
    list_39863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 550, 19), list_39863, d_39857)
    # Assigning a type to the variable 'pruned' (line 550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'pruned', list_39863)
    
    # Assigning a Name to a Subscript (line 551):
    
    # Assigning a Name to a Subscript (line 551):
    # Getting the type of 'pruned' (line 551)
    pruned_39864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 22), 'pruned')
    # Getting the type of 'dirnames' (line 551)
    dirnames_39865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'dirnames')
    slice_39866 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 551, 8), None, None, None)
    # Storing an element on a container (line 551)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 8), dirnames_39865, (slice_39866, pruned_39864))
    
    # Getting the type of 'filenames' (line 552)
    filenames_39867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 17), 'filenames')
    # Testing the type of a for loop iterable (line 552)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 552, 8), filenames_39867)
    # Getting the type of the for loop variable (line 552)
    for_loop_var_39868 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 552, 8), filenames_39867)
    # Assigning a type to the variable 'f' (line 552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'f', for_loop_var_39868)
    # SSA begins for a for statement (line 552)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to search(...): (line 553)
    # Processing the call arguments (line 553)
    # Getting the type of 'f' (line 553)
    f_39871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 41), 'f', False)
    # Processing the call keyword arguments (line 553)
    kwargs_39872 = {}
    # Getting the type of 'prune_file_pat' (line 553)
    prune_file_pat_39869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 19), 'prune_file_pat', False)
    # Obtaining the member 'search' of a type (line 553)
    search_39870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 19), prune_file_pat_39869, 'search')
    # Calling search(args, kwargs) (line 553)
    search_call_result_39873 = invoke(stypy.reporting.localization.Localization(__file__, 553, 19), search_39870, *[f_39871], **kwargs_39872)
    
    # Applying the 'not' unary operator (line 553)
    result_not__39874 = python_operator(stypy.reporting.localization.Localization(__file__, 553, 15), 'not', search_call_result_39873)
    
    # Testing the type of an if condition (line 553)
    if_condition_39875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 553, 12), result_not__39874)
    # Assigning a type to the variable 'if_condition_39875' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'if_condition_39875', if_condition_39875)
    # SSA begins for if statement (line 553)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Creating a generator
    
    # Call to join(...): (line 554)
    # Processing the call arguments (line 554)
    # Getting the type of 'dirpath' (line 554)
    dirpath_39879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 35), 'dirpath', False)
    # Getting the type of 'f' (line 554)
    f_39880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 44), 'f', False)
    # Processing the call keyword arguments (line 554)
    kwargs_39881 = {}
    # Getting the type of 'os' (line 554)
    os_39876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 22), 'os', False)
    # Obtaining the member 'path' of a type (line 554)
    path_39877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 22), os_39876, 'path')
    # Obtaining the member 'join' of a type (line 554)
    join_39878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 22), path_39877, 'join')
    # Calling join(args, kwargs) (line 554)
    join_call_result_39882 = invoke(stypy.reporting.localization.Localization(__file__, 554, 22), join_39878, *[dirpath_39879, f_39880], **kwargs_39881)
    
    GeneratorType_39883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 16), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 554, 16), GeneratorType_39883, join_call_result_39882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 16), 'stypy_return_type', GeneratorType_39883)
    # SSA join for if statement (line 553)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'general_source_files(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'general_source_files' in the type store
    # Getting the type of 'stypy_return_type' (line 546)
    stypy_return_type_39884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39884)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'general_source_files'
    return stypy_return_type_39884

# Assigning a type to the variable 'general_source_files' (line 546)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 0), 'general_source_files', general_source_files)

@norecursion
def general_source_directories_files(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'general_source_directories_files'
    module_type_store = module_type_store.open_function_context('general_source_directories_files', 556, 0, False)
    
    # Passed parameters checking function
    general_source_directories_files.stypy_localization = localization
    general_source_directories_files.stypy_type_of_self = None
    general_source_directories_files.stypy_type_store = module_type_store
    general_source_directories_files.stypy_function_name = 'general_source_directories_files'
    general_source_directories_files.stypy_param_names_list = ['top_path']
    general_source_directories_files.stypy_varargs_param_name = None
    general_source_directories_files.stypy_kwargs_param_name = None
    general_source_directories_files.stypy_call_defaults = defaults
    general_source_directories_files.stypy_call_varargs = varargs
    general_source_directories_files.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'general_source_directories_files', ['top_path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'general_source_directories_files', localization, ['top_path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'general_source_directories_files(...)' code ##################

    str_39885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, (-1)), 'str', 'Return a directory name relative to top_path and\n    files contained.\n    ')
    
    # Assigning a List to a Name (line 560):
    
    # Assigning a List to a Name (line 560):
    
    # Obtaining an instance of the builtin type 'list' (line 560)
    list_39886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 560)
    # Adding element type (line 560)
    str_39887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 26), 'str', 'CVS')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 25), list_39886, str_39887)
    # Adding element type (line 560)
    str_39888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 33), 'str', '.svn')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 25), list_39886, str_39888)
    # Adding element type (line 560)
    str_39889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 41), 'str', 'build')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 25), list_39886, str_39889)
    
    # Assigning a type to the variable 'pruned_directories' (line 560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 4), 'pruned_directories', list_39886)
    
    # Assigning a Call to a Name (line 561):
    
    # Assigning a Call to a Name (line 561):
    
    # Call to compile(...): (line 561)
    # Processing the call arguments (line 561)
    str_39892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 32), 'str', '(?:[~#]|\\.py[co]|\\.o)$')
    # Processing the call keyword arguments (line 561)
    kwargs_39893 = {}
    # Getting the type of 're' (line 561)
    re_39890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 21), 're', False)
    # Obtaining the member 'compile' of a type (line 561)
    compile_39891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 21), re_39890, 'compile')
    # Calling compile(args, kwargs) (line 561)
    compile_call_result_39894 = invoke(stypy.reporting.localization.Localization(__file__, 561, 21), compile_39891, *[str_39892], **kwargs_39893)
    
    # Assigning a type to the variable 'prune_file_pat' (line 561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 4), 'prune_file_pat', compile_call_result_39894)
    
    
    # Call to walk(...): (line 562)
    # Processing the call arguments (line 562)
    # Getting the type of 'top_path' (line 562)
    top_path_39897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 48), 'top_path', False)
    # Processing the call keyword arguments (line 562)
    # Getting the type of 'True' (line 562)
    True_39898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 66), 'True', False)
    keyword_39899 = True_39898
    kwargs_39900 = {'topdown': keyword_39899}
    # Getting the type of 'os' (line 562)
    os_39895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 40), 'os', False)
    # Obtaining the member 'walk' of a type (line 562)
    walk_39896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 40), os_39895, 'walk')
    # Calling walk(args, kwargs) (line 562)
    walk_call_result_39901 = invoke(stypy.reporting.localization.Localization(__file__, 562, 40), walk_39896, *[top_path_39897], **kwargs_39900)
    
    # Testing the type of a for loop iterable (line 562)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 562, 4), walk_call_result_39901)
    # Getting the type of the for loop variable (line 562)
    for_loop_var_39902 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 562, 4), walk_call_result_39901)
    # Assigning a type to the variable 'dirpath' (line 562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 4), 'dirpath', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 4), for_loop_var_39902))
    # Assigning a type to the variable 'dirnames' (line 562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 4), 'dirnames', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 4), for_loop_var_39902))
    # Assigning a type to the variable 'filenames' (line 562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 4), 'filenames', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 4), for_loop_var_39902))
    # SSA begins for a for statement (line 562)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a ListComp to a Name (line 563):
    
    # Assigning a ListComp to a Name (line 563):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'dirnames' (line 563)
    dirnames_39907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 30), 'dirnames')
    comprehension_39908 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 563, 19), dirnames_39907)
    # Assigning a type to the variable 'd' (line 563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 19), 'd', comprehension_39908)
    
    # Getting the type of 'd' (line 563)
    d_39904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 42), 'd')
    # Getting the type of 'pruned_directories' (line 563)
    pruned_directories_39905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 51), 'pruned_directories')
    # Applying the binary operator 'notin' (line 563)
    result_contains_39906 = python_operator(stypy.reporting.localization.Localization(__file__, 563, 42), 'notin', d_39904, pruned_directories_39905)
    
    # Getting the type of 'd' (line 563)
    d_39903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 19), 'd')
    list_39909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 563, 19), list_39909, d_39903)
    # Assigning a type to the variable 'pruned' (line 563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 8), 'pruned', list_39909)
    
    # Assigning a Name to a Subscript (line 564):
    
    # Assigning a Name to a Subscript (line 564):
    # Getting the type of 'pruned' (line 564)
    pruned_39910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 22), 'pruned')
    # Getting the type of 'dirnames' (line 564)
    dirnames_39911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'dirnames')
    slice_39912 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 564, 8), None, None, None)
    # Storing an element on a container (line 564)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 564, 8), dirnames_39911, (slice_39912, pruned_39910))
    
    # Getting the type of 'dirnames' (line 565)
    dirnames_39913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 17), 'dirnames')
    # Testing the type of a for loop iterable (line 565)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 565, 8), dirnames_39913)
    # Getting the type of the for loop variable (line 565)
    for_loop_var_39914 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 565, 8), dirnames_39913)
    # Assigning a type to the variable 'd' (line 565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'd', for_loop_var_39914)
    # SSA begins for a for statement (line 565)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 566):
    
    # Assigning a Call to a Name (line 566):
    
    # Call to join(...): (line 566)
    # Processing the call arguments (line 566)
    # Getting the type of 'dirpath' (line 566)
    dirpath_39918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 33), 'dirpath', False)
    # Getting the type of 'd' (line 566)
    d_39919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 42), 'd', False)
    # Processing the call keyword arguments (line 566)
    kwargs_39920 = {}
    # Getting the type of 'os' (line 566)
    os_39915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 20), 'os', False)
    # Obtaining the member 'path' of a type (line 566)
    path_39916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 20), os_39915, 'path')
    # Obtaining the member 'join' of a type (line 566)
    join_39917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 20), path_39916, 'join')
    # Calling join(args, kwargs) (line 566)
    join_call_result_39921 = invoke(stypy.reporting.localization.Localization(__file__, 566, 20), join_39917, *[dirpath_39918, d_39919], **kwargs_39920)
    
    # Assigning a type to the variable 'dpath' (line 566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 12), 'dpath', join_call_result_39921)
    
    # Assigning a Call to a Name (line 567):
    
    # Assigning a Call to a Name (line 567):
    
    # Call to rel_path(...): (line 567)
    # Processing the call arguments (line 567)
    # Getting the type of 'dpath' (line 567)
    dpath_39923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 29), 'dpath', False)
    # Getting the type of 'top_path' (line 567)
    top_path_39924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 36), 'top_path', False)
    # Processing the call keyword arguments (line 567)
    kwargs_39925 = {}
    # Getting the type of 'rel_path' (line 567)
    rel_path_39922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 20), 'rel_path', False)
    # Calling rel_path(args, kwargs) (line 567)
    rel_path_call_result_39926 = invoke(stypy.reporting.localization.Localization(__file__, 567, 20), rel_path_39922, *[dpath_39923, top_path_39924], **kwargs_39925)
    
    # Assigning a type to the variable 'rpath' (line 567)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'rpath', rel_path_call_result_39926)
    
    # Assigning a List to a Name (line 568):
    
    # Assigning a List to a Name (line 568):
    
    # Obtaining an instance of the builtin type 'list' (line 568)
    list_39927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 568)
    
    # Assigning a type to the variable 'files' (line 568)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 12), 'files', list_39927)
    
    
    # Call to listdir(...): (line 569)
    # Processing the call arguments (line 569)
    # Getting the type of 'dpath' (line 569)
    dpath_39930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 32), 'dpath', False)
    # Processing the call keyword arguments (line 569)
    kwargs_39931 = {}
    # Getting the type of 'os' (line 569)
    os_39928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 21), 'os', False)
    # Obtaining the member 'listdir' of a type (line 569)
    listdir_39929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 21), os_39928, 'listdir')
    # Calling listdir(args, kwargs) (line 569)
    listdir_call_result_39932 = invoke(stypy.reporting.localization.Localization(__file__, 569, 21), listdir_39929, *[dpath_39930], **kwargs_39931)
    
    # Testing the type of a for loop iterable (line 569)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 569, 12), listdir_call_result_39932)
    # Getting the type of the for loop variable (line 569)
    for_loop_var_39933 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 569, 12), listdir_call_result_39932)
    # Assigning a type to the variable 'f' (line 569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'f', for_loop_var_39933)
    # SSA begins for a for statement (line 569)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 570):
    
    # Assigning a Call to a Name (line 570):
    
    # Call to join(...): (line 570)
    # Processing the call arguments (line 570)
    # Getting the type of 'dpath' (line 570)
    dpath_39937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 34), 'dpath', False)
    # Getting the type of 'f' (line 570)
    f_39938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 41), 'f', False)
    # Processing the call keyword arguments (line 570)
    kwargs_39939 = {}
    # Getting the type of 'os' (line 570)
    os_39934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 21), 'os', False)
    # Obtaining the member 'path' of a type (line 570)
    path_39935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 21), os_39934, 'path')
    # Obtaining the member 'join' of a type (line 570)
    join_39936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 21), path_39935, 'join')
    # Calling join(args, kwargs) (line 570)
    join_call_result_39940 = invoke(stypy.reporting.localization.Localization(__file__, 570, 21), join_39936, *[dpath_39937, f_39938], **kwargs_39939)
    
    # Assigning a type to the variable 'fn' (line 570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 16), 'fn', join_call_result_39940)
    
    
    # Evaluating a boolean operation
    
    # Call to isfile(...): (line 571)
    # Processing the call arguments (line 571)
    # Getting the type of 'fn' (line 571)
    fn_39944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 34), 'fn', False)
    # Processing the call keyword arguments (line 571)
    kwargs_39945 = {}
    # Getting the type of 'os' (line 571)
    os_39941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 19), 'os', False)
    # Obtaining the member 'path' of a type (line 571)
    path_39942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 19), os_39941, 'path')
    # Obtaining the member 'isfile' of a type (line 571)
    isfile_39943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 19), path_39942, 'isfile')
    # Calling isfile(args, kwargs) (line 571)
    isfile_call_result_39946 = invoke(stypy.reporting.localization.Localization(__file__, 571, 19), isfile_39943, *[fn_39944], **kwargs_39945)
    
    
    
    # Call to search(...): (line 571)
    # Processing the call arguments (line 571)
    # Getting the type of 'fn' (line 571)
    fn_39949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 68), 'fn', False)
    # Processing the call keyword arguments (line 571)
    kwargs_39950 = {}
    # Getting the type of 'prune_file_pat' (line 571)
    prune_file_pat_39947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 46), 'prune_file_pat', False)
    # Obtaining the member 'search' of a type (line 571)
    search_39948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 46), prune_file_pat_39947, 'search')
    # Calling search(args, kwargs) (line 571)
    search_call_result_39951 = invoke(stypy.reporting.localization.Localization(__file__, 571, 46), search_39948, *[fn_39949], **kwargs_39950)
    
    # Applying the 'not' unary operator (line 571)
    result_not__39952 = python_operator(stypy.reporting.localization.Localization(__file__, 571, 42), 'not', search_call_result_39951)
    
    # Applying the binary operator 'and' (line 571)
    result_and_keyword_39953 = python_operator(stypy.reporting.localization.Localization(__file__, 571, 19), 'and', isfile_call_result_39946, result_not__39952)
    
    # Testing the type of an if condition (line 571)
    if_condition_39954 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 571, 16), result_and_keyword_39953)
    # Assigning a type to the variable 'if_condition_39954' (line 571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 16), 'if_condition_39954', if_condition_39954)
    # SSA begins for if statement (line 571)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 572)
    # Processing the call arguments (line 572)
    # Getting the type of 'fn' (line 572)
    fn_39957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 33), 'fn', False)
    # Processing the call keyword arguments (line 572)
    kwargs_39958 = {}
    # Getting the type of 'files' (line 572)
    files_39955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 20), 'files', False)
    # Obtaining the member 'append' of a type (line 572)
    append_39956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 20), files_39955, 'append')
    # Calling append(args, kwargs) (line 572)
    append_call_result_39959 = invoke(stypy.reporting.localization.Localization(__file__, 572, 20), append_39956, *[fn_39957], **kwargs_39958)
    
    # SSA join for if statement (line 571)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 573)
    tuple_39960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 573)
    # Adding element type (line 573)
    # Getting the type of 'rpath' (line 573)
    rpath_39961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 18), 'rpath')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 573, 18), tuple_39960, rpath_39961)
    # Adding element type (line 573)
    # Getting the type of 'files' (line 573)
    files_39962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 25), 'files')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 573, 18), tuple_39960, files_39962)
    
    GeneratorType_39963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 12), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 573, 12), GeneratorType_39963, tuple_39960)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 12), 'stypy_return_type', GeneratorType_39963)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 574):
    
    # Assigning a Name to a Name (line 574):
    # Getting the type of 'top_path' (line 574)
    top_path_39964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 12), 'top_path')
    # Assigning a type to the variable 'dpath' (line 574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 4), 'dpath', top_path_39964)
    
    # Assigning a Call to a Name (line 575):
    
    # Assigning a Call to a Name (line 575):
    
    # Call to rel_path(...): (line 575)
    # Processing the call arguments (line 575)
    # Getting the type of 'dpath' (line 575)
    dpath_39966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 21), 'dpath', False)
    # Getting the type of 'top_path' (line 575)
    top_path_39967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 28), 'top_path', False)
    # Processing the call keyword arguments (line 575)
    kwargs_39968 = {}
    # Getting the type of 'rel_path' (line 575)
    rel_path_39965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 12), 'rel_path', False)
    # Calling rel_path(args, kwargs) (line 575)
    rel_path_call_result_39969 = invoke(stypy.reporting.localization.Localization(__file__, 575, 12), rel_path_39965, *[dpath_39966, top_path_39967], **kwargs_39968)
    
    # Assigning a type to the variable 'rpath' (line 575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 4), 'rpath', rel_path_call_result_39969)
    
    # Assigning a ListComp to a Name (line 576):
    
    # Assigning a ListComp to a Name (line 576):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to listdir(...): (line 576)
    # Processing the call arguments (line 576)
    # Getting the type of 'dpath' (line 576)
    dpath_39985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 60), 'dpath', False)
    # Processing the call keyword arguments (line 576)
    kwargs_39986 = {}
    # Getting the type of 'os' (line 576)
    os_39983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 49), 'os', False)
    # Obtaining the member 'listdir' of a type (line 576)
    listdir_39984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 49), os_39983, 'listdir')
    # Calling listdir(args, kwargs) (line 576)
    listdir_call_result_39987 = invoke(stypy.reporting.localization.Localization(__file__, 576, 49), listdir_39984, *[dpath_39985], **kwargs_39986)
    
    comprehension_39988 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 17), listdir_call_result_39987)
    # Assigning a type to the variable 'f' (line 576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 17), 'f', comprehension_39988)
    
    
    # Call to search(...): (line 577)
    # Processing the call arguments (line 577)
    # Getting the type of 'f' (line 577)
    f_39979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 46), 'f', False)
    # Processing the call keyword arguments (line 577)
    kwargs_39980 = {}
    # Getting the type of 'prune_file_pat' (line 577)
    prune_file_pat_39977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 24), 'prune_file_pat', False)
    # Obtaining the member 'search' of a type (line 577)
    search_39978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 24), prune_file_pat_39977, 'search')
    # Calling search(args, kwargs) (line 577)
    search_call_result_39981 = invoke(stypy.reporting.localization.Localization(__file__, 577, 24), search_39978, *[f_39979], **kwargs_39980)
    
    # Applying the 'not' unary operator (line 577)
    result_not__39982 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 20), 'not', search_call_result_39981)
    
    
    # Call to join(...): (line 576)
    # Processing the call arguments (line 576)
    # Getting the type of 'dpath' (line 576)
    dpath_39973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 30), 'dpath', False)
    # Getting the type of 'f' (line 576)
    f_39974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 37), 'f', False)
    # Processing the call keyword arguments (line 576)
    kwargs_39975 = {}
    # Getting the type of 'os' (line 576)
    os_39970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 17), 'os', False)
    # Obtaining the member 'path' of a type (line 576)
    path_39971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 17), os_39970, 'path')
    # Obtaining the member 'join' of a type (line 576)
    join_39972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 17), path_39971, 'join')
    # Calling join(args, kwargs) (line 576)
    join_call_result_39976 = invoke(stypy.reporting.localization.Localization(__file__, 576, 17), join_39972, *[dpath_39973, f_39974], **kwargs_39975)
    
    list_39989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 17), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 17), list_39989, join_call_result_39976)
    # Assigning a type to the variable 'filenames' (line 576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 4), 'filenames', list_39989)
    
    # Assigning a ListComp to a Name (line 578):
    
    # Assigning a ListComp to a Name (line 578):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'filenames' (line 578)
    filenames_39997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 24), 'filenames')
    comprehension_39998 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 578, 13), filenames_39997)
    # Assigning a type to the variable 'f' (line 578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 13), 'f', comprehension_39998)
    
    # Call to isfile(...): (line 578)
    # Processing the call arguments (line 578)
    # Getting the type of 'f' (line 578)
    f_39994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 52), 'f', False)
    # Processing the call keyword arguments (line 578)
    kwargs_39995 = {}
    # Getting the type of 'os' (line 578)
    os_39991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 37), 'os', False)
    # Obtaining the member 'path' of a type (line 578)
    path_39992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 37), os_39991, 'path')
    # Obtaining the member 'isfile' of a type (line 578)
    isfile_39993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 37), path_39992, 'isfile')
    # Calling isfile(args, kwargs) (line 578)
    isfile_call_result_39996 = invoke(stypy.reporting.localization.Localization(__file__, 578, 37), isfile_39993, *[f_39994], **kwargs_39995)
    
    # Getting the type of 'f' (line 578)
    f_39990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 13), 'f')
    list_39999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 13), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 578, 13), list_39999, f_39990)
    # Assigning a type to the variable 'files' (line 578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 4), 'files', list_39999)
    # Creating a generator
    
    # Obtaining an instance of the builtin type 'tuple' (line 579)
    tuple_40000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 10), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 579)
    # Adding element type (line 579)
    # Getting the type of 'rpath' (line 579)
    rpath_40001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 10), 'rpath')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 579, 10), tuple_40000, rpath_40001)
    # Adding element type (line 579)
    # Getting the type of 'files' (line 579)
    files_40002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 17), 'files')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 579, 10), tuple_40000, files_40002)
    
    GeneratorType_40003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 4), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 579, 4), GeneratorType_40003, tuple_40000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 4), 'stypy_return_type', GeneratorType_40003)
    
    # ################# End of 'general_source_directories_files(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'general_source_directories_files' in the type store
    # Getting the type of 'stypy_return_type' (line 556)
    stypy_return_type_40004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_40004)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'general_source_directories_files'
    return stypy_return_type_40004

# Assigning a type to the variable 'general_source_directories_files' (line 556)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 0), 'general_source_directories_files', general_source_directories_files)

@norecursion
def get_ext_source_files(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_ext_source_files'
    module_type_store = module_type_store.open_function_context('get_ext_source_files', 582, 0, False)
    
    # Passed parameters checking function
    get_ext_source_files.stypy_localization = localization
    get_ext_source_files.stypy_type_of_self = None
    get_ext_source_files.stypy_type_store = module_type_store
    get_ext_source_files.stypy_function_name = 'get_ext_source_files'
    get_ext_source_files.stypy_param_names_list = ['ext']
    get_ext_source_files.stypy_varargs_param_name = None
    get_ext_source_files.stypy_kwargs_param_name = None
    get_ext_source_files.stypy_call_defaults = defaults
    get_ext_source_files.stypy_call_varargs = varargs
    get_ext_source_files.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_ext_source_files', ['ext'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_ext_source_files', localization, ['ext'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_ext_source_files(...)' code ##################

    
    # Assigning a List to a Name (line 584):
    
    # Assigning a List to a Name (line 584):
    
    # Obtaining an instance of the builtin type 'list' (line 584)
    list_40005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 584)
    
    # Assigning a type to the variable 'filenames' (line 584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 4), 'filenames', list_40005)
    
    # Assigning a ListComp to a Name (line 585):
    
    # Assigning a ListComp to a Name (line 585):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'ext' (line 585)
    ext_40011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 28), 'ext')
    # Obtaining the member 'sources' of a type (line 585)
    sources_40012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 28), ext_40011, 'sources')
    comprehension_40013 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 15), sources_40012)
    # Assigning a type to the variable '_m' (line 585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 15), '_m', comprehension_40013)
    
    # Call to is_string(...): (line 585)
    # Processing the call arguments (line 585)
    # Getting the type of '_m' (line 585)
    _m_40008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 53), '_m', False)
    # Processing the call keyword arguments (line 585)
    kwargs_40009 = {}
    # Getting the type of 'is_string' (line 585)
    is_string_40007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 43), 'is_string', False)
    # Calling is_string(args, kwargs) (line 585)
    is_string_call_result_40010 = invoke(stypy.reporting.localization.Localization(__file__, 585, 43), is_string_40007, *[_m_40008], **kwargs_40009)
    
    # Getting the type of '_m' (line 585)
    _m_40006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 15), '_m')
    list_40014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 15), list_40014, _m_40006)
    # Assigning a type to the variable 'sources' (line 585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 4), 'sources', list_40014)
    
    # Call to extend(...): (line 586)
    # Processing the call arguments (line 586)
    # Getting the type of 'sources' (line 586)
    sources_40017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 21), 'sources', False)
    # Processing the call keyword arguments (line 586)
    kwargs_40018 = {}
    # Getting the type of 'filenames' (line 586)
    filenames_40015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 4), 'filenames', False)
    # Obtaining the member 'extend' of a type (line 586)
    extend_40016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 4), filenames_40015, 'extend')
    # Calling extend(args, kwargs) (line 586)
    extend_call_result_40019 = invoke(stypy.reporting.localization.Localization(__file__, 586, 4), extend_40016, *[sources_40017], **kwargs_40018)
    
    
    # Call to extend(...): (line 587)
    # Processing the call arguments (line 587)
    
    # Call to get_dependencies(...): (line 587)
    # Processing the call arguments (line 587)
    # Getting the type of 'sources' (line 587)
    sources_40023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 38), 'sources', False)
    # Processing the call keyword arguments (line 587)
    kwargs_40024 = {}
    # Getting the type of 'get_dependencies' (line 587)
    get_dependencies_40022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 21), 'get_dependencies', False)
    # Calling get_dependencies(args, kwargs) (line 587)
    get_dependencies_call_result_40025 = invoke(stypy.reporting.localization.Localization(__file__, 587, 21), get_dependencies_40022, *[sources_40023], **kwargs_40024)
    
    # Processing the call keyword arguments (line 587)
    kwargs_40026 = {}
    # Getting the type of 'filenames' (line 587)
    filenames_40020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'filenames', False)
    # Obtaining the member 'extend' of a type (line 587)
    extend_40021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 4), filenames_40020, 'extend')
    # Calling extend(args, kwargs) (line 587)
    extend_call_result_40027 = invoke(stypy.reporting.localization.Localization(__file__, 587, 4), extend_40021, *[get_dependencies_call_result_40025], **kwargs_40026)
    
    
    # Getting the type of 'ext' (line 588)
    ext_40028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 13), 'ext')
    # Obtaining the member 'depends' of a type (line 588)
    depends_40029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 13), ext_40028, 'depends')
    # Testing the type of a for loop iterable (line 588)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 588, 4), depends_40029)
    # Getting the type of the for loop variable (line 588)
    for_loop_var_40030 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 588, 4), depends_40029)
    # Assigning a type to the variable 'd' (line 588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 4), 'd', for_loop_var_40030)
    # SSA begins for a for statement (line 588)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to is_local_src_dir(...): (line 589)
    # Processing the call arguments (line 589)
    # Getting the type of 'd' (line 589)
    d_40032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 28), 'd', False)
    # Processing the call keyword arguments (line 589)
    kwargs_40033 = {}
    # Getting the type of 'is_local_src_dir' (line 589)
    is_local_src_dir_40031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 11), 'is_local_src_dir', False)
    # Calling is_local_src_dir(args, kwargs) (line 589)
    is_local_src_dir_call_result_40034 = invoke(stypy.reporting.localization.Localization(__file__, 589, 11), is_local_src_dir_40031, *[d_40032], **kwargs_40033)
    
    # Testing the type of an if condition (line 589)
    if_condition_40035 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 589, 8), is_local_src_dir_call_result_40034)
    # Assigning a type to the variable 'if_condition_40035' (line 589)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'if_condition_40035', if_condition_40035)
    # SSA begins for if statement (line 589)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 590)
    # Processing the call arguments (line 590)
    
    # Call to list(...): (line 590)
    # Processing the call arguments (line 590)
    
    # Call to general_source_files(...): (line 590)
    # Processing the call arguments (line 590)
    # Getting the type of 'd' (line 590)
    d_40040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 55), 'd', False)
    # Processing the call keyword arguments (line 590)
    kwargs_40041 = {}
    # Getting the type of 'general_source_files' (line 590)
    general_source_files_40039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 34), 'general_source_files', False)
    # Calling general_source_files(args, kwargs) (line 590)
    general_source_files_call_result_40042 = invoke(stypy.reporting.localization.Localization(__file__, 590, 34), general_source_files_40039, *[d_40040], **kwargs_40041)
    
    # Processing the call keyword arguments (line 590)
    kwargs_40043 = {}
    # Getting the type of 'list' (line 590)
    list_40038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 29), 'list', False)
    # Calling list(args, kwargs) (line 590)
    list_call_result_40044 = invoke(stypy.reporting.localization.Localization(__file__, 590, 29), list_40038, *[general_source_files_call_result_40042], **kwargs_40043)
    
    # Processing the call keyword arguments (line 590)
    kwargs_40045 = {}
    # Getting the type of 'filenames' (line 590)
    filenames_40036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 12), 'filenames', False)
    # Obtaining the member 'extend' of a type (line 590)
    extend_40037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 12), filenames_40036, 'extend')
    # Calling extend(args, kwargs) (line 590)
    extend_call_result_40046 = invoke(stypy.reporting.localization.Localization(__file__, 590, 12), extend_40037, *[list_call_result_40044], **kwargs_40045)
    
    # SSA branch for the else part of an if statement (line 589)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isfile(...): (line 591)
    # Processing the call arguments (line 591)
    # Getting the type of 'd' (line 591)
    d_40050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 28), 'd', False)
    # Processing the call keyword arguments (line 591)
    kwargs_40051 = {}
    # Getting the type of 'os' (line 591)
    os_40047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 13), 'os', False)
    # Obtaining the member 'path' of a type (line 591)
    path_40048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 13), os_40047, 'path')
    # Obtaining the member 'isfile' of a type (line 591)
    isfile_40049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 13), path_40048, 'isfile')
    # Calling isfile(args, kwargs) (line 591)
    isfile_call_result_40052 = invoke(stypy.reporting.localization.Localization(__file__, 591, 13), isfile_40049, *[d_40050], **kwargs_40051)
    
    # Testing the type of an if condition (line 591)
    if_condition_40053 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 591, 13), isfile_call_result_40052)
    # Assigning a type to the variable 'if_condition_40053' (line 591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 13), 'if_condition_40053', if_condition_40053)
    # SSA begins for if statement (line 591)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 592)
    # Processing the call arguments (line 592)
    # Getting the type of 'd' (line 592)
    d_40056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 29), 'd', False)
    # Processing the call keyword arguments (line 592)
    kwargs_40057 = {}
    # Getting the type of 'filenames' (line 592)
    filenames_40054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 12), 'filenames', False)
    # Obtaining the member 'append' of a type (line 592)
    append_40055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 12), filenames_40054, 'append')
    # Calling append(args, kwargs) (line 592)
    append_call_result_40058 = invoke(stypy.reporting.localization.Localization(__file__, 592, 12), append_40055, *[d_40056], **kwargs_40057)
    
    # SSA join for if statement (line 591)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 589)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'filenames' (line 593)
    filenames_40059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 11), 'filenames')
    # Assigning a type to the variable 'stypy_return_type' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 4), 'stypy_return_type', filenames_40059)
    
    # ################# End of 'get_ext_source_files(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_ext_source_files' in the type store
    # Getting the type of 'stypy_return_type' (line 582)
    stypy_return_type_40060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_40060)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_ext_source_files'
    return stypy_return_type_40060

# Assigning a type to the variable 'get_ext_source_files' (line 582)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 0), 'get_ext_source_files', get_ext_source_files)

@norecursion
def get_script_files(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_script_files'
    module_type_store = module_type_store.open_function_context('get_script_files', 595, 0, False)
    
    # Passed parameters checking function
    get_script_files.stypy_localization = localization
    get_script_files.stypy_type_of_self = None
    get_script_files.stypy_type_store = module_type_store
    get_script_files.stypy_function_name = 'get_script_files'
    get_script_files.stypy_param_names_list = ['scripts']
    get_script_files.stypy_varargs_param_name = None
    get_script_files.stypy_kwargs_param_name = None
    get_script_files.stypy_call_defaults = defaults
    get_script_files.stypy_call_varargs = varargs
    get_script_files.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_script_files', ['scripts'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_script_files', localization, ['scripts'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_script_files(...)' code ##################

    
    # Assigning a ListComp to a Name (line 596):
    
    # Assigning a ListComp to a Name (line 596):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'scripts' (line 596)
    scripts_40066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 28), 'scripts')
    comprehension_40067 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 596, 15), scripts_40066)
    # Assigning a type to the variable '_m' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 15), '_m', comprehension_40067)
    
    # Call to is_string(...): (line 596)
    # Processing the call arguments (line 596)
    # Getting the type of '_m' (line 596)
    _m_40063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 49), '_m', False)
    # Processing the call keyword arguments (line 596)
    kwargs_40064 = {}
    # Getting the type of 'is_string' (line 596)
    is_string_40062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 39), 'is_string', False)
    # Calling is_string(args, kwargs) (line 596)
    is_string_call_result_40065 = invoke(stypy.reporting.localization.Localization(__file__, 596, 39), is_string_40062, *[_m_40063], **kwargs_40064)
    
    # Getting the type of '_m' (line 596)
    _m_40061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 15), '_m')
    list_40068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 596, 15), list_40068, _m_40061)
    # Assigning a type to the variable 'scripts' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'scripts', list_40068)
    # Getting the type of 'scripts' (line 597)
    scripts_40069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 11), 'scripts')
    # Assigning a type to the variable 'stypy_return_type' (line 597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 4), 'stypy_return_type', scripts_40069)
    
    # ################# End of 'get_script_files(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_script_files' in the type store
    # Getting the type of 'stypy_return_type' (line 595)
    stypy_return_type_40070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_40070)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_script_files'
    return stypy_return_type_40070

# Assigning a type to the variable 'get_script_files' (line 595)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 0), 'get_script_files', get_script_files)

@norecursion
def get_lib_source_files(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_lib_source_files'
    module_type_store = module_type_store.open_function_context('get_lib_source_files', 599, 0, False)
    
    # Passed parameters checking function
    get_lib_source_files.stypy_localization = localization
    get_lib_source_files.stypy_type_of_self = None
    get_lib_source_files.stypy_type_store = module_type_store
    get_lib_source_files.stypy_function_name = 'get_lib_source_files'
    get_lib_source_files.stypy_param_names_list = ['lib']
    get_lib_source_files.stypy_varargs_param_name = None
    get_lib_source_files.stypy_kwargs_param_name = None
    get_lib_source_files.stypy_call_defaults = defaults
    get_lib_source_files.stypy_call_varargs = varargs
    get_lib_source_files.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_lib_source_files', ['lib'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_lib_source_files', localization, ['lib'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_lib_source_files(...)' code ##################

    
    # Assigning a List to a Name (line 600):
    
    # Assigning a List to a Name (line 600):
    
    # Obtaining an instance of the builtin type 'list' (line 600)
    list_40071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 600)
    
    # Assigning a type to the variable 'filenames' (line 600)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 4), 'filenames', list_40071)
    
    # Assigning a Call to a Name (line 601):
    
    # Assigning a Call to a Name (line 601):
    
    # Call to get(...): (line 601)
    # Processing the call arguments (line 601)
    str_40077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 25), 'str', 'sources')
    
    # Obtaining an instance of the builtin type 'list' (line 601)
    list_40078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 36), 'list')
    # Adding type elements to the builtin type 'list' instance (line 601)
    
    # Processing the call keyword arguments (line 601)
    kwargs_40079 = {}
    
    # Obtaining the type of the subscript
    int_40072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 18), 'int')
    # Getting the type of 'lib' (line 601)
    lib_40073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 14), 'lib', False)
    # Obtaining the member '__getitem__' of a type (line 601)
    getitem___40074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 14), lib_40073, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 601)
    subscript_call_result_40075 = invoke(stypy.reporting.localization.Localization(__file__, 601, 14), getitem___40074, int_40072)
    
    # Obtaining the member 'get' of a type (line 601)
    get_40076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 14), subscript_call_result_40075, 'get')
    # Calling get(args, kwargs) (line 601)
    get_call_result_40080 = invoke(stypy.reporting.localization.Localization(__file__, 601, 14), get_40076, *[str_40077, list_40078], **kwargs_40079)
    
    # Assigning a type to the variable 'sources' (line 601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 4), 'sources', get_call_result_40080)
    
    # Assigning a ListComp to a Name (line 602):
    
    # Assigning a ListComp to a Name (line 602):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'sources' (line 602)
    sources_40086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 28), 'sources')
    comprehension_40087 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 602, 15), sources_40086)
    # Assigning a type to the variable '_m' (line 602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 15), '_m', comprehension_40087)
    
    # Call to is_string(...): (line 602)
    # Processing the call arguments (line 602)
    # Getting the type of '_m' (line 602)
    _m_40083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 49), '_m', False)
    # Processing the call keyword arguments (line 602)
    kwargs_40084 = {}
    # Getting the type of 'is_string' (line 602)
    is_string_40082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 39), 'is_string', False)
    # Calling is_string(args, kwargs) (line 602)
    is_string_call_result_40085 = invoke(stypy.reporting.localization.Localization(__file__, 602, 39), is_string_40082, *[_m_40083], **kwargs_40084)
    
    # Getting the type of '_m' (line 602)
    _m_40081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 15), '_m')
    list_40088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 602, 15), list_40088, _m_40081)
    # Assigning a type to the variable 'sources' (line 602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'sources', list_40088)
    
    # Call to extend(...): (line 603)
    # Processing the call arguments (line 603)
    # Getting the type of 'sources' (line 603)
    sources_40091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 21), 'sources', False)
    # Processing the call keyword arguments (line 603)
    kwargs_40092 = {}
    # Getting the type of 'filenames' (line 603)
    filenames_40089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 4), 'filenames', False)
    # Obtaining the member 'extend' of a type (line 603)
    extend_40090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 4), filenames_40089, 'extend')
    # Calling extend(args, kwargs) (line 603)
    extend_call_result_40093 = invoke(stypy.reporting.localization.Localization(__file__, 603, 4), extend_40090, *[sources_40091], **kwargs_40092)
    
    
    # Call to extend(...): (line 604)
    # Processing the call arguments (line 604)
    
    # Call to get_dependencies(...): (line 604)
    # Processing the call arguments (line 604)
    # Getting the type of 'sources' (line 604)
    sources_40097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 38), 'sources', False)
    # Processing the call keyword arguments (line 604)
    kwargs_40098 = {}
    # Getting the type of 'get_dependencies' (line 604)
    get_dependencies_40096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 21), 'get_dependencies', False)
    # Calling get_dependencies(args, kwargs) (line 604)
    get_dependencies_call_result_40099 = invoke(stypy.reporting.localization.Localization(__file__, 604, 21), get_dependencies_40096, *[sources_40097], **kwargs_40098)
    
    # Processing the call keyword arguments (line 604)
    kwargs_40100 = {}
    # Getting the type of 'filenames' (line 604)
    filenames_40094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 4), 'filenames', False)
    # Obtaining the member 'extend' of a type (line 604)
    extend_40095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 4), filenames_40094, 'extend')
    # Calling extend(args, kwargs) (line 604)
    extend_call_result_40101 = invoke(stypy.reporting.localization.Localization(__file__, 604, 4), extend_40095, *[get_dependencies_call_result_40099], **kwargs_40100)
    
    
    # Assigning a Call to a Name (line 605):
    
    # Assigning a Call to a Name (line 605):
    
    # Call to get(...): (line 605)
    # Processing the call arguments (line 605)
    str_40107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 25), 'str', 'depends')
    
    # Obtaining an instance of the builtin type 'list' (line 605)
    list_40108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 36), 'list')
    # Adding type elements to the builtin type 'list' instance (line 605)
    
    # Processing the call keyword arguments (line 605)
    kwargs_40109 = {}
    
    # Obtaining the type of the subscript
    int_40102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 18), 'int')
    # Getting the type of 'lib' (line 605)
    lib_40103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 14), 'lib', False)
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___40104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 14), lib_40103, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_40105 = invoke(stypy.reporting.localization.Localization(__file__, 605, 14), getitem___40104, int_40102)
    
    # Obtaining the member 'get' of a type (line 605)
    get_40106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 14), subscript_call_result_40105, 'get')
    # Calling get(args, kwargs) (line 605)
    get_call_result_40110 = invoke(stypy.reporting.localization.Localization(__file__, 605, 14), get_40106, *[str_40107, list_40108], **kwargs_40109)
    
    # Assigning a type to the variable 'depends' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 4), 'depends', get_call_result_40110)
    
    # Getting the type of 'depends' (line 606)
    depends_40111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 13), 'depends')
    # Testing the type of a for loop iterable (line 606)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 606, 4), depends_40111)
    # Getting the type of the for loop variable (line 606)
    for_loop_var_40112 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 606, 4), depends_40111)
    # Assigning a type to the variable 'd' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 4), 'd', for_loop_var_40112)
    # SSA begins for a for statement (line 606)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to is_local_src_dir(...): (line 607)
    # Processing the call arguments (line 607)
    # Getting the type of 'd' (line 607)
    d_40114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 28), 'd', False)
    # Processing the call keyword arguments (line 607)
    kwargs_40115 = {}
    # Getting the type of 'is_local_src_dir' (line 607)
    is_local_src_dir_40113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 11), 'is_local_src_dir', False)
    # Calling is_local_src_dir(args, kwargs) (line 607)
    is_local_src_dir_call_result_40116 = invoke(stypy.reporting.localization.Localization(__file__, 607, 11), is_local_src_dir_40113, *[d_40114], **kwargs_40115)
    
    # Testing the type of an if condition (line 607)
    if_condition_40117 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 607, 8), is_local_src_dir_call_result_40116)
    # Assigning a type to the variable 'if_condition_40117' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'if_condition_40117', if_condition_40117)
    # SSA begins for if statement (line 607)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 608)
    # Processing the call arguments (line 608)
    
    # Call to list(...): (line 608)
    # Processing the call arguments (line 608)
    
    # Call to general_source_files(...): (line 608)
    # Processing the call arguments (line 608)
    # Getting the type of 'd' (line 608)
    d_40122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 55), 'd', False)
    # Processing the call keyword arguments (line 608)
    kwargs_40123 = {}
    # Getting the type of 'general_source_files' (line 608)
    general_source_files_40121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 34), 'general_source_files', False)
    # Calling general_source_files(args, kwargs) (line 608)
    general_source_files_call_result_40124 = invoke(stypy.reporting.localization.Localization(__file__, 608, 34), general_source_files_40121, *[d_40122], **kwargs_40123)
    
    # Processing the call keyword arguments (line 608)
    kwargs_40125 = {}
    # Getting the type of 'list' (line 608)
    list_40120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 29), 'list', False)
    # Calling list(args, kwargs) (line 608)
    list_call_result_40126 = invoke(stypy.reporting.localization.Localization(__file__, 608, 29), list_40120, *[general_source_files_call_result_40124], **kwargs_40125)
    
    # Processing the call keyword arguments (line 608)
    kwargs_40127 = {}
    # Getting the type of 'filenames' (line 608)
    filenames_40118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 12), 'filenames', False)
    # Obtaining the member 'extend' of a type (line 608)
    extend_40119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 12), filenames_40118, 'extend')
    # Calling extend(args, kwargs) (line 608)
    extend_call_result_40128 = invoke(stypy.reporting.localization.Localization(__file__, 608, 12), extend_40119, *[list_call_result_40126], **kwargs_40127)
    
    # SSA branch for the else part of an if statement (line 607)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isfile(...): (line 609)
    # Processing the call arguments (line 609)
    # Getting the type of 'd' (line 609)
    d_40132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 28), 'd', False)
    # Processing the call keyword arguments (line 609)
    kwargs_40133 = {}
    # Getting the type of 'os' (line 609)
    os_40129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 13), 'os', False)
    # Obtaining the member 'path' of a type (line 609)
    path_40130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 13), os_40129, 'path')
    # Obtaining the member 'isfile' of a type (line 609)
    isfile_40131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 13), path_40130, 'isfile')
    # Calling isfile(args, kwargs) (line 609)
    isfile_call_result_40134 = invoke(stypy.reporting.localization.Localization(__file__, 609, 13), isfile_40131, *[d_40132], **kwargs_40133)
    
    # Testing the type of an if condition (line 609)
    if_condition_40135 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 609, 13), isfile_call_result_40134)
    # Assigning a type to the variable 'if_condition_40135' (line 609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 13), 'if_condition_40135', if_condition_40135)
    # SSA begins for if statement (line 609)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 610)
    # Processing the call arguments (line 610)
    # Getting the type of 'd' (line 610)
    d_40138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 29), 'd', False)
    # Processing the call keyword arguments (line 610)
    kwargs_40139 = {}
    # Getting the type of 'filenames' (line 610)
    filenames_40136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 12), 'filenames', False)
    # Obtaining the member 'append' of a type (line 610)
    append_40137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 12), filenames_40136, 'append')
    # Calling append(args, kwargs) (line 610)
    append_call_result_40140 = invoke(stypy.reporting.localization.Localization(__file__, 610, 12), append_40137, *[d_40138], **kwargs_40139)
    
    # SSA join for if statement (line 609)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 607)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'filenames' (line 611)
    filenames_40141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 11), 'filenames')
    # Assigning a type to the variable 'stypy_return_type' (line 611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 4), 'stypy_return_type', filenames_40141)
    
    # ################# End of 'get_lib_source_files(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_lib_source_files' in the type store
    # Getting the type of 'stypy_return_type' (line 599)
    stypy_return_type_40142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_40142)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_lib_source_files'
    return stypy_return_type_40142

# Assigning a type to the variable 'get_lib_source_files' (line 599)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 0), 'get_lib_source_files', get_lib_source_files)

@norecursion
def get_shared_lib_extension(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 613)
    False_40143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 43), 'False')
    defaults = [False_40143]
    # Create a new context for function 'get_shared_lib_extension'
    module_type_store = module_type_store.open_function_context('get_shared_lib_extension', 613, 0, False)
    
    # Passed parameters checking function
    get_shared_lib_extension.stypy_localization = localization
    get_shared_lib_extension.stypy_type_of_self = None
    get_shared_lib_extension.stypy_type_store = module_type_store
    get_shared_lib_extension.stypy_function_name = 'get_shared_lib_extension'
    get_shared_lib_extension.stypy_param_names_list = ['is_python_ext']
    get_shared_lib_extension.stypy_varargs_param_name = None
    get_shared_lib_extension.stypy_kwargs_param_name = None
    get_shared_lib_extension.stypy_call_defaults = defaults
    get_shared_lib_extension.stypy_call_varargs = varargs
    get_shared_lib_extension.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_shared_lib_extension', ['is_python_ext'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_shared_lib_extension', localization, ['is_python_ext'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_shared_lib_extension(...)' code ##################

    str_40144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 633, (-1)), 'str', "Return the correct file extension for shared libraries.\n\n    Parameters\n    ----------\n    is_python_ext : bool, optional\n        Whether the shared library is a Python extension.  Default is False.\n\n    Returns\n    -------\n    so_ext : str\n        The shared library extension.\n\n    Notes\n    -----\n    For Python shared libs, `so_ext` will typically be '.so' on Linux and OS X,\n    and '.pyd' on Windows.  For Python >= 3.2 `so_ext` has a tag prepended on\n    POSIX systems according to PEP 3149.  For Python 3.2 this is implemented on\n    Linux, but not on OS X.\n\n    ")
    
    # Assigning a Call to a Name (line 634):
    
    # Assigning a Call to a Name (line 634):
    
    # Call to get_config_vars(...): (line 634)
    # Processing the call keyword arguments (line 634)
    kwargs_40148 = {}
    # Getting the type of 'distutils' (line 634)
    distutils_40145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 15), 'distutils', False)
    # Obtaining the member 'sysconfig' of a type (line 634)
    sysconfig_40146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 15), distutils_40145, 'sysconfig')
    # Obtaining the member 'get_config_vars' of a type (line 634)
    get_config_vars_40147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 15), sysconfig_40146, 'get_config_vars')
    # Calling get_config_vars(args, kwargs) (line 634)
    get_config_vars_call_result_40149 = invoke(stypy.reporting.localization.Localization(__file__, 634, 15), get_config_vars_40147, *[], **kwargs_40148)
    
    # Assigning a type to the variable 'confvars' (line 634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 4), 'confvars', get_config_vars_call_result_40149)
    
    # Assigning a Call to a Name (line 636):
    
    # Assigning a Call to a Name (line 636):
    
    # Call to get(...): (line 636)
    # Processing the call arguments (line 636)
    str_40152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 26), 'str', 'EXT_SUFFIX')
    # Getting the type of 'None' (line 636)
    None_40153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 40), 'None', False)
    # Processing the call keyword arguments (line 636)
    kwargs_40154 = {}
    # Getting the type of 'confvars' (line 636)
    confvars_40150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 13), 'confvars', False)
    # Obtaining the member 'get' of a type (line 636)
    get_40151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 13), confvars_40150, 'get')
    # Calling get(args, kwargs) (line 636)
    get_call_result_40155 = invoke(stypy.reporting.localization.Localization(__file__, 636, 13), get_40151, *[str_40152, None_40153], **kwargs_40154)
    
    # Assigning a type to the variable 'so_ext' (line 636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'so_ext', get_call_result_40155)
    
    # Type idiom detected: calculating its left and rigth part (line 637)
    # Getting the type of 'so_ext' (line 637)
    so_ext_40156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 7), 'so_ext')
    # Getting the type of 'None' (line 637)
    None_40157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 17), 'None')
    
    (may_be_40158, more_types_in_union_40159) = may_be_none(so_ext_40156, None_40157)

    if may_be_40158:

        if more_types_in_union_40159:
            # Runtime conditional SSA (line 637)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 638):
        
        # Assigning a Call to a Name (line 638):
        
        # Call to get(...): (line 638)
        # Processing the call arguments (line 638)
        str_40162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 30), 'str', 'SO')
        str_40163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 36), 'str', '')
        # Processing the call keyword arguments (line 638)
        kwargs_40164 = {}
        # Getting the type of 'confvars' (line 638)
        confvars_40160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 17), 'confvars', False)
        # Obtaining the member 'get' of a type (line 638)
        get_40161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 17), confvars_40160, 'get')
        # Calling get(args, kwargs) (line 638)
        get_call_result_40165 = invoke(stypy.reporting.localization.Localization(__file__, 638, 17), get_40161, *[str_40162, str_40163], **kwargs_40164)
        
        # Assigning a type to the variable 'so_ext' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'so_ext', get_call_result_40165)

        if more_types_in_union_40159:
            # SSA join for if statement (line 637)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'is_python_ext' (line 640)
    is_python_ext_40166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 11), 'is_python_ext')
    # Applying the 'not' unary operator (line 640)
    result_not__40167 = python_operator(stypy.reporting.localization.Localization(__file__, 640, 7), 'not', is_python_ext_40166)
    
    # Testing the type of an if condition (line 640)
    if_condition_40168 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 640, 4), result_not__40167)
    # Assigning a type to the variable 'if_condition_40168' (line 640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 4), 'if_condition_40168', if_condition_40168)
    # SSA begins for if statement (line 640)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Call to startswith(...): (line 644)
    # Processing the call arguments (line 644)
    str_40172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 36), 'str', 'linux')
    # Processing the call keyword arguments (line 644)
    kwargs_40173 = {}
    # Getting the type of 'sys' (line 644)
    sys_40169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 12), 'sys', False)
    # Obtaining the member 'platform' of a type (line 644)
    platform_40170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 12), sys_40169, 'platform')
    # Obtaining the member 'startswith' of a type (line 644)
    startswith_40171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 12), platform_40170, 'startswith')
    # Calling startswith(args, kwargs) (line 644)
    startswith_call_result_40174 = invoke(stypy.reporting.localization.Localization(__file__, 644, 12), startswith_40171, *[str_40172], **kwargs_40173)
    
    
    # Call to startswith(...): (line 645)
    # Processing the call arguments (line 645)
    str_40178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 36), 'str', 'gnukfreebsd')
    # Processing the call keyword arguments (line 645)
    kwargs_40179 = {}
    # Getting the type of 'sys' (line 645)
    sys_40175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 12), 'sys', False)
    # Obtaining the member 'platform' of a type (line 645)
    platform_40176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 12), sys_40175, 'platform')
    # Obtaining the member 'startswith' of a type (line 645)
    startswith_40177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 12), platform_40176, 'startswith')
    # Calling startswith(args, kwargs) (line 645)
    startswith_call_result_40180 = invoke(stypy.reporting.localization.Localization(__file__, 645, 12), startswith_40177, *[str_40178], **kwargs_40179)
    
    # Applying the binary operator 'or' (line 644)
    result_or_keyword_40181 = python_operator(stypy.reporting.localization.Localization(__file__, 644, 12), 'or', startswith_call_result_40174, startswith_call_result_40180)
    
    # Testing the type of an if condition (line 644)
    if_condition_40182 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 644, 8), result_or_keyword_40181)
    # Assigning a type to the variable 'if_condition_40182' (line 644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 8), 'if_condition_40182', if_condition_40182)
    # SSA begins for if statement (line 644)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 646):
    
    # Assigning a Str to a Name (line 646):
    str_40183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, 21), 'str', '.so')
    # Assigning a type to the variable 'so_ext' (line 646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 12), 'so_ext', str_40183)
    # SSA branch for the else part of an if statement (line 644)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to startswith(...): (line 647)
    # Processing the call arguments (line 647)
    str_40187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 37), 'str', 'darwin')
    # Processing the call keyword arguments (line 647)
    kwargs_40188 = {}
    # Getting the type of 'sys' (line 647)
    sys_40184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 13), 'sys', False)
    # Obtaining the member 'platform' of a type (line 647)
    platform_40185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 13), sys_40184, 'platform')
    # Obtaining the member 'startswith' of a type (line 647)
    startswith_40186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 13), platform_40185, 'startswith')
    # Calling startswith(args, kwargs) (line 647)
    startswith_call_result_40189 = invoke(stypy.reporting.localization.Localization(__file__, 647, 13), startswith_40186, *[str_40187], **kwargs_40188)
    
    # Testing the type of an if condition (line 647)
    if_condition_40190 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 647, 13), startswith_call_result_40189)
    # Assigning a type to the variable 'if_condition_40190' (line 647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 13), 'if_condition_40190', if_condition_40190)
    # SSA begins for if statement (line 647)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 648):
    
    # Assigning a Str to a Name (line 648):
    str_40191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 21), 'str', '.dylib')
    # Assigning a type to the variable 'so_ext' (line 648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'so_ext', str_40191)
    # SSA branch for the else part of an if statement (line 647)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to startswith(...): (line 649)
    # Processing the call arguments (line 649)
    str_40195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 37), 'str', 'win')
    # Processing the call keyword arguments (line 649)
    kwargs_40196 = {}
    # Getting the type of 'sys' (line 649)
    sys_40192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 13), 'sys', False)
    # Obtaining the member 'platform' of a type (line 649)
    platform_40193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 13), sys_40192, 'platform')
    # Obtaining the member 'startswith' of a type (line 649)
    startswith_40194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 13), platform_40193, 'startswith')
    # Calling startswith(args, kwargs) (line 649)
    startswith_call_result_40197 = invoke(stypy.reporting.localization.Localization(__file__, 649, 13), startswith_40194, *[str_40195], **kwargs_40196)
    
    # Testing the type of an if condition (line 649)
    if_condition_40198 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 649, 13), startswith_call_result_40197)
    # Assigning a type to the variable 'if_condition_40198' (line 649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 13), 'if_condition_40198', if_condition_40198)
    # SSA begins for if statement (line 649)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 650):
    
    # Assigning a Str to a Name (line 650):
    str_40199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 21), 'str', '.dll')
    # Assigning a type to the variable 'so_ext' (line 650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 12), 'so_ext', str_40199)
    # SSA branch for the else part of an if statement (line 649)
    module_type_store.open_ssa_branch('else')
    
    
    str_40200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 15), 'str', 'SOABI')
    # Getting the type of 'confvars' (line 654)
    confvars_40201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 26), 'confvars')
    # Applying the binary operator 'in' (line 654)
    result_contains_40202 = python_operator(stypy.reporting.localization.Localization(__file__, 654, 15), 'in', str_40200, confvars_40201)
    
    # Testing the type of an if condition (line 654)
    if_condition_40203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 654, 12), result_contains_40202)
    # Assigning a type to the variable 'if_condition_40203' (line 654)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 12), 'if_condition_40203', if_condition_40203)
    # SSA begins for if statement (line 654)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 656):
    
    # Assigning a Call to a Name (line 656):
    
    # Call to replace(...): (line 656)
    # Processing the call arguments (line 656)
    str_40206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 40), 'str', '.')
    
    # Call to get(...): (line 656)
    # Processing the call arguments (line 656)
    str_40209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 59), 'str', 'SOABI')
    # Processing the call keyword arguments (line 656)
    kwargs_40210 = {}
    # Getting the type of 'confvars' (line 656)
    confvars_40207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 46), 'confvars', False)
    # Obtaining the member 'get' of a type (line 656)
    get_40208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 46), confvars_40207, 'get')
    # Calling get(args, kwargs) (line 656)
    get_call_result_40211 = invoke(stypy.reporting.localization.Localization(__file__, 656, 46), get_40208, *[str_40209], **kwargs_40210)
    
    # Applying the binary operator '+' (line 656)
    result_add_40212 = python_operator(stypy.reporting.localization.Localization(__file__, 656, 40), '+', str_40206, get_call_result_40211)
    
    str_40213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 69), 'str', '')
    int_40214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 73), 'int')
    # Processing the call keyword arguments (line 656)
    kwargs_40215 = {}
    # Getting the type of 'so_ext' (line 656)
    so_ext_40204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 25), 'so_ext', False)
    # Obtaining the member 'replace' of a type (line 656)
    replace_40205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 25), so_ext_40204, 'replace')
    # Calling replace(args, kwargs) (line 656)
    replace_call_result_40216 = invoke(stypy.reporting.localization.Localization(__file__, 656, 25), replace_40205, *[result_add_40212, str_40213, int_40214], **kwargs_40215)
    
    # Assigning a type to the variable 'so_ext' (line 656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 16), 'so_ext', replace_call_result_40216)
    # SSA join for if statement (line 654)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 649)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 647)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 644)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 640)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'so_ext' (line 658)
    so_ext_40217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 11), 'so_ext')
    # Assigning a type to the variable 'stypy_return_type' (line 658)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 4), 'stypy_return_type', so_ext_40217)
    
    # ################# End of 'get_shared_lib_extension(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_shared_lib_extension' in the type store
    # Getting the type of 'stypy_return_type' (line 613)
    stypy_return_type_40218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_40218)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_shared_lib_extension'
    return stypy_return_type_40218

# Assigning a type to the variable 'get_shared_lib_extension' (line 613)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 0), 'get_shared_lib_extension', get_shared_lib_extension)

@norecursion
def get_data_files(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_data_files'
    module_type_store = module_type_store.open_function_context('get_data_files', 660, 0, False)
    
    # Passed parameters checking function
    get_data_files.stypy_localization = localization
    get_data_files.stypy_type_of_self = None
    get_data_files.stypy_type_store = module_type_store
    get_data_files.stypy_function_name = 'get_data_files'
    get_data_files.stypy_param_names_list = ['data']
    get_data_files.stypy_varargs_param_name = None
    get_data_files.stypy_kwargs_param_name = None
    get_data_files.stypy_call_defaults = defaults
    get_data_files.stypy_call_varargs = varargs
    get_data_files.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_data_files', ['data'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_data_files', localization, ['data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_data_files(...)' code ##################

    
    
    # Call to is_string(...): (line 661)
    # Processing the call arguments (line 661)
    # Getting the type of 'data' (line 661)
    data_40220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 17), 'data', False)
    # Processing the call keyword arguments (line 661)
    kwargs_40221 = {}
    # Getting the type of 'is_string' (line 661)
    is_string_40219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 7), 'is_string', False)
    # Calling is_string(args, kwargs) (line 661)
    is_string_call_result_40222 = invoke(stypy.reporting.localization.Localization(__file__, 661, 7), is_string_40219, *[data_40220], **kwargs_40221)
    
    # Testing the type of an if condition (line 661)
    if_condition_40223 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 661, 4), is_string_call_result_40222)
    # Assigning a type to the variable 'if_condition_40223' (line 661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 4), 'if_condition_40223', if_condition_40223)
    # SSA begins for if statement (line 661)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'list' (line 662)
    list_40224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 662)
    # Adding element type (line 662)
    # Getting the type of 'data' (line 662)
    data_40225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 16), 'data')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 662, 15), list_40224, data_40225)
    
    # Assigning a type to the variable 'stypy_return_type' (line 662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'stypy_return_type', list_40224)
    # SSA join for if statement (line 661)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 663):
    
    # Assigning a Subscript to a Name (line 663):
    
    # Obtaining the type of the subscript
    int_40226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 19), 'int')
    # Getting the type of 'data' (line 663)
    data_40227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 14), 'data')
    # Obtaining the member '__getitem__' of a type (line 663)
    getitem___40228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 14), data_40227, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 663)
    subscript_call_result_40229 = invoke(stypy.reporting.localization.Localization(__file__, 663, 14), getitem___40228, int_40226)
    
    # Assigning a type to the variable 'sources' (line 663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 4), 'sources', subscript_call_result_40229)
    
    # Assigning a List to a Name (line 664):
    
    # Assigning a List to a Name (line 664):
    
    # Obtaining an instance of the builtin type 'list' (line 664)
    list_40230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 664)
    
    # Assigning a type to the variable 'filenames' (line 664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 4), 'filenames', list_40230)
    
    # Getting the type of 'sources' (line 665)
    sources_40231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 13), 'sources')
    # Testing the type of a for loop iterable (line 665)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 665, 4), sources_40231)
    # Getting the type of the for loop variable (line 665)
    for_loop_var_40232 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 665, 4), sources_40231)
    # Assigning a type to the variable 's' (line 665)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 4), 's', for_loop_var_40232)
    # SSA begins for a for statement (line 665)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Type idiom detected: calculating its left and rigth part (line 666)
    str_40233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 22), 'str', '__call__')
    # Getting the type of 's' (line 666)
    s_40234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 19), 's')
    
    (may_be_40235, more_types_in_union_40236) = may_provide_member(str_40233, s_40234)

    if may_be_40235:

        if more_types_in_union_40236:
            # Runtime conditional SSA (line 666)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 's' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 's', remove_not_member_provider_from_union(s_40234, '__call__'))

        if more_types_in_union_40236:
            # SSA join for if statement (line 666)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to is_local_src_dir(...): (line 668)
    # Processing the call arguments (line 668)
    # Getting the type of 's' (line 668)
    s_40238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 28), 's', False)
    # Processing the call keyword arguments (line 668)
    kwargs_40239 = {}
    # Getting the type of 'is_local_src_dir' (line 668)
    is_local_src_dir_40237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 11), 'is_local_src_dir', False)
    # Calling is_local_src_dir(args, kwargs) (line 668)
    is_local_src_dir_call_result_40240 = invoke(stypy.reporting.localization.Localization(__file__, 668, 11), is_local_src_dir_40237, *[s_40238], **kwargs_40239)
    
    # Testing the type of an if condition (line 668)
    if_condition_40241 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 668, 8), is_local_src_dir_call_result_40240)
    # Assigning a type to the variable 'if_condition_40241' (line 668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 8), 'if_condition_40241', if_condition_40241)
    # SSA begins for if statement (line 668)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 669)
    # Processing the call arguments (line 669)
    
    # Call to list(...): (line 669)
    # Processing the call arguments (line 669)
    
    # Call to general_source_files(...): (line 669)
    # Processing the call arguments (line 669)
    # Getting the type of 's' (line 669)
    s_40246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 55), 's', False)
    # Processing the call keyword arguments (line 669)
    kwargs_40247 = {}
    # Getting the type of 'general_source_files' (line 669)
    general_source_files_40245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 34), 'general_source_files', False)
    # Calling general_source_files(args, kwargs) (line 669)
    general_source_files_call_result_40248 = invoke(stypy.reporting.localization.Localization(__file__, 669, 34), general_source_files_40245, *[s_40246], **kwargs_40247)
    
    # Processing the call keyword arguments (line 669)
    kwargs_40249 = {}
    # Getting the type of 'list' (line 669)
    list_40244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 29), 'list', False)
    # Calling list(args, kwargs) (line 669)
    list_call_result_40250 = invoke(stypy.reporting.localization.Localization(__file__, 669, 29), list_40244, *[general_source_files_call_result_40248], **kwargs_40249)
    
    # Processing the call keyword arguments (line 669)
    kwargs_40251 = {}
    # Getting the type of 'filenames' (line 669)
    filenames_40242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 12), 'filenames', False)
    # Obtaining the member 'extend' of a type (line 669)
    extend_40243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 12), filenames_40242, 'extend')
    # Calling extend(args, kwargs) (line 669)
    extend_call_result_40252 = invoke(stypy.reporting.localization.Localization(__file__, 669, 12), extend_40243, *[list_call_result_40250], **kwargs_40251)
    
    # SSA branch for the else part of an if statement (line 668)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to is_string(...): (line 670)
    # Processing the call arguments (line 670)
    # Getting the type of 's' (line 670)
    s_40254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 23), 's', False)
    # Processing the call keyword arguments (line 670)
    kwargs_40255 = {}
    # Getting the type of 'is_string' (line 670)
    is_string_40253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 13), 'is_string', False)
    # Calling is_string(args, kwargs) (line 670)
    is_string_call_result_40256 = invoke(stypy.reporting.localization.Localization(__file__, 670, 13), is_string_40253, *[s_40254], **kwargs_40255)
    
    # Testing the type of an if condition (line 670)
    if_condition_40257 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 670, 13), is_string_call_result_40256)
    # Assigning a type to the variable 'if_condition_40257' (line 670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 670, 13), 'if_condition_40257', if_condition_40257)
    # SSA begins for if statement (line 670)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isfile(...): (line 671)
    # Processing the call arguments (line 671)
    # Getting the type of 's' (line 671)
    s_40261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 30), 's', False)
    # Processing the call keyword arguments (line 671)
    kwargs_40262 = {}
    # Getting the type of 'os' (line 671)
    os_40258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 671)
    path_40259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 15), os_40258, 'path')
    # Obtaining the member 'isfile' of a type (line 671)
    isfile_40260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 15), path_40259, 'isfile')
    # Calling isfile(args, kwargs) (line 671)
    isfile_call_result_40263 = invoke(stypy.reporting.localization.Localization(__file__, 671, 15), isfile_40260, *[s_40261], **kwargs_40262)
    
    # Testing the type of an if condition (line 671)
    if_condition_40264 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 671, 12), isfile_call_result_40263)
    # Assigning a type to the variable 'if_condition_40264' (line 671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 12), 'if_condition_40264', if_condition_40264)
    # SSA begins for if statement (line 671)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 672)
    # Processing the call arguments (line 672)
    # Getting the type of 's' (line 672)
    s_40267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 33), 's', False)
    # Processing the call keyword arguments (line 672)
    kwargs_40268 = {}
    # Getting the type of 'filenames' (line 672)
    filenames_40265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 16), 'filenames', False)
    # Obtaining the member 'append' of a type (line 672)
    append_40266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 16), filenames_40265, 'append')
    # Calling append(args, kwargs) (line 672)
    append_call_result_40269 = invoke(stypy.reporting.localization.Localization(__file__, 672, 16), append_40266, *[s_40267], **kwargs_40268)
    
    # SSA branch for the else part of an if statement (line 671)
    module_type_store.open_ssa_branch('else')
    
    # Call to print(...): (line 674)
    # Processing the call arguments (line 674)
    str_40271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 22), 'str', 'Not existing data file:')
    # Getting the type of 's' (line 674)
    s_40272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 49), 's', False)
    # Processing the call keyword arguments (line 674)
    kwargs_40273 = {}
    # Getting the type of 'print' (line 674)
    print_40270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 16), 'print', False)
    # Calling print(args, kwargs) (line 674)
    print_call_result_40274 = invoke(stypy.reporting.localization.Localization(__file__, 674, 16), print_40270, *[str_40271, s_40272], **kwargs_40273)
    
    # SSA join for if statement (line 671)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 670)
    module_type_store.open_ssa_branch('else')
    
    # Call to TypeError(...): (line 676)
    # Processing the call arguments (line 676)
    
    # Call to repr(...): (line 676)
    # Processing the call arguments (line 676)
    # Getting the type of 's' (line 676)
    s_40277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 33), 's', False)
    # Processing the call keyword arguments (line 676)
    kwargs_40278 = {}
    # Getting the type of 'repr' (line 676)
    repr_40276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 28), 'repr', False)
    # Calling repr(args, kwargs) (line 676)
    repr_call_result_40279 = invoke(stypy.reporting.localization.Localization(__file__, 676, 28), repr_40276, *[s_40277], **kwargs_40278)
    
    # Processing the call keyword arguments (line 676)
    kwargs_40280 = {}
    # Getting the type of 'TypeError' (line 676)
    TypeError_40275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 18), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 676)
    TypeError_call_result_40281 = invoke(stypy.reporting.localization.Localization(__file__, 676, 18), TypeError_40275, *[repr_call_result_40279], **kwargs_40280)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 676, 12), TypeError_call_result_40281, 'raise parameter', BaseException)
    # SSA join for if statement (line 670)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 668)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'filenames' (line 677)
    filenames_40282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 11), 'filenames')
    # Assigning a type to the variable 'stypy_return_type' (line 677)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 4), 'stypy_return_type', filenames_40282)
    
    # ################# End of 'get_data_files(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_data_files' in the type store
    # Getting the type of 'stypy_return_type' (line 660)
    stypy_return_type_40283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_40283)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_data_files'
    return stypy_return_type_40283

# Assigning a type to the variable 'get_data_files' (line 660)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 0), 'get_data_files', get_data_files)

@norecursion
def dot_join(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'dot_join'
    module_type_store = module_type_store.open_function_context('dot_join', 679, 0, False)
    
    # Passed parameters checking function
    dot_join.stypy_localization = localization
    dot_join.stypy_type_of_self = None
    dot_join.stypy_type_store = module_type_store
    dot_join.stypy_function_name = 'dot_join'
    dot_join.stypy_param_names_list = []
    dot_join.stypy_varargs_param_name = 'args'
    dot_join.stypy_kwargs_param_name = None
    dot_join.stypy_call_defaults = defaults
    dot_join.stypy_call_varargs = varargs
    dot_join.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dot_join', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dot_join', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dot_join(...)' code ##################

    
    # Call to join(...): (line 680)
    # Processing the call arguments (line 680)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'args' (line 680)
    args_40288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 32), 'args', False)
    comprehension_40289 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 680, 21), args_40288)
    # Assigning a type to the variable 'a' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 21), 'a', comprehension_40289)
    # Getting the type of 'a' (line 680)
    a_40287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 40), 'a', False)
    # Getting the type of 'a' (line 680)
    a_40286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 21), 'a', False)
    list_40290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 680, 21), list_40290, a_40286)
    # Processing the call keyword arguments (line 680)
    kwargs_40291 = {}
    str_40284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 11), 'str', '.')
    # Obtaining the member 'join' of a type (line 680)
    join_40285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 11), str_40284, 'join')
    # Calling join(args, kwargs) (line 680)
    join_call_result_40292 = invoke(stypy.reporting.localization.Localization(__file__, 680, 11), join_40285, *[list_40290], **kwargs_40291)
    
    # Assigning a type to the variable 'stypy_return_type' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'stypy_return_type', join_call_result_40292)
    
    # ################# End of 'dot_join(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dot_join' in the type store
    # Getting the type of 'stypy_return_type' (line 679)
    stypy_return_type_40293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_40293)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dot_join'
    return stypy_return_type_40293

# Assigning a type to the variable 'dot_join' (line 679)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 0), 'dot_join', dot_join)

@norecursion
def get_frame(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_40294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 20), 'int')
    defaults = [int_40294]
    # Create a new context for function 'get_frame'
    module_type_store = module_type_store.open_function_context('get_frame', 682, 0, False)
    
    # Passed parameters checking function
    get_frame.stypy_localization = localization
    get_frame.stypy_type_of_self = None
    get_frame.stypy_type_store = module_type_store
    get_frame.stypy_function_name = 'get_frame'
    get_frame.stypy_param_names_list = ['level']
    get_frame.stypy_varargs_param_name = None
    get_frame.stypy_kwargs_param_name = None
    get_frame.stypy_call_defaults = defaults
    get_frame.stypy_call_varargs = varargs
    get_frame.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_frame', ['level'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_frame', localization, ['level'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_frame(...)' code ##################

    str_40295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, (-1)), 'str', 'Return frame object from call stack with given level.\n    ')
    
    
    # SSA begins for try-except statement (line 685)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to _getframe(...): (line 686)
    # Processing the call arguments (line 686)
    # Getting the type of 'level' (line 686)
    level_40298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 29), 'level', False)
    int_40299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 35), 'int')
    # Applying the binary operator '+' (line 686)
    result_add_40300 = python_operator(stypy.reporting.localization.Localization(__file__, 686, 29), '+', level_40298, int_40299)
    
    # Processing the call keyword arguments (line 686)
    kwargs_40301 = {}
    # Getting the type of 'sys' (line 686)
    sys_40296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 15), 'sys', False)
    # Obtaining the member '_getframe' of a type (line 686)
    _getframe_40297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 15), sys_40296, '_getframe')
    # Calling _getframe(args, kwargs) (line 686)
    _getframe_call_result_40302 = invoke(stypy.reporting.localization.Localization(__file__, 686, 15), _getframe_40297, *[result_add_40300], **kwargs_40301)
    
    # Assigning a type to the variable 'stypy_return_type' (line 686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 8), 'stypy_return_type', _getframe_call_result_40302)
    # SSA branch for the except part of a try statement (line 685)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 685)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Attribute to a Name (line 688):
    
    # Assigning a Attribute to a Name (line 688):
    
    # Obtaining the type of the subscript
    int_40303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 31), 'int')
    
    # Call to exc_info(...): (line 688)
    # Processing the call keyword arguments (line 688)
    kwargs_40306 = {}
    # Getting the type of 'sys' (line 688)
    sys_40304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 16), 'sys', False)
    # Obtaining the member 'exc_info' of a type (line 688)
    exc_info_40305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 16), sys_40304, 'exc_info')
    # Calling exc_info(args, kwargs) (line 688)
    exc_info_call_result_40307 = invoke(stypy.reporting.localization.Localization(__file__, 688, 16), exc_info_40305, *[], **kwargs_40306)
    
    # Obtaining the member '__getitem__' of a type (line 688)
    getitem___40308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 16), exc_info_call_result_40307, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 688)
    subscript_call_result_40309 = invoke(stypy.reporting.localization.Localization(__file__, 688, 16), getitem___40308, int_40303)
    
    # Obtaining the member 'tb_frame' of a type (line 688)
    tb_frame_40310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 16), subscript_call_result_40309, 'tb_frame')
    # Assigning a type to the variable 'frame' (line 688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 8), 'frame', tb_frame_40310)
    
    
    # Call to range(...): (line 689)
    # Processing the call arguments (line 689)
    # Getting the type of 'level' (line 689)
    level_40312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 23), 'level', False)
    int_40313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 29), 'int')
    # Applying the binary operator '+' (line 689)
    result_add_40314 = python_operator(stypy.reporting.localization.Localization(__file__, 689, 23), '+', level_40312, int_40313)
    
    # Processing the call keyword arguments (line 689)
    kwargs_40315 = {}
    # Getting the type of 'range' (line 689)
    range_40311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 17), 'range', False)
    # Calling range(args, kwargs) (line 689)
    range_call_result_40316 = invoke(stypy.reporting.localization.Localization(__file__, 689, 17), range_40311, *[result_add_40314], **kwargs_40315)
    
    # Testing the type of a for loop iterable (line 689)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 689, 8), range_call_result_40316)
    # Getting the type of the for loop variable (line 689)
    for_loop_var_40317 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 689, 8), range_call_result_40316)
    # Assigning a type to the variable '_' (line 689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 689, 8), '_', for_loop_var_40317)
    # SSA begins for a for statement (line 689)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Attribute to a Name (line 690):
    
    # Assigning a Attribute to a Name (line 690):
    # Getting the type of 'frame' (line 690)
    frame_40318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 20), 'frame')
    # Obtaining the member 'f_back' of a type (line 690)
    f_back_40319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 20), frame_40318, 'f_back')
    # Assigning a type to the variable 'frame' (line 690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'frame', f_back_40319)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'frame' (line 691)
    frame_40320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 15), 'frame')
    # Assigning a type to the variable 'stypy_return_type' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 8), 'stypy_return_type', frame_40320)
    # SSA join for try-except statement (line 685)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'get_frame(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_frame' in the type store
    # Getting the type of 'stypy_return_type' (line 682)
    stypy_return_type_40321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_40321)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_frame'
    return stypy_return_type_40321

# Assigning a type to the variable 'get_frame' (line 682)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 0), 'get_frame', get_frame)
# Declaration of the 'Configuration' class

class Configuration(object, ):
    
    # Assigning a List to a Name (line 698):
    
    # Assigning a List to a Name (line 701):
    
    # Assigning a List to a Name (line 702):
    
    # Assigning a List to a Name (line 704):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 707)
        None_40322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 30), 'None')
        # Getting the type of 'None' (line 708)
        None_40323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 29), 'None')
        # Getting the type of 'None' (line 709)
        None_40324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 26), 'None')
        # Getting the type of 'None' (line 710)
        None_40325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 30), 'None')
        int_40326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 30), 'int')
        str_40327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 28), 'str', 'setup.py')
        defaults = [None_40322, None_40323, None_40324, None_40325, int_40326, str_40327]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 706, 4, False)
        # Assigning a type to the variable 'self' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.__init__', ['package_name', 'parent_name', 'top_path', 'package_path', 'caller_level', 'setup_name'], None, 'attrs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['package_name', 'parent_name', 'top_path', 'package_path', 'caller_level', 'setup_name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_40328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, (-1)), 'str', "Construct configuration instance of a package.\n\n        package_name -- name of the package\n                        Ex.: 'distutils'\n        parent_name  -- name of the parent package\n                        Ex.: 'numpy'\n        top_path     -- directory of the toplevel package\n                        Ex.: the directory where the numpy package source sits\n        package_path -- directory of package. Will be computed by magic from the\n                        directory of the caller module if not specified\n                        Ex.: the directory where numpy.distutils is\n        caller_level -- frame level to caller namespace, internal parameter.\n        ")
        
        # Assigning a Call to a Attribute (line 727):
        
        # Assigning a Call to a Attribute (line 727):
        
        # Call to dot_join(...): (line 727)
        # Processing the call arguments (line 727)
        # Getting the type of 'parent_name' (line 727)
        parent_name_40330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 29), 'parent_name', False)
        # Getting the type of 'package_name' (line 727)
        package_name_40331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 42), 'package_name', False)
        # Processing the call keyword arguments (line 727)
        kwargs_40332 = {}
        # Getting the type of 'dot_join' (line 727)
        dot_join_40329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 20), 'dot_join', False)
        # Calling dot_join(args, kwargs) (line 727)
        dot_join_call_result_40333 = invoke(stypy.reporting.localization.Localization(__file__, 727, 20), dot_join_40329, *[parent_name_40330, package_name_40331], **kwargs_40332)
        
        # Getting the type of 'self' (line 727)
        self_40334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'self')
        # Setting the type of the member 'name' of a type (line 727)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 8), self_40334, 'name', dot_join_call_result_40333)
        
        # Assigning a Name to a Attribute (line 728):
        
        # Assigning a Name to a Attribute (line 728):
        # Getting the type of 'None' (line 728)
        None_40335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 23), 'None')
        # Getting the type of 'self' (line 728)
        self_40336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 8), 'self')
        # Setting the type of the member 'version' of a type (line 728)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 8), self_40336, 'version', None_40335)
        
        # Assigning a Call to a Name (line 730):
        
        # Assigning a Call to a Name (line 730):
        
        # Call to get_frame(...): (line 730)
        # Processing the call arguments (line 730)
        # Getting the type of 'caller_level' (line 730)
        caller_level_40338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 33), 'caller_level', False)
        # Processing the call keyword arguments (line 730)
        kwargs_40339 = {}
        # Getting the type of 'get_frame' (line 730)
        get_frame_40337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 23), 'get_frame', False)
        # Calling get_frame(args, kwargs) (line 730)
        get_frame_call_result_40340 = invoke(stypy.reporting.localization.Localization(__file__, 730, 23), get_frame_40337, *[caller_level_40338], **kwargs_40339)
        
        # Assigning a type to the variable 'caller_frame' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'caller_frame', get_frame_call_result_40340)
        
        # Assigning a Call to a Attribute (line 731):
        
        # Assigning a Call to a Attribute (line 731):
        
        # Call to get_path_from_frame(...): (line 731)
        # Processing the call arguments (line 731)
        # Getting the type of 'caller_frame' (line 731)
        caller_frame_40342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 46), 'caller_frame', False)
        # Getting the type of 'top_path' (line 731)
        top_path_40343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 60), 'top_path', False)
        # Processing the call keyword arguments (line 731)
        kwargs_40344 = {}
        # Getting the type of 'get_path_from_frame' (line 731)
        get_path_from_frame_40341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 26), 'get_path_from_frame', False)
        # Calling get_path_from_frame(args, kwargs) (line 731)
        get_path_from_frame_call_result_40345 = invoke(stypy.reporting.localization.Localization(__file__, 731, 26), get_path_from_frame_40341, *[caller_frame_40342, top_path_40343], **kwargs_40344)
        
        # Getting the type of 'self' (line 731)
        self_40346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'self')
        # Setting the type of the member 'local_path' of a type (line 731)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 8), self_40346, 'local_path', get_path_from_frame_call_result_40345)
        
        # Type idiom detected: calculating its left and rigth part (line 736)
        # Getting the type of 'top_path' (line 736)
        top_path_40347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 11), 'top_path')
        # Getting the type of 'None' (line 736)
        None_40348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 23), 'None')
        
        (may_be_40349, more_types_in_union_40350) = may_be_none(top_path_40347, None_40348)

        if may_be_40349:

            if more_types_in_union_40350:
                # Runtime conditional SSA (line 736)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 737):
            
            # Assigning a Attribute to a Name (line 737):
            # Getting the type of 'self' (line 737)
            self_40351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 23), 'self')
            # Obtaining the member 'local_path' of a type (line 737)
            local_path_40352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 23), self_40351, 'local_path')
            # Assigning a type to the variable 'top_path' (line 737)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 12), 'top_path', local_path_40352)
            
            # Assigning a Str to a Attribute (line 738):
            
            # Assigning a Str to a Attribute (line 738):
            str_40353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 30), 'str', '')
            # Getting the type of 'self' (line 738)
            self_40354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 12), 'self')
            # Setting the type of the member 'local_path' of a type (line 738)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 12), self_40354, 'local_path', str_40353)

            if more_types_in_union_40350:
                # SSA join for if statement (line 736)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 739)
        # Getting the type of 'package_path' (line 739)
        package_path_40355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 11), 'package_path')
        # Getting the type of 'None' (line 739)
        None_40356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 27), 'None')
        
        (may_be_40357, more_types_in_union_40358) = may_be_none(package_path_40355, None_40356)

        if may_be_40357:

            if more_types_in_union_40358:
                # Runtime conditional SSA (line 739)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 740):
            
            # Assigning a Attribute to a Name (line 740):
            # Getting the type of 'self' (line 740)
            self_40359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 27), 'self')
            # Obtaining the member 'local_path' of a type (line 740)
            local_path_40360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 27), self_40359, 'local_path')
            # Assigning a type to the variable 'package_path' (line 740)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 12), 'package_path', local_path_40360)

            if more_types_in_union_40358:
                # Runtime conditional SSA for else branch (line 739)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_40357) or more_types_in_union_40358):
            
            
            # Call to isdir(...): (line 741)
            # Processing the call arguments (line 741)
            
            # Call to njoin(...): (line 741)
            # Processing the call arguments (line 741)
            # Getting the type of 'self' (line 741)
            self_40365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 33), 'self', False)
            # Obtaining the member 'local_path' of a type (line 741)
            local_path_40366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 33), self_40365, 'local_path')
            # Getting the type of 'package_path' (line 741)
            package_path_40367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 50), 'package_path', False)
            # Processing the call keyword arguments (line 741)
            kwargs_40368 = {}
            # Getting the type of 'njoin' (line 741)
            njoin_40364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 27), 'njoin', False)
            # Calling njoin(args, kwargs) (line 741)
            njoin_call_result_40369 = invoke(stypy.reporting.localization.Localization(__file__, 741, 27), njoin_40364, *[local_path_40366, package_path_40367], **kwargs_40368)
            
            # Processing the call keyword arguments (line 741)
            kwargs_40370 = {}
            # Getting the type of 'os' (line 741)
            os_40361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 13), 'os', False)
            # Obtaining the member 'path' of a type (line 741)
            path_40362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 13), os_40361, 'path')
            # Obtaining the member 'isdir' of a type (line 741)
            isdir_40363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 13), path_40362, 'isdir')
            # Calling isdir(args, kwargs) (line 741)
            isdir_call_result_40371 = invoke(stypy.reporting.localization.Localization(__file__, 741, 13), isdir_40363, *[njoin_call_result_40369], **kwargs_40370)
            
            # Testing the type of an if condition (line 741)
            if_condition_40372 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 741, 13), isdir_call_result_40371)
            # Assigning a type to the variable 'if_condition_40372' (line 741)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 13), 'if_condition_40372', if_condition_40372)
            # SSA begins for if statement (line 741)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 742):
            
            # Assigning a Call to a Name (line 742):
            
            # Call to njoin(...): (line 742)
            # Processing the call arguments (line 742)
            # Getting the type of 'self' (line 742)
            self_40374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 33), 'self', False)
            # Obtaining the member 'local_path' of a type (line 742)
            local_path_40375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 33), self_40374, 'local_path')
            # Getting the type of 'package_path' (line 742)
            package_path_40376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 50), 'package_path', False)
            # Processing the call keyword arguments (line 742)
            kwargs_40377 = {}
            # Getting the type of 'njoin' (line 742)
            njoin_40373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 27), 'njoin', False)
            # Calling njoin(args, kwargs) (line 742)
            njoin_call_result_40378 = invoke(stypy.reporting.localization.Localization(__file__, 742, 27), njoin_40373, *[local_path_40375, package_path_40376], **kwargs_40377)
            
            # Assigning a type to the variable 'package_path' (line 742)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'package_path', njoin_call_result_40378)
            # SSA join for if statement (line 741)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_40357 and more_types_in_union_40358):
                # SSA join for if statement (line 739)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to isdir(...): (line 743)
        # Processing the call arguments (line 743)
        
        # Evaluating a boolean operation
        # Getting the type of 'package_path' (line 743)
        package_path_40382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 29), 'package_path', False)
        str_40383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 45), 'str', '.')
        # Applying the binary operator 'or' (line 743)
        result_or_keyword_40384 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 29), 'or', package_path_40382, str_40383)
        
        # Processing the call keyword arguments (line 743)
        kwargs_40385 = {}
        # Getting the type of 'os' (line 743)
        os_40379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 743)
        path_40380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 15), os_40379, 'path')
        # Obtaining the member 'isdir' of a type (line 743)
        isdir_40381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 15), path_40380, 'isdir')
        # Calling isdir(args, kwargs) (line 743)
        isdir_call_result_40386 = invoke(stypy.reporting.localization.Localization(__file__, 743, 15), isdir_40381, *[result_or_keyword_40384], **kwargs_40385)
        
        # Applying the 'not' unary operator (line 743)
        result_not__40387 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 11), 'not', isdir_call_result_40386)
        
        # Testing the type of an if condition (line 743)
        if_condition_40388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 743, 8), result_not__40387)
        # Assigning a type to the variable 'if_condition_40388' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 8), 'if_condition_40388', if_condition_40388)
        # SSA begins for if statement (line 743)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 744)
        # Processing the call arguments (line 744)
        str_40390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 29), 'str', '%r is not a directory')
        
        # Obtaining an instance of the builtin type 'tuple' (line 744)
        tuple_40391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 744)
        # Adding element type (line 744)
        # Getting the type of 'package_path' (line 744)
        package_path_40392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 56), 'package_path', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 744, 56), tuple_40391, package_path_40392)
        
        # Applying the binary operator '%' (line 744)
        result_mod_40393 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 29), '%', str_40390, tuple_40391)
        
        # Processing the call keyword arguments (line 744)
        kwargs_40394 = {}
        # Getting the type of 'ValueError' (line 744)
        ValueError_40389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 744)
        ValueError_call_result_40395 = invoke(stypy.reporting.localization.Localization(__file__, 744, 18), ValueError_40389, *[result_mod_40393], **kwargs_40394)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 744, 12), ValueError_call_result_40395, 'raise parameter', BaseException)
        # SSA join for if statement (line 743)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 745):
        
        # Assigning a Name to a Attribute (line 745):
        # Getting the type of 'top_path' (line 745)
        top_path_40396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 24), 'top_path')
        # Getting the type of 'self' (line 745)
        self_40397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 8), 'self')
        # Setting the type of the member 'top_path' of a type (line 745)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 8), self_40397, 'top_path', top_path_40396)
        
        # Assigning a Name to a Attribute (line 746):
        
        # Assigning a Name to a Attribute (line 746):
        # Getting the type of 'package_path' (line 746)
        package_path_40398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 28), 'package_path')
        # Getting the type of 'self' (line 746)
        self_40399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 8), 'self')
        # Setting the type of the member 'package_path' of a type (line 746)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 8), self_40399, 'package_path', package_path_40398)
        
        # Assigning a Call to a Attribute (line 748):
        
        # Assigning a Call to a Attribute (line 748):
        
        # Call to join(...): (line 748)
        
        # Call to split(...): (line 748)
        # Processing the call arguments (line 748)
        str_40406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 61), 'str', '.')
        # Processing the call keyword arguments (line 748)
        kwargs_40407 = {}
        # Getting the type of 'self' (line 748)
        self_40403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 45), 'self', False)
        # Obtaining the member 'name' of a type (line 748)
        name_40404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 45), self_40403, 'name')
        # Obtaining the member 'split' of a type (line 748)
        split_40405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 45), name_40404, 'split')
        # Calling split(args, kwargs) (line 748)
        split_call_result_40408 = invoke(stypy.reporting.localization.Localization(__file__, 748, 45), split_40405, *[str_40406], **kwargs_40407)
        
        # Processing the call keyword arguments (line 748)
        kwargs_40409 = {}
        # Getting the type of 'os' (line 748)
        os_40400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 31), 'os', False)
        # Obtaining the member 'path' of a type (line 748)
        path_40401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 31), os_40400, 'path')
        # Obtaining the member 'join' of a type (line 748)
        join_40402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 31), path_40401, 'join')
        # Calling join(args, kwargs) (line 748)
        join_call_result_40410 = invoke(stypy.reporting.localization.Localization(__file__, 748, 31), join_40402, *[split_call_result_40408], **kwargs_40409)
        
        # Getting the type of 'self' (line 748)
        self_40411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'self')
        # Setting the type of the member 'path_in_package' of a type (line 748)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 8), self_40411, 'path_in_package', join_call_result_40410)
        
        # Assigning a Subscript to a Attribute (line 750):
        
        # Assigning a Subscript to a Attribute (line 750):
        
        # Obtaining the type of the subscript
        slice_40412 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 750, 25), None, None, None)
        # Getting the type of 'self' (line 750)
        self_40413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 25), 'self')
        # Obtaining the member '_list_keys' of a type (line 750)
        _list_keys_40414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 25), self_40413, '_list_keys')
        # Obtaining the member '__getitem__' of a type (line 750)
        getitem___40415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 25), _list_keys_40414, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 750)
        subscript_call_result_40416 = invoke(stypy.reporting.localization.Localization(__file__, 750, 25), getitem___40415, slice_40412)
        
        # Getting the type of 'self' (line 750)
        self_40417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'self')
        # Setting the type of the member 'list_keys' of a type (line 750)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 8), self_40417, 'list_keys', subscript_call_result_40416)
        
        # Assigning a Subscript to a Attribute (line 751):
        
        # Assigning a Subscript to a Attribute (line 751):
        
        # Obtaining the type of the subscript
        slice_40418 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 751, 25), None, None, None)
        # Getting the type of 'self' (line 751)
        self_40419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 25), 'self')
        # Obtaining the member '_dict_keys' of a type (line 751)
        _dict_keys_40420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 25), self_40419, '_dict_keys')
        # Obtaining the member '__getitem__' of a type (line 751)
        getitem___40421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 25), _dict_keys_40420, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 751)
        subscript_call_result_40422 = invoke(stypy.reporting.localization.Localization(__file__, 751, 25), getitem___40421, slice_40418)
        
        # Getting the type of 'self' (line 751)
        self_40423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'self')
        # Setting the type of the member 'dict_keys' of a type (line 751)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), self_40423, 'dict_keys', subscript_call_result_40422)
        
        # Getting the type of 'self' (line 753)
        self_40424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 17), 'self')
        # Obtaining the member 'list_keys' of a type (line 753)
        list_keys_40425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 17), self_40424, 'list_keys')
        # Testing the type of a for loop iterable (line 753)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 753, 8), list_keys_40425)
        # Getting the type of the for loop variable (line 753)
        for_loop_var_40426 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 753, 8), list_keys_40425)
        # Assigning a type to the variable 'n' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 8), 'n', for_loop_var_40426)
        # SSA begins for a for statement (line 753)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 754):
        
        # Assigning a Call to a Name (line 754):
        
        # Call to copy(...): (line 754)
        # Processing the call arguments (line 754)
        
        # Call to get(...): (line 754)
        # Processing the call arguments (line 754)
        # Getting the type of 'n' (line 754)
        n_40431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 36), 'n', False)
        
        # Obtaining an instance of the builtin type 'list' (line 754)
        list_40432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 754)
        
        # Processing the call keyword arguments (line 754)
        kwargs_40433 = {}
        # Getting the type of 'attrs' (line 754)
        attrs_40429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 26), 'attrs', False)
        # Obtaining the member 'get' of a type (line 754)
        get_40430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 26), attrs_40429, 'get')
        # Calling get(args, kwargs) (line 754)
        get_call_result_40434 = invoke(stypy.reporting.localization.Localization(__file__, 754, 26), get_40430, *[n_40431, list_40432], **kwargs_40433)
        
        # Processing the call keyword arguments (line 754)
        kwargs_40435 = {}
        # Getting the type of 'copy' (line 754)
        copy_40427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 16), 'copy', False)
        # Obtaining the member 'copy' of a type (line 754)
        copy_40428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 16), copy_40427, 'copy')
        # Calling copy(args, kwargs) (line 754)
        copy_call_result_40436 = invoke(stypy.reporting.localization.Localization(__file__, 754, 16), copy_40428, *[get_call_result_40434], **kwargs_40435)
        
        # Assigning a type to the variable 'v' (line 754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 12), 'v', copy_call_result_40436)
        
        # Call to setattr(...): (line 755)
        # Processing the call arguments (line 755)
        # Getting the type of 'self' (line 755)
        self_40438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 20), 'self', False)
        # Getting the type of 'n' (line 755)
        n_40439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 26), 'n', False)
        
        # Call to as_list(...): (line 755)
        # Processing the call arguments (line 755)
        # Getting the type of 'v' (line 755)
        v_40441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 37), 'v', False)
        # Processing the call keyword arguments (line 755)
        kwargs_40442 = {}
        # Getting the type of 'as_list' (line 755)
        as_list_40440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 29), 'as_list', False)
        # Calling as_list(args, kwargs) (line 755)
        as_list_call_result_40443 = invoke(stypy.reporting.localization.Localization(__file__, 755, 29), as_list_40440, *[v_40441], **kwargs_40442)
        
        # Processing the call keyword arguments (line 755)
        kwargs_40444 = {}
        # Getting the type of 'setattr' (line 755)
        setattr_40437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 755)
        setattr_call_result_40445 = invoke(stypy.reporting.localization.Localization(__file__, 755, 12), setattr_40437, *[self_40438, n_40439, as_list_call_result_40443], **kwargs_40444)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 757)
        self_40446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 17), 'self')
        # Obtaining the member 'dict_keys' of a type (line 757)
        dict_keys_40447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 17), self_40446, 'dict_keys')
        # Testing the type of a for loop iterable (line 757)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 757, 8), dict_keys_40447)
        # Getting the type of the for loop variable (line 757)
        for_loop_var_40448 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 757, 8), dict_keys_40447)
        # Assigning a type to the variable 'n' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'n', for_loop_var_40448)
        # SSA begins for a for statement (line 757)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 758):
        
        # Assigning a Call to a Name (line 758):
        
        # Call to copy(...): (line 758)
        # Processing the call arguments (line 758)
        
        # Call to get(...): (line 758)
        # Processing the call arguments (line 758)
        # Getting the type of 'n' (line 758)
        n_40453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 36), 'n', False)
        
        # Obtaining an instance of the builtin type 'dict' (line 758)
        dict_40454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 39), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 758)
        
        # Processing the call keyword arguments (line 758)
        kwargs_40455 = {}
        # Getting the type of 'attrs' (line 758)
        attrs_40451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 26), 'attrs', False)
        # Obtaining the member 'get' of a type (line 758)
        get_40452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 26), attrs_40451, 'get')
        # Calling get(args, kwargs) (line 758)
        get_call_result_40456 = invoke(stypy.reporting.localization.Localization(__file__, 758, 26), get_40452, *[n_40453, dict_40454], **kwargs_40455)
        
        # Processing the call keyword arguments (line 758)
        kwargs_40457 = {}
        # Getting the type of 'copy' (line 758)
        copy_40449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 16), 'copy', False)
        # Obtaining the member 'copy' of a type (line 758)
        copy_40450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 16), copy_40449, 'copy')
        # Calling copy(args, kwargs) (line 758)
        copy_call_result_40458 = invoke(stypy.reporting.localization.Localization(__file__, 758, 16), copy_40450, *[get_call_result_40456], **kwargs_40457)
        
        # Assigning a type to the variable 'v' (line 758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 12), 'v', copy_call_result_40458)
        
        # Call to setattr(...): (line 759)
        # Processing the call arguments (line 759)
        # Getting the type of 'self' (line 759)
        self_40460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 20), 'self', False)
        # Getting the type of 'n' (line 759)
        n_40461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 26), 'n', False)
        # Getting the type of 'v' (line 759)
        v_40462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 29), 'v', False)
        # Processing the call keyword arguments (line 759)
        kwargs_40463 = {}
        # Getting the type of 'setattr' (line 759)
        setattr_40459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 759)
        setattr_call_result_40464 = invoke(stypy.reporting.localization.Localization(__file__, 759, 12), setattr_40459, *[self_40460, n_40461, v_40462], **kwargs_40463)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 761):
        
        # Assigning a BinOp to a Name (line 761):
        # Getting the type of 'self' (line 761)
        self_40465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 21), 'self')
        # Obtaining the member 'list_keys' of a type (line 761)
        list_keys_40466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 21), self_40465, 'list_keys')
        # Getting the type of 'self' (line 761)
        self_40467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 38), 'self')
        # Obtaining the member 'dict_keys' of a type (line 761)
        dict_keys_40468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 38), self_40467, 'dict_keys')
        # Applying the binary operator '+' (line 761)
        result_add_40469 = python_operator(stypy.reporting.localization.Localization(__file__, 761, 21), '+', list_keys_40466, dict_keys_40468)
        
        # Assigning a type to the variable 'known_keys' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'known_keys', result_add_40469)
        
        # Assigning a Subscript to a Attribute (line 762):
        
        # Assigning a Subscript to a Attribute (line 762):
        
        # Obtaining the type of the subscript
        slice_40470 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 762, 26), None, None, None)
        # Getting the type of 'self' (line 762)
        self_40471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 26), 'self')
        # Obtaining the member '_extra_keys' of a type (line 762)
        _extra_keys_40472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 26), self_40471, '_extra_keys')
        # Obtaining the member '__getitem__' of a type (line 762)
        getitem___40473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 26), _extra_keys_40472, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 762)
        subscript_call_result_40474 = invoke(stypy.reporting.localization.Localization(__file__, 762, 26), getitem___40473, slice_40470)
        
        # Getting the type of 'self' (line 762)
        self_40475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 8), 'self')
        # Setting the type of the member 'extra_keys' of a type (line 762)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 8), self_40475, 'extra_keys', subscript_call_result_40474)
        
        
        # Call to keys(...): (line 763)
        # Processing the call keyword arguments (line 763)
        kwargs_40478 = {}
        # Getting the type of 'attrs' (line 763)
        attrs_40476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 17), 'attrs', False)
        # Obtaining the member 'keys' of a type (line 763)
        keys_40477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 17), attrs_40476, 'keys')
        # Calling keys(args, kwargs) (line 763)
        keys_call_result_40479 = invoke(stypy.reporting.localization.Localization(__file__, 763, 17), keys_40477, *[], **kwargs_40478)
        
        # Testing the type of a for loop iterable (line 763)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 763, 8), keys_call_result_40479)
        # Getting the type of the for loop variable (line 763)
        for_loop_var_40480 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 763, 8), keys_call_result_40479)
        # Assigning a type to the variable 'n' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'n', for_loop_var_40480)
        # SSA begins for a for statement (line 763)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'n' (line 764)
        n_40481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 15), 'n')
        # Getting the type of 'known_keys' (line 764)
        known_keys_40482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 20), 'known_keys')
        # Applying the binary operator 'in' (line 764)
        result_contains_40483 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 15), 'in', n_40481, known_keys_40482)
        
        # Testing the type of an if condition (line 764)
        if_condition_40484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 764, 12), result_contains_40483)
        # Assigning a type to the variable 'if_condition_40484' (line 764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 12), 'if_condition_40484', if_condition_40484)
        # SSA begins for if statement (line 764)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 764)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 766):
        
        # Assigning a Subscript to a Name (line 766):
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 766)
        n_40485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 22), 'n')
        # Getting the type of 'attrs' (line 766)
        attrs_40486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 16), 'attrs')
        # Obtaining the member '__getitem__' of a type (line 766)
        getitem___40487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 16), attrs_40486, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 766)
        subscript_call_result_40488 = invoke(stypy.reporting.localization.Localization(__file__, 766, 16), getitem___40487, n_40485)
        
        # Assigning a type to the variable 'a' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 12), 'a', subscript_call_result_40488)
        
        # Call to setattr(...): (line 767)
        # Processing the call arguments (line 767)
        # Getting the type of 'self' (line 767)
        self_40490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 20), 'self', False)
        # Getting the type of 'n' (line 767)
        n_40491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 26), 'n', False)
        # Getting the type of 'a' (line 767)
        a_40492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 29), 'a', False)
        # Processing the call keyword arguments (line 767)
        kwargs_40493 = {}
        # Getting the type of 'setattr' (line 767)
        setattr_40489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 767)
        setattr_call_result_40494 = invoke(stypy.reporting.localization.Localization(__file__, 767, 12), setattr_40489, *[self_40490, n_40491, a_40492], **kwargs_40493)
        
        
        # Type idiom detected: calculating its left and rigth part (line 768)
        # Getting the type of 'list' (line 768)
        list_40495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 29), 'list')
        # Getting the type of 'a' (line 768)
        a_40496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 26), 'a')
        
        (may_be_40497, more_types_in_union_40498) = may_be_subtype(list_40495, a_40496)

        if may_be_40497:

            if more_types_in_union_40498:
                # Runtime conditional SSA (line 768)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'a' (line 768)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'a', remove_not_subtype_from_union(a_40496, list))
            
            # Call to append(...): (line 769)
            # Processing the call arguments (line 769)
            # Getting the type of 'n' (line 769)
            n_40502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 38), 'n', False)
            # Processing the call keyword arguments (line 769)
            kwargs_40503 = {}
            # Getting the type of 'self' (line 769)
            self_40499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 16), 'self', False)
            # Obtaining the member 'list_keys' of a type (line 769)
            list_keys_40500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 16), self_40499, 'list_keys')
            # Obtaining the member 'append' of a type (line 769)
            append_40501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 16), list_keys_40500, 'append')
            # Calling append(args, kwargs) (line 769)
            append_call_result_40504 = invoke(stypy.reporting.localization.Localization(__file__, 769, 16), append_40501, *[n_40502], **kwargs_40503)
            

            if more_types_in_union_40498:
                # Runtime conditional SSA for else branch (line 768)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_40497) or more_types_in_union_40498):
            # Assigning a type to the variable 'a' (line 768)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'a', remove_subtype_from_union(a_40496, list))
            
            # Type idiom detected: calculating its left and rigth part (line 770)
            # Getting the type of 'dict' (line 770)
            dict_40505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 31), 'dict')
            # Getting the type of 'a' (line 770)
            a_40506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 28), 'a')
            
            (may_be_40507, more_types_in_union_40508) = may_be_subtype(dict_40505, a_40506)

            if may_be_40507:

                if more_types_in_union_40508:
                    # Runtime conditional SSA (line 770)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'a' (line 770)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 17), 'a', remove_not_subtype_from_union(a_40506, dict))
                
                # Call to append(...): (line 771)
                # Processing the call arguments (line 771)
                # Getting the type of 'n' (line 771)
                n_40512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 38), 'n', False)
                # Processing the call keyword arguments (line 771)
                kwargs_40513 = {}
                # Getting the type of 'self' (line 771)
                self_40509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 16), 'self', False)
                # Obtaining the member 'dict_keys' of a type (line 771)
                dict_keys_40510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 16), self_40509, 'dict_keys')
                # Obtaining the member 'append' of a type (line 771)
                append_40511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 16), dict_keys_40510, 'append')
                # Calling append(args, kwargs) (line 771)
                append_call_result_40514 = invoke(stypy.reporting.localization.Localization(__file__, 771, 16), append_40511, *[n_40512], **kwargs_40513)
                

                if more_types_in_union_40508:
                    # Runtime conditional SSA for else branch (line 770)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_40507) or more_types_in_union_40508):
                # Assigning a type to the variable 'a' (line 770)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 17), 'a', remove_subtype_from_union(a_40506, dict))
                
                # Call to append(...): (line 773)
                # Processing the call arguments (line 773)
                # Getting the type of 'n' (line 773)
                n_40518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 39), 'n', False)
                # Processing the call keyword arguments (line 773)
                kwargs_40519 = {}
                # Getting the type of 'self' (line 773)
                self_40515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 16), 'self', False)
                # Obtaining the member 'extra_keys' of a type (line 773)
                extra_keys_40516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 16), self_40515, 'extra_keys')
                # Obtaining the member 'append' of a type (line 773)
                append_40517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 16), extra_keys_40516, 'append')
                # Calling append(args, kwargs) (line 773)
                append_call_result_40520 = invoke(stypy.reporting.localization.Localization(__file__, 773, 16), append_40517, *[n_40518], **kwargs_40519)
                

                if (may_be_40507 and more_types_in_union_40508):
                    # SSA join for if statement (line 770)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_40497 and more_types_in_union_40498):
                # SSA join for if statement (line 768)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to exists(...): (line 775)
        # Processing the call arguments (line 775)
        
        # Call to njoin(...): (line 775)
        # Processing the call arguments (line 775)
        # Getting the type of 'package_path' (line 775)
        package_path_40525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 32), 'package_path', False)
        str_40526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 775, 46), 'str', '__init__.py')
        # Processing the call keyword arguments (line 775)
        kwargs_40527 = {}
        # Getting the type of 'njoin' (line 775)
        njoin_40524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 26), 'njoin', False)
        # Calling njoin(args, kwargs) (line 775)
        njoin_call_result_40528 = invoke(stypy.reporting.localization.Localization(__file__, 775, 26), njoin_40524, *[package_path_40525, str_40526], **kwargs_40527)
        
        # Processing the call keyword arguments (line 775)
        kwargs_40529 = {}
        # Getting the type of 'os' (line 775)
        os_40521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 11), 'os', False)
        # Obtaining the member 'path' of a type (line 775)
        path_40522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 11), os_40521, 'path')
        # Obtaining the member 'exists' of a type (line 775)
        exists_40523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 11), path_40522, 'exists')
        # Calling exists(args, kwargs) (line 775)
        exists_call_result_40530 = invoke(stypy.reporting.localization.Localization(__file__, 775, 11), exists_40523, *[njoin_call_result_40528], **kwargs_40529)
        
        # Testing the type of an if condition (line 775)
        if_condition_40531 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 775, 8), exists_call_result_40530)
        # Assigning a type to the variable 'if_condition_40531' (line 775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 8), 'if_condition_40531', if_condition_40531)
        # SSA begins for if statement (line 775)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 776)
        # Processing the call arguments (line 776)
        # Getting the type of 'self' (line 776)
        self_40535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 33), 'self', False)
        # Obtaining the member 'name' of a type (line 776)
        name_40536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 33), self_40535, 'name')
        # Processing the call keyword arguments (line 776)
        kwargs_40537 = {}
        # Getting the type of 'self' (line 776)
        self_40532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 12), 'self', False)
        # Obtaining the member 'packages' of a type (line 776)
        packages_40533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 12), self_40532, 'packages')
        # Obtaining the member 'append' of a type (line 776)
        append_40534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 12), packages_40533, 'append')
        # Calling append(args, kwargs) (line 776)
        append_call_result_40538 = invoke(stypy.reporting.localization.Localization(__file__, 776, 12), append_40534, *[name_40536], **kwargs_40537)
        
        
        # Assigning a Name to a Subscript (line 777):
        
        # Assigning a Name to a Subscript (line 777):
        # Getting the type of 'package_path' (line 777)
        package_path_40539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 42), 'package_path')
        # Getting the type of 'self' (line 777)
        self_40540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 12), 'self')
        # Obtaining the member 'package_dir' of a type (line 777)
        package_dir_40541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 12), self_40540, 'package_dir')
        # Getting the type of 'self' (line 777)
        self_40542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 29), 'self')
        # Obtaining the member 'name' of a type (line 777)
        name_40543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 29), self_40542, 'name')
        # Storing an element on a container (line 777)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 777, 12), package_dir_40541, (name_40543, package_path_40539))
        # SSA join for if statement (line 775)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 779):
        
        # Assigning a Call to a Attribute (line 779):
        
        # Call to dict(...): (line 779)
        # Processing the call keyword arguments (line 779)
        # Getting the type of 'False' (line 780)
        False_40545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 34), 'False', False)
        keyword_40546 = False_40545
        # Getting the type of 'False' (line 781)
        False_40547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 43), 'False', False)
        keyword_40548 = False_40547
        # Getting the type of 'False' (line 782)
        False_40549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 46), 'False', False)
        keyword_40550 = False_40549
        # Getting the type of 'False' (line 783)
        False_40551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 20), 'False', False)
        keyword_40552 = False_40551
        kwargs_40553 = {'delegate_options_to_subpackages': keyword_40550, 'ignore_setup_xxx_py': keyword_40546, 'quiet': keyword_40552, 'assume_default_configuration': keyword_40548}
        # Getting the type of 'dict' (line 779)
        dict_40544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 23), 'dict', False)
        # Calling dict(args, kwargs) (line 779)
        dict_call_result_40554 = invoke(stypy.reporting.localization.Localization(__file__, 779, 23), dict_40544, *[], **kwargs_40553)
        
        # Getting the type of 'self' (line 779)
        self_40555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 8), 'self')
        # Setting the type of the member 'options' of a type (line 779)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 8), self_40555, 'options', dict_call_result_40554)
        
        # Assigning a Name to a Name (line 786):
        
        # Assigning a Name to a Name (line 786):
        # Getting the type of 'None' (line 786)
        None_40556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 26), 'None')
        # Assigning a type to the variable 'caller_instance' (line 786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 8), 'caller_instance', None_40556)
        
        
        # Call to range(...): (line 787)
        # Processing the call arguments (line 787)
        int_40558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 23), 'int')
        int_40559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 26), 'int')
        # Processing the call keyword arguments (line 787)
        kwargs_40560 = {}
        # Getting the type of 'range' (line 787)
        range_40557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 17), 'range', False)
        # Calling range(args, kwargs) (line 787)
        range_call_result_40561 = invoke(stypy.reporting.localization.Localization(__file__, 787, 17), range_40557, *[int_40558, int_40559], **kwargs_40560)
        
        # Testing the type of a for loop iterable (line 787)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 787, 8), range_call_result_40561)
        # Getting the type of the for loop variable (line 787)
        for_loop_var_40562 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 787, 8), range_call_result_40561)
        # Assigning a type to the variable 'i' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'i', for_loop_var_40562)
        # SSA begins for a for statement (line 787)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 788)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 789):
        
        # Assigning a Call to a Name (line 789):
        
        # Call to get_frame(...): (line 789)
        # Processing the call arguments (line 789)
        # Getting the type of 'i' (line 789)
        i_40564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 30), 'i', False)
        # Processing the call keyword arguments (line 789)
        kwargs_40565 = {}
        # Getting the type of 'get_frame' (line 789)
        get_frame_40563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 20), 'get_frame', False)
        # Calling get_frame(args, kwargs) (line 789)
        get_frame_call_result_40566 = invoke(stypy.reporting.localization.Localization(__file__, 789, 20), get_frame_40563, *[i_40564], **kwargs_40565)
        
        # Assigning a type to the variable 'f' (line 789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 16), 'f', get_frame_call_result_40566)
        # SSA branch for the except part of a try statement (line 788)
        # SSA branch for the except 'ValueError' branch of a try statement (line 788)
        module_type_store.open_ssa_branch('except')
        # SSA join for try-except statement (line 788)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 792)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 793):
        
        # Assigning a Call to a Name (line 793):
        
        # Call to eval(...): (line 793)
        # Processing the call arguments (line 793)
        str_40568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 39), 'str', 'self')
        # Getting the type of 'f' (line 793)
        f_40569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 47), 'f', False)
        # Obtaining the member 'f_globals' of a type (line 793)
        f_globals_40570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 47), f_40569, 'f_globals')
        # Getting the type of 'f' (line 793)
        f_40571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 60), 'f', False)
        # Obtaining the member 'f_locals' of a type (line 793)
        f_locals_40572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 60), f_40571, 'f_locals')
        # Processing the call keyword arguments (line 793)
        kwargs_40573 = {}
        # Getting the type of 'eval' (line 793)
        eval_40567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 34), 'eval', False)
        # Calling eval(args, kwargs) (line 793)
        eval_call_result_40574 = invoke(stypy.reporting.localization.Localization(__file__, 793, 34), eval_40567, *[str_40568, f_globals_40570, f_locals_40572], **kwargs_40573)
        
        # Assigning a type to the variable 'caller_instance' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 16), 'caller_instance', eval_call_result_40574)
        # SSA branch for the except part of a try statement (line 792)
        # SSA branch for the except 'NameError' branch of a try statement (line 792)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 792)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 797)
        # Processing the call arguments (line 797)
        # Getting the type of 'caller_instance' (line 797)
        caller_instance_40576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 22), 'caller_instance', False)
        # Getting the type of 'self' (line 797)
        self_40577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 39), 'self', False)
        # Obtaining the member '__class__' of a type (line 797)
        class___40578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 39), self_40577, '__class__')
        # Processing the call keyword arguments (line 797)
        kwargs_40579 = {}
        # Getting the type of 'isinstance' (line 797)
        isinstance_40575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 797)
        isinstance_call_result_40580 = invoke(stypy.reporting.localization.Localization(__file__, 797, 11), isinstance_40575, *[caller_instance_40576, class___40578], **kwargs_40579)
        
        # Testing the type of an if condition (line 797)
        if_condition_40581 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 797, 8), isinstance_call_result_40580)
        # Assigning a type to the variable 'if_condition_40581' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 8), 'if_condition_40581', if_condition_40581)
        # SSA begins for if statement (line 797)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Obtaining the type of the subscript
        str_40582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 39), 'str', 'delegate_options_to_subpackages')
        # Getting the type of 'caller_instance' (line 798)
        caller_instance_40583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 15), 'caller_instance')
        # Obtaining the member 'options' of a type (line 798)
        options_40584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 15), caller_instance_40583, 'options')
        # Obtaining the member '__getitem__' of a type (line 798)
        getitem___40585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 15), options_40584, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 798)
        subscript_call_result_40586 = invoke(stypy.reporting.localization.Localization(__file__, 798, 15), getitem___40585, str_40582)
        
        # Testing the type of an if condition (line 798)
        if_condition_40587 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 798, 12), subscript_call_result_40586)
        # Assigning a type to the variable 'if_condition_40587' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 12), 'if_condition_40587', if_condition_40587)
        # SSA begins for if statement (line 798)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_options(...): (line 799)
        # Processing the call keyword arguments (line 799)
        # Getting the type of 'caller_instance' (line 799)
        caller_instance_40590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 35), 'caller_instance', False)
        # Obtaining the member 'options' of a type (line 799)
        options_40591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 35), caller_instance_40590, 'options')
        kwargs_40592 = {'options_40591': options_40591}
        # Getting the type of 'self' (line 799)
        self_40588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 16), 'self', False)
        # Obtaining the member 'set_options' of a type (line 799)
        set_options_40589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 16), self_40588, 'set_options')
        # Calling set_options(args, kwargs) (line 799)
        set_options_call_result_40593 = invoke(stypy.reporting.localization.Localization(__file__, 799, 16), set_options_40589, *[], **kwargs_40592)
        
        # SSA join for if statement (line 798)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 797)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 801):
        
        # Assigning a Name to a Attribute (line 801):
        # Getting the type of 'setup_name' (line 801)
        setup_name_40594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 26), 'setup_name')
        # Getting the type of 'self' (line 801)
        self_40595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 8), 'self')
        # Setting the type of the member 'setup_name' of a type (line 801)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 8), self_40595, 'setup_name', setup_name_40594)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def todict(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'todict'
        module_type_store = module_type_store.open_function_context('todict', 803, 4, False)
        # Assigning a type to the variable 'self' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.todict.__dict__.__setitem__('stypy_localization', localization)
        Configuration.todict.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.todict.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.todict.__dict__.__setitem__('stypy_function_name', 'Configuration.todict')
        Configuration.todict.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.todict.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.todict.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.todict.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.todict.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.todict.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.todict.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.todict', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'todict', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'todict(...)' code ##################

        str_40596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, (-1)), 'str', '\n        Return a dictionary compatible with the keyword arguments of distutils\n        setup function.\n\n        Examples\n        --------\n        >>> setup(**config.todict())                           #doctest: +SKIP\n        ')
        
        # Call to _optimize_data_files(...): (line 813)
        # Processing the call keyword arguments (line 813)
        kwargs_40599 = {}
        # Getting the type of 'self' (line 813)
        self_40597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 8), 'self', False)
        # Obtaining the member '_optimize_data_files' of a type (line 813)
        _optimize_data_files_40598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 8), self_40597, '_optimize_data_files')
        # Calling _optimize_data_files(args, kwargs) (line 813)
        _optimize_data_files_call_result_40600 = invoke(stypy.reporting.localization.Localization(__file__, 813, 8), _optimize_data_files_40598, *[], **kwargs_40599)
        
        
        # Assigning a Dict to a Name (line 814):
        
        # Assigning a Dict to a Name (line 814):
        
        # Obtaining an instance of the builtin type 'dict' (line 814)
        dict_40601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 12), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 814)
        
        # Assigning a type to the variable 'd' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), 'd', dict_40601)
        
        # Assigning a BinOp to a Name (line 815):
        
        # Assigning a BinOp to a Name (line 815):
        # Getting the type of 'self' (line 815)
        self_40602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 21), 'self')
        # Obtaining the member 'list_keys' of a type (line 815)
        list_keys_40603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 21), self_40602, 'list_keys')
        # Getting the type of 'self' (line 815)
        self_40604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 38), 'self')
        # Obtaining the member 'dict_keys' of a type (line 815)
        dict_keys_40605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 38), self_40604, 'dict_keys')
        # Applying the binary operator '+' (line 815)
        result_add_40606 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 21), '+', list_keys_40603, dict_keys_40605)
        
        # Getting the type of 'self' (line 815)
        self_40607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 55), 'self')
        # Obtaining the member 'extra_keys' of a type (line 815)
        extra_keys_40608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 55), self_40607, 'extra_keys')
        # Applying the binary operator '+' (line 815)
        result_add_40609 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 53), '+', result_add_40606, extra_keys_40608)
        
        # Assigning a type to the variable 'known_keys' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'known_keys', result_add_40609)
        
        # Getting the type of 'known_keys' (line 816)
        known_keys_40610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 17), 'known_keys')
        # Testing the type of a for loop iterable (line 816)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 816, 8), known_keys_40610)
        # Getting the type of the for loop variable (line 816)
        for_loop_var_40611 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 816, 8), known_keys_40610)
        # Assigning a type to the variable 'n' (line 816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 8), 'n', for_loop_var_40611)
        # SSA begins for a for statement (line 816)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 817):
        
        # Assigning a Call to a Name (line 817):
        
        # Call to getattr(...): (line 817)
        # Processing the call arguments (line 817)
        # Getting the type of 'self' (line 817)
        self_40613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 24), 'self', False)
        # Getting the type of 'n' (line 817)
        n_40614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 30), 'n', False)
        # Processing the call keyword arguments (line 817)
        kwargs_40615 = {}
        # Getting the type of 'getattr' (line 817)
        getattr_40612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 16), 'getattr', False)
        # Calling getattr(args, kwargs) (line 817)
        getattr_call_result_40616 = invoke(stypy.reporting.localization.Localization(__file__, 817, 16), getattr_40612, *[self_40613, n_40614], **kwargs_40615)
        
        # Assigning a type to the variable 'a' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 12), 'a', getattr_call_result_40616)
        
        # Getting the type of 'a' (line 818)
        a_40617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 15), 'a')
        # Testing the type of an if condition (line 818)
        if_condition_40618 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 818, 12), a_40617)
        # Assigning a type to the variable 'if_condition_40618' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 12), 'if_condition_40618', if_condition_40618)
        # SSA begins for if statement (line 818)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 819):
        
        # Assigning a Name to a Subscript (line 819):
        # Getting the type of 'a' (line 819)
        a_40619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 23), 'a')
        # Getting the type of 'd' (line 819)
        d_40620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 16), 'd')
        # Getting the type of 'n' (line 819)
        n_40621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 18), 'n')
        # Storing an element on a container (line 819)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 819, 16), d_40620, (n_40621, a_40619))
        # SSA join for if statement (line 818)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'd' (line 820)
        d_40622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 15), 'd')
        # Assigning a type to the variable 'stypy_return_type' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'stypy_return_type', d_40622)
        
        # ################# End of 'todict(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'todict' in the type store
        # Getting the type of 'stypy_return_type' (line 803)
        stypy_return_type_40623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40623)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'todict'
        return stypy_return_type_40623


    @norecursion
    def info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'info'
        module_type_store = module_type_store.open_function_context('info', 822, 4, False)
        # Assigning a type to the variable 'self' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.info.__dict__.__setitem__('stypy_localization', localization)
        Configuration.info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.info.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.info.__dict__.__setitem__('stypy_function_name', 'Configuration.info')
        Configuration.info.__dict__.__setitem__('stypy_param_names_list', ['message'])
        Configuration.info.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.info.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.info.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.info.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.info', ['message'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'info', localization, ['message'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'info(...)' code ##################

        
        
        
        # Obtaining the type of the subscript
        str_40624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 28), 'str', 'quiet')
        # Getting the type of 'self' (line 823)
        self_40625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 15), 'self')
        # Obtaining the member 'options' of a type (line 823)
        options_40626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 15), self_40625, 'options')
        # Obtaining the member '__getitem__' of a type (line 823)
        getitem___40627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 15), options_40626, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 823)
        subscript_call_result_40628 = invoke(stypy.reporting.localization.Localization(__file__, 823, 15), getitem___40627, str_40624)
        
        # Applying the 'not' unary operator (line 823)
        result_not__40629 = python_operator(stypy.reporting.localization.Localization(__file__, 823, 11), 'not', subscript_call_result_40628)
        
        # Testing the type of an if condition (line 823)
        if_condition_40630 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 823, 8), result_not__40629)
        # Assigning a type to the variable 'if_condition_40630' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'if_condition_40630', if_condition_40630)
        # SSA begins for if statement (line 823)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to print(...): (line 824)
        # Processing the call arguments (line 824)
        # Getting the type of 'message' (line 824)
        message_40632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 18), 'message', False)
        # Processing the call keyword arguments (line 824)
        kwargs_40633 = {}
        # Getting the type of 'print' (line 824)
        print_40631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 12), 'print', False)
        # Calling print(args, kwargs) (line 824)
        print_call_result_40634 = invoke(stypy.reporting.localization.Localization(__file__, 824, 12), print_40631, *[message_40632], **kwargs_40633)
        
        # SSA join for if statement (line 823)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'info' in the type store
        # Getting the type of 'stypy_return_type' (line 822)
        stypy_return_type_40635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40635)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'info'
        return stypy_return_type_40635


    @norecursion
    def warn(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'warn'
        module_type_store = module_type_store.open_function_context('warn', 826, 4, False)
        # Assigning a type to the variable 'self' (line 827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.warn.__dict__.__setitem__('stypy_localization', localization)
        Configuration.warn.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.warn.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.warn.__dict__.__setitem__('stypy_function_name', 'Configuration.warn')
        Configuration.warn.__dict__.__setitem__('stypy_param_names_list', ['message'])
        Configuration.warn.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.warn.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.warn.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.warn.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.warn.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.warn.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.warn', ['message'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'warn', localization, ['message'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'warn(...)' code ##################

        
        # Call to write(...): (line 827)
        # Processing the call arguments (line 827)
        str_40639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 25), 'str', 'Warning: %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 827)
        tuple_40640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 827)
        # Adding element type (line 827)
        # Getting the type of 'message' (line 827)
        message_40641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 42), 'message', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 827, 42), tuple_40640, message_40641)
        
        # Applying the binary operator '%' (line 827)
        result_mod_40642 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 25), '%', str_40639, tuple_40640)
        
        # Processing the call keyword arguments (line 827)
        kwargs_40643 = {}
        # Getting the type of 'sys' (line 827)
        sys_40636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 8), 'sys', False)
        # Obtaining the member 'stderr' of a type (line 827)
        stderr_40637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 8), sys_40636, 'stderr')
        # Obtaining the member 'write' of a type (line 827)
        write_40638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 8), stderr_40637, 'write')
        # Calling write(args, kwargs) (line 827)
        write_call_result_40644 = invoke(stypy.reporting.localization.Localization(__file__, 827, 8), write_40638, *[result_mod_40642], **kwargs_40643)
        
        
        # ################# End of 'warn(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'warn' in the type store
        # Getting the type of 'stypy_return_type' (line 826)
        stypy_return_type_40645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40645)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'warn'
        return stypy_return_type_40645


    @norecursion
    def set_options(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_options'
        module_type_store = module_type_store.open_function_context('set_options', 829, 4, False)
        # Assigning a type to the variable 'self' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.set_options.__dict__.__setitem__('stypy_localization', localization)
        Configuration.set_options.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.set_options.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.set_options.__dict__.__setitem__('stypy_function_name', 'Configuration.set_options')
        Configuration.set_options.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.set_options.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.set_options.__dict__.__setitem__('stypy_kwargs_param_name', 'options')
        Configuration.set_options.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.set_options.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.set_options.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.set_options.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.set_options', [], None, 'options', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_options', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_options(...)' code ##################

        str_40646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, (-1)), 'str', '\n        Configure Configuration instance.\n\n        The following options are available:\n         - ignore_setup_xxx_py\n         - assume_default_configuration\n         - delegate_options_to_subpackages\n         - quiet\n\n        ')
        
        
        # Call to items(...): (line 840)
        # Processing the call keyword arguments (line 840)
        kwargs_40649 = {}
        # Getting the type of 'options' (line 840)
        options_40647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 26), 'options', False)
        # Obtaining the member 'items' of a type (line 840)
        items_40648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 26), options_40647, 'items')
        # Calling items(args, kwargs) (line 840)
        items_call_result_40650 = invoke(stypy.reporting.localization.Localization(__file__, 840, 26), items_40648, *[], **kwargs_40649)
        
        # Testing the type of a for loop iterable (line 840)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 840, 8), items_call_result_40650)
        # Getting the type of the for loop variable (line 840)
        for_loop_var_40651 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 840, 8), items_call_result_40650)
        # Assigning a type to the variable 'key' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 8), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 8), for_loop_var_40651))
        # Assigning a type to the variable 'value' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 8), 'value', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 8), for_loop_var_40651))
        # SSA begins for a for statement (line 840)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'key' (line 841)
        key_40652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 15), 'key')
        # Getting the type of 'self' (line 841)
        self_40653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 22), 'self')
        # Obtaining the member 'options' of a type (line 841)
        options_40654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 22), self_40653, 'options')
        # Applying the binary operator 'in' (line 841)
        result_contains_40655 = python_operator(stypy.reporting.localization.Localization(__file__, 841, 15), 'in', key_40652, options_40654)
        
        # Testing the type of an if condition (line 841)
        if_condition_40656 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 841, 12), result_contains_40655)
        # Assigning a type to the variable 'if_condition_40656' (line 841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 841, 12), 'if_condition_40656', if_condition_40656)
        # SSA begins for if statement (line 841)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 842):
        
        # Assigning a Name to a Subscript (line 842):
        # Getting the type of 'value' (line 842)
        value_40657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 36), 'value')
        # Getting the type of 'self' (line 842)
        self_40658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 16), 'self')
        # Obtaining the member 'options' of a type (line 842)
        options_40659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 16), self_40658, 'options')
        # Getting the type of 'key' (line 842)
        key_40660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 29), 'key')
        # Storing an element on a container (line 842)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 842, 16), options_40659, (key_40660, value_40657))
        # SSA branch for the else part of an if statement (line 841)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 844)
        # Processing the call arguments (line 844)
        str_40662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 33), 'str', 'Unknown option: ')
        # Getting the type of 'key' (line 844)
        key_40663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 52), 'key', False)
        # Applying the binary operator '+' (line 844)
        result_add_40664 = python_operator(stypy.reporting.localization.Localization(__file__, 844, 33), '+', str_40662, key_40663)
        
        # Processing the call keyword arguments (line 844)
        kwargs_40665 = {}
        # Getting the type of 'ValueError' (line 844)
        ValueError_40661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 844)
        ValueError_call_result_40666 = invoke(stypy.reporting.localization.Localization(__file__, 844, 22), ValueError_40661, *[result_add_40664], **kwargs_40665)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 844, 16), ValueError_call_result_40666, 'raise parameter', BaseException)
        # SSA join for if statement (line 841)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_options(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_options' in the type store
        # Getting the type of 'stypy_return_type' (line 829)
        stypy_return_type_40667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40667)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_options'
        return stypy_return_type_40667


    @norecursion
    def get_distribution(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_distribution'
        module_type_store = module_type_store.open_function_context('get_distribution', 846, 4, False)
        # Assigning a type to the variable 'self' (line 847)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.get_distribution.__dict__.__setitem__('stypy_localization', localization)
        Configuration.get_distribution.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.get_distribution.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.get_distribution.__dict__.__setitem__('stypy_function_name', 'Configuration.get_distribution')
        Configuration.get_distribution.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.get_distribution.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.get_distribution.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.get_distribution.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.get_distribution.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.get_distribution.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.get_distribution.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.get_distribution', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_distribution', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_distribution(...)' code ##################

        str_40668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 847, 8), 'str', 'Return the distutils distribution object for self.')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 848, 8))
        
        # 'from numpy.distutils.core import get_distribution' statement (line 848)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
        import_40669 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 848, 8), 'numpy.distutils.core')

        if (type(import_40669) is not StypyTypeError):

            if (import_40669 != 'pyd_module'):
                __import__(import_40669)
                sys_modules_40670 = sys.modules[import_40669]
                import_from_module(stypy.reporting.localization.Localization(__file__, 848, 8), 'numpy.distutils.core', sys_modules_40670.module_type_store, module_type_store, ['get_distribution'])
                nest_module(stypy.reporting.localization.Localization(__file__, 848, 8), __file__, sys_modules_40670, sys_modules_40670.module_type_store, module_type_store)
            else:
                from numpy.distutils.core import get_distribution

                import_from_module(stypy.reporting.localization.Localization(__file__, 848, 8), 'numpy.distutils.core', None, module_type_store, ['get_distribution'], [get_distribution])

        else:
            # Assigning a type to the variable 'numpy.distutils.core' (line 848)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 8), 'numpy.distutils.core', import_40669)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
        
        
        # Call to get_distribution(...): (line 849)
        # Processing the call keyword arguments (line 849)
        kwargs_40672 = {}
        # Getting the type of 'get_distribution' (line 849)
        get_distribution_40671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 15), 'get_distribution', False)
        # Calling get_distribution(args, kwargs) (line 849)
        get_distribution_call_result_40673 = invoke(stypy.reporting.localization.Localization(__file__, 849, 15), get_distribution_40671, *[], **kwargs_40672)
        
        # Assigning a type to the variable 'stypy_return_type' (line 849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'stypy_return_type', get_distribution_call_result_40673)
        
        # ################# End of 'get_distribution(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_distribution' in the type store
        # Getting the type of 'stypy_return_type' (line 846)
        stypy_return_type_40674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40674)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_distribution'
        return stypy_return_type_40674


    @norecursion
    def _wildcard_get_subpackage(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_40675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 853, 48), 'int')
        defaults = [int_40675]
        # Create a new context for function '_wildcard_get_subpackage'
        module_type_store = module_type_store.open_function_context('_wildcard_get_subpackage', 851, 4, False)
        # Assigning a type to the variable 'self' (line 852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_localization', localization)
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_function_name', 'Configuration._wildcard_get_subpackage')
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_param_names_list', ['subpackage_name', 'parent_name', 'caller_level'])
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration._wildcard_get_subpackage.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration._wildcard_get_subpackage', ['subpackage_name', 'parent_name', 'caller_level'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_wildcard_get_subpackage', localization, ['subpackage_name', 'parent_name', 'caller_level'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_wildcard_get_subpackage(...)' code ##################

        
        # Assigning a Call to a Name (line 854):
        
        # Assigning a Call to a Name (line 854):
        
        # Call to split(...): (line 854)
        # Processing the call arguments (line 854)
        str_40678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 34), 'str', '.')
        # Processing the call keyword arguments (line 854)
        kwargs_40679 = {}
        # Getting the type of 'subpackage_name' (line 854)
        subpackage_name_40676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 12), 'subpackage_name', False)
        # Obtaining the member 'split' of a type (line 854)
        split_40677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 12), subpackage_name_40676, 'split')
        # Calling split(args, kwargs) (line 854)
        split_call_result_40680 = invoke(stypy.reporting.localization.Localization(__file__, 854, 12), split_40677, *[str_40678], **kwargs_40679)
        
        # Assigning a type to the variable 'l' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'l', split_call_result_40680)
        
        # Assigning a Call to a Name (line 855):
        
        # Assigning a Call to a Name (line 855):
        
        # Call to njoin(...): (line 855)
        # Processing the call arguments (line 855)
        
        # Obtaining an instance of the builtin type 'list' (line 855)
        list_40682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 855)
        # Adding element type (line 855)
        # Getting the type of 'self' (line 855)
        self_40683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 33), 'self', False)
        # Obtaining the member 'local_path' of a type (line 855)
        local_path_40684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 33), self_40683, 'local_path')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 855, 32), list_40682, local_path_40684)
        
        # Getting the type of 'l' (line 855)
        l_40685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 50), 'l', False)
        # Applying the binary operator '+' (line 855)
        result_add_40686 = python_operator(stypy.reporting.localization.Localization(__file__, 855, 32), '+', list_40682, l_40685)
        
        # Processing the call keyword arguments (line 855)
        kwargs_40687 = {}
        # Getting the type of 'njoin' (line 855)
        njoin_40681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 26), 'njoin', False)
        # Calling njoin(args, kwargs) (line 855)
        njoin_call_result_40688 = invoke(stypy.reporting.localization.Localization(__file__, 855, 26), njoin_40681, *[result_add_40686], **kwargs_40687)
        
        # Assigning a type to the variable 'subpackage_path' (line 855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 8), 'subpackage_path', njoin_call_result_40688)
        
        # Assigning a ListComp to a Name (line 856):
        
        # Assigning a ListComp to a Name (line 856):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to glob(...): (line 856)
        # Processing the call arguments (line 856)
        # Getting the type of 'subpackage_path' (line 856)
        subpackage_path_40698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 39), 'subpackage_path', False)
        # Processing the call keyword arguments (line 856)
        kwargs_40699 = {}
        # Getting the type of 'glob' (line 856)
        glob_40696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 29), 'glob', False)
        # Obtaining the member 'glob' of a type (line 856)
        glob_40697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 29), glob_40696, 'glob')
        # Calling glob(args, kwargs) (line 856)
        glob_call_result_40700 = invoke(stypy.reporting.localization.Localization(__file__, 856, 29), glob_40697, *[subpackage_path_40698], **kwargs_40699)
        
        comprehension_40701 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 856, 16), glob_call_result_40700)
        # Assigning a type to the variable '_m' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 16), '_m', comprehension_40701)
        
        # Call to isdir(...): (line 856)
        # Processing the call arguments (line 856)
        # Getting the type of '_m' (line 856)
        _m_40693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 73), '_m', False)
        # Processing the call keyword arguments (line 856)
        kwargs_40694 = {}
        # Getting the type of 'os' (line 856)
        os_40690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 59), 'os', False)
        # Obtaining the member 'path' of a type (line 856)
        path_40691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 59), os_40690, 'path')
        # Obtaining the member 'isdir' of a type (line 856)
        isdir_40692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 59), path_40691, 'isdir')
        # Calling isdir(args, kwargs) (line 856)
        isdir_call_result_40695 = invoke(stypy.reporting.localization.Localization(__file__, 856, 59), isdir_40692, *[_m_40693], **kwargs_40694)
        
        # Getting the type of '_m' (line 856)
        _m_40689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 16), '_m')
        list_40702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 856, 16), list_40702, _m_40689)
        # Assigning a type to the variable 'dirs' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 8), 'dirs', list_40702)
        
        # Assigning a List to a Name (line 857):
        
        # Assigning a List to a Name (line 857):
        
        # Obtaining an instance of the builtin type 'list' (line 857)
        list_40703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 857)
        
        # Assigning a type to the variable 'config_list' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 8), 'config_list', list_40703)
        
        # Getting the type of 'dirs' (line 858)
        dirs_40704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 17), 'dirs')
        # Testing the type of a for loop iterable (line 858)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 858, 8), dirs_40704)
        # Getting the type of the for loop variable (line 858)
        for_loop_var_40705 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 858, 8), dirs_40704)
        # Assigning a type to the variable 'd' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 8), 'd', for_loop_var_40705)
        # SSA begins for a for statement (line 858)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to isfile(...): (line 859)
        # Processing the call arguments (line 859)
        
        # Call to njoin(...): (line 859)
        # Processing the call arguments (line 859)
        # Getting the type of 'd' (line 859)
        d_40710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 40), 'd', False)
        str_40711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, 43), 'str', '__init__.py')
        # Processing the call keyword arguments (line 859)
        kwargs_40712 = {}
        # Getting the type of 'njoin' (line 859)
        njoin_40709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 34), 'njoin', False)
        # Calling njoin(args, kwargs) (line 859)
        njoin_call_result_40713 = invoke(stypy.reporting.localization.Localization(__file__, 859, 34), njoin_40709, *[d_40710, str_40711], **kwargs_40712)
        
        # Processing the call keyword arguments (line 859)
        kwargs_40714 = {}
        # Getting the type of 'os' (line 859)
        os_40706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 859)
        path_40707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 19), os_40706, 'path')
        # Obtaining the member 'isfile' of a type (line 859)
        isfile_40708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 19), path_40707, 'isfile')
        # Calling isfile(args, kwargs) (line 859)
        isfile_call_result_40715 = invoke(stypy.reporting.localization.Localization(__file__, 859, 19), isfile_40708, *[njoin_call_result_40713], **kwargs_40714)
        
        # Applying the 'not' unary operator (line 859)
        result_not__40716 = python_operator(stypy.reporting.localization.Localization(__file__, 859, 15), 'not', isfile_call_result_40715)
        
        # Testing the type of an if condition (line 859)
        if_condition_40717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 859, 12), result_not__40716)
        # Assigning a type to the variable 'if_condition_40717' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 12), 'if_condition_40717', if_condition_40717)
        # SSA begins for if statement (line 859)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 859)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        str_40718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 861, 15), 'str', 'build')
        
        # Call to split(...): (line 861)
        # Processing the call arguments (line 861)
        # Getting the type of 'os' (line 861)
        os_40721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 34), 'os', False)
        # Obtaining the member 'sep' of a type (line 861)
        sep_40722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 34), os_40721, 'sep')
        # Processing the call keyword arguments (line 861)
        kwargs_40723 = {}
        # Getting the type of 'd' (line 861)
        d_40719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 26), 'd', False)
        # Obtaining the member 'split' of a type (line 861)
        split_40720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 26), d_40719, 'split')
        # Calling split(args, kwargs) (line 861)
        split_call_result_40724 = invoke(stypy.reporting.localization.Localization(__file__, 861, 26), split_40720, *[sep_40722], **kwargs_40723)
        
        # Applying the binary operator 'in' (line 861)
        result_contains_40725 = python_operator(stypy.reporting.localization.Localization(__file__, 861, 15), 'in', str_40718, split_call_result_40724)
        
        # Testing the type of an if condition (line 861)
        if_condition_40726 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 861, 12), result_contains_40725)
        # Assigning a type to the variable 'if_condition_40726' (line 861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 861, 12), 'if_condition_40726', if_condition_40726)
        # SSA begins for if statement (line 861)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 861)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 863):
        
        # Assigning a Call to a Name (line 863):
        
        # Call to join(...): (line 863)
        # Processing the call arguments (line 863)
        
        # Obtaining the type of the subscript
        
        
        # Call to len(...): (line 863)
        # Processing the call arguments (line 863)
        # Getting the type of 'l' (line 863)
        l_40730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 46), 'l', False)
        # Processing the call keyword arguments (line 863)
        kwargs_40731 = {}
        # Getting the type of 'len' (line 863)
        len_40729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 42), 'len', False)
        # Calling len(args, kwargs) (line 863)
        len_call_result_40732 = invoke(stypy.reporting.localization.Localization(__file__, 863, 42), len_40729, *[l_40730], **kwargs_40731)
        
        # Applying the 'usub' unary operator (line 863)
        result___neg___40733 = python_operator(stypy.reporting.localization.Localization(__file__, 863, 41), 'usub', len_call_result_40732)
        
        slice_40734 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 863, 25), result___neg___40733, None, None)
        
        # Call to split(...): (line 863)
        # Processing the call arguments (line 863)
        # Getting the type of 'os' (line 863)
        os_40737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 33), 'os', False)
        # Obtaining the member 'sep' of a type (line 863)
        sep_40738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 33), os_40737, 'sep')
        # Processing the call keyword arguments (line 863)
        kwargs_40739 = {}
        # Getting the type of 'd' (line 863)
        d_40735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 25), 'd', False)
        # Obtaining the member 'split' of a type (line 863)
        split_40736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 25), d_40735, 'split')
        # Calling split(args, kwargs) (line 863)
        split_call_result_40740 = invoke(stypy.reporting.localization.Localization(__file__, 863, 25), split_40736, *[sep_40738], **kwargs_40739)
        
        # Obtaining the member '__getitem__' of a type (line 863)
        getitem___40741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 25), split_call_result_40740, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 863)
        subscript_call_result_40742 = invoke(stypy.reporting.localization.Localization(__file__, 863, 25), getitem___40741, slice_40734)
        
        # Processing the call keyword arguments (line 863)
        kwargs_40743 = {}
        str_40727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 16), 'str', '.')
        # Obtaining the member 'join' of a type (line 863)
        join_40728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 16), str_40727, 'join')
        # Calling join(args, kwargs) (line 863)
        join_call_result_40744 = invoke(stypy.reporting.localization.Localization(__file__, 863, 16), join_40728, *[subscript_call_result_40742], **kwargs_40743)
        
        # Assigning a type to the variable 'n' (line 863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 12), 'n', join_call_result_40744)
        
        # Assigning a Call to a Name (line 864):
        
        # Assigning a Call to a Name (line 864):
        
        # Call to get_subpackage(...): (line 864)
        # Processing the call arguments (line 864)
        # Getting the type of 'n' (line 864)
        n_40747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 36), 'n', False)
        # Processing the call keyword arguments (line 864)
        # Getting the type of 'parent_name' (line 865)
        parent_name_40748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 50), 'parent_name', False)
        keyword_40749 = parent_name_40748
        # Getting the type of 'caller_level' (line 866)
        caller_level_40750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 51), 'caller_level', False)
        int_40751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 64), 'int')
        # Applying the binary operator '+' (line 866)
        result_add_40752 = python_operator(stypy.reporting.localization.Localization(__file__, 866, 51), '+', caller_level_40750, int_40751)
        
        keyword_40753 = result_add_40752
        kwargs_40754 = {'parent_name': keyword_40749, 'caller_level': keyword_40753}
        # Getting the type of 'self' (line 864)
        self_40745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 16), 'self', False)
        # Obtaining the member 'get_subpackage' of a type (line 864)
        get_subpackage_40746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 16), self_40745, 'get_subpackage')
        # Calling get_subpackage(args, kwargs) (line 864)
        get_subpackage_call_result_40755 = invoke(stypy.reporting.localization.Localization(__file__, 864, 16), get_subpackage_40746, *[n_40747], **kwargs_40754)
        
        # Assigning a type to the variable 'c' (line 864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 12), 'c', get_subpackage_call_result_40755)
        
        # Call to extend(...): (line 867)
        # Processing the call arguments (line 867)
        # Getting the type of 'c' (line 867)
        c_40758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 31), 'c', False)
        # Processing the call keyword arguments (line 867)
        kwargs_40759 = {}
        # Getting the type of 'config_list' (line 867)
        config_list_40756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 12), 'config_list', False)
        # Obtaining the member 'extend' of a type (line 867)
        extend_40757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 12), config_list_40756, 'extend')
        # Calling extend(args, kwargs) (line 867)
        extend_call_result_40760 = invoke(stypy.reporting.localization.Localization(__file__, 867, 12), extend_40757, *[c_40758], **kwargs_40759)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'config_list' (line 868)
        config_list_40761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 15), 'config_list')
        # Assigning a type to the variable 'stypy_return_type' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'stypy_return_type', config_list_40761)
        
        # ################# End of '_wildcard_get_subpackage(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_wildcard_get_subpackage' in the type store
        # Getting the type of 'stypy_return_type' (line 851)
        stypy_return_type_40762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40762)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_wildcard_get_subpackage'
        return stypy_return_type_40762


    @norecursion
    def _get_configuration_from_setup_py(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_40763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 874, 56), 'int')
        defaults = [int_40763]
        # Create a new context for function '_get_configuration_from_setup_py'
        module_type_store = module_type_store.open_function_context('_get_configuration_from_setup_py', 870, 4, False)
        # Assigning a type to the variable 'self' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_localization', localization)
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_function_name', 'Configuration._get_configuration_from_setup_py')
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_param_names_list', ['setup_py', 'subpackage_name', 'subpackage_path', 'parent_name', 'caller_level'])
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration._get_configuration_from_setup_py.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration._get_configuration_from_setup_py', ['setup_py', 'subpackage_name', 'subpackage_path', 'parent_name', 'caller_level'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_configuration_from_setup_py', localization, ['setup_py', 'subpackage_name', 'subpackage_path', 'parent_name', 'caller_level'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_configuration_from_setup_py(...)' code ##################

        
        # Call to insert(...): (line 876)
        # Processing the call arguments (line 876)
        int_40767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 24), 'int')
        
        # Call to dirname(...): (line 876)
        # Processing the call arguments (line 876)
        # Getting the type of 'setup_py' (line 876)
        setup_py_40771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 43), 'setup_py', False)
        # Processing the call keyword arguments (line 876)
        kwargs_40772 = {}
        # Getting the type of 'os' (line 876)
        os_40768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 27), 'os', False)
        # Obtaining the member 'path' of a type (line 876)
        path_40769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 27), os_40768, 'path')
        # Obtaining the member 'dirname' of a type (line 876)
        dirname_40770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 27), path_40769, 'dirname')
        # Calling dirname(args, kwargs) (line 876)
        dirname_call_result_40773 = invoke(stypy.reporting.localization.Localization(__file__, 876, 27), dirname_40770, *[setup_py_40771], **kwargs_40772)
        
        # Processing the call keyword arguments (line 876)
        kwargs_40774 = {}
        # Getting the type of 'sys' (line 876)
        sys_40764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'sys', False)
        # Obtaining the member 'path' of a type (line 876)
        path_40765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 8), sys_40764, 'path')
        # Obtaining the member 'insert' of a type (line 876)
        insert_40766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 8), path_40765, 'insert')
        # Calling insert(args, kwargs) (line 876)
        insert_call_result_40775 = invoke(stypy.reporting.localization.Localization(__file__, 876, 8), insert_40766, *[int_40767, dirname_call_result_40773], **kwargs_40774)
        
        
        # Try-finally block (line 877)
        
        # Assigning a Call to a Name (line 878):
        
        # Assigning a Call to a Name (line 878):
        
        # Call to open(...): (line 878)
        # Processing the call arguments (line 878)
        # Getting the type of 'setup_py' (line 878)
        setup_py_40777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 31), 'setup_py', False)
        str_40778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 41), 'str', 'U')
        # Processing the call keyword arguments (line 878)
        kwargs_40779 = {}
        # Getting the type of 'open' (line 878)
        open_40776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 26), 'open', False)
        # Calling open(args, kwargs) (line 878)
        open_call_result_40780 = invoke(stypy.reporting.localization.Localization(__file__, 878, 26), open_40776, *[setup_py_40777, str_40778], **kwargs_40779)
        
        # Assigning a type to the variable 'fo_setup_py' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 12), 'fo_setup_py', open_call_result_40780)
        
        # Assigning a Subscript to a Name (line 879):
        
        # Assigning a Subscript to a Name (line 879):
        
        # Obtaining the type of the subscript
        int_40781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 70), 'int')
        
        # Call to splitext(...): (line 879)
        # Processing the call arguments (line 879)
        
        # Call to basename(...): (line 879)
        # Processing the call arguments (line 879)
        # Getting the type of 'setup_py' (line 879)
        setup_py_40788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 59), 'setup_py', False)
        # Processing the call keyword arguments (line 879)
        kwargs_40789 = {}
        # Getting the type of 'os' (line 879)
        os_40785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 42), 'os', False)
        # Obtaining the member 'path' of a type (line 879)
        path_40786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 42), os_40785, 'path')
        # Obtaining the member 'basename' of a type (line 879)
        basename_40787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 42), path_40786, 'basename')
        # Calling basename(args, kwargs) (line 879)
        basename_call_result_40790 = invoke(stypy.reporting.localization.Localization(__file__, 879, 42), basename_40787, *[setup_py_40788], **kwargs_40789)
        
        # Processing the call keyword arguments (line 879)
        kwargs_40791 = {}
        # Getting the type of 'os' (line 879)
        os_40782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 25), 'os', False)
        # Obtaining the member 'path' of a type (line 879)
        path_40783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 25), os_40782, 'path')
        # Obtaining the member 'splitext' of a type (line 879)
        splitext_40784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 25), path_40783, 'splitext')
        # Calling splitext(args, kwargs) (line 879)
        splitext_call_result_40792 = invoke(stypy.reporting.localization.Localization(__file__, 879, 25), splitext_40784, *[basename_call_result_40790], **kwargs_40791)
        
        # Obtaining the member '__getitem__' of a type (line 879)
        getitem___40793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 25), splitext_call_result_40792, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 879)
        subscript_call_result_40794 = invoke(stypy.reporting.localization.Localization(__file__, 879, 25), getitem___40793, int_40781)
        
        # Assigning a type to the variable 'setup_name' (line 879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 12), 'setup_name', subscript_call_result_40794)
        
        # Assigning a Call to a Name (line 880):
        
        # Assigning a Call to a Name (line 880):
        
        # Call to dot_join(...): (line 880)
        # Processing the call arguments (line 880)
        # Getting the type of 'self' (line 880)
        self_40796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 25), 'self', False)
        # Obtaining the member 'name' of a type (line 880)
        name_40797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 25), self_40796, 'name')
        # Getting the type of 'subpackage_name' (line 880)
        subpackage_name_40798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 36), 'subpackage_name', False)
        # Getting the type of 'setup_name' (line 880)
        setup_name_40799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 53), 'setup_name', False)
        # Processing the call keyword arguments (line 880)
        kwargs_40800 = {}
        # Getting the type of 'dot_join' (line 880)
        dot_join_40795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 16), 'dot_join', False)
        # Calling dot_join(args, kwargs) (line 880)
        dot_join_call_result_40801 = invoke(stypy.reporting.localization.Localization(__file__, 880, 16), dot_join_40795, *[name_40797, subpackage_name_40798, setup_name_40799], **kwargs_40800)
        
        # Assigning a type to the variable 'n' (line 880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 12), 'n', dot_join_call_result_40801)
        
        # Assigning a Call to a Name (line 881):
        
        # Assigning a Call to a Name (line 881):
        
        # Call to load_module(...): (line 881)
        # Processing the call arguments (line 881)
        
        # Call to join(...): (line 881)
        # Processing the call arguments (line 881)
        
        # Call to split(...): (line 881)
        # Processing the call arguments (line 881)
        str_40808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 60), 'str', '.')
        # Processing the call keyword arguments (line 881)
        kwargs_40809 = {}
        # Getting the type of 'n' (line 881)
        n_40806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 52), 'n', False)
        # Obtaining the member 'split' of a type (line 881)
        split_40807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 52), n_40806, 'split')
        # Calling split(args, kwargs) (line 881)
        split_call_result_40810 = invoke(stypy.reporting.localization.Localization(__file__, 881, 52), split_40807, *[str_40808], **kwargs_40809)
        
        # Processing the call keyword arguments (line 881)
        kwargs_40811 = {}
        str_40804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 43), 'str', '_')
        # Obtaining the member 'join' of a type (line 881)
        join_40805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 43), str_40804, 'join')
        # Calling join(args, kwargs) (line 881)
        join_call_result_40812 = invoke(stypy.reporting.localization.Localization(__file__, 881, 43), join_40805, *[split_call_result_40810], **kwargs_40811)
        
        # Getting the type of 'fo_setup_py' (line 882)
        fo_setup_py_40813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 43), 'fo_setup_py', False)
        # Getting the type of 'setup_py' (line 883)
        setup_py_40814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 43), 'setup_py', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 884)
        tuple_40815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 884)
        # Adding element type (line 884)
        str_40816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 44), 'str', '.py')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 884, 44), tuple_40815, str_40816)
        # Adding element type (line 884)
        str_40817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 51), 'str', 'U')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 884, 44), tuple_40815, str_40817)
        # Adding element type (line 884)
        int_40818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 884, 44), tuple_40815, int_40818)
        
        # Processing the call keyword arguments (line 881)
        kwargs_40819 = {}
        # Getting the type of 'imp' (line 881)
        imp_40802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 27), 'imp', False)
        # Obtaining the member 'load_module' of a type (line 881)
        load_module_40803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 27), imp_40802, 'load_module')
        # Calling load_module(args, kwargs) (line 881)
        load_module_call_result_40820 = invoke(stypy.reporting.localization.Localization(__file__, 881, 27), load_module_40803, *[join_call_result_40812, fo_setup_py_40813, setup_py_40814, tuple_40815], **kwargs_40819)
        
        # Assigning a type to the variable 'setup_module' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 12), 'setup_module', load_module_call_result_40820)
        
        # Call to close(...): (line 885)
        # Processing the call keyword arguments (line 885)
        kwargs_40823 = {}
        # Getting the type of 'fo_setup_py' (line 885)
        fo_setup_py_40821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 12), 'fo_setup_py', False)
        # Obtaining the member 'close' of a type (line 885)
        close_40822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 12), fo_setup_py_40821, 'close')
        # Calling close(args, kwargs) (line 885)
        close_call_result_40824 = invoke(stypy.reporting.localization.Localization(__file__, 885, 12), close_40822, *[], **kwargs_40823)
        
        
        # Type idiom detected: calculating its left and rigth part (line 886)
        str_40825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 41), 'str', 'configuration')
        # Getting the type of 'setup_module' (line 886)
        setup_module_40826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 27), 'setup_module')
        
        (may_be_40827, more_types_in_union_40828) = may_not_provide_member(str_40825, setup_module_40826)

        if may_be_40827:

            if more_types_in_union_40828:
                # Runtime conditional SSA (line 886)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'setup_module' (line 886)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 12), 'setup_module', remove_member_provider_from_union(setup_module_40826, 'configuration'))
            
            
            
            # Obtaining the type of the subscript
            str_40829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 36), 'str', 'assume_default_configuration')
            # Getting the type of 'self' (line 887)
            self_40830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 23), 'self')
            # Obtaining the member 'options' of a type (line 887)
            options_40831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 23), self_40830, 'options')
            # Obtaining the member '__getitem__' of a type (line 887)
            getitem___40832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 23), options_40831, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 887)
            subscript_call_result_40833 = invoke(stypy.reporting.localization.Localization(__file__, 887, 23), getitem___40832, str_40829)
            
            # Applying the 'not' unary operator (line 887)
            result_not__40834 = python_operator(stypy.reporting.localization.Localization(__file__, 887, 19), 'not', subscript_call_result_40833)
            
            # Testing the type of an if condition (line 887)
            if_condition_40835 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 887, 16), result_not__40834)
            # Assigning a type to the variable 'if_condition_40835' (line 887)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 16), 'if_condition_40835', if_condition_40835)
            # SSA begins for if statement (line 887)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to warn(...): (line 888)
            # Processing the call arguments (line 888)
            str_40838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 30), 'str', 'Assuming default configuration (%s does not define configuration())')
            # Getting the type of 'setup_module' (line 890)
            setup_module_40839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 33), 'setup_module', False)
            # Applying the binary operator '%' (line 888)
            result_mod_40840 = python_operator(stypy.reporting.localization.Localization(__file__, 888, 30), '%', str_40838, setup_module_40839)
            
            # Processing the call keyword arguments (line 888)
            kwargs_40841 = {}
            # Getting the type of 'self' (line 888)
            self_40836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 20), 'self', False)
            # Obtaining the member 'warn' of a type (line 888)
            warn_40837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 20), self_40836, 'warn')
            # Calling warn(args, kwargs) (line 888)
            warn_call_result_40842 = invoke(stypy.reporting.localization.Localization(__file__, 888, 20), warn_40837, *[result_mod_40840], **kwargs_40841)
            
            # SSA join for if statement (line 887)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 891):
            
            # Assigning a Call to a Name (line 891):
            
            # Call to Configuration(...): (line 891)
            # Processing the call arguments (line 891)
            # Getting the type of 'subpackage_name' (line 891)
            subpackage_name_40844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 39), 'subpackage_name', False)
            # Getting the type of 'parent_name' (line 891)
            parent_name_40845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 56), 'parent_name', False)
            # Getting the type of 'self' (line 892)
            self_40846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 39), 'self', False)
            # Obtaining the member 'top_path' of a type (line 892)
            top_path_40847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 39), self_40846, 'top_path')
            # Getting the type of 'subpackage_path' (line 892)
            subpackage_path_40848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 54), 'subpackage_path', False)
            # Processing the call keyword arguments (line 891)
            # Getting the type of 'caller_level' (line 893)
            caller_level_40849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 54), 'caller_level', False)
            int_40850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, 69), 'int')
            # Applying the binary operator '+' (line 893)
            result_add_40851 = python_operator(stypy.reporting.localization.Localization(__file__, 893, 54), '+', caller_level_40849, int_40850)
            
            keyword_40852 = result_add_40851
            kwargs_40853 = {'caller_level': keyword_40852}
            # Getting the type of 'Configuration' (line 891)
            Configuration_40843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 25), 'Configuration', False)
            # Calling Configuration(args, kwargs) (line 891)
            Configuration_call_result_40854 = invoke(stypy.reporting.localization.Localization(__file__, 891, 25), Configuration_40843, *[subpackage_name_40844, parent_name_40845, top_path_40847, subpackage_path_40848], **kwargs_40853)
            
            # Assigning a type to the variable 'config' (line 891)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 16), 'config', Configuration_call_result_40854)

            if more_types_in_union_40828:
                # Runtime conditional SSA for else branch (line 886)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_40827) or more_types_in_union_40828):
            # Assigning a type to the variable 'setup_module' (line 886)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 12), 'setup_module', remove_not_member_provider_from_union(setup_module_40826, 'configuration'))
            
            # Assigning a Call to a Name (line 895):
            
            # Assigning a Call to a Name (line 895):
            
            # Call to dot_join(...): (line 895)
            
            # Obtaining an instance of the builtin type 'list' (line 895)
            list_40856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 32), 'list')
            # Adding type elements to the builtin type 'list' instance (line 895)
            # Adding element type (line 895)
            # Getting the type of 'parent_name' (line 895)
            parent_name_40857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 33), 'parent_name', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 895, 32), list_40856, parent_name_40857)
            
            
            # Obtaining the type of the subscript
            int_40858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 76), 'int')
            slice_40859 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 895, 48), None, int_40858, None)
            
            # Call to split(...): (line 895)
            # Processing the call arguments (line 895)
            str_40862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 70), 'str', '.')
            # Processing the call keyword arguments (line 895)
            kwargs_40863 = {}
            # Getting the type of 'subpackage_name' (line 895)
            subpackage_name_40860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 48), 'subpackage_name', False)
            # Obtaining the member 'split' of a type (line 895)
            split_40861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 48), subpackage_name_40860, 'split')
            # Calling split(args, kwargs) (line 895)
            split_call_result_40864 = invoke(stypy.reporting.localization.Localization(__file__, 895, 48), split_40861, *[str_40862], **kwargs_40863)
            
            # Obtaining the member '__getitem__' of a type (line 895)
            getitem___40865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 48), split_call_result_40864, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 895)
            subscript_call_result_40866 = invoke(stypy.reporting.localization.Localization(__file__, 895, 48), getitem___40865, slice_40859)
            
            # Applying the binary operator '+' (line 895)
            result_add_40867 = python_operator(stypy.reporting.localization.Localization(__file__, 895, 32), '+', list_40856, subscript_call_result_40866)
            
            # Processing the call keyword arguments (line 895)
            kwargs_40868 = {}
            # Getting the type of 'dot_join' (line 895)
            dot_join_40855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 21), 'dot_join', False)
            # Calling dot_join(args, kwargs) (line 895)
            dot_join_call_result_40869 = invoke(stypy.reporting.localization.Localization(__file__, 895, 21), dot_join_40855, *[result_add_40867], **kwargs_40868)
            
            # Assigning a type to the variable 'pn' (line 895)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 16), 'pn', dot_join_call_result_40869)
            
            # Assigning a Tuple to a Name (line 896):
            
            # Assigning a Tuple to a Name (line 896):
            
            # Obtaining an instance of the builtin type 'tuple' (line 896)
            tuple_40870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 24), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 896)
            # Adding element type (line 896)
            # Getting the type of 'pn' (line 896)
            pn_40871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 24), 'pn')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 24), tuple_40870, pn_40871)
            
            # Assigning a type to the variable 'args' (line 896)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 16), 'args', tuple_40870)

            @norecursion
            def fix_args_py2(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'fix_args_py2'
                module_type_store = module_type_store.open_function_context('fix_args_py2', 897, 16, False)
                
                # Passed parameters checking function
                fix_args_py2.stypy_localization = localization
                fix_args_py2.stypy_type_of_self = None
                fix_args_py2.stypy_type_store = module_type_store
                fix_args_py2.stypy_function_name = 'fix_args_py2'
                fix_args_py2.stypy_param_names_list = ['args']
                fix_args_py2.stypy_varargs_param_name = None
                fix_args_py2.stypy_kwargs_param_name = None
                fix_args_py2.stypy_call_defaults = defaults
                fix_args_py2.stypy_call_varargs = varargs
                fix_args_py2.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, 'fix_args_py2', ['args'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'fix_args_py2', localization, ['args'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'fix_args_py2(...)' code ##################

                
                
                # Getting the type of 'setup_module' (line 898)
                setup_module_40872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 23), 'setup_module')
                # Obtaining the member 'configuration' of a type (line 898)
                configuration_40873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 23), setup_module_40872, 'configuration')
                # Obtaining the member '__code__' of a type (line 898)
                code___40874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 23), configuration_40873, '__code__')
                # Obtaining the member 'co_argcount' of a type (line 898)
                co_argcount_40875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 23), code___40874, 'co_argcount')
                int_40876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 73), 'int')
                # Applying the binary operator '>' (line 898)
                result_gt_40877 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 23), '>', co_argcount_40875, int_40876)
                
                # Testing the type of an if condition (line 898)
                if_condition_40878 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 898, 20), result_gt_40877)
                # Assigning a type to the variable 'if_condition_40878' (line 898)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 20), 'if_condition_40878', if_condition_40878)
                # SSA begins for if statement (line 898)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a BinOp to a Name (line 899):
                
                # Assigning a BinOp to a Name (line 899):
                # Getting the type of 'args' (line 899)
                args_40879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 31), 'args')
                
                # Obtaining an instance of the builtin type 'tuple' (line 899)
                tuple_40880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 39), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 899)
                # Adding element type (line 899)
                # Getting the type of 'self' (line 899)
                self_40881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 39), 'self')
                # Obtaining the member 'top_path' of a type (line 899)
                top_path_40882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 39), self_40881, 'top_path')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 899, 39), tuple_40880, top_path_40882)
                
                # Applying the binary operator '+' (line 899)
                result_add_40883 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 31), '+', args_40879, tuple_40880)
                
                # Assigning a type to the variable 'args' (line 899)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 24), 'args', result_add_40883)
                # SSA join for if statement (line 898)
                module_type_store = module_type_store.join_ssa_context()
                
                # Getting the type of 'args' (line 900)
                args_40884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 27), 'args')
                # Assigning a type to the variable 'stypy_return_type' (line 900)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 20), 'stypy_return_type', args_40884)
                
                # ################# End of 'fix_args_py2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'fix_args_py2' in the type store
                # Getting the type of 'stypy_return_type' (line 897)
                stypy_return_type_40885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 16), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_40885)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'fix_args_py2'
                return stypy_return_type_40885

            # Assigning a type to the variable 'fix_args_py2' (line 897)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 16), 'fix_args_py2', fix_args_py2)

            @norecursion
            def fix_args_py3(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'fix_args_py3'
                module_type_store = module_type_store.open_function_context('fix_args_py3', 901, 16, False)
                
                # Passed parameters checking function
                fix_args_py3.stypy_localization = localization
                fix_args_py3.stypy_type_of_self = None
                fix_args_py3.stypy_type_store = module_type_store
                fix_args_py3.stypy_function_name = 'fix_args_py3'
                fix_args_py3.stypy_param_names_list = ['args']
                fix_args_py3.stypy_varargs_param_name = None
                fix_args_py3.stypy_kwargs_param_name = None
                fix_args_py3.stypy_call_defaults = defaults
                fix_args_py3.stypy_call_varargs = varargs
                fix_args_py3.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, 'fix_args_py3', ['args'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'fix_args_py3', localization, ['args'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'fix_args_py3(...)' code ##################

                
                
                # Getting the type of 'setup_module' (line 902)
                setup_module_40886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 23), 'setup_module')
                # Obtaining the member 'configuration' of a type (line 902)
                configuration_40887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 23), setup_module_40886, 'configuration')
                # Obtaining the member '__code__' of a type (line 902)
                code___40888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 23), configuration_40887, '__code__')
                # Obtaining the member 'co_argcount' of a type (line 902)
                co_argcount_40889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 23), code___40888, 'co_argcount')
                int_40890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 902, 73), 'int')
                # Applying the binary operator '>' (line 902)
                result_gt_40891 = python_operator(stypy.reporting.localization.Localization(__file__, 902, 23), '>', co_argcount_40889, int_40890)
                
                # Testing the type of an if condition (line 902)
                if_condition_40892 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 902, 20), result_gt_40891)
                # Assigning a type to the variable 'if_condition_40892' (line 902)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 20), 'if_condition_40892', if_condition_40892)
                # SSA begins for if statement (line 902)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a BinOp to a Name (line 903):
                
                # Assigning a BinOp to a Name (line 903):
                # Getting the type of 'args' (line 903)
                args_40893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 31), 'args')
                
                # Obtaining an instance of the builtin type 'tuple' (line 903)
                tuple_40894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 39), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 903)
                # Adding element type (line 903)
                # Getting the type of 'self' (line 903)
                self_40895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 39), 'self')
                # Obtaining the member 'top_path' of a type (line 903)
                top_path_40896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 39), self_40895, 'top_path')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 903, 39), tuple_40894, top_path_40896)
                
                # Applying the binary operator '+' (line 903)
                result_add_40897 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 31), '+', args_40893, tuple_40894)
                
                # Assigning a type to the variable 'args' (line 903)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 24), 'args', result_add_40897)
                # SSA join for if statement (line 902)
                module_type_store = module_type_store.join_ssa_context()
                
                # Getting the type of 'args' (line 904)
                args_40898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 27), 'args')
                # Assigning a type to the variable 'stypy_return_type' (line 904)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 20), 'stypy_return_type', args_40898)
                
                # ################# End of 'fix_args_py3(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'fix_args_py3' in the type store
                # Getting the type of 'stypy_return_type' (line 901)
                stypy_return_type_40899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 16), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_40899)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'fix_args_py3'
                return stypy_return_type_40899

            # Assigning a type to the variable 'fix_args_py3' (line 901)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 16), 'fix_args_py3', fix_args_py3)
            
            
            
            # Obtaining the type of the subscript
            int_40900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 36), 'int')
            # Getting the type of 'sys' (line 905)
            sys_40901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 19), 'sys')
            # Obtaining the member 'version_info' of a type (line 905)
            version_info_40902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 19), sys_40901, 'version_info')
            # Obtaining the member '__getitem__' of a type (line 905)
            getitem___40903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 19), version_info_40902, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 905)
            subscript_call_result_40904 = invoke(stypy.reporting.localization.Localization(__file__, 905, 19), getitem___40903, int_40900)
            
            int_40905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 41), 'int')
            # Applying the binary operator '<' (line 905)
            result_lt_40906 = python_operator(stypy.reporting.localization.Localization(__file__, 905, 19), '<', subscript_call_result_40904, int_40905)
            
            # Testing the type of an if condition (line 905)
            if_condition_40907 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 905, 16), result_lt_40906)
            # Assigning a type to the variable 'if_condition_40907' (line 905)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 16), 'if_condition_40907', if_condition_40907)
            # SSA begins for if statement (line 905)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 906):
            
            # Assigning a Call to a Name (line 906):
            
            # Call to fix_args_py2(...): (line 906)
            # Processing the call arguments (line 906)
            # Getting the type of 'args' (line 906)
            args_40909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 40), 'args', False)
            # Processing the call keyword arguments (line 906)
            kwargs_40910 = {}
            # Getting the type of 'fix_args_py2' (line 906)
            fix_args_py2_40908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 27), 'fix_args_py2', False)
            # Calling fix_args_py2(args, kwargs) (line 906)
            fix_args_py2_call_result_40911 = invoke(stypy.reporting.localization.Localization(__file__, 906, 27), fix_args_py2_40908, *[args_40909], **kwargs_40910)
            
            # Assigning a type to the variable 'args' (line 906)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 20), 'args', fix_args_py2_call_result_40911)
            # SSA branch for the else part of an if statement (line 905)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 908):
            
            # Assigning a Call to a Name (line 908):
            
            # Call to fix_args_py3(...): (line 908)
            # Processing the call arguments (line 908)
            # Getting the type of 'args' (line 908)
            args_40913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 40), 'args', False)
            # Processing the call keyword arguments (line 908)
            kwargs_40914 = {}
            # Getting the type of 'fix_args_py3' (line 908)
            fix_args_py3_40912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 27), 'fix_args_py3', False)
            # Calling fix_args_py3(args, kwargs) (line 908)
            fix_args_py3_call_result_40915 = invoke(stypy.reporting.localization.Localization(__file__, 908, 27), fix_args_py3_40912, *[args_40913], **kwargs_40914)
            
            # Assigning a type to the variable 'args' (line 908)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 20), 'args', fix_args_py3_call_result_40915)
            # SSA join for if statement (line 905)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 909):
            
            # Assigning a Call to a Name (line 909):
            
            # Call to configuration(...): (line 909)
            # Getting the type of 'args' (line 909)
            args_40918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 53), 'args', False)
            # Processing the call keyword arguments (line 909)
            kwargs_40919 = {}
            # Getting the type of 'setup_module' (line 909)
            setup_module_40916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 25), 'setup_module', False)
            # Obtaining the member 'configuration' of a type (line 909)
            configuration_40917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 25), setup_module_40916, 'configuration')
            # Calling configuration(args, kwargs) (line 909)
            configuration_call_result_40920 = invoke(stypy.reporting.localization.Localization(__file__, 909, 25), configuration_40917, *[args_40918], **kwargs_40919)
            
            # Assigning a type to the variable 'config' (line 909)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 16), 'config', configuration_call_result_40920)

            if (may_be_40827 and more_types_in_union_40828):
                # SSA join for if statement (line 886)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'config' (line 910)
        config_40921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 15), 'config')
        # Obtaining the member 'name' of a type (line 910)
        name_40922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 15), config_40921, 'name')
        
        # Call to dot_join(...): (line 910)
        # Processing the call arguments (line 910)
        # Getting the type of 'parent_name' (line 910)
        parent_name_40924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 37), 'parent_name', False)
        # Getting the type of 'subpackage_name' (line 910)
        subpackage_name_40925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 50), 'subpackage_name', False)
        # Processing the call keyword arguments (line 910)
        kwargs_40926 = {}
        # Getting the type of 'dot_join' (line 910)
        dot_join_40923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 28), 'dot_join', False)
        # Calling dot_join(args, kwargs) (line 910)
        dot_join_call_result_40927 = invoke(stypy.reporting.localization.Localization(__file__, 910, 28), dot_join_40923, *[parent_name_40924, subpackage_name_40925], **kwargs_40926)
        
        # Applying the binary operator '!=' (line 910)
        result_ne_40928 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 15), '!=', name_40922, dot_join_call_result_40927)
        
        # Testing the type of an if condition (line 910)
        if_condition_40929 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 910, 12), result_ne_40928)
        # Assigning a type to the variable 'if_condition_40929' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 12), 'if_condition_40929', if_condition_40929)
        # SSA begins for if statement (line 910)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 911)
        # Processing the call arguments (line 911)
        str_40932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 26), 'str', 'Subpackage %r configuration returned as %r')
        
        # Obtaining an instance of the builtin type 'tuple' (line 912)
        tuple_40933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 912)
        # Adding element type (line 912)
        
        # Call to dot_join(...): (line 912)
        # Processing the call arguments (line 912)
        # Getting the type of 'parent_name' (line 912)
        parent_name_40935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 36), 'parent_name', False)
        # Getting the type of 'subpackage_name' (line 912)
        subpackage_name_40936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 49), 'subpackage_name', False)
        # Processing the call keyword arguments (line 912)
        kwargs_40937 = {}
        # Getting the type of 'dot_join' (line 912)
        dot_join_40934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 27), 'dot_join', False)
        # Calling dot_join(args, kwargs) (line 912)
        dot_join_call_result_40938 = invoke(stypy.reporting.localization.Localization(__file__, 912, 27), dot_join_40934, *[parent_name_40935, subpackage_name_40936], **kwargs_40937)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 27), tuple_40933, dot_join_call_result_40938)
        # Adding element type (line 912)
        # Getting the type of 'config' (line 912)
        config_40939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 67), 'config', False)
        # Obtaining the member 'name' of a type (line 912)
        name_40940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 67), config_40939, 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 27), tuple_40933, name_40940)
        
        # Applying the binary operator '%' (line 911)
        result_mod_40941 = python_operator(stypy.reporting.localization.Localization(__file__, 911, 26), '%', str_40932, tuple_40933)
        
        # Processing the call keyword arguments (line 911)
        kwargs_40942 = {}
        # Getting the type of 'self' (line 911)
        self_40930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 16), 'self', False)
        # Obtaining the member 'warn' of a type (line 911)
        warn_40931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 16), self_40930, 'warn')
        # Calling warn(args, kwargs) (line 911)
        warn_call_result_40943 = invoke(stypy.reporting.localization.Localization(__file__, 911, 16), warn_40931, *[result_mod_40941], **kwargs_40942)
        
        # SSA join for if statement (line 910)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # finally branch of the try-finally block (line 877)
        # Deleting a member
        # Getting the type of 'sys' (line 914)
        sys_40944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 16), 'sys')
        # Obtaining the member 'path' of a type (line 914)
        path_40945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 16), sys_40944, 'path')
        
        # Obtaining the type of the subscript
        int_40946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 25), 'int')
        # Getting the type of 'sys' (line 914)
        sys_40947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 16), 'sys')
        # Obtaining the member 'path' of a type (line 914)
        path_40948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 16), sys_40947, 'path')
        # Obtaining the member '__getitem__' of a type (line 914)
        getitem___40949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 16), path_40948, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 914)
        subscript_call_result_40950 = invoke(stypy.reporting.localization.Localization(__file__, 914, 16), getitem___40949, int_40946)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 914, 12), path_40945, subscript_call_result_40950)
        
        # Getting the type of 'config' (line 915)
        config_40951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 15), 'config')
        # Assigning a type to the variable 'stypy_return_type' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 8), 'stypy_return_type', config_40951)
        
        # ################# End of '_get_configuration_from_setup_py(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_configuration_from_setup_py' in the type store
        # Getting the type of 'stypy_return_type' (line 870)
        stypy_return_type_40952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40952)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_configuration_from_setup_py'
        return stypy_return_type_40952


    @norecursion
    def get_subpackage(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 918)
        None_40953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 39), 'None')
        # Getting the type of 'None' (line 919)
        None_40954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 35), 'None')
        int_40955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 38), 'int')
        defaults = [None_40953, None_40954, int_40955]
        # Create a new context for function 'get_subpackage'
        module_type_store = module_type_store.open_function_context('get_subpackage', 917, 4, False)
        # Assigning a type to the variable 'self' (line 918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.get_subpackage.__dict__.__setitem__('stypy_localization', localization)
        Configuration.get_subpackage.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.get_subpackage.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.get_subpackage.__dict__.__setitem__('stypy_function_name', 'Configuration.get_subpackage')
        Configuration.get_subpackage.__dict__.__setitem__('stypy_param_names_list', ['subpackage_name', 'subpackage_path', 'parent_name', 'caller_level'])
        Configuration.get_subpackage.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.get_subpackage.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.get_subpackage.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.get_subpackage.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.get_subpackage.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.get_subpackage.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.get_subpackage', ['subpackage_name', 'subpackage_path', 'parent_name', 'caller_level'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_subpackage', localization, ['subpackage_name', 'subpackage_path', 'parent_name', 'caller_level'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_subpackage(...)' code ##################

        str_40956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, (-1)), 'str', "Return list of subpackage configurations.\n\n        Parameters\n        ----------\n        subpackage_name : str or None\n            Name of the subpackage to get the configuration. '*' in\n            subpackage_name is handled as a wildcard.\n        subpackage_path : str\n            If None, then the path is assumed to be the local path plus the\n            subpackage_name. If a setup.py file is not found in the\n            subpackage_path, then a default configuration is used.\n        parent_name : str\n            Parent name.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 935)
        # Getting the type of 'subpackage_name' (line 935)
        subpackage_name_40957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 11), 'subpackage_name')
        # Getting the type of 'None' (line 935)
        None_40958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 30), 'None')
        
        (may_be_40959, more_types_in_union_40960) = may_be_none(subpackage_name_40957, None_40958)

        if may_be_40959:

            if more_types_in_union_40960:
                # Runtime conditional SSA (line 935)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 936)
            # Getting the type of 'subpackage_path' (line 936)
            subpackage_path_40961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 15), 'subpackage_path')
            # Getting the type of 'None' (line 936)
            None_40962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 34), 'None')
            
            (may_be_40963, more_types_in_union_40964) = may_be_none(subpackage_path_40961, None_40962)

            if may_be_40963:

                if more_types_in_union_40964:
                    # Runtime conditional SSA (line 936)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to ValueError(...): (line 937)
                # Processing the call arguments (line 937)
                str_40966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 20), 'str', 'either subpackage_name or subpackage_path must be specified')
                # Processing the call keyword arguments (line 937)
                kwargs_40967 = {}
                # Getting the type of 'ValueError' (line 937)
                ValueError_40965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 22), 'ValueError', False)
                # Calling ValueError(args, kwargs) (line 937)
                ValueError_call_result_40968 = invoke(stypy.reporting.localization.Localization(__file__, 937, 22), ValueError_40965, *[str_40966], **kwargs_40967)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 937, 16), ValueError_call_result_40968, 'raise parameter', BaseException)

                if more_types_in_union_40964:
                    # SSA join for if statement (line 936)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Assigning a Call to a Name (line 939):
            
            # Assigning a Call to a Name (line 939):
            
            # Call to basename(...): (line 939)
            # Processing the call arguments (line 939)
            # Getting the type of 'subpackage_path' (line 939)
            subpackage_path_40972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 47), 'subpackage_path', False)
            # Processing the call keyword arguments (line 939)
            kwargs_40973 = {}
            # Getting the type of 'os' (line 939)
            os_40969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 30), 'os', False)
            # Obtaining the member 'path' of a type (line 939)
            path_40970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 30), os_40969, 'path')
            # Obtaining the member 'basename' of a type (line 939)
            basename_40971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 30), path_40970, 'basename')
            # Calling basename(args, kwargs) (line 939)
            basename_call_result_40974 = invoke(stypy.reporting.localization.Localization(__file__, 939, 30), basename_40971, *[subpackage_path_40972], **kwargs_40973)
            
            # Assigning a type to the variable 'subpackage_name' (line 939)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 12), 'subpackage_name', basename_call_result_40974)

            if more_types_in_union_40960:
                # SSA join for if statement (line 935)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 942):
        
        # Assigning a Call to a Name (line 942):
        
        # Call to split(...): (line 942)
        # Processing the call arguments (line 942)
        str_40977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 34), 'str', '.')
        # Processing the call keyword arguments (line 942)
        kwargs_40978 = {}
        # Getting the type of 'subpackage_name' (line 942)
        subpackage_name_40975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 12), 'subpackage_name', False)
        # Obtaining the member 'split' of a type (line 942)
        split_40976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 12), subpackage_name_40975, 'split')
        # Calling split(args, kwargs) (line 942)
        split_call_result_40979 = invoke(stypy.reporting.localization.Localization(__file__, 942, 12), split_40976, *[str_40977], **kwargs_40978)
        
        # Assigning a type to the variable 'l' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'l', split_call_result_40979)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'subpackage_path' (line 943)
        subpackage_path_40980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 11), 'subpackage_path')
        # Getting the type of 'None' (line 943)
        None_40981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 30), 'None')
        # Applying the binary operator 'is' (line 943)
        result_is__40982 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 11), 'is', subpackage_path_40980, None_40981)
        
        
        str_40983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 39), 'str', '*')
        # Getting the type of 'subpackage_name' (line 943)
        subpackage_name_40984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 46), 'subpackage_name')
        # Applying the binary operator 'in' (line 943)
        result_contains_40985 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 39), 'in', str_40983, subpackage_name_40984)
        
        # Applying the binary operator 'and' (line 943)
        result_and_keyword_40986 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 11), 'and', result_is__40982, result_contains_40985)
        
        # Testing the type of an if condition (line 943)
        if_condition_40987 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 943, 8), result_and_keyword_40986)
        # Assigning a type to the variable 'if_condition_40987' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'if_condition_40987', if_condition_40987)
        # SSA begins for if statement (line 943)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _wildcard_get_subpackage(...): (line 944)
        # Processing the call arguments (line 944)
        # Getting the type of 'subpackage_name' (line 944)
        subpackage_name_40990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 49), 'subpackage_name', False)
        # Getting the type of 'parent_name' (line 945)
        parent_name_40991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 49), 'parent_name', False)
        # Processing the call keyword arguments (line 944)
        # Getting the type of 'caller_level' (line 946)
        caller_level_40992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 64), 'caller_level', False)
        int_40993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 77), 'int')
        # Applying the binary operator '+' (line 946)
        result_add_40994 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 64), '+', caller_level_40992, int_40993)
        
        keyword_40995 = result_add_40994
        kwargs_40996 = {'caller_level': keyword_40995}
        # Getting the type of 'self' (line 944)
        self_40988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 19), 'self', False)
        # Obtaining the member '_wildcard_get_subpackage' of a type (line 944)
        _wildcard_get_subpackage_40989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 19), self_40988, '_wildcard_get_subpackage')
        # Calling _wildcard_get_subpackage(args, kwargs) (line 944)
        _wildcard_get_subpackage_call_result_40997 = invoke(stypy.reporting.localization.Localization(__file__, 944, 19), _wildcard_get_subpackage_40989, *[subpackage_name_40990, parent_name_40991], **kwargs_40996)
        
        # Assigning a type to the variable 'stypy_return_type' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 12), 'stypy_return_type', _wildcard_get_subpackage_call_result_40997)
        # SSA join for if statement (line 943)
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        str_40998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 15), 'str', '*')
        # Getting the type of 'subpackage_name' (line 947)
        subpackage_name_40999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 26), 'subpackage_name')
        # Applying the binary operator 'notin' (line 947)
        result_contains_41000 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 15), 'notin', str_40998, subpackage_name_40999)
        
        
        # Type idiom detected: calculating its left and rigth part (line 948)
        # Getting the type of 'subpackage_path' (line 948)
        subpackage_path_41001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 11), 'subpackage_path')
        # Getting the type of 'None' (line 948)
        None_41002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 30), 'None')
        
        (may_be_41003, more_types_in_union_41004) = may_be_none(subpackage_path_41001, None_41002)

        if may_be_41003:

            if more_types_in_union_41004:
                # Runtime conditional SSA (line 948)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 949):
            
            # Assigning a Call to a Name (line 949):
            
            # Call to njoin(...): (line 949)
            # Processing the call arguments (line 949)
            
            # Obtaining an instance of the builtin type 'list' (line 949)
            list_41006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 36), 'list')
            # Adding type elements to the builtin type 'list' instance (line 949)
            # Adding element type (line 949)
            # Getting the type of 'self' (line 949)
            self_41007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 37), 'self', False)
            # Obtaining the member 'local_path' of a type (line 949)
            local_path_41008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 37), self_41007, 'local_path')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 949, 36), list_41006, local_path_41008)
            
            # Getting the type of 'l' (line 949)
            l_41009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 56), 'l', False)
            # Applying the binary operator '+' (line 949)
            result_add_41010 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 36), '+', list_41006, l_41009)
            
            # Processing the call keyword arguments (line 949)
            kwargs_41011 = {}
            # Getting the type of 'njoin' (line 949)
            njoin_41005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 30), 'njoin', False)
            # Calling njoin(args, kwargs) (line 949)
            njoin_call_result_41012 = invoke(stypy.reporting.localization.Localization(__file__, 949, 30), njoin_41005, *[result_add_41010], **kwargs_41011)
            
            # Assigning a type to the variable 'subpackage_path' (line 949)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 12), 'subpackage_path', njoin_call_result_41012)

            if more_types_in_union_41004:
                # Runtime conditional SSA for else branch (line 948)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_41003) or more_types_in_union_41004):
            
            # Assigning a Call to a Name (line 951):
            
            # Assigning a Call to a Name (line 951):
            
            # Call to njoin(...): (line 951)
            # Processing the call arguments (line 951)
            
            # Obtaining an instance of the builtin type 'list' (line 951)
            list_41014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 36), 'list')
            # Adding type elements to the builtin type 'list' instance (line 951)
            # Adding element type (line 951)
            # Getting the type of 'subpackage_path' (line 951)
            subpackage_path_41015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 37), 'subpackage_path', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 951, 36), list_41014, subpackage_path_41015)
            
            
            # Obtaining the type of the subscript
            int_41016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 59), 'int')
            slice_41017 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 951, 56), None, int_41016, None)
            # Getting the type of 'l' (line 951)
            l_41018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 56), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 951)
            getitem___41019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 56), l_41018, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 951)
            subscript_call_result_41020 = invoke(stypy.reporting.localization.Localization(__file__, 951, 56), getitem___41019, slice_41017)
            
            # Applying the binary operator '+' (line 951)
            result_add_41021 = python_operator(stypy.reporting.localization.Localization(__file__, 951, 36), '+', list_41014, subscript_call_result_41020)
            
            # Processing the call keyword arguments (line 951)
            kwargs_41022 = {}
            # Getting the type of 'njoin' (line 951)
            njoin_41013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 30), 'njoin', False)
            # Calling njoin(args, kwargs) (line 951)
            njoin_call_result_41023 = invoke(stypy.reporting.localization.Localization(__file__, 951, 30), njoin_41013, *[result_add_41021], **kwargs_41022)
            
            # Assigning a type to the variable 'subpackage_path' (line 951)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 12), 'subpackage_path', njoin_call_result_41023)
            
            # Assigning a Subscript to a Name (line 952):
            
            # Assigning a Subscript to a Name (line 952):
            
            # Obtaining the type of the subscript
            int_41024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 60), 'int')
            
            # Call to paths(...): (line 952)
            # Processing the call arguments (line 952)
            
            # Obtaining an instance of the builtin type 'list' (line 952)
            list_41027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 41), 'list')
            # Adding type elements to the builtin type 'list' instance (line 952)
            # Adding element type (line 952)
            # Getting the type of 'subpackage_path' (line 952)
            subpackage_path_41028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 42), 'subpackage_path', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 952, 41), list_41027, subpackage_path_41028)
            
            # Processing the call keyword arguments (line 952)
            kwargs_41029 = {}
            # Getting the type of 'self' (line 952)
            self_41025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 30), 'self', False)
            # Obtaining the member 'paths' of a type (line 952)
            paths_41026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 30), self_41025, 'paths')
            # Calling paths(args, kwargs) (line 952)
            paths_call_result_41030 = invoke(stypy.reporting.localization.Localization(__file__, 952, 30), paths_41026, *[list_41027], **kwargs_41029)
            
            # Obtaining the member '__getitem__' of a type (line 952)
            getitem___41031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 30), paths_call_result_41030, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 952)
            subscript_call_result_41032 = invoke(stypy.reporting.localization.Localization(__file__, 952, 30), getitem___41031, int_41024)
            
            # Assigning a type to the variable 'subpackage_path' (line 952)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 12), 'subpackage_path', subscript_call_result_41032)

            if (may_be_41003 and more_types_in_union_41004):
                # SSA join for if statement (line 948)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 953):
        
        # Assigning a Call to a Name (line 953):
        
        # Call to njoin(...): (line 953)
        # Processing the call arguments (line 953)
        # Getting the type of 'subpackage_path' (line 953)
        subpackage_path_41034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 25), 'subpackage_path', False)
        # Getting the type of 'self' (line 953)
        self_41035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 42), 'self', False)
        # Obtaining the member 'setup_name' of a type (line 953)
        setup_name_41036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 42), self_41035, 'setup_name')
        # Processing the call keyword arguments (line 953)
        kwargs_41037 = {}
        # Getting the type of 'njoin' (line 953)
        njoin_41033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 19), 'njoin', False)
        # Calling njoin(args, kwargs) (line 953)
        njoin_call_result_41038 = invoke(stypy.reporting.localization.Localization(__file__, 953, 19), njoin_41033, *[subpackage_path_41034, setup_name_41036], **kwargs_41037)
        
        # Assigning a type to the variable 'setup_py' (line 953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'setup_py', njoin_call_result_41038)
        
        
        
        # Obtaining the type of the subscript
        str_41039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 28), 'str', 'ignore_setup_xxx_py')
        # Getting the type of 'self' (line 954)
        self_41040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 15), 'self')
        # Obtaining the member 'options' of a type (line 954)
        options_41041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 15), self_41040, 'options')
        # Obtaining the member '__getitem__' of a type (line 954)
        getitem___41042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 15), options_41041, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 954)
        subscript_call_result_41043 = invoke(stypy.reporting.localization.Localization(__file__, 954, 15), getitem___41042, str_41039)
        
        # Applying the 'not' unary operator (line 954)
        result_not__41044 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 11), 'not', subscript_call_result_41043)
        
        # Testing the type of an if condition (line 954)
        if_condition_41045 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 954, 8), result_not__41044)
        # Assigning a type to the variable 'if_condition_41045' (line 954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'if_condition_41045', if_condition_41045)
        # SSA begins for if statement (line 954)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to isfile(...): (line 955)
        # Processing the call arguments (line 955)
        # Getting the type of 'setup_py' (line 955)
        setup_py_41049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 34), 'setup_py', False)
        # Processing the call keyword arguments (line 955)
        kwargs_41050 = {}
        # Getting the type of 'os' (line 955)
        os_41046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 955)
        path_41047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 19), os_41046, 'path')
        # Obtaining the member 'isfile' of a type (line 955)
        isfile_41048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 19), path_41047, 'isfile')
        # Calling isfile(args, kwargs) (line 955)
        isfile_call_result_41051 = invoke(stypy.reporting.localization.Localization(__file__, 955, 19), isfile_41048, *[setup_py_41049], **kwargs_41050)
        
        # Applying the 'not' unary operator (line 955)
        result_not__41052 = python_operator(stypy.reporting.localization.Localization(__file__, 955, 15), 'not', isfile_call_result_41051)
        
        # Testing the type of an if condition (line 955)
        if_condition_41053 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 955, 12), result_not__41052)
        # Assigning a type to the variable 'if_condition_41053' (line 955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 12), 'if_condition_41053', if_condition_41053)
        # SSA begins for if statement (line 955)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 956):
        
        # Assigning a Call to a Name (line 956):
        
        # Call to njoin(...): (line 956)
        # Processing the call arguments (line 956)
        # Getting the type of 'subpackage_path' (line 956)
        subpackage_path_41055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 33), 'subpackage_path', False)
        str_41056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 33), 'str', 'setup_%s.py')
        # Getting the type of 'subpackage_name' (line 957)
        subpackage_name_41057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 50), 'subpackage_name', False)
        # Applying the binary operator '%' (line 957)
        result_mod_41058 = python_operator(stypy.reporting.localization.Localization(__file__, 957, 33), '%', str_41056, subpackage_name_41057)
        
        # Processing the call keyword arguments (line 956)
        kwargs_41059 = {}
        # Getting the type of 'njoin' (line 956)
        njoin_41054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 27), 'njoin', False)
        # Calling njoin(args, kwargs) (line 956)
        njoin_call_result_41060 = invoke(stypy.reporting.localization.Localization(__file__, 956, 27), njoin_41054, *[subpackage_path_41055, result_mod_41058], **kwargs_41059)
        
        # Assigning a type to the variable 'setup_py' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 16), 'setup_py', njoin_call_result_41060)
        # SSA join for if statement (line 955)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 954)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to isfile(...): (line 958)
        # Processing the call arguments (line 958)
        # Getting the type of 'setup_py' (line 958)
        setup_py_41064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 30), 'setup_py', False)
        # Processing the call keyword arguments (line 958)
        kwargs_41065 = {}
        # Getting the type of 'os' (line 958)
        os_41061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 958)
        path_41062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 15), os_41061, 'path')
        # Obtaining the member 'isfile' of a type (line 958)
        isfile_41063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 15), path_41062, 'isfile')
        # Calling isfile(args, kwargs) (line 958)
        isfile_call_result_41066 = invoke(stypy.reporting.localization.Localization(__file__, 958, 15), isfile_41063, *[setup_py_41064], **kwargs_41065)
        
        # Applying the 'not' unary operator (line 958)
        result_not__41067 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 11), 'not', isfile_call_result_41066)
        
        # Testing the type of an if condition (line 958)
        if_condition_41068 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 958, 8), result_not__41067)
        # Assigning a type to the variable 'if_condition_41068' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 8), 'if_condition_41068', if_condition_41068)
        # SSA begins for if statement (line 958)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Obtaining the type of the subscript
        str_41069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 32), 'str', 'assume_default_configuration')
        # Getting the type of 'self' (line 959)
        self_41070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 19), 'self')
        # Obtaining the member 'options' of a type (line 959)
        options_41071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 19), self_41070, 'options')
        # Obtaining the member '__getitem__' of a type (line 959)
        getitem___41072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 19), options_41071, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 959)
        subscript_call_result_41073 = invoke(stypy.reporting.localization.Localization(__file__, 959, 19), getitem___41072, str_41069)
        
        # Applying the 'not' unary operator (line 959)
        result_not__41074 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 15), 'not', subscript_call_result_41073)
        
        # Testing the type of an if condition (line 959)
        if_condition_41075 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 959, 12), result_not__41074)
        # Assigning a type to the variable 'if_condition_41075' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 12), 'if_condition_41075', if_condition_41075)
        # SSA begins for if statement (line 959)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 960)
        # Processing the call arguments (line 960)
        str_41078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 26), 'str', 'Assuming default configuration (%s/{setup_%s,setup}.py was not found)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 962)
        tuple_41079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 962)
        # Adding element type (line 962)
        
        # Call to dirname(...): (line 962)
        # Processing the call arguments (line 962)
        # Getting the type of 'setup_py' (line 962)
        setup_py_41083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 45), 'setup_py', False)
        # Processing the call keyword arguments (line 962)
        kwargs_41084 = {}
        # Getting the type of 'os' (line 962)
        os_41080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 29), 'os', False)
        # Obtaining the member 'path' of a type (line 962)
        path_41081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 29), os_41080, 'path')
        # Obtaining the member 'dirname' of a type (line 962)
        dirname_41082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 29), path_41081, 'dirname')
        # Calling dirname(args, kwargs) (line 962)
        dirname_call_result_41085 = invoke(stypy.reporting.localization.Localization(__file__, 962, 29), dirname_41082, *[setup_py_41083], **kwargs_41084)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 962, 29), tuple_41079, dirname_call_result_41085)
        # Adding element type (line 962)
        # Getting the type of 'subpackage_name' (line 962)
        subpackage_name_41086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 56), 'subpackage_name', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 962, 29), tuple_41079, subpackage_name_41086)
        
        # Applying the binary operator '%' (line 960)
        result_mod_41087 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 26), '%', str_41078, tuple_41079)
        
        # Processing the call keyword arguments (line 960)
        kwargs_41088 = {}
        # Getting the type of 'self' (line 960)
        self_41076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 16), 'self', False)
        # Obtaining the member 'warn' of a type (line 960)
        warn_41077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 16), self_41076, 'warn')
        # Calling warn(args, kwargs) (line 960)
        warn_call_result_41089 = invoke(stypy.reporting.localization.Localization(__file__, 960, 16), warn_41077, *[result_mod_41087], **kwargs_41088)
        
        # SSA join for if statement (line 959)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 963):
        
        # Assigning a Call to a Name (line 963):
        
        # Call to Configuration(...): (line 963)
        # Processing the call arguments (line 963)
        # Getting the type of 'subpackage_name' (line 963)
        subpackage_name_41091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 35), 'subpackage_name', False)
        # Getting the type of 'parent_name' (line 963)
        parent_name_41092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 52), 'parent_name', False)
        # Getting the type of 'self' (line 964)
        self_41093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 35), 'self', False)
        # Obtaining the member 'top_path' of a type (line 964)
        top_path_41094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 35), self_41093, 'top_path')
        # Getting the type of 'subpackage_path' (line 964)
        subpackage_path_41095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 50), 'subpackage_path', False)
        # Processing the call keyword arguments (line 963)
        # Getting the type of 'caller_level' (line 965)
        caller_level_41096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 50), 'caller_level', False)
        int_41097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, 63), 'int')
        # Applying the binary operator '+' (line 965)
        result_add_41098 = python_operator(stypy.reporting.localization.Localization(__file__, 965, 50), '+', caller_level_41096, int_41097)
        
        keyword_41099 = result_add_41098
        kwargs_41100 = {'caller_level': keyword_41099}
        # Getting the type of 'Configuration' (line 963)
        Configuration_41090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 21), 'Configuration', False)
        # Calling Configuration(args, kwargs) (line 963)
        Configuration_call_result_41101 = invoke(stypy.reporting.localization.Localization(__file__, 963, 21), Configuration_41090, *[subpackage_name_41091, parent_name_41092, top_path_41094, subpackage_path_41095], **kwargs_41100)
        
        # Assigning a type to the variable 'config' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 12), 'config', Configuration_call_result_41101)
        # SSA branch for the else part of an if statement (line 958)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 967):
        
        # Assigning a Call to a Name (line 967):
        
        # Call to _get_configuration_from_setup_py(...): (line 967)
        # Processing the call arguments (line 967)
        # Getting the type of 'setup_py' (line 968)
        setup_py_41104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 16), 'setup_py', False)
        # Getting the type of 'subpackage_name' (line 969)
        subpackage_name_41105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 16), 'subpackage_name', False)
        # Getting the type of 'subpackage_path' (line 970)
        subpackage_path_41106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 16), 'subpackage_path', False)
        # Getting the type of 'parent_name' (line 971)
        parent_name_41107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 16), 'parent_name', False)
        # Processing the call keyword arguments (line 967)
        # Getting the type of 'caller_level' (line 972)
        caller_level_41108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 31), 'caller_level', False)
        int_41109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 46), 'int')
        # Applying the binary operator '+' (line 972)
        result_add_41110 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 31), '+', caller_level_41108, int_41109)
        
        keyword_41111 = result_add_41110
        kwargs_41112 = {'caller_level': keyword_41111}
        # Getting the type of 'self' (line 967)
        self_41102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 21), 'self', False)
        # Obtaining the member '_get_configuration_from_setup_py' of a type (line 967)
        _get_configuration_from_setup_py_41103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 21), self_41102, '_get_configuration_from_setup_py')
        # Calling _get_configuration_from_setup_py(args, kwargs) (line 967)
        _get_configuration_from_setup_py_call_result_41113 = invoke(stypy.reporting.localization.Localization(__file__, 967, 21), _get_configuration_from_setup_py_41103, *[setup_py_41104, subpackage_name_41105, subpackage_path_41106, parent_name_41107], **kwargs_41112)
        
        # Assigning a type to the variable 'config' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 12), 'config', _get_configuration_from_setup_py_call_result_41113)
        # SSA join for if statement (line 958)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'config' (line 973)
        config_41114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 11), 'config')
        # Testing the type of an if condition (line 973)
        if_condition_41115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 973, 8), config_41114)
        # Assigning a type to the variable 'if_condition_41115' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 8), 'if_condition_41115', if_condition_41115)
        # SSA begins for if statement (line 973)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'list' (line 974)
        list_41116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 974)
        # Adding element type (line 974)
        # Getting the type of 'config' (line 974)
        config_41117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 20), 'config')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 974, 19), list_41116, config_41117)
        
        # Assigning a type to the variable 'stypy_return_type' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 12), 'stypy_return_type', list_41116)
        # SSA branch for the else part of an if statement (line 973)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'list' (line 976)
        list_41118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 976)
        
        # Assigning a type to the variable 'stypy_return_type' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'stypy_return_type', list_41118)
        # SSA join for if statement (line 973)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_subpackage(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_subpackage' in the type store
        # Getting the type of 'stypy_return_type' (line 917)
        stypy_return_type_41119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41119)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_subpackage'
        return stypy_return_type_41119


    @norecursion
    def add_subpackage(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 979)
        None_41120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 39), 'None')
        # Getting the type of 'False' (line 980)
        False_41121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 36), 'False')
        defaults = [None_41120, False_41121]
        # Create a new context for function 'add_subpackage'
        module_type_store = module_type_store.open_function_context('add_subpackage', 978, 4, False)
        # Assigning a type to the variable 'self' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_subpackage.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_subpackage.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_subpackage.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_subpackage.__dict__.__setitem__('stypy_function_name', 'Configuration.add_subpackage')
        Configuration.add_subpackage.__dict__.__setitem__('stypy_param_names_list', ['subpackage_name', 'subpackage_path', 'standalone'])
        Configuration.add_subpackage.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.add_subpackage.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.add_subpackage.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_subpackage.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_subpackage.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_subpackage.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_subpackage', ['subpackage_name', 'subpackage_path', 'standalone'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_subpackage', localization, ['subpackage_name', 'subpackage_path', 'standalone'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_subpackage(...)' code ##################

        str_41122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, (-1)), 'str', 'Add a sub-package to the current Configuration instance.\n\n        This is useful in a setup.py script for adding sub-packages to a\n        package.\n\n        Parameters\n        ----------\n        subpackage_name : str\n            name of the subpackage\n        subpackage_path : str\n            if given, the subpackage path such as the subpackage is in\n            subpackage_path / subpackage_name. If None,the subpackage is\n            assumed to be located in the local path / subpackage_name.\n        standalone : bool\n        ')
        
        # Getting the type of 'standalone' (line 997)
        standalone_41123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 11), 'standalone')
        # Testing the type of an if condition (line 997)
        if_condition_41124 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 997, 8), standalone_41123)
        # Assigning a type to the variable 'if_condition_41124' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 8), 'if_condition_41124', if_condition_41124)
        # SSA begins for if statement (line 997)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 998):
        
        # Assigning a Name to a Name (line 998):
        # Getting the type of 'None' (line 998)
        None_41125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 26), 'None')
        # Assigning a type to the variable 'parent_name' (line 998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 12), 'parent_name', None_41125)
        # SSA branch for the else part of an if statement (line 997)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1000):
        
        # Assigning a Attribute to a Name (line 1000):
        # Getting the type of 'self' (line 1000)
        self_41126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 26), 'self')
        # Obtaining the member 'name' of a type (line 1000)
        name_41127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 26), self_41126, 'name')
        # Assigning a type to the variable 'parent_name' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 12), 'parent_name', name_41127)
        # SSA join for if statement (line 997)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1001):
        
        # Assigning a Call to a Name (line 1001):
        
        # Call to get_subpackage(...): (line 1001)
        # Processing the call arguments (line 1001)
        # Getting the type of 'subpackage_name' (line 1001)
        subpackage_name_41130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 42), 'subpackage_name', False)
        # Getting the type of 'subpackage_path' (line 1001)
        subpackage_path_41131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 59), 'subpackage_path', False)
        # Processing the call keyword arguments (line 1001)
        # Getting the type of 'parent_name' (line 1002)
        parent_name_41132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 56), 'parent_name', False)
        keyword_41133 = parent_name_41132
        int_41134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 57), 'int')
        keyword_41135 = int_41134
        kwargs_41136 = {'parent_name': keyword_41133, 'caller_level': keyword_41135}
        # Getting the type of 'self' (line 1001)
        self_41128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 22), 'self', False)
        # Obtaining the member 'get_subpackage' of a type (line 1001)
        get_subpackage_41129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 22), self_41128, 'get_subpackage')
        # Calling get_subpackage(args, kwargs) (line 1001)
        get_subpackage_call_result_41137 = invoke(stypy.reporting.localization.Localization(__file__, 1001, 22), get_subpackage_41129, *[subpackage_name_41130, subpackage_path_41131], **kwargs_41136)
        
        # Assigning a type to the variable 'config_list' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'config_list', get_subpackage_call_result_41137)
        
        
        # Getting the type of 'config_list' (line 1004)
        config_list_41138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 15), 'config_list')
        # Applying the 'not' unary operator (line 1004)
        result_not__41139 = python_operator(stypy.reporting.localization.Localization(__file__, 1004, 11), 'not', config_list_41138)
        
        # Testing the type of an if condition (line 1004)
        if_condition_41140 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1004, 8), result_not__41139)
        # Assigning a type to the variable 'if_condition_41140' (line 1004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1004, 8), 'if_condition_41140', if_condition_41140)
        # SSA begins for if statement (line 1004)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1005)
        # Processing the call arguments (line 1005)
        str_41143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 22), 'str', 'No configuration returned, assuming unavailable.')
        # Processing the call keyword arguments (line 1005)
        kwargs_41144 = {}
        # Getting the type of 'self' (line 1005)
        self_41141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'self', False)
        # Obtaining the member 'warn' of a type (line 1005)
        warn_41142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 12), self_41141, 'warn')
        # Calling warn(args, kwargs) (line 1005)
        warn_call_result_41145 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 12), warn_41142, *[str_41143], **kwargs_41144)
        
        # SSA join for if statement (line 1004)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'config_list' (line 1006)
        config_list_41146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 22), 'config_list')
        # Testing the type of a for loop iterable (line 1006)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1006, 8), config_list_41146)
        # Getting the type of the for loop variable (line 1006)
        for_loop_var_41147 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1006, 8), config_list_41146)
        # Assigning a type to the variable 'config' (line 1006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 8), 'config', for_loop_var_41147)
        # SSA begins for a for statement (line 1006)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Name to a Name (line 1007):
        
        # Assigning a Name to a Name (line 1007):
        # Getting the type of 'config' (line 1007)
        config_41148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 16), 'config')
        # Assigning a type to the variable 'd' (line 1007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 12), 'd', config_41148)
        
        
        # Call to isinstance(...): (line 1008)
        # Processing the call arguments (line 1008)
        # Getting the type of 'config' (line 1008)
        config_41150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 26), 'config', False)
        # Getting the type of 'Configuration' (line 1008)
        Configuration_41151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 34), 'Configuration', False)
        # Processing the call keyword arguments (line 1008)
        kwargs_41152 = {}
        # Getting the type of 'isinstance' (line 1008)
        isinstance_41149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1008)
        isinstance_call_result_41153 = invoke(stypy.reporting.localization.Localization(__file__, 1008, 15), isinstance_41149, *[config_41150, Configuration_41151], **kwargs_41152)
        
        # Testing the type of an if condition (line 1008)
        if_condition_41154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1008, 12), isinstance_call_result_41153)
        # Assigning a type to the variable 'if_condition_41154' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 12), 'if_condition_41154', if_condition_41154)
        # SSA begins for if statement (line 1008)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1009):
        
        # Assigning a Call to a Name (line 1009):
        
        # Call to todict(...): (line 1009)
        # Processing the call keyword arguments (line 1009)
        kwargs_41157 = {}
        # Getting the type of 'config' (line 1009)
        config_41155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 20), 'config', False)
        # Obtaining the member 'todict' of a type (line 1009)
        todict_41156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 20), config_41155, 'todict')
        # Calling todict(args, kwargs) (line 1009)
        todict_call_result_41158 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 20), todict_41156, *[], **kwargs_41157)
        
        # Assigning a type to the variable 'd' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 16), 'd', todict_call_result_41158)
        # SSA join for if statement (line 1008)
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        # Call to isinstance(...): (line 1010)
        # Processing the call arguments (line 1010)
        # Getting the type of 'd' (line 1010)
        d_41160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 30), 'd', False)
        # Getting the type of 'dict' (line 1010)
        dict_41161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 33), 'dict', False)
        # Processing the call keyword arguments (line 1010)
        kwargs_41162 = {}
        # Getting the type of 'isinstance' (line 1010)
        isinstance_41159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1010)
        isinstance_call_result_41163 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 19), isinstance_41159, *[d_41160, dict_41161], **kwargs_41162)
        
        
        # Call to info(...): (line 1012)
        # Processing the call arguments (line 1012)
        str_41166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 22), 'str', 'Appending %s configuration to %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1013)
        tuple_41167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1013)
        # Adding element type (line 1013)
        
        # Call to get(...): (line 1013)
        # Processing the call arguments (line 1013)
        str_41170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 31), 'str', 'name')
        # Processing the call keyword arguments (line 1013)
        kwargs_41171 = {}
        # Getting the type of 'd' (line 1013)
        d_41168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 25), 'd', False)
        # Obtaining the member 'get' of a type (line 1013)
        get_41169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 25), d_41168, 'get')
        # Calling get(args, kwargs) (line 1013)
        get_call_result_41172 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 25), get_41169, *[str_41170], **kwargs_41171)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1013, 25), tuple_41167, get_call_result_41172)
        # Adding element type (line 1013)
        # Getting the type of 'self' (line 1013)
        self_41173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 40), 'self', False)
        # Obtaining the member 'name' of a type (line 1013)
        name_41174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 40), self_41173, 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1013, 25), tuple_41167, name_41174)
        
        # Applying the binary operator '%' (line 1012)
        result_mod_41175 = python_operator(stypy.reporting.localization.Localization(__file__, 1012, 22), '%', str_41166, tuple_41167)
        
        # Processing the call keyword arguments (line 1012)
        kwargs_41176 = {}
        # Getting the type of 'self' (line 1012)
        self_41164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 12), 'self', False)
        # Obtaining the member 'info' of a type (line 1012)
        info_41165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 12), self_41164, 'info')
        # Calling info(args, kwargs) (line 1012)
        info_call_result_41177 = invoke(stypy.reporting.localization.Localization(__file__, 1012, 12), info_41165, *[result_mod_41175], **kwargs_41176)
        
        
        # Call to dict_append(...): (line 1014)
        # Processing the call keyword arguments (line 1014)
        # Getting the type of 'd' (line 1014)
        d_41180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 31), 'd', False)
        kwargs_41181 = {'d_41180': d_41180}
        # Getting the type of 'self' (line 1014)
        self_41178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 12), 'self', False)
        # Obtaining the member 'dict_append' of a type (line 1014)
        dict_append_41179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 12), self_41178, 'dict_append')
        # Calling dict_append(args, kwargs) (line 1014)
        dict_append_call_result_41182 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 12), dict_append_41179, *[], **kwargs_41181)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1016):
        
        # Assigning a Call to a Name (line 1016):
        
        # Call to get_distribution(...): (line 1016)
        # Processing the call keyword arguments (line 1016)
        kwargs_41185 = {}
        # Getting the type of 'self' (line 1016)
        self_41183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 15), 'self', False)
        # Obtaining the member 'get_distribution' of a type (line 1016)
        get_distribution_41184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 15), self_41183, 'get_distribution')
        # Calling get_distribution(args, kwargs) (line 1016)
        get_distribution_call_result_41186 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 15), get_distribution_41184, *[], **kwargs_41185)
        
        # Assigning a type to the variable 'dist' (line 1016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 8), 'dist', get_distribution_call_result_41186)
        
        # Type idiom detected: calculating its left and rigth part (line 1017)
        # Getting the type of 'dist' (line 1017)
        dist_41187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'dist')
        # Getting the type of 'None' (line 1017)
        None_41188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 23), 'None')
        
        (may_be_41189, more_types_in_union_41190) = may_not_be_none(dist_41187, None_41188)

        if may_be_41189:

            if more_types_in_union_41190:
                # Runtime conditional SSA (line 1017)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to warn(...): (line 1018)
            # Processing the call arguments (line 1018)
            str_41193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 22), 'str', 'distutils distribution has been initialized, it may be too late to add a subpackage ')
            # Getting the type of 'subpackage_name' (line 1019)
            subpackage_name_41194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 66), 'subpackage_name', False)
            # Applying the binary operator '+' (line 1018)
            result_add_41195 = python_operator(stypy.reporting.localization.Localization(__file__, 1018, 22), '+', str_41193, subpackage_name_41194)
            
            # Processing the call keyword arguments (line 1018)
            kwargs_41196 = {}
            # Getting the type of 'self' (line 1018)
            self_41191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 12), 'self', False)
            # Obtaining the member 'warn' of a type (line 1018)
            warn_41192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 12), self_41191, 'warn')
            # Calling warn(args, kwargs) (line 1018)
            warn_call_result_41197 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 12), warn_41192, *[result_add_41195], **kwargs_41196)
            

            if more_types_in_union_41190:
                # SSA join for if statement (line 1017)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'add_subpackage(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_subpackage' in the type store
        # Getting the type of 'stypy_return_type' (line 978)
        stypy_return_type_41198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41198)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_subpackage'
        return stypy_return_type_41198


    @norecursion
    def add_data_dir(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_data_dir'
        module_type_store = module_type_store.open_function_context('add_data_dir', 1021, 4, False)
        # Assigning a type to the variable 'self' (line 1022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1022, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_data_dir.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_data_dir.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_data_dir.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_data_dir.__dict__.__setitem__('stypy_function_name', 'Configuration.add_data_dir')
        Configuration.add_data_dir.__dict__.__setitem__('stypy_param_names_list', ['data_path'])
        Configuration.add_data_dir.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.add_data_dir.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.add_data_dir.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_data_dir.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_data_dir.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_data_dir.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_data_dir', ['data_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_data_dir', localization, ['data_path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_data_dir(...)' code ##################

        str_41199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, (-1)), 'str', "Recursively add files under data_path to data_files list.\n\n        Recursively add files under data_path to the list of data_files to be\n        installed (and distributed). The data_path can be either a relative\n        path-name, or an absolute path-name, or a 2-tuple where the first\n        argument shows where in the install directory the data directory\n        should be installed to.\n\n        Parameters\n        ----------\n        data_path : seq or str\n            Argument can be either\n\n                * 2-sequence (<datadir suffix>, <path to data directory>)\n                * path to data directory where python datadir suffix defaults\n                  to package dir.\n\n        Notes\n        -----\n        Rules for installation paths:\n          foo/bar -> (foo/bar, foo/bar) -> parent/foo/bar\n          (gun, foo/bar) -> parent/gun\n          foo/* -> (foo/a, foo/a), (foo/b, foo/b) -> parent/foo/a, parent/foo/b\n          (gun, foo/*) -> (gun, foo/a), (gun, foo/b) -> gun\n          (gun/*, foo/*) -> parent/gun/a, parent/gun/b\n          /foo/bar -> (bar, /foo/bar) -> parent/bar\n          (gun, /foo/bar) -> parent/gun\n          (fun/*/gun/*, sun/foo/bar) -> parent/fun/foo/gun/bar\n\n        Examples\n        --------\n        For example suppose the source directory contains fun/foo.dat and\n        fun/bar/car.dat::\n\n            >>> self.add_data_dir('fun')                       #doctest: +SKIP\n            >>> self.add_data_dir(('sun', 'fun'))              #doctest: +SKIP\n            >>> self.add_data_dir(('gun', '/full/path/to/fun'))#doctest: +SKIP\n\n        Will install data-files to the locations::\n\n            <package install directory>/\n              fun/\n                foo.dat\n                bar/\n                  car.dat\n              sun/\n                foo.dat\n                bar/\n                  car.dat\n              gun/\n                foo.dat\n                car.dat\n        ")
        
        
        # Call to is_sequence(...): (line 1075)
        # Processing the call arguments (line 1075)
        # Getting the type of 'data_path' (line 1075)
        data_path_41201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 23), 'data_path', False)
        # Processing the call keyword arguments (line 1075)
        kwargs_41202 = {}
        # Getting the type of 'is_sequence' (line 1075)
        is_sequence_41200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 11), 'is_sequence', False)
        # Calling is_sequence(args, kwargs) (line 1075)
        is_sequence_call_result_41203 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 11), is_sequence_41200, *[data_path_41201], **kwargs_41202)
        
        # Testing the type of an if condition (line 1075)
        if_condition_41204 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1075, 8), is_sequence_call_result_41203)
        # Assigning a type to the variable 'if_condition_41204' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'if_condition_41204', if_condition_41204)
        # SSA begins for if statement (line 1075)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 1076):
        
        # Assigning a Subscript to a Name (line 1076):
        
        # Obtaining the type of the subscript
        int_41205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1076, 12), 'int')
        # Getting the type of 'data_path' (line 1076)
        data_path_41206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 27), 'data_path')
        # Obtaining the member '__getitem__' of a type (line 1076)
        getitem___41207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 12), data_path_41206, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1076)
        subscript_call_result_41208 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 12), getitem___41207, int_41205)
        
        # Assigning a type to the variable 'tuple_var_assignment_38387' (line 1076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 12), 'tuple_var_assignment_38387', subscript_call_result_41208)
        
        # Assigning a Subscript to a Name (line 1076):
        
        # Obtaining the type of the subscript
        int_41209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1076, 12), 'int')
        # Getting the type of 'data_path' (line 1076)
        data_path_41210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 27), 'data_path')
        # Obtaining the member '__getitem__' of a type (line 1076)
        getitem___41211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 12), data_path_41210, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1076)
        subscript_call_result_41212 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 12), getitem___41211, int_41209)
        
        # Assigning a type to the variable 'tuple_var_assignment_38388' (line 1076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 12), 'tuple_var_assignment_38388', subscript_call_result_41212)
        
        # Assigning a Name to a Name (line 1076):
        # Getting the type of 'tuple_var_assignment_38387' (line 1076)
        tuple_var_assignment_38387_41213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 12), 'tuple_var_assignment_38387')
        # Assigning a type to the variable 'd' (line 1076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 12), 'd', tuple_var_assignment_38387_41213)
        
        # Assigning a Name to a Name (line 1076):
        # Getting the type of 'tuple_var_assignment_38388' (line 1076)
        tuple_var_assignment_38388_41214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 12), 'tuple_var_assignment_38388')
        # Assigning a type to the variable 'data_path' (line 1076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 15), 'data_path', tuple_var_assignment_38388_41214)
        # SSA branch for the else part of an if statement (line 1075)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1078):
        
        # Assigning a Name to a Name (line 1078):
        # Getting the type of 'None' (line 1078)
        None_41215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 16), 'None')
        # Assigning a type to the variable 'd' (line 1078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 12), 'd', None_41215)
        # SSA join for if statement (line 1075)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to is_sequence(...): (line 1079)
        # Processing the call arguments (line 1079)
        # Getting the type of 'data_path' (line 1079)
        data_path_41217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 23), 'data_path', False)
        # Processing the call keyword arguments (line 1079)
        kwargs_41218 = {}
        # Getting the type of 'is_sequence' (line 1079)
        is_sequence_41216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 11), 'is_sequence', False)
        # Calling is_sequence(args, kwargs) (line 1079)
        is_sequence_call_result_41219 = invoke(stypy.reporting.localization.Localization(__file__, 1079, 11), is_sequence_41216, *[data_path_41217], **kwargs_41218)
        
        # Testing the type of an if condition (line 1079)
        if_condition_41220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1079, 8), is_sequence_call_result_41219)
        # Assigning a type to the variable 'if_condition_41220' (line 1079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1079, 8), 'if_condition_41220', if_condition_41220)
        # SSA begins for if statement (line 1079)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'data_path' (line 1080)
        data_path_41228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 48), 'data_path')
        comprehension_41229 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 13), data_path_41228)
        # Assigning a type to the variable 'p' (line 1080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 13), 'p', comprehension_41229)
        
        # Call to add_data_dir(...): (line 1080)
        # Processing the call arguments (line 1080)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1080)
        tuple_41223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1080)
        # Adding element type (line 1080)
        # Getting the type of 'd' (line 1080)
        d_41224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 32), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 32), tuple_41223, d_41224)
        # Adding element type (line 1080)
        # Getting the type of 'p' (line 1080)
        p_41225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 35), 'p', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 32), tuple_41223, p_41225)
        
        # Processing the call keyword arguments (line 1080)
        kwargs_41226 = {}
        # Getting the type of 'self' (line 1080)
        self_41221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 13), 'self', False)
        # Obtaining the member 'add_data_dir' of a type (line 1080)
        add_data_dir_41222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 13), self_41221, 'add_data_dir')
        # Calling add_data_dir(args, kwargs) (line 1080)
        add_data_dir_call_result_41227 = invoke(stypy.reporting.localization.Localization(__file__, 1080, 13), add_data_dir_41222, *[tuple_41223], **kwargs_41226)
        
        list_41230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 13), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 13), list_41230, add_data_dir_call_result_41227)
        # Assigning a type to the variable 'stypy_return_type' (line 1081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1079)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to is_string(...): (line 1082)
        # Processing the call arguments (line 1082)
        # Getting the type of 'data_path' (line 1082)
        data_path_41232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 25), 'data_path', False)
        # Processing the call keyword arguments (line 1082)
        kwargs_41233 = {}
        # Getting the type of 'is_string' (line 1082)
        is_string_41231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 15), 'is_string', False)
        # Calling is_string(args, kwargs) (line 1082)
        is_string_call_result_41234 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 15), is_string_41231, *[data_path_41232], **kwargs_41233)
        
        # Applying the 'not' unary operator (line 1082)
        result_not__41235 = python_operator(stypy.reporting.localization.Localization(__file__, 1082, 11), 'not', is_string_call_result_41234)
        
        # Testing the type of an if condition (line 1082)
        if_condition_41236 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1082, 8), result_not__41235)
        # Assigning a type to the variable 'if_condition_41236' (line 1082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 8), 'if_condition_41236', if_condition_41236)
        # SSA begins for if statement (line 1082)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1083)
        # Processing the call arguments (line 1083)
        str_41238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 28), 'str', 'not a string: %r')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1083)
        tuple_41239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1083)
        # Adding element type (line 1083)
        # Getting the type of 'data_path' (line 1083)
        data_path_41240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 50), 'data_path', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 50), tuple_41239, data_path_41240)
        
        # Applying the binary operator '%' (line 1083)
        result_mod_41241 = python_operator(stypy.reporting.localization.Localization(__file__, 1083, 28), '%', str_41238, tuple_41239)
        
        # Processing the call keyword arguments (line 1083)
        kwargs_41242 = {}
        # Getting the type of 'TypeError' (line 1083)
        TypeError_41237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1083)
        TypeError_call_result_41243 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 18), TypeError_41237, *[result_mod_41241], **kwargs_41242)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1083, 12), TypeError_call_result_41243, 'raise parameter', BaseException)
        # SSA join for if statement (line 1082)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1084)
        # Getting the type of 'd' (line 1084)
        d_41244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 11), 'd')
        # Getting the type of 'None' (line 1084)
        None_41245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 16), 'None')
        
        (may_be_41246, more_types_in_union_41247) = may_be_none(d_41244, None_41245)

        if may_be_41246:

            if more_types_in_union_41247:
                # Runtime conditional SSA (line 1084)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Call to isabs(...): (line 1085)
            # Processing the call arguments (line 1085)
            # Getting the type of 'data_path' (line 1085)
            data_path_41251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 29), 'data_path', False)
            # Processing the call keyword arguments (line 1085)
            kwargs_41252 = {}
            # Getting the type of 'os' (line 1085)
            os_41248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 15), 'os', False)
            # Obtaining the member 'path' of a type (line 1085)
            path_41249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 15), os_41248, 'path')
            # Obtaining the member 'isabs' of a type (line 1085)
            isabs_41250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 15), path_41249, 'isabs')
            # Calling isabs(args, kwargs) (line 1085)
            isabs_call_result_41253 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 15), isabs_41250, *[data_path_41251], **kwargs_41252)
            
            # Testing the type of an if condition (line 1085)
            if_condition_41254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1085, 12), isabs_call_result_41253)
            # Assigning a type to the variable 'if_condition_41254' (line 1085)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 12), 'if_condition_41254', if_condition_41254)
            # SSA begins for if statement (line 1085)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to add_data_dir(...): (line 1086)
            # Processing the call arguments (line 1086)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1086)
            tuple_41257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 42), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1086)
            # Adding element type (line 1086)
            
            # Call to basename(...): (line 1086)
            # Processing the call arguments (line 1086)
            # Getting the type of 'data_path' (line 1086)
            data_path_41261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 59), 'data_path', False)
            # Processing the call keyword arguments (line 1086)
            kwargs_41262 = {}
            # Getting the type of 'os' (line 1086)
            os_41258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 42), 'os', False)
            # Obtaining the member 'path' of a type (line 1086)
            path_41259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 42), os_41258, 'path')
            # Obtaining the member 'basename' of a type (line 1086)
            basename_41260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 42), path_41259, 'basename')
            # Calling basename(args, kwargs) (line 1086)
            basename_call_result_41263 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 42), basename_41260, *[data_path_41261], **kwargs_41262)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1086, 42), tuple_41257, basename_call_result_41263)
            # Adding element type (line 1086)
            # Getting the type of 'data_path' (line 1086)
            data_path_41264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 71), 'data_path', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1086, 42), tuple_41257, data_path_41264)
            
            # Processing the call keyword arguments (line 1086)
            kwargs_41265 = {}
            # Getting the type of 'self' (line 1086)
            self_41255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 23), 'self', False)
            # Obtaining the member 'add_data_dir' of a type (line 1086)
            add_data_dir_41256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 23), self_41255, 'add_data_dir')
            # Calling add_data_dir(args, kwargs) (line 1086)
            add_data_dir_call_result_41266 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 23), add_data_dir_41256, *[tuple_41257], **kwargs_41265)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1086)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 16), 'stypy_return_type', add_data_dir_call_result_41266)
            # SSA join for if statement (line 1085)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to add_data_dir(...): (line 1087)
            # Processing the call arguments (line 1087)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1087)
            tuple_41269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 38), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1087)
            # Adding element type (line 1087)
            # Getting the type of 'data_path' (line 1087)
            data_path_41270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 38), 'data_path', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 38), tuple_41269, data_path_41270)
            # Adding element type (line 1087)
            # Getting the type of 'data_path' (line 1087)
            data_path_41271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 49), 'data_path', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 38), tuple_41269, data_path_41271)
            
            # Processing the call keyword arguments (line 1087)
            kwargs_41272 = {}
            # Getting the type of 'self' (line 1087)
            self_41267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 19), 'self', False)
            # Obtaining the member 'add_data_dir' of a type (line 1087)
            add_data_dir_41268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 19), self_41267, 'add_data_dir')
            # Calling add_data_dir(args, kwargs) (line 1087)
            add_data_dir_call_result_41273 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 19), add_data_dir_41268, *[tuple_41269], **kwargs_41272)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1087)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 12), 'stypy_return_type', add_data_dir_call_result_41273)

            if more_types_in_union_41247:
                # SSA join for if statement (line 1084)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1088):
        
        # Assigning a Call to a Name (line 1088):
        
        # Call to paths(...): (line 1088)
        # Processing the call arguments (line 1088)
        # Getting the type of 'data_path' (line 1088)
        data_path_41276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 27), 'data_path', False)
        # Processing the call keyword arguments (line 1088)
        # Getting the type of 'False' (line 1088)
        False_41277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 59), 'False', False)
        keyword_41278 = False_41277
        kwargs_41279 = {'include_non_existing': keyword_41278}
        # Getting the type of 'self' (line 1088)
        self_41274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 16), 'self', False)
        # Obtaining the member 'paths' of a type (line 1088)
        paths_41275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 16), self_41274, 'paths')
        # Calling paths(args, kwargs) (line 1088)
        paths_call_result_41280 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 16), paths_41275, *[data_path_41276], **kwargs_41279)
        
        # Assigning a type to the variable 'paths' (line 1088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'paths', paths_call_result_41280)
        
        
        # Call to is_glob_pattern(...): (line 1089)
        # Processing the call arguments (line 1089)
        # Getting the type of 'data_path' (line 1089)
        data_path_41282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 27), 'data_path', False)
        # Processing the call keyword arguments (line 1089)
        kwargs_41283 = {}
        # Getting the type of 'is_glob_pattern' (line 1089)
        is_glob_pattern_41281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 11), 'is_glob_pattern', False)
        # Calling is_glob_pattern(args, kwargs) (line 1089)
        is_glob_pattern_call_result_41284 = invoke(stypy.reporting.localization.Localization(__file__, 1089, 11), is_glob_pattern_41281, *[data_path_41282], **kwargs_41283)
        
        # Testing the type of an if condition (line 1089)
        if_condition_41285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1089, 8), is_glob_pattern_call_result_41284)
        # Assigning a type to the variable 'if_condition_41285' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'if_condition_41285', if_condition_41285)
        # SSA begins for if statement (line 1089)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to is_glob_pattern(...): (line 1090)
        # Processing the call arguments (line 1090)
        # Getting the type of 'd' (line 1090)
        d_41287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 31), 'd', False)
        # Processing the call keyword arguments (line 1090)
        kwargs_41288 = {}
        # Getting the type of 'is_glob_pattern' (line 1090)
        is_glob_pattern_41286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 15), 'is_glob_pattern', False)
        # Calling is_glob_pattern(args, kwargs) (line 1090)
        is_glob_pattern_call_result_41289 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 15), is_glob_pattern_41286, *[d_41287], **kwargs_41288)
        
        # Testing the type of an if condition (line 1090)
        if_condition_41290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1090, 12), is_glob_pattern_call_result_41289)
        # Assigning a type to the variable 'if_condition_41290' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 12), 'if_condition_41290', if_condition_41290)
        # SSA begins for if statement (line 1090)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1091):
        
        # Assigning a Call to a Name (line 1091):
        
        # Call to split(...): (line 1091)
        # Processing the call arguments (line 1091)
        # Getting the type of 'os' (line 1091)
        os_41296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 48), 'os', False)
        # Obtaining the member 'sep' of a type (line 1091)
        sep_41297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 48), os_41296, 'sep')
        # Processing the call keyword arguments (line 1091)
        kwargs_41298 = {}
        
        # Call to allpath(...): (line 1091)
        # Processing the call arguments (line 1091)
        # Getting the type of 'd' (line 1091)
        d_41292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 39), 'd', False)
        # Processing the call keyword arguments (line 1091)
        kwargs_41293 = {}
        # Getting the type of 'allpath' (line 1091)
        allpath_41291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 31), 'allpath', False)
        # Calling allpath(args, kwargs) (line 1091)
        allpath_call_result_41294 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 31), allpath_41291, *[d_41292], **kwargs_41293)
        
        # Obtaining the member 'split' of a type (line 1091)
        split_41295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 31), allpath_call_result_41294, 'split')
        # Calling split(args, kwargs) (line 1091)
        split_call_result_41299 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 31), split_41295, *[sep_41297], **kwargs_41298)
        
        # Assigning a type to the variable 'pattern_list' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 16), 'pattern_list', split_call_result_41299)
        
        # Call to reverse(...): (line 1092)
        # Processing the call keyword arguments (line 1092)
        kwargs_41302 = {}
        # Getting the type of 'pattern_list' (line 1092)
        pattern_list_41300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 16), 'pattern_list', False)
        # Obtaining the member 'reverse' of a type (line 1092)
        reverse_41301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 16), pattern_list_41300, 'reverse')
        # Calling reverse(args, kwargs) (line 1092)
        reverse_call_result_41303 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 16), reverse_41301, *[], **kwargs_41302)
        
        
        # Assigning a Call to a Name (line 1094):
        
        # Assigning a Call to a Name (line 1094):
        
        # Call to list(...): (line 1094)
        # Processing the call arguments (line 1094)
        
        # Call to range(...): (line 1094)
        # Processing the call arguments (line 1094)
        
        # Call to len(...): (line 1094)
        # Processing the call arguments (line 1094)
        # Getting the type of 'pattern_list' (line 1094)
        pattern_list_41307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 36), 'pattern_list', False)
        # Processing the call keyword arguments (line 1094)
        kwargs_41308 = {}
        # Getting the type of 'len' (line 1094)
        len_41306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 32), 'len', False)
        # Calling len(args, kwargs) (line 1094)
        len_call_result_41309 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 32), len_41306, *[pattern_list_41307], **kwargs_41308)
        
        int_41310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1094, 50), 'int')
        # Applying the binary operator '-' (line 1094)
        result_sub_41311 = python_operator(stypy.reporting.localization.Localization(__file__, 1094, 32), '-', len_call_result_41309, int_41310)
        
        # Processing the call keyword arguments (line 1094)
        kwargs_41312 = {}
        # Getting the type of 'range' (line 1094)
        range_41305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 26), 'range', False)
        # Calling range(args, kwargs) (line 1094)
        range_call_result_41313 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 26), range_41305, *[result_sub_41311], **kwargs_41312)
        
        # Processing the call keyword arguments (line 1094)
        kwargs_41314 = {}
        # Getting the type of 'list' (line 1094)
        list_41304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 21), 'list', False)
        # Calling list(args, kwargs) (line 1094)
        list_call_result_41315 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 21), list_41304, *[range_call_result_41313], **kwargs_41314)
        
        # Assigning a type to the variable 'rl' (line 1094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1094, 16), 'rl', list_call_result_41315)
        
        # Call to reverse(...): (line 1094)
        # Processing the call keyword arguments (line 1094)
        kwargs_41318 = {}
        # Getting the type of 'rl' (line 1094)
        rl_41316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 55), 'rl', False)
        # Obtaining the member 'reverse' of a type (line 1094)
        reverse_41317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 55), rl_41316, 'reverse')
        # Calling reverse(args, kwargs) (line 1094)
        reverse_call_result_41319 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 55), reverse_41317, *[], **kwargs_41318)
        
        
        # Getting the type of 'rl' (line 1095)
        rl_41320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 25), 'rl')
        # Testing the type of a for loop iterable (line 1095)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1095, 16), rl_41320)
        # Getting the type of the for loop variable (line 1095)
        for_loop_var_41321 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1095, 16), rl_41320)
        # Assigning a type to the variable 'i' (line 1095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 16), 'i', for_loop_var_41321)
        # SSA begins for a for statement (line 1095)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1096)
        i_41322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 40), 'i')
        # Getting the type of 'pattern_list' (line 1096)
        pattern_list_41323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 27), 'pattern_list')
        # Obtaining the member '__getitem__' of a type (line 1096)
        getitem___41324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 27), pattern_list_41323, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1096)
        subscript_call_result_41325 = invoke(stypy.reporting.localization.Localization(__file__, 1096, 27), getitem___41324, i_41322)
        
        # Applying the 'not' unary operator (line 1096)
        result_not__41326 = python_operator(stypy.reporting.localization.Localization(__file__, 1096, 23), 'not', subscript_call_result_41325)
        
        # Testing the type of an if condition (line 1096)
        if_condition_41327 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1096, 20), result_not__41326)
        # Assigning a type to the variable 'if_condition_41327' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 20), 'if_condition_41327', if_condition_41327)
        # SSA begins for if statement (line 1096)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'pattern_list' (line 1097)
        pattern_list_41328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 28), 'pattern_list')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1097)
        i_41329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 41), 'i')
        # Getting the type of 'pattern_list' (line 1097)
        pattern_list_41330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 28), 'pattern_list')
        # Obtaining the member '__getitem__' of a type (line 1097)
        getitem___41331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 28), pattern_list_41330, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1097)
        subscript_call_result_41332 = invoke(stypy.reporting.localization.Localization(__file__, 1097, 28), getitem___41331, i_41329)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1097, 24), pattern_list_41328, subscript_call_result_41332)
        # SSA join for if statement (line 1096)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'paths' (line 1099)
        paths_41333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 28), 'paths')
        # Testing the type of a for loop iterable (line 1099)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1099, 16), paths_41333)
        # Getting the type of the for loop variable (line 1099)
        for_loop_var_41334 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1099, 16), paths_41333)
        # Assigning a type to the variable 'path' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 16), 'path', for_loop_var_41334)
        # SSA begins for a for statement (line 1099)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to isdir(...): (line 1100)
        # Processing the call arguments (line 1100)
        # Getting the type of 'path' (line 1100)
        path_41338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 41), 'path', False)
        # Processing the call keyword arguments (line 1100)
        kwargs_41339 = {}
        # Getting the type of 'os' (line 1100)
        os_41335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 27), 'os', False)
        # Obtaining the member 'path' of a type (line 1100)
        path_41336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 27), os_41335, 'path')
        # Obtaining the member 'isdir' of a type (line 1100)
        isdir_41337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 27), path_41336, 'isdir')
        # Calling isdir(args, kwargs) (line 1100)
        isdir_call_result_41340 = invoke(stypy.reporting.localization.Localization(__file__, 1100, 27), isdir_41337, *[path_41338], **kwargs_41339)
        
        # Applying the 'not' unary operator (line 1100)
        result_not__41341 = python_operator(stypy.reporting.localization.Localization(__file__, 1100, 23), 'not', isdir_call_result_41340)
        
        # Testing the type of an if condition (line 1100)
        if_condition_41342 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1100, 20), result_not__41341)
        # Assigning a type to the variable 'if_condition_41342' (line 1100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1100, 20), 'if_condition_41342', if_condition_41342)
        # SSA begins for if statement (line 1100)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to print(...): (line 1101)
        # Processing the call arguments (line 1101)
        str_41344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 30), 'str', 'Not a directory, skipping')
        # Getting the type of 'path' (line 1101)
        path_41345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 59), 'path', False)
        # Processing the call keyword arguments (line 1101)
        kwargs_41346 = {}
        # Getting the type of 'print' (line 1101)
        print_41343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 24), 'print', False)
        # Calling print(args, kwargs) (line 1101)
        print_call_result_41347 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 24), print_41343, *[str_41344, path_41345], **kwargs_41346)
        
        # SSA join for if statement (line 1100)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1103):
        
        # Assigning a Call to a Name (line 1103):
        
        # Call to rel_path(...): (line 1103)
        # Processing the call arguments (line 1103)
        # Getting the type of 'path' (line 1103)
        path_41349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 37), 'path', False)
        # Getting the type of 'self' (line 1103)
        self_41350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 43), 'self', False)
        # Obtaining the member 'local_path' of a type (line 1103)
        local_path_41351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 43), self_41350, 'local_path')
        # Processing the call keyword arguments (line 1103)
        kwargs_41352 = {}
        # Getting the type of 'rel_path' (line 1103)
        rel_path_41348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 28), 'rel_path', False)
        # Calling rel_path(args, kwargs) (line 1103)
        rel_path_call_result_41353 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 28), rel_path_41348, *[path_41349, local_path_41351], **kwargs_41352)
        
        # Assigning a type to the variable 'rpath' (line 1103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 20), 'rpath', rel_path_call_result_41353)
        
        # Assigning a Call to a Name (line 1104):
        
        # Assigning a Call to a Name (line 1104):
        
        # Call to split(...): (line 1104)
        # Processing the call arguments (line 1104)
        # Getting the type of 'os' (line 1104)
        os_41356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 44), 'os', False)
        # Obtaining the member 'sep' of a type (line 1104)
        sep_41357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 44), os_41356, 'sep')
        # Processing the call keyword arguments (line 1104)
        kwargs_41358 = {}
        # Getting the type of 'rpath' (line 1104)
        rpath_41354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 32), 'rpath', False)
        # Obtaining the member 'split' of a type (line 1104)
        split_41355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 32), rpath_41354, 'split')
        # Calling split(args, kwargs) (line 1104)
        split_call_result_41359 = invoke(stypy.reporting.localization.Localization(__file__, 1104, 32), split_41355, *[sep_41357], **kwargs_41358)
        
        # Assigning a type to the variable 'path_list' (line 1104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1104, 20), 'path_list', split_call_result_41359)
        
        # Call to reverse(...): (line 1105)
        # Processing the call keyword arguments (line 1105)
        kwargs_41362 = {}
        # Getting the type of 'path_list' (line 1105)
        path_list_41360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 20), 'path_list', False)
        # Obtaining the member 'reverse' of a type (line 1105)
        reverse_41361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 20), path_list_41360, 'reverse')
        # Calling reverse(args, kwargs) (line 1105)
        reverse_call_result_41363 = invoke(stypy.reporting.localization.Localization(__file__, 1105, 20), reverse_41361, *[], **kwargs_41362)
        
        
        # Assigning a List to a Name (line 1106):
        
        # Assigning a List to a Name (line 1106):
        
        # Obtaining an instance of the builtin type 'list' (line 1106)
        list_41364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1106)
        
        # Assigning a type to the variable 'target_list' (line 1106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 20), 'target_list', list_41364)
        
        # Assigning a Num to a Name (line 1107):
        
        # Assigning a Num to a Name (line 1107):
        int_41365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 24), 'int')
        # Assigning a type to the variable 'i' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 20), 'i', int_41365)
        
        # Getting the type of 'pattern_list' (line 1108)
        pattern_list_41366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 29), 'pattern_list')
        # Testing the type of a for loop iterable (line 1108)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1108, 20), pattern_list_41366)
        # Getting the type of the for loop variable (line 1108)
        for_loop_var_41367 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1108, 20), pattern_list_41366)
        # Assigning a type to the variable 's' (line 1108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 20), 's', for_loop_var_41367)
        # SSA begins for a for statement (line 1108)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to is_glob_pattern(...): (line 1109)
        # Processing the call arguments (line 1109)
        # Getting the type of 's' (line 1109)
        s_41369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 43), 's', False)
        # Processing the call keyword arguments (line 1109)
        kwargs_41370 = {}
        # Getting the type of 'is_glob_pattern' (line 1109)
        is_glob_pattern_41368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 27), 'is_glob_pattern', False)
        # Calling is_glob_pattern(args, kwargs) (line 1109)
        is_glob_pattern_call_result_41371 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 27), is_glob_pattern_41368, *[s_41369], **kwargs_41370)
        
        # Testing the type of an if condition (line 1109)
        if_condition_41372 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1109, 24), is_glob_pattern_call_result_41371)
        # Assigning a type to the variable 'if_condition_41372' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 24), 'if_condition_41372', if_condition_41372)
        # SSA begins for if statement (line 1109)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'i' (line 1110)
        i_41373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 31), 'i')
        
        # Call to len(...): (line 1110)
        # Processing the call arguments (line 1110)
        # Getting the type of 'path_list' (line 1110)
        path_list_41375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 38), 'path_list', False)
        # Processing the call keyword arguments (line 1110)
        kwargs_41376 = {}
        # Getting the type of 'len' (line 1110)
        len_41374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 34), 'len', False)
        # Calling len(args, kwargs) (line 1110)
        len_call_result_41377 = invoke(stypy.reporting.localization.Localization(__file__, 1110, 34), len_41374, *[path_list_41375], **kwargs_41376)
        
        # Applying the binary operator '>=' (line 1110)
        result_ge_41378 = python_operator(stypy.reporting.localization.Localization(__file__, 1110, 31), '>=', i_41373, len_call_result_41377)
        
        # Testing the type of an if condition (line 1110)
        if_condition_41379 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1110, 28), result_ge_41378)
        # Assigning a type to the variable 'if_condition_41379' (line 1110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 28), 'if_condition_41379', if_condition_41379)
        # SSA begins for if statement (line 1110)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1111)
        # Processing the call arguments (line 1111)
        str_41381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1111, 49), 'str', 'cannot fill pattern %r with %r')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1112)
        tuple_41382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1112, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1112)
        # Adding element type (line 1112)
        # Getting the type of 'd' (line 1112)
        d_41383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 41), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1112, 41), tuple_41382, d_41383)
        # Adding element type (line 1112)
        # Getting the type of 'path' (line 1112)
        path_41384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 44), 'path', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1112, 41), tuple_41382, path_41384)
        
        # Applying the binary operator '%' (line 1111)
        result_mod_41385 = python_operator(stypy.reporting.localization.Localization(__file__, 1111, 49), '%', str_41381, tuple_41382)
        
        # Processing the call keyword arguments (line 1111)
        kwargs_41386 = {}
        # Getting the type of 'ValueError' (line 1111)
        ValueError_41380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 38), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1111)
        ValueError_call_result_41387 = invoke(stypy.reporting.localization.Localization(__file__, 1111, 38), ValueError_41380, *[result_mod_41385], **kwargs_41386)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1111, 32), ValueError_call_result_41387, 'raise parameter', BaseException)
        # SSA join for if statement (line 1110)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1113)
        # Processing the call arguments (line 1113)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1113)
        i_41390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 57), 'i', False)
        # Getting the type of 'path_list' (line 1113)
        path_list_41391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 47), 'path_list', False)
        # Obtaining the member '__getitem__' of a type (line 1113)
        getitem___41392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1113, 47), path_list_41391, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1113)
        subscript_call_result_41393 = invoke(stypy.reporting.localization.Localization(__file__, 1113, 47), getitem___41392, i_41390)
        
        # Processing the call keyword arguments (line 1113)
        kwargs_41394 = {}
        # Getting the type of 'target_list' (line 1113)
        target_list_41388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 28), 'target_list', False)
        # Obtaining the member 'append' of a type (line 1113)
        append_41389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1113, 28), target_list_41388, 'append')
        # Calling append(args, kwargs) (line 1113)
        append_call_result_41395 = invoke(stypy.reporting.localization.Localization(__file__, 1113, 28), append_41389, *[subscript_call_result_41393], **kwargs_41394)
        
        # SSA branch for the else part of an if statement (line 1109)
        module_type_store.open_ssa_branch('else')
        # Evaluating assert statement condition
        
        # Getting the type of 's' (line 1115)
        s_41396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 35), 's')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1115)
        i_41397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 48), 'i')
        # Getting the type of 'path_list' (line 1115)
        path_list_41398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 38), 'path_list')
        # Obtaining the member '__getitem__' of a type (line 1115)
        getitem___41399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 38), path_list_41398, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1115)
        subscript_call_result_41400 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 38), getitem___41399, i_41397)
        
        # Applying the binary operator '==' (line 1115)
        result_eq_41401 = python_operator(stypy.reporting.localization.Localization(__file__, 1115, 35), '==', s_41396, subscript_call_result_41400)
        
        
        # Call to append(...): (line 1116)
        # Processing the call arguments (line 1116)
        # Getting the type of 's' (line 1116)
        s_41404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 47), 's', False)
        # Processing the call keyword arguments (line 1116)
        kwargs_41405 = {}
        # Getting the type of 'target_list' (line 1116)
        target_list_41402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 28), 'target_list', False)
        # Obtaining the member 'append' of a type (line 1116)
        append_41403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 28), target_list_41402, 'append')
        # Calling append(args, kwargs) (line 1116)
        append_call_result_41406 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 28), append_41403, *[s_41404], **kwargs_41405)
        
        # SSA join for if statement (line 1109)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'i' (line 1117)
        i_41407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 24), 'i')
        int_41408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1117, 29), 'int')
        # Applying the binary operator '+=' (line 1117)
        result_iadd_41409 = python_operator(stypy.reporting.localization.Localization(__file__, 1117, 24), '+=', i_41407, int_41408)
        # Assigning a type to the variable 'i' (line 1117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 24), 'i', result_iadd_41409)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1118)
        i_41410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 33), 'i')
        slice_41411 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1118, 23), i_41410, None, None)
        # Getting the type of 'path_list' (line 1118)
        path_list_41412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 23), 'path_list')
        # Obtaining the member '__getitem__' of a type (line 1118)
        getitem___41413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 23), path_list_41412, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1118)
        subscript_call_result_41414 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 23), getitem___41413, slice_41411)
        
        # Testing the type of an if condition (line 1118)
        if_condition_41415 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1118, 20), subscript_call_result_41414)
        # Assigning a type to the variable 'if_condition_41415' (line 1118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 20), 'if_condition_41415', if_condition_41415)
        # SSA begins for if statement (line 1118)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1119)
        # Processing the call arguments (line 1119)
        str_41418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 34), 'str', 'mismatch of pattern_list=%s and path_list=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1120)
        tuple_41419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1120)
        # Adding element type (line 1120)
        # Getting the type of 'pattern_list' (line 1120)
        pattern_list_41420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 37), 'pattern_list', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1120, 37), tuple_41419, pattern_list_41420)
        # Adding element type (line 1120)
        # Getting the type of 'path_list' (line 1120)
        path_list_41421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 51), 'path_list', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1120, 37), tuple_41419, path_list_41421)
        
        # Applying the binary operator '%' (line 1119)
        result_mod_41422 = python_operator(stypy.reporting.localization.Localization(__file__, 1119, 34), '%', str_41418, tuple_41419)
        
        # Processing the call keyword arguments (line 1119)
        kwargs_41423 = {}
        # Getting the type of 'self' (line 1119)
        self_41416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 24), 'self', False)
        # Obtaining the member 'warn' of a type (line 1119)
        warn_41417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 24), self_41416, 'warn')
        # Calling warn(args, kwargs) (line 1119)
        warn_call_result_41424 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 24), warn_41417, *[result_mod_41422], **kwargs_41423)
        
        # SSA join for if statement (line 1118)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to reverse(...): (line 1121)
        # Processing the call keyword arguments (line 1121)
        kwargs_41427 = {}
        # Getting the type of 'target_list' (line 1121)
        target_list_41425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 20), 'target_list', False)
        # Obtaining the member 'reverse' of a type (line 1121)
        reverse_41426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 20), target_list_41425, 'reverse')
        # Calling reverse(args, kwargs) (line 1121)
        reverse_call_result_41428 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 20), reverse_41426, *[], **kwargs_41427)
        
        
        # Call to add_data_dir(...): (line 1122)
        # Processing the call arguments (line 1122)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1122)
        tuple_41431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1122, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1122)
        # Adding element type (line 1122)
        
        # Call to join(...): (line 1122)
        # Processing the call arguments (line 1122)
        # Getting the type of 'target_list' (line 1122)
        target_list_41435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 51), 'target_list', False)
        # Processing the call keyword arguments (line 1122)
        kwargs_41436 = {}
        # Getting the type of 'os' (line 1122)
        os_41432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 39), 'os', False)
        # Obtaining the member 'sep' of a type (line 1122)
        sep_41433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 39), os_41432, 'sep')
        # Obtaining the member 'join' of a type (line 1122)
        join_41434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 39), sep_41433, 'join')
        # Calling join(args, kwargs) (line 1122)
        join_call_result_41437 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 39), join_41434, *[target_list_41435], **kwargs_41436)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1122, 39), tuple_41431, join_call_result_41437)
        # Adding element type (line 1122)
        # Getting the type of 'path' (line 1122)
        path_41438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 65), 'path', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1122, 39), tuple_41431, path_41438)
        
        # Processing the call keyword arguments (line 1122)
        kwargs_41439 = {}
        # Getting the type of 'self' (line 1122)
        self_41429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 20), 'self', False)
        # Obtaining the member 'add_data_dir' of a type (line 1122)
        add_data_dir_41430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 20), self_41429, 'add_data_dir')
        # Calling add_data_dir(args, kwargs) (line 1122)
        add_data_dir_call_result_41440 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 20), add_data_dir_41430, *[tuple_41431], **kwargs_41439)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1090)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'paths' (line 1124)
        paths_41441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 28), 'paths')
        # Testing the type of a for loop iterable (line 1124)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1124, 16), paths_41441)
        # Getting the type of the for loop variable (line 1124)
        for_loop_var_41442 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1124, 16), paths_41441)
        # Assigning a type to the variable 'path' (line 1124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 16), 'path', for_loop_var_41442)
        # SSA begins for a for statement (line 1124)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to add_data_dir(...): (line 1125)
        # Processing the call arguments (line 1125)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1125)
        tuple_41445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1125, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1125)
        # Adding element type (line 1125)
        # Getting the type of 'd' (line 1125)
        d_41446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 39), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1125, 39), tuple_41445, d_41446)
        # Adding element type (line 1125)
        # Getting the type of 'path' (line 1125)
        path_41447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 42), 'path', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1125, 39), tuple_41445, path_41447)
        
        # Processing the call keyword arguments (line 1125)
        kwargs_41448 = {}
        # Getting the type of 'self' (line 1125)
        self_41443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 20), 'self', False)
        # Obtaining the member 'add_data_dir' of a type (line 1125)
        add_data_dir_41444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 20), self_41443, 'add_data_dir')
        # Calling add_data_dir(args, kwargs) (line 1125)
        add_data_dir_call_result_41449 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 20), add_data_dir_41444, *[tuple_41445], **kwargs_41448)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1090)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1089)
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        
        # Call to is_glob_pattern(...): (line 1127)
        # Processing the call arguments (line 1127)
        # Getting the type of 'd' (line 1127)
        d_41451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 35), 'd', False)
        # Processing the call keyword arguments (line 1127)
        kwargs_41452 = {}
        # Getting the type of 'is_glob_pattern' (line 1127)
        is_glob_pattern_41450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 19), 'is_glob_pattern', False)
        # Calling is_glob_pattern(args, kwargs) (line 1127)
        is_glob_pattern_call_result_41453 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 19), is_glob_pattern_41450, *[d_41451], **kwargs_41452)
        
        # Applying the 'not' unary operator (line 1127)
        result_not__41454 = python_operator(stypy.reporting.localization.Localization(__file__, 1127, 15), 'not', is_glob_pattern_call_result_41453)
        
        
        # Assigning a Call to a Name (line 1129):
        
        # Assigning a Call to a Name (line 1129):
        
        # Call to get_distribution(...): (line 1129)
        # Processing the call keyword arguments (line 1129)
        kwargs_41457 = {}
        # Getting the type of 'self' (line 1129)
        self_41455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 15), 'self', False)
        # Obtaining the member 'get_distribution' of a type (line 1129)
        get_distribution_41456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 15), self_41455, 'get_distribution')
        # Calling get_distribution(args, kwargs) (line 1129)
        get_distribution_call_result_41458 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 15), get_distribution_41456, *[], **kwargs_41457)
        
        # Assigning a type to the variable 'dist' (line 1129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'dist', get_distribution_call_result_41458)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dist' (line 1130)
        dist_41459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 11), 'dist')
        # Getting the type of 'None' (line 1130)
        None_41460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 23), 'None')
        # Applying the binary operator 'isnot' (line 1130)
        result_is_not_41461 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 11), 'isnot', dist_41459, None_41460)
        
        
        # Getting the type of 'dist' (line 1130)
        dist_41462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 32), 'dist')
        # Obtaining the member 'data_files' of a type (line 1130)
        data_files_41463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 32), dist_41462, 'data_files')
        # Getting the type of 'None' (line 1130)
        None_41464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 55), 'None')
        # Applying the binary operator 'isnot' (line 1130)
        result_is_not_41465 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 32), 'isnot', data_files_41463, None_41464)
        
        # Applying the binary operator 'and' (line 1130)
        result_and_keyword_41466 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 11), 'and', result_is_not_41461, result_is_not_41465)
        
        # Testing the type of an if condition (line 1130)
        if_condition_41467 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1130, 8), result_and_keyword_41466)
        # Assigning a type to the variable 'if_condition_41467' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'if_condition_41467', if_condition_41467)
        # SSA begins for if statement (line 1130)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1131):
        
        # Assigning a Attribute to a Name (line 1131):
        # Getting the type of 'dist' (line 1131)
        dist_41468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 25), 'dist')
        # Obtaining the member 'data_files' of a type (line 1131)
        data_files_41469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 25), dist_41468, 'data_files')
        # Assigning a type to the variable 'data_files' (line 1131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 12), 'data_files', data_files_41469)
        # SSA branch for the else part of an if statement (line 1130)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1133):
        
        # Assigning a Attribute to a Name (line 1133):
        # Getting the type of 'self' (line 1133)
        self_41470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 25), 'self')
        # Obtaining the member 'data_files' of a type (line 1133)
        data_files_41471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 25), self_41470, 'data_files')
        # Assigning a type to the variable 'data_files' (line 1133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 12), 'data_files', data_files_41471)
        # SSA join for if statement (line 1130)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'paths' (line 1135)
        paths_41472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 20), 'paths')
        # Testing the type of a for loop iterable (line 1135)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1135, 8), paths_41472)
        # Getting the type of the for loop variable (line 1135)
        for_loop_var_41473 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1135, 8), paths_41472)
        # Assigning a type to the variable 'path' (line 1135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 8), 'path', for_loop_var_41473)
        # SSA begins for a for statement (line 1135)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to list(...): (line 1136)
        # Processing the call arguments (line 1136)
        
        # Call to general_source_directories_files(...): (line 1136)
        # Processing the call arguments (line 1136)
        # Getting the type of 'path' (line 1136)
        path_41476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 63), 'path', False)
        # Processing the call keyword arguments (line 1136)
        kwargs_41477 = {}
        # Getting the type of 'general_source_directories_files' (line 1136)
        general_source_directories_files_41475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 30), 'general_source_directories_files', False)
        # Calling general_source_directories_files(args, kwargs) (line 1136)
        general_source_directories_files_call_result_41478 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 30), general_source_directories_files_41475, *[path_41476], **kwargs_41477)
        
        # Processing the call keyword arguments (line 1136)
        kwargs_41479 = {}
        # Getting the type of 'list' (line 1136)
        list_41474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 25), 'list', False)
        # Calling list(args, kwargs) (line 1136)
        list_call_result_41480 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 25), list_41474, *[general_source_directories_files_call_result_41478], **kwargs_41479)
        
        # Testing the type of a for loop iterable (line 1136)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1136, 12), list_call_result_41480)
        # Getting the type of the for loop variable (line 1136)
        for_loop_var_41481 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1136, 12), list_call_result_41480)
        # Assigning a type to the variable 'd1' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 12), 'd1', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1136, 12), for_loop_var_41481))
        # Assigning a type to the variable 'f' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 12), 'f', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1136, 12), for_loop_var_41481))
        # SSA begins for a for statement (line 1136)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1137):
        
        # Assigning a Call to a Name (line 1137):
        
        # Call to join(...): (line 1137)
        # Processing the call arguments (line 1137)
        # Getting the type of 'self' (line 1137)
        self_41485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 43), 'self', False)
        # Obtaining the member 'path_in_package' of a type (line 1137)
        path_in_package_41486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 43), self_41485, 'path_in_package')
        # Getting the type of 'd' (line 1137)
        d_41487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 65), 'd', False)
        # Getting the type of 'd1' (line 1137)
        d1_41488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 68), 'd1', False)
        # Processing the call keyword arguments (line 1137)
        kwargs_41489 = {}
        # Getting the type of 'os' (line 1137)
        os_41482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 30), 'os', False)
        # Obtaining the member 'path' of a type (line 1137)
        path_41483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 30), os_41482, 'path')
        # Obtaining the member 'join' of a type (line 1137)
        join_41484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 30), path_41483, 'join')
        # Calling join(args, kwargs) (line 1137)
        join_call_result_41490 = invoke(stypy.reporting.localization.Localization(__file__, 1137, 30), join_41484, *[path_in_package_41486, d_41487, d1_41488], **kwargs_41489)
        
        # Assigning a type to the variable 'target_path' (line 1137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 16), 'target_path', join_call_result_41490)
        
        # Call to append(...): (line 1138)
        # Processing the call arguments (line 1138)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1138)
        tuple_41493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1138)
        # Adding element type (line 1138)
        # Getting the type of 'target_path' (line 1138)
        target_path_41494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 35), 'target_path', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1138, 35), tuple_41493, target_path_41494)
        # Adding element type (line 1138)
        # Getting the type of 'f' (line 1138)
        f_41495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 48), 'f', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1138, 35), tuple_41493, f_41495)
        
        # Processing the call keyword arguments (line 1138)
        kwargs_41496 = {}
        # Getting the type of 'data_files' (line 1138)
        data_files_41491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 16), 'data_files', False)
        # Obtaining the member 'append' of a type (line 1138)
        append_41492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 16), data_files_41491, 'append')
        # Calling append(args, kwargs) (line 1138)
        append_call_result_41497 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 16), append_41492, *[tuple_41493], **kwargs_41496)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'add_data_dir(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_data_dir' in the type store
        # Getting the type of 'stypy_return_type' (line 1021)
        stypy_return_type_41498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41498)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_data_dir'
        return stypy_return_type_41498


    @norecursion
    def _optimize_data_files(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_optimize_data_files'
        module_type_store = module_type_store.open_function_context('_optimize_data_files', 1140, 4, False)
        # Assigning a type to the variable 'self' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_localization', localization)
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_function_name', 'Configuration._optimize_data_files')
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration._optimize_data_files.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration._optimize_data_files', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_optimize_data_files', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_optimize_data_files(...)' code ##################

        
        # Assigning a Dict to a Name (line 1141):
        
        # Assigning a Dict to a Name (line 1141):
        
        # Obtaining an instance of the builtin type 'dict' (line 1141)
        dict_41499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 20), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1141)
        
        # Assigning a type to the variable 'data_dict' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 8), 'data_dict', dict_41499)
        
        # Getting the type of 'self' (line 1142)
        self_41500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 24), 'self')
        # Obtaining the member 'data_files' of a type (line 1142)
        data_files_41501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 24), self_41500, 'data_files')
        # Testing the type of a for loop iterable (line 1142)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1142, 8), data_files_41501)
        # Getting the type of the for loop variable (line 1142)
        for_loop_var_41502 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1142, 8), data_files_41501)
        # Assigning a type to the variable 'p' (line 1142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 8), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1142, 8), for_loop_var_41502))
        # Assigning a type to the variable 'files' (line 1142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 8), 'files', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1142, 8), for_loop_var_41502))
        # SSA begins for a for statement (line 1142)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'p' (line 1143)
        p_41503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 15), 'p')
        # Getting the type of 'data_dict' (line 1143)
        data_dict_41504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 24), 'data_dict')
        # Applying the binary operator 'notin' (line 1143)
        result_contains_41505 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 15), 'notin', p_41503, data_dict_41504)
        
        # Testing the type of an if condition (line 1143)
        if_condition_41506 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1143, 12), result_contains_41505)
        # Assigning a type to the variable 'if_condition_41506' (line 1143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 12), 'if_condition_41506', if_condition_41506)
        # SSA begins for if statement (line 1143)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 1144):
        
        # Assigning a Call to a Subscript (line 1144):
        
        # Call to set(...): (line 1144)
        # Processing the call keyword arguments (line 1144)
        kwargs_41508 = {}
        # Getting the type of 'set' (line 1144)
        set_41507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 31), 'set', False)
        # Calling set(args, kwargs) (line 1144)
        set_call_result_41509 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 31), set_41507, *[], **kwargs_41508)
        
        # Getting the type of 'data_dict' (line 1144)
        data_dict_41510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 16), 'data_dict')
        # Getting the type of 'p' (line 1144)
        p_41511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 26), 'p')
        # Storing an element on a container (line 1144)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 16), data_dict_41510, (p_41511, set_call_result_41509))
        # SSA join for if statement (line 1143)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'files' (line 1145)
        files_41512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 21), 'files')
        # Testing the type of a for loop iterable (line 1145)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1145, 12), files_41512)
        # Getting the type of the for loop variable (line 1145)
        for_loop_var_41513 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1145, 12), files_41512)
        # Assigning a type to the variable 'f' (line 1145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 12), 'f', for_loop_var_41513)
        # SSA begins for a for statement (line 1145)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to add(...): (line 1146)
        # Processing the call arguments (line 1146)
        # Getting the type of 'f' (line 1146)
        f_41519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 33), 'f', False)
        # Processing the call keyword arguments (line 1146)
        kwargs_41520 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'p' (line 1146)
        p_41514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 26), 'p', False)
        # Getting the type of 'data_dict' (line 1146)
        data_dict_41515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 16), 'data_dict', False)
        # Obtaining the member '__getitem__' of a type (line 1146)
        getitem___41516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 16), data_dict_41515, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1146)
        subscript_call_result_41517 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 16), getitem___41516, p_41514)
        
        # Obtaining the member 'add' of a type (line 1146)
        add_41518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 16), subscript_call_result_41517, 'add')
        # Calling add(args, kwargs) (line 1146)
        add_call_result_41521 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 16), add_41518, *[f_41519], **kwargs_41520)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a ListComp to a Subscript (line 1147):
        
        # Assigning a ListComp to a Subscript (line 1147):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to items(...): (line 1147)
        # Processing the call keyword arguments (line 1147)
        kwargs_41530 = {}
        # Getting the type of 'data_dict' (line 1147)
        data_dict_41528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 63), 'data_dict', False)
        # Obtaining the member 'items' of a type (line 1147)
        items_41529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 63), data_dict_41528, 'items')
        # Calling items(args, kwargs) (line 1147)
        items_call_result_41531 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 63), items_41529, *[], **kwargs_41530)
        
        comprehension_41532 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 30), items_call_result_41531)
        # Assigning a type to the variable 'p' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 30), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 30), comprehension_41532))
        # Assigning a type to the variable 'files' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 30), 'files', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 30), comprehension_41532))
        
        # Obtaining an instance of the builtin type 'tuple' (line 1147)
        tuple_41522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1147)
        # Adding element type (line 1147)
        # Getting the type of 'p' (line 1147)
        p_41523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 31), 'p')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 31), tuple_41522, p_41523)
        # Adding element type (line 1147)
        
        # Call to list(...): (line 1147)
        # Processing the call arguments (line 1147)
        # Getting the type of 'files' (line 1147)
        files_41525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 39), 'files', False)
        # Processing the call keyword arguments (line 1147)
        kwargs_41526 = {}
        # Getting the type of 'list' (line 1147)
        list_41524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 34), 'list', False)
        # Calling list(args, kwargs) (line 1147)
        list_call_result_41527 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 34), list_41524, *[files_41525], **kwargs_41526)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 31), tuple_41522, list_call_result_41527)
        
        list_41533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 30), list_41533, tuple_41522)
        # Getting the type of 'self' (line 1147)
        self_41534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'self')
        # Obtaining the member 'data_files' of a type (line 1147)
        data_files_41535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 8), self_41534, 'data_files')
        slice_41536 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1147, 8), None, None, None)
        # Storing an element on a container (line 1147)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 8), data_files_41535, (slice_41536, list_41533))
        
        # ################# End of '_optimize_data_files(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_optimize_data_files' in the type store
        # Getting the type of 'stypy_return_type' (line 1140)
        stypy_return_type_41537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41537)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_optimize_data_files'
        return stypy_return_type_41537


    @norecursion
    def add_data_files(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_data_files'
        module_type_store = module_type_store.open_function_context('add_data_files', 1149, 4, False)
        # Assigning a type to the variable 'self' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_data_files.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_data_files.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_data_files.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_data_files.__dict__.__setitem__('stypy_function_name', 'Configuration.add_data_files')
        Configuration.add_data_files.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.add_data_files.__dict__.__setitem__('stypy_varargs_param_name', 'files')
        Configuration.add_data_files.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.add_data_files.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_data_files.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_data_files.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_data_files.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_data_files', [], 'files', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_data_files', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_data_files(...)' code ##################

        str_41538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, (-1)), 'str', "Add data files to configuration data_files.\n\n        Parameters\n        ----------\n        files : sequence\n            Argument(s) can be either\n\n                * 2-sequence (<datadir prefix>,<path to data file(s)>)\n                * paths to data files where python datadir prefix defaults\n                  to package dir.\n\n        Notes\n        -----\n        The form of each element of the files sequence is very flexible\n        allowing many combinations of where to get the files from the package\n        and where they should ultimately be installed on the system. The most\n        basic usage is for an element of the files argument sequence to be a\n        simple filename. This will cause that file from the local path to be\n        installed to the installation path of the self.name package (package\n        path). The file argument can also be a relative path in which case the\n        entire relative path will be installed into the package directory.\n        Finally, the file can be an absolute path name in which case the file\n        will be found at the absolute path name but installed to the package\n        path.\n\n        This basic behavior can be augmented by passing a 2-tuple in as the\n        file argument. The first element of the tuple should specify the\n        relative path (under the package install directory) where the\n        remaining sequence of files should be installed to (it has nothing to\n        do with the file-names in the source distribution). The second element\n        of the tuple is the sequence of files that should be installed. The\n        files in this sequence can be filenames, relative paths, or absolute\n        paths. For absolute paths the file will be installed in the top-level\n        package installation directory (regardless of the first argument).\n        Filenames and relative path names will be installed in the package\n        install directory under the path name given as the first element of\n        the tuple.\n\n        Rules for installation paths:\n\n          #. file.txt -> (., file.txt)-> parent/file.txt\n          #. foo/file.txt -> (foo, foo/file.txt) -> parent/foo/file.txt\n          #. /foo/bar/file.txt -> (., /foo/bar/file.txt) -> parent/file.txt\n          #. *.txt -> parent/a.txt, parent/b.txt\n          #. foo/*.txt -> parent/foo/a.txt, parent/foo/b.txt\n          #. */*.txt -> (*, */*.txt) -> parent/c/a.txt, parent/d/b.txt\n          #. (sun, file.txt) -> parent/sun/file.txt\n          #. (sun, bar/file.txt) -> parent/sun/file.txt\n          #. (sun, /foo/bar/file.txt) -> parent/sun/file.txt\n          #. (sun, *.txt) -> parent/sun/a.txt, parent/sun/b.txt\n          #. (sun, bar/*.txt) -> parent/sun/a.txt, parent/sun/b.txt\n          #. (sun/*, */*.txt) -> parent/sun/c/a.txt, parent/d/b.txt\n\n        An additional feature is that the path to a data-file can actually be\n        a function that takes no arguments and returns the actual path(s) to\n        the data-files. This is useful when the data files are generated while\n        building the package.\n\n        Examples\n        --------\n        Add files to the list of data_files to be included with the package.\n\n            >>> self.add_data_files('foo.dat',\n            ...     ('fun', ['gun.dat', 'nun/pun.dat', '/tmp/sun.dat']),\n            ...     'bar/cat.dat',\n            ...     '/full/path/to/can.dat')                   #doctest: +SKIP\n\n        will install these data files to::\n\n            <package install directory>/\n             foo.dat\n             fun/\n               gun.dat\n               nun/\n                 pun.dat\n             sun.dat\n             bar/\n               car.dat\n             can.dat\n\n        where <package install directory> is the package (or sub-package)\n        directory such as '/usr/lib/python2.4/site-packages/mypackage' ('C:\n        \\Python2.4 \\Lib \\site-packages \\mypackage') or\n        '/usr/lib/python2.4/site- packages/mypackage/mysubpackage' ('C:\n        \\Python2.4 \\Lib \\site-packages \\mypackage \\mysubpackage').\n        ")
        
        
        
        # Call to len(...): (line 1237)
        # Processing the call arguments (line 1237)
        # Getting the type of 'files' (line 1237)
        files_41540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 15), 'files', False)
        # Processing the call keyword arguments (line 1237)
        kwargs_41541 = {}
        # Getting the type of 'len' (line 1237)
        len_41539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 11), 'len', False)
        # Calling len(args, kwargs) (line 1237)
        len_call_result_41542 = invoke(stypy.reporting.localization.Localization(__file__, 1237, 11), len_41539, *[files_41540], **kwargs_41541)
        
        int_41543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 22), 'int')
        # Applying the binary operator '>' (line 1237)
        result_gt_41544 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 11), '>', len_call_result_41542, int_41543)
        
        # Testing the type of an if condition (line 1237)
        if_condition_41545 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1237, 8), result_gt_41544)
        # Assigning a type to the variable 'if_condition_41545' (line 1237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1237, 8), 'if_condition_41545', if_condition_41545)
        # SSA begins for if statement (line 1237)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'files' (line 1238)
        files_41546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 21), 'files')
        # Testing the type of a for loop iterable (line 1238)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1238, 12), files_41546)
        # Getting the type of the for loop variable (line 1238)
        for_loop_var_41547 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1238, 12), files_41546)
        # Assigning a type to the variable 'f' (line 1238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 12), 'f', for_loop_var_41547)
        # SSA begins for a for statement (line 1238)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to add_data_files(...): (line 1239)
        # Processing the call arguments (line 1239)
        # Getting the type of 'f' (line 1239)
        f_41550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 36), 'f', False)
        # Processing the call keyword arguments (line 1239)
        kwargs_41551 = {}
        # Getting the type of 'self' (line 1239)
        self_41548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 16), 'self', False)
        # Obtaining the member 'add_data_files' of a type (line 1239)
        add_data_files_41549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 16), self_41548, 'add_data_files')
        # Calling add_data_files(args, kwargs) (line 1239)
        add_data_files_call_result_41552 = invoke(stypy.reporting.localization.Localization(__file__, 1239, 16), add_data_files_41549, *[f_41550], **kwargs_41551)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 1240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1237)
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        
        # Call to len(...): (line 1241)
        # Processing the call arguments (line 1241)
        # Getting the type of 'files' (line 1241)
        files_41554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 19), 'files', False)
        # Processing the call keyword arguments (line 1241)
        kwargs_41555 = {}
        # Getting the type of 'len' (line 1241)
        len_41553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 15), 'len', False)
        # Calling len(args, kwargs) (line 1241)
        len_call_result_41556 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 15), len_41553, *[files_41554], **kwargs_41555)
        
        int_41557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 27), 'int')
        # Applying the binary operator '==' (line 1241)
        result_eq_41558 = python_operator(stypy.reporting.localization.Localization(__file__, 1241, 15), '==', len_call_result_41556, int_41557)
        
        
        
        # Call to is_sequence(...): (line 1242)
        # Processing the call arguments (line 1242)
        
        # Obtaining the type of the subscript
        int_41560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1242, 29), 'int')
        # Getting the type of 'files' (line 1242)
        files_41561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 23), 'files', False)
        # Obtaining the member '__getitem__' of a type (line 1242)
        getitem___41562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 23), files_41561, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1242)
        subscript_call_result_41563 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 23), getitem___41562, int_41560)
        
        # Processing the call keyword arguments (line 1242)
        kwargs_41564 = {}
        # Getting the type of 'is_sequence' (line 1242)
        is_sequence_41559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 11), 'is_sequence', False)
        # Calling is_sequence(args, kwargs) (line 1242)
        is_sequence_call_result_41565 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 11), is_sequence_41559, *[subscript_call_result_41563], **kwargs_41564)
        
        # Testing the type of an if condition (line 1242)
        if_condition_41566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1242, 8), is_sequence_call_result_41565)
        # Assigning a type to the variable 'if_condition_41566' (line 1242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 8), 'if_condition_41566', if_condition_41566)
        # SSA begins for if statement (line 1242)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 1243):
        
        # Assigning a Subscript to a Name (line 1243):
        
        # Obtaining the type of the subscript
        int_41567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 12), 'int')
        
        # Obtaining the type of the subscript
        int_41568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 29), 'int')
        # Getting the type of 'files' (line 1243)
        files_41569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 23), 'files')
        # Obtaining the member '__getitem__' of a type (line 1243)
        getitem___41570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 23), files_41569, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1243)
        subscript_call_result_41571 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 23), getitem___41570, int_41568)
        
        # Obtaining the member '__getitem__' of a type (line 1243)
        getitem___41572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 12), subscript_call_result_41571, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1243)
        subscript_call_result_41573 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 12), getitem___41572, int_41567)
        
        # Assigning a type to the variable 'tuple_var_assignment_38389' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), 'tuple_var_assignment_38389', subscript_call_result_41573)
        
        # Assigning a Subscript to a Name (line 1243):
        
        # Obtaining the type of the subscript
        int_41574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 12), 'int')
        
        # Obtaining the type of the subscript
        int_41575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 29), 'int')
        # Getting the type of 'files' (line 1243)
        files_41576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 23), 'files')
        # Obtaining the member '__getitem__' of a type (line 1243)
        getitem___41577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 23), files_41576, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1243)
        subscript_call_result_41578 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 23), getitem___41577, int_41575)
        
        # Obtaining the member '__getitem__' of a type (line 1243)
        getitem___41579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 12), subscript_call_result_41578, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1243)
        subscript_call_result_41580 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 12), getitem___41579, int_41574)
        
        # Assigning a type to the variable 'tuple_var_assignment_38390' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), 'tuple_var_assignment_38390', subscript_call_result_41580)
        
        # Assigning a Name to a Name (line 1243):
        # Getting the type of 'tuple_var_assignment_38389' (line 1243)
        tuple_var_assignment_38389_41581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), 'tuple_var_assignment_38389')
        # Assigning a type to the variable 'd' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), 'd', tuple_var_assignment_38389_41581)
        
        # Assigning a Name to a Name (line 1243):
        # Getting the type of 'tuple_var_assignment_38390' (line 1243)
        tuple_var_assignment_38390_41582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), 'tuple_var_assignment_38390')
        # Assigning a type to the variable 'files' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 15), 'files', tuple_var_assignment_38390_41582)
        # SSA branch for the else part of an if statement (line 1242)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1245):
        
        # Assigning a Name to a Name (line 1245):
        # Getting the type of 'None' (line 1245)
        None_41583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 16), 'None')
        # Assigning a type to the variable 'd' (line 1245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 12), 'd', None_41583)
        # SSA join for if statement (line 1242)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to is_string(...): (line 1246)
        # Processing the call arguments (line 1246)
        # Getting the type of 'files' (line 1246)
        files_41585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 21), 'files', False)
        # Processing the call keyword arguments (line 1246)
        kwargs_41586 = {}
        # Getting the type of 'is_string' (line 1246)
        is_string_41584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 11), 'is_string', False)
        # Calling is_string(args, kwargs) (line 1246)
        is_string_call_result_41587 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 11), is_string_41584, *[files_41585], **kwargs_41586)
        
        # Testing the type of an if condition (line 1246)
        if_condition_41588 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1246, 8), is_string_call_result_41587)
        # Assigning a type to the variable 'if_condition_41588' (line 1246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 8), 'if_condition_41588', if_condition_41588)
        # SSA begins for if statement (line 1246)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1247):
        
        # Assigning a Name to a Name (line 1247):
        # Getting the type of 'files' (line 1247)
        files_41589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 22), 'files')
        # Assigning a type to the variable 'filepat' (line 1247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 12), 'filepat', files_41589)
        # SSA branch for the else part of an if statement (line 1246)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to is_sequence(...): (line 1248)
        # Processing the call arguments (line 1248)
        # Getting the type of 'files' (line 1248)
        files_41591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 25), 'files', False)
        # Processing the call keyword arguments (line 1248)
        kwargs_41592 = {}
        # Getting the type of 'is_sequence' (line 1248)
        is_sequence_41590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 13), 'is_sequence', False)
        # Calling is_sequence(args, kwargs) (line 1248)
        is_sequence_call_result_41593 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 13), is_sequence_41590, *[files_41591], **kwargs_41592)
        
        # Testing the type of an if condition (line 1248)
        if_condition_41594 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1248, 13), is_sequence_call_result_41593)
        # Assigning a type to the variable 'if_condition_41594' (line 1248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 13), 'if_condition_41594', if_condition_41594)
        # SSA begins for if statement (line 1248)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to len(...): (line 1249)
        # Processing the call arguments (line 1249)
        # Getting the type of 'files' (line 1249)
        files_41596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 19), 'files', False)
        # Processing the call keyword arguments (line 1249)
        kwargs_41597 = {}
        # Getting the type of 'len' (line 1249)
        len_41595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 15), 'len', False)
        # Calling len(args, kwargs) (line 1249)
        len_call_result_41598 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 15), len_41595, *[files_41596], **kwargs_41597)
        
        int_41599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 27), 'int')
        # Applying the binary operator '==' (line 1249)
        result_eq_41600 = python_operator(stypy.reporting.localization.Localization(__file__, 1249, 15), '==', len_call_result_41598, int_41599)
        
        # Testing the type of an if condition (line 1249)
        if_condition_41601 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1249, 12), result_eq_41600)
        # Assigning a type to the variable 'if_condition_41601' (line 1249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 12), 'if_condition_41601', if_condition_41601)
        # SSA begins for if statement (line 1249)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1250):
        
        # Assigning a Subscript to a Name (line 1250):
        
        # Obtaining the type of the subscript
        int_41602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1250, 32), 'int')
        # Getting the type of 'files' (line 1250)
        files_41603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 26), 'files')
        # Obtaining the member '__getitem__' of a type (line 1250)
        getitem___41604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 26), files_41603, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1250)
        subscript_call_result_41605 = invoke(stypy.reporting.localization.Localization(__file__, 1250, 26), getitem___41604, int_41602)
        
        # Assigning a type to the variable 'filepat' (line 1250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 16), 'filepat', subscript_call_result_41605)
        # SSA branch for the else part of an if statement (line 1249)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'files' (line 1252)
        files_41606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 25), 'files')
        # Testing the type of a for loop iterable (line 1252)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1252, 16), files_41606)
        # Getting the type of the for loop variable (line 1252)
        for_loop_var_41607 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1252, 16), files_41606)
        # Assigning a type to the variable 'f' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 16), 'f', for_loop_var_41607)
        # SSA begins for a for statement (line 1252)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to add_data_files(...): (line 1253)
        # Processing the call arguments (line 1253)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1253)
        tuple_41610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1253, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1253)
        # Adding element type (line 1253)
        # Getting the type of 'd' (line 1253)
        d_41611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 41), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1253, 41), tuple_41610, d_41611)
        # Adding element type (line 1253)
        # Getting the type of 'f' (line 1253)
        f_41612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 44), 'f', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1253, 41), tuple_41610, f_41612)
        
        # Processing the call keyword arguments (line 1253)
        kwargs_41613 = {}
        # Getting the type of 'self' (line 1253)
        self_41608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 20), 'self', False)
        # Obtaining the member 'add_data_files' of a type (line 1253)
        add_data_files_41609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1253, 20), self_41608, 'add_data_files')
        # Calling add_data_files(args, kwargs) (line 1253)
        add_data_files_call_result_41614 = invoke(stypy.reporting.localization.Localization(__file__, 1253, 20), add_data_files_41609, *[tuple_41610], **kwargs_41613)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 1254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1249)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1248)
        module_type_store.open_ssa_branch('else')
        
        # Call to TypeError(...): (line 1256)
        # Processing the call arguments (line 1256)
        
        # Call to repr(...): (line 1256)
        # Processing the call arguments (line 1256)
        
        # Call to type(...): (line 1256)
        # Processing the call arguments (line 1256)
        # Getting the type of 'files' (line 1256)
        files_41618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 38), 'files', False)
        # Processing the call keyword arguments (line 1256)
        kwargs_41619 = {}
        # Getting the type of 'type' (line 1256)
        type_41617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 33), 'type', False)
        # Calling type(args, kwargs) (line 1256)
        type_call_result_41620 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 33), type_41617, *[files_41618], **kwargs_41619)
        
        # Processing the call keyword arguments (line 1256)
        kwargs_41621 = {}
        # Getting the type of 'repr' (line 1256)
        repr_41616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 28), 'repr', False)
        # Calling repr(args, kwargs) (line 1256)
        repr_call_result_41622 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 28), repr_41616, *[type_call_result_41620], **kwargs_41621)
        
        # Processing the call keyword arguments (line 1256)
        kwargs_41623 = {}
        # Getting the type of 'TypeError' (line 1256)
        TypeError_41615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1256)
        TypeError_call_result_41624 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 18), TypeError_41615, *[repr_call_result_41622], **kwargs_41623)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1256, 12), TypeError_call_result_41624, 'raise parameter', BaseException)
        # SSA join for if statement (line 1248)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1246)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1258)
        # Getting the type of 'd' (line 1258)
        d_41625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 11), 'd')
        # Getting the type of 'None' (line 1258)
        None_41626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 16), 'None')
        
        (may_be_41627, more_types_in_union_41628) = may_be_none(d_41625, None_41626)

        if may_be_41627:

            if more_types_in_union_41628:
                # Runtime conditional SSA (line 1258)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 1259)
            str_41629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1259, 32), 'str', '__call__')
            # Getting the type of 'filepat' (line 1259)
            filepat_41630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 23), 'filepat')
            
            (may_be_41631, more_types_in_union_41632) = may_provide_member(str_41629, filepat_41630)

            if may_be_41631:

                if more_types_in_union_41632:
                    # Runtime conditional SSA (line 1259)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'filepat' (line 1259)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 12), 'filepat', remove_not_member_provider_from_union(filepat_41630, '__call__'))
                
                # Assigning a Str to a Name (line 1260):
                
                # Assigning a Str to a Name (line 1260):
                str_41633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 20), 'str', '')
                # Assigning a type to the variable 'd' (line 1260)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 16), 'd', str_41633)

                if more_types_in_union_41632:
                    # Runtime conditional SSA for else branch (line 1259)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_41631) or more_types_in_union_41632):
                # Assigning a type to the variable 'filepat' (line 1259)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 12), 'filepat', remove_member_provider_from_union(filepat_41630, '__call__'))
                
                
                # Call to isabs(...): (line 1261)
                # Processing the call arguments (line 1261)
                # Getting the type of 'filepat' (line 1261)
                filepat_41637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 31), 'filepat', False)
                # Processing the call keyword arguments (line 1261)
                kwargs_41638 = {}
                # Getting the type of 'os' (line 1261)
                os_41634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 17), 'os', False)
                # Obtaining the member 'path' of a type (line 1261)
                path_41635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 17), os_41634, 'path')
                # Obtaining the member 'isabs' of a type (line 1261)
                isabs_41636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 17), path_41635, 'isabs')
                # Calling isabs(args, kwargs) (line 1261)
                isabs_call_result_41639 = invoke(stypy.reporting.localization.Localization(__file__, 1261, 17), isabs_41636, *[filepat_41637], **kwargs_41638)
                
                # Testing the type of an if condition (line 1261)
                if_condition_41640 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1261, 17), isabs_call_result_41639)
                # Assigning a type to the variable 'if_condition_41640' (line 1261)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 17), 'if_condition_41640', if_condition_41640)
                # SSA begins for if statement (line 1261)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Str to a Name (line 1262):
                
                # Assigning a Str to a Name (line 1262):
                str_41641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 20), 'str', '')
                # Assigning a type to the variable 'd' (line 1262)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 16), 'd', str_41641)
                # SSA branch for the else part of an if statement (line 1261)
                module_type_store.open_ssa_branch('else')
                
                # Assigning a Call to a Name (line 1264):
                
                # Assigning a Call to a Name (line 1264):
                
                # Call to dirname(...): (line 1264)
                # Processing the call arguments (line 1264)
                # Getting the type of 'filepat' (line 1264)
                filepat_41645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 36), 'filepat', False)
                # Processing the call keyword arguments (line 1264)
                kwargs_41646 = {}
                # Getting the type of 'os' (line 1264)
                os_41642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 20), 'os', False)
                # Obtaining the member 'path' of a type (line 1264)
                path_41643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 20), os_41642, 'path')
                # Obtaining the member 'dirname' of a type (line 1264)
                dirname_41644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 20), path_41643, 'dirname')
                # Calling dirname(args, kwargs) (line 1264)
                dirname_call_result_41647 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 20), dirname_41644, *[filepat_41645], **kwargs_41646)
                
                # Assigning a type to the variable 'd' (line 1264)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 16), 'd', dirname_call_result_41647)
                # SSA join for if statement (line 1261)
                module_type_store = module_type_store.join_ssa_context()
                

                if (may_be_41631 and more_types_in_union_41632):
                    # SSA join for if statement (line 1259)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Call to add_data_files(...): (line 1265)
            # Processing the call arguments (line 1265)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1265)
            tuple_41650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, 33), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1265)
            # Adding element type (line 1265)
            # Getting the type of 'd' (line 1265)
            d_41651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 33), 'd', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1265, 33), tuple_41650, d_41651)
            # Adding element type (line 1265)
            # Getting the type of 'files' (line 1265)
            files_41652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 36), 'files', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1265, 33), tuple_41650, files_41652)
            
            # Processing the call keyword arguments (line 1265)
            kwargs_41653 = {}
            # Getting the type of 'self' (line 1265)
            self_41648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 12), 'self', False)
            # Obtaining the member 'add_data_files' of a type (line 1265)
            add_data_files_41649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 12), self_41648, 'add_data_files')
            # Calling add_data_files(args, kwargs) (line 1265)
            add_data_files_call_result_41654 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 12), add_data_files_41649, *[tuple_41650], **kwargs_41653)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1266)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_41628:
                # SSA join for if statement (line 1258)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1268):
        
        # Assigning a Call to a Name (line 1268):
        
        # Call to paths(...): (line 1268)
        # Processing the call arguments (line 1268)
        # Getting the type of 'filepat' (line 1268)
        filepat_41657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 27), 'filepat', False)
        # Processing the call keyword arguments (line 1268)
        # Getting the type of 'False' (line 1268)
        False_41658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 57), 'False', False)
        keyword_41659 = False_41658
        kwargs_41660 = {'include_non_existing': keyword_41659}
        # Getting the type of 'self' (line 1268)
        self_41655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 16), 'self', False)
        # Obtaining the member 'paths' of a type (line 1268)
        paths_41656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1268, 16), self_41655, 'paths')
        # Calling paths(args, kwargs) (line 1268)
        paths_call_result_41661 = invoke(stypy.reporting.localization.Localization(__file__, 1268, 16), paths_41656, *[filepat_41657], **kwargs_41660)
        
        # Assigning a type to the variable 'paths' (line 1268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1268, 8), 'paths', paths_call_result_41661)
        
        
        # Call to is_glob_pattern(...): (line 1269)
        # Processing the call arguments (line 1269)
        # Getting the type of 'filepat' (line 1269)
        filepat_41663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 27), 'filepat', False)
        # Processing the call keyword arguments (line 1269)
        kwargs_41664 = {}
        # Getting the type of 'is_glob_pattern' (line 1269)
        is_glob_pattern_41662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 11), 'is_glob_pattern', False)
        # Calling is_glob_pattern(args, kwargs) (line 1269)
        is_glob_pattern_call_result_41665 = invoke(stypy.reporting.localization.Localization(__file__, 1269, 11), is_glob_pattern_41662, *[filepat_41663], **kwargs_41664)
        
        # Testing the type of an if condition (line 1269)
        if_condition_41666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1269, 8), is_glob_pattern_call_result_41665)
        # Assigning a type to the variable 'if_condition_41666' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 8), 'if_condition_41666', if_condition_41666)
        # SSA begins for if statement (line 1269)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to is_glob_pattern(...): (line 1270)
        # Processing the call arguments (line 1270)
        # Getting the type of 'd' (line 1270)
        d_41668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 31), 'd', False)
        # Processing the call keyword arguments (line 1270)
        kwargs_41669 = {}
        # Getting the type of 'is_glob_pattern' (line 1270)
        is_glob_pattern_41667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 15), 'is_glob_pattern', False)
        # Calling is_glob_pattern(args, kwargs) (line 1270)
        is_glob_pattern_call_result_41670 = invoke(stypy.reporting.localization.Localization(__file__, 1270, 15), is_glob_pattern_41667, *[d_41668], **kwargs_41669)
        
        # Testing the type of an if condition (line 1270)
        if_condition_41671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1270, 12), is_glob_pattern_call_result_41670)
        # Assigning a type to the variable 'if_condition_41671' (line 1270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 12), 'if_condition_41671', if_condition_41671)
        # SSA begins for if statement (line 1270)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1271):
        
        # Assigning a Call to a Name (line 1271):
        
        # Call to split(...): (line 1271)
        # Processing the call arguments (line 1271)
        # Getting the type of 'os' (line 1271)
        os_41674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 39), 'os', False)
        # Obtaining the member 'sep' of a type (line 1271)
        sep_41675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 39), os_41674, 'sep')
        # Processing the call keyword arguments (line 1271)
        kwargs_41676 = {}
        # Getting the type of 'd' (line 1271)
        d_41672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 31), 'd', False)
        # Obtaining the member 'split' of a type (line 1271)
        split_41673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 31), d_41672, 'split')
        # Calling split(args, kwargs) (line 1271)
        split_call_result_41677 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 31), split_41673, *[sep_41675], **kwargs_41676)
        
        # Assigning a type to the variable 'pattern_list' (line 1271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 16), 'pattern_list', split_call_result_41677)
        
        # Call to reverse(...): (line 1272)
        # Processing the call keyword arguments (line 1272)
        kwargs_41680 = {}
        # Getting the type of 'pattern_list' (line 1272)
        pattern_list_41678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 16), 'pattern_list', False)
        # Obtaining the member 'reverse' of a type (line 1272)
        reverse_41679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 16), pattern_list_41678, 'reverse')
        # Calling reverse(args, kwargs) (line 1272)
        reverse_call_result_41681 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 16), reverse_41679, *[], **kwargs_41680)
        
        
        # Getting the type of 'paths' (line 1273)
        paths_41682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 28), 'paths')
        # Testing the type of a for loop iterable (line 1273)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1273, 16), paths_41682)
        # Getting the type of the for loop variable (line 1273)
        for_loop_var_41683 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1273, 16), paths_41682)
        # Assigning a type to the variable 'path' (line 1273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 16), 'path', for_loop_var_41683)
        # SSA begins for a for statement (line 1273)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1274):
        
        # Assigning a Call to a Name (line 1274):
        
        # Call to split(...): (line 1274)
        # Processing the call arguments (line 1274)
        # Getting the type of 'os' (line 1274)
        os_41686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 43), 'os', False)
        # Obtaining the member 'sep' of a type (line 1274)
        sep_41687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1274, 43), os_41686, 'sep')
        # Processing the call keyword arguments (line 1274)
        kwargs_41688 = {}
        # Getting the type of 'path' (line 1274)
        path_41684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 32), 'path', False)
        # Obtaining the member 'split' of a type (line 1274)
        split_41685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1274, 32), path_41684, 'split')
        # Calling split(args, kwargs) (line 1274)
        split_call_result_41689 = invoke(stypy.reporting.localization.Localization(__file__, 1274, 32), split_41685, *[sep_41687], **kwargs_41688)
        
        # Assigning a type to the variable 'path_list' (line 1274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1274, 20), 'path_list', split_call_result_41689)
        
        # Call to reverse(...): (line 1275)
        # Processing the call keyword arguments (line 1275)
        kwargs_41692 = {}
        # Getting the type of 'path_list' (line 1275)
        path_list_41690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 20), 'path_list', False)
        # Obtaining the member 'reverse' of a type (line 1275)
        reverse_41691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1275, 20), path_list_41690, 'reverse')
        # Calling reverse(args, kwargs) (line 1275)
        reverse_call_result_41693 = invoke(stypy.reporting.localization.Localization(__file__, 1275, 20), reverse_41691, *[], **kwargs_41692)
        
        
        # Call to pop(...): (line 1276)
        # Processing the call keyword arguments (line 1276)
        kwargs_41696 = {}
        # Getting the type of 'path_list' (line 1276)
        path_list_41694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 20), 'path_list', False)
        # Obtaining the member 'pop' of a type (line 1276)
        pop_41695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 20), path_list_41694, 'pop')
        # Calling pop(args, kwargs) (line 1276)
        pop_call_result_41697 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 20), pop_41695, *[], **kwargs_41696)
        
        
        # Assigning a List to a Name (line 1277):
        
        # Assigning a List to a Name (line 1277):
        
        # Obtaining an instance of the builtin type 'list' (line 1277)
        list_41698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1277)
        
        # Assigning a type to the variable 'target_list' (line 1277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 20), 'target_list', list_41698)
        
        # Assigning a Num to a Name (line 1278):
        
        # Assigning a Num to a Name (line 1278):
        int_41699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 24), 'int')
        # Assigning a type to the variable 'i' (line 1278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 20), 'i', int_41699)
        
        # Getting the type of 'pattern_list' (line 1279)
        pattern_list_41700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 29), 'pattern_list')
        # Testing the type of a for loop iterable (line 1279)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1279, 20), pattern_list_41700)
        # Getting the type of the for loop variable (line 1279)
        for_loop_var_41701 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1279, 20), pattern_list_41700)
        # Assigning a type to the variable 's' (line 1279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 20), 's', for_loop_var_41701)
        # SSA begins for a for statement (line 1279)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to is_glob_pattern(...): (line 1280)
        # Processing the call arguments (line 1280)
        # Getting the type of 's' (line 1280)
        s_41703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 43), 's', False)
        # Processing the call keyword arguments (line 1280)
        kwargs_41704 = {}
        # Getting the type of 'is_glob_pattern' (line 1280)
        is_glob_pattern_41702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 27), 'is_glob_pattern', False)
        # Calling is_glob_pattern(args, kwargs) (line 1280)
        is_glob_pattern_call_result_41705 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 27), is_glob_pattern_41702, *[s_41703], **kwargs_41704)
        
        # Testing the type of an if condition (line 1280)
        if_condition_41706 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1280, 24), is_glob_pattern_call_result_41705)
        # Assigning a type to the variable 'if_condition_41706' (line 1280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 24), 'if_condition_41706', if_condition_41706)
        # SSA begins for if statement (line 1280)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1281)
        # Processing the call arguments (line 1281)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1281)
        i_41709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 57), 'i', False)
        # Getting the type of 'path_list' (line 1281)
        path_list_41710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 47), 'path_list', False)
        # Obtaining the member '__getitem__' of a type (line 1281)
        getitem___41711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1281, 47), path_list_41710, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1281)
        subscript_call_result_41712 = invoke(stypy.reporting.localization.Localization(__file__, 1281, 47), getitem___41711, i_41709)
        
        # Processing the call keyword arguments (line 1281)
        kwargs_41713 = {}
        # Getting the type of 'target_list' (line 1281)
        target_list_41707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 28), 'target_list', False)
        # Obtaining the member 'append' of a type (line 1281)
        append_41708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1281, 28), target_list_41707, 'append')
        # Calling append(args, kwargs) (line 1281)
        append_call_result_41714 = invoke(stypy.reporting.localization.Localization(__file__, 1281, 28), append_41708, *[subscript_call_result_41712], **kwargs_41713)
        
        
        # Getting the type of 'i' (line 1282)
        i_41715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 28), 'i')
        int_41716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, 33), 'int')
        # Applying the binary operator '+=' (line 1282)
        result_iadd_41717 = python_operator(stypy.reporting.localization.Localization(__file__, 1282, 28), '+=', i_41715, int_41716)
        # Assigning a type to the variable 'i' (line 1282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1282, 28), 'i', result_iadd_41717)
        
        # SSA branch for the else part of an if statement (line 1280)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 1284)
        # Processing the call arguments (line 1284)
        # Getting the type of 's' (line 1284)
        s_41720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 47), 's', False)
        # Processing the call keyword arguments (line 1284)
        kwargs_41721 = {}
        # Getting the type of 'target_list' (line 1284)
        target_list_41718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 28), 'target_list', False)
        # Obtaining the member 'append' of a type (line 1284)
        append_41719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 28), target_list_41718, 'append')
        # Calling append(args, kwargs) (line 1284)
        append_call_result_41722 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 28), append_41719, *[s_41720], **kwargs_41721)
        
        # SSA join for if statement (line 1280)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to reverse(...): (line 1285)
        # Processing the call keyword arguments (line 1285)
        kwargs_41725 = {}
        # Getting the type of 'target_list' (line 1285)
        target_list_41723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 20), 'target_list', False)
        # Obtaining the member 'reverse' of a type (line 1285)
        reverse_41724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 20), target_list_41723, 'reverse')
        # Calling reverse(args, kwargs) (line 1285)
        reverse_call_result_41726 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 20), reverse_41724, *[], **kwargs_41725)
        
        
        # Call to add_data_files(...): (line 1286)
        # Processing the call arguments (line 1286)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1286)
        tuple_41729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1286, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1286)
        # Adding element type (line 1286)
        
        # Call to join(...): (line 1286)
        # Processing the call arguments (line 1286)
        # Getting the type of 'target_list' (line 1286)
        target_list_41733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 53), 'target_list', False)
        # Processing the call keyword arguments (line 1286)
        kwargs_41734 = {}
        # Getting the type of 'os' (line 1286)
        os_41730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 41), 'os', False)
        # Obtaining the member 'sep' of a type (line 1286)
        sep_41731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 41), os_41730, 'sep')
        # Obtaining the member 'join' of a type (line 1286)
        join_41732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 41), sep_41731, 'join')
        # Calling join(args, kwargs) (line 1286)
        join_call_result_41735 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 41), join_41732, *[target_list_41733], **kwargs_41734)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1286, 41), tuple_41729, join_call_result_41735)
        # Adding element type (line 1286)
        # Getting the type of 'path' (line 1286)
        path_41736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 67), 'path', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1286, 41), tuple_41729, path_41736)
        
        # Processing the call keyword arguments (line 1286)
        kwargs_41737 = {}
        # Getting the type of 'self' (line 1286)
        self_41727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 20), 'self', False)
        # Obtaining the member 'add_data_files' of a type (line 1286)
        add_data_files_41728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 20), self_41727, 'add_data_files')
        # Calling add_data_files(args, kwargs) (line 1286)
        add_data_files_call_result_41738 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 20), add_data_files_41728, *[tuple_41729], **kwargs_41737)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1270)
        module_type_store.open_ssa_branch('else')
        
        # Call to add_data_files(...): (line 1288)
        # Processing the call arguments (line 1288)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1288)
        tuple_41741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1288)
        # Adding element type (line 1288)
        # Getting the type of 'd' (line 1288)
        d_41742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 37), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1288, 37), tuple_41741, d_41742)
        # Adding element type (line 1288)
        # Getting the type of 'paths' (line 1288)
        paths_41743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 40), 'paths', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1288, 37), tuple_41741, paths_41743)
        
        # Processing the call keyword arguments (line 1288)
        kwargs_41744 = {}
        # Getting the type of 'self' (line 1288)
        self_41739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 16), 'self', False)
        # Obtaining the member 'add_data_files' of a type (line 1288)
        add_data_files_41740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 16), self_41739, 'add_data_files')
        # Calling add_data_files(args, kwargs) (line 1288)
        add_data_files_call_result_41745 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 16), add_data_files_41740, *[tuple_41741], **kwargs_41744)
        
        # SSA join for if statement (line 1270)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1269)
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        
        # Call to is_glob_pattern(...): (line 1290)
        # Processing the call arguments (line 1290)
        # Getting the type of 'd' (line 1290)
        d_41747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 35), 'd', False)
        # Processing the call keyword arguments (line 1290)
        kwargs_41748 = {}
        # Getting the type of 'is_glob_pattern' (line 1290)
        is_glob_pattern_41746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 19), 'is_glob_pattern', False)
        # Calling is_glob_pattern(args, kwargs) (line 1290)
        is_glob_pattern_call_result_41749 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 19), is_glob_pattern_41746, *[d_41747], **kwargs_41748)
        
        # Applying the 'not' unary operator (line 1290)
        result_not__41750 = python_operator(stypy.reporting.localization.Localization(__file__, 1290, 15), 'not', is_glob_pattern_call_result_41749)
        
        
        # Assigning a Call to a Name (line 1292):
        
        # Assigning a Call to a Name (line 1292):
        
        # Call to get_distribution(...): (line 1292)
        # Processing the call keyword arguments (line 1292)
        kwargs_41753 = {}
        # Getting the type of 'self' (line 1292)
        self_41751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 15), 'self', False)
        # Obtaining the member 'get_distribution' of a type (line 1292)
        get_distribution_41752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 15), self_41751, 'get_distribution')
        # Calling get_distribution(args, kwargs) (line 1292)
        get_distribution_call_result_41754 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 15), get_distribution_41752, *[], **kwargs_41753)
        
        # Assigning a type to the variable 'dist' (line 1292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 8), 'dist', get_distribution_call_result_41754)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dist' (line 1293)
        dist_41755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 11), 'dist')
        # Getting the type of 'None' (line 1293)
        None_41756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 23), 'None')
        # Applying the binary operator 'isnot' (line 1293)
        result_is_not_41757 = python_operator(stypy.reporting.localization.Localization(__file__, 1293, 11), 'isnot', dist_41755, None_41756)
        
        
        # Getting the type of 'dist' (line 1293)
        dist_41758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 32), 'dist')
        # Obtaining the member 'data_files' of a type (line 1293)
        data_files_41759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 32), dist_41758, 'data_files')
        # Getting the type of 'None' (line 1293)
        None_41760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 55), 'None')
        # Applying the binary operator 'isnot' (line 1293)
        result_is_not_41761 = python_operator(stypy.reporting.localization.Localization(__file__, 1293, 32), 'isnot', data_files_41759, None_41760)
        
        # Applying the binary operator 'and' (line 1293)
        result_and_keyword_41762 = python_operator(stypy.reporting.localization.Localization(__file__, 1293, 11), 'and', result_is_not_41757, result_is_not_41761)
        
        # Testing the type of an if condition (line 1293)
        if_condition_41763 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1293, 8), result_and_keyword_41762)
        # Assigning a type to the variable 'if_condition_41763' (line 1293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'if_condition_41763', if_condition_41763)
        # SSA begins for if statement (line 1293)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1294):
        
        # Assigning a Attribute to a Name (line 1294):
        # Getting the type of 'dist' (line 1294)
        dist_41764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 25), 'dist')
        # Obtaining the member 'data_files' of a type (line 1294)
        data_files_41765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 25), dist_41764, 'data_files')
        # Assigning a type to the variable 'data_files' (line 1294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 12), 'data_files', data_files_41765)
        # SSA branch for the else part of an if statement (line 1293)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1296):
        
        # Assigning a Attribute to a Name (line 1296):
        # Getting the type of 'self' (line 1296)
        self_41766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 25), 'self')
        # Obtaining the member 'data_files' of a type (line 1296)
        data_files_41767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 25), self_41766, 'data_files')
        # Assigning a type to the variable 'data_files' (line 1296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 12), 'data_files', data_files_41767)
        # SSA join for if statement (line 1293)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1298)
        # Processing the call arguments (line 1298)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1298)
        tuple_41770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1298)
        # Adding element type (line 1298)
        
        # Call to join(...): (line 1298)
        # Processing the call arguments (line 1298)
        # Getting the type of 'self' (line 1298)
        self_41774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 40), 'self', False)
        # Obtaining the member 'path_in_package' of a type (line 1298)
        path_in_package_41775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 40), self_41774, 'path_in_package')
        # Getting the type of 'd' (line 1298)
        d_41776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 62), 'd', False)
        # Processing the call keyword arguments (line 1298)
        kwargs_41777 = {}
        # Getting the type of 'os' (line 1298)
        os_41771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 27), 'os', False)
        # Obtaining the member 'path' of a type (line 1298)
        path_41772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 27), os_41771, 'path')
        # Obtaining the member 'join' of a type (line 1298)
        join_41773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 27), path_41772, 'join')
        # Calling join(args, kwargs) (line 1298)
        join_call_result_41778 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 27), join_41773, *[path_in_package_41775, d_41776], **kwargs_41777)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1298, 27), tuple_41770, join_call_result_41778)
        # Adding element type (line 1298)
        # Getting the type of 'paths' (line 1298)
        paths_41779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 66), 'paths', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1298, 27), tuple_41770, paths_41779)
        
        # Processing the call keyword arguments (line 1298)
        kwargs_41780 = {}
        # Getting the type of 'data_files' (line 1298)
        data_files_41768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'data_files', False)
        # Obtaining the member 'append' of a type (line 1298)
        append_41769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 8), data_files_41768, 'append')
        # Calling append(args, kwargs) (line 1298)
        append_call_result_41781 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 8), append_41769, *[tuple_41770], **kwargs_41780)
        
        
        # ################# End of 'add_data_files(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_data_files' in the type store
        # Getting the type of 'stypy_return_type' (line 1149)
        stypy_return_type_41782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41782)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_data_files'
        return stypy_return_type_41782


    @norecursion
    def add_define_macros(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_define_macros'
        module_type_store = module_type_store.open_function_context('add_define_macros', 1302, 4, False)
        # Assigning a type to the variable 'self' (line 1303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_define_macros.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_define_macros.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_define_macros.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_define_macros.__dict__.__setitem__('stypy_function_name', 'Configuration.add_define_macros')
        Configuration.add_define_macros.__dict__.__setitem__('stypy_param_names_list', ['macros'])
        Configuration.add_define_macros.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.add_define_macros.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.add_define_macros.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_define_macros.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_define_macros.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_define_macros.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_define_macros', ['macros'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_define_macros', localization, ['macros'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_define_macros(...)' code ##################

        str_41783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, (-1)), 'str', 'Add define macros to configuration\n\n        Add the given sequence of macro name and value duples to the beginning\n        of the define_macros list This list will be visible to all extension\n        modules of the current package.\n        ')
        
        # Assigning a Call to a Name (line 1309):
        
        # Assigning a Call to a Name (line 1309):
        
        # Call to get_distribution(...): (line 1309)
        # Processing the call keyword arguments (line 1309)
        kwargs_41786 = {}
        # Getting the type of 'self' (line 1309)
        self_41784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 15), 'self', False)
        # Obtaining the member 'get_distribution' of a type (line 1309)
        get_distribution_41785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 15), self_41784, 'get_distribution')
        # Calling get_distribution(args, kwargs) (line 1309)
        get_distribution_call_result_41787 = invoke(stypy.reporting.localization.Localization(__file__, 1309, 15), get_distribution_41785, *[], **kwargs_41786)
        
        # Assigning a type to the variable 'dist' (line 1309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 8), 'dist', get_distribution_call_result_41787)
        
        # Type idiom detected: calculating its left and rigth part (line 1310)
        # Getting the type of 'dist' (line 1310)
        dist_41788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 8), 'dist')
        # Getting the type of 'None' (line 1310)
        None_41789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 23), 'None')
        
        (may_be_41790, more_types_in_union_41791) = may_not_be_none(dist_41788, None_41789)

        if may_be_41790:

            if more_types_in_union_41791:
                # Runtime conditional SSA (line 1310)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 1311)
            str_41792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 33), 'str', 'define_macros')
            # Getting the type of 'dist' (line 1311)
            dist_41793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 27), 'dist')
            
            (may_be_41794, more_types_in_union_41795) = may_not_provide_member(str_41792, dist_41793)

            if may_be_41794:

                if more_types_in_union_41795:
                    # Runtime conditional SSA (line 1311)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'dist' (line 1311)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'dist', remove_member_provider_from_union(dist_41793, 'define_macros'))
                
                # Assigning a List to a Attribute (line 1312):
                
                # Assigning a List to a Attribute (line 1312):
                
                # Obtaining an instance of the builtin type 'list' (line 1312)
                list_41796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 37), 'list')
                # Adding type elements to the builtin type 'list' instance (line 1312)
                
                # Getting the type of 'dist' (line 1312)
                dist_41797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 16), 'dist')
                # Setting the type of the member 'define_macros' of a type (line 1312)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 16), dist_41797, 'define_macros', list_41796)

                if more_types_in_union_41795:
                    # SSA join for if statement (line 1311)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Call to extend(...): (line 1313)
            # Processing the call arguments (line 1313)
            # Getting the type of 'macros' (line 1313)
            macros_41801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 38), 'macros', False)
            # Processing the call keyword arguments (line 1313)
            kwargs_41802 = {}
            # Getting the type of 'dist' (line 1313)
            dist_41798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 12), 'dist', False)
            # Obtaining the member 'define_macros' of a type (line 1313)
            define_macros_41799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 12), dist_41798, 'define_macros')
            # Obtaining the member 'extend' of a type (line 1313)
            extend_41800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 12), define_macros_41799, 'extend')
            # Calling extend(args, kwargs) (line 1313)
            extend_call_result_41803 = invoke(stypy.reporting.localization.Localization(__file__, 1313, 12), extend_41800, *[macros_41801], **kwargs_41802)
            

            if more_types_in_union_41791:
                # Runtime conditional SSA for else branch (line 1310)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_41790) or more_types_in_union_41791):
            
            # Call to extend(...): (line 1315)
            # Processing the call arguments (line 1315)
            # Getting the type of 'macros' (line 1315)
            macros_41807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 38), 'macros', False)
            # Processing the call keyword arguments (line 1315)
            kwargs_41808 = {}
            # Getting the type of 'self' (line 1315)
            self_41804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 12), 'self', False)
            # Obtaining the member 'define_macros' of a type (line 1315)
            define_macros_41805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1315, 12), self_41804, 'define_macros')
            # Obtaining the member 'extend' of a type (line 1315)
            extend_41806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1315, 12), define_macros_41805, 'extend')
            # Calling extend(args, kwargs) (line 1315)
            extend_call_result_41809 = invoke(stypy.reporting.localization.Localization(__file__, 1315, 12), extend_41806, *[macros_41807], **kwargs_41808)
            

            if (may_be_41790 and more_types_in_union_41791):
                # SSA join for if statement (line 1310)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'add_define_macros(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_define_macros' in the type store
        # Getting the type of 'stypy_return_type' (line 1302)
        stypy_return_type_41810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41810)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_define_macros'
        return stypy_return_type_41810


    @norecursion
    def add_include_dirs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_include_dirs'
        module_type_store = module_type_store.open_function_context('add_include_dirs', 1318, 4, False)
        # Assigning a type to the variable 'self' (line 1319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_function_name', 'Configuration.add_include_dirs')
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_varargs_param_name', 'paths')
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_include_dirs.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_include_dirs', [], 'paths', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_include_dirs', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_include_dirs(...)' code ##################

        str_41811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, (-1)), 'str', 'Add paths to configuration include directories.\n\n        Add the given sequence of paths to the beginning of the include_dirs\n        list. This list will be visible to all extension modules of the\n        current package.\n        ')
        
        # Assigning a Call to a Name (line 1325):
        
        # Assigning a Call to a Name (line 1325):
        
        # Call to paths(...): (line 1325)
        # Processing the call arguments (line 1325)
        # Getting the type of 'paths' (line 1325)
        paths_41814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 34), 'paths', False)
        # Processing the call keyword arguments (line 1325)
        kwargs_41815 = {}
        # Getting the type of 'self' (line 1325)
        self_41812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 23), 'self', False)
        # Obtaining the member 'paths' of a type (line 1325)
        paths_41813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 23), self_41812, 'paths')
        # Calling paths(args, kwargs) (line 1325)
        paths_call_result_41816 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 23), paths_41813, *[paths_41814], **kwargs_41815)
        
        # Assigning a type to the variable 'include_dirs' (line 1325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1325, 8), 'include_dirs', paths_call_result_41816)
        
        # Assigning a Call to a Name (line 1326):
        
        # Assigning a Call to a Name (line 1326):
        
        # Call to get_distribution(...): (line 1326)
        # Processing the call keyword arguments (line 1326)
        kwargs_41819 = {}
        # Getting the type of 'self' (line 1326)
        self_41817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 15), 'self', False)
        # Obtaining the member 'get_distribution' of a type (line 1326)
        get_distribution_41818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 15), self_41817, 'get_distribution')
        # Calling get_distribution(args, kwargs) (line 1326)
        get_distribution_call_result_41820 = invoke(stypy.reporting.localization.Localization(__file__, 1326, 15), get_distribution_41818, *[], **kwargs_41819)
        
        # Assigning a type to the variable 'dist' (line 1326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 8), 'dist', get_distribution_call_result_41820)
        
        # Type idiom detected: calculating its left and rigth part (line 1327)
        # Getting the type of 'dist' (line 1327)
        dist_41821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'dist')
        # Getting the type of 'None' (line 1327)
        None_41822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 23), 'None')
        
        (may_be_41823, more_types_in_union_41824) = may_not_be_none(dist_41821, None_41822)

        if may_be_41823:

            if more_types_in_union_41824:
                # Runtime conditional SSA (line 1327)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 1328)
            # Getting the type of 'dist' (line 1328)
            dist_41825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 15), 'dist')
            # Obtaining the member 'include_dirs' of a type (line 1328)
            include_dirs_41826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1328, 15), dist_41825, 'include_dirs')
            # Getting the type of 'None' (line 1328)
            None_41827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 36), 'None')
            
            (may_be_41828, more_types_in_union_41829) = may_be_none(include_dirs_41826, None_41827)

            if may_be_41828:

                if more_types_in_union_41829:
                    # Runtime conditional SSA (line 1328)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a List to a Attribute (line 1329):
                
                # Assigning a List to a Attribute (line 1329):
                
                # Obtaining an instance of the builtin type 'list' (line 1329)
                list_41830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 36), 'list')
                # Adding type elements to the builtin type 'list' instance (line 1329)
                
                # Getting the type of 'dist' (line 1329)
                dist_41831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 16), 'dist')
                # Setting the type of the member 'include_dirs' of a type (line 1329)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1329, 16), dist_41831, 'include_dirs', list_41830)

                if more_types_in_union_41829:
                    # SSA join for if statement (line 1328)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Call to extend(...): (line 1330)
            # Processing the call arguments (line 1330)
            # Getting the type of 'include_dirs' (line 1330)
            include_dirs_41835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 37), 'include_dirs', False)
            # Processing the call keyword arguments (line 1330)
            kwargs_41836 = {}
            # Getting the type of 'dist' (line 1330)
            dist_41832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 12), 'dist', False)
            # Obtaining the member 'include_dirs' of a type (line 1330)
            include_dirs_41833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 12), dist_41832, 'include_dirs')
            # Obtaining the member 'extend' of a type (line 1330)
            extend_41834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 12), include_dirs_41833, 'extend')
            # Calling extend(args, kwargs) (line 1330)
            extend_call_result_41837 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 12), extend_41834, *[include_dirs_41835], **kwargs_41836)
            

            if more_types_in_union_41824:
                # Runtime conditional SSA for else branch (line 1327)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_41823) or more_types_in_union_41824):
            
            # Call to extend(...): (line 1332)
            # Processing the call arguments (line 1332)
            # Getting the type of 'include_dirs' (line 1332)
            include_dirs_41841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 37), 'include_dirs', False)
            # Processing the call keyword arguments (line 1332)
            kwargs_41842 = {}
            # Getting the type of 'self' (line 1332)
            self_41838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 12), 'self', False)
            # Obtaining the member 'include_dirs' of a type (line 1332)
            include_dirs_41839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 12), self_41838, 'include_dirs')
            # Obtaining the member 'extend' of a type (line 1332)
            extend_41840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 12), include_dirs_41839, 'extend')
            # Calling extend(args, kwargs) (line 1332)
            extend_call_result_41843 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 12), extend_41840, *[include_dirs_41841], **kwargs_41842)
            

            if (may_be_41823 and more_types_in_union_41824):
                # SSA join for if statement (line 1327)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'add_include_dirs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_include_dirs' in the type store
        # Getting the type of 'stypy_return_type' (line 1318)
        stypy_return_type_41844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41844)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_include_dirs'
        return stypy_return_type_41844


    @norecursion
    def add_headers(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_headers'
        module_type_store = module_type_store.open_function_context('add_headers', 1334, 4, False)
        # Assigning a type to the variable 'self' (line 1335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_headers.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_headers.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_headers.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_headers.__dict__.__setitem__('stypy_function_name', 'Configuration.add_headers')
        Configuration.add_headers.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.add_headers.__dict__.__setitem__('stypy_varargs_param_name', 'files')
        Configuration.add_headers.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.add_headers.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_headers.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_headers.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_headers.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_headers', [], 'files', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_headers', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_headers(...)' code ##################

        str_41845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, (-1)), 'str', "Add installable headers to configuration.\n\n        Add the given sequence of files to the beginning of the headers list.\n        By default, headers will be installed under <python-\n        include>/<self.name.replace('.','/')>/ directory. If an item of files\n        is a tuple, then its first argument specifies the actual installation\n        location relative to the <python-include> path.\n\n        Parameters\n        ----------\n        files : str or seq\n            Argument(s) can be either:\n\n                * 2-sequence (<includedir suffix>,<path to header file(s)>)\n                * path(s) to header file(s) where python includedir suffix will\n                  default to package name.\n        ")
        
        # Assigning a List to a Name (line 1352):
        
        # Assigning a List to a Name (line 1352):
        
        # Obtaining an instance of the builtin type 'list' (line 1352)
        list_41846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1352, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1352)
        
        # Assigning a type to the variable 'headers' (line 1352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 8), 'headers', list_41846)
        
        # Getting the type of 'files' (line 1353)
        files_41847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 20), 'files')
        # Testing the type of a for loop iterable (line 1353)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1353, 8), files_41847)
        # Getting the type of the for loop variable (line 1353)
        for_loop_var_41848 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1353, 8), files_41847)
        # Assigning a type to the variable 'path' (line 1353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 8), 'path', for_loop_var_41848)
        # SSA begins for a for statement (line 1353)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to is_string(...): (line 1354)
        # Processing the call arguments (line 1354)
        # Getting the type of 'path' (line 1354)
        path_41850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 25), 'path', False)
        # Processing the call keyword arguments (line 1354)
        kwargs_41851 = {}
        # Getting the type of 'is_string' (line 1354)
        is_string_41849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 15), 'is_string', False)
        # Calling is_string(args, kwargs) (line 1354)
        is_string_call_result_41852 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 15), is_string_41849, *[path_41850], **kwargs_41851)
        
        # Testing the type of an if condition (line 1354)
        if_condition_41853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1354, 12), is_string_call_result_41852)
        # Assigning a type to the variable 'if_condition_41853' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 12), 'if_condition_41853', if_condition_41853)
        # SSA begins for if statement (line 1354)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to paths(...): (line 1355)
        # Processing the call arguments (line 1355)
        # Getting the type of 'path' (line 1355)
        path_41864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 68), 'path', False)
        # Processing the call keyword arguments (line 1355)
        kwargs_41865 = {}
        # Getting the type of 'self' (line 1355)
        self_41862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 57), 'self', False)
        # Obtaining the member 'paths' of a type (line 1355)
        paths_41863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 57), self_41862, 'paths')
        # Calling paths(args, kwargs) (line 1355)
        paths_call_result_41866 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 57), paths_41863, *[path_41864], **kwargs_41865)
        
        comprehension_41867 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1355, 17), paths_call_result_41866)
        # Assigning a type to the variable 'p' (line 1355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 17), 'p', comprehension_41867)
        
        # Call to append(...): (line 1355)
        # Processing the call arguments (line 1355)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1355)
        tuple_41856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1355)
        # Adding element type (line 1355)
        # Getting the type of 'self' (line 1355)
        self_41857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 33), 'self', False)
        # Obtaining the member 'name' of a type (line 1355)
        name_41858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 33), self_41857, 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1355, 33), tuple_41856, name_41858)
        # Adding element type (line 1355)
        # Getting the type of 'p' (line 1355)
        p_41859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 44), 'p', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1355, 33), tuple_41856, p_41859)
        
        # Processing the call keyword arguments (line 1355)
        kwargs_41860 = {}
        # Getting the type of 'headers' (line 1355)
        headers_41854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 17), 'headers', False)
        # Obtaining the member 'append' of a type (line 1355)
        append_41855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 17), headers_41854, 'append')
        # Calling append(args, kwargs) (line 1355)
        append_call_result_41861 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 17), append_41855, *[tuple_41856], **kwargs_41860)
        
        list_41868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, 17), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1355, 17), list_41868, append_call_result_41861)
        # SSA branch for the else part of an if statement (line 1354)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        
        # Call to isinstance(...): (line 1357)
        # Processing the call arguments (line 1357)
        # Getting the type of 'path' (line 1357)
        path_41870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 34), 'path', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1357)
        tuple_41871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1357, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1357)
        # Adding element type (line 1357)
        # Getting the type of 'tuple' (line 1357)
        tuple_41872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 41), 'tuple', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1357, 41), tuple_41871, tuple_41872)
        # Adding element type (line 1357)
        # Getting the type of 'list' (line 1357)
        list_41873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 48), 'list', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1357, 41), tuple_41871, list_41873)
        
        # Processing the call keyword arguments (line 1357)
        kwargs_41874 = {}
        # Getting the type of 'isinstance' (line 1357)
        isinstance_41869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 23), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1357)
        isinstance_call_result_41875 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 23), isinstance_41869, *[path_41870, tuple_41871], **kwargs_41874)
        
        # Applying the 'not' unary operator (line 1357)
        result_not__41876 = python_operator(stypy.reporting.localization.Localization(__file__, 1357, 19), 'not', isinstance_call_result_41875)
        
        
        
        # Call to len(...): (line 1357)
        # Processing the call arguments (line 1357)
        # Getting the type of 'path' (line 1357)
        path_41878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 62), 'path', False)
        # Processing the call keyword arguments (line 1357)
        kwargs_41879 = {}
        # Getting the type of 'len' (line 1357)
        len_41877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 58), 'len', False)
        # Calling len(args, kwargs) (line 1357)
        len_call_result_41880 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 58), len_41877, *[path_41878], **kwargs_41879)
        
        int_41881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1357, 71), 'int')
        # Applying the binary operator '!=' (line 1357)
        result_ne_41882 = python_operator(stypy.reporting.localization.Localization(__file__, 1357, 58), '!=', len_call_result_41880, int_41881)
        
        # Applying the binary operator 'or' (line 1357)
        result_or_keyword_41883 = python_operator(stypy.reporting.localization.Localization(__file__, 1357, 19), 'or', result_not__41876, result_ne_41882)
        
        # Testing the type of an if condition (line 1357)
        if_condition_41884 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1357, 16), result_or_keyword_41883)
        # Assigning a type to the variable 'if_condition_41884' (line 1357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 16), 'if_condition_41884', if_condition_41884)
        # SSA begins for if statement (line 1357)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1358)
        # Processing the call arguments (line 1358)
        
        # Call to repr(...): (line 1358)
        # Processing the call arguments (line 1358)
        # Getting the type of 'path' (line 1358)
        path_41887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 41), 'path', False)
        # Processing the call keyword arguments (line 1358)
        kwargs_41888 = {}
        # Getting the type of 'repr' (line 1358)
        repr_41886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 36), 'repr', False)
        # Calling repr(args, kwargs) (line 1358)
        repr_call_result_41889 = invoke(stypy.reporting.localization.Localization(__file__, 1358, 36), repr_41886, *[path_41887], **kwargs_41888)
        
        # Processing the call keyword arguments (line 1358)
        kwargs_41890 = {}
        # Getting the type of 'TypeError' (line 1358)
        TypeError_41885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 26), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1358)
        TypeError_call_result_41891 = invoke(stypy.reporting.localization.Localization(__file__, 1358, 26), TypeError_41885, *[repr_call_result_41889], **kwargs_41890)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1358, 20), TypeError_call_result_41891, 'raise parameter', BaseException)
        # SSA join for if statement (line 1357)
        module_type_store = module_type_store.join_ssa_context()
        
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to paths(...): (line 1359)
        # Processing the call arguments (line 1359)
        
        # Obtaining the type of the subscript
        int_41904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 71), 'int')
        # Getting the type of 'path' (line 1359)
        path_41905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 66), 'path', False)
        # Obtaining the member '__getitem__' of a type (line 1359)
        getitem___41906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 66), path_41905, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1359)
        subscript_call_result_41907 = invoke(stypy.reporting.localization.Localization(__file__, 1359, 66), getitem___41906, int_41904)
        
        # Processing the call keyword arguments (line 1359)
        kwargs_41908 = {}
        # Getting the type of 'self' (line 1359)
        self_41902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 55), 'self', False)
        # Obtaining the member 'paths' of a type (line 1359)
        paths_41903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 55), self_41902, 'paths')
        # Calling paths(args, kwargs) (line 1359)
        paths_call_result_41909 = invoke(stypy.reporting.localization.Localization(__file__, 1359, 55), paths_41903, *[subscript_call_result_41907], **kwargs_41908)
        
        comprehension_41910 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1359, 17), paths_call_result_41909)
        # Assigning a type to the variable 'p' (line 1359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 17), 'p', comprehension_41910)
        
        # Call to append(...): (line 1359)
        # Processing the call arguments (line 1359)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1359)
        tuple_41894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1359)
        # Adding element type (line 1359)
        
        # Obtaining the type of the subscript
        int_41895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 38), 'int')
        # Getting the type of 'path' (line 1359)
        path_41896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 33), 'path', False)
        # Obtaining the member '__getitem__' of a type (line 1359)
        getitem___41897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 33), path_41896, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1359)
        subscript_call_result_41898 = invoke(stypy.reporting.localization.Localization(__file__, 1359, 33), getitem___41897, int_41895)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1359, 33), tuple_41894, subscript_call_result_41898)
        # Adding element type (line 1359)
        # Getting the type of 'p' (line 1359)
        p_41899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 42), 'p', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1359, 33), tuple_41894, p_41899)
        
        # Processing the call keyword arguments (line 1359)
        kwargs_41900 = {}
        # Getting the type of 'headers' (line 1359)
        headers_41892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 17), 'headers', False)
        # Obtaining the member 'append' of a type (line 1359)
        append_41893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 17), headers_41892, 'append')
        # Calling append(args, kwargs) (line 1359)
        append_call_result_41901 = invoke(stypy.reporting.localization.Localization(__file__, 1359, 17), append_41893, *[tuple_41894], **kwargs_41900)
        
        list_41911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 17), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1359, 17), list_41911, append_call_result_41901)
        # SSA join for if statement (line 1354)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1360):
        
        # Assigning a Call to a Name (line 1360):
        
        # Call to get_distribution(...): (line 1360)
        # Processing the call keyword arguments (line 1360)
        kwargs_41914 = {}
        # Getting the type of 'self' (line 1360)
        self_41912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 15), 'self', False)
        # Obtaining the member 'get_distribution' of a type (line 1360)
        get_distribution_41913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1360, 15), self_41912, 'get_distribution')
        # Calling get_distribution(args, kwargs) (line 1360)
        get_distribution_call_result_41915 = invoke(stypy.reporting.localization.Localization(__file__, 1360, 15), get_distribution_41913, *[], **kwargs_41914)
        
        # Assigning a type to the variable 'dist' (line 1360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 8), 'dist', get_distribution_call_result_41915)
        
        # Type idiom detected: calculating its left and rigth part (line 1361)
        # Getting the type of 'dist' (line 1361)
        dist_41916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'dist')
        # Getting the type of 'None' (line 1361)
        None_41917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 23), 'None')
        
        (may_be_41918, more_types_in_union_41919) = may_not_be_none(dist_41916, None_41917)

        if may_be_41918:

            if more_types_in_union_41919:
                # Runtime conditional SSA (line 1361)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 1362)
            # Getting the type of 'dist' (line 1362)
            dist_41920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 15), 'dist')
            # Obtaining the member 'headers' of a type (line 1362)
            headers_41921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 15), dist_41920, 'headers')
            # Getting the type of 'None' (line 1362)
            None_41922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 31), 'None')
            
            (may_be_41923, more_types_in_union_41924) = may_be_none(headers_41921, None_41922)

            if may_be_41923:

                if more_types_in_union_41924:
                    # Runtime conditional SSA (line 1362)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a List to a Attribute (line 1363):
                
                # Assigning a List to a Attribute (line 1363):
                
                # Obtaining an instance of the builtin type 'list' (line 1363)
                list_41925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 31), 'list')
                # Adding type elements to the builtin type 'list' instance (line 1363)
                
                # Getting the type of 'dist' (line 1363)
                dist_41926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 16), 'dist')
                # Setting the type of the member 'headers' of a type (line 1363)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1363, 16), dist_41926, 'headers', list_41925)

                if more_types_in_union_41924:
                    # SSA join for if statement (line 1362)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Call to extend(...): (line 1364)
            # Processing the call arguments (line 1364)
            # Getting the type of 'headers' (line 1364)
            headers_41930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 32), 'headers', False)
            # Processing the call keyword arguments (line 1364)
            kwargs_41931 = {}
            # Getting the type of 'dist' (line 1364)
            dist_41927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 12), 'dist', False)
            # Obtaining the member 'headers' of a type (line 1364)
            headers_41928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 12), dist_41927, 'headers')
            # Obtaining the member 'extend' of a type (line 1364)
            extend_41929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 12), headers_41928, 'extend')
            # Calling extend(args, kwargs) (line 1364)
            extend_call_result_41932 = invoke(stypy.reporting.localization.Localization(__file__, 1364, 12), extend_41929, *[headers_41930], **kwargs_41931)
            

            if more_types_in_union_41919:
                # Runtime conditional SSA for else branch (line 1361)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_41918) or more_types_in_union_41919):
            
            # Call to extend(...): (line 1366)
            # Processing the call arguments (line 1366)
            # Getting the type of 'headers' (line 1366)
            headers_41936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 32), 'headers', False)
            # Processing the call keyword arguments (line 1366)
            kwargs_41937 = {}
            # Getting the type of 'self' (line 1366)
            self_41933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 12), 'self', False)
            # Obtaining the member 'headers' of a type (line 1366)
            headers_41934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 12), self_41933, 'headers')
            # Obtaining the member 'extend' of a type (line 1366)
            extend_41935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 12), headers_41934, 'extend')
            # Calling extend(args, kwargs) (line 1366)
            extend_call_result_41938 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 12), extend_41935, *[headers_41936], **kwargs_41937)
            

            if (may_be_41918 and more_types_in_union_41919):
                # SSA join for if statement (line 1361)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'add_headers(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_headers' in the type store
        # Getting the type of 'stypy_return_type' (line 1334)
        stypy_return_type_41939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41939)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_headers'
        return stypy_return_type_41939


    @norecursion
    def paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'paths'
        module_type_store = module_type_store.open_function_context('paths', 1368, 4, False)
        # Assigning a type to the variable 'self' (line 1369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1369, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.paths.__dict__.__setitem__('stypy_localization', localization)
        Configuration.paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.paths.__dict__.__setitem__('stypy_function_name', 'Configuration.paths')
        Configuration.paths.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.paths.__dict__.__setitem__('stypy_varargs_param_name', 'paths')
        Configuration.paths.__dict__.__setitem__('stypy_kwargs_param_name', 'kws')
        Configuration.paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.paths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.paths', [], 'paths', 'kws', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'paths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'paths(...)' code ##################

        str_41940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1377, (-1)), 'str', 'Apply glob to paths and prepend local_path if needed.\n\n        Applies glob.glob(...) to each path in the sequence (if needed) and\n        pre-pends the local_path if needed. Because this is called on all\n        source lists, this allows wildcard characters to be specified in lists\n        of sources for extension modules and libraries and scripts and allows\n        path-names be relative to the source directory.\n\n        ')
        
        # Assigning a Call to a Name (line 1378):
        
        # Assigning a Call to a Name (line 1378):
        
        # Call to get(...): (line 1378)
        # Processing the call arguments (line 1378)
        str_41943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, 39), 'str', 'include_non_existing')
        # Getting the type of 'True' (line 1378)
        True_41944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 63), 'True', False)
        # Processing the call keyword arguments (line 1378)
        kwargs_41945 = {}
        # Getting the type of 'kws' (line 1378)
        kws_41941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 31), 'kws', False)
        # Obtaining the member 'get' of a type (line 1378)
        get_41942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 31), kws_41941, 'get')
        # Calling get(args, kwargs) (line 1378)
        get_call_result_41946 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 31), get_41942, *[str_41943, True_41944], **kwargs_41945)
        
        # Assigning a type to the variable 'include_non_existing' (line 1378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1378, 8), 'include_non_existing', get_call_result_41946)
        
        # Call to gpaths(...): (line 1379)
        # Processing the call arguments (line 1379)
        # Getting the type of 'paths' (line 1379)
        paths_41948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 22), 'paths', False)
        # Processing the call keyword arguments (line 1379)
        # Getting the type of 'self' (line 1380)
        self_41949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 35), 'self', False)
        # Obtaining the member 'local_path' of a type (line 1380)
        local_path_41950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1380, 35), self_41949, 'local_path')
        keyword_41951 = local_path_41950
        # Getting the type of 'include_non_existing' (line 1381)
        include_non_existing_41952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 43), 'include_non_existing', False)
        keyword_41953 = include_non_existing_41952
        kwargs_41954 = {'include_non_existing': keyword_41953, 'local_path': keyword_41951}
        # Getting the type of 'gpaths' (line 1379)
        gpaths_41947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 15), 'gpaths', False)
        # Calling gpaths(args, kwargs) (line 1379)
        gpaths_call_result_41955 = invoke(stypy.reporting.localization.Localization(__file__, 1379, 15), gpaths_41947, *[paths_41948], **kwargs_41954)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'stypy_return_type', gpaths_call_result_41955)
        
        # ################# End of 'paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1368)
        stypy_return_type_41956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41956)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'paths'
        return stypy_return_type_41956


    @norecursion
    def _fix_paths_dict(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_fix_paths_dict'
        module_type_store = module_type_store.open_function_context('_fix_paths_dict', 1383, 4, False)
        # Assigning a type to the variable 'self' (line 1384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_localization', localization)
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_function_name', 'Configuration._fix_paths_dict')
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_param_names_list', ['kw'])
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration._fix_paths_dict.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration._fix_paths_dict', ['kw'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_fix_paths_dict', localization, ['kw'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_fix_paths_dict(...)' code ##################

        
        
        # Call to keys(...): (line 1384)
        # Processing the call keyword arguments (line 1384)
        kwargs_41959 = {}
        # Getting the type of 'kw' (line 1384)
        kw_41957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 17), 'kw', False)
        # Obtaining the member 'keys' of a type (line 1384)
        keys_41958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 17), kw_41957, 'keys')
        # Calling keys(args, kwargs) (line 1384)
        keys_call_result_41960 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 17), keys_41958, *[], **kwargs_41959)
        
        # Testing the type of a for loop iterable (line 1384)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1384, 8), keys_call_result_41960)
        # Getting the type of the for loop variable (line 1384)
        for_loop_var_41961 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1384, 8), keys_call_result_41960)
        # Assigning a type to the variable 'k' (line 1384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 8), 'k', for_loop_var_41961)
        # SSA begins for a for statement (line 1384)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1385):
        
        # Assigning a Subscript to a Name (line 1385):
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1385)
        k_41962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 19), 'k')
        # Getting the type of 'kw' (line 1385)
        kw_41963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 16), 'kw')
        # Obtaining the member '__getitem__' of a type (line 1385)
        getitem___41964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 16), kw_41963, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1385)
        subscript_call_result_41965 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 16), getitem___41964, k_41962)
        
        # Assigning a type to the variable 'v' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 12), 'v', subscript_call_result_41965)
        
        
        # Getting the type of 'k' (line 1386)
        k_41966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 15), 'k')
        
        # Obtaining an instance of the builtin type 'list' (line 1386)
        list_41967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1386)
        # Adding element type (line 1386)
        str_41968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 21), 'str', 'sources')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 20), list_41967, str_41968)
        # Adding element type (line 1386)
        str_41969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 32), 'str', 'depends')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 20), list_41967, str_41969)
        # Adding element type (line 1386)
        str_41970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 43), 'str', 'include_dirs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 20), list_41967, str_41970)
        # Adding element type (line 1386)
        str_41971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 59), 'str', 'library_dirs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 20), list_41967, str_41971)
        # Adding element type (line 1386)
        str_41972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1387, 21), 'str', 'module_dirs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 20), list_41967, str_41972)
        # Adding element type (line 1386)
        str_41973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1387, 36), 'str', 'extra_objects')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 20), list_41967, str_41973)
        
        # Applying the binary operator 'in' (line 1386)
        result_contains_41974 = python_operator(stypy.reporting.localization.Localization(__file__, 1386, 15), 'in', k_41966, list_41967)
        
        # Testing the type of an if condition (line 1386)
        if_condition_41975 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1386, 12), result_contains_41974)
        # Assigning a type to the variable 'if_condition_41975' (line 1386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 12), 'if_condition_41975', if_condition_41975)
        # SSA begins for if statement (line 1386)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1388):
        
        # Assigning a Call to a Name (line 1388):
        
        # Call to paths(...): (line 1388)
        # Processing the call arguments (line 1388)
        # Getting the type of 'v' (line 1388)
        v_41978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 35), 'v', False)
        # Processing the call keyword arguments (line 1388)
        kwargs_41979 = {}
        # Getting the type of 'self' (line 1388)
        self_41976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 24), 'self', False)
        # Obtaining the member 'paths' of a type (line 1388)
        paths_41977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 24), self_41976, 'paths')
        # Calling paths(args, kwargs) (line 1388)
        paths_call_result_41980 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 24), paths_41977, *[v_41978], **kwargs_41979)
        
        # Assigning a type to the variable 'new_v' (line 1388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 16), 'new_v', paths_call_result_41980)
        
        # Assigning a Name to a Subscript (line 1389):
        
        # Assigning a Name to a Subscript (line 1389):
        # Getting the type of 'new_v' (line 1389)
        new_v_41981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 24), 'new_v')
        # Getting the type of 'kw' (line 1389)
        kw_41982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 16), 'kw')
        # Getting the type of 'k' (line 1389)
        k_41983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 19), 'k')
        # Storing an element on a container (line 1389)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1389, 16), kw_41982, (k_41983, new_v_41981))
        # SSA join for if statement (line 1386)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_fix_paths_dict(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_fix_paths_dict' in the type store
        # Getting the type of 'stypy_return_type' (line 1383)
        stypy_return_type_41984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41984)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_fix_paths_dict'
        return stypy_return_type_41984


    @norecursion
    def add_extension(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_extension'
        module_type_store = module_type_store.open_function_context('add_extension', 1391, 4, False)
        # Assigning a type to the variable 'self' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_extension.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_extension.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_extension.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_extension.__dict__.__setitem__('stypy_function_name', 'Configuration.add_extension')
        Configuration.add_extension.__dict__.__setitem__('stypy_param_names_list', ['name', 'sources'])
        Configuration.add_extension.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.add_extension.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        Configuration.add_extension.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_extension.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_extension.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_extension.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_extension', ['name', 'sources'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_extension', localization, ['name', 'sources'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_extension(...)' code ##################

        str_41985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1438, (-1)), 'str', 'Add extension to configuration.\n\n        Create and add an Extension instance to the ext_modules list. This\n        method also takes the following optional keyword arguments that are\n        passed on to the Extension constructor.\n\n        Parameters\n        ----------\n        name : str\n            name of the extension\n        sources : seq\n            list of the sources. The list of sources may contain functions\n            (called source generators) which must take an extension instance\n            and a build directory as inputs and return a source file or list of\n            source files or None. If None is returned then no sources are\n            generated. If the Extension instance has no sources after\n            processing all source generators, then no extension module is\n            built.\n        include_dirs :\n        define_macros :\n        undef_macros :\n        library_dirs :\n        libraries :\n        runtime_library_dirs :\n        extra_objects :\n        extra_compile_args :\n        extra_link_args :\n        extra_f77_compile_args :\n        extra_f90_compile_args :\n        export_symbols :\n        swig_opts :\n        depends :\n            The depends list contains paths to files or directories that the\n            sources of the extension module depend on. If any path in the\n            depends list is newer than the extension module, then the module\n            will be rebuilt.\n        language :\n        f2py_options :\n        module_dirs :\n        extra_info : dict or list\n            dict or list of dict of keywords to be appended to keywords.\n\n        Notes\n        -----\n        The self.paths(...) method is applied to all lists that may contain\n        paths.\n        ')
        
        # Assigning a Call to a Name (line 1439):
        
        # Assigning a Call to a Name (line 1439):
        
        # Call to copy(...): (line 1439)
        # Processing the call arguments (line 1439)
        # Getting the type of 'kw' (line 1439)
        kw_41988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 29), 'kw', False)
        # Processing the call keyword arguments (line 1439)
        kwargs_41989 = {}
        # Getting the type of 'copy' (line 1439)
        copy_41986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 19), 'copy', False)
        # Obtaining the member 'copy' of a type (line 1439)
        copy_41987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 19), copy_41986, 'copy')
        # Calling copy(args, kwargs) (line 1439)
        copy_call_result_41990 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 19), copy_41987, *[kw_41988], **kwargs_41989)
        
        # Assigning a type to the variable 'ext_args' (line 1439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 8), 'ext_args', copy_call_result_41990)
        
        # Assigning a Call to a Subscript (line 1440):
        
        # Assigning a Call to a Subscript (line 1440):
        
        # Call to dot_join(...): (line 1440)
        # Processing the call arguments (line 1440)
        # Getting the type of 'self' (line 1440)
        self_41992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 36), 'self', False)
        # Obtaining the member 'name' of a type (line 1440)
        name_41993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 36), self_41992, 'name')
        # Getting the type of 'name' (line 1440)
        name_41994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 47), 'name', False)
        # Processing the call keyword arguments (line 1440)
        kwargs_41995 = {}
        # Getting the type of 'dot_join' (line 1440)
        dot_join_41991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 27), 'dot_join', False)
        # Calling dot_join(args, kwargs) (line 1440)
        dot_join_call_result_41996 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 27), dot_join_41991, *[name_41993, name_41994], **kwargs_41995)
        
        # Getting the type of 'ext_args' (line 1440)
        ext_args_41997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 8), 'ext_args')
        str_41998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, 17), 'str', 'name')
        # Storing an element on a container (line 1440)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1440, 8), ext_args_41997, (str_41998, dot_join_call_result_41996))
        
        # Assigning a Name to a Subscript (line 1441):
        
        # Assigning a Name to a Subscript (line 1441):
        # Getting the type of 'sources' (line 1441)
        sources_41999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 30), 'sources')
        # Getting the type of 'ext_args' (line 1441)
        ext_args_42000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'ext_args')
        str_42001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 17), 'str', 'sources')
        # Storing an element on a container (line 1441)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 8), ext_args_42000, (str_42001, sources_41999))
        
        
        str_42002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1443, 11), 'str', 'extra_info')
        # Getting the type of 'ext_args' (line 1443)
        ext_args_42003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 27), 'ext_args')
        # Applying the binary operator 'in' (line 1443)
        result_contains_42004 = python_operator(stypy.reporting.localization.Localization(__file__, 1443, 11), 'in', str_42002, ext_args_42003)
        
        # Testing the type of an if condition (line 1443)
        if_condition_42005 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1443, 8), result_contains_42004)
        # Assigning a type to the variable 'if_condition_42005' (line 1443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 8), 'if_condition_42005', if_condition_42005)
        # SSA begins for if statement (line 1443)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1444):
        
        # Assigning a Subscript to a Name (line 1444):
        
        # Obtaining the type of the subscript
        str_42006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 34), 'str', 'extra_info')
        # Getting the type of 'ext_args' (line 1444)
        ext_args_42007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 25), 'ext_args')
        # Obtaining the member '__getitem__' of a type (line 1444)
        getitem___42008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 25), ext_args_42007, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1444)
        subscript_call_result_42009 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 25), getitem___42008, str_42006)
        
        # Assigning a type to the variable 'extra_info' (line 1444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 12), 'extra_info', subscript_call_result_42009)
        # Deleting a member
        # Getting the type of 'ext_args' (line 1445)
        ext_args_42010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 16), 'ext_args')
        
        # Obtaining the type of the subscript
        str_42011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1445, 25), 'str', 'extra_info')
        # Getting the type of 'ext_args' (line 1445)
        ext_args_42012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 16), 'ext_args')
        # Obtaining the member '__getitem__' of a type (line 1445)
        getitem___42013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1445, 16), ext_args_42012, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1445)
        subscript_call_result_42014 = invoke(stypy.reporting.localization.Localization(__file__, 1445, 16), getitem___42013, str_42011)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1445, 12), ext_args_42010, subscript_call_result_42014)
        
        # Type idiom detected: calculating its left and rigth part (line 1446)
        # Getting the type of 'dict' (line 1446)
        dict_42015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 38), 'dict')
        # Getting the type of 'extra_info' (line 1446)
        extra_info_42016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 26), 'extra_info')
        
        (may_be_42017, more_types_in_union_42018) = may_be_subtype(dict_42015, extra_info_42016)

        if may_be_42017:

            if more_types_in_union_42018:
                # Runtime conditional SSA (line 1446)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'extra_info' (line 1446)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'extra_info', remove_not_subtype_from_union(extra_info_42016, dict))
            
            # Assigning a List to a Name (line 1447):
            
            # Assigning a List to a Name (line 1447):
            
            # Obtaining an instance of the builtin type 'list' (line 1447)
            list_42019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1447, 29), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1447)
            # Adding element type (line 1447)
            # Getting the type of 'extra_info' (line 1447)
            extra_info_42020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 30), 'extra_info')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1447, 29), list_42019, extra_info_42020)
            
            # Assigning a type to the variable 'extra_info' (line 1447)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 16), 'extra_info', list_42019)

            if more_types_in_union_42018:
                # SSA join for if statement (line 1446)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'extra_info' (line 1448)
        extra_info_42021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 24), 'extra_info')
        # Testing the type of a for loop iterable (line 1448)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1448, 12), extra_info_42021)
        # Getting the type of the for loop variable (line 1448)
        for_loop_var_42022 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1448, 12), extra_info_42021)
        # Assigning a type to the variable 'info' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 12), 'info', for_loop_var_42022)
        # SSA begins for a for statement (line 1448)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Evaluating assert statement condition
        
        # Call to isinstance(...): (line 1449)
        # Processing the call arguments (line 1449)
        # Getting the type of 'info' (line 1449)
        info_42024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 34), 'info', False)
        # Getting the type of 'dict' (line 1449)
        dict_42025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 40), 'dict', False)
        # Processing the call keyword arguments (line 1449)
        kwargs_42026 = {}
        # Getting the type of 'isinstance' (line 1449)
        isinstance_42023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 23), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1449)
        isinstance_call_result_42027 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 23), isinstance_42023, *[info_42024, dict_42025], **kwargs_42026)
        
        
        # Call to dict_append(...): (line 1450)
        # Processing the call arguments (line 1450)
        # Getting the type of 'ext_args' (line 1450)
        ext_args_42029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 28), 'ext_args', False)
        # Processing the call keyword arguments (line 1450)
        # Getting the type of 'info' (line 1450)
        info_42030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 39), 'info', False)
        kwargs_42031 = {'info_42030': info_42030}
        # Getting the type of 'dict_append' (line 1450)
        dict_append_42028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 16), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1450)
        dict_append_call_result_42032 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 16), dict_append_42028, *[ext_args_42029], **kwargs_42031)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1443)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _fix_paths_dict(...): (line 1452)
        # Processing the call arguments (line 1452)
        # Getting the type of 'ext_args' (line 1452)
        ext_args_42035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 29), 'ext_args', False)
        # Processing the call keyword arguments (line 1452)
        kwargs_42036 = {}
        # Getting the type of 'self' (line 1452)
        self_42033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 8), 'self', False)
        # Obtaining the member '_fix_paths_dict' of a type (line 1452)
        _fix_paths_dict_42034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 8), self_42033, '_fix_paths_dict')
        # Calling _fix_paths_dict(args, kwargs) (line 1452)
        _fix_paths_dict_call_result_42037 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 8), _fix_paths_dict_42034, *[ext_args_42035], **kwargs_42036)
        
        
        # Assigning a Call to a Name (line 1455):
        
        # Assigning a Call to a Name (line 1455):
        
        # Call to get(...): (line 1455)
        # Processing the call arguments (line 1455)
        str_42040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 33), 'str', 'libraries')
        
        # Obtaining an instance of the builtin type 'list' (line 1455)
        list_42041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1455)
        
        # Processing the call keyword arguments (line 1455)
        kwargs_42042 = {}
        # Getting the type of 'ext_args' (line 1455)
        ext_args_42038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 20), 'ext_args', False)
        # Obtaining the member 'get' of a type (line 1455)
        get_42039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1455, 20), ext_args_42038, 'get')
        # Calling get(args, kwargs) (line 1455)
        get_call_result_42043 = invoke(stypy.reporting.localization.Localization(__file__, 1455, 20), get_42039, *[str_42040, list_42041], **kwargs_42042)
        
        # Assigning a type to the variable 'libraries' (line 1455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 8), 'libraries', get_call_result_42043)
        
        # Assigning a List to a Name (line 1456):
        
        # Assigning a List to a Name (line 1456):
        
        # Obtaining an instance of the builtin type 'list' (line 1456)
        list_42044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1456)
        
        # Assigning a type to the variable 'libnames' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 8), 'libnames', list_42044)
        
        # Assigning a List to a Subscript (line 1457):
        
        # Assigning a List to a Subscript (line 1457):
        
        # Obtaining an instance of the builtin type 'list' (line 1457)
        list_42045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1457)
        
        # Getting the type of 'ext_args' (line 1457)
        ext_args_42046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 8), 'ext_args')
        str_42047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, 17), 'str', 'libraries')
        # Storing an element on a container (line 1457)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1457, 8), ext_args_42046, (str_42047, list_42045))
        
        # Getting the type of 'libraries' (line 1458)
        libraries_42048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 23), 'libraries')
        # Testing the type of a for loop iterable (line 1458)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1458, 8), libraries_42048)
        # Getting the type of the for loop variable (line 1458)
        for_loop_var_42049 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1458, 8), libraries_42048)
        # Assigning a type to the variable 'libname' (line 1458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 8), 'libname', for_loop_var_42049)
        # SSA begins for a for statement (line 1458)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 1459)
        # Getting the type of 'tuple' (line 1459)
        tuple_42050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 35), 'tuple')
        # Getting the type of 'libname' (line 1459)
        libname_42051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 26), 'libname')
        
        (may_be_42052, more_types_in_union_42053) = may_be_subtype(tuple_42050, libname_42051)

        if may_be_42052:

            if more_types_in_union_42053:
                # Runtime conditional SSA (line 1459)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'libname' (line 1459)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 12), 'libname', remove_not_subtype_from_union(libname_42051, tuple))
            
            # Call to _fix_paths_dict(...): (line 1460)
            # Processing the call arguments (line 1460)
            
            # Obtaining the type of the subscript
            int_42056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, 45), 'int')
            # Getting the type of 'libname' (line 1460)
            libname_42057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 37), 'libname', False)
            # Obtaining the member '__getitem__' of a type (line 1460)
            getitem___42058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 37), libname_42057, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1460)
            subscript_call_result_42059 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 37), getitem___42058, int_42056)
            
            # Processing the call keyword arguments (line 1460)
            kwargs_42060 = {}
            # Getting the type of 'self' (line 1460)
            self_42054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 16), 'self', False)
            # Obtaining the member '_fix_paths_dict' of a type (line 1460)
            _fix_paths_dict_42055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 16), self_42054, '_fix_paths_dict')
            # Calling _fix_paths_dict(args, kwargs) (line 1460)
            _fix_paths_dict_call_result_42061 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 16), _fix_paths_dict_42055, *[subscript_call_result_42059], **kwargs_42060)
            

            if more_types_in_union_42053:
                # SSA join for if statement (line 1459)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        str_42062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1463, 15), 'str', '@')
        # Getting the type of 'libname' (line 1463)
        libname_42063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 22), 'libname')
        # Applying the binary operator 'in' (line 1463)
        result_contains_42064 = python_operator(stypy.reporting.localization.Localization(__file__, 1463, 15), 'in', str_42062, libname_42063)
        
        # Testing the type of an if condition (line 1463)
        if_condition_42065 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1463, 12), result_contains_42064)
        # Assigning a type to the variable 'if_condition_42065' (line 1463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1463, 12), 'if_condition_42065', if_condition_42065)
        # SSA begins for if statement (line 1463)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1464):
        
        # Assigning a Call to a Name:
        
        # Call to split(...): (line 1464)
        # Processing the call arguments (line 1464)
        str_42068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 45), 'str', '@')
        int_42069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 50), 'int')
        # Processing the call keyword arguments (line 1464)
        kwargs_42070 = {}
        # Getting the type of 'libname' (line 1464)
        libname_42066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 31), 'libname', False)
        # Obtaining the member 'split' of a type (line 1464)
        split_42067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 31), libname_42066, 'split')
        # Calling split(args, kwargs) (line 1464)
        split_call_result_42071 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 31), split_42067, *[str_42068, int_42069], **kwargs_42070)
        
        # Assigning a type to the variable 'call_assignment_38391' (line 1464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 16), 'call_assignment_38391', split_call_result_42071)
        
        # Assigning a Call to a Name (line 1464):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_42074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 16), 'int')
        # Processing the call keyword arguments
        kwargs_42075 = {}
        # Getting the type of 'call_assignment_38391' (line 1464)
        call_assignment_38391_42072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 16), 'call_assignment_38391', False)
        # Obtaining the member '__getitem__' of a type (line 1464)
        getitem___42073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 16), call_assignment_38391_42072, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_42076 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___42073, *[int_42074], **kwargs_42075)
        
        # Assigning a type to the variable 'call_assignment_38392' (line 1464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 16), 'call_assignment_38392', getitem___call_result_42076)
        
        # Assigning a Name to a Name (line 1464):
        # Getting the type of 'call_assignment_38392' (line 1464)
        call_assignment_38392_42077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 16), 'call_assignment_38392')
        # Assigning a type to the variable 'lname' (line 1464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 16), 'lname', call_assignment_38392_42077)
        
        # Assigning a Call to a Name (line 1464):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_42080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 16), 'int')
        # Processing the call keyword arguments
        kwargs_42081 = {}
        # Getting the type of 'call_assignment_38391' (line 1464)
        call_assignment_38391_42078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 16), 'call_assignment_38391', False)
        # Obtaining the member '__getitem__' of a type (line 1464)
        getitem___42079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 16), call_assignment_38391_42078, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_42082 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___42079, *[int_42080], **kwargs_42081)
        
        # Assigning a type to the variable 'call_assignment_38393' (line 1464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 16), 'call_assignment_38393', getitem___call_result_42082)
        
        # Assigning a Name to a Name (line 1464):
        # Getting the type of 'call_assignment_38393' (line 1464)
        call_assignment_38393_42083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 16), 'call_assignment_38393')
        # Assigning a type to the variable 'lpath' (line 1464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 23), 'lpath', call_assignment_38393_42083)
        
        # Assigning a Call to a Name (line 1465):
        
        # Assigning a Call to a Name (line 1465):
        
        # Call to abspath(...): (line 1465)
        # Processing the call arguments (line 1465)
        
        # Call to njoin(...): (line 1465)
        # Processing the call arguments (line 1465)
        # Getting the type of 'self' (line 1465)
        self_42088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 46), 'self', False)
        # Obtaining the member 'local_path' of a type (line 1465)
        local_path_42089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 46), self_42088, 'local_path')
        # Getting the type of 'lpath' (line 1465)
        lpath_42090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 63), 'lpath', False)
        # Processing the call keyword arguments (line 1465)
        kwargs_42091 = {}
        # Getting the type of 'njoin' (line 1465)
        njoin_42087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 40), 'njoin', False)
        # Calling njoin(args, kwargs) (line 1465)
        njoin_call_result_42092 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 40), njoin_42087, *[local_path_42089, lpath_42090], **kwargs_42091)
        
        # Processing the call keyword arguments (line 1465)
        kwargs_42093 = {}
        # Getting the type of 'os' (line 1465)
        os_42084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 1465)
        path_42085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 24), os_42084, 'path')
        # Obtaining the member 'abspath' of a type (line 1465)
        abspath_42086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 24), path_42085, 'abspath')
        # Calling abspath(args, kwargs) (line 1465)
        abspath_call_result_42094 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 24), abspath_42086, *[njoin_call_result_42092], **kwargs_42093)
        
        # Assigning a type to the variable 'lpath' (line 1465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 16), 'lpath', abspath_call_result_42094)
        
        
        # Call to isdir(...): (line 1466)
        # Processing the call arguments (line 1466)
        # Getting the type of 'lpath' (line 1466)
        lpath_42098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 33), 'lpath', False)
        # Processing the call keyword arguments (line 1466)
        kwargs_42099 = {}
        # Getting the type of 'os' (line 1466)
        os_42095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 1466)
        path_42096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1466, 19), os_42095, 'path')
        # Obtaining the member 'isdir' of a type (line 1466)
        isdir_42097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1466, 19), path_42096, 'isdir')
        # Calling isdir(args, kwargs) (line 1466)
        isdir_call_result_42100 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 19), isdir_42097, *[lpath_42098], **kwargs_42099)
        
        # Testing the type of an if condition (line 1466)
        if_condition_42101 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1466, 16), isdir_call_result_42100)
        # Assigning a type to the variable 'if_condition_42101' (line 1466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 16), 'if_condition_42101', if_condition_42101)
        # SSA begins for if statement (line 1466)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1467):
        
        # Assigning a Call to a Name (line 1467):
        
        # Call to get_subpackage(...): (line 1467)
        # Processing the call arguments (line 1467)
        # Getting the type of 'None' (line 1467)
        None_42104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 44), 'None', False)
        # Getting the type of 'lpath' (line 1467)
        lpath_42105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 50), 'lpath', False)
        # Processing the call keyword arguments (line 1467)
        int_42106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 59), 'int')
        keyword_42107 = int_42106
        kwargs_42108 = {'caller_level': keyword_42107}
        # Getting the type of 'self' (line 1467)
        self_42102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 24), 'self', False)
        # Obtaining the member 'get_subpackage' of a type (line 1467)
        get_subpackage_42103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 24), self_42102, 'get_subpackage')
        # Calling get_subpackage(args, kwargs) (line 1467)
        get_subpackage_call_result_42109 = invoke(stypy.reporting.localization.Localization(__file__, 1467, 24), get_subpackage_42103, *[None_42104, lpath_42105], **kwargs_42108)
        
        # Assigning a type to the variable 'c' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 20), 'c', get_subpackage_call_result_42109)
        
        
        # Call to isinstance(...): (line 1469)
        # Processing the call arguments (line 1469)
        # Getting the type of 'c' (line 1469)
        c_42111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 34), 'c', False)
        # Getting the type of 'Configuration' (line 1469)
        Configuration_42112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 37), 'Configuration', False)
        # Processing the call keyword arguments (line 1469)
        kwargs_42113 = {}
        # Getting the type of 'isinstance' (line 1469)
        isinstance_42110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 23), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1469)
        isinstance_call_result_42114 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 23), isinstance_42110, *[c_42111, Configuration_42112], **kwargs_42113)
        
        # Testing the type of an if condition (line 1469)
        if_condition_42115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1469, 20), isinstance_call_result_42114)
        # Assigning a type to the variable 'if_condition_42115' (line 1469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 20), 'if_condition_42115', if_condition_42115)
        # SSA begins for if statement (line 1469)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1470):
        
        # Assigning a Call to a Name (line 1470):
        
        # Call to todict(...): (line 1470)
        # Processing the call keyword arguments (line 1470)
        kwargs_42118 = {}
        # Getting the type of 'c' (line 1470)
        c_42116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 28), 'c', False)
        # Obtaining the member 'todict' of a type (line 1470)
        todict_42117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 28), c_42116, 'todict')
        # Calling todict(args, kwargs) (line 1470)
        todict_call_result_42119 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 28), todict_42117, *[], **kwargs_42118)
        
        # Assigning a type to the variable 'c' (line 1470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 24), 'c', todict_call_result_42119)
        # SSA join for if statement (line 1469)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to get(...): (line 1471)
        # Processing the call arguments (line 1471)
        str_42126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 50), 'str', 'libraries')
        
        # Obtaining an instance of the builtin type 'list' (line 1471)
        list_42127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 63), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1471)
        
        # Processing the call keyword arguments (line 1471)
        kwargs_42128 = {}
        # Getting the type of 'c' (line 1471)
        c_42124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 44), 'c', False)
        # Obtaining the member 'get' of a type (line 1471)
        get_42125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 44), c_42124, 'get')
        # Calling get(args, kwargs) (line 1471)
        get_call_result_42129 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 44), get_42125, *[str_42126, list_42127], **kwargs_42128)
        
        comprehension_42130 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 30), get_call_result_42129)
        # Assigning a type to the variable 'l' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 30), 'l', comprehension_42130)
        
        # Obtaining the type of the subscript
        int_42120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 32), 'int')
        # Getting the type of 'l' (line 1471)
        l_42121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 30), 'l')
        # Obtaining the member '__getitem__' of a type (line 1471)
        getitem___42122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 30), l_42121, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1471)
        subscript_call_result_42123 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 30), getitem___42122, int_42120)
        
        list_42131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 30), list_42131, subscript_call_result_42123)
        # Testing the type of a for loop iterable (line 1471)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1471, 20), list_42131)
        # Getting the type of the for loop variable (line 1471)
        for_loop_var_42132 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1471, 20), list_42131)
        # Assigning a type to the variable 'l' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 20), 'l', for_loop_var_42132)
        # SSA begins for a for statement (line 1471)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1472):
        
        # Assigning a Subscript to a Name (line 1472):
        
        # Obtaining the type of the subscript
        int_42133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 54), 'int')
        
        # Call to split(...): (line 1472)
        # Processing the call arguments (line 1472)
        str_42136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 41), 'str', '__OF__')
        int_42137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 51), 'int')
        # Processing the call keyword arguments (line 1472)
        kwargs_42138 = {}
        # Getting the type of 'l' (line 1472)
        l_42134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 33), 'l', False)
        # Obtaining the member 'split' of a type (line 1472)
        split_42135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 33), l_42134, 'split')
        # Calling split(args, kwargs) (line 1472)
        split_call_result_42139 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 33), split_42135, *[str_42136, int_42137], **kwargs_42138)
        
        # Obtaining the member '__getitem__' of a type (line 1472)
        getitem___42140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 33), split_call_result_42139, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1472)
        subscript_call_result_42141 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 33), getitem___42140, int_42133)
        
        # Assigning a type to the variable 'llname' (line 1472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 24), 'llname', subscript_call_result_42141)
        
        
        # Getting the type of 'llname' (line 1473)
        llname_42142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 27), 'llname')
        # Getting the type of 'lname' (line 1473)
        lname_42143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 37), 'lname')
        # Applying the binary operator '==' (line 1473)
        result_eq_42144 = python_operator(stypy.reporting.localization.Localization(__file__, 1473, 27), '==', llname_42142, lname_42143)
        
        # Testing the type of an if condition (line 1473)
        if_condition_42145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1473, 24), result_eq_42144)
        # Assigning a type to the variable 'if_condition_42145' (line 1473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 24), 'if_condition_42145', if_condition_42145)
        # SSA begins for if statement (line 1473)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to pop(...): (line 1474)
        # Processing the call arguments (line 1474)
        str_42148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1474, 34), 'str', 'name')
        # Getting the type of 'None' (line 1474)
        None_42149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 42), 'None', False)
        # Processing the call keyword arguments (line 1474)
        kwargs_42150 = {}
        # Getting the type of 'c' (line 1474)
        c_42146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 28), 'c', False)
        # Obtaining the member 'pop' of a type (line 1474)
        pop_42147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 28), c_42146, 'pop')
        # Calling pop(args, kwargs) (line 1474)
        pop_call_result_42151 = invoke(stypy.reporting.localization.Localization(__file__, 1474, 28), pop_42147, *[str_42148, None_42149], **kwargs_42150)
        
        
        # Call to dict_append(...): (line 1475)
        # Processing the call arguments (line 1475)
        # Getting the type of 'ext_args' (line 1475)
        ext_args_42153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 40), 'ext_args', False)
        # Processing the call keyword arguments (line 1475)
        # Getting the type of 'c' (line 1475)
        c_42154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 51), 'c', False)
        kwargs_42155 = {'c_42154': c_42154}
        # Getting the type of 'dict_append' (line 1475)
        dict_append_42152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 28), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1475)
        dict_append_call_result_42156 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 28), dict_append_42152, *[ext_args_42153], **kwargs_42155)
        
        # SSA join for if statement (line 1473)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1466)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1463)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1478)
        # Processing the call arguments (line 1478)
        # Getting the type of 'libname' (line 1478)
        libname_42159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 28), 'libname', False)
        # Processing the call keyword arguments (line 1478)
        kwargs_42160 = {}
        # Getting the type of 'libnames' (line 1478)
        libnames_42157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 12), 'libnames', False)
        # Obtaining the member 'append' of a type (line 1478)
        append_42158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 12), libnames_42157, 'append')
        # Calling append(args, kwargs) (line 1478)
        append_call_result_42161 = invoke(stypy.reporting.localization.Localization(__file__, 1478, 12), append_42158, *[libname_42159], **kwargs_42160)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Subscript (line 1480):
        
        # Assigning a BinOp to a Subscript (line 1480):
        # Getting the type of 'libnames' (line 1480)
        libnames_42162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 32), 'libnames')
        
        # Obtaining the type of the subscript
        str_42163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1480, 52), 'str', 'libraries')
        # Getting the type of 'ext_args' (line 1480)
        ext_args_42164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 43), 'ext_args')
        # Obtaining the member '__getitem__' of a type (line 1480)
        getitem___42165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1480, 43), ext_args_42164, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1480)
        subscript_call_result_42166 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 43), getitem___42165, str_42163)
        
        # Applying the binary operator '+' (line 1480)
        result_add_42167 = python_operator(stypy.reporting.localization.Localization(__file__, 1480, 32), '+', libnames_42162, subscript_call_result_42166)
        
        # Getting the type of 'ext_args' (line 1480)
        ext_args_42168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 8), 'ext_args')
        str_42169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1480, 17), 'str', 'libraries')
        # Storing an element on a container (line 1480)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1480, 8), ext_args_42168, (str_42169, result_add_42167))
        
        # Assigning a BinOp to a Subscript (line 1481):
        
        # Assigning a BinOp to a Subscript (line 1481):
        # Getting the type of 'self' (line 1482)
        self_42170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 12), 'self')
        # Obtaining the member 'define_macros' of a type (line 1482)
        define_macros_42171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 12), self_42170, 'define_macros')
        
        # Call to get(...): (line 1482)
        # Processing the call arguments (line 1482)
        str_42174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 46), 'str', 'define_macros')
        
        # Obtaining an instance of the builtin type 'list' (line 1482)
        list_42175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 63), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1482)
        
        # Processing the call keyword arguments (line 1482)
        kwargs_42176 = {}
        # Getting the type of 'ext_args' (line 1482)
        ext_args_42172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 33), 'ext_args', False)
        # Obtaining the member 'get' of a type (line 1482)
        get_42173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 33), ext_args_42172, 'get')
        # Calling get(args, kwargs) (line 1482)
        get_call_result_42177 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 33), get_42173, *[str_42174, list_42175], **kwargs_42176)
        
        # Applying the binary operator '+' (line 1482)
        result_add_42178 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 12), '+', define_macros_42171, get_call_result_42177)
        
        # Getting the type of 'ext_args' (line 1481)
        ext_args_42179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 8), 'ext_args')
        str_42180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 17), 'str', 'define_macros')
        # Storing an element on a container (line 1481)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1481, 8), ext_args_42179, (str_42180, result_add_42178))
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1484, 8))
        
        # 'from numpy.distutils.core import Extension' statement (line 1484)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
        import_42181 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1484, 8), 'numpy.distutils.core')

        if (type(import_42181) is not StypyTypeError):

            if (import_42181 != 'pyd_module'):
                __import__(import_42181)
                sys_modules_42182 = sys.modules[import_42181]
                import_from_module(stypy.reporting.localization.Localization(__file__, 1484, 8), 'numpy.distutils.core', sys_modules_42182.module_type_store, module_type_store, ['Extension'])
                nest_module(stypy.reporting.localization.Localization(__file__, 1484, 8), __file__, sys_modules_42182, sys_modules_42182.module_type_store, module_type_store)
            else:
                from numpy.distutils.core import Extension

                import_from_module(stypy.reporting.localization.Localization(__file__, 1484, 8), 'numpy.distutils.core', None, module_type_store, ['Extension'], [Extension])

        else:
            # Assigning a type to the variable 'numpy.distutils.core' (line 1484)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 8), 'numpy.distutils.core', import_42181)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
        
        
        # Assigning a Call to a Name (line 1485):
        
        # Assigning a Call to a Name (line 1485):
        
        # Call to Extension(...): (line 1485)
        # Processing the call keyword arguments (line 1485)
        # Getting the type of 'ext_args' (line 1485)
        ext_args_42184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 26), 'ext_args', False)
        kwargs_42185 = {'ext_args_42184': ext_args_42184}
        # Getting the type of 'Extension' (line 1485)
        Extension_42183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 14), 'Extension', False)
        # Calling Extension(args, kwargs) (line 1485)
        Extension_call_result_42186 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 14), Extension_42183, *[], **kwargs_42185)
        
        # Assigning a type to the variable 'ext' (line 1485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 8), 'ext', Extension_call_result_42186)
        
        # Call to append(...): (line 1486)
        # Processing the call arguments (line 1486)
        # Getting the type of 'ext' (line 1486)
        ext_42190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 32), 'ext', False)
        # Processing the call keyword arguments (line 1486)
        kwargs_42191 = {}
        # Getting the type of 'self' (line 1486)
        self_42187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 8), 'self', False)
        # Obtaining the member 'ext_modules' of a type (line 1486)
        ext_modules_42188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1486, 8), self_42187, 'ext_modules')
        # Obtaining the member 'append' of a type (line 1486)
        append_42189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1486, 8), ext_modules_42188, 'append')
        # Calling append(args, kwargs) (line 1486)
        append_call_result_42192 = invoke(stypy.reporting.localization.Localization(__file__, 1486, 8), append_42189, *[ext_42190], **kwargs_42191)
        
        
        # Assigning a Call to a Name (line 1488):
        
        # Assigning a Call to a Name (line 1488):
        
        # Call to get_distribution(...): (line 1488)
        # Processing the call keyword arguments (line 1488)
        kwargs_42195 = {}
        # Getting the type of 'self' (line 1488)
        self_42193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 15), 'self', False)
        # Obtaining the member 'get_distribution' of a type (line 1488)
        get_distribution_42194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1488, 15), self_42193, 'get_distribution')
        # Calling get_distribution(args, kwargs) (line 1488)
        get_distribution_call_result_42196 = invoke(stypy.reporting.localization.Localization(__file__, 1488, 15), get_distribution_42194, *[], **kwargs_42195)
        
        # Assigning a type to the variable 'dist' (line 1488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 8), 'dist', get_distribution_call_result_42196)
        
        # Type idiom detected: calculating its left and rigth part (line 1489)
        # Getting the type of 'dist' (line 1489)
        dist_42197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'dist')
        # Getting the type of 'None' (line 1489)
        None_42198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 23), 'None')
        
        (may_be_42199, more_types_in_union_42200) = may_not_be_none(dist_42197, None_42198)

        if may_be_42199:

            if more_types_in_union_42200:
                # Runtime conditional SSA (line 1489)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to warn(...): (line 1490)
            # Processing the call arguments (line 1490)
            str_42203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, 22), 'str', 'distutils distribution has been initialized, it may be too late to add an extension ')
            # Getting the type of 'name' (line 1491)
            name_42204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 65), 'name', False)
            # Applying the binary operator '+' (line 1490)
            result_add_42205 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 22), '+', str_42203, name_42204)
            
            # Processing the call keyword arguments (line 1490)
            kwargs_42206 = {}
            # Getting the type of 'self' (line 1490)
            self_42201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 12), 'self', False)
            # Obtaining the member 'warn' of a type (line 1490)
            warn_42202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 12), self_42201, 'warn')
            # Calling warn(args, kwargs) (line 1490)
            warn_call_result_42207 = invoke(stypy.reporting.localization.Localization(__file__, 1490, 12), warn_42202, *[result_add_42205], **kwargs_42206)
            

            if more_types_in_union_42200:
                # SSA join for if statement (line 1489)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'ext' (line 1492)
        ext_42208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 15), 'ext')
        # Assigning a type to the variable 'stypy_return_type' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'stypy_return_type', ext_42208)
        
        # ################# End of 'add_extension(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_extension' in the type store
        # Getting the type of 'stypy_return_type' (line 1391)
        stypy_return_type_42209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42209)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_extension'
        return stypy_return_type_42209


    @norecursion
    def add_library(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_library'
        module_type_store = module_type_store.open_function_context('add_library', 1494, 4, False)
        # Assigning a type to the variable 'self' (line 1495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1495, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_library.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_library.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_library.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_library.__dict__.__setitem__('stypy_function_name', 'Configuration.add_library')
        Configuration.add_library.__dict__.__setitem__('stypy_param_names_list', ['name', 'sources'])
        Configuration.add_library.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.add_library.__dict__.__setitem__('stypy_kwargs_param_name', 'build_info')
        Configuration.add_library.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_library.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_library.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_library.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_library', ['name', 'sources'], None, 'build_info', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_library', localization, ['name', 'sources'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_library(...)' code ##################

        str_42210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1522, (-1)), 'str', '\n        Add library to configuration.\n\n        Parameters\n        ----------\n        name : str\n            Name of the extension.\n        sources : sequence\n            List of the sources. The list of sources may contain functions\n            (called source generators) which must take an extension instance\n            and a build directory as inputs and return a source file or list of\n            source files or None. If None is returned then no sources are\n            generated. If the Extension instance has no sources after\n            processing all source generators, then no extension module is\n            built.\n        build_info : dict, optional\n            The following keys are allowed:\n\n                * depends\n                * macros\n                * include_dirs\n                * extra_compiler_args\n                * extra_f77_compiler_args\n                * extra_f90_compiler_args\n                * f2py_options\n                * language\n\n        ')
        
        # Call to _add_library(...): (line 1523)
        # Processing the call arguments (line 1523)
        # Getting the type of 'name' (line 1523)
        name_42213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 26), 'name', False)
        # Getting the type of 'sources' (line 1523)
        sources_42214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 32), 'sources', False)
        # Getting the type of 'None' (line 1523)
        None_42215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 41), 'None', False)
        # Getting the type of 'build_info' (line 1523)
        build_info_42216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 47), 'build_info', False)
        # Processing the call keyword arguments (line 1523)
        kwargs_42217 = {}
        # Getting the type of 'self' (line 1523)
        self_42211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'self', False)
        # Obtaining the member '_add_library' of a type (line 1523)
        _add_library_42212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 8), self_42211, '_add_library')
        # Calling _add_library(args, kwargs) (line 1523)
        _add_library_call_result_42218 = invoke(stypy.reporting.localization.Localization(__file__, 1523, 8), _add_library_42212, *[name_42213, sources_42214, None_42215, build_info_42216], **kwargs_42217)
        
        
        # Assigning a Call to a Name (line 1525):
        
        # Assigning a Call to a Name (line 1525):
        
        # Call to get_distribution(...): (line 1525)
        # Processing the call keyword arguments (line 1525)
        kwargs_42221 = {}
        # Getting the type of 'self' (line 1525)
        self_42219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 15), 'self', False)
        # Obtaining the member 'get_distribution' of a type (line 1525)
        get_distribution_42220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 15), self_42219, 'get_distribution')
        # Calling get_distribution(args, kwargs) (line 1525)
        get_distribution_call_result_42222 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 15), get_distribution_42220, *[], **kwargs_42221)
        
        # Assigning a type to the variable 'dist' (line 1525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 8), 'dist', get_distribution_call_result_42222)
        
        # Type idiom detected: calculating its left and rigth part (line 1526)
        # Getting the type of 'dist' (line 1526)
        dist_42223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 8), 'dist')
        # Getting the type of 'None' (line 1526)
        None_42224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 23), 'None')
        
        (may_be_42225, more_types_in_union_42226) = may_not_be_none(dist_42223, None_42224)

        if may_be_42225:

            if more_types_in_union_42226:
                # Runtime conditional SSA (line 1526)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to warn(...): (line 1527)
            # Processing the call arguments (line 1527)
            str_42229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 22), 'str', 'distutils distribution has been initialized, it may be too late to add a library ')
            # Getting the type of 'name' (line 1528)
            name_42230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 63), 'name', False)
            # Applying the binary operator '+' (line 1527)
            result_add_42231 = python_operator(stypy.reporting.localization.Localization(__file__, 1527, 22), '+', str_42229, name_42230)
            
            # Processing the call keyword arguments (line 1527)
            kwargs_42232 = {}
            # Getting the type of 'self' (line 1527)
            self_42227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'self', False)
            # Obtaining the member 'warn' of a type (line 1527)
            warn_42228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 12), self_42227, 'warn')
            # Calling warn(args, kwargs) (line 1527)
            warn_call_result_42233 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 12), warn_42228, *[result_add_42231], **kwargs_42232)
            

            if more_types_in_union_42226:
                # SSA join for if statement (line 1526)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'add_library(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_library' in the type store
        # Getting the type of 'stypy_return_type' (line 1494)
        stypy_return_type_42234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42234)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_library'
        return stypy_return_type_42234


    @norecursion
    def _add_library(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_add_library'
        module_type_store = module_type_store.open_function_context('_add_library', 1530, 4, False)
        # Assigning a type to the variable 'self' (line 1531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration._add_library.__dict__.__setitem__('stypy_localization', localization)
        Configuration._add_library.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration._add_library.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration._add_library.__dict__.__setitem__('stypy_function_name', 'Configuration._add_library')
        Configuration._add_library.__dict__.__setitem__('stypy_param_names_list', ['name', 'sources', 'install_dir', 'build_info'])
        Configuration._add_library.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration._add_library.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration._add_library.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration._add_library.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration._add_library.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration._add_library.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration._add_library', ['name', 'sources', 'install_dir', 'build_info'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_add_library', localization, ['name', 'sources', 'install_dir', 'build_info'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_add_library(...)' code ##################

        str_42235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, (-1)), 'str', 'Common implementation for add_library and add_installed_library. Do\n        not use directly')
        
        # Assigning a Call to a Name (line 1533):
        
        # Assigning a Call to a Name (line 1533):
        
        # Call to copy(...): (line 1533)
        # Processing the call arguments (line 1533)
        # Getting the type of 'build_info' (line 1533)
        build_info_42238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 31), 'build_info', False)
        # Processing the call keyword arguments (line 1533)
        kwargs_42239 = {}
        # Getting the type of 'copy' (line 1533)
        copy_42236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 21), 'copy', False)
        # Obtaining the member 'copy' of a type (line 1533)
        copy_42237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 21), copy_42236, 'copy')
        # Calling copy(args, kwargs) (line 1533)
        copy_call_result_42240 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 21), copy_42237, *[build_info_42238], **kwargs_42239)
        
        # Assigning a type to the variable 'build_info' (line 1533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'build_info', copy_call_result_42240)
        
        # Assigning a Name to a Name (line 1534):
        
        # Assigning a Name to a Name (line 1534):
        # Getting the type of 'name' (line 1534)
        name_42241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 15), 'name')
        # Assigning a type to the variable 'name' (line 1534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 8), 'name', name_42241)
        
        # Assigning a Name to a Subscript (line 1535):
        
        # Assigning a Name to a Subscript (line 1535):
        # Getting the type of 'sources' (line 1535)
        sources_42242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 32), 'sources')
        # Getting the type of 'build_info' (line 1535)
        build_info_42243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 8), 'build_info')
        str_42244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 19), 'str', 'sources')
        # Storing an element on a container (line 1535)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1535, 8), build_info_42243, (str_42244, sources_42242))
        
        
        
        str_42245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 15), 'str', 'depends')
        # Getting the type of 'build_info' (line 1539)
        build_info_42246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 28), 'build_info')
        # Applying the binary operator 'in' (line 1539)
        result_contains_42247 = python_operator(stypy.reporting.localization.Localization(__file__, 1539, 15), 'in', str_42245, build_info_42246)
        
        # Applying the 'not' unary operator (line 1539)
        result_not__42248 = python_operator(stypy.reporting.localization.Localization(__file__, 1539, 11), 'not', result_contains_42247)
        
        # Testing the type of an if condition (line 1539)
        if_condition_42249 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1539, 8), result_not__42248)
        # Assigning a type to the variable 'if_condition_42249' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'if_condition_42249', if_condition_42249)
        # SSA begins for if statement (line 1539)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Subscript (line 1540):
        
        # Assigning a List to a Subscript (line 1540):
        
        # Obtaining an instance of the builtin type 'list' (line 1540)
        list_42250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1540)
        
        # Getting the type of 'build_info' (line 1540)
        build_info_42251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 12), 'build_info')
        str_42252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 23), 'str', 'depends')
        # Storing an element on a container (line 1540)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1540, 12), build_info_42251, (str_42252, list_42250))
        # SSA join for if statement (line 1539)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _fix_paths_dict(...): (line 1542)
        # Processing the call arguments (line 1542)
        # Getting the type of 'build_info' (line 1542)
        build_info_42255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 29), 'build_info', False)
        # Processing the call keyword arguments (line 1542)
        kwargs_42256 = {}
        # Getting the type of 'self' (line 1542)
        self_42253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 8), 'self', False)
        # Obtaining the member '_fix_paths_dict' of a type (line 1542)
        _fix_paths_dict_42254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 8), self_42253, '_fix_paths_dict')
        # Calling _fix_paths_dict(args, kwargs) (line 1542)
        _fix_paths_dict_call_result_42257 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 8), _fix_paths_dict_42254, *[build_info_42255], **kwargs_42256)
        
        
        # Call to append(...): (line 1545)
        # Processing the call arguments (line 1545)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1545)
        tuple_42261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1545)
        # Adding element type (line 1545)
        # Getting the type of 'name' (line 1545)
        name_42262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 31), 'name', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1545, 31), tuple_42261, name_42262)
        # Adding element type (line 1545)
        # Getting the type of 'build_info' (line 1545)
        build_info_42263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 37), 'build_info', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1545, 31), tuple_42261, build_info_42263)
        
        # Processing the call keyword arguments (line 1545)
        kwargs_42264 = {}
        # Getting the type of 'self' (line 1545)
        self_42258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 8), 'self', False)
        # Obtaining the member 'libraries' of a type (line 1545)
        libraries_42259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 8), self_42258, 'libraries')
        # Obtaining the member 'append' of a type (line 1545)
        append_42260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 8), libraries_42259, 'append')
        # Calling append(args, kwargs) (line 1545)
        append_call_result_42265 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 8), append_42260, *[tuple_42261], **kwargs_42264)
        
        
        # ################# End of '_add_library(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_add_library' in the type store
        # Getting the type of 'stypy_return_type' (line 1530)
        stypy_return_type_42266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42266)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_add_library'
        return stypy_return_type_42266


    @norecursion
    def add_installed_library(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1547)
        None_42267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 75), 'None')
        defaults = [None_42267]
        # Create a new context for function 'add_installed_library'
        module_type_store = module_type_store.open_function_context('add_installed_library', 1547, 4, False)
        # Assigning a type to the variable 'self' (line 1548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_installed_library.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_installed_library.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_installed_library.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_installed_library.__dict__.__setitem__('stypy_function_name', 'Configuration.add_installed_library')
        Configuration.add_installed_library.__dict__.__setitem__('stypy_param_names_list', ['name', 'sources', 'install_dir', 'build_info'])
        Configuration.add_installed_library.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.add_installed_library.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.add_installed_library.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_installed_library.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_installed_library.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_installed_library.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_installed_library', ['name', 'sources', 'install_dir', 'build_info'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_installed_library', localization, ['name', 'sources', 'install_dir', 'build_info'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_installed_library(...)' code ##################

        str_42268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1590, (-1)), 'str', '\n        Similar to add_library, but the specified library is installed.\n\n        Most C libraries used with `distutils` are only used to build python\n        extensions, but libraries built through this method will be installed\n        so that they can be reused by third-party packages.\n\n        Parameters\n        ----------\n        name : str\n            Name of the installed library.\n        sources : sequence\n            List of the library\'s source files. See `add_library` for details.\n        install_dir : str\n            Path to install the library, relative to the current sub-package.\n        build_info : dict, optional\n            The following keys are allowed:\n\n                * depends\n                * macros\n                * include_dirs\n                * extra_compiler_args\n                * extra_f77_compiler_args\n                * extra_f90_compiler_args\n                * f2py_options\n                * language\n\n        Returns\n        -------\n        None\n\n        See Also\n        --------\n        add_library, add_npy_pkg_config, get_info\n\n        Notes\n        -----\n        The best way to encode the options required to link against the specified\n        C libraries is to use a "libname.ini" file, and use `get_info` to\n        retrieve the required options (see `add_npy_pkg_config` for more\n        information).\n\n        ')
        
        
        # Getting the type of 'build_info' (line 1591)
        build_info_42269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 15), 'build_info')
        # Applying the 'not' unary operator (line 1591)
        result_not__42270 = python_operator(stypy.reporting.localization.Localization(__file__, 1591, 11), 'not', build_info_42269)
        
        # Testing the type of an if condition (line 1591)
        if_condition_42271 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1591, 8), result_not__42270)
        # Assigning a type to the variable 'if_condition_42271' (line 1591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1591, 8), 'if_condition_42271', if_condition_42271)
        # SSA begins for if statement (line 1591)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Dict to a Name (line 1592):
        
        # Assigning a Dict to a Name (line 1592):
        
        # Obtaining an instance of the builtin type 'dict' (line 1592)
        dict_42272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1592, 25), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1592)
        
        # Assigning a type to the variable 'build_info' (line 1592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 12), 'build_info', dict_42272)
        # SSA join for if statement (line 1591)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1594):
        
        # Assigning a Call to a Name (line 1594):
        
        # Call to join(...): (line 1594)
        # Processing the call arguments (line 1594)
        # Getting the type of 'self' (line 1594)
        self_42276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 35), 'self', False)
        # Obtaining the member 'package_path' of a type (line 1594)
        package_path_42277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1594, 35), self_42276, 'package_path')
        # Getting the type of 'install_dir' (line 1594)
        install_dir_42278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 54), 'install_dir', False)
        # Processing the call keyword arguments (line 1594)
        kwargs_42279 = {}
        # Getting the type of 'os' (line 1594)
        os_42273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 22), 'os', False)
        # Obtaining the member 'path' of a type (line 1594)
        path_42274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1594, 22), os_42273, 'path')
        # Obtaining the member 'join' of a type (line 1594)
        join_42275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1594, 22), path_42274, 'join')
        # Calling join(args, kwargs) (line 1594)
        join_call_result_42280 = invoke(stypy.reporting.localization.Localization(__file__, 1594, 22), join_42275, *[package_path_42277, install_dir_42278], **kwargs_42279)
        
        # Assigning a type to the variable 'install_dir' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 8), 'install_dir', join_call_result_42280)
        
        # Call to _add_library(...): (line 1595)
        # Processing the call arguments (line 1595)
        # Getting the type of 'name' (line 1595)
        name_42283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 26), 'name', False)
        # Getting the type of 'sources' (line 1595)
        sources_42284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 32), 'sources', False)
        # Getting the type of 'install_dir' (line 1595)
        install_dir_42285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 41), 'install_dir', False)
        # Getting the type of 'build_info' (line 1595)
        build_info_42286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 54), 'build_info', False)
        # Processing the call keyword arguments (line 1595)
        kwargs_42287 = {}
        # Getting the type of 'self' (line 1595)
        self_42281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 8), 'self', False)
        # Obtaining the member '_add_library' of a type (line 1595)
        _add_library_42282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1595, 8), self_42281, '_add_library')
        # Calling _add_library(args, kwargs) (line 1595)
        _add_library_call_result_42288 = invoke(stypy.reporting.localization.Localization(__file__, 1595, 8), _add_library_42282, *[name_42283, sources_42284, install_dir_42285, build_info_42286], **kwargs_42287)
        
        
        # Call to append(...): (line 1596)
        # Processing the call arguments (line 1596)
        
        # Call to InstallableLib(...): (line 1596)
        # Processing the call arguments (line 1596)
        # Getting the type of 'name' (line 1596)
        name_42293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 55), 'name', False)
        # Getting the type of 'build_info' (line 1596)
        build_info_42294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 61), 'build_info', False)
        # Getting the type of 'install_dir' (line 1596)
        install_dir_42295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 73), 'install_dir', False)
        # Processing the call keyword arguments (line 1596)
        kwargs_42296 = {}
        # Getting the type of 'InstallableLib' (line 1596)
        InstallableLib_42292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 40), 'InstallableLib', False)
        # Calling InstallableLib(args, kwargs) (line 1596)
        InstallableLib_call_result_42297 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 40), InstallableLib_42292, *[name_42293, build_info_42294, install_dir_42295], **kwargs_42296)
        
        # Processing the call keyword arguments (line 1596)
        kwargs_42298 = {}
        # Getting the type of 'self' (line 1596)
        self_42289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 8), 'self', False)
        # Obtaining the member 'installed_libraries' of a type (line 1596)
        installed_libraries_42290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 8), self_42289, 'installed_libraries')
        # Obtaining the member 'append' of a type (line 1596)
        append_42291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 8), installed_libraries_42290, 'append')
        # Calling append(args, kwargs) (line 1596)
        append_call_result_42299 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 8), append_42291, *[InstallableLib_call_result_42297], **kwargs_42298)
        
        
        # ################# End of 'add_installed_library(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_installed_library' in the type store
        # Getting the type of 'stypy_return_type' (line 1547)
        stypy_return_type_42300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42300)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_installed_library'
        return stypy_return_type_42300


    @norecursion
    def add_npy_pkg_config(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1598)
        None_42301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 67), 'None')
        defaults = [None_42301]
        # Create a new context for function 'add_npy_pkg_config'
        module_type_store = module_type_store.open_function_context('add_npy_pkg_config', 1598, 4, False)
        # Assigning a type to the variable 'self' (line 1599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_function_name', 'Configuration.add_npy_pkg_config')
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_param_names_list', ['template', 'install_dir', 'subst_dict'])
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_npy_pkg_config.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_npy_pkg_config', ['template', 'install_dir', 'subst_dict'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_npy_pkg_config', localization, ['template', 'install_dir', 'subst_dict'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_npy_pkg_config(...)' code ##################

        str_42302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1657, (-1)), 'str', "\n        Generate and install a npy-pkg config file from a template.\n\n        The config file generated from `template` is installed in the\n        given install directory, using `subst_dict` for variable substitution.\n\n        Parameters\n        ----------\n        template : str\n            The path of the template, relatively to the current package path.\n        install_dir : str\n            Where to install the npy-pkg config file, relatively to the current\n            package path.\n        subst_dict : dict, optional\n            If given, any string of the form ``@key@`` will be replaced by\n            ``subst_dict[key]`` in the template file when installed. The install\n            prefix is always available through the variable ``@prefix@``, since the\n            install prefix is not easy to get reliably from setup.py.\n\n        See also\n        --------\n        add_installed_library, get_info\n\n        Notes\n        -----\n        This works for both standard installs and in-place builds, i.e. the\n        ``@prefix@`` refer to the source directory for in-place builds.\n\n        Examples\n        --------\n        ::\n\n            config.add_npy_pkg_config('foo.ini.in', 'lib', {'foo': bar})\n\n        Assuming the foo.ini.in file has the following content::\n\n            [meta]\n            Name=@foo@\n            Version=1.0\n            Description=dummy description\n\n            [default]\n            Cflags=-I@prefix@/include\n            Libs=\n\n        The generated file will have the following content::\n\n            [meta]\n            Name=bar\n            Version=1.0\n            Description=dummy description\n\n            [default]\n            Cflags=-Iprefix_dir/include\n            Libs=\n\n        and will be installed as foo.ini in the 'lib' subpath.\n\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 1658)
        # Getting the type of 'subst_dict' (line 1658)
        subst_dict_42303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 11), 'subst_dict')
        # Getting the type of 'None' (line 1658)
        None_42304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 25), 'None')
        
        (may_be_42305, more_types_in_union_42306) = may_be_none(subst_dict_42303, None_42304)

        if may_be_42305:

            if more_types_in_union_42306:
                # Runtime conditional SSA (line 1658)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Dict to a Name (line 1659):
            
            # Assigning a Dict to a Name (line 1659):
            
            # Obtaining an instance of the builtin type 'dict' (line 1659)
            dict_42307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 25), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 1659)
            
            # Assigning a type to the variable 'subst_dict' (line 1659)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 12), 'subst_dict', dict_42307)

            if more_types_in_union_42306:
                # SSA join for if statement (line 1658)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Subscript to a Name (line 1660):
        
        # Assigning a Subscript to a Name (line 1660):
        
        # Obtaining the type of the subscript
        int_42308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1660, 46), 'int')
        
        # Call to splitext(...): (line 1660)
        # Processing the call arguments (line 1660)
        # Getting the type of 'template' (line 1660)
        template_42312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 36), 'template', False)
        # Processing the call keyword arguments (line 1660)
        kwargs_42313 = {}
        # Getting the type of 'os' (line 1660)
        os_42309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 1660)
        path_42310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 19), os_42309, 'path')
        # Obtaining the member 'splitext' of a type (line 1660)
        splitext_42311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 19), path_42310, 'splitext')
        # Calling splitext(args, kwargs) (line 1660)
        splitext_call_result_42314 = invoke(stypy.reporting.localization.Localization(__file__, 1660, 19), splitext_42311, *[template_42312], **kwargs_42313)
        
        # Obtaining the member '__getitem__' of a type (line 1660)
        getitem___42315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 19), splitext_call_result_42314, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1660)
        subscript_call_result_42316 = invoke(stypy.reporting.localization.Localization(__file__, 1660, 19), getitem___42315, int_42308)
        
        # Assigning a type to the variable 'basename' (line 1660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1660, 8), 'basename', subscript_call_result_42316)
        
        # Assigning a Call to a Name (line 1661):
        
        # Assigning a Call to a Name (line 1661):
        
        # Call to join(...): (line 1661)
        # Processing the call arguments (line 1661)
        # Getting the type of 'self' (line 1661)
        self_42320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 32), 'self', False)
        # Obtaining the member 'package_path' of a type (line 1661)
        package_path_42321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 32), self_42320, 'package_path')
        # Getting the type of 'template' (line 1661)
        template_42322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 51), 'template', False)
        # Processing the call keyword arguments (line 1661)
        kwargs_42323 = {}
        # Getting the type of 'os' (line 1661)
        os_42317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 1661)
        path_42318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 19), os_42317, 'path')
        # Obtaining the member 'join' of a type (line 1661)
        join_42319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 19), path_42318, 'join')
        # Calling join(args, kwargs) (line 1661)
        join_call_result_42324 = invoke(stypy.reporting.localization.Localization(__file__, 1661, 19), join_42319, *[package_path_42321, template_42322], **kwargs_42323)
        
        # Assigning a type to the variable 'template' (line 1661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 8), 'template', join_call_result_42324)
        
        
        # Getting the type of 'self' (line 1663)
        self_42325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 11), 'self')
        # Obtaining the member 'name' of a type (line 1663)
        name_42326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 11), self_42325, 'name')
        # Getting the type of 'self' (line 1663)
        self_42327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 24), 'self')
        # Obtaining the member 'installed_pkg_config' of a type (line 1663)
        installed_pkg_config_42328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 24), self_42327, 'installed_pkg_config')
        # Applying the binary operator 'in' (line 1663)
        result_contains_42329 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 11), 'in', name_42326, installed_pkg_config_42328)
        
        # Testing the type of an if condition (line 1663)
        if_condition_42330 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1663, 8), result_contains_42329)
        # Assigning a type to the variable 'if_condition_42330' (line 1663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1663, 8), 'if_condition_42330', if_condition_42330)
        # SSA begins for if statement (line 1663)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1664)
        # Processing the call arguments (line 1664)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1664)
        tuple_42338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, 57), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1664)
        # Adding element type (line 1664)
        # Getting the type of 'template' (line 1664)
        template_42339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 57), 'template', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1664, 57), tuple_42338, template_42339)
        # Adding element type (line 1664)
        # Getting the type of 'install_dir' (line 1664)
        install_dir_42340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 67), 'install_dir', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1664, 57), tuple_42338, install_dir_42340)
        # Adding element type (line 1664)
        # Getting the type of 'subst_dict' (line 1665)
        subst_dict_42341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 16), 'subst_dict', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1664, 57), tuple_42338, subst_dict_42341)
        
        # Processing the call keyword arguments (line 1664)
        kwargs_42342 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 1664)
        self_42331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 38), 'self', False)
        # Obtaining the member 'name' of a type (line 1664)
        name_42332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 38), self_42331, 'name')
        # Getting the type of 'self' (line 1664)
        self_42333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 12), 'self', False)
        # Obtaining the member 'installed_pkg_config' of a type (line 1664)
        installed_pkg_config_42334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 12), self_42333, 'installed_pkg_config')
        # Obtaining the member '__getitem__' of a type (line 1664)
        getitem___42335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 12), installed_pkg_config_42334, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1664)
        subscript_call_result_42336 = invoke(stypy.reporting.localization.Localization(__file__, 1664, 12), getitem___42335, name_42332)
        
        # Obtaining the member 'append' of a type (line 1664)
        append_42337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 12), subscript_call_result_42336, 'append')
        # Calling append(args, kwargs) (line 1664)
        append_call_result_42343 = invoke(stypy.reporting.localization.Localization(__file__, 1664, 12), append_42337, *[tuple_42338], **kwargs_42342)
        
        # SSA branch for the else part of an if statement (line 1663)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Subscript (line 1667):
        
        # Assigning a List to a Subscript (line 1667):
        
        # Obtaining an instance of the builtin type 'list' (line 1667)
        list_42344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1667)
        # Adding element type (line 1667)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1667)
        tuple_42345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 53), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1667)
        # Adding element type (line 1667)
        # Getting the type of 'template' (line 1667)
        template_42346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 53), 'template')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 53), tuple_42345, template_42346)
        # Adding element type (line 1667)
        # Getting the type of 'install_dir' (line 1667)
        install_dir_42347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 63), 'install_dir')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 53), tuple_42345, install_dir_42347)
        # Adding element type (line 1667)
        # Getting the type of 'subst_dict' (line 1668)
        subst_dict_42348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 16), 'subst_dict')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 53), tuple_42345, subst_dict_42348)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 51), list_42344, tuple_42345)
        
        # Getting the type of 'self' (line 1667)
        self_42349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 12), 'self')
        # Obtaining the member 'installed_pkg_config' of a type (line 1667)
        installed_pkg_config_42350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 12), self_42349, 'installed_pkg_config')
        # Getting the type of 'self' (line 1667)
        self_42351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 38), 'self')
        # Obtaining the member 'name' of a type (line 1667)
        name_42352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 38), self_42351, 'name')
        # Storing an element on a container (line 1667)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 12), installed_pkg_config_42350, (name_42352, list_42344))
        # SSA join for if statement (line 1663)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'add_npy_pkg_config(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_npy_pkg_config' in the type store
        # Getting the type of 'stypy_return_type' (line 1598)
        stypy_return_type_42353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42353)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_npy_pkg_config'
        return stypy_return_type_42353


    @norecursion
    def add_scripts(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_scripts'
        module_type_store = module_type_store.open_function_context('add_scripts', 1671, 4, False)
        # Assigning a type to the variable 'self' (line 1672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.add_scripts.__dict__.__setitem__('stypy_localization', localization)
        Configuration.add_scripts.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.add_scripts.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.add_scripts.__dict__.__setitem__('stypy_function_name', 'Configuration.add_scripts')
        Configuration.add_scripts.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.add_scripts.__dict__.__setitem__('stypy_varargs_param_name', 'files')
        Configuration.add_scripts.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.add_scripts.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.add_scripts.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.add_scripts.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.add_scripts.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.add_scripts', [], 'files', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_scripts', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_scripts(...)' code ##################

        str_42354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, (-1)), 'str', 'Add scripts to configuration.\n\n        Add the sequence of files to the beginning of the scripts list.\n        Scripts will be installed under the <prefix>/bin/ directory.\n\n        ')
        
        # Assigning a Call to a Name (line 1678):
        
        # Assigning a Call to a Name (line 1678):
        
        # Call to paths(...): (line 1678)
        # Processing the call arguments (line 1678)
        # Getting the type of 'files' (line 1678)
        files_42357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 29), 'files', False)
        # Processing the call keyword arguments (line 1678)
        kwargs_42358 = {}
        # Getting the type of 'self' (line 1678)
        self_42355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 18), 'self', False)
        # Obtaining the member 'paths' of a type (line 1678)
        paths_42356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 18), self_42355, 'paths')
        # Calling paths(args, kwargs) (line 1678)
        paths_call_result_42359 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 18), paths_42356, *[files_42357], **kwargs_42358)
        
        # Assigning a type to the variable 'scripts' (line 1678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 8), 'scripts', paths_call_result_42359)
        
        # Assigning a Call to a Name (line 1679):
        
        # Assigning a Call to a Name (line 1679):
        
        # Call to get_distribution(...): (line 1679)
        # Processing the call keyword arguments (line 1679)
        kwargs_42362 = {}
        # Getting the type of 'self' (line 1679)
        self_42360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 15), 'self', False)
        # Obtaining the member 'get_distribution' of a type (line 1679)
        get_distribution_42361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 15), self_42360, 'get_distribution')
        # Calling get_distribution(args, kwargs) (line 1679)
        get_distribution_call_result_42363 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 15), get_distribution_42361, *[], **kwargs_42362)
        
        # Assigning a type to the variable 'dist' (line 1679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 8), 'dist', get_distribution_call_result_42363)
        
        # Type idiom detected: calculating its left and rigth part (line 1680)
        # Getting the type of 'dist' (line 1680)
        dist_42364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 8), 'dist')
        # Getting the type of 'None' (line 1680)
        None_42365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 23), 'None')
        
        (may_be_42366, more_types_in_union_42367) = may_not_be_none(dist_42364, None_42365)

        if may_be_42366:

            if more_types_in_union_42367:
                # Runtime conditional SSA (line 1680)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 1681)
            # Getting the type of 'dist' (line 1681)
            dist_42368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 15), 'dist')
            # Obtaining the member 'scripts' of a type (line 1681)
            scripts_42369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 15), dist_42368, 'scripts')
            # Getting the type of 'None' (line 1681)
            None_42370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 31), 'None')
            
            (may_be_42371, more_types_in_union_42372) = may_be_none(scripts_42369, None_42370)

            if may_be_42371:

                if more_types_in_union_42372:
                    # Runtime conditional SSA (line 1681)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a List to a Attribute (line 1682):
                
                # Assigning a List to a Attribute (line 1682):
                
                # Obtaining an instance of the builtin type 'list' (line 1682)
                list_42373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1682, 31), 'list')
                # Adding type elements to the builtin type 'list' instance (line 1682)
                
                # Getting the type of 'dist' (line 1682)
                dist_42374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 16), 'dist')
                # Setting the type of the member 'scripts' of a type (line 1682)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 16), dist_42374, 'scripts', list_42373)

                if more_types_in_union_42372:
                    # SSA join for if statement (line 1681)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Call to extend(...): (line 1683)
            # Processing the call arguments (line 1683)
            # Getting the type of 'scripts' (line 1683)
            scripts_42378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 32), 'scripts', False)
            # Processing the call keyword arguments (line 1683)
            kwargs_42379 = {}
            # Getting the type of 'dist' (line 1683)
            dist_42375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 12), 'dist', False)
            # Obtaining the member 'scripts' of a type (line 1683)
            scripts_42376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 12), dist_42375, 'scripts')
            # Obtaining the member 'extend' of a type (line 1683)
            extend_42377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 12), scripts_42376, 'extend')
            # Calling extend(args, kwargs) (line 1683)
            extend_call_result_42380 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 12), extend_42377, *[scripts_42378], **kwargs_42379)
            

            if more_types_in_union_42367:
                # Runtime conditional SSA for else branch (line 1680)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_42366) or more_types_in_union_42367):
            
            # Call to extend(...): (line 1685)
            # Processing the call arguments (line 1685)
            # Getting the type of 'scripts' (line 1685)
            scripts_42384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 32), 'scripts', False)
            # Processing the call keyword arguments (line 1685)
            kwargs_42385 = {}
            # Getting the type of 'self' (line 1685)
            self_42381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 12), 'self', False)
            # Obtaining the member 'scripts' of a type (line 1685)
            scripts_42382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 12), self_42381, 'scripts')
            # Obtaining the member 'extend' of a type (line 1685)
            extend_42383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 12), scripts_42382, 'extend')
            # Calling extend(args, kwargs) (line 1685)
            extend_call_result_42386 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 12), extend_42383, *[scripts_42384], **kwargs_42385)
            

            if (may_be_42366 and more_types_in_union_42367):
                # SSA join for if statement (line 1680)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'add_scripts(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_scripts' in the type store
        # Getting the type of 'stypy_return_type' (line 1671)
        stypy_return_type_42387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42387)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_scripts'
        return stypy_return_type_42387


    @norecursion
    def dict_append(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dict_append'
        module_type_store = module_type_store.open_function_context('dict_append', 1687, 4, False)
        # Assigning a type to the variable 'self' (line 1688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.dict_append.__dict__.__setitem__('stypy_localization', localization)
        Configuration.dict_append.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.dict_append.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.dict_append.__dict__.__setitem__('stypy_function_name', 'Configuration.dict_append')
        Configuration.dict_append.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.dict_append.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.dict_append.__dict__.__setitem__('stypy_kwargs_param_name', 'dict')
        Configuration.dict_append.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.dict_append.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.dict_append.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.dict_append.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.dict_append', [], None, 'dict', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dict_append', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dict_append(...)' code ##################

        
        # Getting the type of 'self' (line 1688)
        self_42388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 19), 'self')
        # Obtaining the member 'list_keys' of a type (line 1688)
        list_keys_42389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 19), self_42388, 'list_keys')
        # Testing the type of a for loop iterable (line 1688)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1688, 8), list_keys_42389)
        # Getting the type of the for loop variable (line 1688)
        for_loop_var_42390 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1688, 8), list_keys_42389)
        # Assigning a type to the variable 'key' (line 1688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 8), 'key', for_loop_var_42390)
        # SSA begins for a for statement (line 1688)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1689):
        
        # Assigning a Call to a Name (line 1689):
        
        # Call to getattr(...): (line 1689)
        # Processing the call arguments (line 1689)
        # Getting the type of 'self' (line 1689)
        self_42392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 24), 'self', False)
        # Getting the type of 'key' (line 1689)
        key_42393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 30), 'key', False)
        # Processing the call keyword arguments (line 1689)
        kwargs_42394 = {}
        # Getting the type of 'getattr' (line 1689)
        getattr_42391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 16), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1689)
        getattr_call_result_42395 = invoke(stypy.reporting.localization.Localization(__file__, 1689, 16), getattr_42391, *[self_42392, key_42393], **kwargs_42394)
        
        # Assigning a type to the variable 'a' (line 1689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 12), 'a', getattr_call_result_42395)
        
        # Call to extend(...): (line 1690)
        # Processing the call arguments (line 1690)
        
        # Call to get(...): (line 1690)
        # Processing the call arguments (line 1690)
        # Getting the type of 'key' (line 1690)
        key_42400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 30), 'key', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1690)
        list_42401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1690)
        
        # Processing the call keyword arguments (line 1690)
        kwargs_42402 = {}
        # Getting the type of 'dict' (line 1690)
        dict_42398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 21), 'dict', False)
        # Obtaining the member 'get' of a type (line 1690)
        get_42399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 21), dict_42398, 'get')
        # Calling get(args, kwargs) (line 1690)
        get_call_result_42403 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 21), get_42399, *[key_42400, list_42401], **kwargs_42402)
        
        # Processing the call keyword arguments (line 1690)
        kwargs_42404 = {}
        # Getting the type of 'a' (line 1690)
        a_42396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 12), 'a', False)
        # Obtaining the member 'extend' of a type (line 1690)
        extend_42397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 12), a_42396, 'extend')
        # Calling extend(args, kwargs) (line 1690)
        extend_call_result_42405 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 12), extend_42397, *[get_call_result_42403], **kwargs_42404)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1691)
        self_42406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 19), 'self')
        # Obtaining the member 'dict_keys' of a type (line 1691)
        dict_keys_42407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 19), self_42406, 'dict_keys')
        # Testing the type of a for loop iterable (line 1691)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1691, 8), dict_keys_42407)
        # Getting the type of the for loop variable (line 1691)
        for_loop_var_42408 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1691, 8), dict_keys_42407)
        # Assigning a type to the variable 'key' (line 1691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 8), 'key', for_loop_var_42408)
        # SSA begins for a for statement (line 1691)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1692):
        
        # Assigning a Call to a Name (line 1692):
        
        # Call to getattr(...): (line 1692)
        # Processing the call arguments (line 1692)
        # Getting the type of 'self' (line 1692)
        self_42410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 24), 'self', False)
        # Getting the type of 'key' (line 1692)
        key_42411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 30), 'key', False)
        # Processing the call keyword arguments (line 1692)
        kwargs_42412 = {}
        # Getting the type of 'getattr' (line 1692)
        getattr_42409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 16), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1692)
        getattr_call_result_42413 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 16), getattr_42409, *[self_42410, key_42411], **kwargs_42412)
        
        # Assigning a type to the variable 'a' (line 1692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 12), 'a', getattr_call_result_42413)
        
        # Call to update(...): (line 1693)
        # Processing the call arguments (line 1693)
        
        # Call to get(...): (line 1693)
        # Processing the call arguments (line 1693)
        # Getting the type of 'key' (line 1693)
        key_42418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 30), 'key', False)
        
        # Obtaining an instance of the builtin type 'dict' (line 1693)
        dict_42419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 35), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1693)
        
        # Processing the call keyword arguments (line 1693)
        kwargs_42420 = {}
        # Getting the type of 'dict' (line 1693)
        dict_42416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 21), 'dict', False)
        # Obtaining the member 'get' of a type (line 1693)
        get_42417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 21), dict_42416, 'get')
        # Calling get(args, kwargs) (line 1693)
        get_call_result_42421 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 21), get_42417, *[key_42418, dict_42419], **kwargs_42420)
        
        # Processing the call keyword arguments (line 1693)
        kwargs_42422 = {}
        # Getting the type of 'a' (line 1693)
        a_42414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 12), 'a', False)
        # Obtaining the member 'update' of a type (line 1693)
        update_42415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 12), a_42414, 'update')
        # Calling update(args, kwargs) (line 1693)
        update_call_result_42423 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 12), update_42415, *[get_call_result_42421], **kwargs_42422)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1694):
        
        # Assigning a BinOp to a Name (line 1694):
        # Getting the type of 'self' (line 1694)
        self_42424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 21), 'self')
        # Obtaining the member 'list_keys' of a type (line 1694)
        list_keys_42425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 21), self_42424, 'list_keys')
        # Getting the type of 'self' (line 1694)
        self_42426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 38), 'self')
        # Obtaining the member 'dict_keys' of a type (line 1694)
        dict_keys_42427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 38), self_42426, 'dict_keys')
        # Applying the binary operator '+' (line 1694)
        result_add_42428 = python_operator(stypy.reporting.localization.Localization(__file__, 1694, 21), '+', list_keys_42425, dict_keys_42427)
        
        # Getting the type of 'self' (line 1694)
        self_42429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 55), 'self')
        # Obtaining the member 'extra_keys' of a type (line 1694)
        extra_keys_42430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 55), self_42429, 'extra_keys')
        # Applying the binary operator '+' (line 1694)
        result_add_42431 = python_operator(stypy.reporting.localization.Localization(__file__, 1694, 53), '+', result_add_42428, extra_keys_42430)
        
        # Assigning a type to the variable 'known_keys' (line 1694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1694, 8), 'known_keys', result_add_42431)
        
        
        # Call to keys(...): (line 1695)
        # Processing the call keyword arguments (line 1695)
        kwargs_42434 = {}
        # Getting the type of 'dict' (line 1695)
        dict_42432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 19), 'dict', False)
        # Obtaining the member 'keys' of a type (line 1695)
        keys_42433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1695, 19), dict_42432, 'keys')
        # Calling keys(args, kwargs) (line 1695)
        keys_call_result_42435 = invoke(stypy.reporting.localization.Localization(__file__, 1695, 19), keys_42433, *[], **kwargs_42434)
        
        # Testing the type of a for loop iterable (line 1695)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1695, 8), keys_call_result_42435)
        # Getting the type of the for loop variable (line 1695)
        for_loop_var_42436 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1695, 8), keys_call_result_42435)
        # Assigning a type to the variable 'key' (line 1695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 8), 'key', for_loop_var_42436)
        # SSA begins for a for statement (line 1695)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'key' (line 1696)
        key_42437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 15), 'key')
        # Getting the type of 'known_keys' (line 1696)
        known_keys_42438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 26), 'known_keys')
        # Applying the binary operator 'notin' (line 1696)
        result_contains_42439 = python_operator(stypy.reporting.localization.Localization(__file__, 1696, 15), 'notin', key_42437, known_keys_42438)
        
        # Testing the type of an if condition (line 1696)
        if_condition_42440 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1696, 12), result_contains_42439)
        # Assigning a type to the variable 'if_condition_42440' (line 1696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1696, 12), 'if_condition_42440', if_condition_42440)
        # SSA begins for if statement (line 1696)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1697):
        
        # Assigning a Call to a Name (line 1697):
        
        # Call to getattr(...): (line 1697)
        # Processing the call arguments (line 1697)
        # Getting the type of 'self' (line 1697)
        self_42442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 28), 'self', False)
        # Getting the type of 'key' (line 1697)
        key_42443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 34), 'key', False)
        # Getting the type of 'None' (line 1697)
        None_42444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 39), 'None', False)
        # Processing the call keyword arguments (line 1697)
        kwargs_42445 = {}
        # Getting the type of 'getattr' (line 1697)
        getattr_42441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 20), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1697)
        getattr_call_result_42446 = invoke(stypy.reporting.localization.Localization(__file__, 1697, 20), getattr_42441, *[self_42442, key_42443, None_42444], **kwargs_42445)
        
        # Assigning a type to the variable 'a' (line 1697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 16), 'a', getattr_call_result_42446)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'a' (line 1698)
        a_42447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 19), 'a')
        
        # Getting the type of 'a' (line 1698)
        a_42448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 25), 'a')
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 1698)
        key_42449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 33), 'key')
        # Getting the type of 'dict' (line 1698)
        dict_42450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 28), 'dict')
        # Obtaining the member '__getitem__' of a type (line 1698)
        getitem___42451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 28), dict_42450, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1698)
        subscript_call_result_42452 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 28), getitem___42451, key_42449)
        
        # Applying the binary operator '==' (line 1698)
        result_eq_42453 = python_operator(stypy.reporting.localization.Localization(__file__, 1698, 25), '==', a_42448, subscript_call_result_42452)
        
        # Applying the binary operator 'and' (line 1698)
        result_and_keyword_42454 = python_operator(stypy.reporting.localization.Localization(__file__, 1698, 19), 'and', a_42447, result_eq_42453)
        
        # Testing the type of an if condition (line 1698)
        if_condition_42455 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1698, 16), result_and_keyword_42454)
        # Assigning a type to the variable 'if_condition_42455' (line 1698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1698, 16), 'if_condition_42455', if_condition_42455)
        # SSA begins for if statement (line 1698)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1698)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to warn(...): (line 1699)
        # Processing the call arguments (line 1699)
        str_42458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1699, 26), 'str', 'Inheriting attribute %r=%r from %r')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1700)
        tuple_42459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1700, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1700)
        # Adding element type (line 1700)
        # Getting the type of 'key' (line 1700)
        key_42460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 29), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1700, 29), tuple_42459, key_42460)
        # Adding element type (line 1700)
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 1700)
        key_42461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 39), 'key', False)
        # Getting the type of 'dict' (line 1700)
        dict_42462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 34), 'dict', False)
        # Obtaining the member '__getitem__' of a type (line 1700)
        getitem___42463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 34), dict_42462, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1700)
        subscript_call_result_42464 = invoke(stypy.reporting.localization.Localization(__file__, 1700, 34), getitem___42463, key_42461)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1700, 29), tuple_42459, subscript_call_result_42464)
        # Adding element type (line 1700)
        
        # Call to get(...): (line 1700)
        # Processing the call arguments (line 1700)
        str_42467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1700, 54), 'str', 'name')
        str_42468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1700, 62), 'str', '?')
        # Processing the call keyword arguments (line 1700)
        kwargs_42469 = {}
        # Getting the type of 'dict' (line 1700)
        dict_42465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 45), 'dict', False)
        # Obtaining the member 'get' of a type (line 1700)
        get_42466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 45), dict_42465, 'get')
        # Calling get(args, kwargs) (line 1700)
        get_call_result_42470 = invoke(stypy.reporting.localization.Localization(__file__, 1700, 45), get_42466, *[str_42467, str_42468], **kwargs_42469)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1700, 29), tuple_42459, get_call_result_42470)
        
        # Applying the binary operator '%' (line 1699)
        result_mod_42471 = python_operator(stypy.reporting.localization.Localization(__file__, 1699, 26), '%', str_42458, tuple_42459)
        
        # Processing the call keyword arguments (line 1699)
        kwargs_42472 = {}
        # Getting the type of 'self' (line 1699)
        self_42456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 16), 'self', False)
        # Obtaining the member 'warn' of a type (line 1699)
        warn_42457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1699, 16), self_42456, 'warn')
        # Calling warn(args, kwargs) (line 1699)
        warn_call_result_42473 = invoke(stypy.reporting.localization.Localization(__file__, 1699, 16), warn_42457, *[result_mod_42471], **kwargs_42472)
        
        
        # Call to setattr(...): (line 1701)
        # Processing the call arguments (line 1701)
        # Getting the type of 'self' (line 1701)
        self_42475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 24), 'self', False)
        # Getting the type of 'key' (line 1701)
        key_42476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 30), 'key', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 1701)
        key_42477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 40), 'key', False)
        # Getting the type of 'dict' (line 1701)
        dict_42478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 35), 'dict', False)
        # Obtaining the member '__getitem__' of a type (line 1701)
        getitem___42479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 35), dict_42478, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1701)
        subscript_call_result_42480 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 35), getitem___42479, key_42477)
        
        # Processing the call keyword arguments (line 1701)
        kwargs_42481 = {}
        # Getting the type of 'setattr' (line 1701)
        setattr_42474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 16), 'setattr', False)
        # Calling setattr(args, kwargs) (line 1701)
        setattr_call_result_42482 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 16), setattr_42474, *[self_42475, key_42476, subscript_call_result_42480], **kwargs_42481)
        
        
        # Call to append(...): (line 1702)
        # Processing the call arguments (line 1702)
        # Getting the type of 'key' (line 1702)
        key_42486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 39), 'key', False)
        # Processing the call keyword arguments (line 1702)
        kwargs_42487 = {}
        # Getting the type of 'self' (line 1702)
        self_42483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 16), 'self', False)
        # Obtaining the member 'extra_keys' of a type (line 1702)
        extra_keys_42484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 16), self_42483, 'extra_keys')
        # Obtaining the member 'append' of a type (line 1702)
        append_42485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 16), extra_keys_42484, 'append')
        # Calling append(args, kwargs) (line 1702)
        append_call_result_42488 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 16), append_42485, *[key_42486], **kwargs_42487)
        
        # SSA branch for the else part of an if statement (line 1696)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 1703)
        key_42489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 17), 'key')
        # Getting the type of 'self' (line 1703)
        self_42490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 24), 'self')
        # Obtaining the member 'extra_keys' of a type (line 1703)
        extra_keys_42491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 24), self_42490, 'extra_keys')
        # Applying the binary operator 'in' (line 1703)
        result_contains_42492 = python_operator(stypy.reporting.localization.Localization(__file__, 1703, 17), 'in', key_42489, extra_keys_42491)
        
        # Testing the type of an if condition (line 1703)
        if_condition_42493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1703, 17), result_contains_42492)
        # Assigning a type to the variable 'if_condition_42493' (line 1703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 17), 'if_condition_42493', if_condition_42493)
        # SSA begins for if statement (line 1703)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to info(...): (line 1704)
        # Processing the call arguments (line 1704)
        str_42496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 26), 'str', 'Ignoring attempt to set %r (from %r to %r)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1705)
        tuple_42497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1705)
        # Adding element type (line 1705)
        # Getting the type of 'key' (line 1705)
        key_42498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 29), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1705, 29), tuple_42497, key_42498)
        # Adding element type (line 1705)
        
        # Call to getattr(...): (line 1705)
        # Processing the call arguments (line 1705)
        # Getting the type of 'self' (line 1705)
        self_42500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 42), 'self', False)
        # Getting the type of 'key' (line 1705)
        key_42501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 48), 'key', False)
        # Processing the call keyword arguments (line 1705)
        kwargs_42502 = {}
        # Getting the type of 'getattr' (line 1705)
        getattr_42499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 34), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1705)
        getattr_call_result_42503 = invoke(stypy.reporting.localization.Localization(__file__, 1705, 34), getattr_42499, *[self_42500, key_42501], **kwargs_42502)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1705, 29), tuple_42497, getattr_call_result_42503)
        # Adding element type (line 1705)
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 1705)
        key_42504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 59), 'key', False)
        # Getting the type of 'dict' (line 1705)
        dict_42505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 54), 'dict', False)
        # Obtaining the member '__getitem__' of a type (line 1705)
        getitem___42506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1705, 54), dict_42505, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1705)
        subscript_call_result_42507 = invoke(stypy.reporting.localization.Localization(__file__, 1705, 54), getitem___42506, key_42504)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1705, 29), tuple_42497, subscript_call_result_42507)
        
        # Applying the binary operator '%' (line 1704)
        result_mod_42508 = python_operator(stypy.reporting.localization.Localization(__file__, 1704, 26), '%', str_42496, tuple_42497)
        
        # Processing the call keyword arguments (line 1704)
        kwargs_42509 = {}
        # Getting the type of 'self' (line 1704)
        self_42494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 16), 'self', False)
        # Obtaining the member 'info' of a type (line 1704)
        info_42495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 16), self_42494, 'info')
        # Calling info(args, kwargs) (line 1704)
        info_call_result_42510 = invoke(stypy.reporting.localization.Localization(__file__, 1704, 16), info_42495, *[result_mod_42508], **kwargs_42509)
        
        # SSA branch for the else part of an if statement (line 1703)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 1706)
        key_42511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 17), 'key')
        # Getting the type of 'known_keys' (line 1706)
        known_keys_42512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 24), 'known_keys')
        # Applying the binary operator 'in' (line 1706)
        result_contains_42513 = python_operator(stypy.reporting.localization.Localization(__file__, 1706, 17), 'in', key_42511, known_keys_42512)
        
        # Testing the type of an if condition (line 1706)
        if_condition_42514 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1706, 17), result_contains_42513)
        # Assigning a type to the variable 'if_condition_42514' (line 1706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1706, 17), 'if_condition_42514', if_condition_42514)
        # SSA begins for if statement (line 1706)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        pass
        # SSA branch for the else part of an if statement (line 1706)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1710)
        # Processing the call arguments (line 1710)
        str_42516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 33), 'str', "Don't know about key=%r")
        # Getting the type of 'key' (line 1710)
        key_42517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 62), 'key', False)
        # Applying the binary operator '%' (line 1710)
        result_mod_42518 = python_operator(stypy.reporting.localization.Localization(__file__, 1710, 33), '%', str_42516, key_42517)
        
        # Processing the call keyword arguments (line 1710)
        kwargs_42519 = {}
        # Getting the type of 'ValueError' (line 1710)
        ValueError_42515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1710)
        ValueError_call_result_42520 = invoke(stypy.reporting.localization.Localization(__file__, 1710, 22), ValueError_42515, *[result_mod_42518], **kwargs_42519)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1710, 16), ValueError_call_result_42520, 'raise parameter', BaseException)
        # SSA join for if statement (line 1706)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1703)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1696)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'dict_append(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dict_append' in the type store
        # Getting the type of 'stypy_return_type' (line 1687)
        stypy_return_type_42521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42521)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dict_append'
        return stypy_return_type_42521


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1712, 4, False)
        # Assigning a type to the variable 'self' (line 1713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1713, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Configuration.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Configuration.__str__')
        Configuration.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1713, 8))
        
        # 'from pprint import pformat' statement (line 1713)
        from pprint import pformat

        import_from_module(stypy.reporting.localization.Localization(__file__, 1713, 8), 'pprint', None, module_type_store, ['pformat'], [pformat])
        
        
        # Assigning a BinOp to a Name (line 1714):
        
        # Assigning a BinOp to a Name (line 1714):
        # Getting the type of 'self' (line 1714)
        self_42522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 21), 'self')
        # Obtaining the member 'list_keys' of a type (line 1714)
        list_keys_42523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1714, 21), self_42522, 'list_keys')
        # Getting the type of 'self' (line 1714)
        self_42524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 38), 'self')
        # Obtaining the member 'dict_keys' of a type (line 1714)
        dict_keys_42525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1714, 38), self_42524, 'dict_keys')
        # Applying the binary operator '+' (line 1714)
        result_add_42526 = python_operator(stypy.reporting.localization.Localization(__file__, 1714, 21), '+', list_keys_42523, dict_keys_42525)
        
        # Getting the type of 'self' (line 1714)
        self_42527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 55), 'self')
        # Obtaining the member 'extra_keys' of a type (line 1714)
        extra_keys_42528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1714, 55), self_42527, 'extra_keys')
        # Applying the binary operator '+' (line 1714)
        result_add_42529 = python_operator(stypy.reporting.localization.Localization(__file__, 1714, 53), '+', result_add_42526, extra_keys_42528)
        
        # Assigning a type to the variable 'known_keys' (line 1714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 8), 'known_keys', result_add_42529)
        
        # Assigning a BinOp to a Name (line 1715):
        
        # Assigning a BinOp to a Name (line 1715):
        str_42530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 12), 'str', '<')
        int_42531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 16), 'int')
        str_42532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 18), 'str', '-')
        # Applying the binary operator '*' (line 1715)
        result_mul_42533 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 16), '*', int_42531, str_42532)
        
        # Applying the binary operator '+' (line 1715)
        result_add_42534 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 12), '+', str_42530, result_mul_42533)
        
        str_42535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 24), 'str', '\n')
        # Applying the binary operator '+' (line 1715)
        result_add_42536 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 22), '+', result_add_42534, str_42535)
        
        # Assigning a type to the variable 's' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 8), 's', result_add_42536)
        
        # Getting the type of 's' (line 1716)
        s_42537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 's')
        str_42538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 13), 'str', 'Configuration of ')
        # Getting the type of 'self' (line 1716)
        self_42539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 33), 'self')
        # Obtaining the member 'name' of a type (line 1716)
        name_42540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 33), self_42539, 'name')
        # Applying the binary operator '+' (line 1716)
        result_add_42541 = python_operator(stypy.reporting.localization.Localization(__file__, 1716, 13), '+', str_42538, name_42540)
        
        str_42542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 43), 'str', ':\n')
        # Applying the binary operator '+' (line 1716)
        result_add_42543 = python_operator(stypy.reporting.localization.Localization(__file__, 1716, 42), '+', result_add_42541, str_42542)
        
        # Applying the binary operator '+=' (line 1716)
        result_iadd_42544 = python_operator(stypy.reporting.localization.Localization(__file__, 1716, 8), '+=', s_42537, result_add_42543)
        # Assigning a type to the variable 's' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 's', result_iadd_42544)
        
        
        # Call to sort(...): (line 1717)
        # Processing the call keyword arguments (line 1717)
        kwargs_42547 = {}
        # Getting the type of 'known_keys' (line 1717)
        known_keys_42545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 8), 'known_keys', False)
        # Obtaining the member 'sort' of a type (line 1717)
        sort_42546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1717, 8), known_keys_42545, 'sort')
        # Calling sort(args, kwargs) (line 1717)
        sort_call_result_42548 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 8), sort_42546, *[], **kwargs_42547)
        
        
        # Getting the type of 'known_keys' (line 1718)
        known_keys_42549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 17), 'known_keys')
        # Testing the type of a for loop iterable (line 1718)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1718, 8), known_keys_42549)
        # Getting the type of the for loop variable (line 1718)
        for_loop_var_42550 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1718, 8), known_keys_42549)
        # Assigning a type to the variable 'k' (line 1718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 8), 'k', for_loop_var_42550)
        # SSA begins for a for statement (line 1718)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1719):
        
        # Assigning a Call to a Name (line 1719):
        
        # Call to getattr(...): (line 1719)
        # Processing the call arguments (line 1719)
        # Getting the type of 'self' (line 1719)
        self_42552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 24), 'self', False)
        # Getting the type of 'k' (line 1719)
        k_42553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 30), 'k', False)
        # Getting the type of 'None' (line 1719)
        None_42554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 33), 'None', False)
        # Processing the call keyword arguments (line 1719)
        kwargs_42555 = {}
        # Getting the type of 'getattr' (line 1719)
        getattr_42551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 16), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1719)
        getattr_call_result_42556 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 16), getattr_42551, *[self_42552, k_42553, None_42554], **kwargs_42555)
        
        # Assigning a type to the variable 'a' (line 1719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 12), 'a', getattr_call_result_42556)
        
        # Getting the type of 'a' (line 1720)
        a_42557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 15), 'a')
        # Testing the type of an if condition (line 1720)
        if_condition_42558 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1720, 12), a_42557)
        # Assigning a type to the variable 'if_condition_42558' (line 1720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 12), 'if_condition_42558', if_condition_42558)
        # SSA begins for if statement (line 1720)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 's' (line 1721)
        s_42559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 16), 's')
        str_42560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 21), 'str', '%s = %s\n')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1721)
        tuple_42561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1721)
        # Adding element type (line 1721)
        # Getting the type of 'k' (line 1721)
        k_42562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 36), 'k')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1721, 36), tuple_42561, k_42562)
        # Adding element type (line 1721)
        
        # Call to pformat(...): (line 1721)
        # Processing the call arguments (line 1721)
        # Getting the type of 'a' (line 1721)
        a_42564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 47), 'a', False)
        # Processing the call keyword arguments (line 1721)
        kwargs_42565 = {}
        # Getting the type of 'pformat' (line 1721)
        pformat_42563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 39), 'pformat', False)
        # Calling pformat(args, kwargs) (line 1721)
        pformat_call_result_42566 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 39), pformat_42563, *[a_42564], **kwargs_42565)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1721, 36), tuple_42561, pformat_call_result_42566)
        
        # Applying the binary operator '%' (line 1721)
        result_mod_42567 = python_operator(stypy.reporting.localization.Localization(__file__, 1721, 21), '%', str_42560, tuple_42561)
        
        # Applying the binary operator '+=' (line 1721)
        result_iadd_42568 = python_operator(stypy.reporting.localization.Localization(__file__, 1721, 16), '+=', s_42559, result_mod_42567)
        # Assigning a type to the variable 's' (line 1721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 16), 's', result_iadd_42568)
        
        # SSA join for if statement (line 1720)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 's' (line 1722)
        s_42569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 8), 's')
        int_42570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 13), 'int')
        str_42571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 15), 'str', '-')
        # Applying the binary operator '*' (line 1722)
        result_mul_42572 = python_operator(stypy.reporting.localization.Localization(__file__, 1722, 13), '*', int_42570, str_42571)
        
        str_42573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 21), 'str', '>')
        # Applying the binary operator '+' (line 1722)
        result_add_42574 = python_operator(stypy.reporting.localization.Localization(__file__, 1722, 13), '+', result_mul_42572, str_42573)
        
        # Applying the binary operator '+=' (line 1722)
        result_iadd_42575 = python_operator(stypy.reporting.localization.Localization(__file__, 1722, 8), '+=', s_42569, result_add_42574)
        # Assigning a type to the variable 's' (line 1722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 8), 's', result_iadd_42575)
        
        # Getting the type of 's' (line 1723)
        s_42576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 1723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 8), 'stypy_return_type', s_42576)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1712)
        stypy_return_type_42577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42577)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_42577


    @norecursion
    def get_config_cmd(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_config_cmd'
        module_type_store = module_type_store.open_function_context('get_config_cmd', 1725, 4, False)
        # Assigning a type to the variable 'self' (line 1726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_localization', localization)
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_function_name', 'Configuration.get_config_cmd')
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.get_config_cmd.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.get_config_cmd', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_config_cmd', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_config_cmd(...)' code ##################

        str_42578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, (-1)), 'str', '\n        Returns the numpy.distutils config command instance.\n        ')
        
        # Assigning a Call to a Name (line 1729):
        
        # Assigning a Call to a Name (line 1729):
        
        # Call to get_cmd(...): (line 1729)
        # Processing the call arguments (line 1729)
        str_42580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1729, 22), 'str', 'config')
        # Processing the call keyword arguments (line 1729)
        kwargs_42581 = {}
        # Getting the type of 'get_cmd' (line 1729)
        get_cmd_42579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 14), 'get_cmd', False)
        # Calling get_cmd(args, kwargs) (line 1729)
        get_cmd_call_result_42582 = invoke(stypy.reporting.localization.Localization(__file__, 1729, 14), get_cmd_42579, *[str_42580], **kwargs_42581)
        
        # Assigning a type to the variable 'cmd' (line 1729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1729, 8), 'cmd', get_cmd_call_result_42582)
        
        # Call to ensure_finalized(...): (line 1730)
        # Processing the call keyword arguments (line 1730)
        kwargs_42585 = {}
        # Getting the type of 'cmd' (line 1730)
        cmd_42583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'cmd', False)
        # Obtaining the member 'ensure_finalized' of a type (line 1730)
        ensure_finalized_42584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 8), cmd_42583, 'ensure_finalized')
        # Calling ensure_finalized(args, kwargs) (line 1730)
        ensure_finalized_call_result_42586 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 8), ensure_finalized_42584, *[], **kwargs_42585)
        
        
        # Assigning a Num to a Attribute (line 1731):
        
        # Assigning a Num to a Attribute (line 1731):
        int_42587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1731, 26), 'int')
        # Getting the type of 'cmd' (line 1731)
        cmd_42588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 8), 'cmd')
        # Setting the type of the member 'dump_source' of a type (line 1731)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1731, 8), cmd_42588, 'dump_source', int_42587)
        
        # Assigning a Num to a Attribute (line 1732):
        
        # Assigning a Num to a Attribute (line 1732):
        int_42589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1732, 20), 'int')
        # Getting the type of 'cmd' (line 1732)
        cmd_42590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 8), 'cmd')
        # Setting the type of the member 'noisy' of a type (line 1732)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 8), cmd_42590, 'noisy', int_42589)
        
        # Assigning a Call to a Name (line 1733):
        
        # Assigning a Call to a Name (line 1733):
        
        # Call to get(...): (line 1733)
        # Processing the call arguments (line 1733)
        str_42594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, 34), 'str', 'PATH')
        # Processing the call keyword arguments (line 1733)
        kwargs_42595 = {}
        # Getting the type of 'os' (line 1733)
        os_42591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 19), 'os', False)
        # Obtaining the member 'environ' of a type (line 1733)
        environ_42592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 19), os_42591, 'environ')
        # Obtaining the member 'get' of a type (line 1733)
        get_42593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 19), environ_42592, 'get')
        # Calling get(args, kwargs) (line 1733)
        get_call_result_42596 = invoke(stypy.reporting.localization.Localization(__file__, 1733, 19), get_42593, *[str_42594], **kwargs_42595)
        
        # Assigning a type to the variable 'old_path' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 8), 'old_path', get_call_result_42596)
        
        # Getting the type of 'old_path' (line 1734)
        old_path_42597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 11), 'old_path')
        # Testing the type of an if condition (line 1734)
        if_condition_42598 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1734, 8), old_path_42597)
        # Assigning a type to the variable 'if_condition_42598' (line 1734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 8), 'if_condition_42598', if_condition_42598)
        # SSA begins for if statement (line 1734)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1735):
        
        # Assigning a Call to a Name (line 1735):
        
        # Call to join(...): (line 1735)
        # Processing the call arguments (line 1735)
        
        # Obtaining an instance of the builtin type 'list' (line 1735)
        list_42602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1735)
        # Adding element type (line 1735)
        str_42603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 36), 'str', '.')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 35), list_42602, str_42603)
        # Adding element type (line 1735)
        # Getting the type of 'old_path' (line 1735)
        old_path_42604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 41), 'old_path', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 35), list_42602, old_path_42604)
        
        # Processing the call keyword arguments (line 1735)
        kwargs_42605 = {}
        # Getting the type of 'os' (line 1735)
        os_42599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 19), 'os', False)
        # Obtaining the member 'pathsep' of a type (line 1735)
        pathsep_42600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 19), os_42599, 'pathsep')
        # Obtaining the member 'join' of a type (line 1735)
        join_42601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 19), pathsep_42600, 'join')
        # Calling join(args, kwargs) (line 1735)
        join_call_result_42606 = invoke(stypy.reporting.localization.Localization(__file__, 1735, 19), join_42601, *[list_42602], **kwargs_42605)
        
        # Assigning a type to the variable 'path' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 12), 'path', join_call_result_42606)
        
        # Assigning a Name to a Subscript (line 1736):
        
        # Assigning a Name to a Subscript (line 1736):
        # Getting the type of 'path' (line 1736)
        path_42607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 33), 'path')
        # Getting the type of 'os' (line 1736)
        os_42608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'os')
        # Obtaining the member 'environ' of a type (line 1736)
        environ_42609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 12), os_42608, 'environ')
        str_42610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 23), 'str', 'PATH')
        # Storing an element on a container (line 1736)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1736, 12), environ_42609, (str_42610, path_42607))
        # SSA join for if statement (line 1734)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'cmd' (line 1737)
        cmd_42611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 15), 'cmd')
        # Assigning a type to the variable 'stypy_return_type' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'stypy_return_type', cmd_42611)
        
        # ################# End of 'get_config_cmd(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_config_cmd' in the type store
        # Getting the type of 'stypy_return_type' (line 1725)
        stypy_return_type_42612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42612)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_config_cmd'
        return stypy_return_type_42612


    @norecursion
    def get_build_temp_dir(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_build_temp_dir'
        module_type_store = module_type_store.open_function_context('get_build_temp_dir', 1739, 4, False)
        # Assigning a type to the variable 'self' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_localization', localization)
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_function_name', 'Configuration.get_build_temp_dir')
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.get_build_temp_dir.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.get_build_temp_dir', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_build_temp_dir', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_build_temp_dir(...)' code ##################

        str_42613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, (-1)), 'str', '\n        Return a path to a temporary directory where temporary files should be\n        placed.\n        ')
        
        # Assigning a Call to a Name (line 1744):
        
        # Assigning a Call to a Name (line 1744):
        
        # Call to get_cmd(...): (line 1744)
        # Processing the call arguments (line 1744)
        str_42615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1744, 22), 'str', 'build')
        # Processing the call keyword arguments (line 1744)
        kwargs_42616 = {}
        # Getting the type of 'get_cmd' (line 1744)
        get_cmd_42614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 14), 'get_cmd', False)
        # Calling get_cmd(args, kwargs) (line 1744)
        get_cmd_call_result_42617 = invoke(stypy.reporting.localization.Localization(__file__, 1744, 14), get_cmd_42614, *[str_42615], **kwargs_42616)
        
        # Assigning a type to the variable 'cmd' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 8), 'cmd', get_cmd_call_result_42617)
        
        # Call to ensure_finalized(...): (line 1745)
        # Processing the call keyword arguments (line 1745)
        kwargs_42620 = {}
        # Getting the type of 'cmd' (line 1745)
        cmd_42618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 8), 'cmd', False)
        # Obtaining the member 'ensure_finalized' of a type (line 1745)
        ensure_finalized_42619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1745, 8), cmd_42618, 'ensure_finalized')
        # Calling ensure_finalized(args, kwargs) (line 1745)
        ensure_finalized_call_result_42621 = invoke(stypy.reporting.localization.Localization(__file__, 1745, 8), ensure_finalized_42619, *[], **kwargs_42620)
        
        # Getting the type of 'cmd' (line 1746)
        cmd_42622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 15), 'cmd')
        # Obtaining the member 'build_temp' of a type (line 1746)
        build_temp_42623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1746, 15), cmd_42622, 'build_temp')
        # Assigning a type to the variable 'stypy_return_type' (line 1746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 8), 'stypy_return_type', build_temp_42623)
        
        # ################# End of 'get_build_temp_dir(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_build_temp_dir' in the type store
        # Getting the type of 'stypy_return_type' (line 1739)
        stypy_return_type_42624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42624)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_build_temp_dir'
        return stypy_return_type_42624


    @norecursion
    def have_f77c(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'have_f77c'
        module_type_store = module_type_store.open_function_context('have_f77c', 1748, 4, False)
        # Assigning a type to the variable 'self' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.have_f77c.__dict__.__setitem__('stypy_localization', localization)
        Configuration.have_f77c.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.have_f77c.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.have_f77c.__dict__.__setitem__('stypy_function_name', 'Configuration.have_f77c')
        Configuration.have_f77c.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.have_f77c.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.have_f77c.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.have_f77c.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.have_f77c.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.have_f77c.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.have_f77c.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.have_f77c', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'have_f77c', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'have_f77c(...)' code ##################

        str_42625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1758, (-1)), 'str', 'Check for availability of Fortran 77 compiler.\n\n        Use it inside source generating function to ensure that\n        setup distribution instance has been initialized.\n\n        Notes\n        -----\n        True if a Fortran 77 compiler is available (because a simple Fortran 77\n        code was able to be compiled successfully).\n        ')
        
        # Assigning a Str to a Name (line 1759):
        
        # Assigning a Str to a Name (line 1759):
        str_42626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, (-1)), 'str', '\n        subroutine simple\n        end\n        ')
        # Assigning a type to the variable 'simple_fortran_subroutine' (line 1759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1759, 8), 'simple_fortran_subroutine', str_42626)
        
        # Assigning a Call to a Name (line 1763):
        
        # Assigning a Call to a Name (line 1763):
        
        # Call to get_config_cmd(...): (line 1763)
        # Processing the call keyword arguments (line 1763)
        kwargs_42629 = {}
        # Getting the type of 'self' (line 1763)
        self_42627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 21), 'self', False)
        # Obtaining the member 'get_config_cmd' of a type (line 1763)
        get_config_cmd_42628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 21), self_42627, 'get_config_cmd')
        # Calling get_config_cmd(args, kwargs) (line 1763)
        get_config_cmd_call_result_42630 = invoke(stypy.reporting.localization.Localization(__file__, 1763, 21), get_config_cmd_42628, *[], **kwargs_42629)
        
        # Assigning a type to the variable 'config_cmd' (line 1763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 8), 'config_cmd', get_config_cmd_call_result_42630)
        
        # Assigning a Call to a Name (line 1764):
        
        # Assigning a Call to a Name (line 1764):
        
        # Call to try_compile(...): (line 1764)
        # Processing the call arguments (line 1764)
        # Getting the type of 'simple_fortran_subroutine' (line 1764)
        simple_fortran_subroutine_42633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 38), 'simple_fortran_subroutine', False)
        # Processing the call keyword arguments (line 1764)
        str_42634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1764, 70), 'str', 'f77')
        keyword_42635 = str_42634
        kwargs_42636 = {'lang': keyword_42635}
        # Getting the type of 'config_cmd' (line 1764)
        config_cmd_42631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 15), 'config_cmd', False)
        # Obtaining the member 'try_compile' of a type (line 1764)
        try_compile_42632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 15), config_cmd_42631, 'try_compile')
        # Calling try_compile(args, kwargs) (line 1764)
        try_compile_call_result_42637 = invoke(stypy.reporting.localization.Localization(__file__, 1764, 15), try_compile_42632, *[simple_fortran_subroutine_42633], **kwargs_42636)
        
        # Assigning a type to the variable 'flag' (line 1764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 8), 'flag', try_compile_call_result_42637)
        # Getting the type of 'flag' (line 1765)
        flag_42638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 15), 'flag')
        # Assigning a type to the variable 'stypy_return_type' (line 1765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1765, 8), 'stypy_return_type', flag_42638)
        
        # ################# End of 'have_f77c(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'have_f77c' in the type store
        # Getting the type of 'stypy_return_type' (line 1748)
        stypy_return_type_42639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42639)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'have_f77c'
        return stypy_return_type_42639


    @norecursion
    def have_f90c(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'have_f90c'
        module_type_store = module_type_store.open_function_context('have_f90c', 1767, 4, False)
        # Assigning a type to the variable 'self' (line 1768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.have_f90c.__dict__.__setitem__('stypy_localization', localization)
        Configuration.have_f90c.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.have_f90c.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.have_f90c.__dict__.__setitem__('stypy_function_name', 'Configuration.have_f90c')
        Configuration.have_f90c.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.have_f90c.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.have_f90c.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.have_f90c.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.have_f90c.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.have_f90c.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.have_f90c.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.have_f90c', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'have_f90c', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'have_f90c(...)' code ##################

        str_42640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, (-1)), 'str', 'Check for availability of Fortran 90 compiler.\n\n        Use it inside source generating function to ensure that\n        setup distribution instance has been initialized.\n\n        Notes\n        -----\n        True if a Fortran 90 compiler is available (because a simple Fortran\n        90 code was able to be compiled successfully)\n        ')
        
        # Assigning a Str to a Name (line 1778):
        
        # Assigning a Str to a Name (line 1778):
        str_42641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1781, (-1)), 'str', '\n        subroutine simple\n        end\n        ')
        # Assigning a type to the variable 'simple_fortran_subroutine' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'simple_fortran_subroutine', str_42641)
        
        # Assigning a Call to a Name (line 1782):
        
        # Assigning a Call to a Name (line 1782):
        
        # Call to get_config_cmd(...): (line 1782)
        # Processing the call keyword arguments (line 1782)
        kwargs_42644 = {}
        # Getting the type of 'self' (line 1782)
        self_42642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 21), 'self', False)
        # Obtaining the member 'get_config_cmd' of a type (line 1782)
        get_config_cmd_42643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 21), self_42642, 'get_config_cmd')
        # Calling get_config_cmd(args, kwargs) (line 1782)
        get_config_cmd_call_result_42645 = invoke(stypy.reporting.localization.Localization(__file__, 1782, 21), get_config_cmd_42643, *[], **kwargs_42644)
        
        # Assigning a type to the variable 'config_cmd' (line 1782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 8), 'config_cmd', get_config_cmd_call_result_42645)
        
        # Assigning a Call to a Name (line 1783):
        
        # Assigning a Call to a Name (line 1783):
        
        # Call to try_compile(...): (line 1783)
        # Processing the call arguments (line 1783)
        # Getting the type of 'simple_fortran_subroutine' (line 1783)
        simple_fortran_subroutine_42648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 38), 'simple_fortran_subroutine', False)
        # Processing the call keyword arguments (line 1783)
        str_42649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1783, 70), 'str', 'f90')
        keyword_42650 = str_42649
        kwargs_42651 = {'lang': keyword_42650}
        # Getting the type of 'config_cmd' (line 1783)
        config_cmd_42646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 15), 'config_cmd', False)
        # Obtaining the member 'try_compile' of a type (line 1783)
        try_compile_42647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 15), config_cmd_42646, 'try_compile')
        # Calling try_compile(args, kwargs) (line 1783)
        try_compile_call_result_42652 = invoke(stypy.reporting.localization.Localization(__file__, 1783, 15), try_compile_42647, *[simple_fortran_subroutine_42648], **kwargs_42651)
        
        # Assigning a type to the variable 'flag' (line 1783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 'flag', try_compile_call_result_42652)
        # Getting the type of 'flag' (line 1784)
        flag_42653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 15), 'flag')
        # Assigning a type to the variable 'stypy_return_type' (line 1784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 8), 'stypy_return_type', flag_42653)
        
        # ################# End of 'have_f90c(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'have_f90c' in the type store
        # Getting the type of 'stypy_return_type' (line 1767)
        stypy_return_type_42654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42654)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'have_f90c'
        return stypy_return_type_42654


    @norecursion
    def append_to(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'append_to'
        module_type_store = module_type_store.open_function_context('append_to', 1786, 4, False)
        # Assigning a type to the variable 'self' (line 1787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.append_to.__dict__.__setitem__('stypy_localization', localization)
        Configuration.append_to.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.append_to.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.append_to.__dict__.__setitem__('stypy_function_name', 'Configuration.append_to')
        Configuration.append_to.__dict__.__setitem__('stypy_param_names_list', ['extlib'])
        Configuration.append_to.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.append_to.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.append_to.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.append_to.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.append_to.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.append_to.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.append_to', ['extlib'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'append_to', localization, ['extlib'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'append_to(...)' code ##################

        str_42655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, (-1)), 'str', 'Append libraries, include_dirs to extension or library item.\n        ')
        
        
        # Call to is_sequence(...): (line 1789)
        # Processing the call arguments (line 1789)
        # Getting the type of 'extlib' (line 1789)
        extlib_42657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 23), 'extlib', False)
        # Processing the call keyword arguments (line 1789)
        kwargs_42658 = {}
        # Getting the type of 'is_sequence' (line 1789)
        is_sequence_42656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 11), 'is_sequence', False)
        # Calling is_sequence(args, kwargs) (line 1789)
        is_sequence_call_result_42659 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 11), is_sequence_42656, *[extlib_42657], **kwargs_42658)
        
        # Testing the type of an if condition (line 1789)
        if_condition_42660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1789, 8), is_sequence_call_result_42659)
        # Assigning a type to the variable 'if_condition_42660' (line 1789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'if_condition_42660', if_condition_42660)
        # SSA begins for if statement (line 1789)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 1790):
        
        # Assigning a Subscript to a Name (line 1790):
        
        # Obtaining the type of the subscript
        int_42661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1790, 12), 'int')
        # Getting the type of 'extlib' (line 1790)
        extlib_42662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 35), 'extlib')
        # Obtaining the member '__getitem__' of a type (line 1790)
        getitem___42663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 12), extlib_42662, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1790)
        subscript_call_result_42664 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 12), getitem___42663, int_42661)
        
        # Assigning a type to the variable 'tuple_var_assignment_38394' (line 1790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 12), 'tuple_var_assignment_38394', subscript_call_result_42664)
        
        # Assigning a Subscript to a Name (line 1790):
        
        # Obtaining the type of the subscript
        int_42665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1790, 12), 'int')
        # Getting the type of 'extlib' (line 1790)
        extlib_42666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 35), 'extlib')
        # Obtaining the member '__getitem__' of a type (line 1790)
        getitem___42667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 12), extlib_42666, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1790)
        subscript_call_result_42668 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 12), getitem___42667, int_42665)
        
        # Assigning a type to the variable 'tuple_var_assignment_38395' (line 1790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 12), 'tuple_var_assignment_38395', subscript_call_result_42668)
        
        # Assigning a Name to a Name (line 1790):
        # Getting the type of 'tuple_var_assignment_38394' (line 1790)
        tuple_var_assignment_38394_42669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 12), 'tuple_var_assignment_38394')
        # Assigning a type to the variable 'lib_name' (line 1790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 12), 'lib_name', tuple_var_assignment_38394_42669)
        
        # Assigning a Name to a Name (line 1790):
        # Getting the type of 'tuple_var_assignment_38395' (line 1790)
        tuple_var_assignment_38395_42670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 12), 'tuple_var_assignment_38395')
        # Assigning a type to the variable 'build_info' (line 1790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 22), 'build_info', tuple_var_assignment_38395_42670)
        
        # Call to dict_append(...): (line 1791)
        # Processing the call arguments (line 1791)
        # Getting the type of 'build_info' (line 1791)
        build_info_42672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 24), 'build_info', False)
        # Processing the call keyword arguments (line 1791)
        # Getting the type of 'self' (line 1792)
        self_42673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 34), 'self', False)
        # Obtaining the member 'libraries' of a type (line 1792)
        libraries_42674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 34), self_42673, 'libraries')
        keyword_42675 = libraries_42674
        # Getting the type of 'self' (line 1793)
        self_42676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 37), 'self', False)
        # Obtaining the member 'include_dirs' of a type (line 1793)
        include_dirs_42677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 37), self_42676, 'include_dirs')
        keyword_42678 = include_dirs_42677
        kwargs_42679 = {'libraries': keyword_42675, 'include_dirs': keyword_42678}
        # Getting the type of 'dict_append' (line 1791)
        dict_append_42671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1791)
        dict_append_call_result_42680 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 12), dict_append_42671, *[build_info_42672], **kwargs_42679)
        
        # SSA branch for the else part of an if statement (line 1789)
        module_type_store.open_ssa_branch('else')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1795, 12))
        
        # 'from numpy.distutils.core import Extension' statement (line 1795)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
        import_42681 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1795, 12), 'numpy.distutils.core')

        if (type(import_42681) is not StypyTypeError):

            if (import_42681 != 'pyd_module'):
                __import__(import_42681)
                sys_modules_42682 = sys.modules[import_42681]
                import_from_module(stypy.reporting.localization.Localization(__file__, 1795, 12), 'numpy.distutils.core', sys_modules_42682.module_type_store, module_type_store, ['Extension'])
                nest_module(stypy.reporting.localization.Localization(__file__, 1795, 12), __file__, sys_modules_42682, sys_modules_42682.module_type_store, module_type_store)
            else:
                from numpy.distutils.core import Extension

                import_from_module(stypy.reporting.localization.Localization(__file__, 1795, 12), 'numpy.distutils.core', None, module_type_store, ['Extension'], [Extension])

        else:
            # Assigning a type to the variable 'numpy.distutils.core' (line 1795)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 12), 'numpy.distutils.core', import_42681)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
        
        # Evaluating assert statement condition
        
        # Call to isinstance(...): (line 1796)
        # Processing the call arguments (line 1796)
        # Getting the type of 'extlib' (line 1796)
        extlib_42684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 30), 'extlib', False)
        # Getting the type of 'Extension' (line 1796)
        Extension_42685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 38), 'Extension', False)
        # Processing the call keyword arguments (line 1796)
        kwargs_42686 = {}
        # Getting the type of 'isinstance' (line 1796)
        isinstance_42683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1796)
        isinstance_call_result_42687 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 19), isinstance_42683, *[extlib_42684, Extension_42685], **kwargs_42686)
        
        
        # Call to extend(...): (line 1797)
        # Processing the call arguments (line 1797)
        # Getting the type of 'self' (line 1797)
        self_42691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 36), 'self', False)
        # Obtaining the member 'libraries' of a type (line 1797)
        libraries_42692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1797, 36), self_42691, 'libraries')
        # Processing the call keyword arguments (line 1797)
        kwargs_42693 = {}
        # Getting the type of 'extlib' (line 1797)
        extlib_42688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 12), 'extlib', False)
        # Obtaining the member 'libraries' of a type (line 1797)
        libraries_42689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1797, 12), extlib_42688, 'libraries')
        # Obtaining the member 'extend' of a type (line 1797)
        extend_42690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1797, 12), libraries_42689, 'extend')
        # Calling extend(args, kwargs) (line 1797)
        extend_call_result_42694 = invoke(stypy.reporting.localization.Localization(__file__, 1797, 12), extend_42690, *[libraries_42692], **kwargs_42693)
        
        
        # Call to extend(...): (line 1798)
        # Processing the call arguments (line 1798)
        # Getting the type of 'self' (line 1798)
        self_42698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 39), 'self', False)
        # Obtaining the member 'include_dirs' of a type (line 1798)
        include_dirs_42699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 39), self_42698, 'include_dirs')
        # Processing the call keyword arguments (line 1798)
        kwargs_42700 = {}
        # Getting the type of 'extlib' (line 1798)
        extlib_42695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 12), 'extlib', False)
        # Obtaining the member 'include_dirs' of a type (line 1798)
        include_dirs_42696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 12), extlib_42695, 'include_dirs')
        # Obtaining the member 'extend' of a type (line 1798)
        extend_42697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 12), include_dirs_42696, 'extend')
        # Calling extend(args, kwargs) (line 1798)
        extend_call_result_42701 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 12), extend_42697, *[include_dirs_42699], **kwargs_42700)
        
        # SSA join for if statement (line 1789)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'append_to(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'append_to' in the type store
        # Getting the type of 'stypy_return_type' (line 1786)
        stypy_return_type_42702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42702)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'append_to'
        return stypy_return_type_42702


    @norecursion
    def _get_svn_revision(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_svn_revision'
        module_type_store = module_type_store.open_function_context('_get_svn_revision', 1800, 4, False)
        # Assigning a type to the variable 'self' (line 1801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_localization', localization)
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_function_name', 'Configuration._get_svn_revision')
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_param_names_list', ['path'])
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration._get_svn_revision.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration._get_svn_revision', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_svn_revision', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_svn_revision(...)' code ##################

        str_42703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, (-1)), 'str', "Return path's SVN revision number.\n        ")
        
        # Assigning a Name to a Name (line 1803):
        
        # Assigning a Name to a Name (line 1803):
        # Getting the type of 'None' (line 1803)
        None_42704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 19), 'None')
        # Assigning a type to the variable 'revision' (line 1803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1803, 8), 'revision', None_42704)
        
        # Assigning a Name to a Name (line 1804):
        
        # Assigning a Name to a Name (line 1804):
        # Getting the type of 'None' (line 1804)
        None_42705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 12), 'None')
        # Assigning a type to the variable 'm' (line 1804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 8), 'm', None_42705)
        
        # Assigning a Call to a Name (line 1805):
        
        # Assigning a Call to a Name (line 1805):
        
        # Call to getcwd(...): (line 1805)
        # Processing the call keyword arguments (line 1805)
        kwargs_42708 = {}
        # Getting the type of 'os' (line 1805)
        os_42706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 15), 'os', False)
        # Obtaining the member 'getcwd' of a type (line 1805)
        getcwd_42707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 15), os_42706, 'getcwd')
        # Calling getcwd(args, kwargs) (line 1805)
        getcwd_call_result_42709 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 15), getcwd_42707, *[], **kwargs_42708)
        
        # Assigning a type to the variable 'cwd' (line 1805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 8), 'cwd', getcwd_call_result_42709)
        
        
        # SSA begins for try-except statement (line 1806)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to chdir(...): (line 1807)
        # Processing the call arguments (line 1807)
        
        # Evaluating a boolean operation
        # Getting the type of 'path' (line 1807)
        path_42712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 21), 'path', False)
        str_42713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 29), 'str', '.')
        # Applying the binary operator 'or' (line 1807)
        result_or_keyword_42714 = python_operator(stypy.reporting.localization.Localization(__file__, 1807, 21), 'or', path_42712, str_42713)
        
        # Processing the call keyword arguments (line 1807)
        kwargs_42715 = {}
        # Getting the type of 'os' (line 1807)
        os_42710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 12), 'os', False)
        # Obtaining the member 'chdir' of a type (line 1807)
        chdir_42711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 12), os_42710, 'chdir')
        # Calling chdir(args, kwargs) (line 1807)
        chdir_call_result_42716 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 12), chdir_42711, *[result_or_keyword_42714], **kwargs_42715)
        
        
        # Assigning a Call to a Name (line 1808):
        
        # Assigning a Call to a Name (line 1808):
        
        # Call to Popen(...): (line 1808)
        # Processing the call arguments (line 1808)
        
        # Obtaining an instance of the builtin type 'list' (line 1808)
        list_42719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1808)
        # Adding element type (line 1808)
        str_42720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 34), 'str', 'svnversion')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1808, 33), list_42719, str_42720)
        
        # Processing the call keyword arguments (line 1808)
        # Getting the type of 'True' (line 1808)
        True_42721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 55), 'True', False)
        keyword_42722 = True_42721
        # Getting the type of 'subprocess' (line 1809)
        subprocess_42723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 27), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 1809)
        PIPE_42724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 27), subprocess_42723, 'PIPE')
        keyword_42725 = PIPE_42724
        # Getting the type of 'None' (line 1809)
        None_42726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 51), 'None', False)
        keyword_42727 = None_42726
        # Getting the type of 'True' (line 1810)
        True_42728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 30), 'True', False)
        keyword_42729 = True_42728
        kwargs_42730 = {'close_fds': keyword_42729, 'shell': keyword_42722, 'stderr': keyword_42727, 'stdout': keyword_42725}
        # Getting the type of 'subprocess' (line 1808)
        subprocess_42717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 16), 'subprocess', False)
        # Obtaining the member 'Popen' of a type (line 1808)
        Popen_42718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 16), subprocess_42717, 'Popen')
        # Calling Popen(args, kwargs) (line 1808)
        Popen_call_result_42731 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 16), Popen_42718, *[list_42719], **kwargs_42730)
        
        # Assigning a type to the variable 'p' (line 1808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 12), 'p', Popen_call_result_42731)
        
        # Assigning a Attribute to a Name (line 1811):
        
        # Assigning a Attribute to a Name (line 1811):
        # Getting the type of 'p' (line 1811)
        p_42732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 19), 'p')
        # Obtaining the member 'stdout' of a type (line 1811)
        stdout_42733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 19), p_42732, 'stdout')
        # Assigning a type to the variable 'sout' (line 1811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 12), 'sout', stdout_42733)
        
        # Assigning a Call to a Name (line 1812):
        
        # Assigning a Call to a Name (line 1812):
        
        # Call to match(...): (line 1812)
        # Processing the call arguments (line 1812)
        str_42736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 25), 'str', '(?P<revision>\\d+)')
        
        # Call to read(...): (line 1812)
        # Processing the call keyword arguments (line 1812)
        kwargs_42739 = {}
        # Getting the type of 'sout' (line 1812)
        sout_42737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 47), 'sout', False)
        # Obtaining the member 'read' of a type (line 1812)
        read_42738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 47), sout_42737, 'read')
        # Calling read(args, kwargs) (line 1812)
        read_call_result_42740 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 47), read_42738, *[], **kwargs_42739)
        
        # Processing the call keyword arguments (line 1812)
        kwargs_42741 = {}
        # Getting the type of 're' (line 1812)
        re_42734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 16), 're', False)
        # Obtaining the member 'match' of a type (line 1812)
        match_42735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 16), re_42734, 'match')
        # Calling match(args, kwargs) (line 1812)
        match_call_result_42742 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 16), match_42735, *[str_42736, read_call_result_42740], **kwargs_42741)
        
        # Assigning a type to the variable 'm' (line 1812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 12), 'm', match_call_result_42742)
        # SSA branch for the except part of a try statement (line 1806)
        # SSA branch for the except '<any exception>' branch of a try statement (line 1806)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1806)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to chdir(...): (line 1815)
        # Processing the call arguments (line 1815)
        # Getting the type of 'cwd' (line 1815)
        cwd_42745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 17), 'cwd', False)
        # Processing the call keyword arguments (line 1815)
        kwargs_42746 = {}
        # Getting the type of 'os' (line 1815)
        os_42743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 8), 'os', False)
        # Obtaining the member 'chdir' of a type (line 1815)
        chdir_42744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 8), os_42743, 'chdir')
        # Calling chdir(args, kwargs) (line 1815)
        chdir_call_result_42747 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 8), chdir_42744, *[cwd_42745], **kwargs_42746)
        
        
        # Getting the type of 'm' (line 1816)
        m_42748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 11), 'm')
        # Testing the type of an if condition (line 1816)
        if_condition_42749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1816, 8), m_42748)
        # Assigning a type to the variable 'if_condition_42749' (line 1816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 8), 'if_condition_42749', if_condition_42749)
        # SSA begins for if statement (line 1816)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1817):
        
        # Assigning a Call to a Name (line 1817):
        
        # Call to int(...): (line 1817)
        # Processing the call arguments (line 1817)
        
        # Call to group(...): (line 1817)
        # Processing the call arguments (line 1817)
        str_42753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 35), 'str', 'revision')
        # Processing the call keyword arguments (line 1817)
        kwargs_42754 = {}
        # Getting the type of 'm' (line 1817)
        m_42751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 27), 'm', False)
        # Obtaining the member 'group' of a type (line 1817)
        group_42752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 27), m_42751, 'group')
        # Calling group(args, kwargs) (line 1817)
        group_call_result_42755 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 27), group_42752, *[str_42753], **kwargs_42754)
        
        # Processing the call keyword arguments (line 1817)
        kwargs_42756 = {}
        # Getting the type of 'int' (line 1817)
        int_42750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 23), 'int', False)
        # Calling int(args, kwargs) (line 1817)
        int_call_result_42757 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 23), int_42750, *[group_call_result_42755], **kwargs_42756)
        
        # Assigning a type to the variable 'revision' (line 1817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 12), 'revision', int_call_result_42757)
        # Getting the type of 'revision' (line 1818)
        revision_42758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 19), 'revision')
        # Assigning a type to the variable 'stypy_return_type' (line 1818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 12), 'stypy_return_type', revision_42758)
        # SSA join for if statement (line 1816)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'sys' (line 1819)
        sys_42759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 1819)
        platform_42760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 11), sys_42759, 'platform')
        str_42761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 25), 'str', 'win32')
        # Applying the binary operator '==' (line 1819)
        result_eq_42762 = python_operator(stypy.reporting.localization.Localization(__file__, 1819, 11), '==', platform_42760, str_42761)
        
        
        # Call to get(...): (line 1819)
        # Processing the call arguments (line 1819)
        str_42766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 52), 'str', 'SVN_ASP_DOT_NET_HACK')
        # Getting the type of 'None' (line 1819)
        None_42767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 76), 'None', False)
        # Processing the call keyword arguments (line 1819)
        kwargs_42768 = {}
        # Getting the type of 'os' (line 1819)
        os_42763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 37), 'os', False)
        # Obtaining the member 'environ' of a type (line 1819)
        environ_42764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 37), os_42763, 'environ')
        # Obtaining the member 'get' of a type (line 1819)
        get_42765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 37), environ_42764, 'get')
        # Calling get(args, kwargs) (line 1819)
        get_call_result_42769 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 37), get_42765, *[str_42766, None_42767], **kwargs_42768)
        
        # Applying the binary operator 'and' (line 1819)
        result_and_keyword_42770 = python_operator(stypy.reporting.localization.Localization(__file__, 1819, 11), 'and', result_eq_42762, get_call_result_42769)
        
        # Testing the type of an if condition (line 1819)
        if_condition_42771 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1819, 8), result_and_keyword_42770)
        # Assigning a type to the variable 'if_condition_42771' (line 1819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 8), 'if_condition_42771', if_condition_42771)
        # SSA begins for if statement (line 1819)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1820):
        
        # Assigning a Call to a Name (line 1820):
        
        # Call to njoin(...): (line 1820)
        # Processing the call arguments (line 1820)
        # Getting the type of 'path' (line 1820)
        path_42773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 28), 'path', False)
        str_42774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1820, 34), 'str', '_svn')
        str_42775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1820, 42), 'str', 'entries')
        # Processing the call keyword arguments (line 1820)
        kwargs_42776 = {}
        # Getting the type of 'njoin' (line 1820)
        njoin_42772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 22), 'njoin', False)
        # Calling njoin(args, kwargs) (line 1820)
        njoin_call_result_42777 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 22), njoin_42772, *[path_42773, str_42774, str_42775], **kwargs_42776)
        
        # Assigning a type to the variable 'entries' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 12), 'entries', njoin_call_result_42777)
        # SSA branch for the else part of an if statement (line 1819)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1822):
        
        # Assigning a Call to a Name (line 1822):
        
        # Call to njoin(...): (line 1822)
        # Processing the call arguments (line 1822)
        # Getting the type of 'path' (line 1822)
        path_42779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 28), 'path', False)
        str_42780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 34), 'str', '.svn')
        str_42781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 42), 'str', 'entries')
        # Processing the call keyword arguments (line 1822)
        kwargs_42782 = {}
        # Getting the type of 'njoin' (line 1822)
        njoin_42778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 22), 'njoin', False)
        # Calling njoin(args, kwargs) (line 1822)
        njoin_call_result_42783 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 22), njoin_42778, *[path_42779, str_42780, str_42781], **kwargs_42782)
        
        # Assigning a type to the variable 'entries' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 12), 'entries', njoin_call_result_42783)
        # SSA join for if statement (line 1819)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isfile(...): (line 1823)
        # Processing the call arguments (line 1823)
        # Getting the type of 'entries' (line 1823)
        entries_42787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 26), 'entries', False)
        # Processing the call keyword arguments (line 1823)
        kwargs_42788 = {}
        # Getting the type of 'os' (line 1823)
        os_42784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 11), 'os', False)
        # Obtaining the member 'path' of a type (line 1823)
        path_42785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1823, 11), os_42784, 'path')
        # Obtaining the member 'isfile' of a type (line 1823)
        isfile_42786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1823, 11), path_42785, 'isfile')
        # Calling isfile(args, kwargs) (line 1823)
        isfile_call_result_42789 = invoke(stypy.reporting.localization.Localization(__file__, 1823, 11), isfile_42786, *[entries_42787], **kwargs_42788)
        
        # Testing the type of an if condition (line 1823)
        if_condition_42790 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1823, 8), isfile_call_result_42789)
        # Assigning a type to the variable 'if_condition_42790' (line 1823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1823, 8), 'if_condition_42790', if_condition_42790)
        # SSA begins for if statement (line 1823)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1824):
        
        # Assigning a Call to a Name (line 1824):
        
        # Call to open(...): (line 1824)
        # Processing the call arguments (line 1824)
        # Getting the type of 'entries' (line 1824)
        entries_42792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 21), 'entries', False)
        # Processing the call keyword arguments (line 1824)
        kwargs_42793 = {}
        # Getting the type of 'open' (line 1824)
        open_42791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 16), 'open', False)
        # Calling open(args, kwargs) (line 1824)
        open_call_result_42794 = invoke(stypy.reporting.localization.Localization(__file__, 1824, 16), open_42791, *[entries_42792], **kwargs_42793)
        
        # Assigning a type to the variable 'f' (line 1824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1824, 12), 'f', open_call_result_42794)
        
        # Assigning a Call to a Name (line 1825):
        
        # Assigning a Call to a Name (line 1825):
        
        # Call to read(...): (line 1825)
        # Processing the call keyword arguments (line 1825)
        kwargs_42797 = {}
        # Getting the type of 'f' (line 1825)
        f_42795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 19), 'f', False)
        # Obtaining the member 'read' of a type (line 1825)
        read_42796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 19), f_42795, 'read')
        # Calling read(args, kwargs) (line 1825)
        read_call_result_42798 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 19), read_42796, *[], **kwargs_42797)
        
        # Assigning a type to the variable 'fstr' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 12), 'fstr', read_call_result_42798)
        
        # Call to close(...): (line 1826)
        # Processing the call keyword arguments (line 1826)
        kwargs_42801 = {}
        # Getting the type of 'f' (line 1826)
        f_42799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 12), 'f', False)
        # Obtaining the member 'close' of a type (line 1826)
        close_42800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1826, 12), f_42799, 'close')
        # Calling close(args, kwargs) (line 1826)
        close_call_result_42802 = invoke(stypy.reporting.localization.Localization(__file__, 1826, 12), close_42800, *[], **kwargs_42801)
        
        
        
        
        # Obtaining the type of the subscript
        int_42803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 21), 'int')
        slice_42804 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1827, 15), None, int_42803, None)
        # Getting the type of 'fstr' (line 1827)
        fstr_42805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 15), 'fstr')
        # Obtaining the member '__getitem__' of a type (line 1827)
        getitem___42806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 15), fstr_42805, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1827)
        subscript_call_result_42807 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 15), getitem___42806, slice_42804)
        
        str_42808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 27), 'str', '<?xml')
        # Applying the binary operator '==' (line 1827)
        result_eq_42809 = python_operator(stypy.reporting.localization.Localization(__file__, 1827, 15), '==', subscript_call_result_42807, str_42808)
        
        # Testing the type of an if condition (line 1827)
        if_condition_42810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1827, 12), result_eq_42809)
        # Assigning a type to the variable 'if_condition_42810' (line 1827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 12), 'if_condition_42810', if_condition_42810)
        # SSA begins for if statement (line 1827)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1828):
        
        # Assigning a Call to a Name (line 1828):
        
        # Call to search(...): (line 1828)
        # Processing the call arguments (line 1828)
        str_42813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 30), 'str', 'revision="(?P<revision>\\d+)"')
        # Getting the type of 'fstr' (line 1828)
        fstr_42814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 63), 'fstr', False)
        # Processing the call keyword arguments (line 1828)
        kwargs_42815 = {}
        # Getting the type of 're' (line 1828)
        re_42811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 20), 're', False)
        # Obtaining the member 'search' of a type (line 1828)
        search_42812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 20), re_42811, 'search')
        # Calling search(args, kwargs) (line 1828)
        search_call_result_42816 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 20), search_42812, *[str_42813, fstr_42814], **kwargs_42815)
        
        # Assigning a type to the variable 'm' (line 1828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 16), 'm', search_call_result_42816)
        
        # Getting the type of 'm' (line 1829)
        m_42817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 19), 'm')
        # Testing the type of an if condition (line 1829)
        if_condition_42818 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1829, 16), m_42817)
        # Assigning a type to the variable 'if_condition_42818' (line 1829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 16), 'if_condition_42818', if_condition_42818)
        # SSA begins for if statement (line 1829)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1830):
        
        # Assigning a Call to a Name (line 1830):
        
        # Call to int(...): (line 1830)
        # Processing the call arguments (line 1830)
        
        # Call to group(...): (line 1830)
        # Processing the call arguments (line 1830)
        str_42822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 43), 'str', 'revision')
        # Processing the call keyword arguments (line 1830)
        kwargs_42823 = {}
        # Getting the type of 'm' (line 1830)
        m_42820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 35), 'm', False)
        # Obtaining the member 'group' of a type (line 1830)
        group_42821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1830, 35), m_42820, 'group')
        # Calling group(args, kwargs) (line 1830)
        group_call_result_42824 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 35), group_42821, *[str_42822], **kwargs_42823)
        
        # Processing the call keyword arguments (line 1830)
        kwargs_42825 = {}
        # Getting the type of 'int' (line 1830)
        int_42819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 31), 'int', False)
        # Calling int(args, kwargs) (line 1830)
        int_call_result_42826 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 31), int_42819, *[group_call_result_42824], **kwargs_42825)
        
        # Assigning a type to the variable 'revision' (line 1830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1830, 20), 'revision', int_call_result_42826)
        # SSA join for if statement (line 1829)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1827)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1832):
        
        # Assigning a Call to a Name (line 1832):
        
        # Call to search(...): (line 1832)
        # Processing the call arguments (line 1832)
        str_42829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 30), 'str', 'dir[\\n\\r]+(?P<revision>\\d+)')
        # Getting the type of 'fstr' (line 1832)
        fstr_42830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 62), 'fstr', False)
        # Processing the call keyword arguments (line 1832)
        kwargs_42831 = {}
        # Getting the type of 're' (line 1832)
        re_42827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 20), 're', False)
        # Obtaining the member 'search' of a type (line 1832)
        search_42828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 20), re_42827, 'search')
        # Calling search(args, kwargs) (line 1832)
        search_call_result_42832 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 20), search_42828, *[str_42829, fstr_42830], **kwargs_42831)
        
        # Assigning a type to the variable 'm' (line 1832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 16), 'm', search_call_result_42832)
        
        # Getting the type of 'm' (line 1833)
        m_42833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 19), 'm')
        # Testing the type of an if condition (line 1833)
        if_condition_42834 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1833, 16), m_42833)
        # Assigning a type to the variable 'if_condition_42834' (line 1833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1833, 16), 'if_condition_42834', if_condition_42834)
        # SSA begins for if statement (line 1833)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1834):
        
        # Assigning a Call to a Name (line 1834):
        
        # Call to int(...): (line 1834)
        # Processing the call arguments (line 1834)
        
        # Call to group(...): (line 1834)
        # Processing the call arguments (line 1834)
        str_42838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 43), 'str', 'revision')
        # Processing the call keyword arguments (line 1834)
        kwargs_42839 = {}
        # Getting the type of 'm' (line 1834)
        m_42836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 35), 'm', False)
        # Obtaining the member 'group' of a type (line 1834)
        group_42837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1834, 35), m_42836, 'group')
        # Calling group(args, kwargs) (line 1834)
        group_call_result_42840 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 35), group_42837, *[str_42838], **kwargs_42839)
        
        # Processing the call keyword arguments (line 1834)
        kwargs_42841 = {}
        # Getting the type of 'int' (line 1834)
        int_42835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 31), 'int', False)
        # Calling int(args, kwargs) (line 1834)
        int_call_result_42842 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 31), int_42835, *[group_call_result_42840], **kwargs_42841)
        
        # Assigning a type to the variable 'revision' (line 1834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 20), 'revision', int_call_result_42842)
        # SSA join for if statement (line 1833)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1827)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1823)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'revision' (line 1835)
        revision_42843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 15), 'revision')
        # Assigning a type to the variable 'stypy_return_type' (line 1835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1835, 8), 'stypy_return_type', revision_42843)
        
        # ################# End of '_get_svn_revision(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_svn_revision' in the type store
        # Getting the type of 'stypy_return_type' (line 1800)
        stypy_return_type_42844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42844)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_svn_revision'
        return stypy_return_type_42844


    @norecursion
    def _get_hg_revision(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_hg_revision'
        module_type_store = module_type_store.open_function_context('_get_hg_revision', 1837, 4, False)
        # Assigning a type to the variable 'self' (line 1838)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1838, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_localization', localization)
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_function_name', 'Configuration._get_hg_revision')
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_param_names_list', ['path'])
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration._get_hg_revision.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration._get_hg_revision', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_hg_revision', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_hg_revision(...)' code ##################

        str_42845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1839, (-1)), 'str', "Return path's Mercurial revision number.\n        ")
        
        # Assigning a Name to a Name (line 1840):
        
        # Assigning a Name to a Name (line 1840):
        # Getting the type of 'None' (line 1840)
        None_42846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 19), 'None')
        # Assigning a type to the variable 'revision' (line 1840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 8), 'revision', None_42846)
        
        # Assigning a Name to a Name (line 1841):
        
        # Assigning a Name to a Name (line 1841):
        # Getting the type of 'None' (line 1841)
        None_42847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 12), 'None')
        # Assigning a type to the variable 'm' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'm', None_42847)
        
        # Assigning a Call to a Name (line 1842):
        
        # Assigning a Call to a Name (line 1842):
        
        # Call to getcwd(...): (line 1842)
        # Processing the call keyword arguments (line 1842)
        kwargs_42850 = {}
        # Getting the type of 'os' (line 1842)
        os_42848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 15), 'os', False)
        # Obtaining the member 'getcwd' of a type (line 1842)
        getcwd_42849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1842, 15), os_42848, 'getcwd')
        # Calling getcwd(args, kwargs) (line 1842)
        getcwd_call_result_42851 = invoke(stypy.reporting.localization.Localization(__file__, 1842, 15), getcwd_42849, *[], **kwargs_42850)
        
        # Assigning a type to the variable 'cwd' (line 1842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 8), 'cwd', getcwd_call_result_42851)
        
        
        # SSA begins for try-except statement (line 1843)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to chdir(...): (line 1844)
        # Processing the call arguments (line 1844)
        
        # Evaluating a boolean operation
        # Getting the type of 'path' (line 1844)
        path_42854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 21), 'path', False)
        str_42855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1844, 29), 'str', '.')
        # Applying the binary operator 'or' (line 1844)
        result_or_keyword_42856 = python_operator(stypy.reporting.localization.Localization(__file__, 1844, 21), 'or', path_42854, str_42855)
        
        # Processing the call keyword arguments (line 1844)
        kwargs_42857 = {}
        # Getting the type of 'os' (line 1844)
        os_42852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 12), 'os', False)
        # Obtaining the member 'chdir' of a type (line 1844)
        chdir_42853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 12), os_42852, 'chdir')
        # Calling chdir(args, kwargs) (line 1844)
        chdir_call_result_42858 = invoke(stypy.reporting.localization.Localization(__file__, 1844, 12), chdir_42853, *[result_or_keyword_42856], **kwargs_42857)
        
        
        # Assigning a Call to a Name (line 1845):
        
        # Assigning a Call to a Name (line 1845):
        
        # Call to Popen(...): (line 1845)
        # Processing the call arguments (line 1845)
        
        # Obtaining an instance of the builtin type 'list' (line 1845)
        list_42861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1845)
        # Adding element type (line 1845)
        str_42862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 34), 'str', 'hg identify --num')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 33), list_42861, str_42862)
        
        # Processing the call keyword arguments (line 1845)
        # Getting the type of 'True' (line 1845)
        True_42863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 62), 'True', False)
        keyword_42864 = True_42863
        # Getting the type of 'subprocess' (line 1846)
        subprocess_42865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 27), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 1846)
        PIPE_42866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 27), subprocess_42865, 'PIPE')
        keyword_42867 = PIPE_42866
        # Getting the type of 'None' (line 1846)
        None_42868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 51), 'None', False)
        keyword_42869 = None_42868
        # Getting the type of 'True' (line 1847)
        True_42870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 30), 'True', False)
        keyword_42871 = True_42870
        kwargs_42872 = {'close_fds': keyword_42871, 'shell': keyword_42864, 'stderr': keyword_42869, 'stdout': keyword_42867}
        # Getting the type of 'subprocess' (line 1845)
        subprocess_42859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 16), 'subprocess', False)
        # Obtaining the member 'Popen' of a type (line 1845)
        Popen_42860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 16), subprocess_42859, 'Popen')
        # Calling Popen(args, kwargs) (line 1845)
        Popen_call_result_42873 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 16), Popen_42860, *[list_42861], **kwargs_42872)
        
        # Assigning a type to the variable 'p' (line 1845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 12), 'p', Popen_call_result_42873)
        
        # Assigning a Attribute to a Name (line 1848):
        
        # Assigning a Attribute to a Name (line 1848):
        # Getting the type of 'p' (line 1848)
        p_42874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 19), 'p')
        # Obtaining the member 'stdout' of a type (line 1848)
        stdout_42875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1848, 19), p_42874, 'stdout')
        # Assigning a type to the variable 'sout' (line 1848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1848, 12), 'sout', stdout_42875)
        
        # Assigning a Call to a Name (line 1849):
        
        # Assigning a Call to a Name (line 1849):
        
        # Call to match(...): (line 1849)
        # Processing the call arguments (line 1849)
        str_42878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 25), 'str', '(?P<revision>\\d+)')
        
        # Call to read(...): (line 1849)
        # Processing the call keyword arguments (line 1849)
        kwargs_42881 = {}
        # Getting the type of 'sout' (line 1849)
        sout_42879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 47), 'sout', False)
        # Obtaining the member 'read' of a type (line 1849)
        read_42880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 47), sout_42879, 'read')
        # Calling read(args, kwargs) (line 1849)
        read_call_result_42882 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 47), read_42880, *[], **kwargs_42881)
        
        # Processing the call keyword arguments (line 1849)
        kwargs_42883 = {}
        # Getting the type of 're' (line 1849)
        re_42876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 16), 're', False)
        # Obtaining the member 'match' of a type (line 1849)
        match_42877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 16), re_42876, 'match')
        # Calling match(args, kwargs) (line 1849)
        match_call_result_42884 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 16), match_42877, *[str_42878, read_call_result_42882], **kwargs_42883)
        
        # Assigning a type to the variable 'm' (line 1849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'm', match_call_result_42884)
        # SSA branch for the except part of a try statement (line 1843)
        # SSA branch for the except '<any exception>' branch of a try statement (line 1843)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1843)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to chdir(...): (line 1852)
        # Processing the call arguments (line 1852)
        # Getting the type of 'cwd' (line 1852)
        cwd_42887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 17), 'cwd', False)
        # Processing the call keyword arguments (line 1852)
        kwargs_42888 = {}
        # Getting the type of 'os' (line 1852)
        os_42885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 8), 'os', False)
        # Obtaining the member 'chdir' of a type (line 1852)
        chdir_42886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 8), os_42885, 'chdir')
        # Calling chdir(args, kwargs) (line 1852)
        chdir_call_result_42889 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 8), chdir_42886, *[cwd_42887], **kwargs_42888)
        
        
        # Getting the type of 'm' (line 1853)
        m_42890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 11), 'm')
        # Testing the type of an if condition (line 1853)
        if_condition_42891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1853, 8), m_42890)
        # Assigning a type to the variable 'if_condition_42891' (line 1853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 8), 'if_condition_42891', if_condition_42891)
        # SSA begins for if statement (line 1853)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1854):
        
        # Assigning a Call to a Name (line 1854):
        
        # Call to int(...): (line 1854)
        # Processing the call arguments (line 1854)
        
        # Call to group(...): (line 1854)
        # Processing the call arguments (line 1854)
        str_42895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 35), 'str', 'revision')
        # Processing the call keyword arguments (line 1854)
        kwargs_42896 = {}
        # Getting the type of 'm' (line 1854)
        m_42893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 27), 'm', False)
        # Obtaining the member 'group' of a type (line 1854)
        group_42894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 27), m_42893, 'group')
        # Calling group(args, kwargs) (line 1854)
        group_call_result_42897 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 27), group_42894, *[str_42895], **kwargs_42896)
        
        # Processing the call keyword arguments (line 1854)
        kwargs_42898 = {}
        # Getting the type of 'int' (line 1854)
        int_42892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 23), 'int', False)
        # Calling int(args, kwargs) (line 1854)
        int_call_result_42899 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 23), int_42892, *[group_call_result_42897], **kwargs_42898)
        
        # Assigning a type to the variable 'revision' (line 1854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'revision', int_call_result_42899)
        # Getting the type of 'revision' (line 1855)
        revision_42900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 19), 'revision')
        # Assigning a type to the variable 'stypy_return_type' (line 1855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 12), 'stypy_return_type', revision_42900)
        # SSA join for if statement (line 1853)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1856):
        
        # Assigning a Call to a Name (line 1856):
        
        # Call to njoin(...): (line 1856)
        # Processing the call arguments (line 1856)
        # Getting the type of 'path' (line 1856)
        path_42902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 26), 'path', False)
        str_42903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1856, 32), 'str', '.hg')
        str_42904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1856, 39), 'str', 'branch')
        # Processing the call keyword arguments (line 1856)
        kwargs_42905 = {}
        # Getting the type of 'njoin' (line 1856)
        njoin_42901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 20), 'njoin', False)
        # Calling njoin(args, kwargs) (line 1856)
        njoin_call_result_42906 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 20), njoin_42901, *[path_42902, str_42903, str_42904], **kwargs_42905)
        
        # Assigning a type to the variable 'branch_fn' (line 1856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 8), 'branch_fn', njoin_call_result_42906)
        
        # Assigning a Call to a Name (line 1857):
        
        # Assigning a Call to a Name (line 1857):
        
        # Call to njoin(...): (line 1857)
        # Processing the call arguments (line 1857)
        # Getting the type of 'path' (line 1857)
        path_42908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 32), 'path', False)
        str_42909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1857, 38), 'str', '.hg')
        str_42910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1857, 45), 'str', 'branch.cache')
        # Processing the call keyword arguments (line 1857)
        kwargs_42911 = {}
        # Getting the type of 'njoin' (line 1857)
        njoin_42907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 26), 'njoin', False)
        # Calling njoin(args, kwargs) (line 1857)
        njoin_call_result_42912 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 26), njoin_42907, *[path_42908, str_42909, str_42910], **kwargs_42911)
        
        # Assigning a type to the variable 'branch_cache_fn' (line 1857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1857, 8), 'branch_cache_fn', njoin_call_result_42912)
        
        
        # Call to isfile(...): (line 1859)
        # Processing the call arguments (line 1859)
        # Getting the type of 'branch_fn' (line 1859)
        branch_fn_42916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 26), 'branch_fn', False)
        # Processing the call keyword arguments (line 1859)
        kwargs_42917 = {}
        # Getting the type of 'os' (line 1859)
        os_42913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 11), 'os', False)
        # Obtaining the member 'path' of a type (line 1859)
        path_42914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 11), os_42913, 'path')
        # Obtaining the member 'isfile' of a type (line 1859)
        isfile_42915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 11), path_42914, 'isfile')
        # Calling isfile(args, kwargs) (line 1859)
        isfile_call_result_42918 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 11), isfile_42915, *[branch_fn_42916], **kwargs_42917)
        
        # Testing the type of an if condition (line 1859)
        if_condition_42919 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1859, 8), isfile_call_result_42918)
        # Assigning a type to the variable 'if_condition_42919' (line 1859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1859, 8), 'if_condition_42919', if_condition_42919)
        # SSA begins for if statement (line 1859)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1860):
        
        # Assigning a Name to a Name (line 1860):
        # Getting the type of 'None' (line 1860)
        None_42920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 22), 'None')
        # Assigning a type to the variable 'branch0' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'branch0', None_42920)
        
        # Assigning a Call to a Name (line 1861):
        
        # Assigning a Call to a Name (line 1861):
        
        # Call to open(...): (line 1861)
        # Processing the call arguments (line 1861)
        # Getting the type of 'branch_fn' (line 1861)
        branch_fn_42922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 21), 'branch_fn', False)
        # Processing the call keyword arguments (line 1861)
        kwargs_42923 = {}
        # Getting the type of 'open' (line 1861)
        open_42921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 16), 'open', False)
        # Calling open(args, kwargs) (line 1861)
        open_call_result_42924 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 16), open_42921, *[branch_fn_42922], **kwargs_42923)
        
        # Assigning a type to the variable 'f' (line 1861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 12), 'f', open_call_result_42924)
        
        # Assigning a Call to a Name (line 1862):
        
        # Assigning a Call to a Name (line 1862):
        
        # Call to strip(...): (line 1862)
        # Processing the call keyword arguments (line 1862)
        kwargs_42930 = {}
        
        # Call to read(...): (line 1862)
        # Processing the call keyword arguments (line 1862)
        kwargs_42927 = {}
        # Getting the type of 'f' (line 1862)
        f_42925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 24), 'f', False)
        # Obtaining the member 'read' of a type (line 1862)
        read_42926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 24), f_42925, 'read')
        # Calling read(args, kwargs) (line 1862)
        read_call_result_42928 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 24), read_42926, *[], **kwargs_42927)
        
        # Obtaining the member 'strip' of a type (line 1862)
        strip_42929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 24), read_call_result_42928, 'strip')
        # Calling strip(args, kwargs) (line 1862)
        strip_call_result_42931 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 24), strip_42929, *[], **kwargs_42930)
        
        # Assigning a type to the variable 'revision0' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 12), 'revision0', strip_call_result_42931)
        
        # Call to close(...): (line 1863)
        # Processing the call keyword arguments (line 1863)
        kwargs_42934 = {}
        # Getting the type of 'f' (line 1863)
        f_42932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 12), 'f', False)
        # Obtaining the member 'close' of a type (line 1863)
        close_42933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1863, 12), f_42932, 'close')
        # Calling close(args, kwargs) (line 1863)
        close_call_result_42935 = invoke(stypy.reporting.localization.Localization(__file__, 1863, 12), close_42933, *[], **kwargs_42934)
        
        
        # Assigning a Dict to a Name (line 1865):
        
        # Assigning a Dict to a Name (line 1865):
        
        # Obtaining an instance of the builtin type 'dict' (line 1865)
        dict_42936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1865, 25), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1865)
        
        # Assigning a type to the variable 'branch_map' (line 1865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 12), 'branch_map', dict_42936)
        
        
        # Call to file(...): (line 1866)
        # Processing the call arguments (line 1866)
        # Getting the type of 'branch_cache_fn' (line 1866)
        branch_cache_fn_42938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 29), 'branch_cache_fn', False)
        str_42939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1866, 46), 'str', 'r')
        # Processing the call keyword arguments (line 1866)
        kwargs_42940 = {}
        # Getting the type of 'file' (line 1866)
        file_42937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 24), 'file', False)
        # Calling file(args, kwargs) (line 1866)
        file_call_result_42941 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 24), file_42937, *[branch_cache_fn_42938, str_42939], **kwargs_42940)
        
        # Testing the type of a for loop iterable (line 1866)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1866, 12), file_call_result_42941)
        # Getting the type of the for loop variable (line 1866)
        for_loop_var_42942 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1866, 12), file_call_result_42941)
        # Assigning a type to the variable 'line' (line 1866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'line', for_loop_var_42942)
        # SSA begins for a for statement (line 1866)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Tuple (line 1867):
        
        # Assigning a Subscript to a Name (line 1867):
        
        # Obtaining the type of the subscript
        int_42943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 16), 'int')
        
        # Obtaining the type of the subscript
        int_42944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 52), 'int')
        slice_42945 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1867, 38), None, int_42944, None)
        
        # Call to split(...): (line 1867)
        # Processing the call keyword arguments (line 1867)
        kwargs_42948 = {}
        # Getting the type of 'line' (line 1867)
        line_42946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 38), 'line', False)
        # Obtaining the member 'split' of a type (line 1867)
        split_42947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 38), line_42946, 'split')
        # Calling split(args, kwargs) (line 1867)
        split_call_result_42949 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 38), split_42947, *[], **kwargs_42948)
        
        # Obtaining the member '__getitem__' of a type (line 1867)
        getitem___42950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 38), split_call_result_42949, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1867)
        subscript_call_result_42951 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 38), getitem___42950, slice_42945)
        
        # Obtaining the member '__getitem__' of a type (line 1867)
        getitem___42952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 16), subscript_call_result_42951, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1867)
        subscript_call_result_42953 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 16), getitem___42952, int_42943)
        
        # Assigning a type to the variable 'tuple_var_assignment_38396' (line 1867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 16), 'tuple_var_assignment_38396', subscript_call_result_42953)
        
        # Assigning a Subscript to a Name (line 1867):
        
        # Obtaining the type of the subscript
        int_42954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 16), 'int')
        
        # Obtaining the type of the subscript
        int_42955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 52), 'int')
        slice_42956 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1867, 38), None, int_42955, None)
        
        # Call to split(...): (line 1867)
        # Processing the call keyword arguments (line 1867)
        kwargs_42959 = {}
        # Getting the type of 'line' (line 1867)
        line_42957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 38), 'line', False)
        # Obtaining the member 'split' of a type (line 1867)
        split_42958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 38), line_42957, 'split')
        # Calling split(args, kwargs) (line 1867)
        split_call_result_42960 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 38), split_42958, *[], **kwargs_42959)
        
        # Obtaining the member '__getitem__' of a type (line 1867)
        getitem___42961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 38), split_call_result_42960, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1867)
        subscript_call_result_42962 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 38), getitem___42961, slice_42956)
        
        # Obtaining the member '__getitem__' of a type (line 1867)
        getitem___42963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 16), subscript_call_result_42962, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1867)
        subscript_call_result_42964 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 16), getitem___42963, int_42954)
        
        # Assigning a type to the variable 'tuple_var_assignment_38397' (line 1867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 16), 'tuple_var_assignment_38397', subscript_call_result_42964)
        
        # Assigning a Name to a Name (line 1867):
        # Getting the type of 'tuple_var_assignment_38396' (line 1867)
        tuple_var_assignment_38396_42965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 16), 'tuple_var_assignment_38396')
        # Assigning a type to the variable 'branch1' (line 1867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 16), 'branch1', tuple_var_assignment_38396_42965)
        
        # Assigning a Name to a Name (line 1867):
        # Getting the type of 'tuple_var_assignment_38397' (line 1867)
        tuple_var_assignment_38397_42966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 16), 'tuple_var_assignment_38397')
        # Assigning a type to the variable 'revision1' (line 1867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 25), 'revision1', tuple_var_assignment_38397_42966)
        
        
        # Getting the type of 'revision1' (line 1868)
        revision1_42967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 19), 'revision1')
        # Getting the type of 'revision0' (line 1868)
        revision0_42968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 30), 'revision0')
        # Applying the binary operator '==' (line 1868)
        result_eq_42969 = python_operator(stypy.reporting.localization.Localization(__file__, 1868, 19), '==', revision1_42967, revision0_42968)
        
        # Testing the type of an if condition (line 1868)
        if_condition_42970 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1868, 16), result_eq_42969)
        # Assigning a type to the variable 'if_condition_42970' (line 1868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 16), 'if_condition_42970', if_condition_42970)
        # SSA begins for if statement (line 1868)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1869):
        
        # Assigning a Name to a Name (line 1869):
        # Getting the type of 'branch1' (line 1869)
        branch1_42971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 30), 'branch1')
        # Assigning a type to the variable 'branch0' (line 1869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 20), 'branch0', branch1_42971)
        # SSA join for if statement (line 1868)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1870)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1871):
        
        # Assigning a Call to a Name (line 1871):
        
        # Call to int(...): (line 1871)
        # Processing the call arguments (line 1871)
        # Getting the type of 'revision1' (line 1871)
        revision1_42973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 36), 'revision1', False)
        # Processing the call keyword arguments (line 1871)
        kwargs_42974 = {}
        # Getting the type of 'int' (line 1871)
        int_42972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 32), 'int', False)
        # Calling int(args, kwargs) (line 1871)
        int_call_result_42975 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 32), int_42972, *[revision1_42973], **kwargs_42974)
        
        # Assigning a type to the variable 'revision1' (line 1871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 20), 'revision1', int_call_result_42975)
        # SSA branch for the except part of a try statement (line 1870)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1870)
        module_type_store.open_ssa_branch('except')
        # SSA join for try-except statement (line 1870)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 1874):
        
        # Assigning a Name to a Subscript (line 1874):
        # Getting the type of 'revision1' (line 1874)
        revision1_42976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 38), 'revision1')
        # Getting the type of 'branch_map' (line 1874)
        branch_map_42977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 16), 'branch_map')
        # Getting the type of 'branch1' (line 1874)
        branch1_42978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 27), 'branch1')
        # Storing an element on a container (line 1874)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1874, 16), branch_map_42977, (branch1_42978, revision1_42976))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1876):
        
        # Assigning a Call to a Name (line 1876):
        
        # Call to get(...): (line 1876)
        # Processing the call arguments (line 1876)
        # Getting the type of 'branch0' (line 1876)
        branch0_42981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 38), 'branch0', False)
        # Processing the call keyword arguments (line 1876)
        kwargs_42982 = {}
        # Getting the type of 'branch_map' (line 1876)
        branch_map_42979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 23), 'branch_map', False)
        # Obtaining the member 'get' of a type (line 1876)
        get_42980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1876, 23), branch_map_42979, 'get')
        # Calling get(args, kwargs) (line 1876)
        get_call_result_42983 = invoke(stypy.reporting.localization.Localization(__file__, 1876, 23), get_42980, *[branch0_42981], **kwargs_42982)
        
        # Assigning a type to the variable 'revision' (line 1876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 12), 'revision', get_call_result_42983)
        # SSA join for if statement (line 1859)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'revision' (line 1877)
        revision_42984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 15), 'revision')
        # Assigning a type to the variable 'stypy_return_type' (line 1877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'stypy_return_type', revision_42984)
        
        # ################# End of '_get_hg_revision(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_hg_revision' in the type store
        # Getting the type of 'stypy_return_type' (line 1837)
        stypy_return_type_42985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42985)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_hg_revision'
        return stypy_return_type_42985


    @norecursion
    def get_version(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1880)
        None_42986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 39), 'None')
        # Getting the type of 'None' (line 1880)
        None_42987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 62), 'None')
        defaults = [None_42986, None_42987]
        # Create a new context for function 'get_version'
        module_type_store = module_type_store.open_function_context('get_version', 1880, 4, False)
        # Assigning a type to the variable 'self' (line 1881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.get_version.__dict__.__setitem__('stypy_localization', localization)
        Configuration.get_version.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.get_version.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.get_version.__dict__.__setitem__('stypy_function_name', 'Configuration.get_version')
        Configuration.get_version.__dict__.__setitem__('stypy_param_names_list', ['version_file', 'version_variable'])
        Configuration.get_version.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.get_version.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.get_version.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.get_version.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.get_version.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.get_version.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.get_version', ['version_file', 'version_variable'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_version', localization, ['version_file', 'version_variable'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_version(...)' code ##################

        str_42988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, (-1)), 'str', 'Try to get version string of a package.\n\n        Return a version string of the current package or None if the version\n        information could not be detected.\n\n        Notes\n        -----\n        This method scans files named\n        __version__.py, <packagename>_version.py, version.py, and\n        __svn_version__.py for string variables version, __version\\__, and\n        <packagename>_version, until a version number is found.\n        ')
        
        # Assigning a Call to a Name (line 1893):
        
        # Assigning a Call to a Name (line 1893):
        
        # Call to getattr(...): (line 1893)
        # Processing the call arguments (line 1893)
        # Getting the type of 'self' (line 1893)
        self_42990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 26), 'self', False)
        str_42991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1893, 32), 'str', 'version')
        # Getting the type of 'None' (line 1893)
        None_42992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 43), 'None', False)
        # Processing the call keyword arguments (line 1893)
        kwargs_42993 = {}
        # Getting the type of 'getattr' (line 1893)
        getattr_42989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 18), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1893)
        getattr_call_result_42994 = invoke(stypy.reporting.localization.Localization(__file__, 1893, 18), getattr_42989, *[self_42990, str_42991, None_42992], **kwargs_42993)
        
        # Assigning a type to the variable 'version' (line 1893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1893, 8), 'version', getattr_call_result_42994)
        
        # Type idiom detected: calculating its left and rigth part (line 1894)
        # Getting the type of 'version' (line 1894)
        version_42995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 8), 'version')
        # Getting the type of 'None' (line 1894)
        None_42996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 26), 'None')
        
        (may_be_42997, more_types_in_union_42998) = may_not_be_none(version_42995, None_42996)

        if may_be_42997:

            if more_types_in_union_42998:
                # Runtime conditional SSA (line 1894)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'version' (line 1895)
            version_42999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 19), 'version')
            # Assigning a type to the variable 'stypy_return_type' (line 1895)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1895, 12), 'stypy_return_type', version_42999)

            if more_types_in_union_42998:
                # SSA join for if statement (line 1894)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1898)
        # Getting the type of 'version_file' (line 1898)
        version_file_43000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 11), 'version_file')
        # Getting the type of 'None' (line 1898)
        None_43001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 27), 'None')
        
        (may_be_43002, more_types_in_union_43003) = may_be_none(version_file_43000, None_43001)

        if may_be_43002:

            if more_types_in_union_43003:
                # Runtime conditional SSA (line 1898)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a List to a Name (line 1899):
            
            # Assigning a List to a Name (line 1899):
            
            # Obtaining an instance of the builtin type 'list' (line 1899)
            list_43004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1899)
            # Adding element type (line 1899)
            str_43005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 21), 'str', '__version__.py')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1899, 20), list_43004, str_43005)
            # Adding element type (line 1899)
            
            # Obtaining the type of the subscript
            int_43006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1900, 42), 'int')
            
            # Call to split(...): (line 1900)
            # Processing the call arguments (line 1900)
            str_43010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1900, 37), 'str', '.')
            # Processing the call keyword arguments (line 1900)
            kwargs_43011 = {}
            # Getting the type of 'self' (line 1900)
            self_43007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 21), 'self', False)
            # Obtaining the member 'name' of a type (line 1900)
            name_43008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 21), self_43007, 'name')
            # Obtaining the member 'split' of a type (line 1900)
            split_43009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 21), name_43008, 'split')
            # Calling split(args, kwargs) (line 1900)
            split_call_result_43012 = invoke(stypy.reporting.localization.Localization(__file__, 1900, 21), split_43009, *[str_43010], **kwargs_43011)
            
            # Obtaining the member '__getitem__' of a type (line 1900)
            getitem___43013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 21), split_call_result_43012, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1900)
            subscript_call_result_43014 = invoke(stypy.reporting.localization.Localization(__file__, 1900, 21), getitem___43013, int_43006)
            
            str_43015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1900, 46), 'str', '_version.py')
            # Applying the binary operator '+' (line 1900)
            result_add_43016 = python_operator(stypy.reporting.localization.Localization(__file__, 1900, 21), '+', subscript_call_result_43014, str_43015)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1899, 20), list_43004, result_add_43016)
            # Adding element type (line 1899)
            str_43017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1901, 21), 'str', 'version.py')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1899, 20), list_43004, str_43017)
            # Adding element type (line 1899)
            str_43018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1902, 21), 'str', '__svn_version__.py')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1899, 20), list_43004, str_43018)
            # Adding element type (line 1899)
            str_43019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1903, 21), 'str', '__hg_version__.py')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1899, 20), list_43004, str_43019)
            
            # Assigning a type to the variable 'files' (line 1899)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1899, 12), 'files', list_43004)

            if more_types_in_union_43003:
                # Runtime conditional SSA for else branch (line 1898)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_43002) or more_types_in_union_43003):
            
            # Assigning a List to a Name (line 1905):
            
            # Assigning a List to a Name (line 1905):
            
            # Obtaining an instance of the builtin type 'list' (line 1905)
            list_43020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1905, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1905)
            # Adding element type (line 1905)
            # Getting the type of 'version_file' (line 1905)
            version_file_43021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 21), 'version_file')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1905, 20), list_43020, version_file_43021)
            
            # Assigning a type to the variable 'files' (line 1905)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1905, 12), 'files', list_43020)

            if (may_be_43002 and more_types_in_union_43003):
                # SSA join for if statement (line 1898)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1906)
        # Getting the type of 'version_variable' (line 1906)
        version_variable_43022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 11), 'version_variable')
        # Getting the type of 'None' (line 1906)
        None_43023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 31), 'None')
        
        (may_be_43024, more_types_in_union_43025) = may_be_none(version_variable_43022, None_43023)

        if may_be_43024:

            if more_types_in_union_43025:
                # Runtime conditional SSA (line 1906)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a List to a Name (line 1907):
            
            # Assigning a List to a Name (line 1907):
            
            # Obtaining an instance of the builtin type 'list' (line 1907)
            list_43026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 27), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1907)
            # Adding element type (line 1907)
            str_43027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 28), 'str', 'version')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 27), list_43026, str_43027)
            # Adding element type (line 1907)
            str_43028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 28), 'str', '__version__')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 27), list_43026, str_43028)
            # Adding element type (line 1907)
            
            # Obtaining the type of the subscript
            int_43029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 49), 'int')
            
            # Call to split(...): (line 1909)
            # Processing the call arguments (line 1909)
            str_43033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 44), 'str', '.')
            # Processing the call keyword arguments (line 1909)
            kwargs_43034 = {}
            # Getting the type of 'self' (line 1909)
            self_43030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 28), 'self', False)
            # Obtaining the member 'name' of a type (line 1909)
            name_43031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 28), self_43030, 'name')
            # Obtaining the member 'split' of a type (line 1909)
            split_43032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 28), name_43031, 'split')
            # Calling split(args, kwargs) (line 1909)
            split_call_result_43035 = invoke(stypy.reporting.localization.Localization(__file__, 1909, 28), split_43032, *[str_43033], **kwargs_43034)
            
            # Obtaining the member '__getitem__' of a type (line 1909)
            getitem___43036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 28), split_call_result_43035, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1909)
            subscript_call_result_43037 = invoke(stypy.reporting.localization.Localization(__file__, 1909, 28), getitem___43036, int_43029)
            
            str_43038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 53), 'str', '_version')
            # Applying the binary operator '+' (line 1909)
            result_add_43039 = python_operator(stypy.reporting.localization.Localization(__file__, 1909, 28), '+', subscript_call_result_43037, str_43038)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 27), list_43026, result_add_43039)
            
            # Assigning a type to the variable 'version_vars' (line 1907)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 12), 'version_vars', list_43026)

            if more_types_in_union_43025:
                # Runtime conditional SSA for else branch (line 1906)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_43024) or more_types_in_union_43025):
            
            # Assigning a List to a Name (line 1911):
            
            # Assigning a List to a Name (line 1911):
            
            # Obtaining an instance of the builtin type 'list' (line 1911)
            list_43040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1911, 27), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1911)
            # Adding element type (line 1911)
            # Getting the type of 'version_variable' (line 1911)
            version_variable_43041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 28), 'version_variable')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1911, 27), list_43040, version_variable_43041)
            
            # Assigning a type to the variable 'version_vars' (line 1911)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1911, 12), 'version_vars', list_43040)

            if (may_be_43024 and more_types_in_union_43025):
                # SSA join for if statement (line 1906)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'files' (line 1912)
        files_43042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 17), 'files')
        # Testing the type of a for loop iterable (line 1912)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1912, 8), files_43042)
        # Getting the type of the for loop variable (line 1912)
        for_loop_var_43043 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1912, 8), files_43042)
        # Assigning a type to the variable 'f' (line 1912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 8), 'f', for_loop_var_43043)
        # SSA begins for a for statement (line 1912)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1913):
        
        # Assigning a Call to a Name (line 1913):
        
        # Call to njoin(...): (line 1913)
        # Processing the call arguments (line 1913)
        # Getting the type of 'self' (line 1913)
        self_43045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 23), 'self', False)
        # Obtaining the member 'local_path' of a type (line 1913)
        local_path_43046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 23), self_43045, 'local_path')
        # Getting the type of 'f' (line 1913)
        f_43047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 40), 'f', False)
        # Processing the call keyword arguments (line 1913)
        kwargs_43048 = {}
        # Getting the type of 'njoin' (line 1913)
        njoin_43044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 17), 'njoin', False)
        # Calling njoin(args, kwargs) (line 1913)
        njoin_call_result_43049 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 17), njoin_43044, *[local_path_43046, f_43047], **kwargs_43048)
        
        # Assigning a type to the variable 'fn' (line 1913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1913, 12), 'fn', njoin_call_result_43049)
        
        
        # Call to isfile(...): (line 1914)
        # Processing the call arguments (line 1914)
        # Getting the type of 'fn' (line 1914)
        fn_43053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 30), 'fn', False)
        # Processing the call keyword arguments (line 1914)
        kwargs_43054 = {}
        # Getting the type of 'os' (line 1914)
        os_43050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 1914)
        path_43051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1914, 15), os_43050, 'path')
        # Obtaining the member 'isfile' of a type (line 1914)
        isfile_43052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1914, 15), path_43051, 'isfile')
        # Calling isfile(args, kwargs) (line 1914)
        isfile_call_result_43055 = invoke(stypy.reporting.localization.Localization(__file__, 1914, 15), isfile_43052, *[fn_43053], **kwargs_43054)
        
        # Testing the type of an if condition (line 1914)
        if_condition_43056 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1914, 12), isfile_call_result_43055)
        # Assigning a type to the variable 'if_condition_43056' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 12), 'if_condition_43056', if_condition_43056)
        # SSA begins for if statement (line 1914)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Name (line 1915):
        
        # Assigning a Tuple to a Name (line 1915):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1915)
        tuple_43057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1915)
        # Adding element type (line 1915)
        
        # Call to open(...): (line 1915)
        # Processing the call arguments (line 1915)
        # Getting the type of 'fn' (line 1915)
        fn_43059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 29), 'fn', False)
        # Processing the call keyword arguments (line 1915)
        kwargs_43060 = {}
        # Getting the type of 'open' (line 1915)
        open_43058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 24), 'open', False)
        # Calling open(args, kwargs) (line 1915)
        open_call_result_43061 = invoke(stypy.reporting.localization.Localization(__file__, 1915, 24), open_43058, *[fn_43059], **kwargs_43060)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1915, 24), tuple_43057, open_call_result_43061)
        # Adding element type (line 1915)
        # Getting the type of 'fn' (line 1915)
        fn_43062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 34), 'fn')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1915, 24), tuple_43057, fn_43062)
        # Adding element type (line 1915)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1915)
        tuple_43063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1915)
        # Adding element type (line 1915)
        str_43064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 39), 'str', '.py')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1915, 39), tuple_43063, str_43064)
        # Adding element type (line 1915)
        str_43065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 46), 'str', 'U')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1915, 39), tuple_43063, str_43065)
        # Adding element type (line 1915)
        int_43066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 51), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1915, 39), tuple_43063, int_43066)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1915, 24), tuple_43057, tuple_43063)
        
        # Assigning a type to the variable 'info' (line 1915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1915, 16), 'info', tuple_43057)
        
        # Assigning a Subscript to a Name (line 1916):
        
        # Assigning a Subscript to a Name (line 1916):
        
        # Obtaining the type of the subscript
        int_43067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 62), 'int')
        
        # Call to splitext(...): (line 1916)
        # Processing the call arguments (line 1916)
        
        # Call to basename(...): (line 1916)
        # Processing the call arguments (line 1916)
        # Getting the type of 'fn' (line 1916)
        fn_43074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 57), 'fn', False)
        # Processing the call keyword arguments (line 1916)
        kwargs_43075 = {}
        # Getting the type of 'os' (line 1916)
        os_43071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 40), 'os', False)
        # Obtaining the member 'path' of a type (line 1916)
        path_43072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 40), os_43071, 'path')
        # Obtaining the member 'basename' of a type (line 1916)
        basename_43073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 40), path_43072, 'basename')
        # Calling basename(args, kwargs) (line 1916)
        basename_call_result_43076 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 40), basename_43073, *[fn_43074], **kwargs_43075)
        
        # Processing the call keyword arguments (line 1916)
        kwargs_43077 = {}
        # Getting the type of 'os' (line 1916)
        os_43068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 23), 'os', False)
        # Obtaining the member 'path' of a type (line 1916)
        path_43069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 23), os_43068, 'path')
        # Obtaining the member 'splitext' of a type (line 1916)
        splitext_43070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 23), path_43069, 'splitext')
        # Calling splitext(args, kwargs) (line 1916)
        splitext_call_result_43078 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 23), splitext_43070, *[basename_call_result_43076], **kwargs_43077)
        
        # Obtaining the member '__getitem__' of a type (line 1916)
        getitem___43079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 23), splitext_call_result_43078, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1916)
        subscript_call_result_43080 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 23), getitem___43079, int_43067)
        
        # Assigning a type to the variable 'name' (line 1916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 16), 'name', subscript_call_result_43080)
        
        # Assigning a Call to a Name (line 1917):
        
        # Assigning a Call to a Name (line 1917):
        
        # Call to dot_join(...): (line 1917)
        # Processing the call arguments (line 1917)
        # Getting the type of 'self' (line 1917)
        self_43082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 29), 'self', False)
        # Obtaining the member 'name' of a type (line 1917)
        name_43083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1917, 29), self_43082, 'name')
        # Getting the type of 'name' (line 1917)
        name_43084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 40), 'name', False)
        # Processing the call keyword arguments (line 1917)
        kwargs_43085 = {}
        # Getting the type of 'dot_join' (line 1917)
        dot_join_43081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 20), 'dot_join', False)
        # Calling dot_join(args, kwargs) (line 1917)
        dot_join_call_result_43086 = invoke(stypy.reporting.localization.Localization(__file__, 1917, 20), dot_join_43081, *[name_43083, name_43084], **kwargs_43085)
        
        # Assigning a type to the variable 'n' (line 1917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1917, 16), 'n', dot_join_call_result_43086)
        
        
        # SSA begins for try-except statement (line 1918)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1919):
        
        # Assigning a Call to a Name (line 1919):
        
        # Call to load_module(...): (line 1919)
        # Processing the call arguments (line 1919)
        
        # Call to join(...): (line 1919)
        # Processing the call arguments (line 1919)
        
        # Call to split(...): (line 1919)
        # Processing the call arguments (line 1919)
        str_43093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 70), 'str', '.')
        # Processing the call keyword arguments (line 1919)
        kwargs_43094 = {}
        # Getting the type of 'n' (line 1919)
        n_43091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 62), 'n', False)
        # Obtaining the member 'split' of a type (line 1919)
        split_43092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1919, 62), n_43091, 'split')
        # Calling split(args, kwargs) (line 1919)
        split_call_result_43095 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 62), split_43092, *[str_43093], **kwargs_43094)
        
        # Processing the call keyword arguments (line 1919)
        kwargs_43096 = {}
        str_43089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 53), 'str', '_')
        # Obtaining the member 'join' of a type (line 1919)
        join_43090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1919, 53), str_43089, 'join')
        # Calling join(args, kwargs) (line 1919)
        join_call_result_43097 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 53), join_43090, *[split_call_result_43095], **kwargs_43096)
        
        # Getting the type of 'info' (line 1919)
        info_43098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 77), 'info', False)
        # Processing the call keyword arguments (line 1919)
        kwargs_43099 = {}
        # Getting the type of 'imp' (line 1919)
        imp_43087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 37), 'imp', False)
        # Obtaining the member 'load_module' of a type (line 1919)
        load_module_43088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1919, 37), imp_43087, 'load_module')
        # Calling load_module(args, kwargs) (line 1919)
        load_module_call_result_43100 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 37), load_module_43088, *[join_call_result_43097, info_43098], **kwargs_43099)
        
        # Assigning a type to the variable 'version_module' (line 1919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 20), 'version_module', load_module_call_result_43100)
        # SSA branch for the except part of a try statement (line 1918)
        # SSA branch for the except 'ImportError' branch of a try statement (line 1918)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 1921):
        
        # Assigning a Call to a Name (line 1921):
        
        # Call to get_exception(...): (line 1921)
        # Processing the call keyword arguments (line 1921)
        kwargs_43102 = {}
        # Getting the type of 'get_exception' (line 1921)
        get_exception_43101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 26), 'get_exception', False)
        # Calling get_exception(args, kwargs) (line 1921)
        get_exception_call_result_43103 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 26), get_exception_43101, *[], **kwargs_43102)
        
        # Assigning a type to the variable 'msg' (line 1921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 20), 'msg', get_exception_call_result_43103)
        
        # Call to warn(...): (line 1922)
        # Processing the call arguments (line 1922)
        
        # Call to str(...): (line 1922)
        # Processing the call arguments (line 1922)
        # Getting the type of 'msg' (line 1922)
        msg_43107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 34), 'msg', False)
        # Processing the call keyword arguments (line 1922)
        kwargs_43108 = {}
        # Getting the type of 'str' (line 1922)
        str_43106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 30), 'str', False)
        # Calling str(args, kwargs) (line 1922)
        str_call_result_43109 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 30), str_43106, *[msg_43107], **kwargs_43108)
        
        # Processing the call keyword arguments (line 1922)
        kwargs_43110 = {}
        # Getting the type of 'self' (line 1922)
        self_43104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 20), 'self', False)
        # Obtaining the member 'warn' of a type (line 1922)
        warn_43105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 20), self_43104, 'warn')
        # Calling warn(args, kwargs) (line 1922)
        warn_call_result_43111 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 20), warn_43105, *[str_call_result_43109], **kwargs_43110)
        
        
        # Assigning a Name to a Name (line 1923):
        
        # Assigning a Name to a Name (line 1923):
        # Getting the type of 'None' (line 1923)
        None_43112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 37), 'None')
        # Assigning a type to the variable 'version_module' (line 1923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 20), 'version_module', None_43112)
        # SSA join for try-except statement (line 1918)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1924)
        # Getting the type of 'version_module' (line 1924)
        version_module_43113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 19), 'version_module')
        # Getting the type of 'None' (line 1924)
        None_43114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 37), 'None')
        
        (may_be_43115, more_types_in_union_43116) = may_be_none(version_module_43113, None_43114)

        if may_be_43115:

            if more_types_in_union_43116:
                # Runtime conditional SSA (line 1924)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store


            if more_types_in_union_43116:
                # SSA join for if statement (line 1924)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'version_vars' (line 1927)
        version_vars_43117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 25), 'version_vars')
        # Testing the type of a for loop iterable (line 1927)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1927, 16), version_vars_43117)
        # Getting the type of the for loop variable (line 1927)
        for_loop_var_43118 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1927, 16), version_vars_43117)
        # Assigning a type to the variable 'a' (line 1927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 16), 'a', for_loop_var_43118)
        # SSA begins for a for statement (line 1927)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1928):
        
        # Assigning a Call to a Name (line 1928):
        
        # Call to getattr(...): (line 1928)
        # Processing the call arguments (line 1928)
        # Getting the type of 'version_module' (line 1928)
        version_module_43120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 38), 'version_module', False)
        # Getting the type of 'a' (line 1928)
        a_43121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 54), 'a', False)
        # Getting the type of 'None' (line 1928)
        None_43122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 57), 'None', False)
        # Processing the call keyword arguments (line 1928)
        kwargs_43123 = {}
        # Getting the type of 'getattr' (line 1928)
        getattr_43119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 30), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1928)
        getattr_call_result_43124 = invoke(stypy.reporting.localization.Localization(__file__, 1928, 30), getattr_43119, *[version_module_43120, a_43121, None_43122], **kwargs_43123)
        
        # Assigning a type to the variable 'version' (line 1928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1928, 20), 'version', getattr_call_result_43124)
        
        # Type idiom detected: calculating its left and rigth part (line 1929)
        # Getting the type of 'version' (line 1929)
        version_43125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 20), 'version')
        # Getting the type of 'None' (line 1929)
        None_43126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 38), 'None')
        
        (may_be_43127, more_types_in_union_43128) = may_not_be_none(version_43125, None_43126)

        if may_be_43127:

            if more_types_in_union_43128:
                # Runtime conditional SSA (line 1929)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store


            if more_types_in_union_43128:
                # SSA join for if statement (line 1929)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1931)
        # Getting the type of 'version' (line 1931)
        version_43129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 16), 'version')
        # Getting the type of 'None' (line 1931)
        None_43130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 34), 'None')
        
        (may_be_43131, more_types_in_union_43132) = may_not_be_none(version_43129, None_43130)

        if may_be_43131:

            if more_types_in_union_43132:
                # Runtime conditional SSA (line 1931)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store


            if more_types_in_union_43132:
                # SSA join for if statement (line 1931)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1914)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1934)
        # Getting the type of 'version' (line 1934)
        version_43133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 8), 'version')
        # Getting the type of 'None' (line 1934)
        None_43134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 26), 'None')
        
        (may_be_43135, more_types_in_union_43136) = may_not_be_none(version_43133, None_43134)

        if may_be_43135:

            if more_types_in_union_43136:
                # Runtime conditional SSA (line 1934)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1935):
            
            # Assigning a Name to a Attribute (line 1935):
            # Getting the type of 'version' (line 1935)
            version_43137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 27), 'version')
            # Getting the type of 'self' (line 1935)
            self_43138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 12), 'self')
            # Setting the type of the member 'version' of a type (line 1935)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 12), self_43138, 'version', version_43137)
            # Getting the type of 'version' (line 1936)
            version_43139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 19), 'version')
            # Assigning a type to the variable 'stypy_return_type' (line 1936)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 12), 'stypy_return_type', version_43139)

            if more_types_in_union_43136:
                # SSA join for if statement (line 1934)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1939):
        
        # Assigning a Call to a Name (line 1939):
        
        # Call to _get_svn_revision(...): (line 1939)
        # Processing the call arguments (line 1939)
        # Getting the type of 'self' (line 1939)
        self_43142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 42), 'self', False)
        # Obtaining the member 'local_path' of a type (line 1939)
        local_path_43143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 42), self_43142, 'local_path')
        # Processing the call keyword arguments (line 1939)
        kwargs_43144 = {}
        # Getting the type of 'self' (line 1939)
        self_43140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 19), 'self', False)
        # Obtaining the member '_get_svn_revision' of a type (line 1939)
        _get_svn_revision_43141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 19), self_43140, '_get_svn_revision')
        # Calling _get_svn_revision(args, kwargs) (line 1939)
        _get_svn_revision_call_result_43145 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 19), _get_svn_revision_43141, *[local_path_43143], **kwargs_43144)
        
        # Assigning a type to the variable 'revision' (line 1939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1939, 8), 'revision', _get_svn_revision_call_result_43145)
        
        # Type idiom detected: calculating its left and rigth part (line 1940)
        # Getting the type of 'revision' (line 1940)
        revision_43146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 11), 'revision')
        # Getting the type of 'None' (line 1940)
        None_43147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 23), 'None')
        
        (may_be_43148, more_types_in_union_43149) = may_be_none(revision_43146, None_43147)

        if may_be_43148:

            if more_types_in_union_43149:
                # Runtime conditional SSA (line 1940)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1941):
            
            # Assigning a Call to a Name (line 1941):
            
            # Call to _get_hg_revision(...): (line 1941)
            # Processing the call arguments (line 1941)
            # Getting the type of 'self' (line 1941)
            self_43152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 45), 'self', False)
            # Obtaining the member 'local_path' of a type (line 1941)
            local_path_43153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1941, 45), self_43152, 'local_path')
            # Processing the call keyword arguments (line 1941)
            kwargs_43154 = {}
            # Getting the type of 'self' (line 1941)
            self_43150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 23), 'self', False)
            # Obtaining the member '_get_hg_revision' of a type (line 1941)
            _get_hg_revision_43151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1941, 23), self_43150, '_get_hg_revision')
            # Calling _get_hg_revision(args, kwargs) (line 1941)
            _get_hg_revision_call_result_43155 = invoke(stypy.reporting.localization.Localization(__file__, 1941, 23), _get_hg_revision_43151, *[local_path_43153], **kwargs_43154)
            
            # Assigning a type to the variable 'revision' (line 1941)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1941, 12), 'revision', _get_hg_revision_call_result_43155)

            if more_types_in_union_43149:
                # SSA join for if statement (line 1940)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1943)
        # Getting the type of 'revision' (line 1943)
        revision_43156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 8), 'revision')
        # Getting the type of 'None' (line 1943)
        None_43157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 27), 'None')
        
        (may_be_43158, more_types_in_union_43159) = may_not_be_none(revision_43156, None_43157)

        if may_be_43158:

            if more_types_in_union_43159:
                # Runtime conditional SSA (line 1943)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1944):
            
            # Assigning a Call to a Name (line 1944):
            
            # Call to str(...): (line 1944)
            # Processing the call arguments (line 1944)
            # Getting the type of 'revision' (line 1944)
            revision_43161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 26), 'revision', False)
            # Processing the call keyword arguments (line 1944)
            kwargs_43162 = {}
            # Getting the type of 'str' (line 1944)
            str_43160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 22), 'str', False)
            # Calling str(args, kwargs) (line 1944)
            str_call_result_43163 = invoke(stypy.reporting.localization.Localization(__file__, 1944, 22), str_43160, *[revision_43161], **kwargs_43162)
            
            # Assigning a type to the variable 'version' (line 1944)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1944, 12), 'version', str_call_result_43163)
            
            # Assigning a Name to a Attribute (line 1945):
            
            # Assigning a Name to a Attribute (line 1945):
            # Getting the type of 'version' (line 1945)
            version_43164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 27), 'version')
            # Getting the type of 'self' (line 1945)
            self_43165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 12), 'self')
            # Setting the type of the member 'version' of a type (line 1945)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1945, 12), self_43165, 'version', version_43164)

            if more_types_in_union_43159:
                # SSA join for if statement (line 1943)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'version' (line 1947)
        version_43166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 15), 'version')
        # Assigning a type to the variable 'stypy_return_type' (line 1947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'stypy_return_type', version_43166)
        
        # ################# End of 'get_version(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_version' in the type store
        # Getting the type of 'stypy_return_type' (line 1880)
        stypy_return_type_43167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43167)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_version'
        return stypy_return_type_43167


    @norecursion
    def make_svn_version_py(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1949)
        True_43168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 41), 'True')
        defaults = [True_43168]
        # Create a new context for function 'make_svn_version_py'
        module_type_store = module_type_store.open_function_context('make_svn_version_py', 1949, 4, False)
        # Assigning a type to the variable 'self' (line 1950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1950, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_localization', localization)
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_function_name', 'Configuration.make_svn_version_py')
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_param_names_list', ['delete'])
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.make_svn_version_py.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.make_svn_version_py', ['delete'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'make_svn_version_py', localization, ['delete'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'make_svn_version_py(...)' code ##################

        str_43169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1964, (-1)), 'str', 'Appends a data function to the data_files list that will generate\n        __svn_version__.py file to the current package directory.\n\n        Generate package __svn_version__.py file from SVN revision number,\n        it will be removed after python exits but will be available\n        when sdist, etc commands are executed.\n\n        Notes\n        -----\n        If __svn_version__.py existed before, nothing is done.\n\n        This is\n        intended for working with source directories that are in an SVN\n        repository.\n        ')
        
        # Assigning a Call to a Name (line 1965):
        
        # Assigning a Call to a Name (line 1965):
        
        # Call to njoin(...): (line 1965)
        # Processing the call arguments (line 1965)
        # Getting the type of 'self' (line 1965)
        self_43171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 23), 'self', False)
        # Obtaining the member 'local_path' of a type (line 1965)
        local_path_43172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1965, 23), self_43171, 'local_path')
        str_43173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1965, 40), 'str', '__svn_version__.py')
        # Processing the call keyword arguments (line 1965)
        kwargs_43174 = {}
        # Getting the type of 'njoin' (line 1965)
        njoin_43170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 17), 'njoin', False)
        # Calling njoin(args, kwargs) (line 1965)
        njoin_call_result_43175 = invoke(stypy.reporting.localization.Localization(__file__, 1965, 17), njoin_43170, *[local_path_43172, str_43173], **kwargs_43174)
        
        # Assigning a type to the variable 'target' (line 1965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1965, 8), 'target', njoin_call_result_43175)
        
        # Assigning a Call to a Name (line 1966):
        
        # Assigning a Call to a Name (line 1966):
        
        # Call to _get_svn_revision(...): (line 1966)
        # Processing the call arguments (line 1966)
        # Getting the type of 'self' (line 1966)
        self_43178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 42), 'self', False)
        # Obtaining the member 'local_path' of a type (line 1966)
        local_path_43179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1966, 42), self_43178, 'local_path')
        # Processing the call keyword arguments (line 1966)
        kwargs_43180 = {}
        # Getting the type of 'self' (line 1966)
        self_43176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 19), 'self', False)
        # Obtaining the member '_get_svn_revision' of a type (line 1966)
        _get_svn_revision_43177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1966, 19), self_43176, '_get_svn_revision')
        # Calling _get_svn_revision(args, kwargs) (line 1966)
        _get_svn_revision_call_result_43181 = invoke(stypy.reporting.localization.Localization(__file__, 1966, 19), _get_svn_revision_43177, *[local_path_43179], **kwargs_43180)
        
        # Assigning a type to the variable 'revision' (line 1966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1966, 8), 'revision', _get_svn_revision_call_result_43181)
        
        
        # Evaluating a boolean operation
        
        # Call to isfile(...): (line 1967)
        # Processing the call arguments (line 1967)
        # Getting the type of 'target' (line 1967)
        target_43185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 26), 'target', False)
        # Processing the call keyword arguments (line 1967)
        kwargs_43186 = {}
        # Getting the type of 'os' (line 1967)
        os_43182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 11), 'os', False)
        # Obtaining the member 'path' of a type (line 1967)
        path_43183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1967, 11), os_43182, 'path')
        # Obtaining the member 'isfile' of a type (line 1967)
        isfile_43184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1967, 11), path_43183, 'isfile')
        # Calling isfile(args, kwargs) (line 1967)
        isfile_call_result_43187 = invoke(stypy.reporting.localization.Localization(__file__, 1967, 11), isfile_43184, *[target_43185], **kwargs_43186)
        
        
        # Getting the type of 'revision' (line 1967)
        revision_43188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 37), 'revision')
        # Getting the type of 'None' (line 1967)
        None_43189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 49), 'None')
        # Applying the binary operator 'is' (line 1967)
        result_is__43190 = python_operator(stypy.reporting.localization.Localization(__file__, 1967, 37), 'is', revision_43188, None_43189)
        
        # Applying the binary operator 'or' (line 1967)
        result_or_keyword_43191 = python_operator(stypy.reporting.localization.Localization(__file__, 1967, 11), 'or', isfile_call_result_43187, result_is__43190)
        
        # Testing the type of an if condition (line 1967)
        if_condition_43192 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1967, 8), result_or_keyword_43191)
        # Assigning a type to the variable 'if_condition_43192' (line 1967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 8), 'if_condition_43192', if_condition_43192)
        # SSA begins for if statement (line 1967)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 12), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 1967)
        module_type_store.open_ssa_branch('else')

        @norecursion
        def generate_svn_version_py(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'generate_svn_version_py'
            module_type_store = module_type_store.open_function_context('generate_svn_version_py', 1970, 12, False)
            
            # Passed parameters checking function
            generate_svn_version_py.stypy_localization = localization
            generate_svn_version_py.stypy_type_of_self = None
            generate_svn_version_py.stypy_type_store = module_type_store
            generate_svn_version_py.stypy_function_name = 'generate_svn_version_py'
            generate_svn_version_py.stypy_param_names_list = []
            generate_svn_version_py.stypy_varargs_param_name = None
            generate_svn_version_py.stypy_kwargs_param_name = None
            generate_svn_version_py.stypy_call_defaults = defaults
            generate_svn_version_py.stypy_call_varargs = varargs
            generate_svn_version_py.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'generate_svn_version_py', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'generate_svn_version_py', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'generate_svn_version_py(...)' code ##################

            
            
            
            # Call to isfile(...): (line 1971)
            # Processing the call arguments (line 1971)
            # Getting the type of 'target' (line 1971)
            target_43196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 38), 'target', False)
            # Processing the call keyword arguments (line 1971)
            kwargs_43197 = {}
            # Getting the type of 'os' (line 1971)
            os_43193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 23), 'os', False)
            # Obtaining the member 'path' of a type (line 1971)
            path_43194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 23), os_43193, 'path')
            # Obtaining the member 'isfile' of a type (line 1971)
            isfile_43195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 23), path_43194, 'isfile')
            # Calling isfile(args, kwargs) (line 1971)
            isfile_call_result_43198 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 23), isfile_43195, *[target_43196], **kwargs_43197)
            
            # Applying the 'not' unary operator (line 1971)
            result_not__43199 = python_operator(stypy.reporting.localization.Localization(__file__, 1971, 19), 'not', isfile_call_result_43198)
            
            # Testing the type of an if condition (line 1971)
            if_condition_43200 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1971, 16), result_not__43199)
            # Assigning a type to the variable 'if_condition_43200' (line 1971)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 16), 'if_condition_43200', if_condition_43200)
            # SSA begins for if statement (line 1971)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1972):
            
            # Assigning a Call to a Name (line 1972):
            
            # Call to str(...): (line 1972)
            # Processing the call arguments (line 1972)
            # Getting the type of 'revision' (line 1972)
            revision_43202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 34), 'revision', False)
            # Processing the call keyword arguments (line 1972)
            kwargs_43203 = {}
            # Getting the type of 'str' (line 1972)
            str_43201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 30), 'str', False)
            # Calling str(args, kwargs) (line 1972)
            str_call_result_43204 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 30), str_43201, *[revision_43202], **kwargs_43203)
            
            # Assigning a type to the variable 'version' (line 1972)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 20), 'version', str_call_result_43204)
            
            # Call to info(...): (line 1973)
            # Processing the call arguments (line 1973)
            str_43207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 30), 'str', 'Creating %s (version=%r)')
            
            # Obtaining an instance of the builtin type 'tuple' (line 1973)
            tuple_43208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 60), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1973)
            # Adding element type (line 1973)
            # Getting the type of 'target' (line 1973)
            target_43209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 60), 'target', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1973, 60), tuple_43208, target_43209)
            # Adding element type (line 1973)
            # Getting the type of 'version' (line 1973)
            version_43210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 68), 'version', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1973, 60), tuple_43208, version_43210)
            
            # Applying the binary operator '%' (line 1973)
            result_mod_43211 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 30), '%', str_43207, tuple_43208)
            
            # Processing the call keyword arguments (line 1973)
            kwargs_43212 = {}
            # Getting the type of 'self' (line 1973)
            self_43205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 20), 'self', False)
            # Obtaining the member 'info' of a type (line 1973)
            info_43206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 20), self_43205, 'info')
            # Calling info(args, kwargs) (line 1973)
            info_call_result_43213 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 20), info_43206, *[result_mod_43211], **kwargs_43212)
            
            
            # Assigning a Call to a Name (line 1974):
            
            # Assigning a Call to a Name (line 1974):
            
            # Call to open(...): (line 1974)
            # Processing the call arguments (line 1974)
            # Getting the type of 'target' (line 1974)
            target_43215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 29), 'target', False)
            str_43216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1974, 37), 'str', 'w')
            # Processing the call keyword arguments (line 1974)
            kwargs_43217 = {}
            # Getting the type of 'open' (line 1974)
            open_43214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 24), 'open', False)
            # Calling open(args, kwargs) (line 1974)
            open_call_result_43218 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 24), open_43214, *[target_43215, str_43216], **kwargs_43217)
            
            # Assigning a type to the variable 'f' (line 1974)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 20), 'f', open_call_result_43218)
            
            # Call to write(...): (line 1975)
            # Processing the call arguments (line 1975)
            str_43221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 28), 'str', 'version = %r\n')
            # Getting the type of 'version' (line 1975)
            version_43222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 48), 'version', False)
            # Applying the binary operator '%' (line 1975)
            result_mod_43223 = python_operator(stypy.reporting.localization.Localization(__file__, 1975, 28), '%', str_43221, version_43222)
            
            # Processing the call keyword arguments (line 1975)
            kwargs_43224 = {}
            # Getting the type of 'f' (line 1975)
            f_43219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 20), 'f', False)
            # Obtaining the member 'write' of a type (line 1975)
            write_43220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1975, 20), f_43219, 'write')
            # Calling write(args, kwargs) (line 1975)
            write_call_result_43225 = invoke(stypy.reporting.localization.Localization(__file__, 1975, 20), write_43220, *[result_mod_43223], **kwargs_43224)
            
            
            # Call to close(...): (line 1976)
            # Processing the call keyword arguments (line 1976)
            kwargs_43228 = {}
            # Getting the type of 'f' (line 1976)
            f_43226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 20), 'f', False)
            # Obtaining the member 'close' of a type (line 1976)
            close_43227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1976, 20), f_43226, 'close')
            # Calling close(args, kwargs) (line 1976)
            close_call_result_43229 = invoke(stypy.reporting.localization.Localization(__file__, 1976, 20), close_43227, *[], **kwargs_43228)
            
            # SSA join for if statement (line 1971)
            module_type_store = module_type_store.join_ssa_context()
            
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1978, 16))
            
            # 'import atexit' statement (line 1978)
            import atexit

            import_module(stypy.reporting.localization.Localization(__file__, 1978, 16), 'atexit', atexit, module_type_store)
            

            @norecursion
            def rm_file(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                # Getting the type of 'target' (line 1979)
                target_43230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 30), 'target')
                # Getting the type of 'self' (line 1979)
                self_43231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 39), 'self')
                # Obtaining the member 'info' of a type (line 1979)
                info_43232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1979, 39), self_43231, 'info')
                defaults = [target_43230, info_43232]
                # Create a new context for function 'rm_file'
                module_type_store = module_type_store.open_function_context('rm_file', 1979, 16, False)
                
                # Passed parameters checking function
                rm_file.stypy_localization = localization
                rm_file.stypy_type_of_self = None
                rm_file.stypy_type_store = module_type_store
                rm_file.stypy_function_name = 'rm_file'
                rm_file.stypy_param_names_list = ['f', 'p']
                rm_file.stypy_varargs_param_name = None
                rm_file.stypy_kwargs_param_name = None
                rm_file.stypy_call_defaults = defaults
                rm_file.stypy_call_varargs = varargs
                rm_file.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, 'rm_file', ['f', 'p'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'rm_file', localization, ['f', 'p'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'rm_file(...)' code ##################

                
                # Getting the type of 'delete' (line 1980)
                delete_43233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 23), 'delete')
                # Testing the type of an if condition (line 1980)
                if_condition_43234 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1980, 20), delete_43233)
                # Assigning a type to the variable 'if_condition_43234' (line 1980)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 20), 'if_condition_43234', if_condition_43234)
                # SSA begins for if statement (line 1980)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                
                # SSA begins for try-except statement (line 1981)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
                
                # Call to remove(...): (line 1981)
                # Processing the call arguments (line 1981)
                # Getting the type of 'f' (line 1981)
                f_43237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 39), 'f', False)
                # Processing the call keyword arguments (line 1981)
                kwargs_43238 = {}
                # Getting the type of 'os' (line 1981)
                os_43235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 29), 'os', False)
                # Obtaining the member 'remove' of a type (line 1981)
                remove_43236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1981, 29), os_43235, 'remove')
                # Calling remove(args, kwargs) (line 1981)
                remove_call_result_43239 = invoke(stypy.reporting.localization.Localization(__file__, 1981, 29), remove_43236, *[f_43237], **kwargs_43238)
                
                
                # Call to p(...): (line 1981)
                # Processing the call arguments (line 1981)
                str_43241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, 45), 'str', 'removed ')
                # Getting the type of 'f' (line 1981)
                f_43242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 56), 'f', False)
                # Applying the binary operator '+' (line 1981)
                result_add_43243 = python_operator(stypy.reporting.localization.Localization(__file__, 1981, 45), '+', str_43241, f_43242)
                
                # Processing the call keyword arguments (line 1981)
                kwargs_43244 = {}
                # Getting the type of 'p' (line 1981)
                p_43240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 43), 'p', False)
                # Calling p(args, kwargs) (line 1981)
                p_call_result_43245 = invoke(stypy.reporting.localization.Localization(__file__, 1981, 43), p_43240, *[result_add_43243], **kwargs_43244)
                
                # SSA branch for the except part of a try statement (line 1981)
                # SSA branch for the except 'OSError' branch of a try statement (line 1981)
                module_type_store.open_ssa_branch('except')
                pass
                # SSA join for try-except statement (line 1981)
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                # SSA begins for try-except statement (line 1983)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
                
                # Call to remove(...): (line 1983)
                # Processing the call arguments (line 1983)
                # Getting the type of 'f' (line 1983)
                f_43248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 39), 'f', False)
                str_43249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 41), 'str', 'c')
                # Applying the binary operator '+' (line 1983)
                result_add_43250 = python_operator(stypy.reporting.localization.Localization(__file__, 1983, 39), '+', f_43248, str_43249)
                
                # Processing the call keyword arguments (line 1983)
                kwargs_43251 = {}
                # Getting the type of 'os' (line 1983)
                os_43246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 29), 'os', False)
                # Obtaining the member 'remove' of a type (line 1983)
                remove_43247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1983, 29), os_43246, 'remove')
                # Calling remove(args, kwargs) (line 1983)
                remove_call_result_43252 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 29), remove_43247, *[result_add_43250], **kwargs_43251)
                
                
                # Call to p(...): (line 1983)
                # Processing the call arguments (line 1983)
                str_43254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 49), 'str', 'removed ')
                # Getting the type of 'f' (line 1983)
                f_43255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 60), 'f', False)
                # Applying the binary operator '+' (line 1983)
                result_add_43256 = python_operator(stypy.reporting.localization.Localization(__file__, 1983, 49), '+', str_43254, f_43255)
                
                str_43257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 62), 'str', 'c')
                # Applying the binary operator '+' (line 1983)
                result_add_43258 = python_operator(stypy.reporting.localization.Localization(__file__, 1983, 61), '+', result_add_43256, str_43257)
                
                # Processing the call keyword arguments (line 1983)
                kwargs_43259 = {}
                # Getting the type of 'p' (line 1983)
                p_43253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 47), 'p', False)
                # Calling p(args, kwargs) (line 1983)
                p_call_result_43260 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 47), p_43253, *[result_add_43258], **kwargs_43259)
                
                # SSA branch for the except part of a try statement (line 1983)
                # SSA branch for the except 'OSError' branch of a try statement (line 1983)
                module_type_store.open_ssa_branch('except')
                pass
                # SSA join for try-except statement (line 1983)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA join for if statement (line 1980)
                module_type_store = module_type_store.join_ssa_context()
                
                
                # ################# End of 'rm_file(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'rm_file' in the type store
                # Getting the type of 'stypy_return_type' (line 1979)
                stypy_return_type_43261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 16), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_43261)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'rm_file'
                return stypy_return_type_43261

            # Assigning a type to the variable 'rm_file' (line 1979)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 16), 'rm_file', rm_file)
            
            # Call to register(...): (line 1986)
            # Processing the call arguments (line 1986)
            # Getting the type of 'rm_file' (line 1986)
            rm_file_43264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 32), 'rm_file', False)
            # Processing the call keyword arguments (line 1986)
            kwargs_43265 = {}
            # Getting the type of 'atexit' (line 1986)
            atexit_43262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 16), 'atexit', False)
            # Obtaining the member 'register' of a type (line 1986)
            register_43263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1986, 16), atexit_43262, 'register')
            # Calling register(args, kwargs) (line 1986)
            register_call_result_43266 = invoke(stypy.reporting.localization.Localization(__file__, 1986, 16), register_43263, *[rm_file_43264], **kwargs_43265)
            
            # Getting the type of 'target' (line 1988)
            target_43267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 23), 'target')
            # Assigning a type to the variable 'stypy_return_type' (line 1988)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1988, 16), 'stypy_return_type', target_43267)
            
            # ################# End of 'generate_svn_version_py(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'generate_svn_version_py' in the type store
            # Getting the type of 'stypy_return_type' (line 1970)
            stypy_return_type_43268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_43268)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'generate_svn_version_py'
            return stypy_return_type_43268

        # Assigning a type to the variable 'generate_svn_version_py' (line 1970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 12), 'generate_svn_version_py', generate_svn_version_py)
        
        # Call to add_data_files(...): (line 1990)
        # Processing the call arguments (line 1990)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1990)
        tuple_43271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1990, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1990)
        # Adding element type (line 1990)
        str_43272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1990, 33), 'str', '')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1990, 33), tuple_43271, str_43272)
        # Adding element type (line 1990)
        
        # Call to generate_svn_version_py(...): (line 1990)
        # Processing the call keyword arguments (line 1990)
        kwargs_43274 = {}
        # Getting the type of 'generate_svn_version_py' (line 1990)
        generate_svn_version_py_43273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 37), 'generate_svn_version_py', False)
        # Calling generate_svn_version_py(args, kwargs) (line 1990)
        generate_svn_version_py_call_result_43275 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 37), generate_svn_version_py_43273, *[], **kwargs_43274)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1990, 33), tuple_43271, generate_svn_version_py_call_result_43275)
        
        # Processing the call keyword arguments (line 1990)
        kwargs_43276 = {}
        # Getting the type of 'self' (line 1990)
        self_43269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 12), 'self', False)
        # Obtaining the member 'add_data_files' of a type (line 1990)
        add_data_files_43270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1990, 12), self_43269, 'add_data_files')
        # Calling add_data_files(args, kwargs) (line 1990)
        add_data_files_call_result_43277 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 12), add_data_files_43270, *[tuple_43271], **kwargs_43276)
        
        # SSA join for if statement (line 1967)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'make_svn_version_py(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'make_svn_version_py' in the type store
        # Getting the type of 'stypy_return_type' (line 1949)
        stypy_return_type_43278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43278)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'make_svn_version_py'
        return stypy_return_type_43278


    @norecursion
    def make_hg_version_py(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1992)
        True_43279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 40), 'True')
        defaults = [True_43279]
        # Create a new context for function 'make_hg_version_py'
        module_type_store = module_type_store.open_function_context('make_hg_version_py', 1992, 4, False)
        # Assigning a type to the variable 'self' (line 1993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1993, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_localization', localization)
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_function_name', 'Configuration.make_hg_version_py')
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_param_names_list', ['delete'])
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.make_hg_version_py.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.make_hg_version_py', ['delete'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'make_hg_version_py', localization, ['delete'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'make_hg_version_py(...)' code ##################

        str_43280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2006, (-1)), 'str', 'Appends a data function to the data_files list that will generate\n        __hg_version__.py file to the current package directory.\n\n        Generate package __hg_version__.py file from Mercurial revision,\n        it will be removed after python exits but will be available\n        when sdist, etc commands are executed.\n\n        Notes\n        -----\n        If __hg_version__.py existed before, nothing is done.\n\n        This is intended for working with source directories that are\n        in an Mercurial repository.\n        ')
        
        # Assigning a Call to a Name (line 2007):
        
        # Assigning a Call to a Name (line 2007):
        
        # Call to njoin(...): (line 2007)
        # Processing the call arguments (line 2007)
        # Getting the type of 'self' (line 2007)
        self_43282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 23), 'self', False)
        # Obtaining the member 'local_path' of a type (line 2007)
        local_path_43283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2007, 23), self_43282, 'local_path')
        str_43284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2007, 40), 'str', '__hg_version__.py')
        # Processing the call keyword arguments (line 2007)
        kwargs_43285 = {}
        # Getting the type of 'njoin' (line 2007)
        njoin_43281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 17), 'njoin', False)
        # Calling njoin(args, kwargs) (line 2007)
        njoin_call_result_43286 = invoke(stypy.reporting.localization.Localization(__file__, 2007, 17), njoin_43281, *[local_path_43283, str_43284], **kwargs_43285)
        
        # Assigning a type to the variable 'target' (line 2007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2007, 8), 'target', njoin_call_result_43286)
        
        # Assigning a Call to a Name (line 2008):
        
        # Assigning a Call to a Name (line 2008):
        
        # Call to _get_hg_revision(...): (line 2008)
        # Processing the call arguments (line 2008)
        # Getting the type of 'self' (line 2008)
        self_43289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 41), 'self', False)
        # Obtaining the member 'local_path' of a type (line 2008)
        local_path_43290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2008, 41), self_43289, 'local_path')
        # Processing the call keyword arguments (line 2008)
        kwargs_43291 = {}
        # Getting the type of 'self' (line 2008)
        self_43287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 19), 'self', False)
        # Obtaining the member '_get_hg_revision' of a type (line 2008)
        _get_hg_revision_43288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2008, 19), self_43287, '_get_hg_revision')
        # Calling _get_hg_revision(args, kwargs) (line 2008)
        _get_hg_revision_call_result_43292 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 19), _get_hg_revision_43288, *[local_path_43290], **kwargs_43291)
        
        # Assigning a type to the variable 'revision' (line 2008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2008, 8), 'revision', _get_hg_revision_call_result_43292)
        
        
        # Evaluating a boolean operation
        
        # Call to isfile(...): (line 2009)
        # Processing the call arguments (line 2009)
        # Getting the type of 'target' (line 2009)
        target_43296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 26), 'target', False)
        # Processing the call keyword arguments (line 2009)
        kwargs_43297 = {}
        # Getting the type of 'os' (line 2009)
        os_43293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 11), 'os', False)
        # Obtaining the member 'path' of a type (line 2009)
        path_43294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 11), os_43293, 'path')
        # Obtaining the member 'isfile' of a type (line 2009)
        isfile_43295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 11), path_43294, 'isfile')
        # Calling isfile(args, kwargs) (line 2009)
        isfile_call_result_43298 = invoke(stypy.reporting.localization.Localization(__file__, 2009, 11), isfile_43295, *[target_43296], **kwargs_43297)
        
        
        # Getting the type of 'revision' (line 2009)
        revision_43299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 37), 'revision')
        # Getting the type of 'None' (line 2009)
        None_43300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 49), 'None')
        # Applying the binary operator 'is' (line 2009)
        result_is__43301 = python_operator(stypy.reporting.localization.Localization(__file__, 2009, 37), 'is', revision_43299, None_43300)
        
        # Applying the binary operator 'or' (line 2009)
        result_or_keyword_43302 = python_operator(stypy.reporting.localization.Localization(__file__, 2009, 11), 'or', isfile_call_result_43298, result_is__43301)
        
        # Testing the type of an if condition (line 2009)
        if_condition_43303 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2009, 8), result_or_keyword_43302)
        # Assigning a type to the variable 'if_condition_43303' (line 2009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2009, 8), 'if_condition_43303', if_condition_43303)
        # SSA begins for if statement (line 2009)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2010, 12), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 2009)
        module_type_store.open_ssa_branch('else')

        @norecursion
        def generate_hg_version_py(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'generate_hg_version_py'
            module_type_store = module_type_store.open_function_context('generate_hg_version_py', 2012, 12, False)
            
            # Passed parameters checking function
            generate_hg_version_py.stypy_localization = localization
            generate_hg_version_py.stypy_type_of_self = None
            generate_hg_version_py.stypy_type_store = module_type_store
            generate_hg_version_py.stypy_function_name = 'generate_hg_version_py'
            generate_hg_version_py.stypy_param_names_list = []
            generate_hg_version_py.stypy_varargs_param_name = None
            generate_hg_version_py.stypy_kwargs_param_name = None
            generate_hg_version_py.stypy_call_defaults = defaults
            generate_hg_version_py.stypy_call_varargs = varargs
            generate_hg_version_py.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'generate_hg_version_py', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'generate_hg_version_py', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'generate_hg_version_py(...)' code ##################

            
            
            
            # Call to isfile(...): (line 2013)
            # Processing the call arguments (line 2013)
            # Getting the type of 'target' (line 2013)
            target_43307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2013, 38), 'target', False)
            # Processing the call keyword arguments (line 2013)
            kwargs_43308 = {}
            # Getting the type of 'os' (line 2013)
            os_43304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2013, 23), 'os', False)
            # Obtaining the member 'path' of a type (line 2013)
            path_43305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2013, 23), os_43304, 'path')
            # Obtaining the member 'isfile' of a type (line 2013)
            isfile_43306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2013, 23), path_43305, 'isfile')
            # Calling isfile(args, kwargs) (line 2013)
            isfile_call_result_43309 = invoke(stypy.reporting.localization.Localization(__file__, 2013, 23), isfile_43306, *[target_43307], **kwargs_43308)
            
            # Applying the 'not' unary operator (line 2013)
            result_not__43310 = python_operator(stypy.reporting.localization.Localization(__file__, 2013, 19), 'not', isfile_call_result_43309)
            
            # Testing the type of an if condition (line 2013)
            if_condition_43311 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2013, 16), result_not__43310)
            # Assigning a type to the variable 'if_condition_43311' (line 2013)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2013, 16), 'if_condition_43311', if_condition_43311)
            # SSA begins for if statement (line 2013)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 2014):
            
            # Assigning a Call to a Name (line 2014):
            
            # Call to str(...): (line 2014)
            # Processing the call arguments (line 2014)
            # Getting the type of 'revision' (line 2014)
            revision_43313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 34), 'revision', False)
            # Processing the call keyword arguments (line 2014)
            kwargs_43314 = {}
            # Getting the type of 'str' (line 2014)
            str_43312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 30), 'str', False)
            # Calling str(args, kwargs) (line 2014)
            str_call_result_43315 = invoke(stypy.reporting.localization.Localization(__file__, 2014, 30), str_43312, *[revision_43313], **kwargs_43314)
            
            # Assigning a type to the variable 'version' (line 2014)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2014, 20), 'version', str_call_result_43315)
            
            # Call to info(...): (line 2015)
            # Processing the call arguments (line 2015)
            str_43318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, 30), 'str', 'Creating %s (version=%r)')
            
            # Obtaining an instance of the builtin type 'tuple' (line 2015)
            tuple_43319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, 60), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2015)
            # Adding element type (line 2015)
            # Getting the type of 'target' (line 2015)
            target_43320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 60), 'target', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2015, 60), tuple_43319, target_43320)
            # Adding element type (line 2015)
            # Getting the type of 'version' (line 2015)
            version_43321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 68), 'version', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2015, 60), tuple_43319, version_43321)
            
            # Applying the binary operator '%' (line 2015)
            result_mod_43322 = python_operator(stypy.reporting.localization.Localization(__file__, 2015, 30), '%', str_43318, tuple_43319)
            
            # Processing the call keyword arguments (line 2015)
            kwargs_43323 = {}
            # Getting the type of 'self' (line 2015)
            self_43316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 20), 'self', False)
            # Obtaining the member 'info' of a type (line 2015)
            info_43317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2015, 20), self_43316, 'info')
            # Calling info(args, kwargs) (line 2015)
            info_call_result_43324 = invoke(stypy.reporting.localization.Localization(__file__, 2015, 20), info_43317, *[result_mod_43322], **kwargs_43323)
            
            
            # Assigning a Call to a Name (line 2016):
            
            # Assigning a Call to a Name (line 2016):
            
            # Call to open(...): (line 2016)
            # Processing the call arguments (line 2016)
            # Getting the type of 'target' (line 2016)
            target_43326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 29), 'target', False)
            str_43327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2016, 37), 'str', 'w')
            # Processing the call keyword arguments (line 2016)
            kwargs_43328 = {}
            # Getting the type of 'open' (line 2016)
            open_43325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 24), 'open', False)
            # Calling open(args, kwargs) (line 2016)
            open_call_result_43329 = invoke(stypy.reporting.localization.Localization(__file__, 2016, 24), open_43325, *[target_43326, str_43327], **kwargs_43328)
            
            # Assigning a type to the variable 'f' (line 2016)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2016, 20), 'f', open_call_result_43329)
            
            # Call to write(...): (line 2017)
            # Processing the call arguments (line 2017)
            str_43332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2017, 28), 'str', 'version = %r\n')
            # Getting the type of 'version' (line 2017)
            version_43333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 48), 'version', False)
            # Applying the binary operator '%' (line 2017)
            result_mod_43334 = python_operator(stypy.reporting.localization.Localization(__file__, 2017, 28), '%', str_43332, version_43333)
            
            # Processing the call keyword arguments (line 2017)
            kwargs_43335 = {}
            # Getting the type of 'f' (line 2017)
            f_43330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 20), 'f', False)
            # Obtaining the member 'write' of a type (line 2017)
            write_43331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2017, 20), f_43330, 'write')
            # Calling write(args, kwargs) (line 2017)
            write_call_result_43336 = invoke(stypy.reporting.localization.Localization(__file__, 2017, 20), write_43331, *[result_mod_43334], **kwargs_43335)
            
            
            # Call to close(...): (line 2018)
            # Processing the call keyword arguments (line 2018)
            kwargs_43339 = {}
            # Getting the type of 'f' (line 2018)
            f_43337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 20), 'f', False)
            # Obtaining the member 'close' of a type (line 2018)
            close_43338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2018, 20), f_43337, 'close')
            # Calling close(args, kwargs) (line 2018)
            close_call_result_43340 = invoke(stypy.reporting.localization.Localization(__file__, 2018, 20), close_43338, *[], **kwargs_43339)
            
            # SSA join for if statement (line 2013)
            module_type_store = module_type_store.join_ssa_context()
            
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2020, 16))
            
            # 'import atexit' statement (line 2020)
            import atexit

            import_module(stypy.reporting.localization.Localization(__file__, 2020, 16), 'atexit', atexit, module_type_store)
            

            @norecursion
            def rm_file(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                # Getting the type of 'target' (line 2021)
                target_43341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 30), 'target')
                # Getting the type of 'self' (line 2021)
                self_43342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 39), 'self')
                # Obtaining the member 'info' of a type (line 2021)
                info_43343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2021, 39), self_43342, 'info')
                defaults = [target_43341, info_43343]
                # Create a new context for function 'rm_file'
                module_type_store = module_type_store.open_function_context('rm_file', 2021, 16, False)
                
                # Passed parameters checking function
                rm_file.stypy_localization = localization
                rm_file.stypy_type_of_self = None
                rm_file.stypy_type_store = module_type_store
                rm_file.stypy_function_name = 'rm_file'
                rm_file.stypy_param_names_list = ['f', 'p']
                rm_file.stypy_varargs_param_name = None
                rm_file.stypy_kwargs_param_name = None
                rm_file.stypy_call_defaults = defaults
                rm_file.stypy_call_varargs = varargs
                rm_file.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, 'rm_file', ['f', 'p'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'rm_file', localization, ['f', 'p'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'rm_file(...)' code ##################

                
                # Getting the type of 'delete' (line 2022)
                delete_43344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2022, 23), 'delete')
                # Testing the type of an if condition (line 2022)
                if_condition_43345 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2022, 20), delete_43344)
                # Assigning a type to the variable 'if_condition_43345' (line 2022)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2022, 20), 'if_condition_43345', if_condition_43345)
                # SSA begins for if statement (line 2022)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                
                # SSA begins for try-except statement (line 2023)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
                
                # Call to remove(...): (line 2023)
                # Processing the call arguments (line 2023)
                # Getting the type of 'f' (line 2023)
                f_43348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 39), 'f', False)
                # Processing the call keyword arguments (line 2023)
                kwargs_43349 = {}
                # Getting the type of 'os' (line 2023)
                os_43346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 29), 'os', False)
                # Obtaining the member 'remove' of a type (line 2023)
                remove_43347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 29), os_43346, 'remove')
                # Calling remove(args, kwargs) (line 2023)
                remove_call_result_43350 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 29), remove_43347, *[f_43348], **kwargs_43349)
                
                
                # Call to p(...): (line 2023)
                # Processing the call arguments (line 2023)
                str_43352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 45), 'str', 'removed ')
                # Getting the type of 'f' (line 2023)
                f_43353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 56), 'f', False)
                # Applying the binary operator '+' (line 2023)
                result_add_43354 = python_operator(stypy.reporting.localization.Localization(__file__, 2023, 45), '+', str_43352, f_43353)
                
                # Processing the call keyword arguments (line 2023)
                kwargs_43355 = {}
                # Getting the type of 'p' (line 2023)
                p_43351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 43), 'p', False)
                # Calling p(args, kwargs) (line 2023)
                p_call_result_43356 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 43), p_43351, *[result_add_43354], **kwargs_43355)
                
                # SSA branch for the except part of a try statement (line 2023)
                # SSA branch for the except 'OSError' branch of a try statement (line 2023)
                module_type_store.open_ssa_branch('except')
                pass
                # SSA join for try-except statement (line 2023)
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                # SSA begins for try-except statement (line 2025)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
                
                # Call to remove(...): (line 2025)
                # Processing the call arguments (line 2025)
                # Getting the type of 'f' (line 2025)
                f_43359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 39), 'f', False)
                str_43360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2025, 41), 'str', 'c')
                # Applying the binary operator '+' (line 2025)
                result_add_43361 = python_operator(stypy.reporting.localization.Localization(__file__, 2025, 39), '+', f_43359, str_43360)
                
                # Processing the call keyword arguments (line 2025)
                kwargs_43362 = {}
                # Getting the type of 'os' (line 2025)
                os_43357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 29), 'os', False)
                # Obtaining the member 'remove' of a type (line 2025)
                remove_43358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2025, 29), os_43357, 'remove')
                # Calling remove(args, kwargs) (line 2025)
                remove_call_result_43363 = invoke(stypy.reporting.localization.Localization(__file__, 2025, 29), remove_43358, *[result_add_43361], **kwargs_43362)
                
                
                # Call to p(...): (line 2025)
                # Processing the call arguments (line 2025)
                str_43365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2025, 49), 'str', 'removed ')
                # Getting the type of 'f' (line 2025)
                f_43366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 60), 'f', False)
                # Applying the binary operator '+' (line 2025)
                result_add_43367 = python_operator(stypy.reporting.localization.Localization(__file__, 2025, 49), '+', str_43365, f_43366)
                
                str_43368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2025, 62), 'str', 'c')
                # Applying the binary operator '+' (line 2025)
                result_add_43369 = python_operator(stypy.reporting.localization.Localization(__file__, 2025, 61), '+', result_add_43367, str_43368)
                
                # Processing the call keyword arguments (line 2025)
                kwargs_43370 = {}
                # Getting the type of 'p' (line 2025)
                p_43364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 47), 'p', False)
                # Calling p(args, kwargs) (line 2025)
                p_call_result_43371 = invoke(stypy.reporting.localization.Localization(__file__, 2025, 47), p_43364, *[result_add_43369], **kwargs_43370)
                
                # SSA branch for the except part of a try statement (line 2025)
                # SSA branch for the except 'OSError' branch of a try statement (line 2025)
                module_type_store.open_ssa_branch('except')
                pass
                # SSA join for try-except statement (line 2025)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA join for if statement (line 2022)
                module_type_store = module_type_store.join_ssa_context()
                
                
                # ################# End of 'rm_file(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'rm_file' in the type store
                # Getting the type of 'stypy_return_type' (line 2021)
                stypy_return_type_43372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 16), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_43372)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'rm_file'
                return stypy_return_type_43372

            # Assigning a type to the variable 'rm_file' (line 2021)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 16), 'rm_file', rm_file)
            
            # Call to register(...): (line 2028)
            # Processing the call arguments (line 2028)
            # Getting the type of 'rm_file' (line 2028)
            rm_file_43375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 32), 'rm_file', False)
            # Processing the call keyword arguments (line 2028)
            kwargs_43376 = {}
            # Getting the type of 'atexit' (line 2028)
            atexit_43373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 16), 'atexit', False)
            # Obtaining the member 'register' of a type (line 2028)
            register_43374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2028, 16), atexit_43373, 'register')
            # Calling register(args, kwargs) (line 2028)
            register_call_result_43377 = invoke(stypy.reporting.localization.Localization(__file__, 2028, 16), register_43374, *[rm_file_43375], **kwargs_43376)
            
            # Getting the type of 'target' (line 2030)
            target_43378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 23), 'target')
            # Assigning a type to the variable 'stypy_return_type' (line 2030)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2030, 16), 'stypy_return_type', target_43378)
            
            # ################# End of 'generate_hg_version_py(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'generate_hg_version_py' in the type store
            # Getting the type of 'stypy_return_type' (line 2012)
            stypy_return_type_43379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_43379)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'generate_hg_version_py'
            return stypy_return_type_43379

        # Assigning a type to the variable 'generate_hg_version_py' (line 2012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2012, 12), 'generate_hg_version_py', generate_hg_version_py)
        
        # Call to add_data_files(...): (line 2032)
        # Processing the call arguments (line 2032)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2032)
        tuple_43382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2032, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2032)
        # Adding element type (line 2032)
        str_43383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2032, 33), 'str', '')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2032, 33), tuple_43382, str_43383)
        # Adding element type (line 2032)
        
        # Call to generate_hg_version_py(...): (line 2032)
        # Processing the call keyword arguments (line 2032)
        kwargs_43385 = {}
        # Getting the type of 'generate_hg_version_py' (line 2032)
        generate_hg_version_py_43384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 37), 'generate_hg_version_py', False)
        # Calling generate_hg_version_py(args, kwargs) (line 2032)
        generate_hg_version_py_call_result_43386 = invoke(stypy.reporting.localization.Localization(__file__, 2032, 37), generate_hg_version_py_43384, *[], **kwargs_43385)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2032, 33), tuple_43382, generate_hg_version_py_call_result_43386)
        
        # Processing the call keyword arguments (line 2032)
        kwargs_43387 = {}
        # Getting the type of 'self' (line 2032)
        self_43380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 12), 'self', False)
        # Obtaining the member 'add_data_files' of a type (line 2032)
        add_data_files_43381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2032, 12), self_43380, 'add_data_files')
        # Calling add_data_files(args, kwargs) (line 2032)
        add_data_files_call_result_43388 = invoke(stypy.reporting.localization.Localization(__file__, 2032, 12), add_data_files_43381, *[tuple_43382], **kwargs_43387)
        
        # SSA join for if statement (line 2009)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'make_hg_version_py(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'make_hg_version_py' in the type store
        # Getting the type of 'stypy_return_type' (line 1992)
        stypy_return_type_43389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43389)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'make_hg_version_py'
        return stypy_return_type_43389


    @norecursion
    def make_config_py(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_43390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2034, 33), 'str', '__config__')
        defaults = [str_43390]
        # Create a new context for function 'make_config_py'
        module_type_store = module_type_store.open_function_context('make_config_py', 2034, 4, False)
        # Assigning a type to the variable 'self' (line 2035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2035, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.make_config_py.__dict__.__setitem__('stypy_localization', localization)
        Configuration.make_config_py.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.make_config_py.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.make_config_py.__dict__.__setitem__('stypy_function_name', 'Configuration.make_config_py')
        Configuration.make_config_py.__dict__.__setitem__('stypy_param_names_list', ['name'])
        Configuration.make_config_py.__dict__.__setitem__('stypy_varargs_param_name', None)
        Configuration.make_config_py.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.make_config_py.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.make_config_py.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.make_config_py.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.make_config_py.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.make_config_py', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'make_config_py', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'make_config_py(...)' code ##################

        str_43391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2041, (-1)), 'str', 'Generate package __config__.py file containing system_info\n        information used during building the package.\n\n        This file is installed to the\n        package installation directory.\n\n        ')
        
        # Call to append(...): (line 2042)
        # Processing the call arguments (line 2042)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2042)
        tuple_43395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2042)
        # Adding element type (line 2042)
        # Getting the type of 'self' (line 2042)
        self_43396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 32), 'self', False)
        # Obtaining the member 'name' of a type (line 2042)
        name_43397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 32), self_43396, 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2042, 32), tuple_43395, name_43397)
        # Adding element type (line 2042)
        # Getting the type of 'name' (line 2042)
        name_43398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 43), 'name', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2042, 32), tuple_43395, name_43398)
        # Adding element type (line 2042)
        # Getting the type of 'generate_config_py' (line 2042)
        generate_config_py_43399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 49), 'generate_config_py', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2042, 32), tuple_43395, generate_config_py_43399)
        
        # Processing the call keyword arguments (line 2042)
        kwargs_43400 = {}
        # Getting the type of 'self' (line 2042)
        self_43392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 8), 'self', False)
        # Obtaining the member 'py_modules' of a type (line 2042)
        py_modules_43393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 8), self_43392, 'py_modules')
        # Obtaining the member 'append' of a type (line 2042)
        append_43394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 8), py_modules_43393, 'append')
        # Calling append(args, kwargs) (line 2042)
        append_call_result_43401 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 8), append_43394, *[tuple_43395], **kwargs_43400)
        
        
        # ################# End of 'make_config_py(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'make_config_py' in the type store
        # Getting the type of 'stypy_return_type' (line 2034)
        stypy_return_type_43402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43402)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'make_config_py'
        return stypy_return_type_43402


    @norecursion
    def get_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_info'
        module_type_store = module_type_store.open_function_context('get_info', 2045, 4, False)
        # Assigning a type to the variable 'self' (line 2046)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2046, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Configuration.get_info.__dict__.__setitem__('stypy_localization', localization)
        Configuration.get_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Configuration.get_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        Configuration.get_info.__dict__.__setitem__('stypy_function_name', 'Configuration.get_info')
        Configuration.get_info.__dict__.__setitem__('stypy_param_names_list', [])
        Configuration.get_info.__dict__.__setitem__('stypy_varargs_param_name', 'names')
        Configuration.get_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Configuration.get_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        Configuration.get_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        Configuration.get_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Configuration.get_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Configuration.get_info', [], 'names', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_info(...)' code ##################

        str_43403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2050, (-1)), 'str', 'Get resources information.\n\n        Return information (from system_info.get_info) for all of the names in\n        the argument list in a single dictionary.\n        ')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2051, 8))
        
        # 'from numpy.distutils.system_info import get_info, dict_append' statement (line 2051)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
        import_43404 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2051, 8), 'numpy.distutils.system_info')

        if (type(import_43404) is not StypyTypeError):

            if (import_43404 != 'pyd_module'):
                __import__(import_43404)
                sys_modules_43405 = sys.modules[import_43404]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2051, 8), 'numpy.distutils.system_info', sys_modules_43405.module_type_store, module_type_store, ['get_info', 'dict_append'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2051, 8), __file__, sys_modules_43405, sys_modules_43405.module_type_store, module_type_store)
            else:
                from numpy.distutils.system_info import get_info, dict_append

                import_from_module(stypy.reporting.localization.Localization(__file__, 2051, 8), 'numpy.distutils.system_info', None, module_type_store, ['get_info', 'dict_append'], [get_info, dict_append])

        else:
            # Assigning a type to the variable 'numpy.distutils.system_info' (line 2051)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 8), 'numpy.distutils.system_info', import_43404)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
        
        
        # Assigning a Dict to a Name (line 2052):
        
        # Assigning a Dict to a Name (line 2052):
        
        # Obtaining an instance of the builtin type 'dict' (line 2052)
        dict_43406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2052, 20), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2052)
        
        # Assigning a type to the variable 'info_dict' (line 2052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2052, 8), 'info_dict', dict_43406)
        
        # Getting the type of 'names' (line 2053)
        names_43407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 17), 'names')
        # Testing the type of a for loop iterable (line 2053)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2053, 8), names_43407)
        # Getting the type of the for loop variable (line 2053)
        for_loop_var_43408 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2053, 8), names_43407)
        # Assigning a type to the variable 'a' (line 2053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2053, 8), 'a', for_loop_var_43408)
        # SSA begins for a for statement (line 2053)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to dict_append(...): (line 2054)
        # Processing the call arguments (line 2054)
        # Getting the type of 'info_dict' (line 2054)
        info_dict_43410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 24), 'info_dict', False)
        # Processing the call keyword arguments (line 2054)
        
        # Call to get_info(...): (line 2054)
        # Processing the call arguments (line 2054)
        # Getting the type of 'a' (line 2054)
        a_43412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 45), 'a', False)
        # Processing the call keyword arguments (line 2054)
        kwargs_43413 = {}
        # Getting the type of 'get_info' (line 2054)
        get_info_43411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 36), 'get_info', False)
        # Calling get_info(args, kwargs) (line 2054)
        get_info_call_result_43414 = invoke(stypy.reporting.localization.Localization(__file__, 2054, 36), get_info_43411, *[a_43412], **kwargs_43413)
        
        kwargs_43415 = {'get_info_call_result_43414': get_info_call_result_43414}
        # Getting the type of 'dict_append' (line 2054)
        dict_append_43409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 2054)
        dict_append_call_result_43416 = invoke(stypy.reporting.localization.Localization(__file__, 2054, 12), dict_append_43409, *[info_dict_43410], **kwargs_43415)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'info_dict' (line 2055)
        info_dict_43417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 15), 'info_dict')
        # Assigning a type to the variable 'stypy_return_type' (line 2055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 8), 'stypy_return_type', info_dict_43417)
        
        # ################# End of 'get_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_info' in the type store
        # Getting the type of 'stypy_return_type' (line 2045)
        stypy_return_type_43418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43418)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_info'
        return stypy_return_type_43418


# Assigning a type to the variable 'Configuration' (line 696)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 0), 'Configuration', Configuration)

# Assigning a List to a Name (line 698):

# Obtaining an instance of the builtin type 'list' (line 698)
list_43419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 698)
# Adding element type (line 698)
str_43420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 18), 'str', 'packages')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 17), list_43419, str_43420)
# Adding element type (line 698)
str_43421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 30), 'str', 'ext_modules')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 17), list_43419, str_43421)
# Adding element type (line 698)
str_43422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 45), 'str', 'data_files')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 17), list_43419, str_43422)
# Adding element type (line 698)
str_43423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 59), 'str', 'include_dirs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 17), list_43419, str_43423)
# Adding element type (line 698)
str_43424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 18), 'str', 'libraries')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 17), list_43419, str_43424)
# Adding element type (line 698)
str_43425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 31), 'str', 'headers')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 17), list_43419, str_43425)
# Adding element type (line 698)
str_43426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 42), 'str', 'scripts')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 17), list_43419, str_43426)
# Adding element type (line 698)
str_43427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 53), 'str', 'py_modules')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 17), list_43419, str_43427)
# Adding element type (line 698)
str_43428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 18), 'str', 'installed_libraries')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 17), list_43419, str_43428)
# Adding element type (line 698)
str_43429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 41), 'str', 'define_macros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 17), list_43419, str_43429)

# Getting the type of 'Configuration'
Configuration_43430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Configuration')
# Setting the type of the member '_list_keys' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Configuration_43430, '_list_keys', list_43419)

# Assigning a List to a Name (line 701):

# Obtaining an instance of the builtin type 'list' (line 701)
list_43431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 701)
# Adding element type (line 701)
str_43432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 18), 'str', 'package_dir')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 17), list_43431, str_43432)
# Adding element type (line 701)
str_43433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 33), 'str', 'installed_pkg_config')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 17), list_43431, str_43433)

# Getting the type of 'Configuration'
Configuration_43434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Configuration')
# Setting the type of the member '_dict_keys' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Configuration_43434, '_dict_keys', list_43431)

# Assigning a List to a Name (line 702):

# Obtaining an instance of the builtin type 'list' (line 702)
list_43435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 18), 'list')
# Adding type elements to the builtin type 'list' instance (line 702)
# Adding element type (line 702)
str_43436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 19), 'str', 'name')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 702, 18), list_43435, str_43436)
# Adding element type (line 702)
str_43437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 27), 'str', 'version')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 702, 18), list_43435, str_43437)

# Getting the type of 'Configuration'
Configuration_43438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Configuration')
# Setting the type of the member '_extra_keys' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Configuration_43438, '_extra_keys', list_43435)

# Assigning a List to a Name (line 704):

# Obtaining an instance of the builtin type 'list' (line 704)
list_43439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 25), 'list')
# Adding type elements to the builtin type 'list' instance (line 704)

# Getting the type of 'Configuration'
Configuration_43440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Configuration')
# Setting the type of the member 'numpy_include_dirs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Configuration_43440, 'numpy_include_dirs', list_43439)

@norecursion
def get_cmd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'dict' (line 2058)
    dict_43441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2058, 28), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2058)
    
    defaults = [dict_43441]
    # Create a new context for function 'get_cmd'
    module_type_store = module_type_store.open_function_context('get_cmd', 2058, 0, False)
    
    # Passed parameters checking function
    get_cmd.stypy_localization = localization
    get_cmd.stypy_type_of_self = None
    get_cmd.stypy_type_store = module_type_store
    get_cmd.stypy_function_name = 'get_cmd'
    get_cmd.stypy_param_names_list = ['cmdname', '_cache']
    get_cmd.stypy_varargs_param_name = None
    get_cmd.stypy_kwargs_param_name = None
    get_cmd.stypy_call_defaults = defaults
    get_cmd.stypy_call_varargs = varargs
    get_cmd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_cmd', ['cmdname', '_cache'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_cmd', localization, ['cmdname', '_cache'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_cmd(...)' code ##################

    
    
    # Getting the type of 'cmdname' (line 2059)
    cmdname_43442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 7), 'cmdname')
    # Getting the type of '_cache' (line 2059)
    _cache_43443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 22), '_cache')
    # Applying the binary operator 'notin' (line 2059)
    result_contains_43444 = python_operator(stypy.reporting.localization.Localization(__file__, 2059, 7), 'notin', cmdname_43442, _cache_43443)
    
    # Testing the type of an if condition (line 2059)
    if_condition_43445 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2059, 4), result_contains_43444)
    # Assigning a type to the variable 'if_condition_43445' (line 2059)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2059, 4), 'if_condition_43445', if_condition_43445)
    # SSA begins for if statement (line 2059)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2060, 8))
    
    # 'import distutils.core' statement (line 2060)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
    import_43446 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2060, 8), 'distutils.core')

    if (type(import_43446) is not StypyTypeError):

        if (import_43446 != 'pyd_module'):
            __import__(import_43446)
            sys_modules_43447 = sys.modules[import_43446]
            import_module(stypy.reporting.localization.Localization(__file__, 2060, 8), 'distutils.core', sys_modules_43447.module_type_store, module_type_store)
        else:
            import distutils.core

            import_module(stypy.reporting.localization.Localization(__file__, 2060, 8), 'distutils.core', distutils.core, module_type_store)

    else:
        # Assigning a type to the variable 'distutils.core' (line 2060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2060, 8), 'distutils.core', import_43446)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
    
    
    # Assigning a Attribute to a Name (line 2061):
    
    # Assigning a Attribute to a Name (line 2061):
    # Getting the type of 'distutils' (line 2061)
    distutils_43448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 15), 'distutils')
    # Obtaining the member 'core' of a type (line 2061)
    core_43449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2061, 15), distutils_43448, 'core')
    # Obtaining the member '_setup_distribution' of a type (line 2061)
    _setup_distribution_43450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2061, 15), core_43449, '_setup_distribution')
    # Assigning a type to the variable 'dist' (line 2061)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 8), 'dist', _setup_distribution_43450)
    
    # Type idiom detected: calculating its left and rigth part (line 2062)
    # Getting the type of 'dist' (line 2062)
    dist_43451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 11), 'dist')
    # Getting the type of 'None' (line 2062)
    None_43452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 19), 'None')
    
    (may_be_43453, more_types_in_union_43454) = may_be_none(dist_43451, None_43452)

    if may_be_43453:

        if more_types_in_union_43454:
            # Runtime conditional SSA (line 2062)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2063, 12))
        
        # 'from distutils.errors import DistutilsInternalError' statement (line 2063)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
        import_43455 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2063, 12), 'distutils.errors')

        if (type(import_43455) is not StypyTypeError):

            if (import_43455 != 'pyd_module'):
                __import__(import_43455)
                sys_modules_43456 = sys.modules[import_43455]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2063, 12), 'distutils.errors', sys_modules_43456.module_type_store, module_type_store, ['DistutilsInternalError'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2063, 12), __file__, sys_modules_43456, sys_modules_43456.module_type_store, module_type_store)
            else:
                from distutils.errors import DistutilsInternalError

                import_from_module(stypy.reporting.localization.Localization(__file__, 2063, 12), 'distutils.errors', None, module_type_store, ['DistutilsInternalError'], [DistutilsInternalError])

        else:
            # Assigning a type to the variable 'distutils.errors' (line 2063)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2063, 12), 'distutils.errors', import_43455)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
        
        
        # Call to DistutilsInternalError(...): (line 2064)
        # Processing the call arguments (line 2064)
        str_43458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2065, 18), 'str', 'setup distribution instance not initialized')
        # Processing the call keyword arguments (line 2064)
        kwargs_43459 = {}
        # Getting the type of 'DistutilsInternalError' (line 2064)
        DistutilsInternalError_43457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 18), 'DistutilsInternalError', False)
        # Calling DistutilsInternalError(args, kwargs) (line 2064)
        DistutilsInternalError_call_result_43460 = invoke(stypy.reporting.localization.Localization(__file__, 2064, 18), DistutilsInternalError_43457, *[str_43458], **kwargs_43459)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2064, 12), DistutilsInternalError_call_result_43460, 'raise parameter', BaseException)

        if more_types_in_union_43454:
            # SSA join for if statement (line 2062)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2066):
    
    # Assigning a Call to a Name (line 2066):
    
    # Call to get_command_obj(...): (line 2066)
    # Processing the call arguments (line 2066)
    # Getting the type of 'cmdname' (line 2066)
    cmdname_43463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 35), 'cmdname', False)
    # Processing the call keyword arguments (line 2066)
    kwargs_43464 = {}
    # Getting the type of 'dist' (line 2066)
    dist_43461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 14), 'dist', False)
    # Obtaining the member 'get_command_obj' of a type (line 2066)
    get_command_obj_43462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 14), dist_43461, 'get_command_obj')
    # Calling get_command_obj(args, kwargs) (line 2066)
    get_command_obj_call_result_43465 = invoke(stypy.reporting.localization.Localization(__file__, 2066, 14), get_command_obj_43462, *[cmdname_43463], **kwargs_43464)
    
    # Assigning a type to the variable 'cmd' (line 2066)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 8), 'cmd', get_command_obj_call_result_43465)
    
    # Assigning a Name to a Subscript (line 2067):
    
    # Assigning a Name to a Subscript (line 2067):
    # Getting the type of 'cmd' (line 2067)
    cmd_43466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 26), 'cmd')
    # Getting the type of '_cache' (line 2067)
    _cache_43467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), '_cache')
    # Getting the type of 'cmdname' (line 2067)
    cmdname_43468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 15), 'cmdname')
    # Storing an element on a container (line 2067)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2067, 8), _cache_43467, (cmdname_43468, cmd_43466))
    # SSA join for if statement (line 2059)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'cmdname' (line 2068)
    cmdname_43469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 18), 'cmdname')
    # Getting the type of '_cache' (line 2068)
    _cache_43470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 11), '_cache')
    # Obtaining the member '__getitem__' of a type (line 2068)
    getitem___43471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2068, 11), _cache_43470, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2068)
    subscript_call_result_43472 = invoke(stypy.reporting.localization.Localization(__file__, 2068, 11), getitem___43471, cmdname_43469)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2068)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2068, 4), 'stypy_return_type', subscript_call_result_43472)
    
    # ################# End of 'get_cmd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_cmd' in the type store
    # Getting the type of 'stypy_return_type' (line 2058)
    stypy_return_type_43473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43473)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_cmd'
    return stypy_return_type_43473

# Assigning a type to the variable 'get_cmd' (line 2058)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2058, 0), 'get_cmd', get_cmd)

@norecursion
def get_numpy_include_dirs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_numpy_include_dirs'
    module_type_store = module_type_store.open_function_context('get_numpy_include_dirs', 2070, 0, False)
    
    # Passed parameters checking function
    get_numpy_include_dirs.stypy_localization = localization
    get_numpy_include_dirs.stypy_type_of_self = None
    get_numpy_include_dirs.stypy_type_store = module_type_store
    get_numpy_include_dirs.stypy_function_name = 'get_numpy_include_dirs'
    get_numpy_include_dirs.stypy_param_names_list = []
    get_numpy_include_dirs.stypy_varargs_param_name = None
    get_numpy_include_dirs.stypy_kwargs_param_name = None
    get_numpy_include_dirs.stypy_call_defaults = defaults
    get_numpy_include_dirs.stypy_call_varargs = varargs
    get_numpy_include_dirs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_numpy_include_dirs', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_numpy_include_dirs', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_numpy_include_dirs(...)' code ##################

    
    # Assigning a Subscript to a Name (line 2072):
    
    # Assigning a Subscript to a Name (line 2072):
    
    # Obtaining the type of the subscript
    slice_43474 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2072, 19), None, None, None)
    # Getting the type of 'Configuration' (line 2072)
    Configuration_43475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 19), 'Configuration')
    # Obtaining the member 'numpy_include_dirs' of a type (line 2072)
    numpy_include_dirs_43476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2072, 19), Configuration_43475, 'numpy_include_dirs')
    # Obtaining the member '__getitem__' of a type (line 2072)
    getitem___43477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2072, 19), numpy_include_dirs_43476, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2072)
    subscript_call_result_43478 = invoke(stypy.reporting.localization.Localization(__file__, 2072, 19), getitem___43477, slice_43474)
    
    # Assigning a type to the variable 'include_dirs' (line 2072)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2072, 4), 'include_dirs', subscript_call_result_43478)
    
    
    # Getting the type of 'include_dirs' (line 2073)
    include_dirs_43479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 11), 'include_dirs')
    # Applying the 'not' unary operator (line 2073)
    result_not__43480 = python_operator(stypy.reporting.localization.Localization(__file__, 2073, 7), 'not', include_dirs_43479)
    
    # Testing the type of an if condition (line 2073)
    if_condition_43481 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2073, 4), result_not__43480)
    # Assigning a type to the variable 'if_condition_43481' (line 2073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2073, 4), 'if_condition_43481', if_condition_43481)
    # SSA begins for if statement (line 2073)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2074, 8))
    
    # 'import numpy' statement (line 2074)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
    import_43482 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2074, 8), 'numpy')

    if (type(import_43482) is not StypyTypeError):

        if (import_43482 != 'pyd_module'):
            __import__(import_43482)
            sys_modules_43483 = sys.modules[import_43482]
            import_module(stypy.reporting.localization.Localization(__file__, 2074, 8), 'numpy', sys_modules_43483.module_type_store, module_type_store)
        else:
            import numpy

            import_module(stypy.reporting.localization.Localization(__file__, 2074, 8), 'numpy', numpy, module_type_store)

    else:
        # Assigning a type to the variable 'numpy' (line 2074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2074, 8), 'numpy', import_43482)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
    
    
    # Assigning a List to a Name (line 2075):
    
    # Assigning a List to a Name (line 2075):
    
    # Obtaining an instance of the builtin type 'list' (line 2075)
    list_43484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2075, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2075)
    # Adding element type (line 2075)
    
    # Call to get_include(...): (line 2075)
    # Processing the call keyword arguments (line 2075)
    kwargs_43487 = {}
    # Getting the type of 'numpy' (line 2075)
    numpy_43485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 25), 'numpy', False)
    # Obtaining the member 'get_include' of a type (line 2075)
    get_include_43486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2075, 25), numpy_43485, 'get_include')
    # Calling get_include(args, kwargs) (line 2075)
    get_include_call_result_43488 = invoke(stypy.reporting.localization.Localization(__file__, 2075, 25), get_include_43486, *[], **kwargs_43487)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2075, 23), list_43484, get_include_call_result_43488)
    
    # Assigning a type to the variable 'include_dirs' (line 2075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 8), 'include_dirs', list_43484)
    # SSA join for if statement (line 2073)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'include_dirs' (line 2077)
    include_dirs_43489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 11), 'include_dirs')
    # Assigning a type to the variable 'stypy_return_type' (line 2077)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2077, 4), 'stypy_return_type', include_dirs_43489)
    
    # ################# End of 'get_numpy_include_dirs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_numpy_include_dirs' in the type store
    # Getting the type of 'stypy_return_type' (line 2070)
    stypy_return_type_43490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43490)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_numpy_include_dirs'
    return stypy_return_type_43490

# Assigning a type to the variable 'get_numpy_include_dirs' (line 2070)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2070, 0), 'get_numpy_include_dirs', get_numpy_include_dirs)

@norecursion
def get_npy_pkg_dir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_npy_pkg_dir'
    module_type_store = module_type_store.open_function_context('get_npy_pkg_dir', 2079, 0, False)
    
    # Passed parameters checking function
    get_npy_pkg_dir.stypy_localization = localization
    get_npy_pkg_dir.stypy_type_of_self = None
    get_npy_pkg_dir.stypy_type_store = module_type_store
    get_npy_pkg_dir.stypy_function_name = 'get_npy_pkg_dir'
    get_npy_pkg_dir.stypy_param_names_list = []
    get_npy_pkg_dir.stypy_varargs_param_name = None
    get_npy_pkg_dir.stypy_kwargs_param_name = None
    get_npy_pkg_dir.stypy_call_defaults = defaults
    get_npy_pkg_dir.stypy_call_varargs = varargs
    get_npy_pkg_dir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_npy_pkg_dir', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_npy_pkg_dir', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_npy_pkg_dir(...)' code ##################

    str_43491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 4), 'str', 'Return the path where to find the npy-pkg-config directory.')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2082, 4))
    
    # 'import numpy' statement (line 2082)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
    import_43492 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2082, 4), 'numpy')

    if (type(import_43492) is not StypyTypeError):

        if (import_43492 != 'pyd_module'):
            __import__(import_43492)
            sys_modules_43493 = sys.modules[import_43492]
            import_module(stypy.reporting.localization.Localization(__file__, 2082, 4), 'numpy', sys_modules_43493.module_type_store, module_type_store)
        else:
            import numpy

            import_module(stypy.reporting.localization.Localization(__file__, 2082, 4), 'numpy', numpy, module_type_store)

    else:
        # Assigning a type to the variable 'numpy' (line 2082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2082, 4), 'numpy', import_43492)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
    
    
    # Assigning a Call to a Name (line 2083):
    
    # Assigning a Call to a Name (line 2083):
    
    # Call to join(...): (line 2083)
    # Processing the call arguments (line 2083)
    
    # Call to dirname(...): (line 2083)
    # Processing the call arguments (line 2083)
    # Getting the type of 'numpy' (line 2083)
    numpy_43500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 37), 'numpy', False)
    # Obtaining the member '__file__' of a type (line 2083)
    file___43501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 37), numpy_43500, '__file__')
    # Processing the call keyword arguments (line 2083)
    kwargs_43502 = {}
    # Getting the type of 'os' (line 2083)
    os_43497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 21), 'os', False)
    # Obtaining the member 'path' of a type (line 2083)
    path_43498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 21), os_43497, 'path')
    # Obtaining the member 'dirname' of a type (line 2083)
    dirname_43499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 21), path_43498, 'dirname')
    # Calling dirname(args, kwargs) (line 2083)
    dirname_call_result_43503 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 21), dirname_43499, *[file___43501], **kwargs_43502)
    
    str_43504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 12), 'str', 'core')
    str_43505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 20), 'str', 'lib')
    str_43506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 27), 'str', 'npy-pkg-config')
    # Processing the call keyword arguments (line 2083)
    kwargs_43507 = {}
    # Getting the type of 'os' (line 2083)
    os_43494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'os', False)
    # Obtaining the member 'path' of a type (line 2083)
    path_43495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 8), os_43494, 'path')
    # Obtaining the member 'join' of a type (line 2083)
    join_43496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 8), path_43495, 'join')
    # Calling join(args, kwargs) (line 2083)
    join_call_result_43508 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 8), join_43496, *[dirname_call_result_43503, str_43504, str_43505, str_43506], **kwargs_43507)
    
    # Assigning a type to the variable 'd' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'd', join_call_result_43508)
    # Getting the type of 'd' (line 2085)
    d_43509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 11), 'd')
    # Assigning a type to the variable 'stypy_return_type' (line 2085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2085, 4), 'stypy_return_type', d_43509)
    
    # ################# End of 'get_npy_pkg_dir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_npy_pkg_dir' in the type store
    # Getting the type of 'stypy_return_type' (line 2079)
    stypy_return_type_43510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43510)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_npy_pkg_dir'
    return stypy_return_type_43510

# Assigning a type to the variable 'get_npy_pkg_dir' (line 2079)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 0), 'get_npy_pkg_dir', get_npy_pkg_dir)

@norecursion
def get_pkg_info(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2087)
    None_43511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 31), 'None')
    defaults = [None_43511]
    # Create a new context for function 'get_pkg_info'
    module_type_store = module_type_store.open_function_context('get_pkg_info', 2087, 0, False)
    
    # Passed parameters checking function
    get_pkg_info.stypy_localization = localization
    get_pkg_info.stypy_type_of_self = None
    get_pkg_info.stypy_type_store = module_type_store
    get_pkg_info.stypy_function_name = 'get_pkg_info'
    get_pkg_info.stypy_param_names_list = ['pkgname', 'dirs']
    get_pkg_info.stypy_varargs_param_name = None
    get_pkg_info.stypy_kwargs_param_name = None
    get_pkg_info.stypy_call_defaults = defaults
    get_pkg_info.stypy_call_varargs = varargs
    get_pkg_info.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_pkg_info', ['pkgname', 'dirs'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_pkg_info', localization, ['pkgname', 'dirs'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_pkg_info(...)' code ##################

    str_43512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, (-1)), 'str', '\n    Return library info for the given package.\n\n    Parameters\n    ----------\n    pkgname : str\n        Name of the package (should match the name of the .ini file, without\n        the extension, e.g. foo for the file foo.ini).\n    dirs : sequence, optional\n        If given, should be a sequence of additional directories where to look\n        for npy-pkg-config files. Those directories are searched prior to the\n        NumPy directory.\n\n    Returns\n    -------\n    pkginfo : class instance\n        The `LibraryInfo` instance containing the build information.\n\n    Raises\n    ------\n    PkgNotFound\n        If the package is not found.\n\n    See Also\n    --------\n    Configuration.add_npy_pkg_config, Configuration.add_installed_library,\n    get_info\n\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2117, 4))
    
    # 'from numpy.distutils.npy_pkg_config import read_config' statement (line 2117)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
    import_43513 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2117, 4), 'numpy.distutils.npy_pkg_config')

    if (type(import_43513) is not StypyTypeError):

        if (import_43513 != 'pyd_module'):
            __import__(import_43513)
            sys_modules_43514 = sys.modules[import_43513]
            import_from_module(stypy.reporting.localization.Localization(__file__, 2117, 4), 'numpy.distutils.npy_pkg_config', sys_modules_43514.module_type_store, module_type_store, ['read_config'])
            nest_module(stypy.reporting.localization.Localization(__file__, 2117, 4), __file__, sys_modules_43514, sys_modules_43514.module_type_store, module_type_store)
        else:
            from numpy.distutils.npy_pkg_config import read_config

            import_from_module(stypy.reporting.localization.Localization(__file__, 2117, 4), 'numpy.distutils.npy_pkg_config', None, module_type_store, ['read_config'], [read_config])

    else:
        # Assigning a type to the variable 'numpy.distutils.npy_pkg_config' (line 2117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2117, 4), 'numpy.distutils.npy_pkg_config', import_43513)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
    
    
    # Getting the type of 'dirs' (line 2119)
    dirs_43515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 7), 'dirs')
    # Testing the type of an if condition (line 2119)
    if_condition_43516 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2119, 4), dirs_43515)
    # Assigning a type to the variable 'if_condition_43516' (line 2119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2119, 4), 'if_condition_43516', if_condition_43516)
    # SSA begins for if statement (line 2119)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2120)
    # Processing the call arguments (line 2120)
    
    # Call to get_npy_pkg_dir(...): (line 2120)
    # Processing the call keyword arguments (line 2120)
    kwargs_43520 = {}
    # Getting the type of 'get_npy_pkg_dir' (line 2120)
    get_npy_pkg_dir_43519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 20), 'get_npy_pkg_dir', False)
    # Calling get_npy_pkg_dir(args, kwargs) (line 2120)
    get_npy_pkg_dir_call_result_43521 = invoke(stypy.reporting.localization.Localization(__file__, 2120, 20), get_npy_pkg_dir_43519, *[], **kwargs_43520)
    
    # Processing the call keyword arguments (line 2120)
    kwargs_43522 = {}
    # Getting the type of 'dirs' (line 2120)
    dirs_43517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 8), 'dirs', False)
    # Obtaining the member 'append' of a type (line 2120)
    append_43518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2120, 8), dirs_43517, 'append')
    # Calling append(args, kwargs) (line 2120)
    append_call_result_43523 = invoke(stypy.reporting.localization.Localization(__file__, 2120, 8), append_43518, *[get_npy_pkg_dir_call_result_43521], **kwargs_43522)
    
    # SSA branch for the else part of an if statement (line 2119)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a List to a Name (line 2122):
    
    # Assigning a List to a Name (line 2122):
    
    # Obtaining an instance of the builtin type 'list' (line 2122)
    list_43524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2122, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2122)
    # Adding element type (line 2122)
    
    # Call to get_npy_pkg_dir(...): (line 2122)
    # Processing the call keyword arguments (line 2122)
    kwargs_43526 = {}
    # Getting the type of 'get_npy_pkg_dir' (line 2122)
    get_npy_pkg_dir_43525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2122, 16), 'get_npy_pkg_dir', False)
    # Calling get_npy_pkg_dir(args, kwargs) (line 2122)
    get_npy_pkg_dir_call_result_43527 = invoke(stypy.reporting.localization.Localization(__file__, 2122, 16), get_npy_pkg_dir_43525, *[], **kwargs_43526)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2122, 15), list_43524, get_npy_pkg_dir_call_result_43527)
    
    # Assigning a type to the variable 'dirs' (line 2122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2122, 8), 'dirs', list_43524)
    # SSA join for if statement (line 2119)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to read_config(...): (line 2123)
    # Processing the call arguments (line 2123)
    # Getting the type of 'pkgname' (line 2123)
    pkgname_43529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 23), 'pkgname', False)
    # Getting the type of 'dirs' (line 2123)
    dirs_43530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 32), 'dirs', False)
    # Processing the call keyword arguments (line 2123)
    kwargs_43531 = {}
    # Getting the type of 'read_config' (line 2123)
    read_config_43528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 11), 'read_config', False)
    # Calling read_config(args, kwargs) (line 2123)
    read_config_call_result_43532 = invoke(stypy.reporting.localization.Localization(__file__, 2123, 11), read_config_43528, *[pkgname_43529, dirs_43530], **kwargs_43531)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2123, 4), 'stypy_return_type', read_config_call_result_43532)
    
    # ################# End of 'get_pkg_info(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_pkg_info' in the type store
    # Getting the type of 'stypy_return_type' (line 2087)
    stypy_return_type_43533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43533)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_pkg_info'
    return stypy_return_type_43533

# Assigning a type to the variable 'get_pkg_info' (line 2087)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2087, 0), 'get_pkg_info', get_pkg_info)

@norecursion
def get_info(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2125)
    None_43534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 27), 'None')
    defaults = [None_43534]
    # Create a new context for function 'get_info'
    module_type_store = module_type_store.open_function_context('get_info', 2125, 0, False)
    
    # Passed parameters checking function
    get_info.stypy_localization = localization
    get_info.stypy_type_of_self = None
    get_info.stypy_type_store = module_type_store
    get_info.stypy_function_name = 'get_info'
    get_info.stypy_param_names_list = ['pkgname', 'dirs']
    get_info.stypy_varargs_param_name = None
    get_info.stypy_kwargs_param_name = None
    get_info.stypy_call_defaults = defaults
    get_info.stypy_call_varargs = varargs
    get_info.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_info', ['pkgname', 'dirs'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_info', localization, ['pkgname', 'dirs'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_info(...)' code ##################

    str_43535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2169, (-1)), 'str', "\n    Return an info dict for a given C library.\n\n    The info dict contains the necessary options to use the C library.\n\n    Parameters\n    ----------\n    pkgname : str\n        Name of the package (should match the name of the .ini file, without\n        the extension, e.g. foo for the file foo.ini).\n    dirs : sequence, optional\n        If given, should be a sequence of additional directories where to look\n        for npy-pkg-config files. Those directories are searched prior to the\n        NumPy directory.\n\n    Returns\n    -------\n    info : dict\n        The dictionary with build information.\n\n    Raises\n    ------\n    PkgNotFound\n        If the package is not found.\n\n    See Also\n    --------\n    Configuration.add_npy_pkg_config, Configuration.add_installed_library,\n    get_pkg_info\n\n    Examples\n    --------\n    To get the necessary information for the npymath library from NumPy:\n\n    >>> npymath_info = np.distutils.misc_util.get_info('npymath')\n    >>> npymath_info                                    #doctest: +SKIP\n    {'define_macros': [], 'libraries': ['npymath'], 'library_dirs':\n    ['.../numpy/core/lib'], 'include_dirs': ['.../numpy/core/include']}\n\n    This info dict can then be used as input to a `Configuration` instance::\n\n      config.add_extension('foo', sources=['foo.c'], extra_info=npymath_info)\n\n    ")
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2170, 4))
    
    # 'from numpy.distutils.npy_pkg_config import parse_flags' statement (line 2170)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
    import_43536 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2170, 4), 'numpy.distutils.npy_pkg_config')

    if (type(import_43536) is not StypyTypeError):

        if (import_43536 != 'pyd_module'):
            __import__(import_43536)
            sys_modules_43537 = sys.modules[import_43536]
            import_from_module(stypy.reporting.localization.Localization(__file__, 2170, 4), 'numpy.distutils.npy_pkg_config', sys_modules_43537.module_type_store, module_type_store, ['parse_flags'])
            nest_module(stypy.reporting.localization.Localization(__file__, 2170, 4), __file__, sys_modules_43537, sys_modules_43537.module_type_store, module_type_store)
        else:
            from numpy.distutils.npy_pkg_config import parse_flags

            import_from_module(stypy.reporting.localization.Localization(__file__, 2170, 4), 'numpy.distutils.npy_pkg_config', None, module_type_store, ['parse_flags'], [parse_flags])

    else:
        # Assigning a type to the variable 'numpy.distutils.npy_pkg_config' (line 2170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2170, 4), 'numpy.distutils.npy_pkg_config', import_43536)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
    
    
    # Assigning a Call to a Name (line 2171):
    
    # Assigning a Call to a Name (line 2171):
    
    # Call to get_pkg_info(...): (line 2171)
    # Processing the call arguments (line 2171)
    # Getting the type of 'pkgname' (line 2171)
    pkgname_43539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 28), 'pkgname', False)
    # Getting the type of 'dirs' (line 2171)
    dirs_43540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 37), 'dirs', False)
    # Processing the call keyword arguments (line 2171)
    kwargs_43541 = {}
    # Getting the type of 'get_pkg_info' (line 2171)
    get_pkg_info_43538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 15), 'get_pkg_info', False)
    # Calling get_pkg_info(args, kwargs) (line 2171)
    get_pkg_info_call_result_43542 = invoke(stypy.reporting.localization.Localization(__file__, 2171, 15), get_pkg_info_43538, *[pkgname_43539, dirs_43540], **kwargs_43541)
    
    # Assigning a type to the variable 'pkg_info' (line 2171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2171, 4), 'pkg_info', get_pkg_info_call_result_43542)
    
    # Assigning a Call to a Name (line 2174):
    
    # Assigning a Call to a Name (line 2174):
    
    # Call to parse_flags(...): (line 2174)
    # Processing the call arguments (line 2174)
    
    # Call to cflags(...): (line 2174)
    # Processing the call keyword arguments (line 2174)
    kwargs_43546 = {}
    # Getting the type of 'pkg_info' (line 2174)
    pkg_info_43544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 23), 'pkg_info', False)
    # Obtaining the member 'cflags' of a type (line 2174)
    cflags_43545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2174, 23), pkg_info_43544, 'cflags')
    # Calling cflags(args, kwargs) (line 2174)
    cflags_call_result_43547 = invoke(stypy.reporting.localization.Localization(__file__, 2174, 23), cflags_43545, *[], **kwargs_43546)
    
    # Processing the call keyword arguments (line 2174)
    kwargs_43548 = {}
    # Getting the type of 'parse_flags' (line 2174)
    parse_flags_43543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 11), 'parse_flags', False)
    # Calling parse_flags(args, kwargs) (line 2174)
    parse_flags_call_result_43549 = invoke(stypy.reporting.localization.Localization(__file__, 2174, 11), parse_flags_43543, *[cflags_call_result_43547], **kwargs_43548)
    
    # Assigning a type to the variable 'info' (line 2174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2174, 4), 'info', parse_flags_call_result_43549)
    
    
    # Call to items(...): (line 2175)
    # Processing the call keyword arguments (line 2175)
    kwargs_43558 = {}
    
    # Call to parse_flags(...): (line 2175)
    # Processing the call arguments (line 2175)
    
    # Call to libs(...): (line 2175)
    # Processing the call keyword arguments (line 2175)
    kwargs_43553 = {}
    # Getting the type of 'pkg_info' (line 2175)
    pkg_info_43551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 28), 'pkg_info', False)
    # Obtaining the member 'libs' of a type (line 2175)
    libs_43552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2175, 28), pkg_info_43551, 'libs')
    # Calling libs(args, kwargs) (line 2175)
    libs_call_result_43554 = invoke(stypy.reporting.localization.Localization(__file__, 2175, 28), libs_43552, *[], **kwargs_43553)
    
    # Processing the call keyword arguments (line 2175)
    kwargs_43555 = {}
    # Getting the type of 'parse_flags' (line 2175)
    parse_flags_43550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 16), 'parse_flags', False)
    # Calling parse_flags(args, kwargs) (line 2175)
    parse_flags_call_result_43556 = invoke(stypy.reporting.localization.Localization(__file__, 2175, 16), parse_flags_43550, *[libs_call_result_43554], **kwargs_43555)
    
    # Obtaining the member 'items' of a type (line 2175)
    items_43557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2175, 16), parse_flags_call_result_43556, 'items')
    # Calling items(args, kwargs) (line 2175)
    items_call_result_43559 = invoke(stypy.reporting.localization.Localization(__file__, 2175, 16), items_43557, *[], **kwargs_43558)
    
    # Testing the type of a for loop iterable (line 2175)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2175, 4), items_call_result_43559)
    # Getting the type of the for loop variable (line 2175)
    for_loop_var_43560 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2175, 4), items_call_result_43559)
    # Assigning a type to the variable 'k' (line 2175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 4), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2175, 4), for_loop_var_43560))
    # Assigning a type to the variable 'v' (line 2175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 4), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2175, 4), for_loop_var_43560))
    # SSA begins for a for statement (line 2175)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to extend(...): (line 2176)
    # Processing the call arguments (line 2176)
    # Getting the type of 'v' (line 2176)
    v_43566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 23), 'v', False)
    # Processing the call keyword arguments (line 2176)
    kwargs_43567 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2176)
    k_43561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 13), 'k', False)
    # Getting the type of 'info' (line 2176)
    info_43562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 8), 'info', False)
    # Obtaining the member '__getitem__' of a type (line 2176)
    getitem___43563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 8), info_43562, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2176)
    subscript_call_result_43564 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 8), getitem___43563, k_43561)
    
    # Obtaining the member 'extend' of a type (line 2176)
    extend_43565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 8), subscript_call_result_43564, 'extend')
    # Calling extend(args, kwargs) (line 2176)
    extend_call_result_43568 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 8), extend_43565, *[v_43566], **kwargs_43567)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Subscript (line 2179):
    
    # Assigning a Subscript to a Subscript (line 2179):
    
    # Obtaining the type of the subscript
    str_43569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2179, 33), 'str', 'macros')
    # Getting the type of 'info' (line 2179)
    info_43570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 28), 'info')
    # Obtaining the member '__getitem__' of a type (line 2179)
    getitem___43571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2179, 28), info_43570, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2179)
    subscript_call_result_43572 = invoke(stypy.reporting.localization.Localization(__file__, 2179, 28), getitem___43571, str_43569)
    
    # Getting the type of 'info' (line 2179)
    info_43573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 4), 'info')
    str_43574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2179, 9), 'str', 'define_macros')
    # Storing an element on a container (line 2179)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2179, 4), info_43573, (str_43574, subscript_call_result_43572))
    # Deleting a member
    # Getting the type of 'info' (line 2180)
    info_43575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 8), 'info')
    
    # Obtaining the type of the subscript
    str_43576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2180, 13), 'str', 'macros')
    # Getting the type of 'info' (line 2180)
    info_43577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 8), 'info')
    # Obtaining the member '__getitem__' of a type (line 2180)
    getitem___43578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2180, 8), info_43577, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2180)
    subscript_call_result_43579 = invoke(stypy.reporting.localization.Localization(__file__, 2180, 8), getitem___43578, str_43576)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2180, 4), info_43575, subscript_call_result_43579)
    # Deleting a member
    # Getting the type of 'info' (line 2181)
    info_43580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 8), 'info')
    
    # Obtaining the type of the subscript
    str_43581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2181, 13), 'str', 'ignored')
    # Getting the type of 'info' (line 2181)
    info_43582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 8), 'info')
    # Obtaining the member '__getitem__' of a type (line 2181)
    getitem___43583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 8), info_43582, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2181)
    subscript_call_result_43584 = invoke(stypy.reporting.localization.Localization(__file__, 2181, 8), getitem___43583, str_43581)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2181, 4), info_43580, subscript_call_result_43584)
    # Getting the type of 'info' (line 2183)
    info_43585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 11), 'info')
    # Assigning a type to the variable 'stypy_return_type' (line 2183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2183, 4), 'stypy_return_type', info_43585)
    
    # ################# End of 'get_info(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_info' in the type store
    # Getting the type of 'stypy_return_type' (line 2125)
    stypy_return_type_43586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43586)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_info'
    return stypy_return_type_43586

# Assigning a type to the variable 'get_info' (line 2125)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 0), 'get_info', get_info)

@norecursion
def is_bootstrapping(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_bootstrapping'
    module_type_store = module_type_store.open_function_context('is_bootstrapping', 2185, 0, False)
    
    # Passed parameters checking function
    is_bootstrapping.stypy_localization = localization
    is_bootstrapping.stypy_type_of_self = None
    is_bootstrapping.stypy_type_store = module_type_store
    is_bootstrapping.stypy_function_name = 'is_bootstrapping'
    is_bootstrapping.stypy_param_names_list = []
    is_bootstrapping.stypy_varargs_param_name = None
    is_bootstrapping.stypy_kwargs_param_name = None
    is_bootstrapping.stypy_call_defaults = defaults
    is_bootstrapping.stypy_call_varargs = varargs
    is_bootstrapping.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_bootstrapping', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_bootstrapping', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_bootstrapping(...)' code ##################

    
    
    
    # Obtaining the type of the subscript
    int_43587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 24), 'int')
    # Getting the type of 'sys' (line 2186)
    sys_43588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 7), 'sys')
    # Obtaining the member 'version_info' of a type (line 2186)
    version_info_43589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 7), sys_43588, 'version_info')
    # Obtaining the member '__getitem__' of a type (line 2186)
    getitem___43590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 7), version_info_43589, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2186)
    subscript_call_result_43591 = invoke(stypy.reporting.localization.Localization(__file__, 2186, 7), getitem___43590, int_43587)
    
    int_43592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 30), 'int')
    # Applying the binary operator '>=' (line 2186)
    result_ge_43593 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 7), '>=', subscript_call_result_43591, int_43592)
    
    # Testing the type of an if condition (line 2186)
    if_condition_43594 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2186, 4), result_ge_43593)
    # Assigning a type to the variable 'if_condition_43594' (line 2186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 4), 'if_condition_43594', if_condition_43594)
    # SSA begins for if statement (line 2186)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2187, 8))
    
    # 'import builtins' statement (line 2187)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
    import_43595 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2187, 8), 'builtins')

    if (type(import_43595) is not StypyTypeError):

        if (import_43595 != 'pyd_module'):
            __import__(import_43595)
            sys_modules_43596 = sys.modules[import_43595]
            import_module(stypy.reporting.localization.Localization(__file__, 2187, 8), 'builtins', sys_modules_43596.module_type_store, module_type_store)
        else:
            import builtins

            import_module(stypy.reporting.localization.Localization(__file__, 2187, 8), 'builtins', builtins, module_type_store)

    else:
        # Assigning a type to the variable 'builtins' (line 2187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2187, 8), 'builtins', import_43595)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
    
    # SSA branch for the else part of an if statement (line 2186)
    module_type_store.open_ssa_branch('else')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2189, 8))
    
    # 'import __builtin__' statement (line 2189)
    import __builtin__ as builtins

    import_module(stypy.reporting.localization.Localization(__file__, 2189, 8), 'builtins', builtins, module_type_store)
    
    # SSA join for if statement (line 2186)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 2191)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    # Getting the type of 'builtins' (line 2192)
    builtins_43597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 8), 'builtins')
    # Obtaining the member '__NUMPY_SETUP__' of a type (line 2192)
    NUMPY_SETUP___43598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2192, 8), builtins_43597, '__NUMPY_SETUP__')
    # Getting the type of 'True' (line 2193)
    True_43599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 2193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2193, 8), 'stypy_return_type', True_43599)
    # SSA branch for the except part of a try statement (line 2191)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 2191)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 2195)
    False_43600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'stypy_return_type', False_43600)
    
    # Assigning a Name to a Name (line 2196):
    
    # Assigning a Name to a Name (line 2196):
    # Getting the type of 'False' (line 2196)
    False_43601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 26), 'False')
    # Assigning a type to the variable '__NUMPY_SETUP__' (line 2196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2196, 8), '__NUMPY_SETUP__', False_43601)
    # SSA join for try-except statement (line 2191)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'is_bootstrapping(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_bootstrapping' in the type store
    # Getting the type of 'stypy_return_type' (line 2185)
    stypy_return_type_43602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43602)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_bootstrapping'
    return stypy_return_type_43602

# Assigning a type to the variable 'is_bootstrapping' (line 2185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 0), 'is_bootstrapping', is_bootstrapping)

@norecursion
def default_config_dict(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2201)
    None_43603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 31), 'None')
    # Getting the type of 'None' (line 2201)
    None_43604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 51), 'None')
    # Getting the type of 'None' (line 2201)
    None_43605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 68), 'None')
    defaults = [None_43603, None_43604, None_43605]
    # Create a new context for function 'default_config_dict'
    module_type_store = module_type_store.open_function_context('default_config_dict', 2201, 0, False)
    
    # Passed parameters checking function
    default_config_dict.stypy_localization = localization
    default_config_dict.stypy_type_of_self = None
    default_config_dict.stypy_type_store = module_type_store
    default_config_dict.stypy_function_name = 'default_config_dict'
    default_config_dict.stypy_param_names_list = ['name', 'parent_name', 'local_path']
    default_config_dict.stypy_varargs_param_name = None
    default_config_dict.stypy_kwargs_param_name = None
    default_config_dict.stypy_call_defaults = defaults
    default_config_dict.stypy_call_varargs = varargs
    default_config_dict.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'default_config_dict', ['name', 'parent_name', 'local_path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'default_config_dict', localization, ['name', 'parent_name', 'local_path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'default_config_dict(...)' code ##################

    str_43606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, (-1)), 'str', 'Return a configuration dictionary for usage in\n    configuration() function defined in file setup_<name>.py.\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2205, 4))
    
    # 'import warnings' statement (line 2205)
    import warnings

    import_module(stypy.reporting.localization.Localization(__file__, 2205, 4), 'warnings', warnings, module_type_store)
    
    
    # Call to warn(...): (line 2206)
    # Processing the call arguments (line 2206)
    str_43609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2206, 18), 'str', 'Use Configuration(%r,%r,top_path=%r) instead of deprecated default_config_dict(%r,%r,%r)')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2208)
    tuple_43610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2208, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2208)
    # Adding element type (line 2208)
    # Getting the type of 'name' (line 2208)
    name_43611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 21), 'name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2208, 21), tuple_43610, name_43611)
    # Adding element type (line 2208)
    # Getting the type of 'parent_name' (line 2208)
    parent_name_43612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 27), 'parent_name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2208, 21), tuple_43610, parent_name_43612)
    # Adding element type (line 2208)
    # Getting the type of 'local_path' (line 2208)
    local_path_43613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 40), 'local_path', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2208, 21), tuple_43610, local_path_43613)
    # Adding element type (line 2208)
    # Getting the type of 'name' (line 2209)
    name_43614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 21), 'name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2208, 21), tuple_43610, name_43614)
    # Adding element type (line 2208)
    # Getting the type of 'parent_name' (line 2209)
    parent_name_43615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 27), 'parent_name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2208, 21), tuple_43610, parent_name_43615)
    # Adding element type (line 2208)
    # Getting the type of 'local_path' (line 2209)
    local_path_43616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 40), 'local_path', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2208, 21), tuple_43610, local_path_43616)
    
    # Applying the binary operator '%' (line 2206)
    result_mod_43617 = python_operator(stypy.reporting.localization.Localization(__file__, 2206, 18), '%', str_43609, tuple_43610)
    
    # Processing the call keyword arguments (line 2206)
    kwargs_43618 = {}
    # Getting the type of 'warnings' (line 2206)
    warnings_43607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 4), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2206)
    warn_43608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2206, 4), warnings_43607, 'warn')
    # Calling warn(args, kwargs) (line 2206)
    warn_call_result_43619 = invoke(stypy.reporting.localization.Localization(__file__, 2206, 4), warn_43608, *[result_mod_43617], **kwargs_43618)
    
    
    # Assigning a Call to a Name (line 2211):
    
    # Assigning a Call to a Name (line 2211):
    
    # Call to Configuration(...): (line 2211)
    # Processing the call arguments (line 2211)
    # Getting the type of 'name' (line 2211)
    name_43621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 22), 'name', False)
    # Getting the type of 'parent_name' (line 2211)
    parent_name_43622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 28), 'parent_name', False)
    # Getting the type of 'local_path' (line 2211)
    local_path_43623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 41), 'local_path', False)
    # Processing the call keyword arguments (line 2211)
    kwargs_43624 = {}
    # Getting the type of 'Configuration' (line 2211)
    Configuration_43620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 8), 'Configuration', False)
    # Calling Configuration(args, kwargs) (line 2211)
    Configuration_call_result_43625 = invoke(stypy.reporting.localization.Localization(__file__, 2211, 8), Configuration_43620, *[name_43621, parent_name_43622, local_path_43623], **kwargs_43624)
    
    # Assigning a type to the variable 'c' (line 2211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2211, 4), 'c', Configuration_call_result_43625)
    
    # Call to todict(...): (line 2212)
    # Processing the call keyword arguments (line 2212)
    kwargs_43628 = {}
    # Getting the type of 'c' (line 2212)
    c_43626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 11), 'c', False)
    # Obtaining the member 'todict' of a type (line 2212)
    todict_43627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 11), c_43626, 'todict')
    # Calling todict(args, kwargs) (line 2212)
    todict_call_result_43629 = invoke(stypy.reporting.localization.Localization(__file__, 2212, 11), todict_43627, *[], **kwargs_43628)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 4), 'stypy_return_type', todict_call_result_43629)
    
    # ################# End of 'default_config_dict(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'default_config_dict' in the type store
    # Getting the type of 'stypy_return_type' (line 2201)
    stypy_return_type_43630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43630)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'default_config_dict'
    return stypy_return_type_43630

# Assigning a type to the variable 'default_config_dict' (line 2201)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2201, 0), 'default_config_dict', default_config_dict)

@norecursion
def dict_append(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'dict_append'
    module_type_store = module_type_store.open_function_context('dict_append', 2215, 0, False)
    
    # Passed parameters checking function
    dict_append.stypy_localization = localization
    dict_append.stypy_type_of_self = None
    dict_append.stypy_type_store = module_type_store
    dict_append.stypy_function_name = 'dict_append'
    dict_append.stypy_param_names_list = ['d']
    dict_append.stypy_varargs_param_name = None
    dict_append.stypy_kwargs_param_name = 'kws'
    dict_append.stypy_call_defaults = defaults
    dict_append.stypy_call_varargs = varargs
    dict_append.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dict_append', ['d'], None, 'kws', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dict_append', localization, ['d'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dict_append(...)' code ##################

    
    
    # Call to items(...): (line 2216)
    # Processing the call keyword arguments (line 2216)
    kwargs_43633 = {}
    # Getting the type of 'kws' (line 2216)
    kws_43631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 16), 'kws', False)
    # Obtaining the member 'items' of a type (line 2216)
    items_43632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2216, 16), kws_43631, 'items')
    # Calling items(args, kwargs) (line 2216)
    items_call_result_43634 = invoke(stypy.reporting.localization.Localization(__file__, 2216, 16), items_43632, *[], **kwargs_43633)
    
    # Testing the type of a for loop iterable (line 2216)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2216, 4), items_call_result_43634)
    # Getting the type of the for loop variable (line 2216)
    for_loop_var_43635 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2216, 4), items_call_result_43634)
    # Assigning a type to the variable 'k' (line 2216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 4), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2216, 4), for_loop_var_43635))
    # Assigning a type to the variable 'v' (line 2216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 4), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2216, 4), for_loop_var_43635))
    # SSA begins for a for statement (line 2216)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'k' (line 2217)
    k_43636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 11), 'k')
    # Getting the type of 'd' (line 2217)
    d_43637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 16), 'd')
    # Applying the binary operator 'in' (line 2217)
    result_contains_43638 = python_operator(stypy.reporting.localization.Localization(__file__, 2217, 11), 'in', k_43636, d_43637)
    
    # Testing the type of an if condition (line 2217)
    if_condition_43639 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2217, 8), result_contains_43638)
    # Assigning a type to the variable 'if_condition_43639' (line 2217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 8), 'if_condition_43639', if_condition_43639)
    # SSA begins for if statement (line 2217)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2218):
    
    # Assigning a Subscript to a Name (line 2218):
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2218)
    k_43640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 19), 'k')
    # Getting the type of 'd' (line 2218)
    d_43641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 17), 'd')
    # Obtaining the member '__getitem__' of a type (line 2218)
    getitem___43642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2218, 17), d_43641, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2218)
    subscript_call_result_43643 = invoke(stypy.reporting.localization.Localization(__file__, 2218, 17), getitem___43642, k_43640)
    
    # Assigning a type to the variable 'ov' (line 2218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2218, 12), 'ov', subscript_call_result_43643)
    
    # Type idiom detected: calculating its left and rigth part (line 2219)
    # Getting the type of 'str' (line 2219)
    str_43644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 30), 'str')
    # Getting the type of 'ov' (line 2219)
    ov_43645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 26), 'ov')
    
    (may_be_43646, more_types_in_union_43647) = may_be_subtype(str_43644, ov_43645)

    if may_be_43646:

        if more_types_in_union_43647:
            # Runtime conditional SSA (line 2219)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'ov' (line 2219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2219, 12), 'ov', remove_not_subtype_from_union(ov_43645, str))
        
        # Assigning a Name to a Subscript (line 2220):
        
        # Assigning a Name to a Subscript (line 2220):
        # Getting the type of 'v' (line 2220)
        v_43648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 23), 'v')
        # Getting the type of 'd' (line 2220)
        d_43649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 16), 'd')
        # Getting the type of 'k' (line 2220)
        k_43650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 18), 'k')
        # Storing an element on a container (line 2220)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2220, 16), d_43649, (k_43650, v_43648))

        if more_types_in_union_43647:
            # Runtime conditional SSA for else branch (line 2219)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_43646) or more_types_in_union_43647):
        # Assigning a type to the variable 'ov' (line 2219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2219, 12), 'ov', remove_subtype_from_union(ov_43645, str))
        
        # Call to extend(...): (line 2222)
        # Processing the call arguments (line 2222)
        # Getting the type of 'v' (line 2222)
        v_43656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 28), 'v', False)
        # Processing the call keyword arguments (line 2222)
        kwargs_43657 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 2222)
        k_43651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 18), 'k', False)
        # Getting the type of 'd' (line 2222)
        d_43652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 16), 'd', False)
        # Obtaining the member '__getitem__' of a type (line 2222)
        getitem___43653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 16), d_43652, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2222)
        subscript_call_result_43654 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 16), getitem___43653, k_43651)
        
        # Obtaining the member 'extend' of a type (line 2222)
        extend_43655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 16), subscript_call_result_43654, 'extend')
        # Calling extend(args, kwargs) (line 2222)
        extend_call_result_43658 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 16), extend_43655, *[v_43656], **kwargs_43657)
        

        if (may_be_43646 and more_types_in_union_43647):
            # SSA join for if statement (line 2219)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the else part of an if statement (line 2217)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Subscript (line 2224):
    
    # Assigning a Name to a Subscript (line 2224):
    # Getting the type of 'v' (line 2224)
    v_43659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 19), 'v')
    # Getting the type of 'd' (line 2224)
    d_43660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 12), 'd')
    # Getting the type of 'k' (line 2224)
    k_43661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 14), 'k')
    # Storing an element on a container (line 2224)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2224, 12), d_43660, (k_43661, v_43659))
    # SSA join for if statement (line 2217)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'dict_append(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dict_append' in the type store
    # Getting the type of 'stypy_return_type' (line 2215)
    stypy_return_type_43662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43662)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dict_append'
    return stypy_return_type_43662

# Assigning a type to the variable 'dict_append' (line 2215)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2215, 0), 'dict_append', dict_append)

@norecursion
def appendpath(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'appendpath'
    module_type_store = module_type_store.open_function_context('appendpath', 2226, 0, False)
    
    # Passed parameters checking function
    appendpath.stypy_localization = localization
    appendpath.stypy_type_of_self = None
    appendpath.stypy_type_store = module_type_store
    appendpath.stypy_function_name = 'appendpath'
    appendpath.stypy_param_names_list = ['prefix', 'path']
    appendpath.stypy_varargs_param_name = None
    appendpath.stypy_kwargs_param_name = None
    appendpath.stypy_call_defaults = defaults
    appendpath.stypy_call_varargs = varargs
    appendpath.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'appendpath', ['prefix', 'path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'appendpath', localization, ['prefix', 'path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'appendpath(...)' code ##################

    
    
    # Getting the type of 'os' (line 2227)
    os_43663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 7), 'os')
    # Obtaining the member 'path' of a type (line 2227)
    path_43664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2227, 7), os_43663, 'path')
    # Obtaining the member 'sep' of a type (line 2227)
    sep_43665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2227, 7), path_43664, 'sep')
    str_43666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2227, 22), 'str', '/')
    # Applying the binary operator '!=' (line 2227)
    result_ne_43667 = python_operator(stypy.reporting.localization.Localization(__file__, 2227, 7), '!=', sep_43665, str_43666)
    
    # Testing the type of an if condition (line 2227)
    if_condition_43668 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2227, 4), result_ne_43667)
    # Assigning a type to the variable 'if_condition_43668' (line 2227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 4), 'if_condition_43668', if_condition_43668)
    # SSA begins for if statement (line 2227)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2228):
    
    # Assigning a Call to a Name (line 2228):
    
    # Call to replace(...): (line 2228)
    # Processing the call arguments (line 2228)
    str_43671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 32), 'str', '/')
    # Getting the type of 'os' (line 2228)
    os_43672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 37), 'os', False)
    # Obtaining the member 'path' of a type (line 2228)
    path_43673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 37), os_43672, 'path')
    # Obtaining the member 'sep' of a type (line 2228)
    sep_43674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 37), path_43673, 'sep')
    # Processing the call keyword arguments (line 2228)
    kwargs_43675 = {}
    # Getting the type of 'prefix' (line 2228)
    prefix_43669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 17), 'prefix', False)
    # Obtaining the member 'replace' of a type (line 2228)
    replace_43670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 17), prefix_43669, 'replace')
    # Calling replace(args, kwargs) (line 2228)
    replace_call_result_43676 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 17), replace_43670, *[str_43671, sep_43674], **kwargs_43675)
    
    # Assigning a type to the variable 'prefix' (line 2228)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 8), 'prefix', replace_call_result_43676)
    
    # Assigning a Call to a Name (line 2229):
    
    # Assigning a Call to a Name (line 2229):
    
    # Call to replace(...): (line 2229)
    # Processing the call arguments (line 2229)
    str_43679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2229, 28), 'str', '/')
    # Getting the type of 'os' (line 2229)
    os_43680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 33), 'os', False)
    # Obtaining the member 'path' of a type (line 2229)
    path_43681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 33), os_43680, 'path')
    # Obtaining the member 'sep' of a type (line 2229)
    sep_43682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 33), path_43681, 'sep')
    # Processing the call keyword arguments (line 2229)
    kwargs_43683 = {}
    # Getting the type of 'path' (line 2229)
    path_43677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 15), 'path', False)
    # Obtaining the member 'replace' of a type (line 2229)
    replace_43678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 15), path_43677, 'replace')
    # Calling replace(args, kwargs) (line 2229)
    replace_call_result_43684 = invoke(stypy.reporting.localization.Localization(__file__, 2229, 15), replace_43678, *[str_43679, sep_43682], **kwargs_43683)
    
    # Assigning a type to the variable 'path' (line 2229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 8), 'path', replace_call_result_43684)
    # SSA join for if statement (line 2227)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Str to a Name (line 2230):
    
    # Assigning a Str to a Name (line 2230):
    str_43685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2230, 12), 'str', '')
    # Assigning a type to the variable 'drive' (line 2230)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2230, 4), 'drive', str_43685)
    
    
    # Call to isabs(...): (line 2231)
    # Processing the call arguments (line 2231)
    # Getting the type of 'path' (line 2231)
    path_43689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 21), 'path', False)
    # Processing the call keyword arguments (line 2231)
    kwargs_43690 = {}
    # Getting the type of 'os' (line 2231)
    os_43686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 7), 'os', False)
    # Obtaining the member 'path' of a type (line 2231)
    path_43687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2231, 7), os_43686, 'path')
    # Obtaining the member 'isabs' of a type (line 2231)
    isabs_43688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2231, 7), path_43687, 'isabs')
    # Calling isabs(args, kwargs) (line 2231)
    isabs_call_result_43691 = invoke(stypy.reporting.localization.Localization(__file__, 2231, 7), isabs_43688, *[path_43689], **kwargs_43690)
    
    # Testing the type of an if condition (line 2231)
    if_condition_43692 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2231, 4), isabs_call_result_43691)
    # Assigning a type to the variable 'if_condition_43692' (line 2231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 4), 'if_condition_43692', if_condition_43692)
    # SSA begins for if statement (line 2231)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2232):
    
    # Assigning a Subscript to a Name (line 2232):
    
    # Obtaining the type of the subscript
    int_43693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 43), 'int')
    
    # Call to splitdrive(...): (line 2232)
    # Processing the call arguments (line 2232)
    # Getting the type of 'prefix' (line 2232)
    prefix_43697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 35), 'prefix', False)
    # Processing the call keyword arguments (line 2232)
    kwargs_43698 = {}
    # Getting the type of 'os' (line 2232)
    os_43694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 16), 'os', False)
    # Obtaining the member 'path' of a type (line 2232)
    path_43695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 16), os_43694, 'path')
    # Obtaining the member 'splitdrive' of a type (line 2232)
    splitdrive_43696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 16), path_43695, 'splitdrive')
    # Calling splitdrive(args, kwargs) (line 2232)
    splitdrive_call_result_43699 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 16), splitdrive_43696, *[prefix_43697], **kwargs_43698)
    
    # Obtaining the member '__getitem__' of a type (line 2232)
    getitem___43700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 16), splitdrive_call_result_43699, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2232)
    subscript_call_result_43701 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 16), getitem___43700, int_43693)
    
    # Assigning a type to the variable 'drive' (line 2232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 8), 'drive', subscript_call_result_43701)
    
    # Assigning a Subscript to a Name (line 2233):
    
    # Assigning a Subscript to a Name (line 2233):
    
    # Obtaining the type of the subscript
    int_43702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2233, 64), 'int')
    
    # Call to splitdrive(...): (line 2233)
    # Processing the call arguments (line 2233)
    
    # Call to abspath(...): (line 2233)
    # Processing the call arguments (line 2233)
    # Getting the type of 'prefix' (line 2233)
    prefix_43709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 55), 'prefix', False)
    # Processing the call keyword arguments (line 2233)
    kwargs_43710 = {}
    # Getting the type of 'os' (line 2233)
    os_43706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 39), 'os', False)
    # Obtaining the member 'path' of a type (line 2233)
    path_43707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2233, 39), os_43706, 'path')
    # Obtaining the member 'abspath' of a type (line 2233)
    abspath_43708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2233, 39), path_43707, 'abspath')
    # Calling abspath(args, kwargs) (line 2233)
    abspath_call_result_43711 = invoke(stypy.reporting.localization.Localization(__file__, 2233, 39), abspath_43708, *[prefix_43709], **kwargs_43710)
    
    # Processing the call keyword arguments (line 2233)
    kwargs_43712 = {}
    # Getting the type of 'os' (line 2233)
    os_43703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 20), 'os', False)
    # Obtaining the member 'path' of a type (line 2233)
    path_43704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2233, 20), os_43703, 'path')
    # Obtaining the member 'splitdrive' of a type (line 2233)
    splitdrive_43705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2233, 20), path_43704, 'splitdrive')
    # Calling splitdrive(args, kwargs) (line 2233)
    splitdrive_call_result_43713 = invoke(stypy.reporting.localization.Localization(__file__, 2233, 20), splitdrive_43705, *[abspath_call_result_43711], **kwargs_43712)
    
    # Obtaining the member '__getitem__' of a type (line 2233)
    getitem___43714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2233, 20), splitdrive_call_result_43713, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2233)
    subscript_call_result_43715 = invoke(stypy.reporting.localization.Localization(__file__, 2233, 20), getitem___43714, int_43702)
    
    # Assigning a type to the variable 'absprefix' (line 2233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 8), 'absprefix', subscript_call_result_43715)
    
    # Assigning a Call to a Tuple (line 2234):
    
    # Assigning a Call to a Name:
    
    # Call to splitdrive(...): (line 2234)
    # Processing the call arguments (line 2234)
    # Getting the type of 'path' (line 2234)
    path_43719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 45), 'path', False)
    # Processing the call keyword arguments (line 2234)
    kwargs_43720 = {}
    # Getting the type of 'os' (line 2234)
    os_43716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 26), 'os', False)
    # Obtaining the member 'path' of a type (line 2234)
    path_43717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2234, 26), os_43716, 'path')
    # Obtaining the member 'splitdrive' of a type (line 2234)
    splitdrive_43718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2234, 26), path_43717, 'splitdrive')
    # Calling splitdrive(args, kwargs) (line 2234)
    splitdrive_call_result_43721 = invoke(stypy.reporting.localization.Localization(__file__, 2234, 26), splitdrive_43718, *[path_43719], **kwargs_43720)
    
    # Assigning a type to the variable 'call_assignment_38398' (line 2234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'call_assignment_38398', splitdrive_call_result_43721)
    
    # Assigning a Call to a Name (line 2234):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_43724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2234, 8), 'int')
    # Processing the call keyword arguments
    kwargs_43725 = {}
    # Getting the type of 'call_assignment_38398' (line 2234)
    call_assignment_38398_43722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'call_assignment_38398', False)
    # Obtaining the member '__getitem__' of a type (line 2234)
    getitem___43723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2234, 8), call_assignment_38398_43722, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_43726 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43723, *[int_43724], **kwargs_43725)
    
    # Assigning a type to the variable 'call_assignment_38399' (line 2234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'call_assignment_38399', getitem___call_result_43726)
    
    # Assigning a Name to a Name (line 2234):
    # Getting the type of 'call_assignment_38399' (line 2234)
    call_assignment_38399_43727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'call_assignment_38399')
    # Assigning a type to the variable 'pathdrive' (line 2234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'pathdrive', call_assignment_38399_43727)
    
    # Assigning a Call to a Name (line 2234):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_43730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2234, 8), 'int')
    # Processing the call keyword arguments
    kwargs_43731 = {}
    # Getting the type of 'call_assignment_38398' (line 2234)
    call_assignment_38398_43728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'call_assignment_38398', False)
    # Obtaining the member '__getitem__' of a type (line 2234)
    getitem___43729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2234, 8), call_assignment_38398_43728, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_43732 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43729, *[int_43730], **kwargs_43731)
    
    # Assigning a type to the variable 'call_assignment_38400' (line 2234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'call_assignment_38400', getitem___call_result_43732)
    
    # Assigning a Name to a Name (line 2234):
    # Getting the type of 'call_assignment_38400' (line 2234)
    call_assignment_38400_43733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'call_assignment_38400')
    # Assigning a type to the variable 'path' (line 2234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 19), 'path', call_assignment_38400_43733)
    
    # Assigning a Call to a Name (line 2235):
    
    # Assigning a Call to a Name (line 2235):
    
    # Call to commonprefix(...): (line 2235)
    # Processing the call arguments (line 2235)
    
    # Obtaining an instance of the builtin type 'list' (line 2235)
    list_43737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, 33), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2235)
    # Adding element type (line 2235)
    # Getting the type of 'absprefix' (line 2235)
    absprefix_43738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 34), 'absprefix', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2235, 33), list_43737, absprefix_43738)
    # Adding element type (line 2235)
    # Getting the type of 'path' (line 2235)
    path_43739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 45), 'path', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2235, 33), list_43737, path_43739)
    
    # Processing the call keyword arguments (line 2235)
    kwargs_43740 = {}
    # Getting the type of 'os' (line 2235)
    os_43734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'os', False)
    # Obtaining the member 'path' of a type (line 2235)
    path_43735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 12), os_43734, 'path')
    # Obtaining the member 'commonprefix' of a type (line 2235)
    commonprefix_43736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 12), path_43735, 'commonprefix')
    # Calling commonprefix(args, kwargs) (line 2235)
    commonprefix_call_result_43741 = invoke(stypy.reporting.localization.Localization(__file__, 2235, 12), commonprefix_43736, *[list_43737], **kwargs_43740)
    
    # Assigning a type to the variable 'd' (line 2235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 8), 'd', commonprefix_call_result_43741)
    
    
    # Evaluating a boolean operation
    
    
    # Call to join(...): (line 2236)
    # Processing the call arguments (line 2236)
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 2236)
    # Processing the call arguments (line 2236)
    # Getting the type of 'd' (line 2236)
    d_43746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 39), 'd', False)
    # Processing the call keyword arguments (line 2236)
    kwargs_43747 = {}
    # Getting the type of 'len' (line 2236)
    len_43745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 35), 'len', False)
    # Calling len(args, kwargs) (line 2236)
    len_call_result_43748 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 35), len_43745, *[d_43746], **kwargs_43747)
    
    slice_43749 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2236, 24), None, len_call_result_43748, None)
    # Getting the type of 'absprefix' (line 2236)
    absprefix_43750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 24), 'absprefix', False)
    # Obtaining the member '__getitem__' of a type (line 2236)
    getitem___43751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2236, 24), absprefix_43750, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2236)
    subscript_call_result_43752 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 24), getitem___43751, slice_43749)
    
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 2236)
    # Processing the call arguments (line 2236)
    # Getting the type of 'd' (line 2236)
    d_43754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 58), 'd', False)
    # Processing the call keyword arguments (line 2236)
    kwargs_43755 = {}
    # Getting the type of 'len' (line 2236)
    len_43753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 54), 'len', False)
    # Calling len(args, kwargs) (line 2236)
    len_call_result_43756 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 54), len_43753, *[d_43754], **kwargs_43755)
    
    slice_43757 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2236, 44), len_call_result_43756, None, None)
    # Getting the type of 'absprefix' (line 2236)
    absprefix_43758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 44), 'absprefix', False)
    # Obtaining the member '__getitem__' of a type (line 2236)
    getitem___43759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2236, 44), absprefix_43758, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2236)
    subscript_call_result_43760 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 44), getitem___43759, slice_43757)
    
    # Processing the call keyword arguments (line 2236)
    kwargs_43761 = {}
    # Getting the type of 'os' (line 2236)
    os_43742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 2236)
    path_43743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2236, 11), os_43742, 'path')
    # Obtaining the member 'join' of a type (line 2236)
    join_43744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2236, 11), path_43743, 'join')
    # Calling join(args, kwargs) (line 2236)
    join_call_result_43762 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 11), join_43744, *[subscript_call_result_43752, subscript_call_result_43760], **kwargs_43761)
    
    # Getting the type of 'absprefix' (line 2236)
    absprefix_43763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 67), 'absprefix')
    # Applying the binary operator '!=' (line 2236)
    result_ne_43764 = python_operator(stypy.reporting.localization.Localization(__file__, 2236, 11), '!=', join_call_result_43762, absprefix_43763)
    
    
    
    # Call to join(...): (line 2237)
    # Processing the call arguments (line 2237)
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 2237)
    # Processing the call arguments (line 2237)
    # Getting the type of 'd' (line 2237)
    d_43769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 37), 'd', False)
    # Processing the call keyword arguments (line 2237)
    kwargs_43770 = {}
    # Getting the type of 'len' (line 2237)
    len_43768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 33), 'len', False)
    # Calling len(args, kwargs) (line 2237)
    len_call_result_43771 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 33), len_43768, *[d_43769], **kwargs_43770)
    
    slice_43772 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2237, 27), None, len_call_result_43771, None)
    # Getting the type of 'path' (line 2237)
    path_43773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 27), 'path', False)
    # Obtaining the member '__getitem__' of a type (line 2237)
    getitem___43774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2237, 27), path_43773, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2237)
    subscript_call_result_43775 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 27), getitem___43774, slice_43772)
    
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 2237)
    # Processing the call arguments (line 2237)
    # Getting the type of 'd' (line 2237)
    d_43777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 51), 'd', False)
    # Processing the call keyword arguments (line 2237)
    kwargs_43778 = {}
    # Getting the type of 'len' (line 2237)
    len_43776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 47), 'len', False)
    # Calling len(args, kwargs) (line 2237)
    len_call_result_43779 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 47), len_43776, *[d_43777], **kwargs_43778)
    
    slice_43780 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2237, 42), len_call_result_43779, None, None)
    # Getting the type of 'path' (line 2237)
    path_43781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 42), 'path', False)
    # Obtaining the member '__getitem__' of a type (line 2237)
    getitem___43782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2237, 42), path_43781, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2237)
    subscript_call_result_43783 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 42), getitem___43782, slice_43780)
    
    # Processing the call keyword arguments (line 2237)
    kwargs_43784 = {}
    # Getting the type of 'os' (line 2237)
    os_43765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 14), 'os', False)
    # Obtaining the member 'path' of a type (line 2237)
    path_43766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2237, 14), os_43765, 'path')
    # Obtaining the member 'join' of a type (line 2237)
    join_43767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2237, 14), path_43766, 'join')
    # Calling join(args, kwargs) (line 2237)
    join_call_result_43785 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 14), join_43767, *[subscript_call_result_43775, subscript_call_result_43783], **kwargs_43784)
    
    # Getting the type of 'path' (line 2237)
    path_43786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 60), 'path')
    # Applying the binary operator '!=' (line 2237)
    result_ne_43787 = python_operator(stypy.reporting.localization.Localization(__file__, 2237, 14), '!=', join_call_result_43785, path_43786)
    
    # Applying the binary operator 'or' (line 2236)
    result_or_keyword_43788 = python_operator(stypy.reporting.localization.Localization(__file__, 2236, 11), 'or', result_ne_43764, result_ne_43787)
    
    # Testing the type of an if condition (line 2236)
    if_condition_43789 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2236, 8), result_or_keyword_43788)
    # Assigning a type to the variable 'if_condition_43789' (line 2236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 8), 'if_condition_43789', if_condition_43789)
    # SSA begins for if statement (line 2236)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2239):
    
    # Assigning a Call to a Name (line 2239):
    
    # Call to dirname(...): (line 2239)
    # Processing the call arguments (line 2239)
    # Getting the type of 'd' (line 2239)
    d_43793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 32), 'd', False)
    # Processing the call keyword arguments (line 2239)
    kwargs_43794 = {}
    # Getting the type of 'os' (line 2239)
    os_43790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 16), 'os', False)
    # Obtaining the member 'path' of a type (line 2239)
    path_43791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 16), os_43790, 'path')
    # Obtaining the member 'dirname' of a type (line 2239)
    dirname_43792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 16), path_43791, 'dirname')
    # Calling dirname(args, kwargs) (line 2239)
    dirname_call_result_43795 = invoke(stypy.reporting.localization.Localization(__file__, 2239, 16), dirname_43792, *[d_43793], **kwargs_43794)
    
    # Assigning a type to the variable 'd' (line 2239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2239, 12), 'd', dirname_call_result_43795)
    # SSA join for if statement (line 2236)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2240):
    
    # Assigning a Subscript to a Name (line 2240):
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 2240)
    # Processing the call arguments (line 2240)
    # Getting the type of 'd' (line 2240)
    d_43797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 27), 'd', False)
    # Processing the call keyword arguments (line 2240)
    kwargs_43798 = {}
    # Getting the type of 'len' (line 2240)
    len_43796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 23), 'len', False)
    # Calling len(args, kwargs) (line 2240)
    len_call_result_43799 = invoke(stypy.reporting.localization.Localization(__file__, 2240, 23), len_43796, *[d_43797], **kwargs_43798)
    
    slice_43800 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2240, 18), len_call_result_43799, None, None)
    # Getting the type of 'path' (line 2240)
    path_43801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 18), 'path')
    # Obtaining the member '__getitem__' of a type (line 2240)
    getitem___43802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2240, 18), path_43801, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2240)
    subscript_call_result_43803 = invoke(stypy.reporting.localization.Localization(__file__, 2240, 18), getitem___43802, slice_43800)
    
    # Assigning a type to the variable 'subpath' (line 2240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2240, 8), 'subpath', subscript_call_result_43803)
    
    
    # Call to isabs(...): (line 2241)
    # Processing the call arguments (line 2241)
    # Getting the type of 'subpath' (line 2241)
    subpath_43807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 25), 'subpath', False)
    # Processing the call keyword arguments (line 2241)
    kwargs_43808 = {}
    # Getting the type of 'os' (line 2241)
    os_43804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 2241)
    path_43805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2241, 11), os_43804, 'path')
    # Obtaining the member 'isabs' of a type (line 2241)
    isabs_43806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2241, 11), path_43805, 'isabs')
    # Calling isabs(args, kwargs) (line 2241)
    isabs_call_result_43809 = invoke(stypy.reporting.localization.Localization(__file__, 2241, 11), isabs_43806, *[subpath_43807], **kwargs_43808)
    
    # Testing the type of an if condition (line 2241)
    if_condition_43810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2241, 8), isabs_call_result_43809)
    # Assigning a type to the variable 'if_condition_43810' (line 2241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 8), 'if_condition_43810', if_condition_43810)
    # SSA begins for if statement (line 2241)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2242):
    
    # Assigning a Subscript to a Name (line 2242):
    
    # Obtaining the type of the subscript
    int_43811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 30), 'int')
    slice_43812 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2242, 22), int_43811, None, None)
    # Getting the type of 'subpath' (line 2242)
    subpath_43813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 22), 'subpath')
    # Obtaining the member '__getitem__' of a type (line 2242)
    getitem___43814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2242, 22), subpath_43813, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2242)
    subscript_call_result_43815 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 22), getitem___43814, slice_43812)
    
    # Assigning a type to the variable 'subpath' (line 2242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 12), 'subpath', subscript_call_result_43815)
    # SSA join for if statement (line 2241)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2231)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2244):
    
    # Assigning a Name to a Name (line 2244):
    # Getting the type of 'path' (line 2244)
    path_43816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 18), 'path')
    # Assigning a type to the variable 'subpath' (line 2244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 8), 'subpath', path_43816)
    # SSA join for if statement (line 2231)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to normpath(...): (line 2245)
    # Processing the call arguments (line 2245)
    
    # Call to njoin(...): (line 2245)
    # Processing the call arguments (line 2245)
    # Getting the type of 'drive' (line 2245)
    drive_43821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 34), 'drive', False)
    # Getting the type of 'prefix' (line 2245)
    prefix_43822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 42), 'prefix', False)
    # Applying the binary operator '+' (line 2245)
    result_add_43823 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 34), '+', drive_43821, prefix_43822)
    
    # Getting the type of 'subpath' (line 2245)
    subpath_43824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 50), 'subpath', False)
    # Processing the call keyword arguments (line 2245)
    kwargs_43825 = {}
    # Getting the type of 'njoin' (line 2245)
    njoin_43820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 28), 'njoin', False)
    # Calling njoin(args, kwargs) (line 2245)
    njoin_call_result_43826 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 28), njoin_43820, *[result_add_43823, subpath_43824], **kwargs_43825)
    
    # Processing the call keyword arguments (line 2245)
    kwargs_43827 = {}
    # Getting the type of 'os' (line 2245)
    os_43817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 2245)
    path_43818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 11), os_43817, 'path')
    # Obtaining the member 'normpath' of a type (line 2245)
    normpath_43819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 11), path_43818, 'normpath')
    # Calling normpath(args, kwargs) (line 2245)
    normpath_call_result_43828 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 11), normpath_43819, *[njoin_call_result_43826], **kwargs_43827)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 4), 'stypy_return_type', normpath_call_result_43828)
    
    # ################# End of 'appendpath(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'appendpath' in the type store
    # Getting the type of 'stypy_return_type' (line 2226)
    stypy_return_type_43829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43829)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'appendpath'
    return stypy_return_type_43829

# Assigning a type to the variable 'appendpath' (line 2226)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 0), 'appendpath', appendpath)

@norecursion
def generate_config_py(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'generate_config_py'
    module_type_store = module_type_store.open_function_context('generate_config_py', 2247, 0, False)
    
    # Passed parameters checking function
    generate_config_py.stypy_localization = localization
    generate_config_py.stypy_type_of_self = None
    generate_config_py.stypy_type_store = module_type_store
    generate_config_py.stypy_function_name = 'generate_config_py'
    generate_config_py.stypy_param_names_list = ['target']
    generate_config_py.stypy_varargs_param_name = None
    generate_config_py.stypy_kwargs_param_name = None
    generate_config_py.stypy_call_defaults = defaults
    generate_config_py.stypy_call_varargs = varargs
    generate_config_py.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'generate_config_py', ['target'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'generate_config_py', localization, ['target'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'generate_config_py(...)' code ##################

    str_43830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2253, (-1)), 'str', "Generate config.py file containing system_info information\n    used during building the package.\n\n    Usage:\n        config['py_modules'].append((packagename, '__config__',generate_config_py))\n    ")
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2254, 4))
    
    # 'from numpy.distutils.system_info import system_info' statement (line 2254)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
    import_43831 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2254, 4), 'numpy.distutils.system_info')

    if (type(import_43831) is not StypyTypeError):

        if (import_43831 != 'pyd_module'):
            __import__(import_43831)
            sys_modules_43832 = sys.modules[import_43831]
            import_from_module(stypy.reporting.localization.Localization(__file__, 2254, 4), 'numpy.distutils.system_info', sys_modules_43832.module_type_store, module_type_store, ['system_info'])
            nest_module(stypy.reporting.localization.Localization(__file__, 2254, 4), __file__, sys_modules_43832, sys_modules_43832.module_type_store, module_type_store)
        else:
            from numpy.distutils.system_info import system_info

            import_from_module(stypy.reporting.localization.Localization(__file__, 2254, 4), 'numpy.distutils.system_info', None, module_type_store, ['system_info'], [system_info])

    else:
        # Assigning a type to the variable 'numpy.distutils.system_info' (line 2254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2254, 4), 'numpy.distutils.system_info', import_43831)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2255, 4))
    
    # 'from distutils.dir_util import mkpath' statement (line 2255)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
    import_43833 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2255, 4), 'distutils.dir_util')

    if (type(import_43833) is not StypyTypeError):

        if (import_43833 != 'pyd_module'):
            __import__(import_43833)
            sys_modules_43834 = sys.modules[import_43833]
            import_from_module(stypy.reporting.localization.Localization(__file__, 2255, 4), 'distutils.dir_util', sys_modules_43834.module_type_store, module_type_store, ['mkpath'])
            nest_module(stypy.reporting.localization.Localization(__file__, 2255, 4), __file__, sys_modules_43834, sys_modules_43834.module_type_store, module_type_store)
        else:
            from distutils.dir_util import mkpath

            import_from_module(stypy.reporting.localization.Localization(__file__, 2255, 4), 'distutils.dir_util', None, module_type_store, ['mkpath'], [mkpath])

    else:
        # Assigning a type to the variable 'distutils.dir_util' (line 2255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2255, 4), 'distutils.dir_util', import_43833)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
    
    
    # Call to mkpath(...): (line 2256)
    # Processing the call arguments (line 2256)
    
    # Call to dirname(...): (line 2256)
    # Processing the call arguments (line 2256)
    # Getting the type of 'target' (line 2256)
    target_43839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 27), 'target', False)
    # Processing the call keyword arguments (line 2256)
    kwargs_43840 = {}
    # Getting the type of 'os' (line 2256)
    os_43836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 2256)
    path_43837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2256, 11), os_43836, 'path')
    # Obtaining the member 'dirname' of a type (line 2256)
    dirname_43838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2256, 11), path_43837, 'dirname')
    # Calling dirname(args, kwargs) (line 2256)
    dirname_call_result_43841 = invoke(stypy.reporting.localization.Localization(__file__, 2256, 11), dirname_43838, *[target_43839], **kwargs_43840)
    
    # Processing the call keyword arguments (line 2256)
    kwargs_43842 = {}
    # Getting the type of 'mkpath' (line 2256)
    mkpath_43835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 4), 'mkpath', False)
    # Calling mkpath(args, kwargs) (line 2256)
    mkpath_call_result_43843 = invoke(stypy.reporting.localization.Localization(__file__, 2256, 4), mkpath_43835, *[dirname_call_result_43841], **kwargs_43842)
    
    
    # Assigning a Call to a Name (line 2257):
    
    # Assigning a Call to a Name (line 2257):
    
    # Call to open(...): (line 2257)
    # Processing the call arguments (line 2257)
    # Getting the type of 'target' (line 2257)
    target_43845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 13), 'target', False)
    str_43846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2257, 21), 'str', 'w')
    # Processing the call keyword arguments (line 2257)
    kwargs_43847 = {}
    # Getting the type of 'open' (line 2257)
    open_43844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 8), 'open', False)
    # Calling open(args, kwargs) (line 2257)
    open_call_result_43848 = invoke(stypy.reporting.localization.Localization(__file__, 2257, 8), open_43844, *[target_43845, str_43846], **kwargs_43847)
    
    # Assigning a type to the variable 'f' (line 2257)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2257, 4), 'f', open_call_result_43848)
    
    # Call to write(...): (line 2258)
    # Processing the call arguments (line 2258)
    str_43851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2258, 12), 'str', '# This file is generated by %s\n')
    
    # Call to abspath(...): (line 2258)
    # Processing the call arguments (line 2258)
    
    # Obtaining the type of the subscript
    int_43855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2258, 75), 'int')
    # Getting the type of 'sys' (line 2258)
    sys_43856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 66), 'sys', False)
    # Obtaining the member 'argv' of a type (line 2258)
    argv_43857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 66), sys_43856, 'argv')
    # Obtaining the member '__getitem__' of a type (line 2258)
    getitem___43858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 66), argv_43857, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2258)
    subscript_call_result_43859 = invoke(stypy.reporting.localization.Localization(__file__, 2258, 66), getitem___43858, int_43855)
    
    # Processing the call keyword arguments (line 2258)
    kwargs_43860 = {}
    # Getting the type of 'os' (line 2258)
    os_43852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 50), 'os', False)
    # Obtaining the member 'path' of a type (line 2258)
    path_43853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 50), os_43852, 'path')
    # Obtaining the member 'abspath' of a type (line 2258)
    abspath_43854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 50), path_43853, 'abspath')
    # Calling abspath(args, kwargs) (line 2258)
    abspath_call_result_43861 = invoke(stypy.reporting.localization.Localization(__file__, 2258, 50), abspath_43854, *[subscript_call_result_43859], **kwargs_43860)
    
    # Applying the binary operator '%' (line 2258)
    result_mod_43862 = python_operator(stypy.reporting.localization.Localization(__file__, 2258, 12), '%', str_43851, abspath_call_result_43861)
    
    # Processing the call keyword arguments (line 2258)
    kwargs_43863 = {}
    # Getting the type of 'f' (line 2258)
    f_43849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 4), 'f', False)
    # Obtaining the member 'write' of a type (line 2258)
    write_43850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 4), f_43849, 'write')
    # Calling write(args, kwargs) (line 2258)
    write_call_result_43864 = invoke(stypy.reporting.localization.Localization(__file__, 2258, 4), write_43850, *[result_mod_43862], **kwargs_43863)
    
    
    # Call to write(...): (line 2259)
    # Processing the call arguments (line 2259)
    str_43867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 12), 'str', '# It contains system_info results at the time of building this package.\n')
    # Processing the call keyword arguments (line 2259)
    kwargs_43868 = {}
    # Getting the type of 'f' (line 2259)
    f_43865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 4), 'f', False)
    # Obtaining the member 'write' of a type (line 2259)
    write_43866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 4), f_43865, 'write')
    # Calling write(args, kwargs) (line 2259)
    write_call_result_43869 = invoke(stypy.reporting.localization.Localization(__file__, 2259, 4), write_43866, *[str_43867], **kwargs_43868)
    
    
    # Call to write(...): (line 2260)
    # Processing the call arguments (line 2260)
    str_43872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 12), 'str', '__all__ = ["get_info","show"]\n\n')
    # Processing the call keyword arguments (line 2260)
    kwargs_43873 = {}
    # Getting the type of 'f' (line 2260)
    f_43870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 4), 'f', False)
    # Obtaining the member 'write' of a type (line 2260)
    write_43871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2260, 4), f_43870, 'write')
    # Calling write(args, kwargs) (line 2260)
    write_call_result_43874 = invoke(stypy.reporting.localization.Localization(__file__, 2260, 4), write_43871, *[str_43872], **kwargs_43873)
    
    
    
    # Call to items(...): (line 2261)
    # Processing the call keyword arguments (line 2261)
    kwargs_43878 = {}
    # Getting the type of 'system_info' (line 2261)
    system_info_43875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 16), 'system_info', False)
    # Obtaining the member 'saved_results' of a type (line 2261)
    saved_results_43876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 16), system_info_43875, 'saved_results')
    # Obtaining the member 'items' of a type (line 2261)
    items_43877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 16), saved_results_43876, 'items')
    # Calling items(args, kwargs) (line 2261)
    items_call_result_43879 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 16), items_43877, *[], **kwargs_43878)
    
    # Testing the type of a for loop iterable (line 2261)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2261, 4), items_call_result_43879)
    # Getting the type of the for loop variable (line 2261)
    for_loop_var_43880 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2261, 4), items_call_result_43879)
    # Assigning a type to the variable 'k' (line 2261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 4), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2261, 4), for_loop_var_43880))
    # Assigning a type to the variable 'i' (line 2261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2261, 4), for_loop_var_43880))
    # SSA begins for a for statement (line 2261)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to write(...): (line 2262)
    # Processing the call arguments (line 2262)
    str_43883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 16), 'str', '%s=%r\n')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2262)
    tuple_43884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2262)
    # Adding element type (line 2262)
    # Getting the type of 'k' (line 2262)
    k_43885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 29), 'k', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2262, 29), tuple_43884, k_43885)
    # Adding element type (line 2262)
    # Getting the type of 'i' (line 2262)
    i_43886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 32), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2262, 29), tuple_43884, i_43886)
    
    # Applying the binary operator '%' (line 2262)
    result_mod_43887 = python_operator(stypy.reporting.localization.Localization(__file__, 2262, 16), '%', str_43883, tuple_43884)
    
    # Processing the call keyword arguments (line 2262)
    kwargs_43888 = {}
    # Getting the type of 'f' (line 2262)
    f_43881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 8), 'f', False)
    # Obtaining the member 'write' of a type (line 2262)
    write_43882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2262, 8), f_43881, 'write')
    # Calling write(args, kwargs) (line 2262)
    write_call_result_43889 = invoke(stypy.reporting.localization.Localization(__file__, 2262, 8), write_43882, *[result_mod_43887], **kwargs_43888)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to write(...): (line 2263)
    # Processing the call arguments (line 2263)
    str_43892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2279, (-1)), 'str', '\ndef get_info(name):\n    g = globals()\n    return g.get(name, g.get(name + "_info", {}))\n\ndef show():\n    for name,info_dict in globals().items():\n        if name[0] == "_" or type(info_dict) is not type({}): continue\n        print(name + ":")\n        if not info_dict:\n            print("  NOT AVAILABLE")\n        for k,v in info_dict.items():\n            v = str(v)\n            if k == "sources" and len(v) > 200:\n                v = v[:60] + " ...\\n... " + v[-60:]\n            print("    %s = %s" % (k,v))\n    ')
    # Processing the call keyword arguments (line 2263)
    kwargs_43893 = {}
    # Getting the type of 'f' (line 2263)
    f_43890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 4), 'f', False)
    # Obtaining the member 'write' of a type (line 2263)
    write_43891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2263, 4), f_43890, 'write')
    # Calling write(args, kwargs) (line 2263)
    write_call_result_43894 = invoke(stypy.reporting.localization.Localization(__file__, 2263, 4), write_43891, *[str_43892], **kwargs_43893)
    
    
    # Call to close(...): (line 2281)
    # Processing the call keyword arguments (line 2281)
    kwargs_43897 = {}
    # Getting the type of 'f' (line 2281)
    f_43895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2281, 4), 'f', False)
    # Obtaining the member 'close' of a type (line 2281)
    close_43896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2281, 4), f_43895, 'close')
    # Calling close(args, kwargs) (line 2281)
    close_call_result_43898 = invoke(stypy.reporting.localization.Localization(__file__, 2281, 4), close_43896, *[], **kwargs_43897)
    
    # Getting the type of 'target' (line 2282)
    target_43899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 11), 'target')
    # Assigning a type to the variable 'stypy_return_type' (line 2282)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 4), 'stypy_return_type', target_43899)
    
    # ################# End of 'generate_config_py(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'generate_config_py' in the type store
    # Getting the type of 'stypy_return_type' (line 2247)
    stypy_return_type_43900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43900)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'generate_config_py'
    return stypy_return_type_43900

# Assigning a type to the variable 'generate_config_py' (line 2247)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2247, 0), 'generate_config_py', generate_config_py)

@norecursion
def msvc_version(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'msvc_version'
    module_type_store = module_type_store.open_function_context('msvc_version', 2284, 0, False)
    
    # Passed parameters checking function
    msvc_version.stypy_localization = localization
    msvc_version.stypy_type_of_self = None
    msvc_version.stypy_type_store = module_type_store
    msvc_version.stypy_function_name = 'msvc_version'
    msvc_version.stypy_param_names_list = ['compiler']
    msvc_version.stypy_varargs_param_name = None
    msvc_version.stypy_kwargs_param_name = None
    msvc_version.stypy_call_defaults = defaults
    msvc_version.stypy_call_varargs = varargs
    msvc_version.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'msvc_version', ['compiler'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'msvc_version', localization, ['compiler'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'msvc_version(...)' code ##################

    str_43901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2286, (-1)), 'str', 'Return version major and minor of compiler instance if it is\n    MSVC, raise an exception otherwise.')
    
    
    
    # Getting the type of 'compiler' (line 2287)
    compiler_43902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 11), 'compiler')
    # Obtaining the member 'compiler_type' of a type (line 2287)
    compiler_type_43903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2287, 11), compiler_43902, 'compiler_type')
    str_43904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2287, 37), 'str', 'msvc')
    # Applying the binary operator '==' (line 2287)
    result_eq_43905 = python_operator(stypy.reporting.localization.Localization(__file__, 2287, 11), '==', compiler_type_43903, str_43904)
    
    # Applying the 'not' unary operator (line 2287)
    result_not__43906 = python_operator(stypy.reporting.localization.Localization(__file__, 2287, 7), 'not', result_eq_43905)
    
    # Testing the type of an if condition (line 2287)
    if_condition_43907 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2287, 4), result_not__43906)
    # Assigning a type to the variable 'if_condition_43907' (line 2287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2287, 4), 'if_condition_43907', if_condition_43907)
    # SSA begins for if statement (line 2287)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2288)
    # Processing the call arguments (line 2288)
    str_43909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2288, 25), 'str', 'Compiler instance is not msvc (%s)')
    # Getting the type of 'compiler' (line 2289)
    compiler_43910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 27), 'compiler', False)
    # Obtaining the member 'compiler_type' of a type (line 2289)
    compiler_type_43911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2289, 27), compiler_43910, 'compiler_type')
    # Applying the binary operator '%' (line 2288)
    result_mod_43912 = python_operator(stypy.reporting.localization.Localization(__file__, 2288, 25), '%', str_43909, compiler_type_43911)
    
    # Processing the call keyword arguments (line 2288)
    kwargs_43913 = {}
    # Getting the type of 'ValueError' (line 2288)
    ValueError_43908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2288, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2288)
    ValueError_call_result_43914 = invoke(stypy.reporting.localization.Localization(__file__, 2288, 14), ValueError_43908, *[result_mod_43912], **kwargs_43913)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2288, 8), ValueError_call_result_43914, 'raise parameter', BaseException)
    # SSA join for if statement (line 2287)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'compiler' (line 2290)
    compiler_43915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 11), 'compiler')
    # Obtaining the member '_MSVCCompiler__version' of a type (line 2290)
    _MSVCCompiler__version_43916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2290, 11), compiler_43915, '_MSVCCompiler__version')
    # Assigning a type to the variable 'stypy_return_type' (line 2290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 4), 'stypy_return_type', _MSVCCompiler__version_43916)
    
    # ################# End of 'msvc_version(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'msvc_version' in the type store
    # Getting the type of 'stypy_return_type' (line 2284)
    stypy_return_type_43917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43917)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'msvc_version'
    return stypy_return_type_43917

# Assigning a type to the variable 'msvc_version' (line 2284)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 0), 'msvc_version', msvc_version)



# Obtaining the type of the subscript
int_43918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2292, 16), 'int')
slice_43919 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2292, 3), None, int_43918, None)
# Getting the type of 'sys' (line 2292)
sys_43920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 3), 'sys')
# Obtaining the member 'version' of a type (line 2292)
version_43921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2292, 3), sys_43920, 'version')
# Obtaining the member '__getitem__' of a type (line 2292)
getitem___43922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2292, 3), version_43921, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 2292)
subscript_call_result_43923 = invoke(stypy.reporting.localization.Localization(__file__, 2292, 3), getitem___43922, slice_43919)

str_43924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2292, 22), 'str', '2.5')
# Applying the binary operator '>=' (line 2292)
result_ge_43925 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 3), '>=', subscript_call_result_43923, str_43924)

# Testing the type of an if condition (line 2292)
if_condition_43926 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2292, 0), result_ge_43925)
# Assigning a type to the variable 'if_condition_43926' (line 2292)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2292, 0), 'if_condition_43926', if_condition_43926)
# SSA begins for if statement (line 2292)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def get_build_architecture(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_build_architecture'
    module_type_store = module_type_store.open_function_context('get_build_architecture', 2293, 4, False)
    
    # Passed parameters checking function
    get_build_architecture.stypy_localization = localization
    get_build_architecture.stypy_type_of_self = None
    get_build_architecture.stypy_type_store = module_type_store
    get_build_architecture.stypy_function_name = 'get_build_architecture'
    get_build_architecture.stypy_param_names_list = []
    get_build_architecture.stypy_varargs_param_name = None
    get_build_architecture.stypy_kwargs_param_name = None
    get_build_architecture.stypy_call_defaults = defaults
    get_build_architecture.stypy_call_varargs = varargs
    get_build_architecture.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_build_architecture', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_build_architecture', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_build_architecture(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2294, 8))
    
    # 'from distutils.msvccompiler import get_build_architecture' statement (line 2294)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
    import_43927 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2294, 8), 'distutils.msvccompiler')

    if (type(import_43927) is not StypyTypeError):

        if (import_43927 != 'pyd_module'):
            __import__(import_43927)
            sys_modules_43928 = sys.modules[import_43927]
            import_from_module(stypy.reporting.localization.Localization(__file__, 2294, 8), 'distutils.msvccompiler', sys_modules_43928.module_type_store, module_type_store, ['get_build_architecture'])
            nest_module(stypy.reporting.localization.Localization(__file__, 2294, 8), __file__, sys_modules_43928, sys_modules_43928.module_type_store, module_type_store)
        else:
            from distutils.msvccompiler import get_build_architecture

            import_from_module(stypy.reporting.localization.Localization(__file__, 2294, 8), 'distutils.msvccompiler', None, module_type_store, ['get_build_architecture'], [get_build_architecture])

    else:
        # Assigning a type to the variable 'distutils.msvccompiler' (line 2294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 8), 'distutils.msvccompiler', import_43927)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
    
    
    # Call to get_build_architecture(...): (line 2295)
    # Processing the call keyword arguments (line 2295)
    kwargs_43930 = {}
    # Getting the type of 'get_build_architecture' (line 2295)
    get_build_architecture_43929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 15), 'get_build_architecture', False)
    # Calling get_build_architecture(args, kwargs) (line 2295)
    get_build_architecture_call_result_43931 = invoke(stypy.reporting.localization.Localization(__file__, 2295, 15), get_build_architecture_43929, *[], **kwargs_43930)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 8), 'stypy_return_type', get_build_architecture_call_result_43931)
    
    # ################# End of 'get_build_architecture(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_build_architecture' in the type store
    # Getting the type of 'stypy_return_type' (line 2293)
    stypy_return_type_43932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43932)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_build_architecture'
    return stypy_return_type_43932

# Assigning a type to the variable 'get_build_architecture' (line 2293)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'get_build_architecture', get_build_architecture)
# SSA branch for the else part of an if statement (line 2292)
module_type_store.open_ssa_branch('else')

@norecursion
def get_build_architecture(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_build_architecture'
    module_type_store = module_type_store.open_function_context('get_build_architecture', 2298, 4, False)
    
    # Passed parameters checking function
    get_build_architecture.stypy_localization = localization
    get_build_architecture.stypy_type_of_self = None
    get_build_architecture.stypy_type_store = module_type_store
    get_build_architecture.stypy_function_name = 'get_build_architecture'
    get_build_architecture.stypy_param_names_list = []
    get_build_architecture.stypy_varargs_param_name = None
    get_build_architecture.stypy_kwargs_param_name = None
    get_build_architecture.stypy_call_defaults = defaults
    get_build_architecture.stypy_call_varargs = varargs
    get_build_architecture.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_build_architecture', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_build_architecture', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_build_architecture(...)' code ##################

    str_43933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2302, (-1)), 'str', 'Return the processor architecture.\n\n        Possible results are "Intel", "Itanium", or "AMD64".\n        ')
    
    # Assigning a Str to a Name (line 2303):
    
    # Assigning a Str to a Name (line 2303):
    str_43934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2303, 17), 'str', ' bit (')
    # Assigning a type to the variable 'prefix' (line 2303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2303, 8), 'prefix', str_43934)
    
    # Assigning a Call to a Name (line 2304):
    
    # Assigning a Call to a Name (line 2304):
    
    # Call to find(...): (line 2304)
    # Processing the call arguments (line 2304)
    # Getting the type of 'prefix' (line 2304)
    prefix_43938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 29), 'prefix', False)
    # Processing the call keyword arguments (line 2304)
    kwargs_43939 = {}
    # Getting the type of 'sys' (line 2304)
    sys_43935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 12), 'sys', False)
    # Obtaining the member 'version' of a type (line 2304)
    version_43936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 12), sys_43935, 'version')
    # Obtaining the member 'find' of a type (line 2304)
    find_43937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 12), version_43936, 'find')
    # Calling find(args, kwargs) (line 2304)
    find_call_result_43940 = invoke(stypy.reporting.localization.Localization(__file__, 2304, 12), find_43937, *[prefix_43938], **kwargs_43939)
    
    # Assigning a type to the variable 'i' (line 2304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 8), 'i', find_call_result_43940)
    
    
    # Getting the type of 'i' (line 2305)
    i_43941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 11), 'i')
    int_43942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 16), 'int')
    # Applying the binary operator '==' (line 2305)
    result_eq_43943 = python_operator(stypy.reporting.localization.Localization(__file__, 2305, 11), '==', i_43941, int_43942)
    
    # Testing the type of an if condition (line 2305)
    if_condition_43944 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2305, 8), result_eq_43943)
    # Assigning a type to the variable 'if_condition_43944' (line 2305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2305, 8), 'if_condition_43944', if_condition_43944)
    # SSA begins for if statement (line 2305)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    str_43945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2306, 19), 'str', 'Intel')
    # Assigning a type to the variable 'stypy_return_type' (line 2306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2306, 12), 'stypy_return_type', str_43945)
    # SSA join for if statement (line 2305)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2307):
    
    # Assigning a Call to a Name (line 2307):
    
    # Call to find(...): (line 2307)
    # Processing the call arguments (line 2307)
    str_43949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2307, 29), 'str', ')')
    # Getting the type of 'i' (line 2307)
    i_43950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 34), 'i', False)
    # Processing the call keyword arguments (line 2307)
    kwargs_43951 = {}
    # Getting the type of 'sys' (line 2307)
    sys_43946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 12), 'sys', False)
    # Obtaining the member 'version' of a type (line 2307)
    version_43947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 12), sys_43946, 'version')
    # Obtaining the member 'find' of a type (line 2307)
    find_43948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 12), version_43947, 'find')
    # Calling find(args, kwargs) (line 2307)
    find_call_result_43952 = invoke(stypy.reporting.localization.Localization(__file__, 2307, 12), find_43948, *[str_43949, i_43950], **kwargs_43951)
    
    # Assigning a type to the variable 'j' (line 2307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'j', find_call_result_43952)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2308)
    i_43953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 27), 'i')
    
    # Call to len(...): (line 2308)
    # Processing the call arguments (line 2308)
    # Getting the type of 'prefix' (line 2308)
    prefix_43955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 33), 'prefix', False)
    # Processing the call keyword arguments (line 2308)
    kwargs_43956 = {}
    # Getting the type of 'len' (line 2308)
    len_43954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 29), 'len', False)
    # Calling len(args, kwargs) (line 2308)
    len_call_result_43957 = invoke(stypy.reporting.localization.Localization(__file__, 2308, 29), len_43954, *[prefix_43955], **kwargs_43956)
    
    # Applying the binary operator '+' (line 2308)
    result_add_43958 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 27), '+', i_43953, len_call_result_43957)
    
    # Getting the type of 'j' (line 2308)
    j_43959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 41), 'j')
    slice_43960 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2308, 15), result_add_43958, j_43959, None)
    # Getting the type of 'sys' (line 2308)
    sys_43961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 15), 'sys')
    # Obtaining the member 'version' of a type (line 2308)
    version_43962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 15), sys_43961, 'version')
    # Obtaining the member '__getitem__' of a type (line 2308)
    getitem___43963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 15), version_43962, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2308)
    subscript_call_result_43964 = invoke(stypy.reporting.localization.Localization(__file__, 2308, 15), getitem___43963, slice_43960)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'stypy_return_type', subscript_call_result_43964)
    
    # ################# End of 'get_build_architecture(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_build_architecture' in the type store
    # Getting the type of 'stypy_return_type' (line 2298)
    stypy_return_type_43965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 4), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43965)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_build_architecture'
    return stypy_return_type_43965

# Assigning a type to the variable 'get_build_architecture' (line 2298)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 4), 'get_build_architecture', get_build_architecture)
# SSA join for if statement (line 2292)
module_type_store = module_type_store.join_ssa_context()


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
